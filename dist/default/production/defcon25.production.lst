

Microchip Technology PIC LITE Macro Assembler V1.42 build -159332390 
                                                                                               Wed Jul 26 07:49:51 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	16LF18346
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	idataBANK3,global,class=CODE,delta=2
     7                           	psect	idataBANK4,global,class=CODE,delta=2
     8                           	psect	idataBANK5,global,class=CODE,delta=2
     9                           	psect	idataBANK6,global,class=CODE,delta=2
    10                           	psect	idataBANK7,global,class=CODE,delta=2
    11                           	psect	idataBANK8,global,class=CODE,delta=2
    12                           	psect	idataBANK10,global,class=CODE,delta=2
    13                           	psect	idataBIGRAM,global,class=CODE,delta=2
    14                           	psect	stringtext1,global,class=STRCODE,delta=2
    15                           	psect	stringtext2,global,class=STRCODE,delta=2
    16                           	psect	stringtext3,global,class=STRCODE,delta=2
    17                           	psect	stringtext4,global,class=STRCODE,delta=2
    18                           	psect	stringtext5,global,class=STRCODE,delta=2
    19                           	psect	stringtext6,global,class=STRCODE,delta=2
    20                           	psect	stringtext7,global,class=STRCODE,delta=2
    21                           	psect	stringtext8,global,class=STRCODE,delta=2
    22                           	psect	stringtext9,global,class=STRCODE,delta=2
    23                           	psect	stringtext10,global,class=STRCODE,delta=2
    24                           	psect	stringtext11,global,class=STRCODE,delta=2
    25                           	psect	stringtext12,global,class=STRCODE,delta=2
    26                           	psect	stringtext13,global,class=STRCODE,delta=2
    27                           	psect	stringtext14,global,class=STRCODE,delta=2
    28                           	psect	stringtext15,global,class=STRCODE,delta=2
    29                           	psect	stringtext16,global,class=STRCODE,delta=2
    30                           	psect	stringtext17,global,class=STRCODE,delta=2
    31                           	psect	stringtext18,global,class=STRCODE,delta=2
    32                           	psect	stringtext19,global,class=STRCODE,delta=2
    33                           	psect	stringtext20,global,class=STRCODE,delta=2
    34                           	psect	stringtext21,global,class=STRCODE,delta=2
    35                           	psect	stringtext22,global,class=STRCODE,delta=2
    36                           	psect	stringtext23,global,class=STRCODE,delta=2
    37                           	psect	stringtext24,global,class=STRCODE,delta=2
    38                           	psect	stringtext25,global,class=STRCODE,delta=2
    39                           	psect	stringtext26,global,class=STRCODE,delta=2
    40                           	psect	stringtext27,global,class=STRCODE,delta=2
    41                           	psect	stringtext28,global,class=STRCODE,delta=2
    42                           	psect	stringtext29,global,class=STRCODE,delta=2
    43                           	psect	stringtext30,global,class=STRCODE,delta=2
    44                           	psect	stringtext31,global,class=STRCODE,delta=2
    45                           	psect	stringtext32,global,class=STRCODE,delta=2
    46                           	psect	stringtext33,global,class=STRCODE,delta=2
    47                           	psect	stringtext34,global,class=STRCODE,delta=2
    48                           	psect	stringtext35,global,class=STRCODE,delta=2
    49                           	psect	stringtext36,global,class=STRCODE,delta=2
    50                           	psect	stringtext37,global,class=STRCODE,delta=2
    51                           	psect	stringtext38,global,class=STRCODE,delta=2
    52                           	psect	stringtext39,global,class=STRCODE,delta=2
    53                           	psect	stringtext40,global,class=STRCODE,delta=2
    54                           	psect	stringtext41,global,class=STRCODE,delta=2
    55                           	psect	stringtext42,global,class=STRCODE,delta=2
    56                           	psect	stringtext43,global,class=STRCODE,delta=2
    57                           	psect	stringtext44,global,class=STRCODE,delta=2
    58                           	psect	stringtext45,global,class=STRCODE,delta=2
    59                           	psect	stringtext46,global,class=STRCODE,delta=2
    60                           	psect	stringtext47,global,class=STRCODE,delta=2
    61                           	psect	stringtext48,global,class=STRCODE,delta=2
    62                           	psect	stringtext49,global,class=STRCODE,delta=2
    63                           	psect	stringtext50,global,class=STRCODE,delta=2
    64                           	psect	stringtext51,global,class=STRCODE,delta=2
    65                           	psect	stringtext52,global,class=STRCODE,delta=2
    66                           	psect	stringtext53,global,class=STRCODE,delta=2
    67                           	psect	stringtext54,global,class=STRCODE,delta=2
    68                           	psect	stringtext55,global,class=STRCODE,delta=2
    69                           	psect	stringtext56,global,class=STRCODE,delta=2
    70                           	psect	stringtext57,global,class=STRCODE,delta=2
    71                           	psect	stringtext58,global,class=STRCODE,delta=2
    72                           	psect	stringtext59,global,class=STRCODE,delta=2
    73                           	psect	stringtext60,global,class=STRCODE,delta=2
    74                           	psect	stringtext61,global,class=STRCODE,delta=2
    75                           	psect	stringtext62,global,class=STRCODE,delta=2
    76                           	psect	stringtext63,global,class=STRCODE,delta=2
    77                           	psect	stringtext64,global,class=STRCODE,delta=2
    78                           	psect	stringtext65,global,class=STRCODE,delta=2
    79                           	psect	stringtext66,global,class=STRCODE,delta=2
    80                           	psect	stringtext67,global,class=STRCODE,delta=2
    81                           	psect	stringtext68,global,class=STRCODE,delta=2
    82                           	psect	stringtext69,global,class=STRCODE,delta=2
    83                           	psect	stringtext70,global,class=STRCODE,delta=2
    84                           	psect	stringtext71,global,class=STRCODE,delta=2
    85                           	psect	stringtext72,global,class=STRCODE,delta=2
    86                           	psect	stringtext73,global,class=STRCODE,delta=2
    87                           	psect	stringtext74,global,class=STRCODE,delta=2
    88                           	psect	stringtext75,global,class=STRCODE,delta=2
    89                           	psect	stringtext76,global,class=STRCODE,delta=2
    90                           	psect	stringtext77,global,class=STRCODE,delta=2
    91                           	psect	cinit,global,class=CODE,merge=1,delta=2
    92                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    93                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    94                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    95                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    96                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    97                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    98                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    99                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
   100                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
   101                           	psect	dataBANK5,global,class=BANK5,space=1,delta=1
   102                           	psect	dataBANK6,global,class=BANK6,space=1,delta=1
   103                           	psect	dataBANK7,global,class=BANK7,space=1,delta=1
   104                           	psect	dataBANK8,global,class=BANK8,space=1,delta=1
   105                           	psect	bssBANK9,global,class=BANK9,space=1,delta=1
   106                           	psect	dataBANK10,global,class=BANK10,space=1,delta=1
   107                           	psect	bssBANK11,global,class=BANK11,space=1,delta=1
   108                           	psect	inittext,global,class=CODE,delta=2
   109                           	psect	clrtext,global,class=CODE,delta=2
   110                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
   111                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
   112                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
   113                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
   114                           	psect	text1,local,class=CODE,merge=1,delta=2
   115                           	psect	text2,local,class=CODE,merge=1,delta=2
   116                           	psect	text3,local,class=CODE,merge=1,delta=2
   117                           	psect	text4,local,class=CODE,merge=1,delta=2
   118                           	psect	text5,local,class=CODE,merge=1,delta=2
   119                           	psect	text6,local,class=CODE,merge=1,delta=2
   120                           	psect	text7,local,class=CODE,merge=1,delta=2
   121                           	psect	text8,local,class=CODE,merge=1,delta=2
   122                           	psect	text9,local,class=CODE,merge=1,delta=2
   123                           	psect	text10,local,class=CODE,merge=1,delta=2
   124                           	psect	text11,local,class=CODE,merge=1,delta=2
   125                           	psect	text12,local,class=CODE,merge=1,delta=2
   126                           	psect	text13,local,class=CODE,merge=1,delta=2
   127                           	psect	text14,local,class=CODE,merge=1,delta=2
   128                           	psect	text15,local,class=CODE,merge=1,delta=2
   129                           	psect	text16,local,class=CODE,merge=1,delta=2
   130                           	psect	text17,local,class=CODE,merge=1,delta=2
   131                           	psect	text18,local,class=CODE,merge=1,delta=2
   132                           	psect	swtext1,local,class=CONST,delta=2
   133                           	psect	text19,local,class=CODE,merge=1,delta=2
   134                           	psect	text20,local,class=CODE,merge=1,delta=2
   135                           	psect	text21,local,class=CODE,merge=1,delta=2
   136                           	psect	text22,local,class=CODE,merge=1,delta=2
   137                           	psect	text23,local,class=CODE,merge=1,delta=2
   138                           	psect	text24,local,class=CODE,merge=1,delta=2
   139                           	psect	text25,local,class=CODE,merge=1,delta=2
   140                           	psect	text26,local,class=CODE,merge=1,delta=2
   141                           	psect	text27,local,class=CODE,merge=1,delta=2
   142                           	psect	text28,local,class=CODE,merge=1,delta=2,group=2
   143                           	psect	text29,local,class=CODE,merge=1,delta=2
   144                           	psect	text30,local,class=CODE,merge=1,delta=2
   145                           	psect	text31,local,class=CODE,merge=1,delta=2
   146                           	psect	text32,local,class=CODE,merge=1,delta=2
   147                           	psect	text33,local,class=CODE,merge=1,delta=2
   148                           	psect	text34,local,class=CODE,merge=1,delta=2
   149                           	psect	text35,local,class=CODE,merge=1,delta=2
   150                           	psect	text36,local,class=CODE,merge=1,delta=2
   151                           	psect	text37,local,class=CODE,merge=1,delta=2
   152                           	psect	text38,local,class=CODE,merge=1,delta=2
   153                           	psect	text39,local,class=CODE,merge=1,delta=2
   154                           	psect	text40,local,class=CODE,merge=1,delta=2
   155                           	psect	text41,local,class=CODE,merge=1,delta=2,group=2
   156                           	psect	text42,local,class=CODE,merge=1,delta=2,group=2
   157                           	psect	text43,local,class=CODE,merge=1,delta=2
   158                           	psect	text44,local,class=CODE,merge=1,delta=2
   159                           	psect	text45,local,class=CODE,merge=1,delta=2
   160                           	psect	text46,local,class=CODE,merge=1,delta=2
   161                           	psect	text47,local,class=CODE,merge=1,delta=2
   162                           	psect	text48,local,class=CODE,merge=1,delta=2
   163                           	psect	text49,local,class=CODE,merge=1,delta=2
   164                           	psect	text50,local,class=CODE,merge=1,delta=2
   165                           	psect	text51,local,class=CODE,merge=1,delta=2
   166                           	psect	text52,local,class=CODE,merge=1,delta=2,group=2
   167                           	psect	text53,local,class=CODE,merge=1,delta=2,group=2
   168                           	psect	text54,local,class=CODE,merge=1,delta=2,group=2
   169                           	psect	text55,local,class=CODE,merge=1,delta=2
   170                           	psect	text56,local,class=CODE,merge=1,delta=2
   171                           	psect	text57,local,class=CODE,merge=1,delta=2
   172                           	psect	text58,local,class=CODE,merge=1,delta=2
   173                           	psect	text59,local,class=CODE,merge=1,delta=2
   174                           	psect	text60,local,class=CODE,merge=1,delta=2
   175                           	psect	text61,local,class=CODE,merge=1,delta=2
   176                           	psect	text62,local,class=CODE,merge=1,delta=2
   177                           	psect	text63,local,class=CODE,merge=1,delta=2
   178                           	psect	text64,local,class=CODE,merge=1,delta=2,group=2
   179                           	psect	text65,local,class=CODE,merge=1,delta=2
   180                           	psect	text66,local,class=CODE,merge=1,delta=2
   181                           	psect	text67,local,class=CODE,merge=1,delta=2
   182                           	psect	text68,local,class=CODE,merge=1,delta=2
   183                           	psect	text69,local,class=CODE,merge=1,delta=2
   184                           	psect	text70,local,class=CODE,merge=1,delta=2
   185                           	psect	text71,local,class=CODE,merge=1,delta=2
   186                           	psect	text72,local,class=CODE,merge=1,delta=2,group=2
   187                           	psect	text73,local,class=CODE,merge=1,delta=2,group=2
   188                           	psect	text74,local,class=CODE,merge=1,delta=2
   189                           	psect	text75,local,class=CODE,merge=1,delta=2
   190                           	psect	text76,local,class=CODE,merge=1,delta=2
   191                           	psect	text77,local,class=CODE,merge=1,delta=2
   192                           	psect	text78,local,class=CODE,merge=1,delta=2,group=2
   193                           	psect	text79,local,class=CODE,merge=1,delta=2
   194                           	psect	text80,local,class=CODE,merge=1,delta=2
   195                           	psect	text81,local,class=CODE,merge=1,delta=2
   196                           	psect	text82,local,class=CODE,merge=1,delta=2
   197                           	psect	text83,local,class=CODE,merge=1,delta=2
   198                           	psect	text84,local,class=CODE,merge=1,delta=2
   199                           	psect	text85,local,class=CODE,merge=1,delta=2
   200                           	psect	text86,local,class=CODE,merge=1,delta=2
   201                           	psect	text87,local,class=CODE,merge=1,delta=2
   202                           	psect	text88,local,class=CODE,merge=1,delta=2
   203                           	psect	text89,local,class=CODE,merge=1,delta=2
   204                           	psect	text90,local,class=CODE,merge=1,delta=2
   205                           	psect	text91,local,class=CODE,merge=1,delta=2
   206                           	psect	text92,local,class=CODE,merge=1,delta=2
   207                           	psect	text93,local,class=CODE,merge=1,delta=2
   208                           	psect	text94,local,class=CODE,merge=1,delta=2
   209                           	psect	text95,local,class=CODE,merge=1,delta=2
   210                           	psect	text96,local,class=CODE,merge=1,delta=2
   211                           	psect	text97,local,class=CODE,merge=1,delta=2
   212                           	psect	text98,local,class=CODE,merge=1,delta=2
   213                           	psect	text99,local,class=CODE,merge=1,delta=2
   214                           	psect	text100,local,class=CODE,merge=1,delta=2
   215                           	psect	text101,local,class=CODE,merge=1,delta=2
   216                           	psect	intentry,global,class=CODE,delta=2
   217                           	psect	text103,local,class=CODE,merge=1,delta=2
   218                           	psect	text104,local,class=CODE,merge=1,delta=2
   219                           	psect	text105,local,class=CODE,merge=1,delta=2
   220                           	dabs	1,0xCA0,32
   221                           	dabs	1,0xC20,80
   222                           	dabs	1,0xBA0,80
   223                           	dabs	1,0xB30,64
   224                           	dabs	1,0x26F0,0,_asciiCharTableLookup
   225                           	dabs	1,0x7E,2
   226  0000                     
   227                           ; Version 1.42
   228                           ; Generated 13/04/2017 GMT
   229                           ; 
   230                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   231                           ; All rights reserved.
   232                           ; 
   233                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   234                           ; 
   235                           ; Redistribution and use in source and binary forms, with or without modification, are
   236                           ; permitted provided that the following conditions are met:
   237                           ; 
   238                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   239                           ;        conditions and the following disclaimer.
   240                           ; 
   241                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   242                           ;        of conditions and the following disclaimer in the documentation and/or other
   243                           ;        materials provided with the distribution.
   244                           ; 
   245                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   246                           ;        software without specific prior written permission.
   247                           ; 
   248                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   249                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   250                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   251                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   252                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   253                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   254                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   255                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   256                           ; 
   257                           ; 
   258                           ; Code-generator required, PIC16LF18346 Definitions
   259                           ; 
   260                           ; SFR Addresses
   261  0000                     	;# 
   262  0001                     	;# 
   263  0002                     	;# 
   264  0003                     	;# 
   265  0004                     	;# 
   266  0005                     	;# 
   267  0006                     	;# 
   268  0007                     	;# 
   269  0008                     	;# 
   270  0009                     	;# 
   271  000A                     	;# 
   272  000B                     	;# 
   273  000C                     	;# 
   274  000D                     	;# 
   275  000E                     	;# 
   276  0010                     	;# 
   277  0011                     	;# 
   278  0012                     	;# 
   279  0013                     	;# 
   280  0014                     	;# 
   281  0015                     	;# 
   282  0015                     	;# 
   283  0016                     	;# 
   284  0016                     	;# 
   285  0017                     	;# 
   286  0018                     	;# 
   287  0019                     	;# 
   288  0019                     	;# 
   289  001A                     	;# 
   290  001B                     	;# 
   291  001C                     	;# 
   292  001D                     	;# 
   293  001E                     	;# 
   294  001F                     	;# 
   295  008C                     	;# 
   296  008D                     	;# 
   297  008E                     	;# 
   298  0090                     	;# 
   299  0091                     	;# 
   300  0092                     	;# 
   301  0093                     	;# 
   302  0094                     	;# 
   303  0097                     	;# 
   304  009B                     	;# 
   305  009B                     	;# 
   306  009C                     	;# 
   307  009D                     	;# 
   308  009E                     	;# 
   309  009F                     	;# 
   310  010C                     	;# 
   311  010D                     	;# 
   312  010E                     	;# 
   313  0111                     	;# 
   314  0112                     	;# 
   315  0113                     	;# 
   316  0114                     	;# 
   317  0115                     	;# 
   318  0116                     	;# 
   319  0117                     	;# 
   320  0118                     	;# 
   321  0119                     	;# 
   322  018C                     	;# 
   323  018D                     	;# 
   324  018E                     	;# 
   325  0199                     	;# 
   326  0199                     	;# 
   327  0199                     	;# 
   328  019A                     	;# 
   329  019A                     	;# 
   330  019A                     	;# 
   331  019B                     	;# 
   332  019B                     	;# 
   333  019B                     	;# 
   334  019B                     	;# 
   335  019B                     	;# 
   336  019C                     	;# 
   337  019C                     	;# 
   338  019C                     	;# 
   339  019D                     	;# 
   340  019D                     	;# 
   341  019D                     	;# 
   342  019E                     	;# 
   343  019E                     	;# 
   344  019E                     	;# 
   345  019F                     	;# 
   346  019F                     	;# 
   347  019F                     	;# 
   348  019F                     	;# 
   349  019F                     	;# 
   350  020C                     	;# 
   351  020D                     	;# 
   352  020E                     	;# 
   353  0211                     	;# 
   354  0211                     	;# 
   355  0212                     	;# 
   356  0212                     	;# 
   357  0213                     	;# 
   358  0213                     	;# 
   359  0214                     	;# 
   360  0214                     	;# 
   361  0215                     	;# 
   362  0215                     	;# 
   363  0215                     	;# 
   364  0215                     	;# 
   365  0216                     	;# 
   366  0216                     	;# 
   367  0217                     	;# 
   368  0217                     	;# 
   369  0219                     	;# 
   370  021A                     	;# 
   371  021B                     	;# 
   372  021C                     	;# 
   373  021D                     	;# 
   374  021D                     	;# 
   375  021E                     	;# 
   376  021F                     	;# 
   377  028C                     	;# 
   378  028D                     	;# 
   379  028E                     	;# 
   380  0291                     	;# 
   381  0291                     	;# 
   382  0292                     	;# 
   383  0293                     	;# 
   384  0294                     	;# 
   385  0295                     	;# 
   386  0295                     	;# 
   387  0296                     	;# 
   388  0297                     	;# 
   389  0298                     	;# 
   390  029F                     	;# 
   391  030C                     	;# 
   392  030D                     	;# 
   393  030E                     	;# 
   394  0311                     	;# 
   395  0311                     	;# 
   396  0312                     	;# 
   397  0313                     	;# 
   398  0314                     	;# 
   399  0315                     	;# 
   400  0315                     	;# 
   401  0316                     	;# 
   402  0317                     	;# 
   403  0318                     	;# 
   404  038C                     	;# 
   405  038D                     	;# 
   406  038E                     	;# 
   407  0391                     	;# 
   408  0392                     	;# 
   409  0393                     	;# 
   410  0394                     	;# 
   411  0395                     	;# 
   412  0396                     	;# 
   413  0397                     	;# 
   414  0398                     	;# 
   415  0399                     	;# 
   416  039A                     	;# 
   417  039C                     	;# 
   418  039D                     	;# 
   419  039E                     	;# 
   420  039F                     	;# 
   421  0411                     	;# 
   422  0411                     	;# 
   423  0412                     	;# 
   424  0413                     	;# 
   425  0414                     	;# 
   426  0415                     	;# 
   427  0416                     	;# 
   428  0417                     	;# 
   429  0418                     	;# 
   430  0418                     	;# 
   431  0419                     	;# 
   432  041A                     	;# 
   433  041B                     	;# 
   434  041C                     	;# 
   435  041D                     	;# 
   436  041E                     	;# 
   437  041F                     	;# 
   438  0498                     	;# 
   439  0498                     	;# 
   440  0499                     	;# 
   441  049A                     	;# 
   442  049B                     	;# 
   443  049B                     	;# 
   444  049C                     	;# 
   445  049D                     	;# 
   446  049E                     	;# 
   447  049F                     	;# 
   448  0617                     	;# 
   449  0618                     	;# 
   450  0619                     	;# 
   451  0619                     	;# 
   452  061A                     	;# 
   453  061B                     	;# 
   454  061C                     	;# 
   455  061C                     	;# 
   456  061F                     	;# 
   457  0691                     	;# 
   458  0692                     	;# 
   459  0693                     	;# 
   460  0694                     	;# 
   461  0695                     	;# 
   462  0696                     	;# 
   463  0697                     	;# 
   464  0698                     	;# 
   465  0699                     	;# 
   466  0711                     	;# 
   467  0712                     	;# 
   468  0713                     	;# 
   469  0714                     	;# 
   470  0715                     	;# 
   471  0716                     	;# 
   472  0717                     	;# 
   473  0718                     	;# 
   474  0719                     	;# 
   475  0891                     	;# 
   476  0891                     	;# 
   477  0891                     	;# 
   478  0891                     	;# 
   479  0891                     	;# 
   480  0891                     	;# 
   481  0892                     	;# 
   482  0892                     	;# 
   483  0892                     	;# 
   484  0893                     	;# 
   485  0893                     	;# 
   486  0893                     	;# 
   487  0893                     	;# 
   488  0893                     	;# 
   489  0893                     	;# 
   490  0894                     	;# 
   491  0894                     	;# 
   492  0894                     	;# 
   493  0895                     	;# 
   494  0895                     	;# 
   495  0895                     	;# 
   496  0896                     	;# 
   497  0896                     	;# 
   498  0896                     	;# 
   499  089B                     	;# 
   500  0911                     	;# 
   501  0912                     	;# 
   502  0913                     	;# 
   503  0914                     	;# 
   504  0915                     	;# 
   505  0916                     	;# 
   506  0918                     	;# 
   507  0919                     	;# 
   508  091A                     	;# 
   509  091B                     	;# 
   510  091C                     	;# 
   511  091D                     	;# 
   512  091E                     	;# 
   513  091F                     	;# 
   514  0E0F                     	;# 
   515  0E10                     	;# 
   516  0E11                     	;# 
   517  0E12                     	;# 
   518  0E13                     	;# 
   519  0E14                     	;# 
   520  0E15                     	;# 
   521  0E16                     	;# 
   522  0E17                     	;# 
   523  0E18                     	;# 
   524  0E19                     	;# 
   525  0E1A                     	;# 
   526  0E1B                     	;# 
   527  0E1C                     	;# 
   528  0E1D                     	;# 
   529  0E1E                     	;# 
   530  0E1F                     	;# 
   531  0E20                     	;# 
   532  0E21                     	;# 
   533  0E22                     	;# 
   534  0E24                     	;# 
   535  0E25                     	;# 
   536  0E28                     	;# 
   537  0E29                     	;# 
   538  0E2A                     	;# 
   539  0E2B                     	;# 
   540  0E2C                     	;# 
   541  0E2D                     	;# 
   542  0E2E                     	;# 
   543  0E2F                     	;# 
   544  0E90                     	;# 
   545  0E91                     	;# 
   546  0E92                     	;# 
   547  0E94                     	;# 
   548  0E95                     	;# 
   549  0E9C                     	;# 
   550  0E9D                     	;# 
   551  0E9E                     	;# 
   552  0E9F                     	;# 
   553  0EA0                     	;# 
   554  0EA1                     	;# 
   555  0EA2                     	;# 
   556  0EA3                     	;# 
   557  0EA4                     	;# 
   558  0EA5                     	;# 
   559  0EA6                     	;# 
   560  0EA7                     	;# 
   561  0F0F                     	;# 
   562  0F10                     	;# 
   563  0F11                     	;# 
   564  0F12                     	;# 
   565  0F13                     	;# 
   566  0F14                     	;# 
   567  0F15                     	;# 
   568  0F16                     	;# 
   569  0F17                     	;# 
   570  0F18                     	;# 
   571  0F19                     	;# 
   572  0F1A                     	;# 
   573  0F1B                     	;# 
   574  0F1C                     	;# 
   575  0F1D                     	;# 
   576  0F1E                     	;# 
   577  0F1F                     	;# 
   578  0F20                     	;# 
   579  0F21                     	;# 
   580  0F22                     	;# 
   581  0F23                     	;# 
   582  0F24                     	;# 
   583  0F25                     	;# 
   584  0F26                     	;# 
   585  0F27                     	;# 
   586  0F28                     	;# 
   587  0F29                     	;# 
   588  0F2A                     	;# 
   589  0F2B                     	;# 
   590  0F2C                     	;# 
   591  0F2D                     	;# 
   592  0F2E                     	;# 
   593  0F2F                     	;# 
   594  0F30                     	;# 
   595  0F31                     	;# 
   596  0F32                     	;# 
   597  0F33                     	;# 
   598  0F34                     	;# 
   599  0F35                     	;# 
   600  0F36                     	;# 
   601  0F37                     	;# 
   602  0FE4                     	;# 
   603  0FE5                     	;# 
   604  0FE6                     	;# 
   605  0FE7                     	;# 
   606  0FE8                     	;# 
   607  0FE9                     	;# 
   608  0FEA                     	;# 
   609  0FEB                     	;# 
   610  0FED                     	;# 
   611  0FEE                     	;# 
   612  0FEF                     	;# 
   613  0000                     	;# 
   614  0001                     	;# 
   615  0002                     	;# 
   616  0003                     	;# 
   617  0004                     	;# 
   618  0005                     	;# 
   619  0006                     	;# 
   620  0007                     	;# 
   621  0008                     	;# 
   622  0009                     	;# 
   623  000A                     	;# 
   624  000B                     	;# 
   625  000C                     	;# 
   626  000D                     	;# 
   627  000E                     	;# 
   628  0010                     	;# 
   629  0011                     	;# 
   630  0012                     	;# 
   631  0013                     	;# 
   632  0014                     	;# 
   633  0015                     	;# 
   634  0015                     	;# 
   635  0016                     	;# 
   636  0016                     	;# 
   637  0017                     	;# 
   638  0018                     	;# 
   639  0019                     	;# 
   640  0019                     	;# 
   641  001A                     	;# 
   642  001B                     	;# 
   643  001C                     	;# 
   644  001D                     	;# 
   645  001E                     	;# 
   646  001F                     	;# 
   647  008C                     	;# 
   648  008D                     	;# 
   649  008E                     	;# 
   650  0090                     	;# 
   651  0091                     	;# 
   652  0092                     	;# 
   653  0093                     	;# 
   654  0094                     	;# 
   655  0097                     	;# 
   656  009B                     	;# 
   657  009B                     	;# 
   658  009C                     	;# 
   659  009D                     	;# 
   660  009E                     	;# 
   661  009F                     	;# 
   662  010C                     	;# 
   663  010D                     	;# 
   664  010E                     	;# 
   665  0111                     	;# 
   666  0112                     	;# 
   667  0113                     	;# 
   668  0114                     	;# 
   669  0115                     	;# 
   670  0116                     	;# 
   671  0117                     	;# 
   672  0118                     	;# 
   673  0119                     	;# 
   674  018C                     	;# 
   675  018D                     	;# 
   676  018E                     	;# 
   677  0199                     	;# 
   678  0199                     	;# 
   679  0199                     	;# 
   680  019A                     	;# 
   681  019A                     	;# 
   682  019A                     	;# 
   683  019B                     	;# 
   684  019B                     	;# 
   685  019B                     	;# 
   686  019B                     	;# 
   687  019B                     	;# 
   688  019C                     	;# 
   689  019C                     	;# 
   690  019C                     	;# 
   691  019D                     	;# 
   692  019D                     	;# 
   693  019D                     	;# 
   694  019E                     	;# 
   695  019E                     	;# 
   696  019E                     	;# 
   697  019F                     	;# 
   698  019F                     	;# 
   699  019F                     	;# 
   700  019F                     	;# 
   701  019F                     	;# 
   702  020C                     	;# 
   703  020D                     	;# 
   704  020E                     	;# 
   705  0211                     	;# 
   706  0211                     	;# 
   707  0212                     	;# 
   708  0212                     	;# 
   709  0213                     	;# 
   710  0213                     	;# 
   711  0214                     	;# 
   712  0214                     	;# 
   713  0215                     	;# 
   714  0215                     	;# 
   715  0215                     	;# 
   716  0215                     	;# 
   717  0216                     	;# 
   718  0216                     	;# 
   719  0217                     	;# 
   720  0217                     	;# 
   721  0219                     	;# 
   722  021A                     	;# 
   723  021B                     	;# 
   724  021C                     	;# 
   725  021D                     	;# 
   726  021D                     	;# 
   727  021E                     	;# 
   728  021F                     	;# 
   729  028C                     	;# 
   730  028D                     	;# 
   731  028E                     	;# 
   732  0291                     	;# 
   733  0291                     	;# 
   734  0292                     	;# 
   735  0293                     	;# 
   736  0294                     	;# 
   737  0295                     	;# 
   738  0295                     	;# 
   739  0296                     	;# 
   740  0297                     	;# 
   741  0298                     	;# 
   742  029F                     	;# 
   743  030C                     	;# 
   744  030D                     	;# 
   745  030E                     	;# 
   746  0311                     	;# 
   747  0311                     	;# 
   748  0312                     	;# 
   749  0313                     	;# 
   750  0314                     	;# 
   751  0315                     	;# 
   752  0315                     	;# 
   753  0316                     	;# 
   754  0317                     	;# 
   755  0318                     	;# 
   756  038C                     	;# 
   757  038D                     	;# 
   758  038E                     	;# 
   759  0391                     	;# 
   760  0392                     	;# 
   761  0393                     	;# 
   762  0394                     	;# 
   763  0395                     	;# 
   764  0396                     	;# 
   765  0397                     	;# 
   766  0398                     	;# 
   767  0399                     	;# 
   768  039A                     	;# 
   769  039C                     	;# 
   770  039D                     	;# 
   771  039E                     	;# 
   772  039F                     	;# 
   773  0411                     	;# 
   774  0411                     	;# 
   775  0412                     	;# 
   776  0413                     	;# 
   777  0414                     	;# 
   778  0415                     	;# 
   779  0416                     	;# 
   780  0417                     	;# 
   781  0418                     	;# 
   782  0418                     	;# 
   783  0419                     	;# 
   784  041A                     	;# 
   785  041B                     	;# 
   786  041C                     	;# 
   787  041D                     	;# 
   788  041E                     	;# 
   789  041F                     	;# 
   790  0498                     	;# 
   791  0498                     	;# 
   792  0499                     	;# 
   793  049A                     	;# 
   794  049B                     	;# 
   795  049B                     	;# 
   796  049C                     	;# 
   797  049D                     	;# 
   798  049E                     	;# 
   799  049F                     	;# 
   800  0617                     	;# 
   801  0618                     	;# 
   802  0619                     	;# 
   803  0619                     	;# 
   804  061A                     	;# 
   805  061B                     	;# 
   806  061C                     	;# 
   807  061C                     	;# 
   808  061F                     	;# 
   809  0691                     	;# 
   810  0692                     	;# 
   811  0693                     	;# 
   812  0694                     	;# 
   813  0695                     	;# 
   814  0696                     	;# 
   815  0697                     	;# 
   816  0698                     	;# 
   817  0699                     	;# 
   818  0711                     	;# 
   819  0712                     	;# 
   820  0713                     	;# 
   821  0714                     	;# 
   822  0715                     	;# 
   823  0716                     	;# 
   824  0717                     	;# 
   825  0718                     	;# 
   826  0719                     	;# 
   827  0891                     	;# 
   828  0891                     	;# 
   829  0891                     	;# 
   830  0891                     	;# 
   831  0891                     	;# 
   832  0891                     	;# 
   833  0892                     	;# 
   834  0892                     	;# 
   835  0892                     	;# 
   836  0893                     	;# 
   837  0893                     	;# 
   838  0893                     	;# 
   839  0893                     	;# 
   840  0893                     	;# 
   841  0893                     	;# 
   842  0894                     	;# 
   843  0894                     	;# 
   844  0894                     	;# 
   845  0895                     	;# 
   846  0895                     	;# 
   847  0895                     	;# 
   848  0896                     	;# 
   849  0896                     	;# 
   850  0896                     	;# 
   851  089B                     	;# 
   852  0911                     	;# 
   853  0912                     	;# 
   854  0913                     	;# 
   855  0914                     	;# 
   856  0915                     	;# 
   857  0916                     	;# 
   858  0918                     	;# 
   859  0919                     	;# 
   860  091A                     	;# 
   861  091B                     	;# 
   862  091C                     	;# 
   863  091D                     	;# 
   864  091E                     	;# 
   865  091F                     	;# 
   866  0E0F                     	;# 
   867  0E10                     	;# 
   868  0E11                     	;# 
   869  0E12                     	;# 
   870  0E13                     	;# 
   871  0E14                     	;# 
   872  0E15                     	;# 
   873  0E16                     	;# 
   874  0E17                     	;# 
   875  0E18                     	;# 
   876  0E19                     	;# 
   877  0E1A                     	;# 
   878  0E1B                     	;# 
   879  0E1C                     	;# 
   880  0E1D                     	;# 
   881  0E1E                     	;# 
   882  0E1F                     	;# 
   883  0E20                     	;# 
   884  0E21                     	;# 
   885  0E22                     	;# 
   886  0E24                     	;# 
   887  0E25                     	;# 
   888  0E28                     	;# 
   889  0E29                     	;# 
   890  0E2A                     	;# 
   891  0E2B                     	;# 
   892  0E2C                     	;# 
   893  0E2D                     	;# 
   894  0E2E                     	;# 
   895  0E2F                     	;# 
   896  0E90                     	;# 
   897  0E91                     	;# 
   898  0E92                     	;# 
   899  0E94                     	;# 
   900  0E95                     	;# 
   901  0E9C                     	;# 
   902  0E9D                     	;# 
   903  0E9E                     	;# 
   904  0E9F                     	;# 
   905  0EA0                     	;# 
   906  0EA1                     	;# 
   907  0EA2                     	;# 
   908  0EA3                     	;# 
   909  0EA4                     	;# 
   910  0EA5                     	;# 
   911  0EA6                     	;# 
   912  0EA7                     	;# 
   913  0F0F                     	;# 
   914  0F10                     	;# 
   915  0F11                     	;# 
   916  0F12                     	;# 
   917  0F13                     	;# 
   918  0F14                     	;# 
   919  0F15                     	;# 
   920  0F16                     	;# 
   921  0F17                     	;# 
   922  0F18                     	;# 
   923  0F19                     	;# 
   924  0F1A                     	;# 
   925  0F1B                     	;# 
   926  0F1C                     	;# 
   927  0F1D                     	;# 
   928  0F1E                     	;# 
   929  0F1F                     	;# 
   930  0F20                     	;# 
   931  0F21                     	;# 
   932  0F22                     	;# 
   933  0F23                     	;# 
   934  0F24                     	;# 
   935  0F25                     	;# 
   936  0F26                     	;# 
   937  0F27                     	;# 
   938  0F28                     	;# 
   939  0F29                     	;# 
   940  0F2A                     	;# 
   941  0F2B                     	;# 
   942  0F2C                     	;# 
   943  0F2D                     	;# 
   944  0F2E                     	;# 
   945  0F2F                     	;# 
   946  0F30                     	;# 
   947  0F31                     	;# 
   948  0F32                     	;# 
   949  0F33                     	;# 
   950  0F34                     	;# 
   951  0F35                     	;# 
   952  0F36                     	;# 
   953  0F37                     	;# 
   954  0FE4                     	;# 
   955  0FE5                     	;# 
   956  0FE6                     	;# 
   957  0FE7                     	;# 
   958  0FE8                     	;# 
   959  0FE9                     	;# 
   960  0FEA                     	;# 
   961  0FEB                     	;# 
   962  0FED                     	;# 
   963  0FEE                     	;# 
   964  0FEF                     	;# 
   965  0000                     	;# 
   966  0001                     	;# 
   967  0002                     	;# 
   968  0003                     	;# 
   969  0004                     	;# 
   970  0005                     	;# 
   971  0006                     	;# 
   972  0007                     	;# 
   973  0008                     	;# 
   974  0009                     	;# 
   975  000A                     	;# 
   976  000B                     	;# 
   977  000C                     	;# 
   978  000D                     	;# 
   979  000E                     	;# 
   980  0010                     	;# 
   981  0011                     	;# 
   982  0012                     	;# 
   983  0013                     	;# 
   984  0014                     	;# 
   985  0015                     	;# 
   986  0015                     	;# 
   987  0016                     	;# 
   988  0016                     	;# 
   989  0017                     	;# 
   990  0018                     	;# 
   991  0019                     	;# 
   992  0019                     	;# 
   993  001A                     	;# 
   994  001B                     	;# 
   995  001C                     	;# 
   996  001D                     	;# 
   997  001E                     	;# 
   998  001F                     	;# 
   999  008C                     	;# 
  1000  008D                     	;# 
  1001  008E                     	;# 
  1002  0090                     	;# 
  1003  0091                     	;# 
  1004  0092                     	;# 
  1005  0093                     	;# 
  1006  0094                     	;# 
  1007  0097                     	;# 
  1008  009B                     	;# 
  1009  009B                     	;# 
  1010  009C                     	;# 
  1011  009D                     	;# 
  1012  009E                     	;# 
  1013  009F                     	;# 
  1014  010C                     	;# 
  1015  010D                     	;# 
  1016  010E                     	;# 
  1017  0111                     	;# 
  1018  0112                     	;# 
  1019  0113                     	;# 
  1020  0114                     	;# 
  1021  0115                     	;# 
  1022  0116                     	;# 
  1023  0117                     	;# 
  1024  0118                     	;# 
  1025  0119                     	;# 
  1026  018C                     	;# 
  1027  018D                     	;# 
  1028  018E                     	;# 
  1029  0199                     	;# 
  1030  0199                     	;# 
  1031  0199                     	;# 
  1032  019A                     	;# 
  1033  019A                     	;# 
  1034  019A                     	;# 
  1035  019B                     	;# 
  1036  019B                     	;# 
  1037  019B                     	;# 
  1038  019B                     	;# 
  1039  019B                     	;# 
  1040  019C                     	;# 
  1041  019C                     	;# 
  1042  019C                     	;# 
  1043  019D                     	;# 
  1044  019D                     	;# 
  1045  019D                     	;# 
  1046  019E                     	;# 
  1047  019E                     	;# 
  1048  019E                     	;# 
  1049  019F                     	;# 
  1050  019F                     	;# 
  1051  019F                     	;# 
  1052  019F                     	;# 
  1053  019F                     	;# 
  1054  020C                     	;# 
  1055  020D                     	;# 
  1056  020E                     	;# 
  1057  0211                     	;# 
  1058  0211                     	;# 
  1059  0212                     	;# 
  1060  0212                     	;# 
  1061  0213                     	;# 
  1062  0213                     	;# 
  1063  0214                     	;# 
  1064  0214                     	;# 
  1065  0215                     	;# 
  1066  0215                     	;# 
  1067  0215                     	;# 
  1068  0215                     	;# 
  1069  0216                     	;# 
  1070  0216                     	;# 
  1071  0217                     	;# 
  1072  0217                     	;# 
  1073  0219                     	;# 
  1074  021A                     	;# 
  1075  021B                     	;# 
  1076  021C                     	;# 
  1077  021D                     	;# 
  1078  021D                     	;# 
  1079  021E                     	;# 
  1080  021F                     	;# 
  1081  028C                     	;# 
  1082  028D                     	;# 
  1083  028E                     	;# 
  1084  0291                     	;# 
  1085  0291                     	;# 
  1086  0292                     	;# 
  1087  0293                     	;# 
  1088  0294                     	;# 
  1089  0295                     	;# 
  1090  0295                     	;# 
  1091  0296                     	;# 
  1092  0297                     	;# 
  1093  0298                     	;# 
  1094  029F                     	;# 
  1095  030C                     	;# 
  1096  030D                     	;# 
  1097  030E                     	;# 
  1098  0311                     	;# 
  1099  0311                     	;# 
  1100  0312                     	;# 
  1101  0313                     	;# 
  1102  0314                     	;# 
  1103  0315                     	;# 
  1104  0315                     	;# 
  1105  0316                     	;# 
  1106  0317                     	;# 
  1107  0318                     	;# 
  1108  038C                     	;# 
  1109  038D                     	;# 
  1110  038E                     	;# 
  1111  0391                     	;# 
  1112  0392                     	;# 
  1113  0393                     	;# 
  1114  0394                     	;# 
  1115  0395                     	;# 
  1116  0396                     	;# 
  1117  0397                     	;# 
  1118  0398                     	;# 
  1119  0399                     	;# 
  1120  039A                     	;# 
  1121  039C                     	;# 
  1122  039D                     	;# 
  1123  039E                     	;# 
  1124  039F                     	;# 
  1125  0411                     	;# 
  1126  0411                     	;# 
  1127  0412                     	;# 
  1128  0413                     	;# 
  1129  0414                     	;# 
  1130  0415                     	;# 
  1131  0416                     	;# 
  1132  0417                     	;# 
  1133  0418                     	;# 
  1134  0418                     	;# 
  1135  0419                     	;# 
  1136  041A                     	;# 
  1137  041B                     	;# 
  1138  041C                     	;# 
  1139  041D                     	;# 
  1140  041E                     	;# 
  1141  041F                     	;# 
  1142  0498                     	;# 
  1143  0498                     	;# 
  1144  0499                     	;# 
  1145  049A                     	;# 
  1146  049B                     	;# 
  1147  049B                     	;# 
  1148  049C                     	;# 
  1149  049D                     	;# 
  1150  049E                     	;# 
  1151  049F                     	;# 
  1152  0617                     	;# 
  1153  0618                     	;# 
  1154  0619                     	;# 
  1155  0619                     	;# 
  1156  061A                     	;# 
  1157  061B                     	;# 
  1158  061C                     	;# 
  1159  061C                     	;# 
  1160  061F                     	;# 
  1161  0691                     	;# 
  1162  0692                     	;# 
  1163  0693                     	;# 
  1164  0694                     	;# 
  1165  0695                     	;# 
  1166  0696                     	;# 
  1167  0697                     	;# 
  1168  0698                     	;# 
  1169  0699                     	;# 
  1170  0711                     	;# 
  1171  0712                     	;# 
  1172  0713                     	;# 
  1173  0714                     	;# 
  1174  0715                     	;# 
  1175  0716                     	;# 
  1176  0717                     	;# 
  1177  0718                     	;# 
  1178  0719                     	;# 
  1179  0891                     	;# 
  1180  0891                     	;# 
  1181  0891                     	;# 
  1182  0891                     	;# 
  1183  0891                     	;# 
  1184  0891                     	;# 
  1185  0892                     	;# 
  1186  0892                     	;# 
  1187  0892                     	;# 
  1188  0893                     	;# 
  1189  0893                     	;# 
  1190  0893                     	;# 
  1191  0893                     	;# 
  1192  0893                     	;# 
  1193  0893                     	;# 
  1194  0894                     	;# 
  1195  0894                     	;# 
  1196  0894                     	;# 
  1197  0895                     	;# 
  1198  0895                     	;# 
  1199  0895                     	;# 
  1200  0896                     	;# 
  1201  0896                     	;# 
  1202  0896                     	;# 
  1203  089B                     	;# 
  1204  0911                     	;# 
  1205  0912                     	;# 
  1206  0913                     	;# 
  1207  0914                     	;# 
  1208  0915                     	;# 
  1209  0916                     	;# 
  1210  0918                     	;# 
  1211  0919                     	;# 
  1212  091A                     	;# 
  1213  091B                     	;# 
  1214  091C                     	;# 
  1215  091D                     	;# 
  1216  091E                     	;# 
  1217  091F                     	;# 
  1218  0E0F                     	;# 
  1219  0E10                     	;# 
  1220  0E11                     	;# 
  1221  0E12                     	;# 
  1222  0E13                     	;# 
  1223  0E14                     	;# 
  1224  0E15                     	;# 
  1225  0E16                     	;# 
  1226  0E17                     	;# 
  1227  0E18                     	;# 
  1228  0E19                     	;# 
  1229  0E1A                     	;# 
  1230  0E1B                     	;# 
  1231  0E1C                     	;# 
  1232  0E1D                     	;# 
  1233  0E1E                     	;# 
  1234  0E1F                     	;# 
  1235  0E20                     	;# 
  1236  0E21                     	;# 
  1237  0E22                     	;# 
  1238  0E24                     	;# 
  1239  0E25                     	;# 
  1240  0E28                     	;# 
  1241  0E29                     	;# 
  1242  0E2A                     	;# 
  1243  0E2B                     	;# 
  1244  0E2C                     	;# 
  1245  0E2D                     	;# 
  1246  0E2E                     	;# 
  1247  0E2F                     	;# 
  1248  0E90                     	;# 
  1249  0E91                     	;# 
  1250  0E92                     	;# 
  1251  0E94                     	;# 
  1252  0E95                     	;# 
  1253  0E9C                     	;# 
  1254  0E9D                     	;# 
  1255  0E9E                     	;# 
  1256  0E9F                     	;# 
  1257  0EA0                     	;# 
  1258  0EA1                     	;# 
  1259  0EA2                     	;# 
  1260  0EA3                     	;# 
  1261  0EA4                     	;# 
  1262  0EA5                     	;# 
  1263  0EA6                     	;# 
  1264  0EA7                     	;# 
  1265  0F0F                     	;# 
  1266  0F10                     	;# 
  1267  0F11                     	;# 
  1268  0F12                     	;# 
  1269  0F13                     	;# 
  1270  0F14                     	;# 
  1271  0F15                     	;# 
  1272  0F16                     	;# 
  1273  0F17                     	;# 
  1274  0F18                     	;# 
  1275  0F19                     	;# 
  1276  0F1A                     	;# 
  1277  0F1B                     	;# 
  1278  0F1C                     	;# 
  1279  0F1D                     	;# 
  1280  0F1E                     	;# 
  1281  0F1F                     	;# 
  1282  0F20                     	;# 
  1283  0F21                     	;# 
  1284  0F22                     	;# 
  1285  0F23                     	;# 
  1286  0F24                     	;# 
  1287  0F25                     	;# 
  1288  0F26                     	;# 
  1289  0F27                     	;# 
  1290  0F28                     	;# 
  1291  0F29                     	;# 
  1292  0F2A                     	;# 
  1293  0F2B                     	;# 
  1294  0F2C                     	;# 
  1295  0F2D                     	;# 
  1296  0F2E                     	;# 
  1297  0F2F                     	;# 
  1298  0F30                     	;# 
  1299  0F31                     	;# 
  1300  0F32                     	;# 
  1301  0F33                     	;# 
  1302  0F34                     	;# 
  1303  0F35                     	;# 
  1304  0F36                     	;# 
  1305  0F37                     	;# 
  1306  0FE4                     	;# 
  1307  0FE5                     	;# 
  1308  0FE6                     	;# 
  1309  0FE7                     	;# 
  1310  0FE8                     	;# 
  1311  0FE9                     	;# 
  1312  0FEA                     	;# 
  1313  0FEB                     	;# 
  1314  0FED                     	;# 
  1315  0FEE                     	;# 
  1316  0FEF                     	;# 
  1317  0000                     	;# 
  1318  0001                     	;# 
  1319  0002                     	;# 
  1320  0003                     	;# 
  1321  0004                     	;# 
  1322  0005                     	;# 
  1323  0006                     	;# 
  1324  0007                     	;# 
  1325  0008                     	;# 
  1326  0009                     	;# 
  1327  000A                     	;# 
  1328  000B                     	;# 
  1329  000C                     	;# 
  1330  000D                     	;# 
  1331  000E                     	;# 
  1332  0010                     	;# 
  1333  0011                     	;# 
  1334  0012                     	;# 
  1335  0013                     	;# 
  1336  0014                     	;# 
  1337  0015                     	;# 
  1338  0015                     	;# 
  1339  0016                     	;# 
  1340  0016                     	;# 
  1341  0017                     	;# 
  1342  0018                     	;# 
  1343  0019                     	;# 
  1344  0019                     	;# 
  1345  001A                     	;# 
  1346  001B                     	;# 
  1347  001C                     	;# 
  1348  001D                     	;# 
  1349  001E                     	;# 
  1350  001F                     	;# 
  1351  008C                     	;# 
  1352  008D                     	;# 
  1353  008E                     	;# 
  1354  0090                     	;# 
  1355  0091                     	;# 
  1356  0092                     	;# 
  1357  0093                     	;# 
  1358  0094                     	;# 
  1359  0097                     	;# 
  1360  009B                     	;# 
  1361  009B                     	;# 
  1362  009C                     	;# 
  1363  009D                     	;# 
  1364  009E                     	;# 
  1365  009F                     	;# 
  1366  010C                     	;# 
  1367  010D                     	;# 
  1368  010E                     	;# 
  1369  0111                     	;# 
  1370  0112                     	;# 
  1371  0113                     	;# 
  1372  0114                     	;# 
  1373  0115                     	;# 
  1374  0116                     	;# 
  1375  0117                     	;# 
  1376  0118                     	;# 
  1377  0119                     	;# 
  1378  018C                     	;# 
  1379  018D                     	;# 
  1380  018E                     	;# 
  1381  0199                     	;# 
  1382  0199                     	;# 
  1383  0199                     	;# 
  1384  019A                     	;# 
  1385  019A                     	;# 
  1386  019A                     	;# 
  1387  019B                     	;# 
  1388  019B                     	;# 
  1389  019B                     	;# 
  1390  019B                     	;# 
  1391  019B                     	;# 
  1392  019C                     	;# 
  1393  019C                     	;# 
  1394  019C                     	;# 
  1395  019D                     	;# 
  1396  019D                     	;# 
  1397  019D                     	;# 
  1398  019E                     	;# 
  1399  019E                     	;# 
  1400  019E                     	;# 
  1401  019F                     	;# 
  1402  019F                     	;# 
  1403  019F                     	;# 
  1404  019F                     	;# 
  1405  019F                     	;# 
  1406  020C                     	;# 
  1407  020D                     	;# 
  1408  020E                     	;# 
  1409  0211                     	;# 
  1410  0211                     	;# 
  1411  0212                     	;# 
  1412  0212                     	;# 
  1413  0213                     	;# 
  1414  0213                     	;# 
  1415  0214                     	;# 
  1416  0214                     	;# 
  1417  0215                     	;# 
  1418  0215                     	;# 
  1419  0215                     	;# 
  1420  0215                     	;# 
  1421  0216                     	;# 
  1422  0216                     	;# 
  1423  0217                     	;# 
  1424  0217                     	;# 
  1425  0219                     	;# 
  1426  021A                     	;# 
  1427  021B                     	;# 
  1428  021C                     	;# 
  1429  021D                     	;# 
  1430  021D                     	;# 
  1431  021E                     	;# 
  1432  021F                     	;# 
  1433  028C                     	;# 
  1434  028D                     	;# 
  1435  028E                     	;# 
  1436  0291                     	;# 
  1437  0291                     	;# 
  1438  0292                     	;# 
  1439  0293                     	;# 
  1440  0294                     	;# 
  1441  0295                     	;# 
  1442  0295                     	;# 
  1443  0296                     	;# 
  1444  0297                     	;# 
  1445  0298                     	;# 
  1446  029F                     	;# 
  1447  030C                     	;# 
  1448  030D                     	;# 
  1449  030E                     	;# 
  1450  0311                     	;# 
  1451  0311                     	;# 
  1452  0312                     	;# 
  1453  0313                     	;# 
  1454  0314                     	;# 
  1455  0315                     	;# 
  1456  0315                     	;# 
  1457  0316                     	;# 
  1458  0317                     	;# 
  1459  0318                     	;# 
  1460  038C                     	;# 
  1461  038D                     	;# 
  1462  038E                     	;# 
  1463  0391                     	;# 
  1464  0392                     	;# 
  1465  0393                     	;# 
  1466  0394                     	;# 
  1467  0395                     	;# 
  1468  0396                     	;# 
  1469  0397                     	;# 
  1470  0398                     	;# 
  1471  0399                     	;# 
  1472  039A                     	;# 
  1473  039C                     	;# 
  1474  039D                     	;# 
  1475  039E                     	;# 
  1476  039F                     	;# 
  1477  0411                     	;# 
  1478  0411                     	;# 
  1479  0412                     	;# 
  1480  0413                     	;# 
  1481  0414                     	;# 
  1482  0415                     	;# 
  1483  0416                     	;# 
  1484  0417                     	;# 
  1485  0418                     	;# 
  1486  0418                     	;# 
  1487  0419                     	;# 
  1488  041A                     	;# 
  1489  041B                     	;# 
  1490  041C                     	;# 
  1491  041D                     	;# 
  1492  041E                     	;# 
  1493  041F                     	;# 
  1494  0498                     	;# 
  1495  0498                     	;# 
  1496  0499                     	;# 
  1497  049A                     	;# 
  1498  049B                     	;# 
  1499  049B                     	;# 
  1500  049C                     	;# 
  1501  049D                     	;# 
  1502  049E                     	;# 
  1503  049F                     	;# 
  1504  0617                     	;# 
  1505  0618                     	;# 
  1506  0619                     	;# 
  1507  0619                     	;# 
  1508  061A                     	;# 
  1509  061B                     	;# 
  1510  061C                     	;# 
  1511  061C                     	;# 
  1512  061F                     	;# 
  1513  0691                     	;# 
  1514  0692                     	;# 
  1515  0693                     	;# 
  1516  0694                     	;# 
  1517  0695                     	;# 
  1518  0696                     	;# 
  1519  0697                     	;# 
  1520  0698                     	;# 
  1521  0699                     	;# 
  1522  0711                     	;# 
  1523  0712                     	;# 
  1524  0713                     	;# 
  1525  0714                     	;# 
  1526  0715                     	;# 
  1527  0716                     	;# 
  1528  0717                     	;# 
  1529  0718                     	;# 
  1530  0719                     	;# 
  1531  0891                     	;# 
  1532  0891                     	;# 
  1533  0891                     	;# 
  1534  0891                     	;# 
  1535  0891                     	;# 
  1536  0891                     	;# 
  1537  0892                     	;# 
  1538  0892                     	;# 
  1539  0892                     	;# 
  1540  0893                     	;# 
  1541  0893                     	;# 
  1542  0893                     	;# 
  1543  0893                     	;# 
  1544  0893                     	;# 
  1545  0893                     	;# 
  1546  0894                     	;# 
  1547  0894                     	;# 
  1548  0894                     	;# 
  1549  0895                     	;# 
  1550  0895                     	;# 
  1551  0895                     	;# 
  1552  0896                     	;# 
  1553  0896                     	;# 
  1554  0896                     	;# 
  1555  089B                     	;# 
  1556  0911                     	;# 
  1557  0912                     	;# 
  1558  0913                     	;# 
  1559  0914                     	;# 
  1560  0915                     	;# 
  1561  0916                     	;# 
  1562  0918                     	;# 
  1563  0919                     	;# 
  1564  091A                     	;# 
  1565  091B                     	;# 
  1566  091C                     	;# 
  1567  091D                     	;# 
  1568  091E                     	;# 
  1569  091F                     	;# 
  1570  0E0F                     	;# 
  1571  0E10                     	;# 
  1572  0E11                     	;# 
  1573  0E12                     	;# 
  1574  0E13                     	;# 
  1575  0E14                     	;# 
  1576  0E15                     	;# 
  1577  0E16                     	;# 
  1578  0E17                     	;# 
  1579  0E18                     	;# 
  1580  0E19                     	;# 
  1581  0E1A                     	;# 
  1582  0E1B                     	;# 
  1583  0E1C                     	;# 
  1584  0E1D                     	;# 
  1585  0E1E                     	;# 
  1586  0E1F                     	;# 
  1587  0E20                     	;# 
  1588  0E21                     	;# 
  1589  0E22                     	;# 
  1590  0E24                     	;# 
  1591  0E25                     	;# 
  1592  0E28                     	;# 
  1593  0E29                     	;# 
  1594  0E2A                     	;# 
  1595  0E2B                     	;# 
  1596  0E2C                     	;# 
  1597  0E2D                     	;# 
  1598  0E2E                     	;# 
  1599  0E2F                     	;# 
  1600  0E90                     	;# 
  1601  0E91                     	;# 
  1602  0E92                     	;# 
  1603  0E94                     	;# 
  1604  0E95                     	;# 
  1605  0E9C                     	;# 
  1606  0E9D                     	;# 
  1607  0E9E                     	;# 
  1608  0E9F                     	;# 
  1609  0EA0                     	;# 
  1610  0EA1                     	;# 
  1611  0EA2                     	;# 
  1612  0EA3                     	;# 
  1613  0EA4                     	;# 
  1614  0EA5                     	;# 
  1615  0EA6                     	;# 
  1616  0EA7                     	;# 
  1617  0F0F                     	;# 
  1618  0F10                     	;# 
  1619  0F11                     	;# 
  1620  0F12                     	;# 
  1621  0F13                     	;# 
  1622  0F14                     	;# 
  1623  0F15                     	;# 
  1624  0F16                     	;# 
  1625  0F17                     	;# 
  1626  0F18                     	;# 
  1627  0F19                     	;# 
  1628  0F1A                     	;# 
  1629  0F1B                     	;# 
  1630  0F1C                     	;# 
  1631  0F1D                     	;# 
  1632  0F1E                     	;# 
  1633  0F1F                     	;# 
  1634  0F20                     	;# 
  1635  0F21                     	;# 
  1636  0F22                     	;# 
  1637  0F23                     	;# 
  1638  0F24                     	;# 
  1639  0F25                     	;# 
  1640  0F26                     	;# 
  1641  0F27                     	;# 
  1642  0F28                     	;# 
  1643  0F29                     	;# 
  1644  0F2A                     	;# 
  1645  0F2B                     	;# 
  1646  0F2C                     	;# 
  1647  0F2D                     	;# 
  1648  0F2E                     	;# 
  1649  0F2F                     	;# 
  1650  0F30                     	;# 
  1651  0F31                     	;# 
  1652  0F32                     	;# 
  1653  0F33                     	;# 
  1654  0F34                     	;# 
  1655  0F35                     	;# 
  1656  0F36                     	;# 
  1657  0F37                     	;# 
  1658  0FE4                     	;# 
  1659  0FE5                     	;# 
  1660  0FE6                     	;# 
  1661  0FE7                     	;# 
  1662  0FE8                     	;# 
  1663  0FE9                     	;# 
  1664  0FEA                     	;# 
  1665  0FEB                     	;# 
  1666  0FED                     	;# 
  1667  0FEE                     	;# 
  1668  0FEF                     	;# 
  1669  0000                     	;# 
  1670  0001                     	;# 
  1671  0002                     	;# 
  1672  0003                     	;# 
  1673  0004                     	;# 
  1674  0005                     	;# 
  1675  0006                     	;# 
  1676  0007                     	;# 
  1677  0008                     	;# 
  1678  0009                     	;# 
  1679  000A                     	;# 
  1680  000B                     	;# 
  1681  000C                     	;# 
  1682  000D                     	;# 
  1683  000E                     	;# 
  1684  0010                     	;# 
  1685  0011                     	;# 
  1686  0012                     	;# 
  1687  0013                     	;# 
  1688  0014                     	;# 
  1689  0015                     	;# 
  1690  0015                     	;# 
  1691  0016                     	;# 
  1692  0016                     	;# 
  1693  0017                     	;# 
  1694  0018                     	;# 
  1695  0019                     	;# 
  1696  0019                     	;# 
  1697  001A                     	;# 
  1698  001B                     	;# 
  1699  001C                     	;# 
  1700  001D                     	;# 
  1701  001E                     	;# 
  1702  001F                     	;# 
  1703  008C                     	;# 
  1704  008D                     	;# 
  1705  008E                     	;# 
  1706  0090                     	;# 
  1707  0091                     	;# 
  1708  0092                     	;# 
  1709  0093                     	;# 
  1710  0094                     	;# 
  1711  0097                     	;# 
  1712  009B                     	;# 
  1713  009B                     	;# 
  1714  009C                     	;# 
  1715  009D                     	;# 
  1716  009E                     	;# 
  1717  009F                     	;# 
  1718  010C                     	;# 
  1719  010D                     	;# 
  1720  010E                     	;# 
  1721  0111                     	;# 
  1722  0112                     	;# 
  1723  0113                     	;# 
  1724  0114                     	;# 
  1725  0115                     	;# 
  1726  0116                     	;# 
  1727  0117                     	;# 
  1728  0118                     	;# 
  1729  0119                     	;# 
  1730  018C                     	;# 
  1731  018D                     	;# 
  1732  018E                     	;# 
  1733  0199                     	;# 
  1734  0199                     	;# 
  1735  0199                     	;# 
  1736  019A                     	;# 
  1737  019A                     	;# 
  1738  019A                     	;# 
  1739  019B                     	;# 
  1740  019B                     	;# 
  1741  019B                     	;# 
  1742  019B                     	;# 
  1743  019B                     	;# 
  1744  019C                     	;# 
  1745  019C                     	;# 
  1746  019C                     	;# 
  1747  019D                     	;# 
  1748  019D                     	;# 
  1749  019D                     	;# 
  1750  019E                     	;# 
  1751  019E                     	;# 
  1752  019E                     	;# 
  1753  019F                     	;# 
  1754  019F                     	;# 
  1755  019F                     	;# 
  1756  019F                     	;# 
  1757  019F                     	;# 
  1758  020C                     	;# 
  1759  020D                     	;# 
  1760  020E                     	;# 
  1761  0211                     	;# 
  1762  0211                     	;# 
  1763  0212                     	;# 
  1764  0212                     	;# 
  1765  0213                     	;# 
  1766  0213                     	;# 
  1767  0214                     	;# 
  1768  0214                     	;# 
  1769  0215                     	;# 
  1770  0215                     	;# 
  1771  0215                     	;# 
  1772  0215                     	;# 
  1773  0216                     	;# 
  1774  0216                     	;# 
  1775  0217                     	;# 
  1776  0217                     	;# 
  1777  0219                     	;# 
  1778  021A                     	;# 
  1779  021B                     	;# 
  1780  021C                     	;# 
  1781  021D                     	;# 
  1782  021D                     	;# 
  1783  021E                     	;# 
  1784  021F                     	;# 
  1785  028C                     	;# 
  1786  028D                     	;# 
  1787  028E                     	;# 
  1788  0291                     	;# 
  1789  0291                     	;# 
  1790  0292                     	;# 
  1791  0293                     	;# 
  1792  0294                     	;# 
  1793  0295                     	;# 
  1794  0295                     	;# 
  1795  0296                     	;# 
  1796  0297                     	;# 
  1797  0298                     	;# 
  1798  029F                     	;# 
  1799  030C                     	;# 
  1800  030D                     	;# 
  1801  030E                     	;# 
  1802  0311                     	;# 
  1803  0311                     	;# 
  1804  0312                     	;# 
  1805  0313                     	;# 
  1806  0314                     	;# 
  1807  0315                     	;# 
  1808  0315                     	;# 
  1809  0316                     	;# 
  1810  0317                     	;# 
  1811  0318                     	;# 
  1812  038C                     	;# 
  1813  038D                     	;# 
  1814  038E                     	;# 
  1815  0391                     	;# 
  1816  0392                     	;# 
  1817  0393                     	;# 
  1818  0394                     	;# 
  1819  0395                     	;# 
  1820  0396                     	;# 
  1821  0397                     	;# 
  1822  0398                     	;# 
  1823  0399                     	;# 
  1824  039A                     	;# 
  1825  039C                     	;# 
  1826  039D                     	;# 
  1827  039E                     	;# 
  1828  039F                     	;# 
  1829  0411                     	;# 
  1830  0411                     	;# 
  1831  0412                     	;# 
  1832  0413                     	;# 
  1833  0414                     	;# 
  1834  0415                     	;# 
  1835  0416                     	;# 
  1836  0417                     	;# 
  1837  0418                     	;# 
  1838  0418                     	;# 
  1839  0419                     	;# 
  1840  041A                     	;# 
  1841  041B                     	;# 
  1842  041C                     	;# 
  1843  041D                     	;# 
  1844  041E                     	;# 
  1845  041F                     	;# 
  1846  0498                     	;# 
  1847  0498                     	;# 
  1848  0499                     	;# 
  1849  049A                     	;# 
  1850  049B                     	;# 
  1851  049B                     	;# 
  1852  049C                     	;# 
  1853  049D                     	;# 
  1854  049E                     	;# 
  1855  049F                     	;# 
  1856  0617                     	;# 
  1857  0618                     	;# 
  1858  0619                     	;# 
  1859  0619                     	;# 
  1860  061A                     	;# 
  1861  061B                     	;# 
  1862  061C                     	;# 
  1863  061C                     	;# 
  1864  061F                     	;# 
  1865  0691                     	;# 
  1866  0692                     	;# 
  1867  0693                     	;# 
  1868  0694                     	;# 
  1869  0695                     	;# 
  1870  0696                     	;# 
  1871  0697                     	;# 
  1872  0698                     	;# 
  1873  0699                     	;# 
  1874  0711                     	;# 
  1875  0712                     	;# 
  1876  0713                     	;# 
  1877  0714                     	;# 
  1878  0715                     	;# 
  1879  0716                     	;# 
  1880  0717                     	;# 
  1881  0718                     	;# 
  1882  0719                     	;# 
  1883  0891                     	;# 
  1884  0891                     	;# 
  1885  0891                     	;# 
  1886  0891                     	;# 
  1887  0891                     	;# 
  1888  0891                     	;# 
  1889  0892                     	;# 
  1890  0892                     	;# 
  1891  0892                     	;# 
  1892  0893                     	;# 
  1893  0893                     	;# 
  1894  0893                     	;# 
  1895  0893                     	;# 
  1896  0893                     	;# 
  1897  0893                     	;# 
  1898  0894                     	;# 
  1899  0894                     	;# 
  1900  0894                     	;# 
  1901  0895                     	;# 
  1902  0895                     	;# 
  1903  0895                     	;# 
  1904  0896                     	;# 
  1905  0896                     	;# 
  1906  0896                     	;# 
  1907  089B                     	;# 
  1908  0911                     	;# 
  1909  0912                     	;# 
  1910  0913                     	;# 
  1911  0914                     	;# 
  1912  0915                     	;# 
  1913  0916                     	;# 
  1914  0918                     	;# 
  1915  0919                     	;# 
  1916  091A                     	;# 
  1917  091B                     	;# 
  1918  091C                     	;# 
  1919  091D                     	;# 
  1920  091E                     	;# 
  1921  091F                     	;# 
  1922  0E0F                     	;# 
  1923  0E10                     	;# 
  1924  0E11                     	;# 
  1925  0E12                     	;# 
  1926  0E13                     	;# 
  1927  0E14                     	;# 
  1928  0E15                     	;# 
  1929  0E16                     	;# 
  1930  0E17                     	;# 
  1931  0E18                     	;# 
  1932  0E19                     	;# 
  1933  0E1A                     	;# 
  1934  0E1B                     	;# 
  1935  0E1C                     	;# 
  1936  0E1D                     	;# 
  1937  0E1E                     	;# 
  1938  0E1F                     	;# 
  1939  0E20                     	;# 
  1940  0E21                     	;# 
  1941  0E22                     	;# 
  1942  0E24                     	;# 
  1943  0E25                     	;# 
  1944  0E28                     	;# 
  1945  0E29                     	;# 
  1946  0E2A                     	;# 
  1947  0E2B                     	;# 
  1948  0E2C                     	;# 
  1949  0E2D                     	;# 
  1950  0E2E                     	;# 
  1951  0E2F                     	;# 
  1952  0E90                     	;# 
  1953  0E91                     	;# 
  1954  0E92                     	;# 
  1955  0E94                     	;# 
  1956  0E95                     	;# 
  1957  0E9C                     	;# 
  1958  0E9D                     	;# 
  1959  0E9E                     	;# 
  1960  0E9F                     	;# 
  1961  0EA0                     	;# 
  1962  0EA1                     	;# 
  1963  0EA2                     	;# 
  1964  0EA3                     	;# 
  1965  0EA4                     	;# 
  1966  0EA5                     	;# 
  1967  0EA6                     	;# 
  1968  0EA7                     	;# 
  1969  0F0F                     	;# 
  1970  0F10                     	;# 
  1971  0F11                     	;# 
  1972  0F12                     	;# 
  1973  0F13                     	;# 
  1974  0F14                     	;# 
  1975  0F15                     	;# 
  1976  0F16                     	;# 
  1977  0F17                     	;# 
  1978  0F18                     	;# 
  1979  0F19                     	;# 
  1980  0F1A                     	;# 
  1981  0F1B                     	;# 
  1982  0F1C                     	;# 
  1983  0F1D                     	;# 
  1984  0F1E                     	;# 
  1985  0F1F                     	;# 
  1986  0F20                     	;# 
  1987  0F21                     	;# 
  1988  0F22                     	;# 
  1989  0F23                     	;# 
  1990  0F24                     	;# 
  1991  0F25                     	;# 
  1992  0F26                     	;# 
  1993  0F27                     	;# 
  1994  0F28                     	;# 
  1995  0F29                     	;# 
  1996  0F2A                     	;# 
  1997  0F2B                     	;# 
  1998  0F2C                     	;# 
  1999  0F2D                     	;# 
  2000  0F2E                     	;# 
  2001  0F2F                     	;# 
  2002  0F30                     	;# 
  2003  0F31                     	;# 
  2004  0F32                     	;# 
  2005  0F33                     	;# 
  2006  0F34                     	;# 
  2007  0F35                     	;# 
  2008  0F36                     	;# 
  2009  0F37                     	;# 
  2010  0FE4                     	;# 
  2011  0FE5                     	;# 
  2012  0FE6                     	;# 
  2013  0FE7                     	;# 
  2014  0FE8                     	;# 
  2015  0FE9                     	;# 
  2016  0FEA                     	;# 
  2017  0FEB                     	;# 
  2018  0FED                     	;# 
  2019  0FEE                     	;# 
  2020  0FEF                     	;# 
  2021  0000                     	;# 
  2022  0001                     	;# 
  2023  0002                     	;# 
  2024  0003                     	;# 
  2025  0004                     	;# 
  2026  0005                     	;# 
  2027  0006                     	;# 
  2028  0007                     	;# 
  2029  0008                     	;# 
  2030  0009                     	;# 
  2031  000A                     	;# 
  2032  000B                     	;# 
  2033  000C                     	;# 
  2034  000D                     	;# 
  2035  000E                     	;# 
  2036  0010                     	;# 
  2037  0011                     	;# 
  2038  0012                     	;# 
  2039  0013                     	;# 
  2040  0014                     	;# 
  2041  0015                     	;# 
  2042  0015                     	;# 
  2043  0016                     	;# 
  2044  0016                     	;# 
  2045  0017                     	;# 
  2046  0018                     	;# 
  2047  0019                     	;# 
  2048  0019                     	;# 
  2049  001A                     	;# 
  2050  001B                     	;# 
  2051  001C                     	;# 
  2052  001D                     	;# 
  2053  001E                     	;# 
  2054  001F                     	;# 
  2055  008C                     	;# 
  2056  008D                     	;# 
  2057  008E                     	;# 
  2058  0090                     	;# 
  2059  0091                     	;# 
  2060  0092                     	;# 
  2061  0093                     	;# 
  2062  0094                     	;# 
  2063  0097                     	;# 
  2064  009B                     	;# 
  2065  009B                     	;# 
  2066  009C                     	;# 
  2067  009D                     	;# 
  2068  009E                     	;# 
  2069  009F                     	;# 
  2070  010C                     	;# 
  2071  010D                     	;# 
  2072  010E                     	;# 
  2073  0111                     	;# 
  2074  0112                     	;# 
  2075  0113                     	;# 
  2076  0114                     	;# 
  2077  0115                     	;# 
  2078  0116                     	;# 
  2079  0117                     	;# 
  2080  0118                     	;# 
  2081  0119                     	;# 
  2082  018C                     	;# 
  2083  018D                     	;# 
  2084  018E                     	;# 
  2085  0199                     	;# 
  2086  0199                     	;# 
  2087  0199                     	;# 
  2088  019A                     	;# 
  2089  019A                     	;# 
  2090  019A                     	;# 
  2091  019B                     	;# 
  2092  019B                     	;# 
  2093  019B                     	;# 
  2094  019B                     	;# 
  2095  019B                     	;# 
  2096  019C                     	;# 
  2097  019C                     	;# 
  2098  019C                     	;# 
  2099  019D                     	;# 
  2100  019D                     	;# 
  2101  019D                     	;# 
  2102  019E                     	;# 
  2103  019E                     	;# 
  2104  019E                     	;# 
  2105  019F                     	;# 
  2106  019F                     	;# 
  2107  019F                     	;# 
  2108  019F                     	;# 
  2109  019F                     	;# 
  2110  020C                     	;# 
  2111  020D                     	;# 
  2112  020E                     	;# 
  2113  0211                     	;# 
  2114  0211                     	;# 
  2115  0212                     	;# 
  2116  0212                     	;# 
  2117  0213                     	;# 
  2118  0213                     	;# 
  2119  0214                     	;# 
  2120  0214                     	;# 
  2121  0215                     	;# 
  2122  0215                     	;# 
  2123  0215                     	;# 
  2124  0215                     	;# 
  2125  0216                     	;# 
  2126  0216                     	;# 
  2127  0217                     	;# 
  2128  0217                     	;# 
  2129  0219                     	;# 
  2130  021A                     	;# 
  2131  021B                     	;# 
  2132  021C                     	;# 
  2133  021D                     	;# 
  2134  021D                     	;# 
  2135  021E                     	;# 
  2136  021F                     	;# 
  2137  028C                     	;# 
  2138  028D                     	;# 
  2139  028E                     	;# 
  2140  0291                     	;# 
  2141  0291                     	;# 
  2142  0292                     	;# 
  2143  0293                     	;# 
  2144  0294                     	;# 
  2145  0295                     	;# 
  2146  0295                     	;# 
  2147  0296                     	;# 
  2148  0297                     	;# 
  2149  0298                     	;# 
  2150  029F                     	;# 
  2151  030C                     	;# 
  2152  030D                     	;# 
  2153  030E                     	;# 
  2154  0311                     	;# 
  2155  0311                     	;# 
  2156  0312                     	;# 
  2157  0313                     	;# 
  2158  0314                     	;# 
  2159  0315                     	;# 
  2160  0315                     	;# 
  2161  0316                     	;# 
  2162  0317                     	;# 
  2163  0318                     	;# 
  2164  038C                     	;# 
  2165  038D                     	;# 
  2166  038E                     	;# 
  2167  0391                     	;# 
  2168  0392                     	;# 
  2169  0393                     	;# 
  2170  0394                     	;# 
  2171  0395                     	;# 
  2172  0396                     	;# 
  2173  0397                     	;# 
  2174  0398                     	;# 
  2175  0399                     	;# 
  2176  039A                     	;# 
  2177  039C                     	;# 
  2178  039D                     	;# 
  2179  039E                     	;# 
  2180  039F                     	;# 
  2181  0411                     	;# 
  2182  0411                     	;# 
  2183  0412                     	;# 
  2184  0413                     	;# 
  2185  0414                     	;# 
  2186  0415                     	;# 
  2187  0416                     	;# 
  2188  0417                     	;# 
  2189  0418                     	;# 
  2190  0418                     	;# 
  2191  0419                     	;# 
  2192  041A                     	;# 
  2193  041B                     	;# 
  2194  041C                     	;# 
  2195  041D                     	;# 
  2196  041E                     	;# 
  2197  041F                     	;# 
  2198  0498                     	;# 
  2199  0498                     	;# 
  2200  0499                     	;# 
  2201  049A                     	;# 
  2202  049B                     	;# 
  2203  049B                     	;# 
  2204  049C                     	;# 
  2205  049D                     	;# 
  2206  049E                     	;# 
  2207  049F                     	;# 
  2208  0617                     	;# 
  2209  0618                     	;# 
  2210  0619                     	;# 
  2211  0619                     	;# 
  2212  061A                     	;# 
  2213  061B                     	;# 
  2214  061C                     	;# 
  2215  061C                     	;# 
  2216  061F                     	;# 
  2217  0691                     	;# 
  2218  0692                     	;# 
  2219  0693                     	;# 
  2220  0694                     	;# 
  2221  0695                     	;# 
  2222  0696                     	;# 
  2223  0697                     	;# 
  2224  0698                     	;# 
  2225  0699                     	;# 
  2226  0711                     	;# 
  2227  0712                     	;# 
  2228  0713                     	;# 
  2229  0714                     	;# 
  2230  0715                     	;# 
  2231  0716                     	;# 
  2232  0717                     	;# 
  2233  0718                     	;# 
  2234  0719                     	;# 
  2235  0891                     	;# 
  2236  0891                     	;# 
  2237  0891                     	;# 
  2238  0891                     	;# 
  2239  0891                     	;# 
  2240  0891                     	;# 
  2241  0892                     	;# 
  2242  0892                     	;# 
  2243  0892                     	;# 
  2244  0893                     	;# 
  2245  0893                     	;# 
  2246  0893                     	;# 
  2247  0893                     	;# 
  2248  0893                     	;# 
  2249  0893                     	;# 
  2250  0894                     	;# 
  2251  0894                     	;# 
  2252  0894                     	;# 
  2253  0895                     	;# 
  2254  0895                     	;# 
  2255  0895                     	;# 
  2256  0896                     	;# 
  2257  0896                     	;# 
  2258  0896                     	;# 
  2259  089B                     	;# 
  2260  0911                     	;# 
  2261  0912                     	;# 
  2262  0913                     	;# 
  2263  0914                     	;# 
  2264  0915                     	;# 
  2265  0916                     	;# 
  2266  0918                     	;# 
  2267  0919                     	;# 
  2268  091A                     	;# 
  2269  091B                     	;# 
  2270  091C                     	;# 
  2271  091D                     	;# 
  2272  091E                     	;# 
  2273  091F                     	;# 
  2274  0E0F                     	;# 
  2275  0E10                     	;# 
  2276  0E11                     	;# 
  2277  0E12                     	;# 
  2278  0E13                     	;# 
  2279  0E14                     	;# 
  2280  0E15                     	;# 
  2281  0E16                     	;# 
  2282  0E17                     	;# 
  2283  0E18                     	;# 
  2284  0E19                     	;# 
  2285  0E1A                     	;# 
  2286  0E1B                     	;# 
  2287  0E1C                     	;# 
  2288  0E1D                     	;# 
  2289  0E1E                     	;# 
  2290  0E1F                     	;# 
  2291  0E20                     	;# 
  2292  0E21                     	;# 
  2293  0E22                     	;# 
  2294  0E24                     	;# 
  2295  0E25                     	;# 
  2296  0E28                     	;# 
  2297  0E29                     	;# 
  2298  0E2A                     	;# 
  2299  0E2B                     	;# 
  2300  0E2C                     	;# 
  2301  0E2D                     	;# 
  2302  0E2E                     	;# 
  2303  0E2F                     	;# 
  2304  0E90                     	;# 
  2305  0E91                     	;# 
  2306  0E92                     	;# 
  2307  0E94                     	;# 
  2308  0E95                     	;# 
  2309  0E9C                     	;# 
  2310  0E9D                     	;# 
  2311  0E9E                     	;# 
  2312  0E9F                     	;# 
  2313  0EA0                     	;# 
  2314  0EA1                     	;# 
  2315  0EA2                     	;# 
  2316  0EA3                     	;# 
  2317  0EA4                     	;# 
  2318  0EA5                     	;# 
  2319  0EA6                     	;# 
  2320  0EA7                     	;# 
  2321  0F0F                     	;# 
  2322  0F10                     	;# 
  2323  0F11                     	;# 
  2324  0F12                     	;# 
  2325  0F13                     	;# 
  2326  0F14                     	;# 
  2327  0F15                     	;# 
  2328  0F16                     	;# 
  2329  0F17                     	;# 
  2330  0F18                     	;# 
  2331  0F19                     	;# 
  2332  0F1A                     	;# 
  2333  0F1B                     	;# 
  2334  0F1C                     	;# 
  2335  0F1D                     	;# 
  2336  0F1E                     	;# 
  2337  0F1F                     	;# 
  2338  0F20                     	;# 
  2339  0F21                     	;# 
  2340  0F22                     	;# 
  2341  0F23                     	;# 
  2342  0F24                     	;# 
  2343  0F25                     	;# 
  2344  0F26                     	;# 
  2345  0F27                     	;# 
  2346  0F28                     	;# 
  2347  0F29                     	;# 
  2348  0F2A                     	;# 
  2349  0F2B                     	;# 
  2350  0F2C                     	;# 
  2351  0F2D                     	;# 
  2352  0F2E                     	;# 
  2353  0F2F                     	;# 
  2354  0F30                     	;# 
  2355  0F31                     	;# 
  2356  0F32                     	;# 
  2357  0F33                     	;# 
  2358  0F34                     	;# 
  2359  0F35                     	;# 
  2360  0F36                     	;# 
  2361  0F37                     	;# 
  2362  0FE4                     	;# 
  2363  0FE5                     	;# 
  2364  0FE6                     	;# 
  2365  0FE7                     	;# 
  2366  0FE8                     	;# 
  2367  0FE9                     	;# 
  2368  0FEA                     	;# 
  2369  0FEB                     	;# 
  2370  0FED                     	;# 
  2371  0FEE                     	;# 
  2372  0FEF                     	;# 
  2373  0000                     	;# 
  2374  0001                     	;# 
  2375  0002                     	;# 
  2376  0003                     	;# 
  2377  0004                     	;# 
  2378  0005                     	;# 
  2379  0006                     	;# 
  2380  0007                     	;# 
  2381  0008                     	;# 
  2382  0009                     	;# 
  2383  000A                     	;# 
  2384  000B                     	;# 
  2385  000C                     	;# 
  2386  000D                     	;# 
  2387  000E                     	;# 
  2388  0010                     	;# 
  2389  0011                     	;# 
  2390  0012                     	;# 
  2391  0013                     	;# 
  2392  0014                     	;# 
  2393  0015                     	;# 
  2394  0015                     	;# 
  2395  0016                     	;# 
  2396  0016                     	;# 
  2397  0017                     	;# 
  2398  0018                     	;# 
  2399  0019                     	;# 
  2400  0019                     	;# 
  2401  001A                     	;# 
  2402  001B                     	;# 
  2403  001C                     	;# 
  2404  001D                     	;# 
  2405  001E                     	;# 
  2406  001F                     	;# 
  2407  008C                     	;# 
  2408  008D                     	;# 
  2409  008E                     	;# 
  2410  0090                     	;# 
  2411  0091                     	;# 
  2412  0092                     	;# 
  2413  0093                     	;# 
  2414  0094                     	;# 
  2415  0097                     	;# 
  2416  009B                     	;# 
  2417  009B                     	;# 
  2418  009C                     	;# 
  2419  009D                     	;# 
  2420  009E                     	;# 
  2421  009F                     	;# 
  2422  010C                     	;# 
  2423  010D                     	;# 
  2424  010E                     	;# 
  2425  0111                     	;# 
  2426  0112                     	;# 
  2427  0113                     	;# 
  2428  0114                     	;# 
  2429  0115                     	;# 
  2430  0116                     	;# 
  2431  0117                     	;# 
  2432  0118                     	;# 
  2433  0119                     	;# 
  2434  018C                     	;# 
  2435  018D                     	;# 
  2436  018E                     	;# 
  2437  0199                     	;# 
  2438  0199                     	;# 
  2439  0199                     	;# 
  2440  019A                     	;# 
  2441  019A                     	;# 
  2442  019A                     	;# 
  2443  019B                     	;# 
  2444  019B                     	;# 
  2445  019B                     	;# 
  2446  019B                     	;# 
  2447  019B                     	;# 
  2448  019C                     	;# 
  2449  019C                     	;# 
  2450  019C                     	;# 
  2451  019D                     	;# 
  2452  019D                     	;# 
  2453  019D                     	;# 
  2454  019E                     	;# 
  2455  019E                     	;# 
  2456  019E                     	;# 
  2457  019F                     	;# 
  2458  019F                     	;# 
  2459  019F                     	;# 
  2460  019F                     	;# 
  2461  019F                     	;# 
  2462  020C                     	;# 
  2463  020D                     	;# 
  2464  020E                     	;# 
  2465  0211                     	;# 
  2466  0211                     	;# 
  2467  0212                     	;# 
  2468  0212                     	;# 
  2469  0213                     	;# 
  2470  0213                     	;# 
  2471  0214                     	;# 
  2472  0214                     	;# 
  2473  0215                     	;# 
  2474  0215                     	;# 
  2475  0215                     	;# 
  2476  0215                     	;# 
  2477  0216                     	;# 
  2478  0216                     	;# 
  2479  0217                     	;# 
  2480  0217                     	;# 
  2481  0219                     	;# 
  2482  021A                     	;# 
  2483  021B                     	;# 
  2484  021C                     	;# 
  2485  021D                     	;# 
  2486  021D                     	;# 
  2487  021E                     	;# 
  2488  021F                     	;# 
  2489  028C                     	;# 
  2490  028D                     	;# 
  2491  028E                     	;# 
  2492  0291                     	;# 
  2493  0291                     	;# 
  2494  0292                     	;# 
  2495  0293                     	;# 
  2496  0294                     	;# 
  2497  0295                     	;# 
  2498  0295                     	;# 
  2499  0296                     	;# 
  2500  0297                     	;# 
  2501  0298                     	;# 
  2502  029F                     	;# 
  2503  030C                     	;# 
  2504  030D                     	;# 
  2505  030E                     	;# 
  2506  0311                     	;# 
  2507  0311                     	;# 
  2508  0312                     	;# 
  2509  0313                     	;# 
  2510  0314                     	;# 
  2511  0315                     	;# 
  2512  0315                     	;# 
  2513  0316                     	;# 
  2514  0317                     	;# 
  2515  0318                     	;# 
  2516  038C                     	;# 
  2517  038D                     	;# 
  2518  038E                     	;# 
  2519  0391                     	;# 
  2520  0392                     	;# 
  2521  0393                     	;# 
  2522  0394                     	;# 
  2523  0395                     	;# 
  2524  0396                     	;# 
  2525  0397                     	;# 
  2526  0398                     	;# 
  2527  0399                     	;# 
  2528  039A                     	;# 
  2529  039C                     	;# 
  2530  039D                     	;# 
  2531  039E                     	;# 
  2532  039F                     	;# 
  2533  0411                     	;# 
  2534  0411                     	;# 
  2535  0412                     	;# 
  2536  0413                     	;# 
  2537  0414                     	;# 
  2538  0415                     	;# 
  2539  0416                     	;# 
  2540  0417                     	;# 
  2541  0418                     	;# 
  2542  0418                     	;# 
  2543  0419                     	;# 
  2544  041A                     	;# 
  2545  041B                     	;# 
  2546  041C                     	;# 
  2547  041D                     	;# 
  2548  041E                     	;# 
  2549  041F                     	;# 
  2550  0498                     	;# 
  2551  0498                     	;# 
  2552  0499                     	;# 
  2553  049A                     	;# 
  2554  049B                     	;# 
  2555  049B                     	;# 
  2556  049C                     	;# 
  2557  049D                     	;# 
  2558  049E                     	;# 
  2559  049F                     	;# 
  2560  0617                     	;# 
  2561  0618                     	;# 
  2562  0619                     	;# 
  2563  0619                     	;# 
  2564  061A                     	;# 
  2565  061B                     	;# 
  2566  061C                     	;# 
  2567  061C                     	;# 
  2568  061F                     	;# 
  2569  0691                     	;# 
  2570  0692                     	;# 
  2571  0693                     	;# 
  2572  0694                     	;# 
  2573  0695                     	;# 
  2574  0696                     	;# 
  2575  0697                     	;# 
  2576  0698                     	;# 
  2577  0699                     	;# 
  2578  0711                     	;# 
  2579  0712                     	;# 
  2580  0713                     	;# 
  2581  0714                     	;# 
  2582  0715                     	;# 
  2583  0716                     	;# 
  2584  0717                     	;# 
  2585  0718                     	;# 
  2586  0719                     	;# 
  2587  0891                     	;# 
  2588  0891                     	;# 
  2589  0891                     	;# 
  2590  0891                     	;# 
  2591  0891                     	;# 
  2592  0891                     	;# 
  2593  0892                     	;# 
  2594  0892                     	;# 
  2595  0892                     	;# 
  2596  0893                     	;# 
  2597  0893                     	;# 
  2598  0893                     	;# 
  2599  0893                     	;# 
  2600  0893                     	;# 
  2601  0893                     	;# 
  2602  0894                     	;# 
  2603  0894                     	;# 
  2604  0894                     	;# 
  2605  0895                     	;# 
  2606  0895                     	;# 
  2607  0895                     	;# 
  2608  0896                     	;# 
  2609  0896                     	;# 
  2610  0896                     	;# 
  2611  089B                     	;# 
  2612  0911                     	;# 
  2613  0912                     	;# 
  2614  0913                     	;# 
  2615  0914                     	;# 
  2616  0915                     	;# 
  2617  0916                     	;# 
  2618  0918                     	;# 
  2619  0919                     	;# 
  2620  091A                     	;# 
  2621  091B                     	;# 
  2622  091C                     	;# 
  2623  091D                     	;# 
  2624  091E                     	;# 
  2625  091F                     	;# 
  2626  0E0F                     	;# 
  2627  0E10                     	;# 
  2628  0E11                     	;# 
  2629  0E12                     	;# 
  2630  0E13                     	;# 
  2631  0E14                     	;# 
  2632  0E15                     	;# 
  2633  0E16                     	;# 
  2634  0E17                     	;# 
  2635  0E18                     	;# 
  2636  0E19                     	;# 
  2637  0E1A                     	;# 
  2638  0E1B                     	;# 
  2639  0E1C                     	;# 
  2640  0E1D                     	;# 
  2641  0E1E                     	;# 
  2642  0E1F                     	;# 
  2643  0E20                     	;# 
  2644  0E21                     	;# 
  2645  0E22                     	;# 
  2646  0E24                     	;# 
  2647  0E25                     	;# 
  2648  0E28                     	;# 
  2649  0E29                     	;# 
  2650  0E2A                     	;# 
  2651  0E2B                     	;# 
  2652  0E2C                     	;# 
  2653  0E2D                     	;# 
  2654  0E2E                     	;# 
  2655  0E2F                     	;# 
  2656  0E90                     	;# 
  2657  0E91                     	;# 
  2658  0E92                     	;# 
  2659  0E94                     	;# 
  2660  0E95                     	;# 
  2661  0E9C                     	;# 
  2662  0E9D                     	;# 
  2663  0E9E                     	;# 
  2664  0E9F                     	;# 
  2665  0EA0                     	;# 
  2666  0EA1                     	;# 
  2667  0EA2                     	;# 
  2668  0EA3                     	;# 
  2669  0EA4                     	;# 
  2670  0EA5                     	;# 
  2671  0EA6                     	;# 
  2672  0EA7                     	;# 
  2673  0F0F                     	;# 
  2674  0F10                     	;# 
  2675  0F11                     	;# 
  2676  0F12                     	;# 
  2677  0F13                     	;# 
  2678  0F14                     	;# 
  2679  0F15                     	;# 
  2680  0F16                     	;# 
  2681  0F17                     	;# 
  2682  0F18                     	;# 
  2683  0F19                     	;# 
  2684  0F1A                     	;# 
  2685  0F1B                     	;# 
  2686  0F1C                     	;# 
  2687  0F1D                     	;# 
  2688  0F1E                     	;# 
  2689  0F1F                     	;# 
  2690  0F20                     	;# 
  2691  0F21                     	;# 
  2692  0F22                     	;# 
  2693  0F23                     	;# 
  2694  0F24                     	;# 
  2695  0F25                     	;# 
  2696  0F26                     	;# 
  2697  0F27                     	;# 
  2698  0F28                     	;# 
  2699  0F29                     	;# 
  2700  0F2A                     	;# 
  2701  0F2B                     	;# 
  2702  0F2C                     	;# 
  2703  0F2D                     	;# 
  2704  0F2E                     	;# 
  2705  0F2F                     	;# 
  2706  0F30                     	;# 
  2707  0F31                     	;# 
  2708  0F32                     	;# 
  2709  0F33                     	;# 
  2710  0F34                     	;# 
  2711  0F35                     	;# 
  2712  0F36                     	;# 
  2713  0F37                     	;# 
  2714  0FE4                     	;# 
  2715  0FE5                     	;# 
  2716  0FE6                     	;# 
  2717  0FE7                     	;# 
  2718  0FE8                     	;# 
  2719  0FE9                     	;# 
  2720  0FEA                     	;# 
  2721  0FEB                     	;# 
  2722  0FED                     	;# 
  2723  0FEE                     	;# 
  2724  0FEF                     	;# 
  2725  0000                     	;# 
  2726  0001                     	;# 
  2727  0002                     	;# 
  2728  0003                     	;# 
  2729  0004                     	;# 
  2730  0005                     	;# 
  2731  0006                     	;# 
  2732  0007                     	;# 
  2733  0008                     	;# 
  2734  0009                     	;# 
  2735  000A                     	;# 
  2736  000B                     	;# 
  2737  000C                     	;# 
  2738  000D                     	;# 
  2739  000E                     	;# 
  2740  0010                     	;# 
  2741  0011                     	;# 
  2742  0012                     	;# 
  2743  0013                     	;# 
  2744  0014                     	;# 
  2745  0015                     	;# 
  2746  0015                     	;# 
  2747  0016                     	;# 
  2748  0016                     	;# 
  2749  0017                     	;# 
  2750  0018                     	;# 
  2751  0019                     	;# 
  2752  0019                     	;# 
  2753  001A                     	;# 
  2754  001B                     	;# 
  2755  001C                     	;# 
  2756  001D                     	;# 
  2757  001E                     	;# 
  2758  001F                     	;# 
  2759  008C                     	;# 
  2760  008D                     	;# 
  2761  008E                     	;# 
  2762  0090                     	;# 
  2763  0091                     	;# 
  2764  0092                     	;# 
  2765  0093                     	;# 
  2766  0094                     	;# 
  2767  0097                     	;# 
  2768  009B                     	;# 
  2769  009B                     	;# 
  2770  009C                     	;# 
  2771  009D                     	;# 
  2772  009E                     	;# 
  2773  009F                     	;# 
  2774  010C                     	;# 
  2775  010D                     	;# 
  2776  010E                     	;# 
  2777  0111                     	;# 
  2778  0112                     	;# 
  2779  0113                     	;# 
  2780  0114                     	;# 
  2781  0115                     	;# 
  2782  0116                     	;# 
  2783  0117                     	;# 
  2784  0118                     	;# 
  2785  0119                     	;# 
  2786  018C                     	;# 
  2787  018D                     	;# 
  2788  018E                     	;# 
  2789  0199                     	;# 
  2790  0199                     	;# 
  2791  0199                     	;# 
  2792  019A                     	;# 
  2793  019A                     	;# 
  2794  019A                     	;# 
  2795  019B                     	;# 
  2796  019B                     	;# 
  2797  019B                     	;# 
  2798  019B                     	;# 
  2799  019B                     	;# 
  2800  019C                     	;# 
  2801  019C                     	;# 
  2802  019C                     	;# 
  2803  019D                     	;# 
  2804  019D                     	;# 
  2805  019D                     	;# 
  2806  019E                     	;# 
  2807  019E                     	;# 
  2808  019E                     	;# 
  2809  019F                     	;# 
  2810  019F                     	;# 
  2811  019F                     	;# 
  2812  019F                     	;# 
  2813  019F                     	;# 
  2814  020C                     	;# 
  2815  020D                     	;# 
  2816  020E                     	;# 
  2817  0211                     	;# 
  2818  0211                     	;# 
  2819  0212                     	;# 
  2820  0212                     	;# 
  2821  0213                     	;# 
  2822  0213                     	;# 
  2823  0214                     	;# 
  2824  0214                     	;# 
  2825  0215                     	;# 
  2826  0215                     	;# 
  2827  0215                     	;# 
  2828  0215                     	;# 
  2829  0216                     	;# 
  2830  0216                     	;# 
  2831  0217                     	;# 
  2832  0217                     	;# 
  2833  0219                     	;# 
  2834  021A                     	;# 
  2835  021B                     	;# 
  2836  021C                     	;# 
  2837  021D                     	;# 
  2838  021D                     	;# 
  2839  021E                     	;# 
  2840  021F                     	;# 
  2841  028C                     	;# 
  2842  028D                     	;# 
  2843  028E                     	;# 
  2844  0291                     	;# 
  2845  0291                     	;# 
  2846  0292                     	;# 
  2847  0293                     	;# 
  2848  0294                     	;# 
  2849  0295                     	;# 
  2850  0295                     	;# 
  2851  0296                     	;# 
  2852  0297                     	;# 
  2853  0298                     	;# 
  2854  029F                     	;# 
  2855  030C                     	;# 
  2856  030D                     	;# 
  2857  030E                     	;# 
  2858  0311                     	;# 
  2859  0311                     	;# 
  2860  0312                     	;# 
  2861  0313                     	;# 
  2862  0314                     	;# 
  2863  0315                     	;# 
  2864  0315                     	;# 
  2865  0316                     	;# 
  2866  0317                     	;# 
  2867  0318                     	;# 
  2868  038C                     	;# 
  2869  038D                     	;# 
  2870  038E                     	;# 
  2871  0391                     	;# 
  2872  0392                     	;# 
  2873  0393                     	;# 
  2874  0394                     	;# 
  2875  0395                     	;# 
  2876  0396                     	;# 
  2877  0397                     	;# 
  2878  0398                     	;# 
  2879  0399                     	;# 
  2880  039A                     	;# 
  2881  039C                     	;# 
  2882  039D                     	;# 
  2883  039E                     	;# 
  2884  039F                     	;# 
  2885  0411                     	;# 
  2886  0411                     	;# 
  2887  0412                     	;# 
  2888  0413                     	;# 
  2889  0414                     	;# 
  2890  0415                     	;# 
  2891  0416                     	;# 
  2892  0417                     	;# 
  2893  0418                     	;# 
  2894  0418                     	;# 
  2895  0419                     	;# 
  2896  041A                     	;# 
  2897  041B                     	;# 
  2898  041C                     	;# 
  2899  041D                     	;# 
  2900  041E                     	;# 
  2901  041F                     	;# 
  2902  0498                     	;# 
  2903  0498                     	;# 
  2904  0499                     	;# 
  2905  049A                     	;# 
  2906  049B                     	;# 
  2907  049B                     	;# 
  2908  049C                     	;# 
  2909  049D                     	;# 
  2910  049E                     	;# 
  2911  049F                     	;# 
  2912  0617                     	;# 
  2913  0618                     	;# 
  2914  0619                     	;# 
  2915  0619                     	;# 
  2916  061A                     	;# 
  2917  061B                     	;# 
  2918  061C                     	;# 
  2919  061C                     	;# 
  2920  061F                     	;# 
  2921  0691                     	;# 
  2922  0692                     	;# 
  2923  0693                     	;# 
  2924  0694                     	;# 
  2925  0695                     	;# 
  2926  0696                     	;# 
  2927  0697                     	;# 
  2928  0698                     	;# 
  2929  0699                     	;# 
  2930  0711                     	;# 
  2931  0712                     	;# 
  2932  0713                     	;# 
  2933  0714                     	;# 
  2934  0715                     	;# 
  2935  0716                     	;# 
  2936  0717                     	;# 
  2937  0718                     	;# 
  2938  0719                     	;# 
  2939  0891                     	;# 
  2940  0891                     	;# 
  2941  0891                     	;# 
  2942  0891                     	;# 
  2943  0891                     	;# 
  2944  0891                     	;# 
  2945  0892                     	;# 
  2946  0892                     	;# 
  2947  0892                     	;# 
  2948  0893                     	;# 
  2949  0893                     	;# 
  2950  0893                     	;# 
  2951  0893                     	;# 
  2952  0893                     	;# 
  2953  0893                     	;# 
  2954  0894                     	;# 
  2955  0894                     	;# 
  2956  0894                     	;# 
  2957  0895                     	;# 
  2958  0895                     	;# 
  2959  0895                     	;# 
  2960  0896                     	;# 
  2961  0896                     	;# 
  2962  0896                     	;# 
  2963  089B                     	;# 
  2964  0911                     	;# 
  2965  0912                     	;# 
  2966  0913                     	;# 
  2967  0914                     	;# 
  2968  0915                     	;# 
  2969  0916                     	;# 
  2970  0918                     	;# 
  2971  0919                     	;# 
  2972  091A                     	;# 
  2973  091B                     	;# 
  2974  091C                     	;# 
  2975  091D                     	;# 
  2976  091E                     	;# 
  2977  091F                     	;# 
  2978  0E0F                     	;# 
  2979  0E10                     	;# 
  2980  0E11                     	;# 
  2981  0E12                     	;# 
  2982  0E13                     	;# 
  2983  0E14                     	;# 
  2984  0E15                     	;# 
  2985  0E16                     	;# 
  2986  0E17                     	;# 
  2987  0E18                     	;# 
  2988  0E19                     	;# 
  2989  0E1A                     	;# 
  2990  0E1B                     	;# 
  2991  0E1C                     	;# 
  2992  0E1D                     	;# 
  2993  0E1E                     	;# 
  2994  0E1F                     	;# 
  2995  0E20                     	;# 
  2996  0E21                     	;# 
  2997  0E22                     	;# 
  2998  0E24                     	;# 
  2999  0E25                     	;# 
  3000  0E28                     	;# 
  3001  0E29                     	;# 
  3002  0E2A                     	;# 
  3003  0E2B                     	;# 
  3004  0E2C                     	;# 
  3005  0E2D                     	;# 
  3006  0E2E                     	;# 
  3007  0E2F                     	;# 
  3008  0E90                     	;# 
  3009  0E91                     	;# 
  3010  0E92                     	;# 
  3011  0E94                     	;# 
  3012  0E95                     	;# 
  3013  0E9C                     	;# 
  3014  0E9D                     	;# 
  3015  0E9E                     	;# 
  3016  0E9F                     	;# 
  3017  0EA0                     	;# 
  3018  0EA1                     	;# 
  3019  0EA2                     	;# 
  3020  0EA3                     	;# 
  3021  0EA4                     	;# 
  3022  0EA5                     	;# 
  3023  0EA6                     	;# 
  3024  0EA7                     	;# 
  3025  0F0F                     	;# 
  3026  0F10                     	;# 
  3027  0F11                     	;# 
  3028  0F12                     	;# 
  3029  0F13                     	;# 
  3030  0F14                     	;# 
  3031  0F15                     	;# 
  3032  0F16                     	;# 
  3033  0F17                     	;# 
  3034  0F18                     	;# 
  3035  0F19                     	;# 
  3036  0F1A                     	;# 
  3037  0F1B                     	;# 
  3038  0F1C                     	;# 
  3039  0F1D                     	;# 
  3040  0F1E                     	;# 
  3041  0F1F                     	;# 
  3042  0F20                     	;# 
  3043  0F21                     	;# 
  3044  0F22                     	;# 
  3045  0F23                     	;# 
  3046  0F24                     	;# 
  3047  0F25                     	;# 
  3048  0F26                     	;# 
  3049  0F27                     	;# 
  3050  0F28                     	;# 
  3051  0F29                     	;# 
  3052  0F2A                     	;# 
  3053  0F2B                     	;# 
  3054  0F2C                     	;# 
  3055  0F2D                     	;# 
  3056  0F2E                     	;# 
  3057  0F2F                     	;# 
  3058  0F30                     	;# 
  3059  0F31                     	;# 
  3060  0F32                     	;# 
  3061  0F33                     	;# 
  3062  0F34                     	;# 
  3063  0F35                     	;# 
  3064  0F36                     	;# 
  3065  0F37                     	;# 
  3066  0FE4                     	;# 
  3067  0FE5                     	;# 
  3068  0FE6                     	;# 
  3069  0FE7                     	;# 
  3070  0FE8                     	;# 
  3071  0FE9                     	;# 
  3072  0FEA                     	;# 
  3073  0FEB                     	;# 
  3074  0FED                     	;# 
  3075  0FEE                     	;# 
  3076  0FEF                     	;# 
  3077  0000                     	;# 
  3078  0001                     	;# 
  3079  0002                     	;# 
  3080  0003                     	;# 
  3081  0004                     	;# 
  3082  0005                     	;# 
  3083  0006                     	;# 
  3084  0007                     	;# 
  3085  0008                     	;# 
  3086  0009                     	;# 
  3087  000A                     	;# 
  3088  000B                     	;# 
  3089  000C                     	;# 
  3090  000D                     	;# 
  3091  000E                     	;# 
  3092  0010                     	;# 
  3093  0011                     	;# 
  3094  0012                     	;# 
  3095  0013                     	;# 
  3096  0014                     	;# 
  3097  0015                     	;# 
  3098  0015                     	;# 
  3099  0016                     	;# 
  3100  0016                     	;# 
  3101  0017                     	;# 
  3102  0018                     	;# 
  3103  0019                     	;# 
  3104  0019                     	;# 
  3105  001A                     	;# 
  3106  001B                     	;# 
  3107  001C                     	;# 
  3108  001D                     	;# 
  3109  001E                     	;# 
  3110  001F                     	;# 
  3111  008C                     	;# 
  3112  008D                     	;# 
  3113  008E                     	;# 
  3114  0090                     	;# 
  3115  0091                     	;# 
  3116  0092                     	;# 
  3117  0093                     	;# 
  3118  0094                     	;# 
  3119  0097                     	;# 
  3120  009B                     	;# 
  3121  009B                     	;# 
  3122  009C                     	;# 
  3123  009D                     	;# 
  3124  009E                     	;# 
  3125  009F                     	;# 
  3126  010C                     	;# 
  3127  010D                     	;# 
  3128  010E                     	;# 
  3129  0111                     	;# 
  3130  0112                     	;# 
  3131  0113                     	;# 
  3132  0114                     	;# 
  3133  0115                     	;# 
  3134  0116                     	;# 
  3135  0117                     	;# 
  3136  0118                     	;# 
  3137  0119                     	;# 
  3138  018C                     	;# 
  3139  018D                     	;# 
  3140  018E                     	;# 
  3141  0199                     	;# 
  3142  0199                     	;# 
  3143  0199                     	;# 
  3144  019A                     	;# 
  3145  019A                     	;# 
  3146  019A                     	;# 
  3147  019B                     	;# 
  3148  019B                     	;# 
  3149  019B                     	;# 
  3150  019B                     	;# 
  3151  019B                     	;# 
  3152  019C                     	;# 
  3153  019C                     	;# 
  3154  019C                     	;# 
  3155  019D                     	;# 
  3156  019D                     	;# 
  3157  019D                     	;# 
  3158  019E                     	;# 
  3159  019E                     	;# 
  3160  019E                     	;# 
  3161  019F                     	;# 
  3162  019F                     	;# 
  3163  019F                     	;# 
  3164  019F                     	;# 
  3165  019F                     	;# 
  3166  020C                     	;# 
  3167  020D                     	;# 
  3168  020E                     	;# 
  3169  0211                     	;# 
  3170  0211                     	;# 
  3171  0212                     	;# 
  3172  0212                     	;# 
  3173  0213                     	;# 
  3174  0213                     	;# 
  3175  0214                     	;# 
  3176  0214                     	;# 
  3177  0215                     	;# 
  3178  0215                     	;# 
  3179  0215                     	;# 
  3180  0215                     	;# 
  3181  0216                     	;# 
  3182  0216                     	;# 
  3183  0217                     	;# 
  3184  0217                     	;# 
  3185  0219                     	;# 
  3186  021A                     	;# 
  3187  021B                     	;# 
  3188  021C                     	;# 
  3189  021D                     	;# 
  3190  021D                     	;# 
  3191  021E                     	;# 
  3192  021F                     	;# 
  3193  028C                     	;# 
  3194  028D                     	;# 
  3195  028E                     	;# 
  3196  0291                     	;# 
  3197  0291                     	;# 
  3198  0292                     	;# 
  3199  0293                     	;# 
  3200  0294                     	;# 
  3201  0295                     	;# 
  3202  0295                     	;# 
  3203  0296                     	;# 
  3204  0297                     	;# 
  3205  0298                     	;# 
  3206  029F                     	;# 
  3207  030C                     	;# 
  3208  030D                     	;# 
  3209  030E                     	;# 
  3210  0311                     	;# 
  3211  0311                     	;# 
  3212  0312                     	;# 
  3213  0313                     	;# 
  3214  0314                     	;# 
  3215  0315                     	;# 
  3216  0315                     	;# 
  3217  0316                     	;# 
  3218  0317                     	;# 
  3219  0318                     	;# 
  3220  038C                     	;# 
  3221  038D                     	;# 
  3222  038E                     	;# 
  3223  0391                     	;# 
  3224  0392                     	;# 
  3225  0393                     	;# 
  3226  0394                     	;# 
  3227  0395                     	;# 
  3228  0396                     	;# 
  3229  0397                     	;# 
  3230  0398                     	;# 
  3231  0399                     	;# 
  3232  039A                     	;# 
  3233  039C                     	;# 
  3234  039D                     	;# 
  3235  039E                     	;# 
  3236  039F                     	;# 
  3237  0411                     	;# 
  3238  0411                     	;# 
  3239  0412                     	;# 
  3240  0413                     	;# 
  3241  0414                     	;# 
  3242  0415                     	;# 
  3243  0416                     	;# 
  3244  0417                     	;# 
  3245  0418                     	;# 
  3246  0418                     	;# 
  3247  0419                     	;# 
  3248  041A                     	;# 
  3249  041B                     	;# 
  3250  041C                     	;# 
  3251  041D                     	;# 
  3252  041E                     	;# 
  3253  041F                     	;# 
  3254  0498                     	;# 
  3255  0498                     	;# 
  3256  0499                     	;# 
  3257  049A                     	;# 
  3258  049B                     	;# 
  3259  049B                     	;# 
  3260  049C                     	;# 
  3261  049D                     	;# 
  3262  049E                     	;# 
  3263  049F                     	;# 
  3264  0617                     	;# 
  3265  0618                     	;# 
  3266  0619                     	;# 
  3267  0619                     	;# 
  3268  061A                     	;# 
  3269  061B                     	;# 
  3270  061C                     	;# 
  3271  061C                     	;# 
  3272  061F                     	;# 
  3273  0691                     	;# 
  3274  0692                     	;# 
  3275  0693                     	;# 
  3276  0694                     	;# 
  3277  0695                     	;# 
  3278  0696                     	;# 
  3279  0697                     	;# 
  3280  0698                     	;# 
  3281  0699                     	;# 
  3282  0711                     	;# 
  3283  0712                     	;# 
  3284  0713                     	;# 
  3285  0714                     	;# 
  3286  0715                     	;# 
  3287  0716                     	;# 
  3288  0717                     	;# 
  3289  0718                     	;# 
  3290  0719                     	;# 
  3291  0891                     	;# 
  3292  0891                     	;# 
  3293  0891                     	;# 
  3294  0891                     	;# 
  3295  0891                     	;# 
  3296  0891                     	;# 
  3297  0892                     	;# 
  3298  0892                     	;# 
  3299  0892                     	;# 
  3300  0893                     	;# 
  3301  0893                     	;# 
  3302  0893                     	;# 
  3303  0893                     	;# 
  3304  0893                     	;# 
  3305  0893                     	;# 
  3306  0894                     	;# 
  3307  0894                     	;# 
  3308  0894                     	;# 
  3309  0895                     	;# 
  3310  0895                     	;# 
  3311  0895                     	;# 
  3312  0896                     	;# 
  3313  0896                     	;# 
  3314  0896                     	;# 
  3315  089B                     	;# 
  3316  0911                     	;# 
  3317  0912                     	;# 
  3318  0913                     	;# 
  3319  0914                     	;# 
  3320  0915                     	;# 
  3321  0916                     	;# 
  3322  0918                     	;# 
  3323  0919                     	;# 
  3324  091A                     	;# 
  3325  091B                     	;# 
  3326  091C                     	;# 
  3327  091D                     	;# 
  3328  091E                     	;# 
  3329  091F                     	;# 
  3330  0E0F                     	;# 
  3331  0E10                     	;# 
  3332  0E11                     	;# 
  3333  0E12                     	;# 
  3334  0E13                     	;# 
  3335  0E14                     	;# 
  3336  0E15                     	;# 
  3337  0E16                     	;# 
  3338  0E17                     	;# 
  3339  0E18                     	;# 
  3340  0E19                     	;# 
  3341  0E1A                     	;# 
  3342  0E1B                     	;# 
  3343  0E1C                     	;# 
  3344  0E1D                     	;# 
  3345  0E1E                     	;# 
  3346  0E1F                     	;# 
  3347  0E20                     	;# 
  3348  0E21                     	;# 
  3349  0E22                     	;# 
  3350  0E24                     	;# 
  3351  0E25                     	;# 
  3352  0E28                     	;# 
  3353  0E29                     	;# 
  3354  0E2A                     	;# 
  3355  0E2B                     	;# 
  3356  0E2C                     	;# 
  3357  0E2D                     	;# 
  3358  0E2E                     	;# 
  3359  0E2F                     	;# 
  3360  0E90                     	;# 
  3361  0E91                     	;# 
  3362  0E92                     	;# 
  3363  0E94                     	;# 
  3364  0E95                     	;# 
  3365  0E9C                     	;# 
  3366  0E9D                     	;# 
  3367  0E9E                     	;# 
  3368  0E9F                     	;# 
  3369  0EA0                     	;# 
  3370  0EA1                     	;# 
  3371  0EA2                     	;# 
  3372  0EA3                     	;# 
  3373  0EA4                     	;# 
  3374  0EA5                     	;# 
  3375  0EA6                     	;# 
  3376  0EA7                     	;# 
  3377  0F0F                     	;# 
  3378  0F10                     	;# 
  3379  0F11                     	;# 
  3380  0F12                     	;# 
  3381  0F13                     	;# 
  3382  0F14                     	;# 
  3383  0F15                     	;# 
  3384  0F16                     	;# 
  3385  0F17                     	;# 
  3386  0F18                     	;# 
  3387  0F19                     	;# 
  3388  0F1A                     	;# 
  3389  0F1B                     	;# 
  3390  0F1C                     	;# 
  3391  0F1D                     	;# 
  3392  0F1E                     	;# 
  3393  0F1F                     	;# 
  3394  0F20                     	;# 
  3395  0F21                     	;# 
  3396  0F22                     	;# 
  3397  0F23                     	;# 
  3398  0F24                     	;# 
  3399  0F25                     	;# 
  3400  0F26                     	;# 
  3401  0F27                     	;# 
  3402  0F28                     	;# 
  3403  0F29                     	;# 
  3404  0F2A                     	;# 
  3405  0F2B                     	;# 
  3406  0F2C                     	;# 
  3407  0F2D                     	;# 
  3408  0F2E                     	;# 
  3409  0F2F                     	;# 
  3410  0F30                     	;# 
  3411  0F31                     	;# 
  3412  0F32                     	;# 
  3413  0F33                     	;# 
  3414  0F34                     	;# 
  3415  0F35                     	;# 
  3416  0F36                     	;# 
  3417  0F37                     	;# 
  3418  0FE4                     	;# 
  3419  0FE5                     	;# 
  3420  0FE6                     	;# 
  3421  0FE7                     	;# 
  3422  0FE8                     	;# 
  3423  0FE9                     	;# 
  3424  0FEA                     	;# 
  3425  0FEB                     	;# 
  3426  0FED                     	;# 
  3427  0FEE                     	;# 
  3428  0FEF                     	;# 
  3429  0000                     	;# 
  3430  0001                     	;# 
  3431  0002                     	;# 
  3432  0003                     	;# 
  3433  0004                     	;# 
  3434  0005                     	;# 
  3435  0006                     	;# 
  3436  0007                     	;# 
  3437  0008                     	;# 
  3438  0009                     	;# 
  3439  000A                     	;# 
  3440  000B                     	;# 
  3441  000C                     	;# 
  3442  000D                     	;# 
  3443  000E                     	;# 
  3444  0010                     	;# 
  3445  0011                     	;# 
  3446  0012                     	;# 
  3447  0013                     	;# 
  3448  0014                     	;# 
  3449  0015                     	;# 
  3450  0015                     	;# 
  3451  0016                     	;# 
  3452  0016                     	;# 
  3453  0017                     	;# 
  3454  0018                     	;# 
  3455  0019                     	;# 
  3456  0019                     	;# 
  3457  001A                     	;# 
  3458  001B                     	;# 
  3459  001C                     	;# 
  3460  001D                     	;# 
  3461  001E                     	;# 
  3462  001F                     	;# 
  3463  008C                     	;# 
  3464  008D                     	;# 
  3465  008E                     	;# 
  3466  0090                     	;# 
  3467  0091                     	;# 
  3468  0092                     	;# 
  3469  0093                     	;# 
  3470  0094                     	;# 
  3471  0097                     	;# 
  3472  009B                     	;# 
  3473  009B                     	;# 
  3474  009C                     	;# 
  3475  009D                     	;# 
  3476  009E                     	;# 
  3477  009F                     	;# 
  3478  010C                     	;# 
  3479  010D                     	;# 
  3480  010E                     	;# 
  3481  0111                     	;# 
  3482  0112                     	;# 
  3483  0113                     	;# 
  3484  0114                     	;# 
  3485  0115                     	;# 
  3486  0116                     	;# 
  3487  0117                     	;# 
  3488  0118                     	;# 
  3489  0119                     	;# 
  3490  018C                     	;# 
  3491  018D                     	;# 
  3492  018E                     	;# 
  3493  0199                     	;# 
  3494  0199                     	;# 
  3495  0199                     	;# 
  3496  019A                     	;# 
  3497  019A                     	;# 
  3498  019A                     	;# 
  3499  019B                     	;# 
  3500  019B                     	;# 
  3501  019B                     	;# 
  3502  019B                     	;# 
  3503  019B                     	;# 
  3504  019C                     	;# 
  3505  019C                     	;# 
  3506  019C                     	;# 
  3507  019D                     	;# 
  3508  019D                     	;# 
  3509  019D                     	;# 
  3510  019E                     	;# 
  3511  019E                     	;# 
  3512  019E                     	;# 
  3513  019F                     	;# 
  3514  019F                     	;# 
  3515  019F                     	;# 
  3516  019F                     	;# 
  3517  019F                     	;# 
  3518  020C                     	;# 
  3519  020D                     	;# 
  3520  020E                     	;# 
  3521  0211                     	;# 
  3522  0211                     	;# 
  3523  0212                     	;# 
  3524  0212                     	;# 
  3525  0213                     	;# 
  3526  0213                     	;# 
  3527  0214                     	;# 
  3528  0214                     	;# 
  3529  0215                     	;# 
  3530  0215                     	;# 
  3531  0215                     	;# 
  3532  0215                     	;# 
  3533  0216                     	;# 
  3534  0216                     	;# 
  3535  0217                     	;# 
  3536  0217                     	;# 
  3537  0219                     	;# 
  3538  021A                     	;# 
  3539  021B                     	;# 
  3540  021C                     	;# 
  3541  021D                     	;# 
  3542  021D                     	;# 
  3543  021E                     	;# 
  3544  021F                     	;# 
  3545  028C                     	;# 
  3546  028D                     	;# 
  3547  028E                     	;# 
  3548  0291                     	;# 
  3549  0291                     	;# 
  3550  0292                     	;# 
  3551  0293                     	;# 
  3552  0294                     	;# 
  3553  0295                     	;# 
  3554  0295                     	;# 
  3555  0296                     	;# 
  3556  0297                     	;# 
  3557  0298                     	;# 
  3558  029F                     	;# 
  3559  030C                     	;# 
  3560  030D                     	;# 
  3561  030E                     	;# 
  3562  0311                     	;# 
  3563  0311                     	;# 
  3564  0312                     	;# 
  3565  0313                     	;# 
  3566  0314                     	;# 
  3567  0315                     	;# 
  3568  0315                     	;# 
  3569  0316                     	;# 
  3570  0317                     	;# 
  3571  0318                     	;# 
  3572  038C                     	;# 
  3573  038D                     	;# 
  3574  038E                     	;# 
  3575  0391                     	;# 
  3576  0392                     	;# 
  3577  0393                     	;# 
  3578  0394                     	;# 
  3579  0395                     	;# 
  3580  0396                     	;# 
  3581  0397                     	;# 
  3582  0398                     	;# 
  3583  0399                     	;# 
  3584  039A                     	;# 
  3585  039C                     	;# 
  3586  039D                     	;# 
  3587  039E                     	;# 
  3588  039F                     	;# 
  3589  0411                     	;# 
  3590  0411                     	;# 
  3591  0412                     	;# 
  3592  0413                     	;# 
  3593  0414                     	;# 
  3594  0415                     	;# 
  3595  0416                     	;# 
  3596  0417                     	;# 
  3597  0418                     	;# 
  3598  0418                     	;# 
  3599  0419                     	;# 
  3600  041A                     	;# 
  3601  041B                     	;# 
  3602  041C                     	;# 
  3603  041D                     	;# 
  3604  041E                     	;# 
  3605  041F                     	;# 
  3606  0498                     	;# 
  3607  0498                     	;# 
  3608  0499                     	;# 
  3609  049A                     	;# 
  3610  049B                     	;# 
  3611  049B                     	;# 
  3612  049C                     	;# 
  3613  049D                     	;# 
  3614  049E                     	;# 
  3615  049F                     	;# 
  3616  0617                     	;# 
  3617  0618                     	;# 
  3618  0619                     	;# 
  3619  0619                     	;# 
  3620  061A                     	;# 
  3621  061B                     	;# 
  3622  061C                     	;# 
  3623  061C                     	;# 
  3624  061F                     	;# 
  3625  0691                     	;# 
  3626  0692                     	;# 
  3627  0693                     	;# 
  3628  0694                     	;# 
  3629  0695                     	;# 
  3630  0696                     	;# 
  3631  0697                     	;# 
  3632  0698                     	;# 
  3633  0699                     	;# 
  3634  0711                     	;# 
  3635  0712                     	;# 
  3636  0713                     	;# 
  3637  0714                     	;# 
  3638  0715                     	;# 
  3639  0716                     	;# 
  3640  0717                     	;# 
  3641  0718                     	;# 
  3642  0719                     	;# 
  3643  0891                     	;# 
  3644  0891                     	;# 
  3645  0891                     	;# 
  3646  0891                     	;# 
  3647  0891                     	;# 
  3648  0891                     	;# 
  3649  0892                     	;# 
  3650  0892                     	;# 
  3651  0892                     	;# 
  3652  0893                     	;# 
  3653  0893                     	;# 
  3654  0893                     	;# 
  3655  0893                     	;# 
  3656  0893                     	;# 
  3657  0893                     	;# 
  3658  0894                     	;# 
  3659  0894                     	;# 
  3660  0894                     	;# 
  3661  0895                     	;# 
  3662  0895                     	;# 
  3663  0895                     	;# 
  3664  0896                     	;# 
  3665  0896                     	;# 
  3666  0896                     	;# 
  3667  089B                     	;# 
  3668  0911                     	;# 
  3669  0912                     	;# 
  3670  0913                     	;# 
  3671  0914                     	;# 
  3672  0915                     	;# 
  3673  0916                     	;# 
  3674  0918                     	;# 
  3675  0919                     	;# 
  3676  091A                     	;# 
  3677  091B                     	;# 
  3678  091C                     	;# 
  3679  091D                     	;# 
  3680  091E                     	;# 
  3681  091F                     	;# 
  3682  0E0F                     	;# 
  3683  0E10                     	;# 
  3684  0E11                     	;# 
  3685  0E12                     	;# 
  3686  0E13                     	;# 
  3687  0E14                     	;# 
  3688  0E15                     	;# 
  3689  0E16                     	;# 
  3690  0E17                     	;# 
  3691  0E18                     	;# 
  3692  0E19                     	;# 
  3693  0E1A                     	;# 
  3694  0E1B                     	;# 
  3695  0E1C                     	;# 
  3696  0E1D                     	;# 
  3697  0E1E                     	;# 
  3698  0E1F                     	;# 
  3699  0E20                     	;# 
  3700  0E21                     	;# 
  3701  0E22                     	;# 
  3702  0E24                     	;# 
  3703  0E25                     	;# 
  3704  0E28                     	;# 
  3705  0E29                     	;# 
  3706  0E2A                     	;# 
  3707  0E2B                     	;# 
  3708  0E2C                     	;# 
  3709  0E2D                     	;# 
  3710  0E2E                     	;# 
  3711  0E2F                     	;# 
  3712  0E90                     	;# 
  3713  0E91                     	;# 
  3714  0E92                     	;# 
  3715  0E94                     	;# 
  3716  0E95                     	;# 
  3717  0E9C                     	;# 
  3718  0E9D                     	;# 
  3719  0E9E                     	;# 
  3720  0E9F                     	;# 
  3721  0EA0                     	;# 
  3722  0EA1                     	;# 
  3723  0EA2                     	;# 
  3724  0EA3                     	;# 
  3725  0EA4                     	;# 
  3726  0EA5                     	;# 
  3727  0EA6                     	;# 
  3728  0EA7                     	;# 
  3729  0F0F                     	;# 
  3730  0F10                     	;# 
  3731  0F11                     	;# 
  3732  0F12                     	;# 
  3733  0F13                     	;# 
  3734  0F14                     	;# 
  3735  0F15                     	;# 
  3736  0F16                     	;# 
  3737  0F17                     	;# 
  3738  0F18                     	;# 
  3739  0F19                     	;# 
  3740  0F1A                     	;# 
  3741  0F1B                     	;# 
  3742  0F1C                     	;# 
  3743  0F1D                     	;# 
  3744  0F1E                     	;# 
  3745  0F1F                     	;# 
  3746  0F20                     	;# 
  3747  0F21                     	;# 
  3748  0F22                     	;# 
  3749  0F23                     	;# 
  3750  0F24                     	;# 
  3751  0F25                     	;# 
  3752  0F26                     	;# 
  3753  0F27                     	;# 
  3754  0F28                     	;# 
  3755  0F29                     	;# 
  3756  0F2A                     	;# 
  3757  0F2B                     	;# 
  3758  0F2C                     	;# 
  3759  0F2D                     	;# 
  3760  0F2E                     	;# 
  3761  0F2F                     	;# 
  3762  0F30                     	;# 
  3763  0F31                     	;# 
  3764  0F32                     	;# 
  3765  0F33                     	;# 
  3766  0F34                     	;# 
  3767  0F35                     	;# 
  3768  0F36                     	;# 
  3769  0F37                     	;# 
  3770  0FE4                     	;# 
  3771  0FE5                     	;# 
  3772  0FE6                     	;# 
  3773  0FE7                     	;# 
  3774  0FE8                     	;# 
  3775  0FE9                     	;# 
  3776  0FEA                     	;# 
  3777  0FEB                     	;# 
  3778  0FED                     	;# 
  3779  0FEE                     	;# 
  3780  0FEF                     	;# 
  3781  0000                     	;# 
  3782  0001                     	;# 
  3783  0002                     	;# 
  3784  0003                     	;# 
  3785  0004                     	;# 
  3786  0005                     	;# 
  3787  0006                     	;# 
  3788  0007                     	;# 
  3789  0008                     	;# 
  3790  0009                     	;# 
  3791  000A                     	;# 
  3792  000B                     	;# 
  3793  000C                     	;# 
  3794  000D                     	;# 
  3795  000E                     	;# 
  3796  0010                     	;# 
  3797  0011                     	;# 
  3798  0012                     	;# 
  3799  0013                     	;# 
  3800  0014                     	;# 
  3801  0015                     	;# 
  3802  0015                     	;# 
  3803  0016                     	;# 
  3804  0016                     	;# 
  3805  0017                     	;# 
  3806  0018                     	;# 
  3807  0019                     	;# 
  3808  0019                     	;# 
  3809  001A                     	;# 
  3810  001B                     	;# 
  3811  001C                     	;# 
  3812  001D                     	;# 
  3813  001E                     	;# 
  3814  001F                     	;# 
  3815  008C                     	;# 
  3816  008D                     	;# 
  3817  008E                     	;# 
  3818  0090                     	;# 
  3819  0091                     	;# 
  3820  0092                     	;# 
  3821  0093                     	;# 
  3822  0094                     	;# 
  3823  0097                     	;# 
  3824  009B                     	;# 
  3825  009B                     	;# 
  3826  009C                     	;# 
  3827  009D                     	;# 
  3828  009E                     	;# 
  3829  009F                     	;# 
  3830  010C                     	;# 
  3831  010D                     	;# 
  3832  010E                     	;# 
  3833  0111                     	;# 
  3834  0112                     	;# 
  3835  0113                     	;# 
  3836  0114                     	;# 
  3837  0115                     	;# 
  3838  0116                     	;# 
  3839  0117                     	;# 
  3840  0118                     	;# 
  3841  0119                     	;# 
  3842  018C                     	;# 
  3843  018D                     	;# 
  3844  018E                     	;# 
  3845  0199                     	;# 
  3846  0199                     	;# 
  3847  0199                     	;# 
  3848  019A                     	;# 
  3849  019A                     	;# 
  3850  019A                     	;# 
  3851  019B                     	;# 
  3852  019B                     	;# 
  3853  019B                     	;# 
  3854  019B                     	;# 
  3855  019B                     	;# 
  3856  019C                     	;# 
  3857  019C                     	;# 
  3858  019C                     	;# 
  3859  019D                     	;# 
  3860  019D                     	;# 
  3861  019D                     	;# 
  3862  019E                     	;# 
  3863  019E                     	;# 
  3864  019E                     	;# 
  3865  019F                     	;# 
  3866  019F                     	;# 
  3867  019F                     	;# 
  3868  019F                     	;# 
  3869  019F                     	;# 
  3870  020C                     	;# 
  3871  020D                     	;# 
  3872  020E                     	;# 
  3873  0211                     	;# 
  3874  0211                     	;# 
  3875  0212                     	;# 
  3876  0212                     	;# 
  3877  0213                     	;# 
  3878  0213                     	;# 
  3879  0214                     	;# 
  3880  0214                     	;# 
  3881  0215                     	;# 
  3882  0215                     	;# 
  3883  0215                     	;# 
  3884  0215                     	;# 
  3885  0216                     	;# 
  3886  0216                     	;# 
  3887  0217                     	;# 
  3888  0217                     	;# 
  3889  0219                     	;# 
  3890  021A                     	;# 
  3891  021B                     	;# 
  3892  021C                     	;# 
  3893  021D                     	;# 
  3894  021D                     	;# 
  3895  021E                     	;# 
  3896  021F                     	;# 
  3897  028C                     	;# 
  3898  028D                     	;# 
  3899  028E                     	;# 
  3900  0291                     	;# 
  3901  0291                     	;# 
  3902  0292                     	;# 
  3903  0293                     	;# 
  3904  0294                     	;# 
  3905  0295                     	;# 
  3906  0295                     	;# 
  3907  0296                     	;# 
  3908  0297                     	;# 
  3909  0298                     	;# 
  3910  029F                     	;# 
  3911  030C                     	;# 
  3912  030D                     	;# 
  3913  030E                     	;# 
  3914  0311                     	;# 
  3915  0311                     	;# 
  3916  0312                     	;# 
  3917  0313                     	;# 
  3918  0314                     	;# 
  3919  0315                     	;# 
  3920  0315                     	;# 
  3921  0316                     	;# 
  3922  0317                     	;# 
  3923  0318                     	;# 
  3924  038C                     	;# 
  3925  038D                     	;# 
  3926  038E                     	;# 
  3927  0391                     	;# 
  3928  0392                     	;# 
  3929  0393                     	;# 
  3930  0394                     	;# 
  3931  0395                     	;# 
  3932  0396                     	;# 
  3933  0397                     	;# 
  3934  0398                     	;# 
  3935  0399                     	;# 
  3936  039A                     	;# 
  3937  039C                     	;# 
  3938  039D                     	;# 
  3939  039E                     	;# 
  3940  039F                     	;# 
  3941  0411                     	;# 
  3942  0411                     	;# 
  3943  0412                     	;# 
  3944  0413                     	;# 
  3945  0414                     	;# 
  3946  0415                     	;# 
  3947  0416                     	;# 
  3948  0417                     	;# 
  3949  0418                     	;# 
  3950  0418                     	;# 
  3951  0419                     	;# 
  3952  041A                     	;# 
  3953  041B                     	;# 
  3954  041C                     	;# 
  3955  041D                     	;# 
  3956  041E                     	;# 
  3957  041F                     	;# 
  3958  0498                     	;# 
  3959  0498                     	;# 
  3960  0499                     	;# 
  3961  049A                     	;# 
  3962  049B                     	;# 
  3963  049B                     	;# 
  3964  049C                     	;# 
  3965  049D                     	;# 
  3966  049E                     	;# 
  3967  049F                     	;# 
  3968  0617                     	;# 
  3969  0618                     	;# 
  3970  0619                     	;# 
  3971  0619                     	;# 
  3972  061A                     	;# 
  3973  061B                     	;# 
  3974  061C                     	;# 
  3975  061C                     	;# 
  3976  061F                     	;# 
  3977  0691                     	;# 
  3978  0692                     	;# 
  3979  0693                     	;# 
  3980  0694                     	;# 
  3981  0695                     	;# 
  3982  0696                     	;# 
  3983  0697                     	;# 
  3984  0698                     	;# 
  3985  0699                     	;# 
  3986  0711                     	;# 
  3987  0712                     	;# 
  3988  0713                     	;# 
  3989  0714                     	;# 
  3990  0715                     	;# 
  3991  0716                     	;# 
  3992  0717                     	;# 
  3993  0718                     	;# 
  3994  0719                     	;# 
  3995  0891                     	;# 
  3996  0891                     	;# 
  3997  0891                     	;# 
  3998  0891                     	;# 
  3999  0891                     	;# 
  4000  0891                     	;# 
  4001  0892                     	;# 
  4002  0892                     	;# 
  4003  0892                     	;# 
  4004  0893                     	;# 
  4005  0893                     	;# 
  4006  0893                     	;# 
  4007  0893                     	;# 
  4008  0893                     	;# 
  4009  0893                     	;# 
  4010  0894                     	;# 
  4011  0894                     	;# 
  4012  0894                     	;# 
  4013  0895                     	;# 
  4014  0895                     	;# 
  4015  0895                     	;# 
  4016  0896                     	;# 
  4017  0896                     	;# 
  4018  0896                     	;# 
  4019  089B                     	;# 
  4020  0911                     	;# 
  4021  0912                     	;# 
  4022  0913                     	;# 
  4023  0914                     	;# 
  4024  0915                     	;# 
  4025  0916                     	;# 
  4026  0918                     	;# 
  4027  0919                     	;# 
  4028  091A                     	;# 
  4029  091B                     	;# 
  4030  091C                     	;# 
  4031  091D                     	;# 
  4032  091E                     	;# 
  4033  091F                     	;# 
  4034  0E0F                     	;# 
  4035  0E10                     	;# 
  4036  0E11                     	;# 
  4037  0E12                     	;# 
  4038  0E13                     	;# 
  4039  0E14                     	;# 
  4040  0E15                     	;# 
  4041  0E16                     	;# 
  4042  0E17                     	;# 
  4043  0E18                     	;# 
  4044  0E19                     	;# 
  4045  0E1A                     	;# 
  4046  0E1B                     	;# 
  4047  0E1C                     	;# 
  4048  0E1D                     	;# 
  4049  0E1E                     	;# 
  4050  0E1F                     	;# 
  4051  0E20                     	;# 
  4052  0E21                     	;# 
  4053  0E22                     	;# 
  4054  0E24                     	;# 
  4055  0E25                     	;# 
  4056  0E28                     	;# 
  4057  0E29                     	;# 
  4058  0E2A                     	;# 
  4059  0E2B                     	;# 
  4060  0E2C                     	;# 
  4061  0E2D                     	;# 
  4062  0E2E                     	;# 
  4063  0E2F                     	;# 
  4064  0E90                     	;# 
  4065  0E91                     	;# 
  4066  0E92                     	;# 
  4067  0E94                     	;# 
  4068  0E95                     	;# 
  4069  0E9C                     	;# 
  4070  0E9D                     	;# 
  4071  0E9E                     	;# 
  4072  0E9F                     	;# 
  4073  0EA0                     	;# 
  4074  0EA1                     	;# 
  4075  0EA2                     	;# 
  4076  0EA3                     	;# 
  4077  0EA4                     	;# 
  4078  0EA5                     	;# 
  4079  0EA6                     	;# 
  4080  0EA7                     	;# 
  4081  0F0F                     	;# 
  4082  0F10                     	;# 
  4083  0F11                     	;# 
  4084  0F12                     	;# 
  4085  0F13                     	;# 
  4086  0F14                     	;# 
  4087  0F15                     	;# 
  4088  0F16                     	;# 
  4089  0F17                     	;# 
  4090  0F18                     	;# 
  4091  0F19                     	;# 
  4092  0F1A                     	;# 
  4093  0F1B                     	;# 
  4094  0F1C                     	;# 
  4095  0F1D                     	;# 
  4096  0F1E                     	;# 
  4097  0F1F                     	;# 
  4098  0F20                     	;# 
  4099  0F21                     	;# 
  4100  0F22                     	;# 
  4101  0F23                     	;# 
  4102  0F24                     	;# 
  4103  0F25                     	;# 
  4104  0F26                     	;# 
  4105  0F27                     	;# 
  4106  0F28                     	;# 
  4107  0F29                     	;# 
  4108  0F2A                     	;# 
  4109  0F2B                     	;# 
  4110  0F2C                     	;# 
  4111  0F2D                     	;# 
  4112  0F2E                     	;# 
  4113  0F2F                     	;# 
  4114  0F30                     	;# 
  4115  0F31                     	;# 
  4116  0F32                     	;# 
  4117  0F33                     	;# 
  4118  0F34                     	;# 
  4119  0F35                     	;# 
  4120  0F36                     	;# 
  4121  0F37                     	;# 
  4122  0FE4                     	;# 
  4123  0FE5                     	;# 
  4124  0FE6                     	;# 
  4125  0FE7                     	;# 
  4126  0FE8                     	;# 
  4127  0FE9                     	;# 
  4128  0FEA                     	;# 
  4129  0FEB                     	;# 
  4130  0FED                     	;# 
  4131  0FEE                     	;# 
  4132  0FEF                     	;# 
  4133  0000                     	;# 
  4134  0001                     	;# 
  4135  0002                     	;# 
  4136  0003                     	;# 
  4137  0004                     	;# 
  4138  0005                     	;# 
  4139  0006                     	;# 
  4140  0007                     	;# 
  4141  0008                     	;# 
  4142  0009                     	;# 
  4143  000A                     	;# 
  4144  000B                     	;# 
  4145  000C                     	;# 
  4146  000D                     	;# 
  4147  000E                     	;# 
  4148  0010                     	;# 
  4149  0011                     	;# 
  4150  0012                     	;# 
  4151  0013                     	;# 
  4152  0014                     	;# 
  4153  0015                     	;# 
  4154  0015                     	;# 
  4155  0016                     	;# 
  4156  0016                     	;# 
  4157  0017                     	;# 
  4158  0018                     	;# 
  4159  0019                     	;# 
  4160  0019                     	;# 
  4161  001A                     	;# 
  4162  001B                     	;# 
  4163  001C                     	;# 
  4164  001D                     	;# 
  4165  001E                     	;# 
  4166  001F                     	;# 
  4167  008C                     	;# 
  4168  008D                     	;# 
  4169  008E                     	;# 
  4170  0090                     	;# 
  4171  0091                     	;# 
  4172  0092                     	;# 
  4173  0093                     	;# 
  4174  0094                     	;# 
  4175  0097                     	;# 
  4176  009B                     	;# 
  4177  009B                     	;# 
  4178  009C                     	;# 
  4179  009D                     	;# 
  4180  009E                     	;# 
  4181  009F                     	;# 
  4182  010C                     	;# 
  4183  010D                     	;# 
  4184  010E                     	;# 
  4185  0111                     	;# 
  4186  0112                     	;# 
  4187  0113                     	;# 
  4188  0114                     	;# 
  4189  0115                     	;# 
  4190  0116                     	;# 
  4191  0117                     	;# 
  4192  0118                     	;# 
  4193  0119                     	;# 
  4194  018C                     	;# 
  4195  018D                     	;# 
  4196  018E                     	;# 
  4197  0199                     	;# 
  4198  0199                     	;# 
  4199  0199                     	;# 
  4200  019A                     	;# 
  4201  019A                     	;# 
  4202  019A                     	;# 
  4203  019B                     	;# 
  4204  019B                     	;# 
  4205  019B                     	;# 
  4206  019B                     	;# 
  4207  019B                     	;# 
  4208  019C                     	;# 
  4209  019C                     	;# 
  4210  019C                     	;# 
  4211  019D                     	;# 
  4212  019D                     	;# 
  4213  019D                     	;# 
  4214  019E                     	;# 
  4215  019E                     	;# 
  4216  019E                     	;# 
  4217  019F                     	;# 
  4218  019F                     	;# 
  4219  019F                     	;# 
  4220  019F                     	;# 
  4221  019F                     	;# 
  4222  020C                     	;# 
  4223  020D                     	;# 
  4224  020E                     	;# 
  4225  0211                     	;# 
  4226  0211                     	;# 
  4227  0212                     	;# 
  4228  0212                     	;# 
  4229  0213                     	;# 
  4230  0213                     	;# 
  4231  0214                     	;# 
  4232  0214                     	;# 
  4233  0215                     	;# 
  4234  0215                     	;# 
  4235  0215                     	;# 
  4236  0215                     	;# 
  4237  0216                     	;# 
  4238  0216                     	;# 
  4239  0217                     	;# 
  4240  0217                     	;# 
  4241  0219                     	;# 
  4242  021A                     	;# 
  4243  021B                     	;# 
  4244  021C                     	;# 
  4245  021D                     	;# 
  4246  021D                     	;# 
  4247  021E                     	;# 
  4248  021F                     	;# 
  4249  028C                     	;# 
  4250  028D                     	;# 
  4251  028E                     	;# 
  4252  0291                     	;# 
  4253  0291                     	;# 
  4254  0292                     	;# 
  4255  0293                     	;# 
  4256  0294                     	;# 
  4257  0295                     	;# 
  4258  0295                     	;# 
  4259  0296                     	;# 
  4260  0297                     	;# 
  4261  0298                     	;# 
  4262  029F                     	;# 
  4263  030C                     	;# 
  4264  030D                     	;# 
  4265  030E                     	;# 
  4266  0311                     	;# 
  4267  0311                     	;# 
  4268  0312                     	;# 
  4269  0313                     	;# 
  4270  0314                     	;# 
  4271  0315                     	;# 
  4272  0315                     	;# 
  4273  0316                     	;# 
  4274  0317                     	;# 
  4275  0318                     	;# 
  4276  038C                     	;# 
  4277  038D                     	;# 
  4278  038E                     	;# 
  4279  0391                     	;# 
  4280  0392                     	;# 
  4281  0393                     	;# 
  4282  0394                     	;# 
  4283  0395                     	;# 
  4284  0396                     	;# 
  4285  0397                     	;# 
  4286  0398                     	;# 
  4287  0399                     	;# 
  4288  039A                     	;# 
  4289  039C                     	;# 
  4290  039D                     	;# 
  4291  039E                     	;# 
  4292  039F                     	;# 
  4293  0411                     	;# 
  4294  0411                     	;# 
  4295  0412                     	;# 
  4296  0413                     	;# 
  4297  0414                     	;# 
  4298  0415                     	;# 
  4299  0416                     	;# 
  4300  0417                     	;# 
  4301  0418                     	;# 
  4302  0418                     	;# 
  4303  0419                     	;# 
  4304  041A                     	;# 
  4305  041B                     	;# 
  4306  041C                     	;# 
  4307  041D                     	;# 
  4308  041E                     	;# 
  4309  041F                     	;# 
  4310  0498                     	;# 
  4311  0498                     	;# 
  4312  0499                     	;# 
  4313  049A                     	;# 
  4314  049B                     	;# 
  4315  049B                     	;# 
  4316  049C                     	;# 
  4317  049D                     	;# 
  4318  049E                     	;# 
  4319  049F                     	;# 
  4320  0617                     	;# 
  4321  0618                     	;# 
  4322  0619                     	;# 
  4323  0619                     	;# 
  4324  061A                     	;# 
  4325  061B                     	;# 
  4326  061C                     	;# 
  4327  061C                     	;# 
  4328  061F                     	;# 
  4329  0691                     	;# 
  4330  0692                     	;# 
  4331  0693                     	;# 
  4332  0694                     	;# 
  4333  0695                     	;# 
  4334  0696                     	;# 
  4335  0697                     	;# 
  4336  0698                     	;# 
  4337  0699                     	;# 
  4338  0711                     	;# 
  4339  0712                     	;# 
  4340  0713                     	;# 
  4341  0714                     	;# 
  4342  0715                     	;# 
  4343  0716                     	;# 
  4344  0717                     	;# 
  4345  0718                     	;# 
  4346  0719                     	;# 
  4347  0891                     	;# 
  4348  0891                     	;# 
  4349  0891                     	;# 
  4350  0891                     	;# 
  4351  0891                     	;# 
  4352  0891                     	;# 
  4353  0892                     	;# 
  4354  0892                     	;# 
  4355  0892                     	;# 
  4356  0893                     	;# 
  4357  0893                     	;# 
  4358  0893                     	;# 
  4359  0893                     	;# 
  4360  0893                     	;# 
  4361  0893                     	;# 
  4362  0894                     	;# 
  4363  0894                     	;# 
  4364  0894                     	;# 
  4365  0895                     	;# 
  4366  0895                     	;# 
  4367  0895                     	;# 
  4368  0896                     	;# 
  4369  0896                     	;# 
  4370  0896                     	;# 
  4371  089B                     	;# 
  4372  0911                     	;# 
  4373  0912                     	;# 
  4374  0913                     	;# 
  4375  0914                     	;# 
  4376  0915                     	;# 
  4377  0916                     	;# 
  4378  0918                     	;# 
  4379  0919                     	;# 
  4380  091A                     	;# 
  4381  091B                     	;# 
  4382  091C                     	;# 
  4383  091D                     	;# 
  4384  091E                     	;# 
  4385  091F                     	;# 
  4386  0E0F                     	;# 
  4387  0E10                     	;# 
  4388  0E11                     	;# 
  4389  0E12                     	;# 
  4390  0E13                     	;# 
  4391  0E14                     	;# 
  4392  0E15                     	;# 
  4393  0E16                     	;# 
  4394  0E17                     	;# 
  4395  0E18                     	;# 
  4396  0E19                     	;# 
  4397  0E1A                     	;# 
  4398  0E1B                     	;# 
  4399  0E1C                     	;# 
  4400  0E1D                     	;# 
  4401  0E1E                     	;# 
  4402  0E1F                     	;# 
  4403  0E20                     	;# 
  4404  0E21                     	;# 
  4405  0E22                     	;# 
  4406  0E24                     	;# 
  4407  0E25                     	;# 
  4408  0E28                     	;# 
  4409  0E29                     	;# 
  4410  0E2A                     	;# 
  4411  0E2B                     	;# 
  4412  0E2C                     	;# 
  4413  0E2D                     	;# 
  4414  0E2E                     	;# 
  4415  0E2F                     	;# 
  4416  0E90                     	;# 
  4417  0E91                     	;# 
  4418  0E92                     	;# 
  4419  0E94                     	;# 
  4420  0E95                     	;# 
  4421  0E9C                     	;# 
  4422  0E9D                     	;# 
  4423  0E9E                     	;# 
  4424  0E9F                     	;# 
  4425  0EA0                     	;# 
  4426  0EA1                     	;# 
  4427  0EA2                     	;# 
  4428  0EA3                     	;# 
  4429  0EA4                     	;# 
  4430  0EA5                     	;# 
  4431  0EA6                     	;# 
  4432  0EA7                     	;# 
  4433  0F0F                     	;# 
  4434  0F10                     	;# 
  4435  0F11                     	;# 
  4436  0F12                     	;# 
  4437  0F13                     	;# 
  4438  0F14                     	;# 
  4439  0F15                     	;# 
  4440  0F16                     	;# 
  4441  0F17                     	;# 
  4442  0F18                     	;# 
  4443  0F19                     	;# 
  4444  0F1A                     	;# 
  4445  0F1B                     	;# 
  4446  0F1C                     	;# 
  4447  0F1D                     	;# 
  4448  0F1E                     	;# 
  4449  0F1F                     	;# 
  4450  0F20                     	;# 
  4451  0F21                     	;# 
  4452  0F22                     	;# 
  4453  0F23                     	;# 
  4454  0F24                     	;# 
  4455  0F25                     	;# 
  4456  0F26                     	;# 
  4457  0F27                     	;# 
  4458  0F28                     	;# 
  4459  0F29                     	;# 
  4460  0F2A                     	;# 
  4461  0F2B                     	;# 
  4462  0F2C                     	;# 
  4463  0F2D                     	;# 
  4464  0F2E                     	;# 
  4465  0F2F                     	;# 
  4466  0F30                     	;# 
  4467  0F31                     	;# 
  4468  0F32                     	;# 
  4469  0F33                     	;# 
  4470  0F34                     	;# 
  4471  0F35                     	;# 
  4472  0F36                     	;# 
  4473  0F37                     	;# 
  4474  0FE4                     	;# 
  4475  0FE5                     	;# 
  4476  0FE6                     	;# 
  4477  0FE7                     	;# 
  4478  0FE8                     	;# 
  4479  0FE9                     	;# 
  4480  0FEA                     	;# 
  4481  0FEB                     	;# 
  4482  0FED                     	;# 
  4483  0FEE                     	;# 
  4484  0FEF                     	;# 
  4485  0000                     	;# 
  4486  0001                     	;# 
  4487  0002                     	;# 
  4488  0003                     	;# 
  4489  0004                     	;# 
  4490  0005                     	;# 
  4491  0006                     	;# 
  4492  0007                     	;# 
  4493  0008                     	;# 
  4494  0009                     	;# 
  4495  000A                     	;# 
  4496  000B                     	;# 
  4497  000C                     	;# 
  4498  000D                     	;# 
  4499  000E                     	;# 
  4500  0010                     	;# 
  4501  0011                     	;# 
  4502  0012                     	;# 
  4503  0013                     	;# 
  4504  0014                     	;# 
  4505  0015                     	;# 
  4506  0015                     	;# 
  4507  0016                     	;# 
  4508  0016                     	;# 
  4509  0017                     	;# 
  4510  0018                     	;# 
  4511  0019                     	;# 
  4512  0019                     	;# 
  4513  001A                     	;# 
  4514  001B                     	;# 
  4515  001C                     	;# 
  4516  001D                     	;# 
  4517  001E                     	;# 
  4518  001F                     	;# 
  4519  008C                     	;# 
  4520  008D                     	;# 
  4521  008E                     	;# 
  4522  0090                     	;# 
  4523  0091                     	;# 
  4524  0092                     	;# 
  4525  0093                     	;# 
  4526  0094                     	;# 
  4527  0097                     	;# 
  4528  009B                     	;# 
  4529  009B                     	;# 
  4530  009C                     	;# 
  4531  009D                     	;# 
  4532  009E                     	;# 
  4533  009F                     	;# 
  4534  010C                     	;# 
  4535  010D                     	;# 
  4536  010E                     	;# 
  4537  0111                     	;# 
  4538  0112                     	;# 
  4539  0113                     	;# 
  4540  0114                     	;# 
  4541  0115                     	;# 
  4542  0116                     	;# 
  4543  0117                     	;# 
  4544  0118                     	;# 
  4545  0119                     	;# 
  4546  018C                     	;# 
  4547  018D                     	;# 
  4548  018E                     	;# 
  4549  0199                     	;# 
  4550  0199                     	;# 
  4551  0199                     	;# 
  4552  019A                     	;# 
  4553  019A                     	;# 
  4554  019A                     	;# 
  4555  019B                     	;# 
  4556  019B                     	;# 
  4557  019B                     	;# 
  4558  019B                     	;# 
  4559  019B                     	;# 
  4560  019C                     	;# 
  4561  019C                     	;# 
  4562  019C                     	;# 
  4563  019D                     	;# 
  4564  019D                     	;# 
  4565  019D                     	;# 
  4566  019E                     	;# 
  4567  019E                     	;# 
  4568  019E                     	;# 
  4569  019F                     	;# 
  4570  019F                     	;# 
  4571  019F                     	;# 
  4572  019F                     	;# 
  4573  019F                     	;# 
  4574  020C                     	;# 
  4575  020D                     	;# 
  4576  020E                     	;# 
  4577  0211                     	;# 
  4578  0211                     	;# 
  4579  0212                     	;# 
  4580  0212                     	;# 
  4581  0213                     	;# 
  4582  0213                     	;# 
  4583  0214                     	;# 
  4584  0214                     	;# 
  4585  0215                     	;# 
  4586  0215                     	;# 
  4587  0215                     	;# 
  4588  0215                     	;# 
  4589  0216                     	;# 
  4590  0216                     	;# 
  4591  0217                     	;# 
  4592  0217                     	;# 
  4593  0219                     	;# 
  4594  021A                     	;# 
  4595  021B                     	;# 
  4596  021C                     	;# 
  4597  021D                     	;# 
  4598  021D                     	;# 
  4599  021E                     	;# 
  4600  021F                     	;# 
  4601  028C                     	;# 
  4602  028D                     	;# 
  4603  028E                     	;# 
  4604  0291                     	;# 
  4605  0291                     	;# 
  4606  0292                     	;# 
  4607  0293                     	;# 
  4608  0294                     	;# 
  4609  0295                     	;# 
  4610  0295                     	;# 
  4611  0296                     	;# 
  4612  0297                     	;# 
  4613  0298                     	;# 
  4614  029F                     	;# 
  4615  030C                     	;# 
  4616  030D                     	;# 
  4617  030E                     	;# 
  4618  0311                     	;# 
  4619  0311                     	;# 
  4620  0312                     	;# 
  4621  0313                     	;# 
  4622  0314                     	;# 
  4623  0315                     	;# 
  4624  0315                     	;# 
  4625  0316                     	;# 
  4626  0317                     	;# 
  4627  0318                     	;# 
  4628  038C                     	;# 
  4629  038D                     	;# 
  4630  038E                     	;# 
  4631  0391                     	;# 
  4632  0392                     	;# 
  4633  0393                     	;# 
  4634  0394                     	;# 
  4635  0395                     	;# 
  4636  0396                     	;# 
  4637  0397                     	;# 
  4638  0398                     	;# 
  4639  0399                     	;# 
  4640  039A                     	;# 
  4641  039C                     	;# 
  4642  039D                     	;# 
  4643  039E                     	;# 
  4644  039F                     	;# 
  4645  0411                     	;# 
  4646  0411                     	;# 
  4647  0412                     	;# 
  4648  0413                     	;# 
  4649  0414                     	;# 
  4650  0415                     	;# 
  4651  0416                     	;# 
  4652  0417                     	;# 
  4653  0418                     	;# 
  4654  0418                     	;# 
  4655  0419                     	;# 
  4656  041A                     	;# 
  4657  041B                     	;# 
  4658  041C                     	;# 
  4659  041D                     	;# 
  4660  041E                     	;# 
  4661  041F                     	;# 
  4662  0498                     	;# 
  4663  0498                     	;# 
  4664  0499                     	;# 
  4665  049A                     	;# 
  4666  049B                     	;# 
  4667  049B                     	;# 
  4668  049C                     	;# 
  4669  049D                     	;# 
  4670  049E                     	;# 
  4671  049F                     	;# 
  4672  0617                     	;# 
  4673  0618                     	;# 
  4674  0619                     	;# 
  4675  0619                     	;# 
  4676  061A                     	;# 
  4677  061B                     	;# 
  4678  061C                     	;# 
  4679  061C                     	;# 
  4680  061F                     	;# 
  4681  0691                     	;# 
  4682  0692                     	;# 
  4683  0693                     	;# 
  4684  0694                     	;# 
  4685  0695                     	;# 
  4686  0696                     	;# 
  4687  0697                     	;# 
  4688  0698                     	;# 
  4689  0699                     	;# 
  4690  0711                     	;# 
  4691  0712                     	;# 
  4692  0713                     	;# 
  4693  0714                     	;# 
  4694  0715                     	;# 
  4695  0716                     	;# 
  4696  0717                     	;# 
  4697  0718                     	;# 
  4698  0719                     	;# 
  4699  0891                     	;# 
  4700  0891                     	;# 
  4701  0891                     	;# 
  4702  0891                     	;# 
  4703  0891                     	;# 
  4704  0891                     	;# 
  4705  0892                     	;# 
  4706  0892                     	;# 
  4707  0892                     	;# 
  4708  0893                     	;# 
  4709  0893                     	;# 
  4710  0893                     	;# 
  4711  0893                     	;# 
  4712  0893                     	;# 
  4713  0893                     	;# 
  4714  0894                     	;# 
  4715  0894                     	;# 
  4716  0894                     	;# 
  4717  0895                     	;# 
  4718  0895                     	;# 
  4719  0895                     	;# 
  4720  0896                     	;# 
  4721  0896                     	;# 
  4722  0896                     	;# 
  4723  089B                     	;# 
  4724  0911                     	;# 
  4725  0912                     	;# 
  4726  0913                     	;# 
  4727  0914                     	;# 
  4728  0915                     	;# 
  4729  0916                     	;# 
  4730  0918                     	;# 
  4731  0919                     	;# 
  4732  091A                     	;# 
  4733  091B                     	;# 
  4734  091C                     	;# 
  4735  091D                     	;# 
  4736  091E                     	;# 
  4737  091F                     	;# 
  4738  0E0F                     	;# 
  4739  0E10                     	;# 
  4740  0E11                     	;# 
  4741  0E12                     	;# 
  4742  0E13                     	;# 
  4743  0E14                     	;# 
  4744  0E15                     	;# 
  4745  0E16                     	;# 
  4746  0E17                     	;# 
  4747  0E18                     	;# 
  4748  0E19                     	;# 
  4749  0E1A                     	;# 
  4750  0E1B                     	;# 
  4751  0E1C                     	;# 
  4752  0E1D                     	;# 
  4753  0E1E                     	;# 
  4754  0E1F                     	;# 
  4755  0E20                     	;# 
  4756  0E21                     	;# 
  4757  0E22                     	;# 
  4758  0E24                     	;# 
  4759  0E25                     	;# 
  4760  0E28                     	;# 
  4761  0E29                     	;# 
  4762  0E2A                     	;# 
  4763  0E2B                     	;# 
  4764  0E2C                     	;# 
  4765  0E2D                     	;# 
  4766  0E2E                     	;# 
  4767  0E2F                     	;# 
  4768  0E90                     	;# 
  4769  0E91                     	;# 
  4770  0E92                     	;# 
  4771  0E94                     	;# 
  4772  0E95                     	;# 
  4773  0E9C                     	;# 
  4774  0E9D                     	;# 
  4775  0E9E                     	;# 
  4776  0E9F                     	;# 
  4777  0EA0                     	;# 
  4778  0EA1                     	;# 
  4779  0EA2                     	;# 
  4780  0EA3                     	;# 
  4781  0EA4                     	;# 
  4782  0EA5                     	;# 
  4783  0EA6                     	;# 
  4784  0EA7                     	;# 
  4785  0F0F                     	;# 
  4786  0F10                     	;# 
  4787  0F11                     	;# 
  4788  0F12                     	;# 
  4789  0F13                     	;# 
  4790  0F14                     	;# 
  4791  0F15                     	;# 
  4792  0F16                     	;# 
  4793  0F17                     	;# 
  4794  0F18                     	;# 
  4795  0F19                     	;# 
  4796  0F1A                     	;# 
  4797  0F1B                     	;# 
  4798  0F1C                     	;# 
  4799  0F1D                     	;# 
  4800  0F1E                     	;# 
  4801  0F1F                     	;# 
  4802  0F20                     	;# 
  4803  0F21                     	;# 
  4804  0F22                     	;# 
  4805  0F23                     	;# 
  4806  0F24                     	;# 
  4807  0F25                     	;# 
  4808  0F26                     	;# 
  4809  0F27                     	;# 
  4810  0F28                     	;# 
  4811  0F29                     	;# 
  4812  0F2A                     	;# 
  4813  0F2B                     	;# 
  4814  0F2C                     	;# 
  4815  0F2D                     	;# 
  4816  0F2E                     	;# 
  4817  0F2F                     	;# 
  4818  0F30                     	;# 
  4819  0F31                     	;# 
  4820  0F32                     	;# 
  4821  0F33                     	;# 
  4822  0F34                     	;# 
  4823  0F35                     	;# 
  4824  0F36                     	;# 
  4825  0F37                     	;# 
  4826  0FE4                     	;# 
  4827  0FE5                     	;# 
  4828  0FE6                     	;# 
  4829  0FE7                     	;# 
  4830  0FE8                     	;# 
  4831  0FE9                     	;# 
  4832  0FEA                     	;# 
  4833  0FEB                     	;# 
  4834  0FED                     	;# 
  4835  0FEE                     	;# 
  4836  0FEF                     	;# 
  4837  0000                     	;# 
  4838  0001                     	;# 
  4839  0002                     	;# 
  4840  0003                     	;# 
  4841  0004                     	;# 
  4842  0005                     	;# 
  4843  0006                     	;# 
  4844  0007                     	;# 
  4845  0008                     	;# 
  4846  0009                     	;# 
  4847  000A                     	;# 
  4848  000B                     	;# 
  4849  000C                     	;# 
  4850  000D                     	;# 
  4851  000E                     	;# 
  4852  0010                     	;# 
  4853  0011                     	;# 
  4854  0012                     	;# 
  4855  0013                     	;# 
  4856  0014                     	;# 
  4857  0015                     	;# 
  4858  0015                     	;# 
  4859  0016                     	;# 
  4860  0016                     	;# 
  4861  0017                     	;# 
  4862  0018                     	;# 
  4863  0019                     	;# 
  4864  0019                     	;# 
  4865  001A                     	;# 
  4866  001B                     	;# 
  4867  001C                     	;# 
  4868  001D                     	;# 
  4869  001E                     	;# 
  4870  001F                     	;# 
  4871  008C                     	;# 
  4872  008D                     	;# 
  4873  008E                     	;# 
  4874  0090                     	;# 
  4875  0091                     	;# 
  4876  0092                     	;# 
  4877  0093                     	;# 
  4878  0094                     	;# 
  4879  0097                     	;# 
  4880  009B                     	;# 
  4881  009B                     	;# 
  4882  009C                     	;# 
  4883  009D                     	;# 
  4884  009E                     	;# 
  4885  009F                     	;# 
  4886  010C                     	;# 
  4887  010D                     	;# 
  4888  010E                     	;# 
  4889  0111                     	;# 
  4890  0112                     	;# 
  4891  0113                     	;# 
  4892  0114                     	;# 
  4893  0115                     	;# 
  4894  0116                     	;# 
  4895  0117                     	;# 
  4896  0118                     	;# 
  4897  0119                     	;# 
  4898  018C                     	;# 
  4899  018D                     	;# 
  4900  018E                     	;# 
  4901  0199                     	;# 
  4902  0199                     	;# 
  4903  0199                     	;# 
  4904  019A                     	;# 
  4905  019A                     	;# 
  4906  019A                     	;# 
  4907  019B                     	;# 
  4908  019B                     	;# 
  4909  019B                     	;# 
  4910  019B                     	;# 
  4911  019B                     	;# 
  4912  019C                     	;# 
  4913  019C                     	;# 
  4914  019C                     	;# 
  4915  019D                     	;# 
  4916  019D                     	;# 
  4917  019D                     	;# 
  4918  019E                     	;# 
  4919  019E                     	;# 
  4920  019E                     	;# 
  4921  019F                     	;# 
  4922  019F                     	;# 
  4923  019F                     	;# 
  4924  019F                     	;# 
  4925  019F                     	;# 
  4926  020C                     	;# 
  4927  020D                     	;# 
  4928  020E                     	;# 
  4929  0211                     	;# 
  4930  0211                     	;# 
  4931  0212                     	;# 
  4932  0212                     	;# 
  4933  0213                     	;# 
  4934  0213                     	;# 
  4935  0214                     	;# 
  4936  0214                     	;# 
  4937  0215                     	;# 
  4938  0215                     	;# 
  4939  0215                     	;# 
  4940  0215                     	;# 
  4941  0216                     	;# 
  4942  0216                     	;# 
  4943  0217                     	;# 
  4944  0217                     	;# 
  4945  0219                     	;# 
  4946  021A                     	;# 
  4947  021B                     	;# 
  4948  021C                     	;# 
  4949  021D                     	;# 
  4950  021D                     	;# 
  4951  021E                     	;# 
  4952  021F                     	;# 
  4953  028C                     	;# 
  4954  028D                     	;# 
  4955  028E                     	;# 
  4956  0291                     	;# 
  4957  0291                     	;# 
  4958  0292                     	;# 
  4959  0293                     	;# 
  4960  0294                     	;# 
  4961  0295                     	;# 
  4962  0295                     	;# 
  4963  0296                     	;# 
  4964  0297                     	;# 
  4965  0298                     	;# 
  4966  029F                     	;# 
  4967  030C                     	;# 
  4968  030D                     	;# 
  4969  030E                     	;# 
  4970  0311                     	;# 
  4971  0311                     	;# 
  4972  0312                     	;# 
  4973  0313                     	;# 
  4974  0314                     	;# 
  4975  0315                     	;# 
  4976  0315                     	;# 
  4977  0316                     	;# 
  4978  0317                     	;# 
  4979  0318                     	;# 
  4980  038C                     	;# 
  4981  038D                     	;# 
  4982  038E                     	;# 
  4983  0391                     	;# 
  4984  0392                     	;# 
  4985  0393                     	;# 
  4986  0394                     	;# 
  4987  0395                     	;# 
  4988  0396                     	;# 
  4989  0397                     	;# 
  4990  0398                     	;# 
  4991  0399                     	;# 
  4992  039A                     	;# 
  4993  039C                     	;# 
  4994  039D                     	;# 
  4995  039E                     	;# 
  4996  039F                     	;# 
  4997  0411                     	;# 
  4998  0411                     	;# 
  4999  0412                     	;# 
  5000  0413                     	;# 
  5001  0414                     	;# 
  5002  0415                     	;# 
  5003  0416                     	;# 
  5004  0417                     	;# 
  5005  0418                     	;# 
  5006  0418                     	;# 
  5007  0419                     	;# 
  5008  041A                     	;# 
  5009  041B                     	;# 
  5010  041C                     	;# 
  5011  041D                     	;# 
  5012  041E                     	;# 
  5013  041F                     	;# 
  5014  0498                     	;# 
  5015  0498                     	;# 
  5016  0499                     	;# 
  5017  049A                     	;# 
  5018  049B                     	;# 
  5019  049B                     	;# 
  5020  049C                     	;# 
  5021  049D                     	;# 
  5022  049E                     	;# 
  5023  049F                     	;# 
  5024  0617                     	;# 
  5025  0618                     	;# 
  5026  0619                     	;# 
  5027  0619                     	;# 
  5028  061A                     	;# 
  5029  061B                     	;# 
  5030  061C                     	;# 
  5031  061C                     	;# 
  5032  061F                     	;# 
  5033  0691                     	;# 
  5034  0692                     	;# 
  5035  0693                     	;# 
  5036  0694                     	;# 
  5037  0695                     	;# 
  5038  0696                     	;# 
  5039  0697                     	;# 
  5040  0698                     	;# 
  5041  0699                     	;# 
  5042  0711                     	;# 
  5043  0712                     	;# 
  5044  0713                     	;# 
  5045  0714                     	;# 
  5046  0715                     	;# 
  5047  0716                     	;# 
  5048  0717                     	;# 
  5049  0718                     	;# 
  5050  0719                     	;# 
  5051  0891                     	;# 
  5052  0891                     	;# 
  5053  0891                     	;# 
  5054  0891                     	;# 
  5055  0891                     	;# 
  5056  0891                     	;# 
  5057  0892                     	;# 
  5058  0892                     	;# 
  5059  0892                     	;# 
  5060  0893                     	;# 
  5061  0893                     	;# 
  5062  0893                     	;# 
  5063  0893                     	;# 
  5064  0893                     	;# 
  5065  0893                     	;# 
  5066  0894                     	;# 
  5067  0894                     	;# 
  5068  0894                     	;# 
  5069  0895                     	;# 
  5070  0895                     	;# 
  5071  0895                     	;# 
  5072  0896                     	;# 
  5073  0896                     	;# 
  5074  0896                     	;# 
  5075  089B                     	;# 
  5076  0911                     	;# 
  5077  0912                     	;# 
  5078  0913                     	;# 
  5079  0914                     	;# 
  5080  0915                     	;# 
  5081  0916                     	;# 
  5082  0918                     	;# 
  5083  0919                     	;# 
  5084  091A                     	;# 
  5085  091B                     	;# 
  5086  091C                     	;# 
  5087  091D                     	;# 
  5088  091E                     	;# 
  5089  091F                     	;# 
  5090  0E0F                     	;# 
  5091  0E10                     	;# 
  5092  0E11                     	;# 
  5093  0E12                     	;# 
  5094  0E13                     	;# 
  5095  0E14                     	;# 
  5096  0E15                     	;# 
  5097  0E16                     	;# 
  5098  0E17                     	;# 
  5099  0E18                     	;# 
  5100  0E19                     	;# 
  5101  0E1A                     	;# 
  5102  0E1B                     	;# 
  5103  0E1C                     	;# 
  5104  0E1D                     	;# 
  5105  0E1E                     	;# 
  5106  0E1F                     	;# 
  5107  0E20                     	;# 
  5108  0E21                     	;# 
  5109  0E22                     	;# 
  5110  0E24                     	;# 
  5111  0E25                     	;# 
  5112  0E28                     	;# 
  5113  0E29                     	;# 
  5114  0E2A                     	;# 
  5115  0E2B                     	;# 
  5116  0E2C                     	;# 
  5117  0E2D                     	;# 
  5118  0E2E                     	;# 
  5119  0E2F                     	;# 
  5120  0E90                     	;# 
  5121  0E91                     	;# 
  5122  0E92                     	;# 
  5123  0E94                     	;# 
  5124  0E95                     	;# 
  5125  0E9C                     	;# 
  5126  0E9D                     	;# 
  5127  0E9E                     	;# 
  5128  0E9F                     	;# 
  5129  0EA0                     	;# 
  5130  0EA1                     	;# 
  5131  0EA2                     	;# 
  5132  0EA3                     	;# 
  5133  0EA4                     	;# 
  5134  0EA5                     	;# 
  5135  0EA6                     	;# 
  5136  0EA7                     	;# 
  5137  0F0F                     	;# 
  5138  0F10                     	;# 
  5139  0F11                     	;# 
  5140  0F12                     	;# 
  5141  0F13                     	;# 
  5142  0F14                     	;# 
  5143  0F15                     	;# 
  5144  0F16                     	;# 
  5145  0F17                     	;# 
  5146  0F18                     	;# 
  5147  0F19                     	;# 
  5148  0F1A                     	;# 
  5149  0F1B                     	;# 
  5150  0F1C                     	;# 
  5151  0F1D                     	;# 
  5152  0F1E                     	;# 
  5153  0F1F                     	;# 
  5154  0F20                     	;# 
  5155  0F21                     	;# 
  5156  0F22                     	;# 
  5157  0F23                     	;# 
  5158  0F24                     	;# 
  5159  0F25                     	;# 
  5160  0F26                     	;# 
  5161  0F27                     	;# 
  5162  0F28                     	;# 
  5163  0F29                     	;# 
  5164  0F2A                     	;# 
  5165  0F2B                     	;# 
  5166  0F2C                     	;# 
  5167  0F2D                     	;# 
  5168  0F2E                     	;# 
  5169  0F2F                     	;# 
  5170  0F30                     	;# 
  5171  0F31                     	;# 
  5172  0F32                     	;# 
  5173  0F33                     	;# 
  5174  0F34                     	;# 
  5175  0F35                     	;# 
  5176  0F36                     	;# 
  5177  0F37                     	;# 
  5178  0FE4                     	;# 
  5179  0FE5                     	;# 
  5180  0FE6                     	;# 
  5181  0FE7                     	;# 
  5182  0FE8                     	;# 
  5183  0FE9                     	;# 
  5184  0FEA                     	;# 
  5185  0FEB                     	;# 
  5186  0FED                     	;# 
  5187  0FEE                     	;# 
  5188  0FEF                     	;# 
  5189  0000                     	;# 
  5190  0001                     	;# 
  5191  0002                     	;# 
  5192  0003                     	;# 
  5193  0004                     	;# 
  5194  0005                     	;# 
  5195  0006                     	;# 
  5196  0007                     	;# 
  5197  0008                     	;# 
  5198  0009                     	;# 
  5199  000A                     	;# 
  5200  000B                     	;# 
  5201  000C                     	;# 
  5202  000D                     	;# 
  5203  000E                     	;# 
  5204  0010                     	;# 
  5205  0011                     	;# 
  5206  0012                     	;# 
  5207  0013                     	;# 
  5208  0014                     	;# 
  5209  0015                     	;# 
  5210  0015                     	;# 
  5211  0016                     	;# 
  5212  0016                     	;# 
  5213  0017                     	;# 
  5214  0018                     	;# 
  5215  0019                     	;# 
  5216  0019                     	;# 
  5217  001A                     	;# 
  5218  001B                     	;# 
  5219  001C                     	;# 
  5220  001D                     	;# 
  5221  001E                     	;# 
  5222  001F                     	;# 
  5223  008C                     	;# 
  5224  008D                     	;# 
  5225  008E                     	;# 
  5226  0090                     	;# 
  5227  0091                     	;# 
  5228  0092                     	;# 
  5229  0093                     	;# 
  5230  0094                     	;# 
  5231  0097                     	;# 
  5232  009B                     	;# 
  5233  009B                     	;# 
  5234  009C                     	;# 
  5235  009D                     	;# 
  5236  009E                     	;# 
  5237  009F                     	;# 
  5238  010C                     	;# 
  5239  010D                     	;# 
  5240  010E                     	;# 
  5241  0111                     	;# 
  5242  0112                     	;# 
  5243  0113                     	;# 
  5244  0114                     	;# 
  5245  0115                     	;# 
  5246  0116                     	;# 
  5247  0117                     	;# 
  5248  0118                     	;# 
  5249  0119                     	;# 
  5250  018C                     	;# 
  5251  018D                     	;# 
  5252  018E                     	;# 
  5253  0197                     	;# 
  5254  0199                     	;# 
  5255  0199                     	;# 
  5256  0199                     	;# 
  5257  019A                     	;# 
  5258  019A                     	;# 
  5259  019A                     	;# 
  5260  019B                     	;# 
  5261  019B                     	;# 
  5262  019B                     	;# 
  5263  019B                     	;# 
  5264  019B                     	;# 
  5265  019C                     	;# 
  5266  019C                     	;# 
  5267  019C                     	;# 
  5268  019D                     	;# 
  5269  019D                     	;# 
  5270  019D                     	;# 
  5271  019E                     	;# 
  5272  019E                     	;# 
  5273  019E                     	;# 
  5274  019F                     	;# 
  5275  019F                     	;# 
  5276  019F                     	;# 
  5277  019F                     	;# 
  5278  019F                     	;# 
  5279  020C                     	;# 
  5280  020D                     	;# 
  5281  020E                     	;# 
  5282  0211                     	;# 
  5283  0211                     	;# 
  5284  0212                     	;# 
  5285  0212                     	;# 
  5286  0213                     	;# 
  5287  0213                     	;# 
  5288  0214                     	;# 
  5289  0214                     	;# 
  5290  0215                     	;# 
  5291  0215                     	;# 
  5292  0215                     	;# 
  5293  0215                     	;# 
  5294  0216                     	;# 
  5295  0216                     	;# 
  5296  0217                     	;# 
  5297  0217                     	;# 
  5298  0219                     	;# 
  5299  021A                     	;# 
  5300  021B                     	;# 
  5301  021C                     	;# 
  5302  021D                     	;# 
  5303  021D                     	;# 
  5304  021E                     	;# 
  5305  021F                     	;# 
  5306  028C                     	;# 
  5307  028D                     	;# 
  5308  028E                     	;# 
  5309  0291                     	;# 
  5310  0291                     	;# 
  5311  0292                     	;# 
  5312  0293                     	;# 
  5313  0294                     	;# 
  5314  0295                     	;# 
  5315  0295                     	;# 
  5316  0296                     	;# 
  5317  0297                     	;# 
  5318  0298                     	;# 
  5319  029F                     	;# 
  5320  030C                     	;# 
  5321  030D                     	;# 
  5322  030E                     	;# 
  5323  0311                     	;# 
  5324  0311                     	;# 
  5325  0312                     	;# 
  5326  0313                     	;# 
  5327  0314                     	;# 
  5328  0315                     	;# 
  5329  0315                     	;# 
  5330  0316                     	;# 
  5331  0317                     	;# 
  5332  0318                     	;# 
  5333  038C                     	;# 
  5334  038D                     	;# 
  5335  038E                     	;# 
  5336  0391                     	;# 
  5337  0392                     	;# 
  5338  0393                     	;# 
  5339  0394                     	;# 
  5340  0395                     	;# 
  5341  0396                     	;# 
  5342  0397                     	;# 
  5343  0398                     	;# 
  5344  0399                     	;# 
  5345  039A                     	;# 
  5346  039C                     	;# 
  5347  039D                     	;# 
  5348  039E                     	;# 
  5349  039F                     	;# 
  5350  0411                     	;# 
  5351  0411                     	;# 
  5352  0412                     	;# 
  5353  0413                     	;# 
  5354  0414                     	;# 
  5355  0415                     	;# 
  5356  0416                     	;# 
  5357  0417                     	;# 
  5358  0418                     	;# 
  5359  0418                     	;# 
  5360  0419                     	;# 
  5361  041A                     	;# 
  5362  041B                     	;# 
  5363  041C                     	;# 
  5364  041D                     	;# 
  5365  041E                     	;# 
  5366  041F                     	;# 
  5367  0498                     	;# 
  5368  0498                     	;# 
  5369  0499                     	;# 
  5370  049A                     	;# 
  5371  049B                     	;# 
  5372  049B                     	;# 
  5373  049C                     	;# 
  5374  049D                     	;# 
  5375  049E                     	;# 
  5376  049F                     	;# 
  5377  0617                     	;# 
  5378  0618                     	;# 
  5379  0619                     	;# 
  5380  0619                     	;# 
  5381  061A                     	;# 
  5382  061B                     	;# 
  5383  061C                     	;# 
  5384  061C                     	;# 
  5385  061F                     	;# 
  5386  0691                     	;# 
  5387  0692                     	;# 
  5388  0693                     	;# 
  5389  0694                     	;# 
  5390  0695                     	;# 
  5391  0696                     	;# 
  5392  0697                     	;# 
  5393  0698                     	;# 
  5394  0699                     	;# 
  5395  0711                     	;# 
  5396  0712                     	;# 
  5397  0713                     	;# 
  5398  0714                     	;# 
  5399  0715                     	;# 
  5400  0716                     	;# 
  5401  0717                     	;# 
  5402  0718                     	;# 
  5403  0719                     	;# 
  5404  0891                     	;# 
  5405  0891                     	;# 
  5406  0891                     	;# 
  5407  0891                     	;# 
  5408  0891                     	;# 
  5409  0891                     	;# 
  5410  0892                     	;# 
  5411  0892                     	;# 
  5412  0892                     	;# 
  5413  0893                     	;# 
  5414  0893                     	;# 
  5415  0893                     	;# 
  5416  0893                     	;# 
  5417  0893                     	;# 
  5418  0893                     	;# 
  5419  0894                     	;# 
  5420  0894                     	;# 
  5421  0894                     	;# 
  5422  0895                     	;# 
  5423  0895                     	;# 
  5424  0895                     	;# 
  5425  0896                     	;# 
  5426  0896                     	;# 
  5427  0896                     	;# 
  5428  089B                     	;# 
  5429  0911                     	;# 
  5430  0912                     	;# 
  5431  0913                     	;# 
  5432  0914                     	;# 
  5433  0915                     	;# 
  5434  0916                     	;# 
  5435  0918                     	;# 
  5436  0919                     	;# 
  5437  091A                     	;# 
  5438  091B                     	;# 
  5439  091C                     	;# 
  5440  091D                     	;# 
  5441  091E                     	;# 
  5442  091F                     	;# 
  5443  0E0F                     	;# 
  5444  0E10                     	;# 
  5445  0E11                     	;# 
  5446  0E12                     	;# 
  5447  0E13                     	;# 
  5448  0E14                     	;# 
  5449  0E15                     	;# 
  5450  0E16                     	;# 
  5451  0E17                     	;# 
  5452  0E18                     	;# 
  5453  0E19                     	;# 
  5454  0E1A                     	;# 
  5455  0E1B                     	;# 
  5456  0E1C                     	;# 
  5457  0E1D                     	;# 
  5458  0E1E                     	;# 
  5459  0E1F                     	;# 
  5460  0E20                     	;# 
  5461  0E21                     	;# 
  5462  0E22                     	;# 
  5463  0E24                     	;# 
  5464  0E25                     	;# 
  5465  0E28                     	;# 
  5466  0E29                     	;# 
  5467  0E2A                     	;# 
  5468  0E2B                     	;# 
  5469  0E2C                     	;# 
  5470  0E2D                     	;# 
  5471  0E2E                     	;# 
  5472  0E2F                     	;# 
  5473  0E90                     	;# 
  5474  0E91                     	;# 
  5475  0E92                     	;# 
  5476  0E94                     	;# 
  5477  0E95                     	;# 
  5478  0E9C                     	;# 
  5479  0E9D                     	;# 
  5480  0E9E                     	;# 
  5481  0E9F                     	;# 
  5482  0EA0                     	;# 
  5483  0EA1                     	;# 
  5484  0EA2                     	;# 
  5485  0EA3                     	;# 
  5486  0EA4                     	;# 
  5487  0EA5                     	;# 
  5488  0EA6                     	;# 
  5489  0EA7                     	;# 
  5490  0F0F                     	;# 
  5491  0F10                     	;# 
  5492  0F11                     	;# 
  5493  0F12                     	;# 
  5494  0F13                     	;# 
  5495  0F14                     	;# 
  5496  0F15                     	;# 
  5497  0F16                     	;# 
  5498  0F17                     	;# 
  5499  0F18                     	;# 
  5500  0F19                     	;# 
  5501  0F1A                     	;# 
  5502  0F1B                     	;# 
  5503  0F1C                     	;# 
  5504  0F1D                     	;# 
  5505  0F1E                     	;# 
  5506  0F1F                     	;# 
  5507  0F20                     	;# 
  5508  0F21                     	;# 
  5509  0F22                     	;# 
  5510  0F23                     	;# 
  5511  0F24                     	;# 
  5512  0F25                     	;# 
  5513  0F26                     	;# 
  5514  0F27                     	;# 
  5515  0F28                     	;# 
  5516  0F29                     	;# 
  5517  0F2A                     	;# 
  5518  0F2B                     	;# 
  5519  0F2C                     	;# 
  5520  0F2D                     	;# 
  5521  0F2E                     	;# 
  5522  0F2F                     	;# 
  5523  0F30                     	;# 
  5524  0F31                     	;# 
  5525  0F32                     	;# 
  5526  0F33                     	;# 
  5527  0F34                     	;# 
  5528  0F35                     	;# 
  5529  0F36                     	;# 
  5530  0F37                     	;# 
  5531  0FE4                     	;# 
  5532  0FE5                     	;# 
  5533  0FE6                     	;# 
  5534  0FE7                     	;# 
  5535  0FE8                     	;# 
  5536  0FE9                     	;# 
  5537  0FEA                     	;# 
  5538  0FEB                     	;# 
  5539  0FED                     	;# 
  5540  0FEE                     	;# 
  5541  0FEF                     	;# 
  5542  0000                     	;# 
  5543  0001                     	;# 
  5544  0002                     	;# 
  5545  0003                     	;# 
  5546  0004                     	;# 
  5547  0005                     	;# 
  5548  0006                     	;# 
  5549  0007                     	;# 
  5550  0008                     	;# 
  5551  0009                     	;# 
  5552  000A                     	;# 
  5553  000B                     	;# 
  5554  000C                     	;# 
  5555  000D                     	;# 
  5556  000E                     	;# 
  5557  0010                     	;# 
  5558  0011                     	;# 
  5559  0012                     	;# 
  5560  0013                     	;# 
  5561  0014                     	;# 
  5562  0015                     	;# 
  5563  0015                     	;# 
  5564  0016                     	;# 
  5565  0016                     	;# 
  5566  0017                     	;# 
  5567  0018                     	;# 
  5568  0019                     	;# 
  5569  0019                     	;# 
  5570  001A                     	;# 
  5571  001B                     	;# 
  5572  001C                     	;# 
  5573  001D                     	;# 
  5574  001E                     	;# 
  5575  001F                     	;# 
  5576  008C                     	;# 
  5577  008D                     	;# 
  5578  008E                     	;# 
  5579  0090                     	;# 
  5580  0091                     	;# 
  5581  0092                     	;# 
  5582  0093                     	;# 
  5583  0094                     	;# 
  5584  0097                     	;# 
  5585  009B                     	;# 
  5586  009B                     	;# 
  5587  009C                     	;# 
  5588  009D                     	;# 
  5589  009E                     	;# 
  5590  009F                     	;# 
  5591  010C                     	;# 
  5592  010D                     	;# 
  5593  010E                     	;# 
  5594  0111                     	;# 
  5595  0112                     	;# 
  5596  0113                     	;# 
  5597  0114                     	;# 
  5598  0115                     	;# 
  5599  0116                     	;# 
  5600  0117                     	;# 
  5601  0118                     	;# 
  5602  0119                     	;# 
  5603  018C                     	;# 
  5604  018D                     	;# 
  5605  018E                     	;# 
  5606  0199                     	;# 
  5607  0199                     	;# 
  5608  0199                     	;# 
  5609  019A                     	;# 
  5610  019A                     	;# 
  5611  019A                     	;# 
  5612  019B                     	;# 
  5613  019B                     	;# 
  5614  019B                     	;# 
  5615  019B                     	;# 
  5616  019B                     	;# 
  5617  019C                     	;# 
  5618  019C                     	;# 
  5619  019C                     	;# 
  5620  019D                     	;# 
  5621  019D                     	;# 
  5622  019D                     	;# 
  5623  019E                     	;# 
  5624  019E                     	;# 
  5625  019E                     	;# 
  5626  019F                     	;# 
  5627  019F                     	;# 
  5628  019F                     	;# 
  5629  019F                     	;# 
  5630  019F                     	;# 
  5631  020C                     	;# 
  5632  020D                     	;# 
  5633  020E                     	;# 
  5634  0211                     	;# 
  5635  0211                     	;# 
  5636  0212                     	;# 
  5637  0212                     	;# 
  5638  0213                     	;# 
  5639  0213                     	;# 
  5640  0214                     	;# 
  5641  0214                     	;# 
  5642  0215                     	;# 
  5643  0215                     	;# 
  5644  0215                     	;# 
  5645  0215                     	;# 
  5646  0216                     	;# 
  5647  0216                     	;# 
  5648  0217                     	;# 
  5649  0217                     	;# 
  5650  0219                     	;# 
  5651  021A                     	;# 
  5652  021B                     	;# 
  5653  021C                     	;# 
  5654  021D                     	;# 
  5655  021D                     	;# 
  5656  021E                     	;# 
  5657  021F                     	;# 
  5658  028C                     	;# 
  5659  028D                     	;# 
  5660  028E                     	;# 
  5661  0291                     	;# 
  5662  0291                     	;# 
  5663  0292                     	;# 
  5664  0293                     	;# 
  5665  0294                     	;# 
  5666  0295                     	;# 
  5667  0295                     	;# 
  5668  0296                     	;# 
  5669  0297                     	;# 
  5670  0298                     	;# 
  5671  029F                     	;# 
  5672  030C                     	;# 
  5673  030D                     	;# 
  5674  030E                     	;# 
  5675  0311                     	;# 
  5676  0311                     	;# 
  5677  0312                     	;# 
  5678  0313                     	;# 
  5679  0314                     	;# 
  5680  0315                     	;# 
  5681  0315                     	;# 
  5682  0316                     	;# 
  5683  0317                     	;# 
  5684  0318                     	;# 
  5685  038C                     	;# 
  5686  038D                     	;# 
  5687  038E                     	;# 
  5688  0391                     	;# 
  5689  0392                     	;# 
  5690  0393                     	;# 
  5691  0394                     	;# 
  5692  0395                     	;# 
  5693  0396                     	;# 
  5694  0397                     	;# 
  5695  0398                     	;# 
  5696  0399                     	;# 
  5697  039A                     	;# 
  5698  039C                     	;# 
  5699  039D                     	;# 
  5700  039E                     	;# 
  5701  039F                     	;# 
  5702  0411                     	;# 
  5703  0411                     	;# 
  5704  0412                     	;# 
  5705  0413                     	;# 
  5706  0414                     	;# 
  5707  0415                     	;# 
  5708  0416                     	;# 
  5709  0417                     	;# 
  5710  0418                     	;# 
  5711  0418                     	;# 
  5712  0419                     	;# 
  5713  041A                     	;# 
  5714  041B                     	;# 
  5715  041C                     	;# 
  5716  041D                     	;# 
  5717  041E                     	;# 
  5718  041F                     	;# 
  5719  0498                     	;# 
  5720  0498                     	;# 
  5721  0499                     	;# 
  5722  049A                     	;# 
  5723  049B                     	;# 
  5724  049B                     	;# 
  5725  049C                     	;# 
  5726  049D                     	;# 
  5727  049E                     	;# 
  5728  049F                     	;# 
  5729  0617                     	;# 
  5730  0618                     	;# 
  5731  0619                     	;# 
  5732  0619                     	;# 
  5733  061A                     	;# 
  5734  061B                     	;# 
  5735  061C                     	;# 
  5736  061C                     	;# 
  5737  061F                     	;# 
  5738  0691                     	;# 
  5739  0692                     	;# 
  5740  0693                     	;# 
  5741  0694                     	;# 
  5742  0695                     	;# 
  5743  0696                     	;# 
  5744  0697                     	;# 
  5745  0698                     	;# 
  5746  0699                     	;# 
  5747  0711                     	;# 
  5748  0712                     	;# 
  5749  0713                     	;# 
  5750  0714                     	;# 
  5751  0715                     	;# 
  5752  0716                     	;# 
  5753  0717                     	;# 
  5754  0718                     	;# 
  5755  0719                     	;# 
  5756  0891                     	;# 
  5757  0891                     	;# 
  5758  0891                     	;# 
  5759  0891                     	;# 
  5760  0891                     	;# 
  5761  0891                     	;# 
  5762  0892                     	;# 
  5763  0892                     	;# 
  5764  0892                     	;# 
  5765  0893                     	;# 
  5766  0893                     	;# 
  5767  0893                     	;# 
  5768  0893                     	;# 
  5769  0893                     	;# 
  5770  0893                     	;# 
  5771  0894                     	;# 
  5772  0894                     	;# 
  5773  0894                     	;# 
  5774  0895                     	;# 
  5775  0895                     	;# 
  5776  0895                     	;# 
  5777  0896                     	;# 
  5778  0896                     	;# 
  5779  0896                     	;# 
  5780  089B                     	;# 
  5781  0911                     	;# 
  5782  0912                     	;# 
  5783  0913                     	;# 
  5784  0914                     	;# 
  5785  0915                     	;# 
  5786  0916                     	;# 
  5787  0918                     	;# 
  5788  0919                     	;# 
  5789  091A                     	;# 
  5790  091B                     	;# 
  5791  091C                     	;# 
  5792  091D                     	;# 
  5793  091E                     	;# 
  5794  091F                     	;# 
  5795  0E0F                     	;# 
  5796  0E10                     	;# 
  5797  0E11                     	;# 
  5798  0E12                     	;# 
  5799  0E13                     	;# 
  5800  0E14                     	;# 
  5801  0E15                     	;# 
  5802  0E16                     	;# 
  5803  0E17                     	;# 
  5804  0E18                     	;# 
  5805  0E19                     	;# 
  5806  0E1A                     	;# 
  5807  0E1B                     	;# 
  5808  0E1C                     	;# 
  5809  0E1D                     	;# 
  5810  0E1E                     	;# 
  5811  0E1F                     	;# 
  5812  0E20                     	;# 
  5813  0E21                     	;# 
  5814  0E22                     	;# 
  5815  0E24                     	;# 
  5816  0E25                     	;# 
  5817  0E28                     	;# 
  5818  0E29                     	;# 
  5819  0E2A                     	;# 
  5820  0E2B                     	;# 
  5821  0E2C                     	;# 
  5822  0E2D                     	;# 
  5823  0E2E                     	;# 
  5824  0E2F                     	;# 
  5825  0E90                     	;# 
  5826  0E91                     	;# 
  5827  0E92                     	;# 
  5828  0E94                     	;# 
  5829  0E95                     	;# 
  5830  0E9C                     	;# 
  5831  0E9D                     	;# 
  5832  0E9E                     	;# 
  5833  0E9F                     	;# 
  5834  0EA0                     	;# 
  5835  0EA1                     	;# 
  5836  0EA2                     	;# 
  5837  0EA3                     	;# 
  5838  0EA4                     	;# 
  5839  0EA5                     	;# 
  5840  0EA6                     	;# 
  5841  0EA7                     	;# 
  5842  0F0F                     	;# 
  5843  0F10                     	;# 
  5844  0F11                     	;# 
  5845  0F12                     	;# 
  5846  0F13                     	;# 
  5847  0F14                     	;# 
  5848  0F15                     	;# 
  5849  0F16                     	;# 
  5850  0F17                     	;# 
  5851  0F18                     	;# 
  5852  0F19                     	;# 
  5853  0F1A                     	;# 
  5854  0F1B                     	;# 
  5855  0F1C                     	;# 
  5856  0F1D                     	;# 
  5857  0F1E                     	;# 
  5858  0F1F                     	;# 
  5859  0F20                     	;# 
  5860  0F21                     	;# 
  5861  0F22                     	;# 
  5862  0F23                     	;# 
  5863  0F24                     	;# 
  5864  0F25                     	;# 
  5865  0F26                     	;# 
  5866  0F27                     	;# 
  5867  0F28                     	;# 
  5868  0F29                     	;# 
  5869  0F2A                     	;# 
  5870  0F2B                     	;# 
  5871  0F2C                     	;# 
  5872  0F2D                     	;# 
  5873  0F2E                     	;# 
  5874  0F2F                     	;# 
  5875  0F30                     	;# 
  5876  0F31                     	;# 
  5877  0F32                     	;# 
  5878  0F33                     	;# 
  5879  0F34                     	;# 
  5880  0F35                     	;# 
  5881  0F36                     	;# 
  5882  0F37                     	;# 
  5883  0FE4                     	;# 
  5884  0FE5                     	;# 
  5885  0FE6                     	;# 
  5886  0FE7                     	;# 
  5887  0FE8                     	;# 
  5888  0FE9                     	;# 
  5889  0FEA                     	;# 
  5890  0FEB                     	;# 
  5891  0FED                     	;# 
  5892  0FEE                     	;# 
  5893  0FEF                     	;# 
  5894  0000                     	;# 
  5895  0001                     	;# 
  5896  0002                     	;# 
  5897  0003                     	;# 
  5898  0004                     	;# 
  5899  0005                     	;# 
  5900  0006                     	;# 
  5901  0007                     	;# 
  5902  0008                     	;# 
  5903  0009                     	;# 
  5904  000A                     	;# 
  5905  000B                     	;# 
  5906  000C                     	;# 
  5907  000D                     	;# 
  5908  000E                     	;# 
  5909  0010                     	;# 
  5910  0011                     	;# 
  5911  0012                     	;# 
  5912  0013                     	;# 
  5913  0014                     	;# 
  5914  0015                     	;# 
  5915  0015                     	;# 
  5916  0016                     	;# 
  5917  0016                     	;# 
  5918  0017                     	;# 
  5919  0018                     	;# 
  5920  0019                     	;# 
  5921  0019                     	;# 
  5922  001A                     	;# 
  5923  001B                     	;# 
  5924  001C                     	;# 
  5925  001D                     	;# 
  5926  001E                     	;# 
  5927  001F                     	;# 
  5928  008C                     	;# 
  5929  008D                     	;# 
  5930  008E                     	;# 
  5931  0090                     	;# 
  5932  0091                     	;# 
  5933  0092                     	;# 
  5934  0093                     	;# 
  5935  0094                     	;# 
  5936  0097                     	;# 
  5937  009B                     	;# 
  5938  009B                     	;# 
  5939  009C                     	;# 
  5940  009D                     	;# 
  5941  009E                     	;# 
  5942  009F                     	;# 
  5943  010C                     	;# 
  5944  010D                     	;# 
  5945  010E                     	;# 
  5946  0111                     	;# 
  5947  0112                     	;# 
  5948  0113                     	;# 
  5949  0114                     	;# 
  5950  0115                     	;# 
  5951  0116                     	;# 
  5952  0117                     	;# 
  5953  0118                     	;# 
  5954  0119                     	;# 
  5955  018C                     	;# 
  5956  018D                     	;# 
  5957  018E                     	;# 
  5958  0199                     	;# 
  5959  0199                     	;# 
  5960  0199                     	;# 
  5961  019A                     	;# 
  5962  019A                     	;# 
  5963  019A                     	;# 
  5964  019B                     	;# 
  5965  019B                     	;# 
  5966  019B                     	;# 
  5967  019B                     	;# 
  5968  019B                     	;# 
  5969  019C                     	;# 
  5970  019C                     	;# 
  5971  019C                     	;# 
  5972  019D                     	;# 
  5973  019D                     	;# 
  5974  019D                     	;# 
  5975  019E                     	;# 
  5976  019E                     	;# 
  5977  019E                     	;# 
  5978  019F                     	;# 
  5979  019F                     	;# 
  5980  019F                     	;# 
  5981  019F                     	;# 
  5982  019F                     	;# 
  5983  020C                     	;# 
  5984  020D                     	;# 
  5985  020E                     	;# 
  5986  0211                     	;# 
  5987  0211                     	;# 
  5988  0212                     	;# 
  5989  0212                     	;# 
  5990  0213                     	;# 
  5991  0213                     	;# 
  5992  0214                     	;# 
  5993  0214                     	;# 
  5994  0215                     	;# 
  5995  0215                     	;# 
  5996  0215                     	;# 
  5997  0215                     	;# 
  5998  0216                     	;# 
  5999  0216                     	;# 
  6000  0217                     	;# 
  6001  0217                     	;# 
  6002  0219                     	;# 
  6003  021A                     	;# 
  6004  021B                     	;# 
  6005  021C                     	;# 
  6006  021D                     	;# 
  6007  021D                     	;# 
  6008  021E                     	;# 
  6009  021F                     	;# 
  6010  028C                     	;# 
  6011  028D                     	;# 
  6012  028E                     	;# 
  6013  0291                     	;# 
  6014  0291                     	;# 
  6015  0292                     	;# 
  6016  0293                     	;# 
  6017  0294                     	;# 
  6018  0295                     	;# 
  6019  0295                     	;# 
  6020  0296                     	;# 
  6021  0297                     	;# 
  6022  0298                     	;# 
  6023  029F                     	;# 
  6024  030C                     	;# 
  6025  030D                     	;# 
  6026  030E                     	;# 
  6027  0311                     	;# 
  6028  0311                     	;# 
  6029  0312                     	;# 
  6030  0313                     	;# 
  6031  0314                     	;# 
  6032  0315                     	;# 
  6033  0315                     	;# 
  6034  0316                     	;# 
  6035  0317                     	;# 
  6036  0318                     	;# 
  6037  038C                     	;# 
  6038  038D                     	;# 
  6039  038E                     	;# 
  6040  0391                     	;# 
  6041  0392                     	;# 
  6042  0393                     	;# 
  6043  0394                     	;# 
  6044  0395                     	;# 
  6045  0396                     	;# 
  6046  0397                     	;# 
  6047  0398                     	;# 
  6048  0399                     	;# 
  6049  039A                     	;# 
  6050  039C                     	;# 
  6051  039D                     	;# 
  6052  039E                     	;# 
  6053  039F                     	;# 
  6054  0411                     	;# 
  6055  0411                     	;# 
  6056  0412                     	;# 
  6057  0413                     	;# 
  6058  0414                     	;# 
  6059  0415                     	;# 
  6060  0416                     	;# 
  6061  0417                     	;# 
  6062  0418                     	;# 
  6063  0418                     	;# 
  6064  0419                     	;# 
  6065  041A                     	;# 
  6066  041B                     	;# 
  6067  041C                     	;# 
  6068  041D                     	;# 
  6069  041E                     	;# 
  6070  041F                     	;# 
  6071  0498                     	;# 
  6072  0498                     	;# 
  6073  0499                     	;# 
  6074  049A                     	;# 
  6075  049B                     	;# 
  6076  049B                     	;# 
  6077  049C                     	;# 
  6078  049D                     	;# 
  6079  049E                     	;# 
  6080  049F                     	;# 
  6081  0617                     	;# 
  6082  0618                     	;# 
  6083  0619                     	;# 
  6084  0619                     	;# 
  6085  061A                     	;# 
  6086  061B                     	;# 
  6087  061C                     	;# 
  6088  061C                     	;# 
  6089  061F                     	;# 
  6090  0691                     	;# 
  6091  0692                     	;# 
  6092  0693                     	;# 
  6093  0694                     	;# 
  6094  0695                     	;# 
  6095  0696                     	;# 
  6096  0697                     	;# 
  6097  0698                     	;# 
  6098  0699                     	;# 
  6099  0711                     	;# 
  6100  0712                     	;# 
  6101  0713                     	;# 
  6102  0714                     	;# 
  6103  0715                     	;# 
  6104  0716                     	;# 
  6105  0717                     	;# 
  6106  0718                     	;# 
  6107  0719                     	;# 
  6108  0891                     	;# 
  6109  0891                     	;# 
  6110  0891                     	;# 
  6111  0891                     	;# 
  6112  0891                     	;# 
  6113  0891                     	;# 
  6114  0892                     	;# 
  6115  0892                     	;# 
  6116  0892                     	;# 
  6117  0893                     	;# 
  6118  0893                     	;# 
  6119  0893                     	;# 
  6120  0893                     	;# 
  6121  0893                     	;# 
  6122  0893                     	;# 
  6123  0894                     	;# 
  6124  0894                     	;# 
  6125  0894                     	;# 
  6126  0895                     	;# 
  6127  0895                     	;# 
  6128  0895                     	;# 
  6129  0896                     	;# 
  6130  0896                     	;# 
  6131  0896                     	;# 
  6132  089B                     	;# 
  6133  0911                     	;# 
  6134  0912                     	;# 
  6135  0913                     	;# 
  6136  0914                     	;# 
  6137  0915                     	;# 
  6138  0916                     	;# 
  6139  0918                     	;# 
  6140  0919                     	;# 
  6141  091A                     	;# 
  6142  091B                     	;# 
  6143  091C                     	;# 
  6144  091D                     	;# 
  6145  091E                     	;# 
  6146  091F                     	;# 
  6147  0E0F                     	;# 
  6148  0E10                     	;# 
  6149  0E11                     	;# 
  6150  0E12                     	;# 
  6151  0E13                     	;# 
  6152  0E14                     	;# 
  6153  0E15                     	;# 
  6154  0E16                     	;# 
  6155  0E17                     	;# 
  6156  0E18                     	;# 
  6157  0E19                     	;# 
  6158  0E1A                     	;# 
  6159  0E1B                     	;# 
  6160  0E1C                     	;# 
  6161  0E1D                     	;# 
  6162  0E1E                     	;# 
  6163  0E1F                     	;# 
  6164  0E20                     	;# 
  6165  0E21                     	;# 
  6166  0E22                     	;# 
  6167  0E24                     	;# 
  6168  0E25                     	;# 
  6169  0E28                     	;# 
  6170  0E29                     	;# 
  6171  0E2A                     	;# 
  6172  0E2B                     	;# 
  6173  0E2C                     	;# 
  6174  0E2D                     	;# 
  6175  0E2E                     	;# 
  6176  0E2F                     	;# 
  6177  0E90                     	;# 
  6178  0E91                     	;# 
  6179  0E92                     	;# 
  6180  0E94                     	;# 
  6181  0E95                     	;# 
  6182  0E9C                     	;# 
  6183  0E9D                     	;# 
  6184  0E9E                     	;# 
  6185  0E9F                     	;# 
  6186  0EA0                     	;# 
  6187  0EA1                     	;# 
  6188  0EA2                     	;# 
  6189  0EA3                     	;# 
  6190  0EA4                     	;# 
  6191  0EA5                     	;# 
  6192  0EA6                     	;# 
  6193  0EA7                     	;# 
  6194  0F0F                     	;# 
  6195  0F10                     	;# 
  6196  0F11                     	;# 
  6197  0F12                     	;# 
  6198  0F13                     	;# 
  6199  0F14                     	;# 
  6200  0F15                     	;# 
  6201  0F16                     	;# 
  6202  0F17                     	;# 
  6203  0F18                     	;# 
  6204  0F19                     	;# 
  6205  0F1A                     	;# 
  6206  0F1B                     	;# 
  6207  0F1C                     	;# 
  6208  0F1D                     	;# 
  6209  0F1E                     	;# 
  6210  0F1F                     	;# 
  6211  0F20                     	;# 
  6212  0F21                     	;# 
  6213  0F22                     	;# 
  6214  0F23                     	;# 
  6215  0F24                     	;# 
  6216  0F25                     	;# 
  6217  0F26                     	;# 
  6218  0F27                     	;# 
  6219  0F28                     	;# 
  6220  0F29                     	;# 
  6221  0F2A                     	;# 
  6222  0F2B                     	;# 
  6223  0F2C                     	;# 
  6224  0F2D                     	;# 
  6225  0F2E                     	;# 
  6226  0F2F                     	;# 
  6227  0F30                     	;# 
  6228  0F31                     	;# 
  6229  0F32                     	;# 
  6230  0F33                     	;# 
  6231  0F34                     	;# 
  6232  0F35                     	;# 
  6233  0F36                     	;# 
  6234  0F37                     	;# 
  6235  0FE4                     	;# 
  6236  0FE5                     	;# 
  6237  0FE6                     	;# 
  6238  0FE7                     	;# 
  6239  0FE8                     	;# 
  6240  0FE9                     	;# 
  6241  0FEA                     	;# 
  6242  0FEB                     	;# 
  6243  0FED                     	;# 
  6244  0FEE                     	;# 
  6245  0FEF                     	;# 
  6246  0000                     	;# 
  6247  0001                     	;# 
  6248  0002                     	;# 
  6249  0003                     	;# 
  6250  0004                     	;# 
  6251  0005                     	;# 
  6252  0006                     	;# 
  6253  0007                     	;# 
  6254  0008                     	;# 
  6255  0009                     	;# 
  6256  000A                     	;# 
  6257  000B                     	;# 
  6258  000C                     	;# 
  6259  000D                     	;# 
  6260  000E                     	;# 
  6261  0010                     	;# 
  6262  0011                     	;# 
  6263  0012                     	;# 
  6264  0013                     	;# 
  6265  0014                     	;# 
  6266  0015                     	;# 
  6267  0015                     	;# 
  6268  0016                     	;# 
  6269  0016                     	;# 
  6270  0017                     	;# 
  6271  0018                     	;# 
  6272  0019                     	;# 
  6273  0019                     	;# 
  6274  001A                     	;# 
  6275  001B                     	;# 
  6276  001C                     	;# 
  6277  001D                     	;# 
  6278  001E                     	;# 
  6279  001F                     	;# 
  6280  008C                     	;# 
  6281  008D                     	;# 
  6282  008E                     	;# 
  6283  0090                     	;# 
  6284  0091                     	;# 
  6285  0092                     	;# 
  6286  0093                     	;# 
  6287  0094                     	;# 
  6288  0097                     	;# 
  6289  009B                     	;# 
  6290  009B                     	;# 
  6291  009C                     	;# 
  6292  009D                     	;# 
  6293  009E                     	;# 
  6294  009F                     	;# 
  6295  010C                     	;# 
  6296  010D                     	;# 
  6297  010E                     	;# 
  6298  0111                     	;# 
  6299  0112                     	;# 
  6300  0113                     	;# 
  6301  0114                     	;# 
  6302  0115                     	;# 
  6303  0116                     	;# 
  6304  0117                     	;# 
  6305  0118                     	;# 
  6306  0119                     	;# 
  6307  018C                     	;# 
  6308  018D                     	;# 
  6309  018E                     	;# 
  6310  0199                     	;# 
  6311  0199                     	;# 
  6312  0199                     	;# 
  6313  019A                     	;# 
  6314  019A                     	;# 
  6315  019A                     	;# 
  6316  019B                     	;# 
  6317  019B                     	;# 
  6318  019B                     	;# 
  6319  019B                     	;# 
  6320  019B                     	;# 
  6321  019C                     	;# 
  6322  019C                     	;# 
  6323  019C                     	;# 
  6324  019D                     	;# 
  6325  019D                     	;# 
  6326  019D                     	;# 
  6327  019E                     	;# 
  6328  019E                     	;# 
  6329  019E                     	;# 
  6330  019F                     	;# 
  6331  019F                     	;# 
  6332  019F                     	;# 
  6333  019F                     	;# 
  6334  019F                     	;# 
  6335  020C                     	;# 
  6336  020D                     	;# 
  6337  020E                     	;# 
  6338  0211                     	;# 
  6339  0211                     	;# 
  6340  0212                     	;# 
  6341  0212                     	;# 
  6342  0213                     	;# 
  6343  0213                     	;# 
  6344  0214                     	;# 
  6345  0214                     	;# 
  6346  0215                     	;# 
  6347  0215                     	;# 
  6348  0215                     	;# 
  6349  0215                     	;# 
  6350  0216                     	;# 
  6351  0216                     	;# 
  6352  0217                     	;# 
  6353  0217                     	;# 
  6354  0219                     	;# 
  6355  021A                     	;# 
  6356  021B                     	;# 
  6357  021C                     	;# 
  6358  021D                     	;# 
  6359  021D                     	;# 
  6360  021E                     	;# 
  6361  021F                     	;# 
  6362  028C                     	;# 
  6363  028D                     	;# 
  6364  028E                     	;# 
  6365  0291                     	;# 
  6366  0291                     	;# 
  6367  0292                     	;# 
  6368  0293                     	;# 
  6369  0294                     	;# 
  6370  0295                     	;# 
  6371  0295                     	;# 
  6372  0296                     	;# 
  6373  0297                     	;# 
  6374  0298                     	;# 
  6375  029F                     	;# 
  6376  030C                     	;# 
  6377  030D                     	;# 
  6378  030E                     	;# 
  6379  0311                     	;# 
  6380  0311                     	;# 
  6381  0312                     	;# 
  6382  0313                     	;# 
  6383  0314                     	;# 
  6384  0315                     	;# 
  6385  0315                     	;# 
  6386  0316                     	;# 
  6387  0317                     	;# 
  6388  0318                     	;# 
  6389  038C                     	;# 
  6390  038D                     	;# 
  6391  038E                     	;# 
  6392  0391                     	;# 
  6393  0392                     	;# 
  6394  0393                     	;# 
  6395  0394                     	;# 
  6396  0395                     	;# 
  6397  0396                     	;# 
  6398  0397                     	;# 
  6399  0398                     	;# 
  6400  0399                     	;# 
  6401  039A                     	;# 
  6402  039C                     	;# 
  6403  039D                     	;# 
  6404  039E                     	;# 
  6405  039F                     	;# 
  6406  0411                     	;# 
  6407  0411                     	;# 
  6408  0412                     	;# 
  6409  0413                     	;# 
  6410  0414                     	;# 
  6411  0415                     	;# 
  6412  0416                     	;# 
  6413  0417                     	;# 
  6414  0418                     	;# 
  6415  0418                     	;# 
  6416  0419                     	;# 
  6417  041A                     	;# 
  6418  041B                     	;# 
  6419  041C                     	;# 
  6420  041D                     	;# 
  6421  041E                     	;# 
  6422  041F                     	;# 
  6423  0498                     	;# 
  6424  0498                     	;# 
  6425  0499                     	;# 
  6426  049A                     	;# 
  6427  049B                     	;# 
  6428  049B                     	;# 
  6429  049C                     	;# 
  6430  049D                     	;# 
  6431  049E                     	;# 
  6432  049F                     	;# 
  6433  0617                     	;# 
  6434  0618                     	;# 
  6435  0619                     	;# 
  6436  0619                     	;# 
  6437  061A                     	;# 
  6438  061B                     	;# 
  6439  061C                     	;# 
  6440  061C                     	;# 
  6441  061F                     	;# 
  6442  0691                     	;# 
  6443  0692                     	;# 
  6444  0693                     	;# 
  6445  0694                     	;# 
  6446  0695                     	;# 
  6447  0696                     	;# 
  6448  0697                     	;# 
  6449  0698                     	;# 
  6450  0699                     	;# 
  6451  0711                     	;# 
  6452  0712                     	;# 
  6453  0713                     	;# 
  6454  0714                     	;# 
  6455  0715                     	;# 
  6456  0716                     	;# 
  6457  0717                     	;# 
  6458  0718                     	;# 
  6459  0719                     	;# 
  6460  0891                     	;# 
  6461  0891                     	;# 
  6462  0891                     	;# 
  6463  0891                     	;# 
  6464  0891                     	;# 
  6465  0891                     	;# 
  6466  0892                     	;# 
  6467  0892                     	;# 
  6468  0892                     	;# 
  6469  0893                     	;# 
  6470  0893                     	;# 
  6471  0893                     	;# 
  6472  0893                     	;# 
  6473  0893                     	;# 
  6474  0893                     	;# 
  6475  0894                     	;# 
  6476  0894                     	;# 
  6477  0894                     	;# 
  6478  0895                     	;# 
  6479  0895                     	;# 
  6480  0895                     	;# 
  6481  0896                     	;# 
  6482  0896                     	;# 
  6483  0896                     	;# 
  6484  089B                     	;# 
  6485  0911                     	;# 
  6486  0912                     	;# 
  6487  0913                     	;# 
  6488  0914                     	;# 
  6489  0915                     	;# 
  6490  0916                     	;# 
  6491  0918                     	;# 
  6492  0919                     	;# 
  6493  091A                     	;# 
  6494  091B                     	;# 
  6495  091C                     	;# 
  6496  091D                     	;# 
  6497  091E                     	;# 
  6498  091F                     	;# 
  6499  0E0F                     	;# 
  6500  0E10                     	;# 
  6501  0E11                     	;# 
  6502  0E12                     	;# 
  6503  0E13                     	;# 
  6504  0E14                     	;# 
  6505  0E15                     	;# 
  6506  0E16                     	;# 
  6507  0E17                     	;# 
  6508  0E18                     	;# 
  6509  0E19                     	;# 
  6510  0E1A                     	;# 
  6511  0E1B                     	;# 
  6512  0E1C                     	;# 
  6513  0E1D                     	;# 
  6514  0E1E                     	;# 
  6515  0E1F                     	;# 
  6516  0E20                     	;# 
  6517  0E21                     	;# 
  6518  0E22                     	;# 
  6519  0E24                     	;# 
  6520  0E25                     	;# 
  6521  0E28                     	;# 
  6522  0E29                     	;# 
  6523  0E2A                     	;# 
  6524  0E2B                     	;# 
  6525  0E2C                     	;# 
  6526  0E2D                     	;# 
  6527  0E2E                     	;# 
  6528  0E2F                     	;# 
  6529  0E90                     	;# 
  6530  0E91                     	;# 
  6531  0E92                     	;# 
  6532  0E94                     	;# 
  6533  0E95                     	;# 
  6534  0E9C                     	;# 
  6535  0E9D                     	;# 
  6536  0E9E                     	;# 
  6537  0E9F                     	;# 
  6538  0EA0                     	;# 
  6539  0EA1                     	;# 
  6540  0EA2                     	;# 
  6541  0EA3                     	;# 
  6542  0EA4                     	;# 
  6543  0EA5                     	;# 
  6544  0EA6                     	;# 
  6545  0EA7                     	;# 
  6546  0F0F                     	;# 
  6547  0F10                     	;# 
  6548  0F11                     	;# 
  6549  0F12                     	;# 
  6550  0F13                     	;# 
  6551  0F14                     	;# 
  6552  0F15                     	;# 
  6553  0F16                     	;# 
  6554  0F17                     	;# 
  6555  0F18                     	;# 
  6556  0F19                     	;# 
  6557  0F1A                     	;# 
  6558  0F1B                     	;# 
  6559  0F1C                     	;# 
  6560  0F1D                     	;# 
  6561  0F1E                     	;# 
  6562  0F1F                     	;# 
  6563  0F20                     	;# 
  6564  0F21                     	;# 
  6565  0F22                     	;# 
  6566  0F23                     	;# 
  6567  0F24                     	;# 
  6568  0F25                     	;# 
  6569  0F26                     	;# 
  6570  0F27                     	;# 
  6571  0F28                     	;# 
  6572  0F29                     	;# 
  6573  0F2A                     	;# 
  6574  0F2B                     	;# 
  6575  0F2C                     	;# 
  6576  0F2D                     	;# 
  6577  0F2E                     	;# 
  6578  0F2F                     	;# 
  6579  0F30                     	;# 
  6580  0F31                     	;# 
  6581  0F32                     	;# 
  6582  0F33                     	;# 
  6583  0F34                     	;# 
  6584  0F35                     	;# 
  6585  0F36                     	;# 
  6586  0F37                     	;# 
  6587  0FE4                     	;# 
  6588  0FE5                     	;# 
  6589  0FE6                     	;# 
  6590  0FE7                     	;# 
  6591  0FE8                     	;# 
  6592  0FE9                     	;# 
  6593  0FEA                     	;# 
  6594  0FEB                     	;# 
  6595  0FED                     	;# 
  6596  0FEE                     	;# 
  6597  0FEF                     	;# 
  6598  0000                     	;# 
  6599  0001                     	;# 
  6600  0002                     	;# 
  6601  0003                     	;# 
  6602  0004                     	;# 
  6603  0005                     	;# 
  6604  0006                     	;# 
  6605  0007                     	;# 
  6606  0008                     	;# 
  6607  0009                     	;# 
  6608  000A                     	;# 
  6609  000B                     	;# 
  6610  000C                     	;# 
  6611  000D                     	;# 
  6612  000E                     	;# 
  6613  0010                     	;# 
  6614  0011                     	;# 
  6615  0012                     	;# 
  6616  0013                     	;# 
  6617  0014                     	;# 
  6618  0015                     	;# 
  6619  0015                     	;# 
  6620  0016                     	;# 
  6621  0016                     	;# 
  6622  0017                     	;# 
  6623  0018                     	;# 
  6624  0019                     	;# 
  6625  0019                     	;# 
  6626  001A                     	;# 
  6627  001B                     	;# 
  6628  001C                     	;# 
  6629  001D                     	;# 
  6630  001E                     	;# 
  6631  001F                     	;# 
  6632  008C                     	;# 
  6633  008D                     	;# 
  6634  008E                     	;# 
  6635  0090                     	;# 
  6636  0091                     	;# 
  6637  0092                     	;# 
  6638  0093                     	;# 
  6639  0094                     	;# 
  6640  0097                     	;# 
  6641  009B                     	;# 
  6642  009B                     	;# 
  6643  009C                     	;# 
  6644  009D                     	;# 
  6645  009E                     	;# 
  6646  009F                     	;# 
  6647  010C                     	;# 
  6648  010D                     	;# 
  6649  010E                     	;# 
  6650  0111                     	;# 
  6651  0112                     	;# 
  6652  0113                     	;# 
  6653  0114                     	;# 
  6654  0115                     	;# 
  6655  0116                     	;# 
  6656  0117                     	;# 
  6657  0118                     	;# 
  6658  0119                     	;# 
  6659  018C                     	;# 
  6660  018D                     	;# 
  6661  018E                     	;# 
  6662  0199                     	;# 
  6663  0199                     	;# 
  6664  0199                     	;# 
  6665  019A                     	;# 
  6666  019A                     	;# 
  6667  019A                     	;# 
  6668  019B                     	;# 
  6669  019B                     	;# 
  6670  019B                     	;# 
  6671  019B                     	;# 
  6672  019B                     	;# 
  6673  019C                     	;# 
  6674  019C                     	;# 
  6675  019C                     	;# 
  6676  019D                     	;# 
  6677  019D                     	;# 
  6678  019D                     	;# 
  6679  019E                     	;# 
  6680  019E                     	;# 
  6681  019E                     	;# 
  6682  019F                     	;# 
  6683  019F                     	;# 
  6684  019F                     	;# 
  6685  019F                     	;# 
  6686  019F                     	;# 
  6687  020C                     	;# 
  6688  020D                     	;# 
  6689  020E                     	;# 
  6690  0211                     	;# 
  6691  0211                     	;# 
  6692  0212                     	;# 
  6693  0212                     	;# 
  6694  0213                     	;# 
  6695  0213                     	;# 
  6696  0214                     	;# 
  6697  0214                     	;# 
  6698  0215                     	;# 
  6699  0215                     	;# 
  6700  0215                     	;# 
  6701  0215                     	;# 
  6702  0216                     	;# 
  6703  0216                     	;# 
  6704  0217                     	;# 
  6705  0217                     	;# 
  6706  0219                     	;# 
  6707  021A                     	;# 
  6708  021B                     	;# 
  6709  021C                     	;# 
  6710  021D                     	;# 
  6711  021D                     	;# 
  6712  021E                     	;# 
  6713  021F                     	;# 
  6714  028C                     	;# 
  6715  028D                     	;# 
  6716  028E                     	;# 
  6717  0291                     	;# 
  6718  0291                     	;# 
  6719  0292                     	;# 
  6720  0293                     	;# 
  6721  0294                     	;# 
  6722  0295                     	;# 
  6723  0295                     	;# 
  6724  0296                     	;# 
  6725  0297                     	;# 
  6726  0298                     	;# 
  6727  029F                     	;# 
  6728  030C                     	;# 
  6729  030D                     	;# 
  6730  030E                     	;# 
  6731  0311                     	;# 
  6732  0311                     	;# 
  6733  0312                     	;# 
  6734  0313                     	;# 
  6735  0314                     	;# 
  6736  0315                     	;# 
  6737  0315                     	;# 
  6738  0316                     	;# 
  6739  0317                     	;# 
  6740  0318                     	;# 
  6741  038C                     	;# 
  6742  038D                     	;# 
  6743  038E                     	;# 
  6744  0391                     	;# 
  6745  0392                     	;# 
  6746  0393                     	;# 
  6747  0394                     	;# 
  6748  0395                     	;# 
  6749  0396                     	;# 
  6750  0397                     	;# 
  6751  0398                     	;# 
  6752  0399                     	;# 
  6753  039A                     	;# 
  6754  039C                     	;# 
  6755  039D                     	;# 
  6756  039E                     	;# 
  6757  039F                     	;# 
  6758  0411                     	;# 
  6759  0411                     	;# 
  6760  0412                     	;# 
  6761  0413                     	;# 
  6762  0414                     	;# 
  6763  0415                     	;# 
  6764  0416                     	;# 
  6765  0417                     	;# 
  6766  0418                     	;# 
  6767  0418                     	;# 
  6768  0419                     	;# 
  6769  041A                     	;# 
  6770  041B                     	;# 
  6771  041C                     	;# 
  6772  041D                     	;# 
  6773  041E                     	;# 
  6774  041F                     	;# 
  6775  0498                     	;# 
  6776  0498                     	;# 
  6777  0499                     	;# 
  6778  049A                     	;# 
  6779  049B                     	;# 
  6780  049B                     	;# 
  6781  049C                     	;# 
  6782  049D                     	;# 
  6783  049E                     	;# 
  6784  049F                     	;# 
  6785  0617                     	;# 
  6786  0618                     	;# 
  6787  0619                     	;# 
  6788  0619                     	;# 
  6789  061A                     	;# 
  6790  061B                     	;# 
  6791  061C                     	;# 
  6792  061C                     	;# 
  6793  061F                     	;# 
  6794  0691                     	;# 
  6795  0692                     	;# 
  6796  0693                     	;# 
  6797  0694                     	;# 
  6798  0695                     	;# 
  6799  0696                     	;# 
  6800  0697                     	;# 
  6801  0698                     	;# 
  6802  0699                     	;# 
  6803  0711                     	;# 
  6804  0712                     	;# 
  6805  0713                     	;# 
  6806  0714                     	;# 
  6807  0715                     	;# 
  6808  0716                     	;# 
  6809  0717                     	;# 
  6810  0718                     	;# 
  6811  0719                     	;# 
  6812  0891                     	;# 
  6813  0891                     	;# 
  6814  0891                     	;# 
  6815  0891                     	;# 
  6816  0891                     	;# 
  6817  0891                     	;# 
  6818  0892                     	;# 
  6819  0892                     	;# 
  6820  0892                     	;# 
  6821  0893                     	;# 
  6822  0893                     	;# 
  6823  0893                     	;# 
  6824  0893                     	;# 
  6825  0893                     	;# 
  6826  0893                     	;# 
  6827  0894                     	;# 
  6828  0894                     	;# 
  6829  0894                     	;# 
  6830  0895                     	;# 
  6831  0895                     	;# 
  6832  0895                     	;# 
  6833  0896                     	;# 
  6834  0896                     	;# 
  6835  0896                     	;# 
  6836  089B                     	;# 
  6837  0911                     	;# 
  6838  0912                     	;# 
  6839  0913                     	;# 
  6840  0914                     	;# 
  6841  0915                     	;# 
  6842  0916                     	;# 
  6843  0918                     	;# 
  6844  0919                     	;# 
  6845  091A                     	;# 
  6846  091B                     	;# 
  6847  091C                     	;# 
  6848  091D                     	;# 
  6849  091E                     	;# 
  6850  091F                     	;# 
  6851  0E0F                     	;# 
  6852  0E10                     	;# 
  6853  0E11                     	;# 
  6854  0E12                     	;# 
  6855  0E13                     	;# 
  6856  0E14                     	;# 
  6857  0E15                     	;# 
  6858  0E16                     	;# 
  6859  0E17                     	;# 
  6860  0E18                     	;# 
  6861  0E19                     	;# 
  6862  0E1A                     	;# 
  6863  0E1B                     	;# 
  6864  0E1C                     	;# 
  6865  0E1D                     	;# 
  6866  0E1E                     	;# 
  6867  0E1F                     	;# 
  6868  0E20                     	;# 
  6869  0E21                     	;# 
  6870  0E22                     	;# 
  6871  0E24                     	;# 
  6872  0E25                     	;# 
  6873  0E28                     	;# 
  6874  0E29                     	;# 
  6875  0E2A                     	;# 
  6876  0E2B                     	;# 
  6877  0E2C                     	;# 
  6878  0E2D                     	;# 
  6879  0E2E                     	;# 
  6880  0E2F                     	;# 
  6881  0E90                     	;# 
  6882  0E91                     	;# 
  6883  0E92                     	;# 
  6884  0E94                     	;# 
  6885  0E95                     	;# 
  6886  0E9C                     	;# 
  6887  0E9D                     	;# 
  6888  0E9E                     	;# 
  6889  0E9F                     	;# 
  6890  0EA0                     	;# 
  6891  0EA1                     	;# 
  6892  0EA2                     	;# 
  6893  0EA3                     	;# 
  6894  0EA4                     	;# 
  6895  0EA5                     	;# 
  6896  0EA6                     	;# 
  6897  0EA7                     	;# 
  6898  0F0F                     	;# 
  6899  0F10                     	;# 
  6900  0F11                     	;# 
  6901  0F12                     	;# 
  6902  0F13                     	;# 
  6903  0F14                     	;# 
  6904  0F15                     	;# 
  6905  0F16                     	;# 
  6906  0F17                     	;# 
  6907  0F18                     	;# 
  6908  0F19                     	;# 
  6909  0F1A                     	;# 
  6910  0F1B                     	;# 
  6911  0F1C                     	;# 
  6912  0F1D                     	;# 
  6913  0F1E                     	;# 
  6914  0F1F                     	;# 
  6915  0F20                     	;# 
  6916  0F21                     	;# 
  6917  0F22                     	;# 
  6918  0F23                     	;# 
  6919  0F24                     	;# 
  6920  0F25                     	;# 
  6921  0F26                     	;# 
  6922  0F27                     	;# 
  6923  0F28                     	;# 
  6924  0F29                     	;# 
  6925  0F2A                     	;# 
  6926  0F2B                     	;# 
  6927  0F2C                     	;# 
  6928  0F2D                     	;# 
  6929  0F2E                     	;# 
  6930  0F2F                     	;# 
  6931  0F30                     	;# 
  6932  0F31                     	;# 
  6933  0F32                     	;# 
  6934  0F33                     	;# 
  6935  0F34                     	;# 
  6936  0F35                     	;# 
  6937  0F36                     	;# 
  6938  0F37                     	;# 
  6939  0FE4                     	;# 
  6940  0FE5                     	;# 
  6941  0FE6                     	;# 
  6942  0FE7                     	;# 
  6943  0FE8                     	;# 
  6944  0FE9                     	;# 
  6945  0FEA                     	;# 
  6946  0FEB                     	;# 
  6947  0FED                     	;# 
  6948  0FEE                     	;# 
  6949  0FEF                     	;# 
  6950  0000                     	;# 
  6951  0001                     	;# 
  6952  0002                     	;# 
  6953  0003                     	;# 
  6954  0004                     	;# 
  6955  0005                     	;# 
  6956  0006                     	;# 
  6957  0007                     	;# 
  6958  0008                     	;# 
  6959  0009                     	;# 
  6960  000A                     	;# 
  6961  000B                     	;# 
  6962  000C                     	;# 
  6963  000D                     	;# 
  6964  000E                     	;# 
  6965  0010                     	;# 
  6966  0011                     	;# 
  6967  0012                     	;# 
  6968  0013                     	;# 
  6969  0014                     	;# 
  6970  0015                     	;# 
  6971  0015                     	;# 
  6972  0016                     	;# 
  6973  0016                     	;# 
  6974  0017                     	;# 
  6975  0018                     	;# 
  6976  0019                     	;# 
  6977  0019                     	;# 
  6978  001A                     	;# 
  6979  001B                     	;# 
  6980  001C                     	;# 
  6981  001D                     	;# 
  6982  001E                     	;# 
  6983  001F                     	;# 
  6984  008C                     	;# 
  6985  008D                     	;# 
  6986  008E                     	;# 
  6987  0090                     	;# 
  6988  0091                     	;# 
  6989  0092                     	;# 
  6990  0093                     	;# 
  6991  0094                     	;# 
  6992  0097                     	;# 
  6993  009B                     	;# 
  6994  009B                     	;# 
  6995  009C                     	;# 
  6996  009D                     	;# 
  6997  009E                     	;# 
  6998  009F                     	;# 
  6999  010C                     	;# 
  7000  010D                     	;# 
  7001  010E                     	;# 
  7002  0111                     	;# 
  7003  0112                     	;# 
  7004  0113                     	;# 
  7005  0114                     	;# 
  7006  0115                     	;# 
  7007  0116                     	;# 
  7008  0117                     	;# 
  7009  0118                     	;# 
  7010  0119                     	;# 
  7011  018C                     	;# 
  7012  018D                     	;# 
  7013  018E                     	;# 
  7014  0199                     	;# 
  7015  0199                     	;# 
  7016  0199                     	;# 
  7017  019A                     	;# 
  7018  019A                     	;# 
  7019  019A                     	;# 
  7020  019B                     	;# 
  7021  019B                     	;# 
  7022  019B                     	;# 
  7023  019B                     	;# 
  7024  019B                     	;# 
  7025  019C                     	;# 
  7026  019C                     	;# 
  7027  019C                     	;# 
  7028  019D                     	;# 
  7029  019D                     	;# 
  7030  019D                     	;# 
  7031  019E                     	;# 
  7032  019E                     	;# 
  7033  019E                     	;# 
  7034  019F                     	;# 
  7035  019F                     	;# 
  7036  019F                     	;# 
  7037  019F                     	;# 
  7038  019F                     	;# 
  7039  020C                     	;# 
  7040  020D                     	;# 
  7041  020E                     	;# 
  7042  0211                     	;# 
  7043  0211                     	;# 
  7044  0212                     	;# 
  7045  0212                     	;# 
  7046  0213                     	;# 
  7047  0213                     	;# 
  7048  0214                     	;# 
  7049  0214                     	;# 
  7050  0215                     	;# 
  7051  0215                     	;# 
  7052  0215                     	;# 
  7053  0215                     	;# 
  7054  0216                     	;# 
  7055  0216                     	;# 
  7056  0217                     	;# 
  7057  0217                     	;# 
  7058  0219                     	;# 
  7059  021A                     	;# 
  7060  021B                     	;# 
  7061  021C                     	;# 
  7062  021D                     	;# 
  7063  021D                     	;# 
  7064  021E                     	;# 
  7065  021F                     	;# 
  7066  028C                     	;# 
  7067  028D                     	;# 
  7068  028E                     	;# 
  7069  0291                     	;# 
  7070  0291                     	;# 
  7071  0292                     	;# 
  7072  0293                     	;# 
  7073  0294                     	;# 
  7074  0295                     	;# 
  7075  0295                     	;# 
  7076  0296                     	;# 
  7077  0297                     	;# 
  7078  0298                     	;# 
  7079  029F                     	;# 
  7080  030C                     	;# 
  7081  030D                     	;# 
  7082  030E                     	;# 
  7083  0311                     	;# 
  7084  0311                     	;# 
  7085  0312                     	;# 
  7086  0313                     	;# 
  7087  0314                     	;# 
  7088  0315                     	;# 
  7089  0315                     	;# 
  7090  0316                     	;# 
  7091  0317                     	;# 
  7092  0318                     	;# 
  7093  038C                     	;# 
  7094  038D                     	;# 
  7095  038E                     	;# 
  7096  0391                     	;# 
  7097  0392                     	;# 
  7098  0393                     	;# 
  7099  0394                     	;# 
  7100  0395                     	;# 
  7101  0396                     	;# 
  7102  0397                     	;# 
  7103  0398                     	;# 
  7104  0399                     	;# 
  7105  039A                     	;# 
  7106  039C                     	;# 
  7107  039D                     	;# 
  7108  039E                     	;# 
  7109  039F                     	;# 
  7110  0411                     	;# 
  7111  0411                     	;# 
  7112  0412                     	;# 
  7113  0413                     	;# 
  7114  0414                     	;# 
  7115  0415                     	;# 
  7116  0416                     	;# 
  7117  0417                     	;# 
  7118  0418                     	;# 
  7119  0418                     	;# 
  7120  0419                     	;# 
  7121  041A                     	;# 
  7122  041B                     	;# 
  7123  041C                     	;# 
  7124  041D                     	;# 
  7125  041E                     	;# 
  7126  041F                     	;# 
  7127  0498                     	;# 
  7128  0498                     	;# 
  7129  0499                     	;# 
  7130  049A                     	;# 
  7131  049B                     	;# 
  7132  049B                     	;# 
  7133  049C                     	;# 
  7134  049D                     	;# 
  7135  049E                     	;# 
  7136  049F                     	;# 
  7137  0617                     	;# 
  7138  0618                     	;# 
  7139  0619                     	;# 
  7140  0619                     	;# 
  7141  061A                     	;# 
  7142  061B                     	;# 
  7143  061C                     	;# 
  7144  061C                     	;# 
  7145  061F                     	;# 
  7146  0691                     	;# 
  7147  0692                     	;# 
  7148  0693                     	;# 
  7149  0694                     	;# 
  7150  0695                     	;# 
  7151  0696                     	;# 
  7152  0697                     	;# 
  7153  0698                     	;# 
  7154  0699                     	;# 
  7155  0711                     	;# 
  7156  0712                     	;# 
  7157  0713                     	;# 
  7158  0714                     	;# 
  7159  0715                     	;# 
  7160  0716                     	;# 
  7161  0717                     	;# 
  7162  0718                     	;# 
  7163  0719                     	;# 
  7164  0891                     	;# 
  7165  0891                     	;# 
  7166  0891                     	;# 
  7167  0891                     	;# 
  7168  0891                     	;# 
  7169  0891                     	;# 
  7170  0892                     	;# 
  7171  0892                     	;# 
  7172  0892                     	;# 
  7173  0893                     	;# 
  7174  0893                     	;# 
  7175  0893                     	;# 
  7176  0893                     	;# 
  7177  0893                     	;# 
  7178  0893                     	;# 
  7179  0894                     	;# 
  7180  0894                     	;# 
  7181  0894                     	;# 
  7182  0895                     	;# 
  7183  0895                     	;# 
  7184  0895                     	;# 
  7185  0896                     	;# 
  7186  0896                     	;# 
  7187  0896                     	;# 
  7188  089B                     	;# 
  7189  0911                     	;# 
  7190  0912                     	;# 
  7191  0913                     	;# 
  7192  0914                     	;# 
  7193  0915                     	;# 
  7194  0916                     	;# 
  7195  0918                     	;# 
  7196  0919                     	;# 
  7197  091A                     	;# 
  7198  091B                     	;# 
  7199  091C                     	;# 
  7200  091D                     	;# 
  7201  091E                     	;# 
  7202  091F                     	;# 
  7203  0E0F                     	;# 
  7204  0E10                     	;# 
  7205  0E11                     	;# 
  7206  0E12                     	;# 
  7207  0E13                     	;# 
  7208  0E14                     	;# 
  7209  0E15                     	;# 
  7210  0E16                     	;# 
  7211  0E17                     	;# 
  7212  0E18                     	;# 
  7213  0E19                     	;# 
  7214  0E1A                     	;# 
  7215  0E1B                     	;# 
  7216  0E1C                     	;# 
  7217  0E1D                     	;# 
  7218  0E1E                     	;# 
  7219  0E1F                     	;# 
  7220  0E20                     	;# 
  7221  0E21                     	;# 
  7222  0E22                     	;# 
  7223  0E24                     	;# 
  7224  0E25                     	;# 
  7225  0E28                     	;# 
  7226  0E29                     	;# 
  7227  0E2A                     	;# 
  7228  0E2B                     	;# 
  7229  0E2C                     	;# 
  7230  0E2D                     	;# 
  7231  0E2E                     	;# 
  7232  0E2F                     	;# 
  7233  0E90                     	;# 
  7234  0E91                     	;# 
  7235  0E92                     	;# 
  7236  0E94                     	;# 
  7237  0E95                     	;# 
  7238  0E9C                     	;# 
  7239  0E9D                     	;# 
  7240  0E9E                     	;# 
  7241  0E9F                     	;# 
  7242  0EA0                     	;# 
  7243  0EA1                     	;# 
  7244  0EA2                     	;# 
  7245  0EA3                     	;# 
  7246  0EA4                     	;# 
  7247  0EA5                     	;# 
  7248  0EA6                     	;# 
  7249  0EA7                     	;# 
  7250  0F0F                     	;# 
  7251  0F10                     	;# 
  7252  0F11                     	;# 
  7253  0F12                     	;# 
  7254  0F13                     	;# 
  7255  0F14                     	;# 
  7256  0F15                     	;# 
  7257  0F16                     	;# 
  7258  0F17                     	;# 
  7259  0F18                     	;# 
  7260  0F19                     	;# 
  7261  0F1A                     	;# 
  7262  0F1B                     	;# 
  7263  0F1C                     	;# 
  7264  0F1D                     	;# 
  7265  0F1E                     	;# 
  7266  0F1F                     	;# 
  7267  0F20                     	;# 
  7268  0F21                     	;# 
  7269  0F22                     	;# 
  7270  0F23                     	;# 
  7271  0F24                     	;# 
  7272  0F25                     	;# 
  7273  0F26                     	;# 
  7274  0F27                     	;# 
  7275  0F28                     	;# 
  7276  0F29                     	;# 
  7277  0F2A                     	;# 
  7278  0F2B                     	;# 
  7279  0F2C                     	;# 
  7280  0F2D                     	;# 
  7281  0F2E                     	;# 
  7282  0F2F                     	;# 
  7283  0F30                     	;# 
  7284  0F31                     	;# 
  7285  0F32                     	;# 
  7286  0F33                     	;# 
  7287  0F34                     	;# 
  7288  0F35                     	;# 
  7289  0F36                     	;# 
  7290  0F37                     	;# 
  7291  0FE4                     	;# 
  7292  0FE5                     	;# 
  7293  0FE6                     	;# 
  7294  0FE7                     	;# 
  7295  0FE8                     	;# 
  7296  0FE9                     	;# 
  7297  0FEA                     	;# 
  7298  0FEB                     	;# 
  7299  0FED                     	;# 
  7300  0FEE                     	;# 
  7301  0FEF                     	;# 
  7302  0000                     	;# 
  7303  0001                     	;# 
  7304  0002                     	;# 
  7305  0003                     	;# 
  7306  0004                     	;# 
  7307  0005                     	;# 
  7308  0006                     	;# 
  7309  0007                     	;# 
  7310  0008                     	;# 
  7311  0009                     	;# 
  7312  000A                     	;# 
  7313  000B                     	;# 
  7314  000C                     	;# 
  7315  000D                     	;# 
  7316  000E                     	;# 
  7317  0010                     	;# 
  7318  0011                     	;# 
  7319  0012                     	;# 
  7320  0013                     	;# 
  7321  0014                     	;# 
  7322  0015                     	;# 
  7323  0015                     	;# 
  7324  0016                     	;# 
  7325  0016                     	;# 
  7326  0017                     	;# 
  7327  0018                     	;# 
  7328  0019                     	;# 
  7329  0019                     	;# 
  7330  001A                     	;# 
  7331  001B                     	;# 
  7332  001C                     	;# 
  7333  001D                     	;# 
  7334  001E                     	;# 
  7335  001F                     	;# 
  7336  008C                     	;# 
  7337  008D                     	;# 
  7338  008E                     	;# 
  7339  0090                     	;# 
  7340  0091                     	;# 
  7341  0092                     	;# 
  7342  0093                     	;# 
  7343  0094                     	;# 
  7344  0097                     	;# 
  7345  009B                     	;# 
  7346  009B                     	;# 
  7347  009C                     	;# 
  7348  009D                     	;# 
  7349  009E                     	;# 
  7350  009F                     	;# 
  7351  010C                     	;# 
  7352  010D                     	;# 
  7353  010E                     	;# 
  7354  0111                     	;# 
  7355  0112                     	;# 
  7356  0113                     	;# 
  7357  0114                     	;# 
  7358  0115                     	;# 
  7359  0116                     	;# 
  7360  0117                     	;# 
  7361  0118                     	;# 
  7362  0119                     	;# 
  7363  018C                     	;# 
  7364  018D                     	;# 
  7365  018E                     	;# 
  7366  0199                     	;# 
  7367  0199                     	;# 
  7368  0199                     	;# 
  7369  019A                     	;# 
  7370  019A                     	;# 
  7371  019A                     	;# 
  7372  019B                     	;# 
  7373  019B                     	;# 
  7374  019B                     	;# 
  7375  019B                     	;# 
  7376  019B                     	;# 
  7377  019C                     	;# 
  7378  019C                     	;# 
  7379  019C                     	;# 
  7380  019D                     	;# 
  7381  019D                     	;# 
  7382  019D                     	;# 
  7383  019E                     	;# 
  7384  019E                     	;# 
  7385  019E                     	;# 
  7386  019F                     	;# 
  7387  019F                     	;# 
  7388  019F                     	;# 
  7389  019F                     	;# 
  7390  019F                     	;# 
  7391  020C                     	;# 
  7392  020D                     	;# 
  7393  020E                     	;# 
  7394  0211                     	;# 
  7395  0211                     	;# 
  7396  0212                     	;# 
  7397  0212                     	;# 
  7398  0213                     	;# 
  7399  0213                     	;# 
  7400  0214                     	;# 
  7401  0214                     	;# 
  7402  0215                     	;# 
  7403  0215                     	;# 
  7404  0215                     	;# 
  7405  0215                     	;# 
  7406  0216                     	;# 
  7407  0216                     	;# 
  7408  0217                     	;# 
  7409  0217                     	;# 
  7410  0219                     	;# 
  7411  021A                     	;# 
  7412  021B                     	;# 
  7413  021C                     	;# 
  7414  021D                     	;# 
  7415  021D                     	;# 
  7416  021E                     	;# 
  7417  021F                     	;# 
  7418  028C                     	;# 
  7419  028D                     	;# 
  7420  028E                     	;# 
  7421  0291                     	;# 
  7422  0291                     	;# 
  7423  0292                     	;# 
  7424  0293                     	;# 
  7425  0294                     	;# 
  7426  0295                     	;# 
  7427  0295                     	;# 
  7428  0296                     	;# 
  7429  0297                     	;# 
  7430  0298                     	;# 
  7431  029F                     	;# 
  7432  030C                     	;# 
  7433  030D                     	;# 
  7434  030E                     	;# 
  7435  0311                     	;# 
  7436  0311                     	;# 
  7437  0312                     	;# 
  7438  0313                     	;# 
  7439  0314                     	;# 
  7440  0315                     	;# 
  7441  0315                     	;# 
  7442  0316                     	;# 
  7443  0317                     	;# 
  7444  0318                     	;# 
  7445  038C                     	;# 
  7446  038D                     	;# 
  7447  038E                     	;# 
  7448  0391                     	;# 
  7449  0392                     	;# 
  7450  0393                     	;# 
  7451  0394                     	;# 
  7452  0395                     	;# 
  7453  0396                     	;# 
  7454  0397                     	;# 
  7455  0398                     	;# 
  7456  0399                     	;# 
  7457  039A                     	;# 
  7458  039C                     	;# 
  7459  039D                     	;# 
  7460  039E                     	;# 
  7461  039F                     	;# 
  7462  0411                     	;# 
  7463  0411                     	;# 
  7464  0412                     	;# 
  7465  0413                     	;# 
  7466  0414                     	;# 
  7467  0415                     	;# 
  7468  0416                     	;# 
  7469  0417                     	;# 
  7470  0418                     	;# 
  7471  0418                     	;# 
  7472  0419                     	;# 
  7473  041A                     	;# 
  7474  041B                     	;# 
  7475  041C                     	;# 
  7476  041D                     	;# 
  7477  041E                     	;# 
  7478  041F                     	;# 
  7479  0498                     	;# 
  7480  0498                     	;# 
  7481  0499                     	;# 
  7482  049A                     	;# 
  7483  049B                     	;# 
  7484  049B                     	;# 
  7485  049C                     	;# 
  7486  049D                     	;# 
  7487  049E                     	;# 
  7488  049F                     	;# 
  7489  0617                     	;# 
  7490  0618                     	;# 
  7491  0619                     	;# 
  7492  0619                     	;# 
  7493  061A                     	;# 
  7494  061B                     	;# 
  7495  061C                     	;# 
  7496  061C                     	;# 
  7497  061F                     	;# 
  7498  0691                     	;# 
  7499  0692                     	;# 
  7500  0693                     	;# 
  7501  0694                     	;# 
  7502  0695                     	;# 
  7503  0696                     	;# 
  7504  0697                     	;# 
  7505  0698                     	;# 
  7506  0699                     	;# 
  7507  0711                     	;# 
  7508  0712                     	;# 
  7509  0713                     	;# 
  7510  0714                     	;# 
  7511  0715                     	;# 
  7512  0716                     	;# 
  7513  0717                     	;# 
  7514  0718                     	;# 
  7515  0719                     	;# 
  7516  0891                     	;# 
  7517  0891                     	;# 
  7518  0891                     	;# 
  7519  0891                     	;# 
  7520  0891                     	;# 
  7521  0891                     	;# 
  7522  0892                     	;# 
  7523  0892                     	;# 
  7524  0892                     	;# 
  7525  0893                     	;# 
  7526  0893                     	;# 
  7527  0893                     	;# 
  7528  0893                     	;# 
  7529  0893                     	;# 
  7530  0893                     	;# 
  7531  0894                     	;# 
  7532  0894                     	;# 
  7533  0894                     	;# 
  7534  0895                     	;# 
  7535  0895                     	;# 
  7536  0895                     	;# 
  7537  0896                     	;# 
  7538  0896                     	;# 
  7539  0896                     	;# 
  7540  089B                     	;# 
  7541  0911                     	;# 
  7542  0912                     	;# 
  7543  0913                     	;# 
  7544  0914                     	;# 
  7545  0915                     	;# 
  7546  0916                     	;# 
  7547  0918                     	;# 
  7548  0919                     	;# 
  7549  091A                     	;# 
  7550  091B                     	;# 
  7551  091C                     	;# 
  7552  091D                     	;# 
  7553  091E                     	;# 
  7554  091F                     	;# 
  7555  0E0F                     	;# 
  7556  0E10                     	;# 
  7557  0E11                     	;# 
  7558  0E12                     	;# 
  7559  0E13                     	;# 
  7560  0E14                     	;# 
  7561  0E15                     	;# 
  7562  0E16                     	;# 
  7563  0E17                     	;# 
  7564  0E18                     	;# 
  7565  0E19                     	;# 
  7566  0E1A                     	;# 
  7567  0E1B                     	;# 
  7568  0E1C                     	;# 
  7569  0E1D                     	;# 
  7570  0E1E                     	;# 
  7571  0E1F                     	;# 
  7572  0E20                     	;# 
  7573  0E21                     	;# 
  7574  0E22                     	;# 
  7575  0E24                     	;# 
  7576  0E25                     	;# 
  7577  0E28                     	;# 
  7578  0E29                     	;# 
  7579  0E2A                     	;# 
  7580  0E2B                     	;# 
  7581  0E2C                     	;# 
  7582  0E2D                     	;# 
  7583  0E2E                     	;# 
  7584  0E2F                     	;# 
  7585  0E90                     	;# 
  7586  0E91                     	;# 
  7587  0E92                     	;# 
  7588  0E94                     	;# 
  7589  0E95                     	;# 
  7590  0E9C                     	;# 
  7591  0E9D                     	;# 
  7592  0E9E                     	;# 
  7593  0E9F                     	;# 
  7594  0EA0                     	;# 
  7595  0EA1                     	;# 
  7596  0EA2                     	;# 
  7597  0EA3                     	;# 
  7598  0EA4                     	;# 
  7599  0EA5                     	;# 
  7600  0EA6                     	;# 
  7601  0EA7                     	;# 
  7602  0F0F                     	;# 
  7603  0F10                     	;# 
  7604  0F11                     	;# 
  7605  0F12                     	;# 
  7606  0F13                     	;# 
  7607  0F14                     	;# 
  7608  0F15                     	;# 
  7609  0F16                     	;# 
  7610  0F17                     	;# 
  7611  0F18                     	;# 
  7612  0F19                     	;# 
  7613  0F1A                     	;# 
  7614  0F1B                     	;# 
  7615  0F1C                     	;# 
  7616  0F1D                     	;# 
  7617  0F1E                     	;# 
  7618  0F1F                     	;# 
  7619  0F20                     	;# 
  7620  0F21                     	;# 
  7621  0F22                     	;# 
  7622  0F23                     	;# 
  7623  0F24                     	;# 
  7624  0F25                     	;# 
  7625  0F26                     	;# 
  7626  0F27                     	;# 
  7627  0F28                     	;# 
  7628  0F29                     	;# 
  7629  0F2A                     	;# 
  7630  0F2B                     	;# 
  7631  0F2C                     	;# 
  7632  0F2D                     	;# 
  7633  0F2E                     	;# 
  7634  0F2F                     	;# 
  7635  0F30                     	;# 
  7636  0F31                     	;# 
  7637  0F32                     	;# 
  7638  0F33                     	;# 
  7639  0F34                     	;# 
  7640  0F35                     	;# 
  7641  0F36                     	;# 
  7642  0F37                     	;# 
  7643  0FE4                     	;# 
  7644  0FE5                     	;# 
  7645  0FE6                     	;# 
  7646  0FE7                     	;# 
  7647  0FE8                     	;# 
  7648  0FE9                     	;# 
  7649  0FEA                     	;# 
  7650  0FEB                     	;# 
  7651  0FED                     	;# 
  7652  0FEE                     	;# 
  7653  0FEF                     	;# 
  7654  0000                     	;# 
  7655  0001                     	;# 
  7656  0002                     	;# 
  7657  0003                     	;# 
  7658  0004                     	;# 
  7659  0005                     	;# 
  7660  0006                     	;# 
  7661  0007                     	;# 
  7662  0008                     	;# 
  7663  0009                     	;# 
  7664  000A                     	;# 
  7665  000B                     	;# 
  7666  000C                     	;# 
  7667  000D                     	;# 
  7668  000E                     	;# 
  7669  0010                     	;# 
  7670  0011                     	;# 
  7671  0012                     	;# 
  7672  0013                     	;# 
  7673  0014                     	;# 
  7674  0015                     	;# 
  7675  0015                     	;# 
  7676  0016                     	;# 
  7677  0016                     	;# 
  7678  0017                     	;# 
  7679  0018                     	;# 
  7680  0019                     	;# 
  7681  0019                     	;# 
  7682  001A                     	;# 
  7683  001B                     	;# 
  7684  001C                     	;# 
  7685  001D                     	;# 
  7686  001E                     	;# 
  7687  001F                     	;# 
  7688  008C                     	;# 
  7689  008D                     	;# 
  7690  008E                     	;# 
  7691  0090                     	;# 
  7692  0091                     	;# 
  7693  0092                     	;# 
  7694  0093                     	;# 
  7695  0094                     	;# 
  7696  0097                     	;# 
  7697  009B                     	;# 
  7698  009B                     	;# 
  7699  009C                     	;# 
  7700  009D                     	;# 
  7701  009E                     	;# 
  7702  009F                     	;# 
  7703  010C                     	;# 
  7704  010D                     	;# 
  7705  010E                     	;# 
  7706  0111                     	;# 
  7707  0112                     	;# 
  7708  0113                     	;# 
  7709  0114                     	;# 
  7710  0115                     	;# 
  7711  0116                     	;# 
  7712  0117                     	;# 
  7713  0118                     	;# 
  7714  0119                     	;# 
  7715  018C                     	;# 
  7716  018D                     	;# 
  7717  018E                     	;# 
  7718  0199                     	;# 
  7719  0199                     	;# 
  7720  0199                     	;# 
  7721  019A                     	;# 
  7722  019A                     	;# 
  7723  019A                     	;# 
  7724  019B                     	;# 
  7725  019B                     	;# 
  7726  019B                     	;# 
  7727  019B                     	;# 
  7728  019B                     	;# 
  7729  019C                     	;# 
  7730  019C                     	;# 
  7731  019C                     	;# 
  7732  019D                     	;# 
  7733  019D                     	;# 
  7734  019D                     	;# 
  7735  019E                     	;# 
  7736  019E                     	;# 
  7737  019E                     	;# 
  7738  019F                     	;# 
  7739  019F                     	;# 
  7740  019F                     	;# 
  7741  019F                     	;# 
  7742  019F                     	;# 
  7743  020C                     	;# 
  7744  020D                     	;# 
  7745  020E                     	;# 
  7746  0211                     	;# 
  7747  0211                     	;# 
  7748  0212                     	;# 
  7749  0212                     	;# 
  7750  0213                     	;# 
  7751  0213                     	;# 
  7752  0214                     	;# 
  7753  0214                     	;# 
  7754  0215                     	;# 
  7755  0215                     	;# 
  7756  0215                     	;# 
  7757  0215                     	;# 
  7758  0216                     	;# 
  7759  0216                     	;# 
  7760  0217                     	;# 
  7761  0217                     	;# 
  7762  0219                     	;# 
  7763  021A                     	;# 
  7764  021B                     	;# 
  7765  021C                     	;# 
  7766  021D                     	;# 
  7767  021D                     	;# 
  7768  021E                     	;# 
  7769  021F                     	;# 
  7770  028C                     	;# 
  7771  028D                     	;# 
  7772  028E                     	;# 
  7773  0291                     	;# 
  7774  0291                     	;# 
  7775  0292                     	;# 
  7776  0293                     	;# 
  7777  0294                     	;# 
  7778  0295                     	;# 
  7779  0295                     	;# 
  7780  0296                     	;# 
  7781  0297                     	;# 
  7782  0298                     	;# 
  7783  029F                     	;# 
  7784  030C                     	;# 
  7785  030D                     	;# 
  7786  030E                     	;# 
  7787  0311                     	;# 
  7788  0311                     	;# 
  7789  0312                     	;# 
  7790  0313                     	;# 
  7791  0314                     	;# 
  7792  0315                     	;# 
  7793  0315                     	;# 
  7794  0316                     	;# 
  7795  0317                     	;# 
  7796  0318                     	;# 
  7797  038C                     	;# 
  7798  038D                     	;# 
  7799  038E                     	;# 
  7800  0391                     	;# 
  7801  0392                     	;# 
  7802  0393                     	;# 
  7803  0394                     	;# 
  7804  0395                     	;# 
  7805  0396                     	;# 
  7806  0397                     	;# 
  7807  0398                     	;# 
  7808  0399                     	;# 
  7809  039A                     	;# 
  7810  039C                     	;# 
  7811  039D                     	;# 
  7812  039E                     	;# 
  7813  039F                     	;# 
  7814  0411                     	;# 
  7815  0411                     	;# 
  7816  0412                     	;# 
  7817  0413                     	;# 
  7818  0414                     	;# 
  7819  0415                     	;# 
  7820  0416                     	;# 
  7821  0417                     	;# 
  7822  0418                     	;# 
  7823  0418                     	;# 
  7824  0419                     	;# 
  7825  041A                     	;# 
  7826  041B                     	;# 
  7827  041C                     	;# 
  7828  041D                     	;# 
  7829  041E                     	;# 
  7830  041F                     	;# 
  7831  0498                     	;# 
  7832  0498                     	;# 
  7833  0499                     	;# 
  7834  049A                     	;# 
  7835  049B                     	;# 
  7836  049B                     	;# 
  7837  049C                     	;# 
  7838  049D                     	;# 
  7839  049E                     	;# 
  7840  049F                     	;# 
  7841  0617                     	;# 
  7842  0618                     	;# 
  7843  0619                     	;# 
  7844  0619                     	;# 
  7845  061A                     	;# 
  7846  061B                     	;# 
  7847  061C                     	;# 
  7848  061C                     	;# 
  7849  061F                     	;# 
  7850  0691                     	;# 
  7851  0692                     	;# 
  7852  0693                     	;# 
  7853  0694                     	;# 
  7854  0695                     	;# 
  7855  0696                     	;# 
  7856  0697                     	;# 
  7857  0698                     	;# 
  7858  0699                     	;# 
  7859  0711                     	;# 
  7860  0712                     	;# 
  7861  0713                     	;# 
  7862  0714                     	;# 
  7863  0715                     	;# 
  7864  0716                     	;# 
  7865  0717                     	;# 
  7866  0718                     	;# 
  7867  0719                     	;# 
  7868  0891                     	;# 
  7869  0891                     	;# 
  7870  0891                     	;# 
  7871  0891                     	;# 
  7872  0891                     	;# 
  7873  0891                     	;# 
  7874  0892                     	;# 
  7875  0892                     	;# 
  7876  0892                     	;# 
  7877  0893                     	;# 
  7878  0893                     	;# 
  7879  0893                     	;# 
  7880  0893                     	;# 
  7881  0893                     	;# 
  7882  0893                     	;# 
  7883  0894                     	;# 
  7884  0894                     	;# 
  7885  0894                     	;# 
  7886  0895                     	;# 
  7887  0895                     	;# 
  7888  0895                     	;# 
  7889  0896                     	;# 
  7890  0896                     	;# 
  7891  0896                     	;# 
  7892  089B                     	;# 
  7893  0911                     	;# 
  7894  0912                     	;# 
  7895  0913                     	;# 
  7896  0914                     	;# 
  7897  0915                     	;# 
  7898  0916                     	;# 
  7899  0918                     	;# 
  7900  0919                     	;# 
  7901  091A                     	;# 
  7902  091B                     	;# 
  7903  091C                     	;# 
  7904  091D                     	;# 
  7905  091E                     	;# 
  7906  091F                     	;# 
  7907  0E0F                     	;# 
  7908  0E10                     	;# 
  7909  0E11                     	;# 
  7910  0E12                     	;# 
  7911  0E13                     	;# 
  7912  0E14                     	;# 
  7913  0E15                     	;# 
  7914  0E16                     	;# 
  7915  0E17                     	;# 
  7916  0E18                     	;# 
  7917  0E19                     	;# 
  7918  0E1A                     	;# 
  7919  0E1B                     	;# 
  7920  0E1C                     	;# 
  7921  0E1D                     	;# 
  7922  0E1E                     	;# 
  7923  0E1F                     	;# 
  7924  0E20                     	;# 
  7925  0E21                     	;# 
  7926  0E22                     	;# 
  7927  0E24                     	;# 
  7928  0E25                     	;# 
  7929  0E28                     	;# 
  7930  0E29                     	;# 
  7931  0E2A                     	;# 
  7932  0E2B                     	;# 
  7933  0E2C                     	;# 
  7934  0E2D                     	;# 
  7935  0E2E                     	;# 
  7936  0E2F                     	;# 
  7937  0E90                     	;# 
  7938  0E91                     	;# 
  7939  0E92                     	;# 
  7940  0E94                     	;# 
  7941  0E95                     	;# 
  7942  0E9C                     	;# 
  7943  0E9D                     	;# 
  7944  0E9E                     	;# 
  7945  0E9F                     	;# 
  7946  0EA0                     	;# 
  7947  0EA1                     	;# 
  7948  0EA2                     	;# 
  7949  0EA3                     	;# 
  7950  0EA4                     	;# 
  7951  0EA5                     	;# 
  7952  0EA6                     	;# 
  7953  0EA7                     	;# 
  7954  0F0F                     	;# 
  7955  0F10                     	;# 
  7956  0F11                     	;# 
  7957  0F12                     	;# 
  7958  0F13                     	;# 
  7959  0F14                     	;# 
  7960  0F15                     	;# 
  7961  0F16                     	;# 
  7962  0F17                     	;# 
  7963  0F18                     	;# 
  7964  0F19                     	;# 
  7965  0F1A                     	;# 
  7966  0F1B                     	;# 
  7967  0F1C                     	;# 
  7968  0F1D                     	;# 
  7969  0F1E                     	;# 
  7970  0F1F                     	;# 
  7971  0F20                     	;# 
  7972  0F21                     	;# 
  7973  0F22                     	;# 
  7974  0F23                     	;# 
  7975  0F24                     	;# 
  7976  0F25                     	;# 
  7977  0F26                     	;# 
  7978  0F27                     	;# 
  7979  0F28                     	;# 
  7980  0F29                     	;# 
  7981  0F2A                     	;# 
  7982  0F2B                     	;# 
  7983  0F2C                     	;# 
  7984  0F2D                     	;# 
  7985  0F2E                     	;# 
  7986  0F2F                     	;# 
  7987  0F30                     	;# 
  7988  0F31                     	;# 
  7989  0F32                     	;# 
  7990  0F33                     	;# 
  7991  0F34                     	;# 
  7992  0F35                     	;# 
  7993  0F36                     	;# 
  7994  0F37                     	;# 
  7995  0FE4                     	;# 
  7996  0FE5                     	;# 
  7997  0FE6                     	;# 
  7998  0FE7                     	;# 
  7999  0FE8                     	;# 
  8000  0FE9                     	;# 
  8001  0FEA                     	;# 
  8002  0FEB                     	;# 
  8003  0FED                     	;# 
  8004  0FEE                     	;# 
  8005  0FEF                     	;# 
  8006  0000                     	;# 
  8007  0001                     	;# 
  8008  0002                     	;# 
  8009  0003                     	;# 
  8010  0004                     	;# 
  8011  0005                     	;# 
  8012  0006                     	;# 
  8013  0007                     	;# 
  8014  0008                     	;# 
  8015  0009                     	;# 
  8016  000A                     	;# 
  8017  000B                     	;# 
  8018  000C                     	;# 
  8019  000D                     	;# 
  8020  000E                     	;# 
  8021  0010                     	;# 
  8022  0011                     	;# 
  8023  0012                     	;# 
  8024  0013                     	;# 
  8025  0014                     	;# 
  8026  0015                     	;# 
  8027  0015                     	;# 
  8028  0016                     	;# 
  8029  0016                     	;# 
  8030  0017                     	;# 
  8031  0018                     	;# 
  8032  0019                     	;# 
  8033  0019                     	;# 
  8034  001A                     	;# 
  8035  001B                     	;# 
  8036  001C                     	;# 
  8037  001D                     	;# 
  8038  001E                     	;# 
  8039  001F                     	;# 
  8040  008C                     	;# 
  8041  008D                     	;# 
  8042  008E                     	;# 
  8043  0090                     	;# 
  8044  0091                     	;# 
  8045  0092                     	;# 
  8046  0093                     	;# 
  8047  0094                     	;# 
  8048  0097                     	;# 
  8049  009B                     	;# 
  8050  009B                     	;# 
  8051  009C                     	;# 
  8052  009D                     	;# 
  8053  009E                     	;# 
  8054  009F                     	;# 
  8055  010C                     	;# 
  8056  010D                     	;# 
  8057  010E                     	;# 
  8058  0111                     	;# 
  8059  0112                     	;# 
  8060  0113                     	;# 
  8061  0114                     	;# 
  8062  0115                     	;# 
  8063  0116                     	;# 
  8064  0117                     	;# 
  8065  0118                     	;# 
  8066  0119                     	;# 
  8067  018C                     	;# 
  8068  018D                     	;# 
  8069  018E                     	;# 
  8070  0199                     	;# 
  8071  0199                     	;# 
  8072  0199                     	;# 
  8073  019A                     	;# 
  8074  019A                     	;# 
  8075  019A                     	;# 
  8076  019B                     	;# 
  8077  019B                     	;# 
  8078  019B                     	;# 
  8079  019B                     	;# 
  8080  019B                     	;# 
  8081  019C                     	;# 
  8082  019C                     	;# 
  8083  019C                     	;# 
  8084  019D                     	;# 
  8085  019D                     	;# 
  8086  019D                     	;# 
  8087  019E                     	;# 
  8088  019E                     	;# 
  8089  019E                     	;# 
  8090  019F                     	;# 
  8091  019F                     	;# 
  8092  019F                     	;# 
  8093  019F                     	;# 
  8094  019F                     	;# 
  8095  020C                     	;# 
  8096  020D                     	;# 
  8097  020E                     	;# 
  8098  0211                     	;# 
  8099  0211                     	;# 
  8100  0212                     	;# 
  8101  0212                     	;# 
  8102  0213                     	;# 
  8103  0213                     	;# 
  8104  0214                     	;# 
  8105  0214                     	;# 
  8106  0215                     	;# 
  8107  0215                     	;# 
  8108  0215                     	;# 
  8109  0215                     	;# 
  8110  0216                     	;# 
  8111  0216                     	;# 
  8112  0217                     	;# 
  8113  0217                     	;# 
  8114  0219                     	;# 
  8115  021A                     	;# 
  8116  021B                     	;# 
  8117  021C                     	;# 
  8118  021D                     	;# 
  8119  021D                     	;# 
  8120  021E                     	;# 
  8121  021F                     	;# 
  8122  028C                     	;# 
  8123  028D                     	;# 
  8124  028E                     	;# 
  8125  0291                     	;# 
  8126  0291                     	;# 
  8127  0292                     	;# 
  8128  0293                     	;# 
  8129  0294                     	;# 
  8130  0295                     	;# 
  8131  0295                     	;# 
  8132  0296                     	;# 
  8133  0297                     	;# 
  8134  0298                     	;# 
  8135  029F                     	;# 
  8136  030C                     	;# 
  8137  030D                     	;# 
  8138  030E                     	;# 
  8139  0311                     	;# 
  8140  0311                     	;# 
  8141  0312                     	;# 
  8142  0313                     	;# 
  8143  0314                     	;# 
  8144  0315                     	;# 
  8145  0315                     	;# 
  8146  0316                     	;# 
  8147  0317                     	;# 
  8148  0318                     	;# 
  8149  038C                     	;# 
  8150  038D                     	;# 
  8151  038E                     	;# 
  8152  0391                     	;# 
  8153  0392                     	;# 
  8154  0393                     	;# 
  8155  0394                     	;# 
  8156  0395                     	;# 
  8157  0396                     	;# 
  8158  0397                     	;# 
  8159  0398                     	;# 
  8160  0399                     	;# 
  8161  039A                     	;# 
  8162  039C                     	;# 
  8163  039D                     	;# 
  8164  039E                     	;# 
  8165  039F                     	;# 
  8166  0411                     	;# 
  8167  0411                     	;# 
  8168  0412                     	;# 
  8169  0413                     	;# 
  8170  0414                     	;# 
  8171  0415                     	;# 
  8172  0416                     	;# 
  8173  0417                     	;# 
  8174  0418                     	;# 
  8175  0418                     	;# 
  8176  0419                     	;# 
  8177  041A                     	;# 
  8178  041B                     	;# 
  8179  041C                     	;# 
  8180  041D                     	;# 
  8181  041E                     	;# 
  8182  041F                     	;# 
  8183  0498                     	;# 
  8184  0498                     	;# 
  8185  0499                     	;# 
  8186  049A                     	;# 
  8187  049B                     	;# 
  8188  049B                     	;# 
  8189  049C                     	;# 
  8190  049D                     	;# 
  8191  049E                     	;# 
  8192  049F                     	;# 
  8193  0617                     	;# 
  8194  0618                     	;# 
  8195  0619                     	;# 
  8196  0619                     	;# 
  8197  061A                     	;# 
  8198  061B                     	;# 
  8199  061C                     	;# 
  8200  061C                     	;# 
  8201  061F                     	;# 
  8202  0691                     	;# 
  8203  0692                     	;# 
  8204  0693                     	;# 
  8205  0694                     	;# 
  8206  0695                     	;# 
  8207  0696                     	;# 
  8208  0697                     	;# 
  8209  0698                     	;# 
  8210  0699                     	;# 
  8211  0711                     	;# 
  8212  0712                     	;# 
  8213  0713                     	;# 
  8214  0714                     	;# 
  8215  0715                     	;# 
  8216  0716                     	;# 
  8217  0717                     	;# 
  8218  0718                     	;# 
  8219  0719                     	;# 
  8220  0891                     	;# 
  8221  0891                     	;# 
  8222  0891                     	;# 
  8223  0891                     	;# 
  8224  0891                     	;# 
  8225  0891                     	;# 
  8226  0892                     	;# 
  8227  0892                     	;# 
  8228  0892                     	;# 
  8229  0893                     	;# 
  8230  0893                     	;# 
  8231  0893                     	;# 
  8232  0893                     	;# 
  8233  0893                     	;# 
  8234  0893                     	;# 
  8235  0894                     	;# 
  8236  0894                     	;# 
  8237  0894                     	;# 
  8238  0895                     	;# 
  8239  0895                     	;# 
  8240  0895                     	;# 
  8241  0896                     	;# 
  8242  0896                     	;# 
  8243  0896                     	;# 
  8244  089B                     	;# 
  8245  0911                     	;# 
  8246  0912                     	;# 
  8247  0913                     	;# 
  8248  0914                     	;# 
  8249  0915                     	;# 
  8250  0916                     	;# 
  8251  0918                     	;# 
  8252  0919                     	;# 
  8253  091A                     	;# 
  8254  091B                     	;# 
  8255  091C                     	;# 
  8256  091D                     	;# 
  8257  091E                     	;# 
  8258  091F                     	;# 
  8259  0E0F                     	;# 
  8260  0E10                     	;# 
  8261  0E11                     	;# 
  8262  0E12                     	;# 
  8263  0E13                     	;# 
  8264  0E14                     	;# 
  8265  0E15                     	;# 
  8266  0E16                     	;# 
  8267  0E17                     	;# 
  8268  0E18                     	;# 
  8269  0E19                     	;# 
  8270  0E1A                     	;# 
  8271  0E1B                     	;# 
  8272  0E1C                     	;# 
  8273  0E1D                     	;# 
  8274  0E1E                     	;# 
  8275  0E1F                     	;# 
  8276  0E20                     	;# 
  8277  0E21                     	;# 
  8278  0E22                     	;# 
  8279  0E24                     	;# 
  8280  0E25                     	;# 
  8281  0E28                     	;# 
  8282  0E29                     	;# 
  8283  0E2A                     	;# 
  8284  0E2B                     	;# 
  8285  0E2C                     	;# 
  8286  0E2D                     	;# 
  8287  0E2E                     	;# 
  8288  0E2F                     	;# 
  8289  0E90                     	;# 
  8290  0E91                     	;# 
  8291  0E92                     	;# 
  8292  0E94                     	;# 
  8293  0E95                     	;# 
  8294  0E9C                     	;# 
  8295  0E9D                     	;# 
  8296  0E9E                     	;# 
  8297  0E9F                     	;# 
  8298  0EA0                     	;# 
  8299  0EA1                     	;# 
  8300  0EA2                     	;# 
  8301  0EA3                     	;# 
  8302  0EA4                     	;# 
  8303  0EA5                     	;# 
  8304  0EA6                     	;# 
  8305  0EA7                     	;# 
  8306  0F0F                     	;# 
  8307  0F10                     	;# 
  8308  0F11                     	;# 
  8309  0F12                     	;# 
  8310  0F13                     	;# 
  8311  0F14                     	;# 
  8312  0F15                     	;# 
  8313  0F16                     	;# 
  8314  0F17                     	;# 
  8315  0F18                     	;# 
  8316  0F19                     	;# 
  8317  0F1A                     	;# 
  8318  0F1B                     	;# 
  8319  0F1C                     	;# 
  8320  0F1D                     	;# 
  8321  0F1E                     	;# 
  8322  0F1F                     	;# 
  8323  0F20                     	;# 
  8324  0F21                     	;# 
  8325  0F22                     	;# 
  8326  0F23                     	;# 
  8327  0F24                     	;# 
  8328  0F25                     	;# 
  8329  0F26                     	;# 
  8330  0F27                     	;# 
  8331  0F28                     	;# 
  8332  0F29                     	;# 
  8333  0F2A                     	;# 
  8334  0F2B                     	;# 
  8335  0F2C                     	;# 
  8336  0F2D                     	;# 
  8337  0F2E                     	;# 
  8338  0F2F                     	;# 
  8339  0F30                     	;# 
  8340  0F31                     	;# 
  8341  0F32                     	;# 
  8342  0F33                     	;# 
  8343  0F34                     	;# 
  8344  0F35                     	;# 
  8345  0F36                     	;# 
  8346  0F37                     	;# 
  8347  0FE4                     	;# 
  8348  0FE5                     	;# 
  8349  0FE6                     	;# 
  8350  0FE7                     	;# 
  8351  0FE8                     	;# 
  8352  0FE9                     	;# 
  8353  0FEA                     	;# 
  8354  0FEB                     	;# 
  8355  0FED                     	;# 
  8356  0FEE                     	;# 
  8357  0FEF                     	;# 
  8358  0000                     	;# 
  8359  0001                     	;# 
  8360  0002                     	;# 
  8361  0003                     	;# 
  8362  0004                     	;# 
  8363  0005                     	;# 
  8364  0006                     	;# 
  8365  0007                     	;# 
  8366  0008                     	;# 
  8367  0009                     	;# 
  8368  000A                     	;# 
  8369  000B                     	;# 
  8370  000C                     	;# 
  8371  000D                     	;# 
  8372  000E                     	;# 
  8373  0010                     	;# 
  8374  0011                     	;# 
  8375  0012                     	;# 
  8376  0013                     	;# 
  8377  0014                     	;# 
  8378  0015                     	;# 
  8379  0015                     	;# 
  8380  0016                     	;# 
  8381  0016                     	;# 
  8382  0017                     	;# 
  8383  0018                     	;# 
  8384  0019                     	;# 
  8385  0019                     	;# 
  8386  001A                     	;# 
  8387  001B                     	;# 
  8388  001C                     	;# 
  8389  001D                     	;# 
  8390  001E                     	;# 
  8391  001F                     	;# 
  8392  008C                     	;# 
  8393  008D                     	;# 
  8394  008E                     	;# 
  8395  0090                     	;# 
  8396  0091                     	;# 
  8397  0092                     	;# 
  8398  0093                     	;# 
  8399  0094                     	;# 
  8400  0097                     	;# 
  8401  009B                     	;# 
  8402  009B                     	;# 
  8403  009C                     	;# 
  8404  009D                     	;# 
  8405  009E                     	;# 
  8406  009F                     	;# 
  8407  010C                     	;# 
  8408  010D                     	;# 
  8409  010E                     	;# 
  8410  0111                     	;# 
  8411  0112                     	;# 
  8412  0113                     	;# 
  8413  0114                     	;# 
  8414  0115                     	;# 
  8415  0116                     	;# 
  8416  0117                     	;# 
  8417  0118                     	;# 
  8418  0119                     	;# 
  8419  018C                     	;# 
  8420  018D                     	;# 
  8421  018E                     	;# 
  8422  0199                     	;# 
  8423  0199                     	;# 
  8424  0199                     	;# 
  8425  019A                     	;# 
  8426  019A                     	;# 
  8427  019A                     	;# 
  8428  019B                     	;# 
  8429  019B                     	;# 
  8430  019B                     	;# 
  8431  019B                     	;# 
  8432  019B                     	;# 
  8433  019C                     	;# 
  8434  019C                     	;# 
  8435  019C                     	;# 
  8436  019D                     	;# 
  8437  019D                     	;# 
  8438  019D                     	;# 
  8439  019E                     	;# 
  8440  019E                     	;# 
  8441  019E                     	;# 
  8442  019F                     	;# 
  8443  019F                     	;# 
  8444  019F                     	;# 
  8445  019F                     	;# 
  8446  019F                     	;# 
  8447  020C                     	;# 
  8448  020D                     	;# 
  8449  020E                     	;# 
  8450  0211                     	;# 
  8451  0211                     	;# 
  8452  0212                     	;# 
  8453  0212                     	;# 
  8454  0213                     	;# 
  8455  0213                     	;# 
  8456  0214                     	;# 
  8457  0214                     	;# 
  8458  0215                     	;# 
  8459  0215                     	;# 
  8460  0215                     	;# 
  8461  0215                     	;# 
  8462  0216                     	;# 
  8463  0216                     	;# 
  8464  0217                     	;# 
  8465  0217                     	;# 
  8466  0219                     	;# 
  8467  021A                     	;# 
  8468  021B                     	;# 
  8469  021C                     	;# 
  8470  021D                     	;# 
  8471  021D                     	;# 
  8472  021E                     	;# 
  8473  021F                     	;# 
  8474  028C                     	;# 
  8475  028D                     	;# 
  8476  028E                     	;# 
  8477  0291                     	;# 
  8478  0291                     	;# 
  8479  0292                     	;# 
  8480  0293                     	;# 
  8481  0294                     	;# 
  8482  0295                     	;# 
  8483  0295                     	;# 
  8484  0296                     	;# 
  8485  0297                     	;# 
  8486  0298                     	;# 
  8487  029F                     	;# 
  8488  030C                     	;# 
  8489  030D                     	;# 
  8490  030E                     	;# 
  8491  0311                     	;# 
  8492  0311                     	;# 
  8493  0312                     	;# 
  8494  0313                     	;# 
  8495  0314                     	;# 
  8496  0315                     	;# 
  8497  0315                     	;# 
  8498  0316                     	;# 
  8499  0317                     	;# 
  8500  0318                     	;# 
  8501  038C                     	;# 
  8502  038D                     	;# 
  8503  038E                     	;# 
  8504  0391                     	;# 
  8505  0392                     	;# 
  8506  0393                     	;# 
  8507  0394                     	;# 
  8508  0395                     	;# 
  8509  0396                     	;# 
  8510  0397                     	;# 
  8511  0398                     	;# 
  8512  0399                     	;# 
  8513  039A                     	;# 
  8514  039C                     	;# 
  8515  039D                     	;# 
  8516  039E                     	;# 
  8517  039F                     	;# 
  8518  0411                     	;# 
  8519  0411                     	;# 
  8520  0412                     	;# 
  8521  0413                     	;# 
  8522  0414                     	;# 
  8523  0415                     	;# 
  8524  0416                     	;# 
  8525  0417                     	;# 
  8526  0418                     	;# 
  8527  0418                     	;# 
  8528  0419                     	;# 
  8529  041A                     	;# 
  8530  041B                     	;# 
  8531  041C                     	;# 
  8532  041D                     	;# 
  8533  041E                     	;# 
  8534  041F                     	;# 
  8535  0498                     	;# 
  8536  0498                     	;# 
  8537  0499                     	;# 
  8538  049A                     	;# 
  8539  049B                     	;# 
  8540  049B                     	;# 
  8541  049C                     	;# 
  8542  049D                     	;# 
  8543  049E                     	;# 
  8544  049F                     	;# 
  8545  0617                     	;# 
  8546  0618                     	;# 
  8547  0619                     	;# 
  8548  0619                     	;# 
  8549  061A                     	;# 
  8550  061B                     	;# 
  8551  061C                     	;# 
  8552  061C                     	;# 
  8553  061F                     	;# 
  8554  0691                     	;# 
  8555  0692                     	;# 
  8556  0693                     	;# 
  8557  0694                     	;# 
  8558  0695                     	;# 
  8559  0696                     	;# 
  8560  0697                     	;# 
  8561  0698                     	;# 
  8562  0699                     	;# 
  8563  0711                     	;# 
  8564  0712                     	;# 
  8565  0713                     	;# 
  8566  0714                     	;# 
  8567  0715                     	;# 
  8568  0716                     	;# 
  8569  0717                     	;# 
  8570  0718                     	;# 
  8571  0719                     	;# 
  8572  0891                     	;# 
  8573  0891                     	;# 
  8574  0891                     	;# 
  8575  0891                     	;# 
  8576  0891                     	;# 
  8577  0891                     	;# 
  8578  0892                     	;# 
  8579  0892                     	;# 
  8580  0892                     	;# 
  8581  0893                     	;# 
  8582  0893                     	;# 
  8583  0893                     	;# 
  8584  0893                     	;# 
  8585  0893                     	;# 
  8586  0893                     	;# 
  8587  0894                     	;# 
  8588  0894                     	;# 
  8589  0894                     	;# 
  8590  0895                     	;# 
  8591  0895                     	;# 
  8592  0895                     	;# 
  8593  0896                     	;# 
  8594  0896                     	;# 
  8595  0896                     	;# 
  8596  089B                     	;# 
  8597  0911                     	;# 
  8598  0912                     	;# 
  8599  0913                     	;# 
  8600  0914                     	;# 
  8601  0915                     	;# 
  8602  0916                     	;# 
  8603  0918                     	;# 
  8604  0919                     	;# 
  8605  091A                     	;# 
  8606  091B                     	;# 
  8607  091C                     	;# 
  8608  091D                     	;# 
  8609  091E                     	;# 
  8610  091F                     	;# 
  8611  0E0F                     	;# 
  8612  0E10                     	;# 
  8613  0E11                     	;# 
  8614  0E12                     	;# 
  8615  0E13                     	;# 
  8616  0E14                     	;# 
  8617  0E15                     	;# 
  8618  0E16                     	;# 
  8619  0E17                     	;# 
  8620  0E18                     	;# 
  8621  0E19                     	;# 
  8622  0E1A                     	;# 
  8623  0E1B                     	;# 
  8624  0E1C                     	;# 
  8625  0E1D                     	;# 
  8626  0E1E                     	;# 
  8627  0E1F                     	;# 
  8628  0E20                     	;# 
  8629  0E21                     	;# 
  8630  0E22                     	;# 
  8631  0E24                     	;# 
  8632  0E25                     	;# 
  8633  0E28                     	;# 
  8634  0E29                     	;# 
  8635  0E2A                     	;# 
  8636  0E2B                     	;# 
  8637  0E2C                     	;# 
  8638  0E2D                     	;# 
  8639  0E2E                     	;# 
  8640  0E2F                     	;# 
  8641  0E90                     	;# 
  8642  0E91                     	;# 
  8643  0E92                     	;# 
  8644  0E94                     	;# 
  8645  0E95                     	;# 
  8646  0E9C                     	;# 
  8647  0E9D                     	;# 
  8648  0E9E                     	;# 
  8649  0E9F                     	;# 
  8650  0EA0                     	;# 
  8651  0EA1                     	;# 
  8652  0EA2                     	;# 
  8653  0EA3                     	;# 
  8654  0EA4                     	;# 
  8655  0EA5                     	;# 
  8656  0EA6                     	;# 
  8657  0EA7                     	;# 
  8658  0F0F                     	;# 
  8659  0F10                     	;# 
  8660  0F11                     	;# 
  8661  0F12                     	;# 
  8662  0F13                     	;# 
  8663  0F14                     	;# 
  8664  0F15                     	;# 
  8665  0F16                     	;# 
  8666  0F17                     	;# 
  8667  0F18                     	;# 
  8668  0F19                     	;# 
  8669  0F1A                     	;# 
  8670  0F1B                     	;# 
  8671  0F1C                     	;# 
  8672  0F1D                     	;# 
  8673  0F1E                     	;# 
  8674  0F1F                     	;# 
  8675  0F20                     	;# 
  8676  0F21                     	;# 
  8677  0F22                     	;# 
  8678  0F23                     	;# 
  8679  0F24                     	;# 
  8680  0F25                     	;# 
  8681  0F26                     	;# 
  8682  0F27                     	;# 
  8683  0F28                     	;# 
  8684  0F29                     	;# 
  8685  0F2A                     	;# 
  8686  0F2B                     	;# 
  8687  0F2C                     	;# 
  8688  0F2D                     	;# 
  8689  0F2E                     	;# 
  8690  0F2F                     	;# 
  8691  0F30                     	;# 
  8692  0F31                     	;# 
  8693  0F32                     	;# 
  8694  0F33                     	;# 
  8695  0F34                     	;# 
  8696  0F35                     	;# 
  8697  0F36                     	;# 
  8698  0F37                     	;# 
  8699  0FE4                     	;# 
  8700  0FE5                     	;# 
  8701  0FE6                     	;# 
  8702  0FE7                     	;# 
  8703  0FE8                     	;# 
  8704  0FE9                     	;# 
  8705  0FEA                     	;# 
  8706  0FEB                     	;# 
  8707  0FED                     	;# 
  8708  0FEE                     	;# 
  8709  0FEF                     	;# 
  8710  0000                     	;# 
  8711  0001                     	;# 
  8712  0002                     	;# 
  8713  0003                     	;# 
  8714  0004                     	;# 
  8715  0005                     	;# 
  8716  0006                     	;# 
  8717  0007                     	;# 
  8718  0008                     	;# 
  8719  0009                     	;# 
  8720  000A                     	;# 
  8721  000B                     	;# 
  8722  000C                     	;# 
  8723  000D                     	;# 
  8724  000E                     	;# 
  8725  0010                     	;# 
  8726  0011                     	;# 
  8727  0012                     	;# 
  8728  0013                     	;# 
  8729  0014                     	;# 
  8730  0015                     	;# 
  8731  0015                     	;# 
  8732  0016                     	;# 
  8733  0016                     	;# 
  8734  0017                     	;# 
  8735  0018                     	;# 
  8736  0019                     	;# 
  8737  0019                     	;# 
  8738  001A                     	;# 
  8739  001B                     	;# 
  8740  001C                     	;# 
  8741  001D                     	;# 
  8742  001E                     	;# 
  8743  001F                     	;# 
  8744  008C                     	;# 
  8745  008D                     	;# 
  8746  008E                     	;# 
  8747  0090                     	;# 
  8748  0091                     	;# 
  8749  0092                     	;# 
  8750  0093                     	;# 
  8751  0094                     	;# 
  8752  0097                     	;# 
  8753  009B                     	;# 
  8754  009B                     	;# 
  8755  009C                     	;# 
  8756  009D                     	;# 
  8757  009E                     	;# 
  8758  009F                     	;# 
  8759  010C                     	;# 
  8760  010D                     	;# 
  8761  010E                     	;# 
  8762  0111                     	;# 
  8763  0112                     	;# 
  8764  0113                     	;# 
  8765  0114                     	;# 
  8766  0115                     	;# 
  8767  0116                     	;# 
  8768  0117                     	;# 
  8769  0118                     	;# 
  8770  0119                     	;# 
  8771  018C                     	;# 
  8772  018D                     	;# 
  8773  018E                     	;# 
  8774  0199                     	;# 
  8775  0199                     	;# 
  8776  0199                     	;# 
  8777  019A                     	;# 
  8778  019A                     	;# 
  8779  019A                     	;# 
  8780  019B                     	;# 
  8781  019B                     	;# 
  8782  019B                     	;# 
  8783  019B                     	;# 
  8784  019B                     	;# 
  8785  019C                     	;# 
  8786  019C                     	;# 
  8787  019C                     	;# 
  8788  019D                     	;# 
  8789  019D                     	;# 
  8790  019D                     	;# 
  8791  019E                     	;# 
  8792  019E                     	;# 
  8793  019E                     	;# 
  8794  019F                     	;# 
  8795  019F                     	;# 
  8796  019F                     	;# 
  8797  019F                     	;# 
  8798  019F                     	;# 
  8799  020C                     	;# 
  8800  020D                     	;# 
  8801  020E                     	;# 
  8802  0211                     	;# 
  8803  0211                     	;# 
  8804  0212                     	;# 
  8805  0212                     	;# 
  8806  0213                     	;# 
  8807  0213                     	;# 
  8808  0214                     	;# 
  8809  0214                     	;# 
  8810  0215                     	;# 
  8811  0215                     	;# 
  8812  0215                     	;# 
  8813  0215                     	;# 
  8814  0216                     	;# 
  8815  0216                     	;# 
  8816  0217                     	;# 
  8817  0217                     	;# 
  8818  0219                     	;# 
  8819  021A                     	;# 
  8820  021B                     	;# 
  8821  021C                     	;# 
  8822  021D                     	;# 
  8823  021D                     	;# 
  8824  021E                     	;# 
  8825  021F                     	;# 
  8826  028C                     	;# 
  8827  028D                     	;# 
  8828  028E                     	;# 
  8829  0291                     	;# 
  8830  0291                     	;# 
  8831  0292                     	;# 
  8832  0293                     	;# 
  8833  0294                     	;# 
  8834  0295                     	;# 
  8835  0295                     	;# 
  8836  0296                     	;# 
  8837  0297                     	;# 
  8838  0298                     	;# 
  8839  029F                     	;# 
  8840  030C                     	;# 
  8841  030D                     	;# 
  8842  030E                     	;# 
  8843  0311                     	;# 
  8844  0311                     	;# 
  8845  0312                     	;# 
  8846  0313                     	;# 
  8847  0314                     	;# 
  8848  0315                     	;# 
  8849  0315                     	;# 
  8850  0316                     	;# 
  8851  0317                     	;# 
  8852  0318                     	;# 
  8853  038C                     	;# 
  8854  038D                     	;# 
  8855  038E                     	;# 
  8856  0391                     	;# 
  8857  0392                     	;# 
  8858  0393                     	;# 
  8859  0394                     	;# 
  8860  0395                     	;# 
  8861  0396                     	;# 
  8862  0397                     	;# 
  8863  0398                     	;# 
  8864  0399                     	;# 
  8865  039A                     	;# 
  8866  039C                     	;# 
  8867  039D                     	;# 
  8868  039E                     	;# 
  8869  039F                     	;# 
  8870  0411                     	;# 
  8871  0411                     	;# 
  8872  0412                     	;# 
  8873  0413                     	;# 
  8874  0414                     	;# 
  8875  0415                     	;# 
  8876  0416                     	;# 
  8877  0417                     	;# 
  8878  0418                     	;# 
  8879  0418                     	;# 
  8880  0419                     	;# 
  8881  041A                     	;# 
  8882  041B                     	;# 
  8883  041C                     	;# 
  8884  041D                     	;# 
  8885  041E                     	;# 
  8886  041F                     	;# 
  8887  0498                     	;# 
  8888  0498                     	;# 
  8889  0499                     	;# 
  8890  049A                     	;# 
  8891  049B                     	;# 
  8892  049B                     	;# 
  8893  049C                     	;# 
  8894  049D                     	;# 
  8895  049E                     	;# 
  8896  049F                     	;# 
  8897  0617                     	;# 
  8898  0618                     	;# 
  8899  0619                     	;# 
  8900  0619                     	;# 
  8901  061A                     	;# 
  8902  061B                     	;# 
  8903  061C                     	;# 
  8904  061C                     	;# 
  8905  061F                     	;# 
  8906  0691                     	;# 
  8907  0692                     	;# 
  8908  0693                     	;# 
  8909  0694                     	;# 
  8910  0695                     	;# 
  8911  0696                     	;# 
  8912  0697                     	;# 
  8913  0698                     	;# 
  8914  0699                     	;# 
  8915  0711                     	;# 
  8916  0712                     	;# 
  8917  0713                     	;# 
  8918  0714                     	;# 
  8919  0715                     	;# 
  8920  0716                     	;# 
  8921  0717                     	;# 
  8922  0718                     	;# 
  8923  0719                     	;# 
  8924  0891                     	;# 
  8925  0891                     	;# 
  8926  0891                     	;# 
  8927  0891                     	;# 
  8928  0891                     	;# 
  8929  0891                     	;# 
  8930  0892                     	;# 
  8931  0892                     	;# 
  8932  0892                     	;# 
  8933  0893                     	;# 
  8934  0893                     	;# 
  8935  0893                     	;# 
  8936  0893                     	;# 
  8937  0893                     	;# 
  8938  0893                     	;# 
  8939  0894                     	;# 
  8940  0894                     	;# 
  8941  0894                     	;# 
  8942  0895                     	;# 
  8943  0895                     	;# 
  8944  0895                     	;# 
  8945  0896                     	;# 
  8946  0896                     	;# 
  8947  0896                     	;# 
  8948  089B                     	;# 
  8949  0911                     	;# 
  8950  0912                     	;# 
  8951  0913                     	;# 
  8952  0914                     	;# 
  8953  0915                     	;# 
  8954  0916                     	;# 
  8955  0918                     	;# 
  8956  0919                     	;# 
  8957  091A                     	;# 
  8958  091B                     	;# 
  8959  091C                     	;# 
  8960  091D                     	;# 
  8961  091E                     	;# 
  8962  091F                     	;# 
  8963  0E0F                     	;# 
  8964  0E10                     	;# 
  8965  0E11                     	;# 
  8966  0E12                     	;# 
  8967  0E13                     	;# 
  8968  0E14                     	;# 
  8969  0E15                     	;# 
  8970  0E16                     	;# 
  8971  0E17                     	;# 
  8972  0E18                     	;# 
  8973  0E19                     	;# 
  8974  0E1A                     	;# 
  8975  0E1B                     	;# 
  8976  0E1C                     	;# 
  8977  0E1D                     	;# 
  8978  0E1E                     	;# 
  8979  0E1F                     	;# 
  8980  0E20                     	;# 
  8981  0E21                     	;# 
  8982  0E22                     	;# 
  8983  0E24                     	;# 
  8984  0E25                     	;# 
  8985  0E28                     	;# 
  8986  0E29                     	;# 
  8987  0E2A                     	;# 
  8988  0E2B                     	;# 
  8989  0E2C                     	;# 
  8990  0E2D                     	;# 
  8991  0E2E                     	;# 
  8992  0E2F                     	;# 
  8993  0E90                     	;# 
  8994  0E91                     	;# 
  8995  0E92                     	;# 
  8996  0E94                     	;# 
  8997  0E95                     	;# 
  8998  0E9C                     	;# 
  8999  0E9D                     	;# 
  9000  0E9E                     	;# 
  9001  0E9F                     	;# 
  9002  0EA0                     	;# 
  9003  0EA1                     	;# 
  9004  0EA2                     	;# 
  9005  0EA3                     	;# 
  9006  0EA4                     	;# 
  9007  0EA5                     	;# 
  9008  0EA6                     	;# 
  9009  0EA7                     	;# 
  9010  0F0F                     	;# 
  9011  0F10                     	;# 
  9012  0F11                     	;# 
  9013  0F12                     	;# 
  9014  0F13                     	;# 
  9015  0F14                     	;# 
  9016  0F15                     	;# 
  9017  0F16                     	;# 
  9018  0F17                     	;# 
  9019  0F18                     	;# 
  9020  0F19                     	;# 
  9021  0F1A                     	;# 
  9022  0F1B                     	;# 
  9023  0F1C                     	;# 
  9024  0F1D                     	;# 
  9025  0F1E                     	;# 
  9026  0F1F                     	;# 
  9027  0F20                     	;# 
  9028  0F21                     	;# 
  9029  0F22                     	;# 
  9030  0F23                     	;# 
  9031  0F24                     	;# 
  9032  0F25                     	;# 
  9033  0F26                     	;# 
  9034  0F27                     	;# 
  9035  0F28                     	;# 
  9036  0F29                     	;# 
  9037  0F2A                     	;# 
  9038  0F2B                     	;# 
  9039  0F2C                     	;# 
  9040  0F2D                     	;# 
  9041  0F2E                     	;# 
  9042  0F2F                     	;# 
  9043  0F30                     	;# 
  9044  0F31                     	;# 
  9045  0F32                     	;# 
  9046  0F33                     	;# 
  9047  0F34                     	;# 
  9048  0F35                     	;# 
  9049  0F36                     	;# 
  9050  0F37                     	;# 
  9051  0FE4                     	;# 
  9052  0FE5                     	;# 
  9053  0FE6                     	;# 
  9054  0FE7                     	;# 
  9055  0FE8                     	;# 
  9056  0FE9                     	;# 
  9057  0FEA                     	;# 
  9058  0FEB                     	;# 
  9059  0FED                     	;# 
  9060  0FEE                     	;# 
  9061  0FEF                     	;_asciiCharTableLookup
  9062                           
  9063 ;; Function _menu_Exit is unused but had its address taken
  9064  0000                     
  9065 ;; Function _flashy_Exit is unused but had its address taken
  9066  0000                     
  9067 ;; Function _locked_Exit is unused but had its address taken
  9068  0000                     
  9069 ;; Function _secret_Exit is unused but had its address taken
  9070  0000                     
  9071 ;; Function _slot_Exit is unused but had its address taken
  9072  0000                     
  9073 ;; Function _matrix_Exit is unused but had its address taken
  9074  0000                     
  9075                           	psect	idataBANK1
  9076  35AB                     __pidataBANK1:	
  9077                           
  9078                           ;initializer for _locked_locking_leds
  9079  35AB  3400               	retlw	0
  9080  35AC  3400               	retlw	0
  9081  35AD  3420               	retlw	32
  9082  35AE  3400               	retlw	0
  9083  35AF  3460               	retlw	96
  9084  35B0  3400               	retlw	0
  9085  35B1  34E0               	retlw	224
  9086  35B2  3400               	retlw	0
  9087  35B3  34E0               	retlw	224
  9088  35B4  3401               	retlw	1
  9089  35B5  34E0               	retlw	224
  9090  35B6  3403               	retlw	3
  9091                           
  9092                           ;initializer for _randx
  9093  35B7  3401               	retlw	1
  9094  35B8  3400               	retlw	0
  9095  35B9  3400               	retlw	0
  9096  35BA  3400               	retlw	0
  9097                           
  9098                           ;initializer for _Leds_idx
  9099  35BB  3401               	retlw	1
  9100  35BC  3400               	retlw	0
  9101                           
  9102                           ;initializer for _locked_lock_base_leds
  9103  35BD  341F               	retlw	31
  9104  35BE  34F8               	retlw	248
  9105                           
  9106                           ;initializer for _FLASHY_TEXT_SECRET_TEST
  9107  35BF  3445               	retlw	low (STR_10| (0+32768))
  9108  35C0  34BA               	retlw	high (STR_10| (0+32768))
  9109                           
  9110                           	psect	idataBANK2
  9111  0002                     __pidataBANK2:	
  9112                           
  9113                           ;initializer for _FLASHY_TEXT
  9114  0002  34EA               	retlw	low (STR_9| (0+32768))
  9115  0003  34BB               	retlw	high (STR_9| (0+32768))
  9116                           
  9117                           	psect	idataBANK3
  9118  3629                     __pidataBANK3:	
  9119                           
  9120                           ;initializer for _Shot_Options
  9121  3629  34D1               	retlw	low (STR_46| (0+32768))
  9122  362A  34BB               	retlw	high (STR_46| (0+32768))
  9123  362B  34C7               	retlw	low (STR_47| (0+32768))
  9124  362C  34BB               	retlw	high (STR_47| (0+32768))
  9125  362D  34AE               	retlw	low (STR_48| (0+32768))
  9126  362E  34BB               	retlw	high (STR_48| (0+32768))
  9127  362F  34D6               	retlw	low (STR_49| (0+32768))
  9128  3630  34BB               	retlw	high (STR_49| (0+32768))
  9129  3631  34B3               	retlw	low (STR_50| (0+32768))
  9130  3632  34BB               	retlw	high (STR_50| (0+32768))
  9131  3633  34BD               	retlw	low (STR_51| (0+32768))
  9132  3634  34BB               	retlw	high (STR_51| (0+32768))
  9133  3635  34C2               	retlw	low (STR_52| (0+32768))
  9134  3636  34BB               	retlw	high (STR_52| (0+32768))
  9135  3637  34B8               	retlw	low (STR_53| (0+32768))
  9136  3638  34BB               	retlw	high (STR_53| (0+32768))
  9137  3639  34CC               	retlw	low (STR_54| (0+32768))
  9138  363A  34BB               	retlw	high (STR_54| (0+32768))
  9139                           
  9140                           ;initializer for marquee@F14099
  9141  363B  3420               	retlw	32
  9142  363C  3420               	retlw	32
  9143  363D  3420               	retlw	32
  9144  363E  3420               	retlw	32
  9145  363F  3400               	retlw	0
  9146                           
  9147                           ;initializer for marquee_speedy@F14090
  9148  3640  3420               	retlw	32
  9149  3641  3420               	retlw	32
  9150  3642  3420               	retlw	32
  9151  3643  3420               	retlw	32
  9152  3644  3400               	retlw	0
  9153                           
  9154                           	psect	idataBANK4
  9155  2BC1                     __pidataBANK4:	
  9156                           
  9157                           ;initializer for _menu_options_leds
  9158  2BC1  3400               	retlw	0
  9159  2BC2  3402               	retlw	2
  9160  2BC3  3400               	retlw	0
  9161  2BC4  3401               	retlw	1
  9162  2BC5  3480               	retlw	128
  9163  2BC6  3400               	retlw	0
  9164  2BC7  3440               	retlw	64
  9165  2BC8  3400               	retlw	0
  9166  2BC9  3420               	retlw	32
  9167  2BCA  3400               	retlw	0
  9168                           
  9169                           ;initializer for _menu_option
  9170  2BCB  34EF               	retlw	low (STR_4| (0+32768))
  9171  2BCC  34BB               	retlw	high (STR_4| (0+32768))
  9172  2BCD  34A3               	retlw	low (STR_5| (0+32768))
  9173  2BCE  34BB               	retlw	high (STR_5| (0+32768))
  9174  2BCF  34F7               	retlw	low (STR_6| (0+32768))
  9175  2BD0  34BA               	retlw	high (STR_6| (0+32768))
  9176  2BD1  3466               	retlw	low (STR_7| (0+32768))
  9177  2BD2  34BB               	retlw	high (STR_7| (0+32768))
  9178  2BD3  349D               	retlw	low (STR_8| (0+32768))
  9179  2BD4  34BB               	retlw	high (STR_8| (0+32768))
  9180                           
  9181                           ;initializer for _matrix_secret_inputs
  9182  2BD5  3401               	retlw	1
  9183  2BD6  3408               	retlw	8
  9184  2BD7  3402               	retlw	2
  9185  2BD8  3404               	retlw	4
  9186  2BD9  3405               	retlw	5
  9187  2BDA  3409               	retlw	9
  9188  2BDB  3403               	retlw	3
  9189  2BDC  3400               	retlw	0
  9190  2BDD  3400               	retlw	0
  9191  2BDE  3400               	retlw	0
  9192  2BDF  3400               	retlw	0
  9193  2BE0  3400               	retlw	0
  9194  2BE1  3400               	retlw	0
  9195  2BE2  3400               	retlw	0
  9196  2BE3  3400               	retlw	0
  9197  2BE4  3400               	retlw	0
  9198  2BE5  3400               	retlw	0
  9199  2BE6  3400               	retlw	0
  9200  2BE7  3400               	retlw	0
  9201  2BE8  3400               	retlw	0
  9202  2BE9  3400               	retlw	0
  9203  2BEA  3400               	retlw	0
  9204  2BEB  34C5               	retlw	low (_secret_value| 0)
  9205  2BEC  3401               	retlw	1
  9206  2BED  3400               	retlw	0
  9207                           
  9208                           ;initializer for _secret_inputs
  9209  2BEE  3401               	retlw	1
  9210  2BEF  3401               	retlw	1
  9211  2BF0  3402               	retlw	2
  9212  2BF1  3402               	retlw	2
  9213  2BF2  3401               	retlw	1
  9214  2BF3  3402               	retlw	2
  9215  2BF4  3401               	retlw	1
  9216  2BF5  3402               	retlw	2
  9217  2BF6  3404               	retlw	4
  9218  2BF7  3408               	retlw	8
  9219  2BF8  3400               	retlw	0
  9220  2BF9  3400               	retlw	0
  9221  2BFA  3400               	retlw	0
  9222  2BFB  3400               	retlw	0
  9223  2BFC  3400               	retlw	0
  9224  2BFD  3400               	retlw	0
  9225  2BFE  3400               	retlw	0
  9226  2BFF  3400               	retlw	0
  9227  2C00  3400               	retlw	0
  9228  2C01  3400               	retlw	0
  9229  2C02  3400               	retlw	0
  9230  2C03  3400               	retlw	0
  9231  2C04  34C5               	retlw	low (_secret_value| 0)
  9232  2C05  3401               	retlw	1
  9233  2C06  3400               	retlw	0
  9234                           
  9235                           	psect	idataBANK5
  9236  2002                     __pidataBANK5:	
  9237                           
  9238                           ;initializer for _matrix_option
  9239  2002  348A               	retlw	low (STR_70| (0+32768))
  9240  2003  34BB               	retlw	high (STR_70| (0+32768))
  9241  2004  3475               	retlw	low (STR_71| (0+32768))
  9242  2005  34BB               	retlw	high (STR_71| (0+32768))
  9243  2006  3401               	retlw	low (STR_72| (0+32768))
  9244  2007  34BB               	retlw	high (STR_72| (0+32768))
  9245  2008  347C               	retlw	low (STR_73| (0+32768))
  9246  2009  34BB               	retlw	high (STR_73| (0+32768))
  9247  200A  34A9               	retlw	low (STR_74| (0+32768))
  9248  200B  34BB               	retlw	high (STR_74| (0+32768))
  9249  200C  34ED               	retlw	low (STR_75| (0+32768))
  9250  200D  34BA               	retlw	high (STR_75| (0+32768))
  9251  200E  3491               	retlw	low (STR_76| (0+32768))
  9252  200F  34BB               	retlw	high (STR_76| (0+32768))
  9253  2010  342E               	retlw	low (STR_77| (0+32768))
  9254  2011  34BB               	retlw	high (STR_77| (0+32768))
  9255  2012  3483               	retlw	low (STR_78| (0+32768))
  9256  2013  34BB               	retlw	high (STR_78| (0+32768))
  9257  2014  3436               	retlw	low (STR_79| (0+32768))
  9258  2015  34BB               	retlw	high (STR_79| (0+32768))
  9259                           
  9260                           ;initializer for _Shot_Options_Long
  9261  2016  344E               	retlw	low (STR_55| (0+32768))
  9262  2017  34BB               	retlw	high (STR_55| (0+32768))
  9263  2018  3446               	retlw	low (STR_56| (0+32768))
  9264  2019  34BB               	retlw	high (STR_56| (0+32768))
  9265  201A  340A               	retlw	low (STR_57| (0+32768))
  9266  201B  34BB               	retlw	high (STR_57| (0+32768))
  9267  201C  34E2               	retlw	low (STR_58| (0+32768))
  9268  201D  34BA               	retlw	high (STR_58| (0+32768))
  9269  201E  34D7               	retlw	low (STR_59| (0+32768))
  9270  201F  34BA               	retlw	high (STR_59| (0+32768))
  9271  2020  343E               	retlw	low (STR_60| (0+32768))
  9272  2021  34BB               	retlw	high (STR_60| (0+32768))
  9273  2022  34BF               	retlw	low (STR_61| (0+32768))
  9274  2023  34BA               	retlw	high (STR_61| (0+32768))
  9275  2024  3498               	retlw	low (STR_62| (0+32768))
  9276  2025  34BA               	retlw	high (STR_62| (0+32768))
  9277  2026  3413               	retlw	low (STR_63| (0+32768))
  9278  2027  34BB               	retlw	high (STR_63| (0+32768))
  9279                           
  9280                           	psect	idataBANK6
  9281  2919                     __pidataBANK6:	
  9282                           
  9283                           ;initializer for _Slot_Wheel
  9284  2919  3441               	retlw	65
  9285  291A  3442               	retlw	66
  9286  291B  3443               	retlw	67
  9287  291C  3444               	retlw	68
  9288  291D  3445               	retlw	69
  9289  291E  3446               	retlw	70
  9290  291F  3447               	retlw	71
  9291  2920  3448               	retlw	72
  9292  2921  3449               	retlw	73
  9293  2922  344A               	retlw	74
  9294  2923  344B               	retlw	75
  9295  2924  344C               	retlw	76
  9296  2925  344D               	retlw	77
  9297  2926  344E               	retlw	78
  9298  2927  344F               	retlw	79
  9299  2928  3450               	retlw	80
  9300  2929  3451               	retlw	81
  9301  292A  3452               	retlw	82
  9302  292B  3453               	retlw	83
  9303  292C  3454               	retlw	84
  9304  292D  3455               	retlw	85
  9305  292E  3456               	retlw	86
  9306  292F  3457               	retlw	87
  9307  2930  3458               	retlw	88
  9308  2931  3459               	retlw	89
  9309  2932  345A               	retlw	90
  9310  2933  3430               	retlw	48
  9311  2934  3431               	retlw	49
  9312  2935  3432               	retlw	50
  9313  2936  3433               	retlw	51
  9314  2937  3434               	retlw	52
  9315  2938  3435               	retlw	53
  9316  2939  3436               	retlw	54
  9317  293A  3437               	retlw	55
  9318  293B  3438               	retlw	56
  9319  293C  3439               	retlw	57
  9320  293D  343C               	retlw	60
  9321  293E  343E               	retlw	62
  9322  293F  3421               	retlw	33
  9323  2940  3424               	retlw	36
  9324  2941  3425               	retlw	37
  9325  2942  3426               	retlw	38
  9326  2943  342D               	retlw	45
  9327  2944  3423               	retlw	35
  9328  2945  342A               	retlw	42
  9329  2946  342B               	retlw	43
  9330  2947  342D               	retlw	45
  9331  2948  342E               	retlw	46
  9332  2949  3440               	retlw	64
  9333  294A  343B               	retlw	59
  9334  294B  343A               	retlw	58
  9335  294C  3427               	retlw	39
  9336  294D  3422               	retlw	34
  9337  294E  342F               	retlw	47
  9338  294F  345C               	retlw	92
  9339                           
  9340                           	psect	idataBANK7
  9341  2988                     __pidataBANK7:	
  9342                           
  9343                           ;initializer for _roundabout_leds_inverse
  9344  2988  3480               	retlw	128
  9345  2989  3400               	retlw	0
  9346  298A  3440               	retlw	64
  9347  298B  3400               	retlw	0
  9348  298C  3420               	retlw	32
  9349  298D  3400               	retlw	0
  9350  298E  3410               	retlw	16
  9351  298F  3400               	retlw	0
  9352  2990  3408               	retlw	8
  9353  2991  3400               	retlw	0
  9354  2992  3404               	retlw	4
  9355  2993  3400               	retlw	0
  9356  2994  3402               	retlw	2
  9357  2995  3400               	retlw	0
  9358  2996  3401               	retlw	1
  9359  2997  3400               	retlw	0
  9360  2998  3402               	retlw	2
  9361  2999  3400               	retlw	0
  9362  299A  3404               	retlw	4
  9363  299B  3400               	retlw	0
  9364  299C  3408               	retlw	8
  9365  299D  3400               	retlw	0
  9366  299E  3410               	retlw	16
  9367  299F  3400               	retlw	0
  9368  29A0  3420               	retlw	32
  9369  29A1  3400               	retlw	0
  9370  29A2  3440               	retlw	64
  9371  29A3  3400               	retlw	0
  9372                           
  9373                           ;initializer for _roundabout_leds
  9374  29A4  3480               	retlw	128
  9375  29A5  3400               	retlw	0
  9376  29A6  3400               	retlw	0
  9377  29A7  3401               	retlw	1
  9378  29A8  3400               	retlw	0
  9379  29A9  3402               	retlw	2
  9380  29AA  3400               	retlw	0
  9381  29AB  3408               	retlw	8
  9382  29AC  3400               	retlw	0
  9383  29AD  3410               	retlw	16
  9384  29AE  3400               	retlw	0
  9385  29AF  3420               	retlw	32
  9386  29B0  3400               	retlw	0
  9387  29B1  3440               	retlw	64
  9388  29B2  3400               	retlw	0
  9389  29B3  3480               	retlw	128
  9390  29B4  3400               	retlw	0
  9391  29B5  3440               	retlw	64
  9392  29B6  3400               	retlw	0
  9393  29B7  3420               	retlw	32
  9394  29B8  3400               	retlw	0
  9395  29B9  3410               	retlw	16
  9396  29BA  3400               	retlw	0
  9397  29BB  3408               	retlw	8
  9398  29BC  3400               	retlw	0
  9399  29BD  3402               	retlw	2
  9400  29BE  3400               	retlw	0
  9401  29BF  3401               	retlw	1
  9402                           
  9403                           	psect	idataBANK8
  9404  2950                     __pidataBANK8:	
  9405                           
  9406                           ;initializer for _curtain_leds_inverse
  9407  2950  3480               	retlw	128
  9408  2951  3400               	retlw	0
  9409  2952  34C0               	retlw	192
  9410  2953  3400               	retlw	0
  9411  2954  34E0               	retlw	224
  9412  2955  3400               	retlw	0
  9413  2956  34F0               	retlw	240
  9414  2957  3400               	retlw	0
  9415  2958  34F8               	retlw	248
  9416  2959  3400               	retlw	0
  9417  295A  34FC               	retlw	252
  9418  295B  3400               	retlw	0
  9419  295C  34FE               	retlw	254
  9420  295D  3400               	retlw	0
  9421  295E  34FF               	retlw	255
  9422  295F  3400               	retlw	0
  9423  2960  34FE               	retlw	254
  9424  2961  3400               	retlw	0
  9425  2962  34FC               	retlw	252
  9426  2963  3400               	retlw	0
  9427  2964  34F8               	retlw	248
  9428  2965  3400               	retlw	0
  9429  2966  34F0               	retlw	240
  9430  2967  3400               	retlw	0
  9431  2968  34E0               	retlw	224
  9432  2969  3400               	retlw	0
  9433  296A  34C0               	retlw	192
  9434  296B  3400               	retlw	0
  9435                           
  9436                           ;initializer for _curtain_leds
  9437  296C  3480               	retlw	128
  9438  296D  3400               	retlw	0
  9439  296E  3480               	retlw	128
  9440  296F  3401               	retlw	1
  9441  2970  3480               	retlw	128
  9442  2971  3403               	retlw	3
  9443  2972  3480               	retlw	128
  9444  2973  340B               	retlw	11
  9445  2974  3480               	retlw	128
  9446  2975  341B               	retlw	27
  9447  2976  3480               	retlw	128
  9448  2977  343B               	retlw	59
  9449  2978  3480               	retlw	128
  9450  2979  347B               	retlw	123
  9451  297A  3480               	retlw	128
  9452  297B  34FB               	retlw	251
  9453  297C  3480               	retlw	128
  9454  297D  347B               	retlw	123
  9455  297E  3480               	retlw	128
  9456  297F  343B               	retlw	59
  9457  2980  3480               	retlw	128
  9458  2981  341B               	retlw	27
  9459  2982  3480               	retlw	128
  9460  2983  340B               	retlw	11
  9461  2984  3480               	retlw	128
  9462  2985  3403               	retlw	3
  9463  2986  3480               	retlw	128
  9464  2987  3401               	retlw	1
  9465                           
  9466                           	psect	idataBANK10
  9467  29F9                     __pidataBANK10:	
  9468                           
  9469                           ;initializer for _flashy_option
  9470  29F9  34EA               	retlw	low (STR_9| (0+32768))
  9471  29FA  34BB               	retlw	high (STR_9| (0+32768))
  9472  29FB  3425               	retlw	low (STR_12| (0+32768))
  9473  29FC  34BB               	retlw	high (STR_12| (0+32768))
  9474  29FD  345E               	retlw	low (STR_13| (0+32768))
  9475  29FE  34BB               	retlw	high (STR_13| (0+32768))
  9476  29FF  3497               	retlw	low (STR_14| (0+32768))
  9477  2A00  34BB               	retlw	high (STR_14| (0+32768))
  9478  2A01  3432               	retlw	low (STR_15| (0+32768))
  9479  2A02  34BA               	retlw	high (STR_15| (0+32768))
  9480  2A03  340A               	retlw	low (STR_16| (0+32768))
  9481  2A04  34BA               	retlw	high (STR_16| (0+32768))
  9482  2A05  34C3               	retlw	low (STR_17| (0+32768))
  9483  2A06  34B9               	retlw	high (STR_17| (0+32768))
  9484  2A07  3456               	retlw	low (STR_18| (0+32768))
  9485  2A08  34BB               	retlw	high (STR_18| (0+32768))
  9486  2A09  34F4               	retlw	low (STR_19| (0+32768))
  9487  2A0A  34B9               	retlw	high (STR_19| (0+32768))
  9488  2A0B  3471               	retlw	low (STR_20| (0+32768))
  9489  2A0C  34B9               	retlw	high (STR_20| (0+32768))
  9490  2A0D  34B0               	retlw	low (STR_21| (0+32768))
  9491  2A0E  34B8               	retlw	high (STR_21| (0+32768))
  9492  2A0F  3419               	retlw	low (STR_22| (0+32768))
  9493  2A10  34B9               	retlw	high (STR_22| (0+32768))
  9494  2A11  3454               	retlw	low (STR_23| (0+32768))
  9495  2A12  34B9               	retlw	high (STR_23| (0+32768))
  9496  2A13  34A8               	retlw	low (STR_24| (0+32768))
  9497  2A14  34B9               	retlw	high (STR_24| (0+32768))
  9498  2A15  3488               	retlw	low (STR_25| (0+32768))
  9499  2A16  34B8               	retlw	high (STR_25| (0+32768))
  9500  2A17  3457               	retlw	low (STR_26| (0+32768))
  9501  2A18  34BA               	retlw	high (STR_26| (0+32768))
  9502  2A19  341F               	retlw	low (STR_27| (0+32768))
  9503  2A1A  34BA               	retlw	high (STR_27| (0+32768))
  9504  2A1B  3437               	retlw	low (STR_28| (0+32768))
  9505  2A1C  34B9               	retlw	high (STR_28| (0+32768))
  9506  2A1D  34CB               	retlw	low (STR_29| (0+32768))
  9507  2A1E  34BA               	retlw	high (STR_29| (0+32768))
  9508  2A1F  3489               	retlw	low (STR_30| (0+32768))
  9509  2A20  34BA               	retlw	high (STR_30| (0+32768))
  9510  2A21  34D4               	retlw	low (STR_31| (0+32768))
  9511  2A22  34B8               	retlw	high (STR_31| (0+32768))
  9512  2A23  3479               	retlw	low (STR_32| (0+32768))
  9513  2A24  34BA               	retlw	high (STR_32| (0+32768))
  9514  2A25  34F7               	retlw	low (STR_33| (0+32768))
  9515  2A26  34B8               	retlw	high (STR_33| (0+32768))
  9516  2A27  340A               	retlw	low (STR_34| (0+32768))
  9517  2A28  34A8               	retlw	high (STR_34| (0+32768))
  9518  2A29  3468               	retlw	low (STR_35| (0+32768))
  9519  2A2A  34BA               	retlw	high (STR_35| (0+32768))
  9520  2A2B  3400               	retlw	low (STR_36| (0+32768))
  9521  2A2C  34B8               	retlw	high (STR_36| (0+32768))
  9522  2A2D  34B2               	retlw	low (STR_37| (0+32768))
  9523  2A2E  34BA               	retlw	high (STR_37| (0+32768))
  9524  2A2F  345D               	retlw	low (STR_38| (0+32768))
  9525  2A30  34B8               	retlw	high (STR_38| (0+32768))
  9526  2A31  347D               	retlw	low ((STR_34+115)| (0+32768))
  9527  2A32  34A8               	retlw	high ((STR_34+115)| (0+32768))
  9528                           
  9529                           	psect	idataBIGRAM
  9530  2543                     __pidataBIGRAM:	
  9531                           
  9532                           ;initializer for _asciiCharTableLookup
  9533  2543  3400               	retlw	0
  9534  2544  3400               	retlw	0
  9535  2545  3400               	retlw	0
  9536  2546  3420               	retlw	32
  9537  2547  3410               	retlw	16
  9538  2548  3410               	retlw	16
  9539  2549  3420               	retlw	32
  9540  254A  3400               	retlw	0
  9541  254B  3410               	retlw	16
  9542  254C  3410               	retlw	16
  9543  254D  34A5               	retlw	165
  9544  254E  3421               	retlw	33
  9545  254F  34A5               	retlw	165
  9546  2550  3460               	retlw	96
  9547  2551  3410               	retlw	16
  9548  2552  3430               	retlw	48
  9549  2553  3400               	retlw	0
  9550  2554  3412               	retlw	18
  9551  2555  3410               	retlw	16
  9552  2556  3408               	retlw	8
  9553  2557  3420               	retlw	32
  9554  2558  3420               	retlw	32
  9555  2559  3485               	retlw	133
  9556  255A  3445               	retlw	69
  9557  255B  34B1               	retlw	177
  9558  255C  3430               	retlw	48
  9559  255D  3410               	retlw	16
  9560  255E  3410               	retlw	16
  9561  255F  3410               	retlw	16
  9562  2560  3410               	retlw	16
  9563  2561  3410               	retlw	16
  9564  2562  3410               	retlw	16
  9565  2563  3410               	retlw	16
  9566  2564  3410               	retlw	16
  9567  2565  3410               	retlw	16
  9568  2566  3410               	retlw	16
  9569  2567  3410               	retlw	16
  9570  2568  3410               	retlw	16
  9571  2569  3410               	retlw	16
  9572  256A  3410               	retlw	16
  9573  256B  3410               	retlw	16
  9574  256C  3410               	retlw	16
  9575  256D  3410               	retlw	16
  9576  256E  3410               	retlw	16
  9577  256F  3410               	retlw	16
  9578  2570  3410               	retlw	16
  9579  2571  3410               	retlw	16
  9580  2572  3410               	retlw	16
  9581  2573  3410               	retlw	16
  9582  2574  3410               	retlw	16
  9583  2575  3410               	retlw	16
  9584  2576  3410               	retlw	16
  9585  2577  3410               	retlw	16
  9586  2578  3410               	retlw	16
  9587  2579  3410               	retlw	16
  9588  257A  3410               	retlw	16
  9589  257B  3410               	retlw	16
  9590  257C  3410               	retlw	16
  9591  257D  3410               	retlw	16
  9592  257E  3410               	retlw	16
  9593  257F  3410               	retlw	16
  9594  2580  3410               	retlw	16
  9595  2581  3410               	retlw	16
  9596  2582  3410               	retlw	16
  9597  2583  3400               	retlw	0
  9598  2584  3400               	retlw	0
  9599  2585  34C0               	retlw	192
  9600  2586  3440               	retlw	64
  9601  2587  3400               	retlw	0
  9602  2588  3444               	retlw	68
  9603  2589  3410               	retlw	16
  9604  258A  3410               	retlw	16
  9605  258B  34B4               	retlw	180
  9606  258C  3435               	retlw	53
  9607  258D  3410               	retlw	16
  9608  258E  3410               	retlw	16
  9609  258F  3410               	retlw	16
  9610  2590  3410               	retlw	16
  9611  2591  3400               	retlw	0
  9612  2592  3404               	retlw	4
  9613  2593  3408               	retlw	8
  9614  2594  3408               	retlw	8
  9615  2595  3402               	retlw	2
  9616  2596  3402               	retlw	2
  9617  2597  341E               	retlw	30
  9618  2598  341E               	retlw	30
  9619  2599  3414               	retlw	20
  9620  259A  3414               	retlw	20
  9621  259B  3440               	retlw	64
  9622  259C  3400               	retlw	0
  9623  259D  3410               	retlw	16
  9624  259E  3410               	retlw	16
  9625  259F  3440               	retlw	64
  9626  25A0  3400               	retlw	0
  9627  25A1  3402               	retlw	2
  9628  25A2  3408               	retlw	8
  9629  25A3  34A9               	retlw	169
  9630  25A4  3463               	retlw	99
  9631  25A5  3480               	retlw	128
  9632  25A6  3440               	retlw	64
  9633  25A7  3431               	retlw	49
  9634  25A8  3470               	retlw	112
  9635  25A9  34B0               	retlw	176
  9636  25AA  3460               	retlw	96
  9637  25AB  3490               	retlw	144
  9638  25AC  3451               	retlw	81
  9639  25AD  34B0               	retlw	176
  9640  25AE  3431               	retlw	49
  9641  25AF  34B1               	retlw	177
  9642  25B0  3431               	retlw	49
  9643  25B1  3480               	retlw	128
  9644  25B2  3460               	retlw	96
  9645  25B3  34B1               	retlw	177
  9646  25B4  3471               	retlw	113
  9647  25B5  3490               	retlw	144
  9648  25B6  3471               	retlw	113
  9649  25B7  3410               	retlw	16
  9650  25B8  3410               	retlw	16
  9651  25B9  3410               	retlw	16
  9652  25BA  3410               	retlw	16
  9653  25BB  3408               	retlw	8
  9654  25BC  3408               	retlw	8
  9655  25BD  3430               	retlw	48
  9656  25BE  3410               	retlw	16
  9657  25BF  3402               	retlw	2
  9658  25C0  3402               	retlw	2
  9659  25C1  3414               	retlw	20
  9660  25C2  34E1               	retlw	225
  9661  25C3  34A5               	retlw	165
  9662  25C4  3470               	retlw	112
  9663  25C5  3491               	retlw	145
  9664  25C6  3471               	retlw	113
  9665  25C7  34B1               	retlw	177
  9666  25C8  3411               	retlw	17
  9667  25C9  3421               	retlw	33
  9668  25CA  3421               	retlw	33
  9669  25CB  34B1               	retlw	177
  9670  25CC  3450               	retlw	80
  9671  25CD  3421               	retlw	33
  9672  25CE  3431               	retlw	49
  9673  25CF  3401               	retlw	1
  9674  25D0  3431               	retlw	49
  9675  25D1  34B1               	retlw	177
  9676  25D2  3421               	retlw	33
  9677  25D3  3491               	retlw	145
  9678  25D4  3451               	retlw	81
  9679  25D5  3424               	retlw	36
  9680  25D6  3424               	retlw	36
  9681  25D7  34A1               	retlw	161
  9682  25D8  3440               	retlw	64
  9683  25D9  3409               	retlw	9
  9684  25DA  3419               	retlw	25
  9685  25DB  3421               	retlw	33
  9686  25DC  3401               	retlw	1
  9687  25DD  3481               	retlw	129
  9688  25DE  344B               	retlw	75
  9689  25DF  3489               	retlw	137
  9690  25E0  3443               	retlw	67
  9691  25E1  34A1               	retlw	161
  9692  25E2  3461               	retlw	97
  9693  25E3  3411               	retlw	17
  9694  25E4  3471               	retlw	113
  9695  25E5  34A9               	retlw	169
  9696  25E6  3461               	retlw	97
  9697  25E7  3419               	retlw	25
  9698  25E8  3471               	retlw	113
  9699  25E9  34B0               	retlw	176
  9700  25EA  3431               	retlw	49
  9701  25EB  3404               	retlw	4
  9702  25EC  3424               	retlw	36
  9703  25ED  34A1               	retlw	161
  9704  25EE  3441               	retlw	65
  9705  25EF  3403               	retlw	3
  9706  25F0  3409               	retlw	9
  9707  25F1  348B               	retlw	139
  9708  25F2  3441               	retlw	65
  9709  25F3  340A               	retlw	10
  9710  25F4  340A               	retlw	10
  9711  25F5  3404               	retlw	4
  9712  25F6  340A               	retlw	10
  9713  25F7  3422               	retlw	34
  9714  25F8  3428               	retlw	40
  9715  25F9  3421               	retlw	33
  9716  25FA  3421               	retlw	33
  9717  25FB  3408               	retlw	8
  9718  25FC  3402               	retlw	2
  9719  25FD  340A               	retlw	10
  9720  25FE  3400               	retlw	0
  9721  25FF  3420               	retlw	32
  9722  2600  3400               	retlw	0
  9723  2601  3410               	retlw	16
  9724  2602  3410               	retlw	16
  9725  2603  3491               	retlw	145
  9726  2604  3471               	retlw	113
  9727  2605  34B1               	retlw	177
  9728  2606  3411               	retlw	17
  9729  2607  3431               	retlw	49
  9730  2608  3410               	retlw	16
  9731  2609  34B1               	retlw	177
  9732  260A  3450               	retlw	80
  9733  260B  3421               	retlw	33
  9734  260C  3431               	retlw	49
  9735  260D  3401               	retlw	1
  9736  260E  3431               	retlw	49
  9737  260F  34B1               	retlw	177
  9738  2610  3421               	retlw	33
  9739  2611  3491               	retlw	145
  9740  2612  3451               	retlw	81
  9741  2613  3424               	retlw	36
  9742  2614  3424               	retlw	36
  9743  2615  34A1               	retlw	161
  9744  2616  3440               	retlw	64
  9745  2617  3409               	retlw	9
  9746  2618  3419               	retlw	25
  9747  2619  3421               	retlw	33
  9748  261A  3401               	retlw	1
  9749  261B  3481               	retlw	129
  9750  261C  344B               	retlw	75
  9751  261D  3489               	retlw	137
  9752  261E  3443               	retlw	67
  9753  261F  34A1               	retlw	161
  9754  2620  3461               	retlw	97
  9755  2621  3411               	retlw	17
  9756  2622  3471               	retlw	113
  9757  2623  34A9               	retlw	169
  9758  2624  3461               	retlw	97
  9759  2625  3419               	retlw	25
  9760  2626  3471               	retlw	113
  9761  2627  34B0               	retlw	176
  9762  2628  3431               	retlw	49
  9763  2629  3404               	retlw	4
  9764  262A  3424               	retlw	36
  9765  262B  34A1               	retlw	161
  9766  262C  3441               	retlw	65
  9767  262D  3403               	retlw	3
  9768  262E  3409               	retlw	9
  9769  262F  348B               	retlw	139
  9770  2630  3441               	retlw	65
  9771  2631  340A               	retlw	10
  9772  2632  340A               	retlw	10
  9773  2633  3404               	retlw	4
  9774  2634  340A               	retlw	10
  9775  2635  3422               	retlw	34
  9776  2636  3428               	retlw	40
  9777  2637  3408               	retlw	8
  9778  2638  3408               	retlw	8
  9779  2639  3404               	retlw	4
  9780  263A  3404               	retlw	4
  9781  263B  3402               	retlw	2
  9782  263C  3402               	retlw	2
  9783  263D  3410               	retlw	16
  9784  263E  3410               	retlw	16
  9785  263F  34FF               	retlw	255
  9786  2640  34FF               	retlw	255
  9787  2641  3400               	retlw	0
  9788  2642  3400               	retlw	0
  9789                           
  9790                           	psect	stringtext1
  9791  1800                     __pstringtext1:	
  9792  1800                     _gamma_table_256x1k:	
  9793  1800  3400               	retlw	0
  9794  1801  3400               	retlw	0
  9795  1802  3400               	retlw	0
  9796  1803  3400               	retlw	0
  9797  1804  3400               	retlw	0
  9798  1805  3400               	retlw	0
  9799  1806  3400               	retlw	0
  9800  1807  3400               	retlw	0
  9801  1808  3400               	retlw	0
  9802  1809  3400               	retlw	0
  9803  180A  3400               	retlw	0
  9804  180B  3400               	retlw	0
  9805  180C  3400               	retlw	0
  9806  180D  3400               	retlw	0
  9807  180E  3400               	retlw	0
  9808  180F  3400               	retlw	0
  9809  1810  3400               	retlw	0
  9810  1811  3400               	retlw	0
  9811  1812  3400               	retlw	0
  9812  1813  3400               	retlw	0
  9813  1814  3400               	retlw	0
  9814  1815  3400               	retlw	0
  9815  1816  3400               	retlw	0
  9816  1817  3400               	retlw	0
  9817  1818  3400               	retlw	0
  9818  1819  3400               	retlw	0
  9819  181A  3400               	retlw	0
  9820  181B  3400               	retlw	0
  9821  181C  3400               	retlw	0
  9822  181D  3400               	retlw	0
  9823  181E  3401               	retlw	1
  9824  181F  3400               	retlw	0
  9825  1820  3401               	retlw	1
  9826  1821  3400               	retlw	0
  9827  1822  3401               	retlw	1
  9828  1823  3400               	retlw	0
  9829  1824  3401               	retlw	1
  9830  1825  3400               	retlw	0
  9831  1826  3401               	retlw	1
  9832  1827  3400               	retlw	0
  9833  1828  3401               	retlw	1
  9834  1829  3400               	retlw	0
  9835  182A  3402               	retlw	2
  9836  182B  3400               	retlw	0
  9837  182C  3402               	retlw	2
  9838  182D  3400               	retlw	0
  9839  182E  3402               	retlw	2
  9840  182F  3400               	retlw	0
  9841  1830  3403               	retlw	3
  9842  1831  3400               	retlw	0
  9843  1832  3403               	retlw	3
  9844  1833  3400               	retlw	0
  9845  1834  3403               	retlw	3
  9846  1835  3400               	retlw	0
  9847  1836  3404               	retlw	4
  9848  1837  3400               	retlw	0
  9849  1838  3404               	retlw	4
  9850  1839  3400               	retlw	0
  9851  183A  3404               	retlw	4
  9852  183B  3400               	retlw	0
  9853  183C  3405               	retlw	5
  9854  183D  3400               	retlw	0
  9855  183E  3405               	retlw	5
  9856  183F  3400               	retlw	0
  9857  1840  3406               	retlw	6
  9858  1841  3400               	retlw	0
  9859  1842  3406               	retlw	6
  9860  1843  3400               	retlw	0
  9861  1844  3407               	retlw	7
  9862  1845  3400               	retlw	0
  9863  1846  3407               	retlw	7
  9864  1847  3400               	retlw	0
  9865  1848  3408               	retlw	8
  9866  1849  3400               	retlw	0
  9867  184A  3408               	retlw	8
  9868  184B  3400               	retlw	0
  9869  184C  3409               	retlw	9
  9870  184D  3400               	retlw	0
  9871  184E  3409               	retlw	9
  9872  184F  3400               	retlw	0
  9873  1850  340A               	retlw	10
  9874  1851  3400               	retlw	0
  9875  1852  340B               	retlw	11
  9876  1853  3400               	retlw	0
  9877  1854  340B               	retlw	11
  9878  1855  3400               	retlw	0
  9879  1856  340C               	retlw	12
  9880  1857  3400               	retlw	0
  9881  1858  340D               	retlw	13
  9882  1859  3400               	retlw	0
  9883  185A  340E               	retlw	14
  9884  185B  3400               	retlw	0
  9885  185C  340E               	retlw	14
  9886  185D  3400               	retlw	0
  9887  185E  340F               	retlw	15
  9888  185F  3400               	retlw	0
  9889  1860  3410               	retlw	16
  9890  1861  3400               	retlw	0
  9891  1862  3411               	retlw	17
  9892  1863  3400               	retlw	0
  9893  1864  3412               	retlw	18
  9894  1865  3400               	retlw	0
  9895  1866  3413               	retlw	19
  9896  1867  3400               	retlw	0
  9897  1868  3413               	retlw	19
  9898  1869  3400               	retlw	0
  9899  186A  3414               	retlw	20
  9900  186B  3400               	retlw	0
  9901  186C  3415               	retlw	21
  9902  186D  3400               	retlw	0
  9903  186E  3416               	retlw	22
  9904  186F  3400               	retlw	0
  9905  1870  3417               	retlw	23
  9906  1871  3400               	retlw	0
  9907  1872  3419               	retlw	25
  9908  1873  3400               	retlw	0
  9909  1874  341A               	retlw	26
  9910  1875  3400               	retlw	0
  9911  1876  341B               	retlw	27
  9912  1877  3400               	retlw	0
  9913  1878  341C               	retlw	28
  9914  1879  3400               	retlw	0
  9915  187A  341D               	retlw	29
  9916  187B  3400               	retlw	0
  9917  187C  341E               	retlw	30
  9918  187D  3400               	retlw	0
  9919  187E  3420               	retlw	32
  9920  187F  3400               	retlw	0
  9921  1880  3421               	retlw	33
  9922  1881  3400               	retlw	0
  9923  1882  3422               	retlw	34
  9924  1883  3400               	retlw	0
  9925  1884  3423               	retlw	35
  9926  1885  3400               	retlw	0
  9927  1886  3425               	retlw	37
  9928  1887  3400               	retlw	0
  9929  1888  3426               	retlw	38
  9930  1889  3400               	retlw	0
  9931  188A  3428               	retlw	40
  9932  188B  3400               	retlw	0
  9933  188C  3429               	retlw	41
  9934  188D  3400               	retlw	0
  9935  188E  342A               	retlw	42
  9936  188F  3400               	retlw	0
  9937  1890  342C               	retlw	44
  9938  1891  3400               	retlw	0
  9939  1892  342E               	retlw	46
  9940  1893  3400               	retlw	0
  9941  1894  342F               	retlw	47
  9942  1895  3400               	retlw	0
  9943  1896  3431               	retlw	49
  9944  1897  3400               	retlw	0
  9945  1898  3432               	retlw	50
  9946  1899  3400               	retlw	0
  9947  189A  3434               	retlw	52
  9948  189B  3400               	retlw	0
  9949  189C  3436               	retlw	54
  9950  189D  3400               	retlw	0
  9951  189E  3437               	retlw	55
  9952  189F  3400               	retlw	0
  9953  18A0  3439               	retlw	57
  9954  18A1  3400               	retlw	0
  9955  18A2  343B               	retlw	59
  9956  18A3  3400               	retlw	0
  9957  18A4  343D               	retlw	61
  9958  18A5  3400               	retlw	0
  9959  18A6  343F               	retlw	63
  9960  18A7  3400               	retlw	0
  9961  18A8  3441               	retlw	65
  9962  18A9  3400               	retlw	0
  9963  18AA  3442               	retlw	66
  9964  18AB  3400               	retlw	0
  9965  18AC  3444               	retlw	68
  9966  18AD  3400               	retlw	0
  9967  18AE  3446               	retlw	70
  9968  18AF  3400               	retlw	0
  9969  18B0  3448               	retlw	72
  9970  18B1  3400               	retlw	0
  9971  18B2  344B               	retlw	75
  9972  18B3  3400               	retlw	0
  9973  18B4  344D               	retlw	77
  9974  18B5  3400               	retlw	0
  9975  18B6  344F               	retlw	79
  9976  18B7  3400               	retlw	0
  9977  18B8  3451               	retlw	81
  9978  18B9  3400               	retlw	0
  9979  18BA  3453               	retlw	83
  9980  18BB  3400               	retlw	0
  9981  18BC  3455               	retlw	85
  9982  18BD  3400               	retlw	0
  9983  18BE  3458               	retlw	88
  9984  18BF  3400               	retlw	0
  9985  18C0  345A               	retlw	90
  9986  18C1  3400               	retlw	0
  9987  18C2  345C               	retlw	92
  9988  18C3  3400               	retlw	0
  9989  18C4  345F               	retlw	95
  9990  18C5  3400               	retlw	0
  9991  18C6  3461               	retlw	97
  9992  18C7  3400               	retlw	0
  9993  18C8  3464               	retlw	100
  9994  18C9  3400               	retlw	0
  9995  18CA  3466               	retlw	102
  9996  18CB  3400               	retlw	0
  9997  18CC  3469               	retlw	105
  9998  18CD  3400               	retlw	0
  9999  18CE  346B               	retlw	107
 10000  18CF  3400               	retlw	0
 10001  18D0  346E               	retlw	110
 10002  18D1  3400               	retlw	0
 10003  18D2  3470               	retlw	112
 10004  18D3  3400               	retlw	0
 10005  18D4  3473               	retlw	115
 10006  18D5  3400               	retlw	0
 10007  18D6  3476               	retlw	118
 10008  18D7  3400               	retlw	0
 10009  18D8  3479               	retlw	121
 10010  18D9  3400               	retlw	0
 10011  18DA  347B               	retlw	123
 10012  18DB  3400               	retlw	0
 10013  18DC  347E               	retlw	126
 10014  18DD  3400               	retlw	0
 10015  18DE  3481               	retlw	129
 10016  18DF  3400               	retlw	0
 10017  18E0  3484               	retlw	132
 10018  18E1  3400               	retlw	0
 10019  18E2  3487               	retlw	135
 10020  18E3  3400               	retlw	0
 10021  18E4  348A               	retlw	138
 10022  18E5  3400               	retlw	0
 10023  18E6  348D               	retlw	141
 10024  18E7  3400               	retlw	0
 10025  18E8  3490               	retlw	144
 10026  18E9  3400               	retlw	0
 10027  18EA  3493               	retlw	147
 10028  18EB  3400               	retlw	0
 10029  18EC  3496               	retlw	150
 10030  18ED  3400               	retlw	0
 10031  18EE  349A               	retlw	154
 10032  18EF  3400               	retlw	0
 10033  18F0  349D               	retlw	157
 10034  18F1  3400               	retlw	0
 10035  18F2  34A0               	retlw	160
 10036  18F3  3400               	retlw	0
 10037  18F4  34A3               	retlw	163
 10038  18F5  3400               	retlw	0
 10039  18F6  34A7               	retlw	167
 10040  18F7  3400               	retlw	0
 10041  18F8  34AA               	retlw	170
 10042  18F9  3400               	retlw	0
 10043  18FA  34AE               	retlw	174
 10044  18FB  3400               	retlw	0
 10045  18FC  34B1               	retlw	177
 10046  18FD  3400               	retlw	0
 10047  18FE  34B5               	retlw	181
 10048  18FF  3400               	retlw	0
 10049  1900  34B8               	retlw	184
 10050  1901  3400               	retlw	0
 10051  1902  34BC               	retlw	188
 10052  1903  3400               	retlw	0
 10053  1904  34BF               	retlw	191
 10054  1905  3400               	retlw	0
 10055  1906  34C3               	retlw	195
 10056  1907  3400               	retlw	0
 10057  1908  34C7               	retlw	199
 10058  1909  3400               	retlw	0
 10059  190A  34CA               	retlw	202
 10060  190B  3400               	retlw	0
 10061  190C  34CE               	retlw	206
 10062  190D  3400               	retlw	0
 10063  190E  34D2               	retlw	210
 10064  190F  3400               	retlw	0
 10065  1910  34D6               	retlw	214
 10066  1911  3400               	retlw	0
 10067  1912  34DA               	retlw	218
 10068  1913  3400               	retlw	0
 10069  1914  34DE               	retlw	222
 10070  1915  3400               	retlw	0
 10071  1916  34E2               	retlw	226
 10072  1917  3400               	retlw	0
 10073  1918  34E6               	retlw	230
 10074  1919  3400               	retlw	0
 10075  191A  34EA               	retlw	234
 10076  191B  3400               	retlw	0
 10077  191C  34EE               	retlw	238
 10078  191D  3400               	retlw	0
 10079  191E  34F3               	retlw	243
 10080  191F  3400               	retlw	0
 10081  1920  34F7               	retlw	247
 10082  1921  3400               	retlw	0
 10083  1922  34FB               	retlw	251
 10084  1923  3400               	retlw	0
 10085  1924  34FF               	retlw	255
 10086  1925  3400               	retlw	0
 10087  1926  3404               	retlw	4
 10088  1927  3401               	retlw	1
 10089  1928  3408               	retlw	8
 10090  1929  3401               	retlw	1
 10091  192A  340D               	retlw	13
 10092  192B  3401               	retlw	1
 10093  192C  3411               	retlw	17
 10094  192D  3401               	retlw	1
 10095  192E  3416               	retlw	22
 10096  192F  3401               	retlw	1
 10097  1930  341A               	retlw	26
 10098  1931  3401               	retlw	1
 10099  1932  341F               	retlw	31
 10100  1933  3401               	retlw	1
 10101  1934  3424               	retlw	36
 10102  1935  3401               	retlw	1
 10103  1936  3428               	retlw	40
 10104  1937  3401               	retlw	1
 10105  1938  342D               	retlw	45
 10106  1939  3401               	retlw	1
 10107  193A  3432               	retlw	50
 10108  193B  3401               	retlw	1
 10109  193C  3437               	retlw	55
 10110  193D  3401               	retlw	1
 10111  193E  343C               	retlw	60
 10112  193F  3401               	retlw	1
 10113  1940  3441               	retlw	65
 10114  1941  3401               	retlw	1
 10115  1942  3446               	retlw	70
 10116  1943  3401               	retlw	1
 10117  1944  344B               	retlw	75
 10118  1945  3401               	retlw	1
 10119  1946  3450               	retlw	80
 10120  1947  3401               	retlw	1
 10121  1948  3455               	retlw	85
 10122  1949  3401               	retlw	1
 10123  194A  345A               	retlw	90
 10124  194B  3401               	retlw	1
 10125  194C  345F               	retlw	95
 10126  194D  3401               	retlw	1
 10127  194E  3465               	retlw	101
 10128  194F  3401               	retlw	1
 10129  1950  346A               	retlw	106
 10130  1951  3401               	retlw	1
 10131  1952  346F               	retlw	111
 10132  1953  3401               	retlw	1
 10133  1954  3475               	retlw	117
 10134  1955  3401               	retlw	1
 10135  1956  347A               	retlw	122
 10136  1957  3401               	retlw	1
 10137  1958  3480               	retlw	128
 10138  1959  3401               	retlw	1
 10139  195A  3486               	retlw	134
 10140  195B  3401               	retlw	1
 10141  195C  348B               	retlw	139
 10142  195D  3401               	retlw	1
 10143  195E  3491               	retlw	145
 10144  195F  3401               	retlw	1
 10145  1960  3497               	retlw	151
 10146  1961  3401               	retlw	1
 10147  1962  349C               	retlw	156
 10148  1963  3401               	retlw	1
 10149  1964  34A2               	retlw	162
 10150  1965  3401               	retlw	1
 10151  1966  34A8               	retlw	168
 10152  1967  3401               	retlw	1
 10153  1968  34AE               	retlw	174
 10154  1969  3401               	retlw	1
 10155  196A  34B4               	retlw	180
 10156  196B  3401               	retlw	1
 10157  196C  34BA               	retlw	186
 10158  196D  3401               	retlw	1
 10159  196E  34C0               	retlw	192
 10160  196F  3401               	retlw	1
 10161  1970  34C6               	retlw	198
 10162  1971  3401               	retlw	1
 10163  1972  34CC               	retlw	204
 10164  1973  3401               	retlw	1
 10165  1974  34D2               	retlw	210
 10166  1975  3401               	retlw	1
 10167  1976  34D9               	retlw	217
 10168  1977  3401               	retlw	1
 10169  1978  34DF               	retlw	223
 10170  1979  3401               	retlw	1
 10171  197A  34E5               	retlw	229
 10172  197B  3401               	retlw	1
 10173  197C  34EC               	retlw	236
 10174  197D  3401               	retlw	1
 10175  197E  34F2               	retlw	242
 10176  197F  3401               	retlw	1
 10177  1980  34F9               	retlw	249
 10178  1981  3401               	retlw	1
 10179  1982  34FF               	retlw	255
 10180  1983  3401               	retlw	1
 10181  1984  3406               	retlw	6
 10182  1985  3402               	retlw	2
 10183  1986  340D               	retlw	13
 10184  1987  3402               	retlw	2
 10185  1988  3413               	retlw	19
 10186  1989  3402               	retlw	2
 10187  198A  341A               	retlw	26
 10188  198B  3402               	retlw	2
 10189  198C  3421               	retlw	33
 10190  198D  3402               	retlw	2
 10191  198E  3428               	retlw	40
 10192  198F  3402               	retlw	2
 10193  1990  342F               	retlw	47
 10194  1991  3402               	retlw	2
 10195  1992  3436               	retlw	54
 10196  1993  3402               	retlw	2
 10197  1994  343D               	retlw	61
 10198  1995  3402               	retlw	2
 10199  1996  3444               	retlw	68
 10200  1997  3402               	retlw	2
 10201  1998  344B               	retlw	75
 10202  1999  3402               	retlw	2
 10203  199A  3452               	retlw	82
 10204  199B  3402               	retlw	2
 10205  199C  345A               	retlw	90
 10206  199D  3402               	retlw	2
 10207  199E  3461               	retlw	97
 10208  199F  3402               	retlw	2
 10209  19A0  3468               	retlw	104
 10210  19A1  3402               	retlw	2
 10211  19A2  3470               	retlw	112
 10212  19A3  3402               	retlw	2
 10213  19A4  3477               	retlw	119
 10214  19A5  3402               	retlw	2
 10215  19A6  347F               	retlw	127
 10216  19A7  3402               	retlw	2
 10217  19A8  3486               	retlw	134
 10218  19A9  3402               	retlw	2
 10219  19AA  348E               	retlw	142
 10220  19AB  3402               	retlw	2
 10221  19AC  3495               	retlw	149
 10222  19AD  3402               	retlw	2
 10223  19AE  349D               	retlw	157
 10224  19AF  3402               	retlw	2
 10225  19B0  34A5               	retlw	165
 10226  19B1  3402               	retlw	2
 10227  19B2  34AD               	retlw	173
 10228  19B3  3402               	retlw	2
 10229  19B4  34B5               	retlw	181
 10230  19B5  3402               	retlw	2
 10231  19B6  34BD               	retlw	189
 10232  19B7  3402               	retlw	2
 10233  19B8  34C5               	retlw	197
 10234  19B9  3402               	retlw	2
 10235  19BA  34CD               	retlw	205
 10236  19BB  3402               	retlw	2
 10237  19BC  34D5               	retlw	213
 10238  19BD  3402               	retlw	2
 10239  19BE  34DD               	retlw	221
 10240  19BF  3402               	retlw	2
 10241  19C0  34E5               	retlw	229
 10242  19C1  3402               	retlw	2
 10243  19C2  34ED               	retlw	237
 10244  19C3  3402               	retlw	2
 10245  19C4  34F6               	retlw	246
 10246  19C5  3402               	retlw	2
 10247  19C6  34FE               	retlw	254
 10248  19C7  3402               	retlw	2
 10249  19C8  3406               	retlw	6
 10250  19C9  3403               	retlw	3
 10251  19CA  340F               	retlw	15
 10252  19CB  3403               	retlw	3
 10253  19CC  3418               	retlw	24
 10254  19CD  3403               	retlw	3
 10255  19CE  3420               	retlw	32
 10256  19CF  3403               	retlw	3
 10257  19D0  3429               	retlw	41
 10258  19D1  3403               	retlw	3
 10259  19D2  3431               	retlw	49
 10260  19D3  3403               	retlw	3
 10261  19D4  343A               	retlw	58
 10262  19D5  3403               	retlw	3
 10263  19D6  3443               	retlw	67
 10264  19D7  3403               	retlw	3
 10265  19D8  344C               	retlw	76
 10266  19D9  3403               	retlw	3
 10267  19DA  3455               	retlw	85
 10268  19DB  3403               	retlw	3
 10269  19DC  345E               	retlw	94
 10270  19DD  3403               	retlw	3
 10271  19DE  3467               	retlw	103
 10272  19DF  3403               	retlw	3
 10273  19E0  3470               	retlw	112
 10274  19E1  3403               	retlw	3
 10275  19E2  3479               	retlw	121
 10276  19E3  3403               	retlw	3
 10277  19E4  3482               	retlw	130
 10278  19E5  3403               	retlw	3
 10279  19E6  348C               	retlw	140
 10280  19E7  3403               	retlw	3
 10281  19E8  3495               	retlw	149
 10282  19E9  3403               	retlw	3
 10283  19EA  349E               	retlw	158
 10284  19EB  3403               	retlw	3
 10285  19EC  34A8               	retlw	168
 10286  19ED  3403               	retlw	3
 10287  19EE  34B1               	retlw	177
 10288  19EF  3403               	retlw	3
 10289  19F0  34BB               	retlw	187
 10290  19F1  3403               	retlw	3
 10291  19F2  34C5               	retlw	197
 10292  19F3  3403               	retlw	3
 10293  19F4  34CE               	retlw	206
 10294  19F5  3403               	retlw	3
 10295  19F6  34D8               	retlw	216
 10296  19F7  3403               	retlw	3
 10297  19F8  34E2               	retlw	226
 10298  19F9  3403               	retlw	3
 10299  19FA  34EC               	retlw	236
 10300  19FB  3403               	retlw	3
 10301  19FC  34F6               	retlw	246
 10302  19FD  3403               	retlw	3
 10303  19FE  34FF               	retlw	255
 10304  19FF  3403               	retlw	3
 10305  1A00                     __end_of_gamma_table_256x1k:	
 10306                           
 10307                           	psect	stringtext2
 10308  2800                     __pstringtext2:	
 10309  2800                     _dpowers:	
 10310  2800  3401               	retlw	1
 10311  2801  3400               	retlw	0
 10312  2802  340A               	retlw	10
 10313  2803  3400               	retlw	0
 10314  2804  3464               	retlw	100
 10315  2805  3400               	retlw	0
 10316  2806  34E8               	retlw	232
 10317  2807  3403               	retlw	3
 10318  2808  3410               	retlw	16
 10319  2809  3427               	retlw	39
 10320  280A                     __end_of_dpowers:	
 10321  000D                     _PORTBbits	set	13
 10322  000C                     _PORTAbits	set	12
 10323  000E                     _PORTCbits	set	14
 10324  000B                     _INTCONbits	set	11
 10325  0017                     _T0CON0bits	set	23
 10326  0010                     _PIR0bits	set	16
 10327  0015                     _TMR0L	set	21
 10328  0016                     _TMR0H	set	22
 10329  0018                     _T0CON1	set	24
 10330  0017                     _T0CON0	set	23
 10331  0012                     _PIR2bits	set	18
 10332  001F                     _T2CONbits	set	31
 10333  0011                     _PIR1bits	set	17
 10334  001D                     _TMR2	set	29
 10335  001E                     _PR2	set	30
 10336  001F                     _T2CON	set	31
 10337  005F                     _GIE	set	95
 10338  0090                     _PIE0bits	set	144
 10339  008E                     _TRISC	set	142
 10340  008D                     _TRISB	set	141
 10341  008C                     _TRISA	set	140
 10342  0097                     _WDTCON	set	151
 10343  010E                     _LATCbits	set	270
 10344  010D                     _LATBbits	set	269
 10345  010E                     _LATC	set	270
 10346  010D                     _LATB	set	269
 10347  010C                     _LATA	set	268
 10348  018C                     _ANSELA	set	396
 10349  018D                     _ANSELB	set	397
 10350  018E                     _ANSELC	set	398
 10351  020E                     _WPUC	set	526
 10352  020C                     _WPUA	set	524
 10353  020D                     _WPUB	set	525
 10354  0214                     _SSP1STATbits	set	532
 10355  0211                     _SSP1BUF	set	529
 10356  0215                     _SSP1CON1bits	set	533
 10357  0212                     _SSP1ADD	set	530
 10358  0215                     _SSP1CON1	set	533
 10359  0214                     _SSP1STAT	set	532
 10360  0297                     _CCP2CONbits	set	663
 10361  0295                     _CCPR2L	set	661
 10362  0296                     _CCPR2H	set	662
 10363  0297                     _CCP2CON	set	663
 10364  028E                     _ODCONC	set	654
 10365  028D                     _ODCONB	set	653
 10366  028C                     _ODCONA	set	652
 10367  0293                     _CCP1CONbits	set	659
 10368  029F                     _CCPTMRSbits	set	671
 10369  0291                     _CCPR1L	set	657
 10370  0292                     _CCPR1H	set	658
 10371  0293                     _CCP1CON	set	659
 10372  0417                     _T4CONbits	set	1047
 10373  0415                     _TMR4	set	1045
 10374  0416                     _PR4	set	1046
 10375  0417                     _T4CON	set	1047
 10376  061A                     _PWM6DCL	set	1562
 10377  061B                     _PWM6DCH	set	1563
 10378  061C                     _PWM6CON	set	1564
 10379  061F                     _PWMTMRSbits	set	1567
 10380  0617                     _PWM5DCL	set	1559
 10381  0618                     _PWM5DCH	set	1560
 10382  0619                     _PWM5CON	set	1561
 10383  0896                     _NVMCON2	set	2198
 10384  0893                     _NVMDATL	set	2195
 10385  0894                     _NVMDATH	set	2196
 10386  0895                     _NVMCON1bits	set	2197
 10387  0892                     _NVMADRH	set	2194
 10388  0891                     _NVMADRL	set	2193
 10389  091E                     _OSCTUNE	set	2334
 10390  091F                     _OSCFRQ	set	2335
 10391  091D                     _OSCEN	set	2333
 10392  091B                     _OSCCON3	set	2331
 10393  0919                     _OSCCON1	set	2329
 10394  48E0                     _PLLR	set	18656
 10395  0E20                     _SSP1CLKPPSbits	set	3616
 10396  0E21                     _SSP1DATPPSbits	set	3617
 10397  0E0F                     _PPSLOCKbits	set	3599
 10398  0E0F                     _PPSLOCK	set	3599
 10399  0EA2                     _RC2PPSbits	set	3746
 10400  0E9E                     _RB6PPSbits	set	3742
 10401  0EA3                     _RC3PPSbits	set	3747
 10402  0EA0                     _RC0PPSbits	set	3744
 10403  0EA4                     _RC4PPSbits	set	3748
 10404  0EA1                     _RC1PPSbits	set	3745
 10405  280A                     STR_34:	
 10406  280A  3449               	retlw	73	;'I'
 10407  280B  344D               	retlw	77	;'M'
 10408  280C  3420               	retlw	32	;' '
 10409  280D  3441               	retlw	65	;'A'
 10410  280E  3446               	retlw	70	;'F'
 10411  280F  3452               	retlw	82	;'R'
 10412  2810  3441               	retlw	65	;'A'
 10413  2811  3449               	retlw	73	;'I'
 10414  2812  3444               	retlw	68	;'D'
 10415  2813  3420               	retlw	32	;' '
 10416  2814  3449               	retlw	73	;'I'
 10417  2815  3420               	retlw	32	;' '
 10418  2816  3443               	retlw	67	;'C'
 10419  2817  3441               	retlw	65	;'A'
 10420  2818  344E               	retlw	78	;'N'
 10421  2819  3454               	retlw	84	;'T'
 10422  281A  3420               	retlw	32	;' '
 10423  281B  344C               	retlw	76	;'L'
 10424  281C  3445               	retlw	69	;'E'
 10425  281D  3454               	retlw	84	;'T'
 10426  281E  3420               	retlw	32	;' '
 10427  281F  3459               	retlw	89	;'Y'
 10428  2820  344F               	retlw	79	;'O'
 10429  2821  3455               	retlw	85	;'U'
 10430  2822  3420               	retlw	32	;' '
 10431  2823  3444               	retlw	68	;'D'
 10432  2824  344F               	retlw	79	;'O'
 10433  2825  3420               	retlw	32	;' '
 10434  2826  3454               	retlw	84	;'T'
 10435  2827  3448               	retlw	72	;'H'
 10436  2828  3441               	retlw	65	;'A'
 10437  2829  3454               	retlw	84	;'T'
 10438  282A  3420               	retlw	32	;' '
 10439  282B  3444               	retlw	68	;'D'
 10440  282C  3441               	retlw	65	;'A'
 10441  282D  3456               	retlw	86	;'V'
 10442  282E  3445               	retlw	69	;'E'
 10443  282F  342E               	retlw	46	;'.'
 10444  2830  342E               	retlw	46	;'.'
 10445  2831  342E               	retlw	46	;'.'
 10446  2832  3420               	retlw	32	;' '
 10447  2833  3420               	retlw	32	;' '
 10448  2834  3449               	retlw	73	;'I'
 10449  2835  344D               	retlw	77	;'M'
 10450  2836  3420               	retlw	32	;' '
 10451  2837  3448               	retlw	72	;'H'
 10452  2838  3445               	retlw	69	;'E'
 10453  2839  3452               	retlw	82	;'R'
 10454  283A  3445               	retlw	69	;'E'
 10455  283B  3420               	retlw	32	;' '
 10456  283C  3454               	retlw	84	;'T'
 10457  283D  344F               	retlw	79	;'O'
 10458  283E  3420               	retlw	32	;' '
 10459  283F  3443               	retlw	67	;'C'
 10460  2840  3448               	retlw	72	;'H'
 10461  2841  3445               	retlw	69	;'E'
 10462  2842  3457               	retlw	87	;'W'
 10463  2843  3420               	retlw	32	;' '
 10464  2844  3442               	retlw	66	;'B'
 10465  2845  3455               	retlw	85	;'U'
 10466  2846  3442               	retlw	66	;'B'
 10467  2847  3442               	retlw	66	;'B'
 10468  2848  344C               	retlw	76	;'L'
 10469  2849  3445               	retlw	69	;'E'
 10470  284A  3447               	retlw	71	;'G'
 10471  284B  3455               	retlw	85	;'U'
 10472  284C  344D               	retlw	77	;'M'
 10473  284D  3420               	retlw	32	;' '
 10474  284E  3441               	retlw	65	;'A'
 10475  284F  344E               	retlw	78	;'N'
 10476  2850  3444               	retlw	68	;'D'
 10477  2851  3420               	retlw	32	;' '
 10478  2852  344B               	retlw	75	;'K'
 10479  2853  3449               	retlw	73	;'I'
 10480  2854  3443               	retlw	67	;'C'
 10481  2855  344B               	retlw	75	;'K'
 10482  2856  3420               	retlw	32	;' '
 10483  2857  3441               	retlw	65	;'A'
 10484  2858  3453               	retlw	83	;'S'
 10485  2859  3453               	retlw	83	;'S'
 10486  285A  342E               	retlw	46	;'.'
 10487  285B  342E               	retlw	46	;'.'
 10488  285C  342E               	retlw	46	;'.'
 10489  285D  3420               	retlw	32	;' '
 10490  285E  3441               	retlw	65	;'A'
 10491  285F  344E               	retlw	78	;'N'
 10492  2860  3444               	retlw	68	;'D'
 10493  2861  3420               	retlw	32	;' '
 10494  2862  3449               	retlw	73	;'I'
 10495  2863  344D               	retlw	77	;'M'
 10496  2864  3420               	retlw	32	;' '
 10497  2865  3441               	retlw	65	;'A'
 10498  2866  344C               	retlw	76	;'L'
 10499  2867  344C               	retlw	76	;'L'
 10500  2868  3420               	retlw	32	;' '
 10501  2869  344F               	retlw	79	;'O'
 10502  286A  3455               	retlw	85	;'U'
 10503  286B  3454               	retlw	84	;'T'
 10504  286C  3420               	retlw	32	;' '
 10505  286D  344F               	retlw	79	;'O'
 10506  286E  3446               	retlw	70	;'F'
 10507  286F  3420               	retlw	32	;' '
 10508  2870  3442               	retlw	66	;'B'
 10509  2871  3455               	retlw	85	;'U'
 10510  2872  3442               	retlw	66	;'B'
 10511  2873  3442               	retlw	66	;'B'
 10512  2874  344C               	retlw	76	;'L'
 10513  2875  3445               	retlw	69	;'E'
 10514  2876  3447               	retlw	71	;'G'
 10515  2877  3455               	retlw	85	;'U'
 10516  2878  344D               	retlw	77	;'M'
 10517  2879  3420               	retlw	32	;' '
 10518  287A  3420               	retlw	32	;' '
 10519  287B  3420               	retlw	32	;' '
 10520  287C  3420               	retlw	32	;' '
 10521  287D  3420               	retlw	32	;' '
 10522  287E  3420               	retlw	32	;' '
 10523  287F  3420               	retlw	32	;' '
 10524  2880  3420               	retlw	32	;' '
 10525  2881  3400               	retlw	0
 10526                           
 10527                           	psect	stringtext3
 10528  3800                     __pstringtext3:	
 10529  3800                     STR_36:	
 10530  3800  3449               	retlw	73	;'I'
 10531  3801  3420               	retlw	32	;' '
 10532  3802  344C               	retlw	76	;'L'
 10533  3803  344F               	retlw	79	;'O'
 10534  3804  3456               	retlw	86	;'V'
 10535  3805  3445               	retlw	69	;'E'
 10536  3806  3420               	retlw	32	;' '
 10537  3807  3449               	retlw	73	;'I'
 10538  3808  3454               	retlw	84	;'T'
 10539  3809  342E               	retlw	46	;'.'
 10540  380A  3420               	retlw	32	;' '
 10541  380B  3445               	retlw	69	;'E'
 10542  380C  3453               	retlw	83	;'S'
 10543  380D  3450               	retlw	80	;'P'
 10544  380E  3445               	retlw	69	;'E'
 10545  380F  3443               	retlw	67	;'C'
 10546  3810  3449               	retlw	73	;'I'
 10547  3811  3441               	retlw	65	;'A'
 10548  3812  344C               	retlw	76	;'L'
 10549  3813  344C               	retlw	76	;'L'
 10550  3814  3459               	retlw	89	;'Y'
 10551  3815  3420               	retlw	32	;' '
 10552  3816  344C               	retlw	76	;'L'
 10553  3817  3441               	retlw	65	;'A'
 10554  3818  3454               	retlw	84	;'T'
 10555  3819  3445               	retlw	69	;'E'
 10556  381A  3452               	retlw	82	;'R'
 10557  381B  3420               	retlw	32	;' '
 10558  381C  3449               	retlw	73	;'I'
 10559  381D  344E               	retlw	78	;'N'
 10560  381E  3420               	retlw	32	;' '
 10561  381F  3454               	retlw	84	;'T'
 10562  3820  3448               	retlw	72	;'H'
 10563  3821  3445               	retlw	69	;'E'
 10564  3822  3420               	retlw	32	;' '
 10565  3823  3453               	retlw	83	;'S'
 10566  3824  3455               	retlw	85	;'U'
 10567  3825  344D               	retlw	77	;'M'
 10568  3826  344D               	retlw	77	;'M'
 10569  3827  3445               	retlw	69	;'E'
 10570  3828  3452               	retlw	82	;'R'
 10571  3829  3420               	retlw	32	;' '
 10572  382A  3420               	retlw	32	;' '
 10573  382B  3420               	retlw	32	;' '
 10574  382C  3420               	retlw	32	;' '
 10575  382D  3420               	retlw	32	;' '
 10576  382E  3400               	retlw	0
 10577                           
 10578                           	psect	stringtext4
 10579  382F                     __pstringtext4:	
 10580  382F                     STR_80:	
 10581  382F  3459               	retlw	89	;'Y'
 10582  3830  344F               	retlw	79	;'O'
 10583  3831  3455               	retlw	85	;'U'
 10584  3832  3420               	retlw	32	;' '
 10585  3833  3441               	retlw	65	;'A'
 10586  3834  3452               	retlw	82	;'R'
 10587  3835  3445               	retlw	69	;'E'
 10588  3836  3420               	retlw	32	;' '
 10589  3837  3449               	retlw	73	;'I'
 10590  3838  344E               	retlw	78	;'N'
 10591  3839  3420               	retlw	32	;' '
 10592  383A  3454               	retlw	84	;'T'
 10593  383B  344F               	retlw	79	;'O'
 10594  383C  344F               	retlw	79	;'O'
 10595  383D  3420               	retlw	32	;' '
 10596  383E  3444               	retlw	68	;'D'
 10597  383F  3445               	retlw	69	;'E'
 10598  3840  3445               	retlw	69	;'E'
 10599  3841  3450               	retlw	80	;'P'
 10600  3842  3420               	retlw	32	;' '
 10601  3843  3420               	retlw	32	;' '
 10602  3844  3420               	retlw	32	;' '
 10603  3845  3420               	retlw	32	;' '
 10604  3846  3420               	retlw	32	;' '
 10605  3847  3454               	retlw	84	;'T'
 10606  3848  3441               	retlw	65	;'A'
 10607  3849  344B               	retlw	75	;'K'
 10608  384A  3445               	retlw	69	;'E'
 10609  384B  3420               	retlw	32	;' '
 10610  384C  3454               	retlw	84	;'T'
 10611  384D  3448               	retlw	72	;'H'
 10612  384E  3445               	retlw	69	;'E'
 10613  384F  3420               	retlw	32	;' '
 10614  3850  3452               	retlw	82	;'R'
 10615  3851  3445               	retlw	69	;'E'
 10616  3852  3444               	retlw	68	;'D'
 10617  3853  3420               	retlw	32	;' '
 10618  3854  3450               	retlw	80	;'P'
 10619  3855  3449               	retlw	73	;'I'
 10620  3856  344C               	retlw	76	;'L'
 10621  3857  344C               	retlw	76	;'L'
 10622  3858  3420               	retlw	32	;' '
 10623  3859  3420               	retlw	32	;' '
 10624  385A  3420               	retlw	32	;' '
 10625  385B  3420               	retlw	32	;' '
 10626  385C  3400               	retlw	0
 10627                           
 10628                           	psect	stringtext5
 10629  385D                     __pstringtext5:	
 10630  385D                     STR_38:	
 10631  385D  3448               	retlw	72	;'H'
 10632  385E  3454               	retlw	84	;'T'
 10633  385F  3454               	retlw	84	;'T'
 10634  3860  3450               	retlw	80	;'P'
 10635  3861  3453               	retlw	83	;'S'
 10636  3862  343A               	retlw	58	;':'
 10637  3863  342F               	retlw	47	;'/'
 10638  3864  342F               	retlw	47	;'/'
 10639  3865  3447               	retlw	71	;'G'
 10640  3866  3449               	retlw	73	;'I'
 10641  3867  3454               	retlw	84	;'T'
 10642  3868  3448               	retlw	72	;'H'
 10643  3869  3455               	retlw	85	;'U'
 10644  386A  3442               	retlw	66	;'B'
 10645  386B  342E               	retlw	46	;'.'
 10646  386C  3443               	retlw	67	;'C'
 10647  386D  344F               	retlw	79	;'O'
 10648  386E  344D               	retlw	77	;'M'
 10649  386F  342F               	retlw	47	;'/'
 10650  3870  344E               	retlw	78	;'N'
 10651  3871  3455               	retlw	85	;'U'
 10652  3872  344C               	retlw	76	;'L'
 10653  3873  344C               	retlw	76	;'L'
 10654  3874  3449               	retlw	73	;'I'
 10655  3875  3442               	retlw	66	;'B'
 10656  3876  3441               	retlw	65	;'A'
 10657  3877  3444               	retlw	68	;'D'
 10658  3878  3447               	retlw	71	;'G'
 10659  3879  3445               	retlw	69	;'E'
 10660  387A  342F               	retlw	47	;'/'
 10661  387B  3444               	retlw	68	;'D'
 10662  387C  3445               	retlw	69	;'E'
 10663  387D  3446               	retlw	70	;'F'
 10664  387E  3443               	retlw	67	;'C'
 10665  387F  344F               	retlw	79	;'O'
 10666  3880  344E               	retlw	78	;'N'
 10667  3881  3432               	retlw	50	;'2'
 10668  3882  3435               	retlw	53	;'5'
 10669  3883  3420               	retlw	32	;' '
 10670  3884  3420               	retlw	32	;' '
 10671  3885  3420               	retlw	32	;' '
 10672  3886  3420               	retlw	32	;' '
 10673  3887  3400               	retlw	0
 10674                           
 10675                           	psect	stringtext6
 10676  3888                     __pstringtext6:	
 10677  3888                     STR_25:	
 10678  3888  3447               	retlw	71	;'G'
 10679  3889  3455               	retlw	85	;'U'
 10680  388A  3459               	retlw	89	;'Y'
 10681  388B  3453               	retlw	83	;'S'
 10682  388C  3420               	retlw	32	;' '
 10683  388D  3449               	retlw	73	;'I'
 10684  388E  3420               	retlw	32	;' '
 10685  388F  3448               	retlw	72	;'H'
 10686  3890  3441               	retlw	65	;'A'
 10687  3891  3456               	retlw	86	;'V'
 10688  3892  3445               	retlw	69	;'E'
 10689  3893  3420               	retlw	32	;' '
 10690  3894  3441               	retlw	65	;'A'
 10691  3895  3420               	retlw	32	;' '
 10692  3896  3447               	retlw	71	;'G'
 10693  3897  3452               	retlw	82	;'R'
 10694  3898  3445               	retlw	69	;'E'
 10695  3899  3441               	retlw	65	;'A'
 10696  389A  3454               	retlw	84	;'T'
 10697  389B  3420               	retlw	32	;' '
 10698  389C  3449               	retlw	73	;'I'
 10699  389D  3444               	retlw	68	;'D'
 10700  389E  3445               	retlw	69	;'E'
 10701  389F  3441               	retlw	65	;'A'
 10702  38A0  3420               	retlw	32	;' '
 10703  38A1  342D               	retlw	45	;'-'
 10704  38A2  344D               	retlw	77	;'M'
 10705  38A3  3449               	retlw	73	;'I'
 10706  38A4  344B               	retlw	75	;'K'
 10707  38A5  3445               	retlw	69	;'E'
 10708  38A6  3420               	retlw	32	;' '
 10709  38A7  344B               	retlw	75	;'K'
 10710  38A8  342E               	retlw	46	;'.'
 10711  38A9  3420               	retlw	32	;' '
 10712  38AA  3420               	retlw	32	;' '
 10713  38AB  3420               	retlw	32	;' '
 10714  38AC  3420               	retlw	32	;' '
 10715  38AD  3420               	retlw	32	;' '
 10716  38AE  3420               	retlw	32	;' '
 10717  38AF  3400               	retlw	0
 10718                           
 10719                           	psect	stringtext7
 10720  38B0                     __pstringtext7:	
 10721  38B0                     STR_21:	
 10722  38B0  3441               	retlw	65	;'A'
 10723  38B1  344C               	retlw	76	;'L'
 10724  38B2  344C               	retlw	76	;'L'
 10725  38B3  3420               	retlw	32	;' '
 10726  38B4  3459               	retlw	89	;'Y'
 10727  38B5  344F               	retlw	79	;'O'
 10728  38B6  3455               	retlw	85	;'U'
 10729  38B7  3452               	retlw	82	;'R'
 10730  38B8  3420               	retlw	32	;' '
 10731  38B9  3442               	retlw	66	;'B'
 10732  38BA  3441               	retlw	65	;'A'
 10733  38BB  3453               	retlw	83	;'S'
 10734  38BC  3445               	retlw	69	;'E'
 10735  38BD  3420               	retlw	32	;' '
 10736  38BE  3441               	retlw	65	;'A'
 10737  38BF  3452               	retlw	82	;'R'
 10738  38C0  3445               	retlw	69	;'E'
 10739  38C1  3420               	retlw	32	;' '
 10740  38C2  3442               	retlw	66	;'B'
 10741  38C3  3445               	retlw	69	;'E'
 10742  38C4  344C               	retlw	76	;'L'
 10743  38C5  344F               	retlw	79	;'O'
 10744  38C6  344E               	retlw	78	;'N'
 10745  38C7  3447               	retlw	71	;'G'
 10746  38C8  3420               	retlw	32	;' '
 10747  38C9  3454               	retlw	84	;'T'
 10748  38CA  344F               	retlw	79	;'O'
 10749  38CB  3420               	retlw	32	;' '
 10750  38CC  3455               	retlw	85	;'U'
 10751  38CD  3453               	retlw	83	;'S'
 10752  38CE  3420               	retlw	32	;' '
 10753  38CF  3420               	retlw	32	;' '
 10754  38D0  3420               	retlw	32	;' '
 10755  38D1  3420               	retlw	32	;' '
 10756  38D2  3420               	retlw	32	;' '
 10757  38D3  3400               	retlw	0
 10758                           
 10759                           	psect	stringtext8
 10760  38D4                     __pstringtext8:	
 10761  38D4                     STR_31:	
 10762  38D4  3449               	retlw	73	;'I'
 10763  38D5  3454               	retlw	84	;'T'
 10764  38D6  3453               	retlw	83	;'S'
 10765  38D7  3420               	retlw	32	;' '
 10766  38D8  3441               	retlw	65	;'A'
 10767  38D9  3420               	retlw	32	;' '
 10768  38DA  3455               	retlw	85	;'U'
 10769  38DB  344E               	retlw	78	;'N'
 10770  38DC  3449               	retlw	73	;'I'
 10771  38DD  3458               	retlw	88	;'X'
 10772  38DE  3420               	retlw	32	;' '
 10773  38DF  3453               	retlw	83	;'S'
 10774  38E0  3459               	retlw	89	;'Y'
 10775  38E1  3453               	retlw	83	;'S'
 10776  38E2  3454               	retlw	84	;'T'
 10777  38E3  3445               	retlw	69	;'E'
 10778  38E4  344D               	retlw	77	;'M'
 10779  38E5  3420               	retlw	32	;' '
 10780  38E6  3420               	retlw	32	;' '
 10781  38E7  3449               	retlw	73	;'I'
 10782  38E8  3420               	retlw	32	;' '
 10783  38E9  346B               	retlw	107	;'k'
 10784  38EA  346E               	retlw	110	;'n'
 10785  38EB  346F               	retlw	111	;'o'
 10786  38EC  3477               	retlw	119	;'w'
 10787  38ED  3420               	retlw	32	;' '
 10788  38EE  3474               	retlw	116	;'t'
 10789  38EF  3468               	retlw	104	;'h'
 10790  38F0  3469               	retlw	105	;'i'
 10791  38F1  3473               	retlw	115	;'s'
 10792  38F2  3421               	retlw	33	;'!'
 10793  38F3  3420               	retlw	32	;' '
 10794  38F4  3420               	retlw	32	;' '
 10795  38F5  3420               	retlw	32	;' '
 10796  38F6  3400               	retlw	0
 10797                           
 10798                           	psect	stringtext9
 10799  38F7                     __pstringtext9:	
 10800  38F7                     STR_33:	
 10801  38F7  3457               	retlw	87	;'W'
 10802  38F8  344F               	retlw	79	;'O'
 10803  38F9  3455               	retlw	85	;'U'
 10804  38FA  344C               	retlw	76	;'L'
 10805  38FB  3444               	retlw	68	;'D'
 10806  38FC  3420               	retlw	32	;' '
 10807  38FD  3459               	retlw	89	;'Y'
 10808  38FE  344F               	retlw	79	;'O'
 10809  38FF  3455               	retlw	85	;'U'
 10810  3900  3420               	retlw	32	;' '
 10811  3901  344C               	retlw	76	;'L'
 10812  3902  3449               	retlw	73	;'I'
 10813  3903  344B               	retlw	75	;'K'
 10814  3904  3445               	retlw	69	;'E'
 10815  3905  3420               	retlw	32	;' '
 10816  3906  3454               	retlw	84	;'T'
 10817  3907  344F               	retlw	79	;'O'
 10818  3908  3420               	retlw	32	;' '
 10819  3909  3450               	retlw	80	;'P'
 10820  390A  344C               	retlw	76	;'L'
 10821  390B  3441               	retlw	65	;'A'
 10822  390C  3459               	retlw	89	;'Y'
 10823  390D  3420               	retlw	32	;' '
 10824  390E  3441               	retlw	65	;'A'
 10825  390F  3420               	retlw	32	;' '
 10826  3910  3447               	retlw	71	;'G'
 10827  3911  3441               	retlw	65	;'A'
 10828  3912  344D               	retlw	77	;'M'
 10829  3913  3445               	retlw	69	;'E'
 10830  3914  343F               	retlw	63	;'?'
 10831  3915  3420               	retlw	32	;' '
 10832  3916  3420               	retlw	32	;' '
 10833  3917  3420               	retlw	32	;' '
 10834  3918  3400               	retlw	0
 10835                           
 10836                           	psect	stringtext10
 10837  3919                     __pstringtext10:	
 10838  3919                     STR_22:	
 10839  3919  3444               	retlw	68	;'D'
 10840  391A  344F               	retlw	79	;'O'
 10841  391B  3445               	retlw	69	;'E'
 10842  391C  3453               	retlw	83	;'S'
 10843  391D  3420               	retlw	32	;' '
 10844  391E  3444               	retlw	68	;'D'
 10845  391F  3445               	retlw	69	;'E'
 10846  3920  3456               	retlw	86	;'V'
 10847  3921  3441               	retlw	65	;'A'
 10848  3922  344E               	retlw	78	;'N'
 10849  3923  3420               	retlw	32	;' '
 10850  3924  3448               	retlw	72	;'H'
 10851  3925  3441               	retlw	65	;'A'
 10852  3926  3453               	retlw	83	;'S'
 10853  3927  3420               	retlw	32	;' '
 10854  3928  3448               	retlw	72	;'H'
 10855  3929  3449               	retlw	73	;'I'
 10856  392A  3453               	retlw	83	;'S'
 10857  392B  3420               	retlw	32	;' '
 10858  392C  3450               	retlw	80	;'P'
 10859  392D  3448               	retlw	72	;'H'
 10860  392E  344F               	retlw	79	;'O'
 10861  392F  344E               	retlw	78	;'N'
 10862  3930  3445               	retlw	69	;'E'
 10863  3931  343F               	retlw	63	;'?'
 10864  3932  3420               	retlw	32	;' '
 10865  3933  3420               	retlw	32	;' '
 10866  3934  3420               	retlw	32	;' '
 10867  3935  3420               	retlw	32	;' '
 10868  3936  3400               	retlw	0
 10869                           
 10870                           	psect	stringtext11
 10871  3937                     __pstringtext11:	
 10872  3937                     STR_28:	
 10873  3937  344E               	retlw	78	;'N'
 10874  3938  3443               	retlw	67	;'C'
 10875  3939  3420               	retlw	32	;' '
 10876  393A  342D               	retlw	45	;'-'
 10877  393B  3445               	retlw	69	;'E'
 10878  393C  3420               	retlw	32	;' '
 10879  393D  342F               	retlw	47	;'/'
 10880  393E  3442               	retlw	66	;'B'
 10881  393F  3449               	retlw	73	;'I'
 10882  3940  344E               	retlw	78	;'N'
 10883  3941  342F               	retlw	47	;'/'
 10884  3942  3442               	retlw	66	;'B'
 10885  3943  3441               	retlw	65	;'A'
 10886  3944  3453               	retlw	83	;'S'
 10887  3945  3448               	retlw	72	;'H'
 10888  3946  3420               	retlw	32	;' '
 10889  3947  342D               	retlw	45	;'-'
 10890  3948  344C               	retlw	76	;'L'
 10891  3949  3450               	retlw	80	;'P'
 10892  394A  3420               	retlw	32	;' '
 10893  394B  3431               	retlw	49	;'1'
 10894  394C  3433               	retlw	51	;'3'
 10895  394D  3433               	retlw	51	;'3'
 10896  394E  3437               	retlw	55	;'7'
 10897  394F  3420               	retlw	32	;' '
 10898  3950  3420               	retlw	32	;' '
 10899  3951  3420               	retlw	32	;' '
 10900  3952  3420               	retlw	32	;' '
 10901  3953  3400               	retlw	0
 10902                           
 10903                           	psect	stringtext12
 10904  3954                     __pstringtext12:	
 10905  3954                     STR_23:	
 10906  3954  3459               	retlw	89	;'Y'
 10907  3955  344F               	retlw	79	;'O'
 10908  3956  3455               	retlw	85	;'U'
 10909  3957  3420               	retlw	32	;' '
 10910  3958  344A               	retlw	74	;'J'
 10911  3959  3455               	retlw	85	;'U'
 10912  395A  3453               	retlw	83	;'S'
 10913  395B  3454               	retlw	84	;'T'
 10914  395C  3420               	retlw	32	;' '
 10915  395D  3448               	retlw	72	;'H'
 10916  395E  3441               	retlw	65	;'A'
 10917  395F  3456               	retlw	86	;'V'
 10918  3960  3445               	retlw	69	;'E'
 10919  3961  3420               	retlw	32	;' '
 10920  3962  3454               	retlw	84	;'T'
 10921  3963  344F               	retlw	79	;'O'
 10922  3964  3420               	retlw	32	;' '
 10923  3965  3442               	retlw	66	;'B'
 10924  3966  3445               	retlw	69	;'E'
 10925  3967  344C               	retlw	76	;'L'
 10926  3968  3449               	retlw	73	;'I'
 10927  3969  3445               	retlw	69	;'E'
 10928  396A  3456               	retlw	86	;'V'
 10929  396B  3445               	retlw	69	;'E'
 10930  396C  3420               	retlw	32	;' '
 10931  396D  3420               	retlw	32	;' '
 10932  396E  3420               	retlw	32	;' '
 10933  396F  3420               	retlw	32	;' '
 10934  3970  3400               	retlw	0
 10935                           
 10936                           	psect	stringtext13
 10937  3971                     __pstringtext13:	
 10938  3971                     STR_20:	
 10939  3971  3449               	retlw	73	;'I'
 10940  3972  3420               	retlw	32	;' '
 10941  3973  3443               	retlw	67	;'C'
 10942  3974  3441               	retlw	65	;'A'
 10943  3975  344E               	retlw	78	;'N'
 10944  3976  3420               	retlw	32	;' '
 10945  3977  3442               	retlw	66	;'B'
 10946  3978  3452               	retlw	82	;'R'
 10947  3979  3445               	retlw	69	;'E'
 10948  397A  3441               	retlw	65	;'A'
 10949  397B  344B               	retlw	75	;'K'
 10950  397C  3420               	retlw	32	;' '
 10951  397D  3454               	retlw	84	;'T'
 10952  397E  3448               	retlw	72	;'H'
 10953  397F  3441               	retlw	65	;'A'
 10954  3980  3454               	retlw	84	;'T'
 10955  3981  3420               	retlw	32	;' '
 10956  3982  3446               	retlw	70	;'F'
 10957  3983  344F               	retlw	79	;'O'
 10958  3984  3452               	retlw	82	;'R'
 10959  3985  3420               	retlw	32	;' '
 10960  3986  3459               	retlw	89	;'Y'
 10961  3987  344F               	retlw	79	;'O'
 10962  3988  3455               	retlw	85	;'U'
 10963  3989  3420               	retlw	32	;' '
 10964  398A  3420               	retlw	32	;' '
 10965  398B  3420               	retlw	32	;' '
 10966  398C  3400               	retlw	0
 10967                           
 10968                           	psect	stringtext14
 10969  398D                     __pstringtext14:	
 10970  398D                     STR_81:	
 10971  398D  3459               	retlw	89	;'Y'
 10972  398E  344F               	retlw	79	;'O'
 10973  398F  3455               	retlw	85	;'U'
 10974  3990  3420               	retlw	32	;' '
 10975  3991  3453               	retlw	83	;'S'
 10976  3992  3454               	retlw	84	;'T'
 10977  3993  3441               	retlw	65	;'A'
 10978  3994  3459               	retlw	89	;'Y'
 10979  3995  3420               	retlw	32	;' '
 10980  3996  3449               	retlw	73	;'I'
 10981  3997  344E               	retlw	78	;'N'
 10982  3998  3420               	retlw	32	;' '
 10983  3999  3457               	retlw	87	;'W'
 10984  399A  344F               	retlw	79	;'O'
 10985  399B  344E               	retlw	78	;'N'
 10986  399C  3444               	retlw	68	;'D'
 10987  399D  3445               	retlw	69	;'E'
 10988  399E  3452               	retlw	82	;'R'
 10989  399F  344C               	retlw	76	;'L'
 10990  39A0  3441               	retlw	65	;'A'
 10991  39A1  344E               	retlw	78	;'N'
 10992  39A2  3444               	retlw	68	;'D'
 10993  39A3  3420               	retlw	32	;' '
 10994  39A4  3420               	retlw	32	;' '
 10995  39A5  3420               	retlw	32	;' '
 10996  39A6  3420               	retlw	32	;' '
 10997  39A7  3400               	retlw	0
 10998                           
 10999                           	psect	stringtext15
 11000  39A8                     __pstringtext15:	
 11001  39A8                     STR_24:	
 11002  39A8  344E               	retlw	78	;'N'
 11003  39A9  344F               	retlw	79	;'O'
 11004  39AA  3454               	retlw	84	;'T'
 11005  39AB  3448               	retlw	72	;'H'
 11006  39AC  3449               	retlw	73	;'I'
 11007  39AD  344E               	retlw	78	;'N'
 11008  39AE  3447               	retlw	71	;'G'
 11009  39AF  3420               	retlw	32	;' '
 11010  39B0  3454               	retlw	84	;'T'
 11011  39B1  344F               	retlw	79	;'O'
 11012  39B2  3420               	retlw	32	;' '
 11013  39B3  3453               	retlw	83	;'S'
 11014  39B4  3445               	retlw	69	;'E'
 11015  39B5  3445               	retlw	69	;'E'
 11016  39B6  3420               	retlw	32	;' '
 11017  39B7  3448               	retlw	72	;'H'
 11018  39B8  3445               	retlw	69	;'E'
 11019  39B9  3452               	retlw	82	;'R'
 11020  39BA  3445               	retlw	69	;'E'
 11021  39BB  342E               	retlw	46	;'.'
 11022  39BC  342E               	retlw	46	;'.'
 11023  39BD  342E               	retlw	46	;'.'
 11024  39BE  3420               	retlw	32	;' '
 11025  39BF  3420               	retlw	32	;' '
 11026  39C0  3420               	retlw	32	;' '
 11027  39C1  3420               	retlw	32	;' '
 11028  39C2  3400               	retlw	0
 11029                           
 11030                           	psect	stringtext16
 11031  39C3                     __pstringtext16:	
 11032  39C3                     STR_17:	
 11033  39C3  3448               	retlw	72	;'H'
 11034  39C4  3454               	retlw	84	;'T'
 11035  39C5  3454               	retlw	84	;'T'
 11036  39C6  3450               	retlw	80	;'P'
 11037  39C7  3420               	retlw	32	;' '
 11038  39C8  3434               	retlw	52	;'4'
 11039  39C9  3431               	retlw	49	;'1'
 11040  39CA  3438               	retlw	56	;'8'
 11041  39CB  3420               	retlw	32	;' '
 11042  39CC  3449               	retlw	73	;'I'
 11043  39CD  3427               	retlw	39	;'''
 11044  39CE  344D               	retlw	77	;'M'
 11045  39CF  3420               	retlw	32	;' '
 11046  39D0  3441               	retlw	65	;'A'
 11047  39D1  3420               	retlw	32	;' '
 11048  39D2  3454               	retlw	84	;'T'
 11049  39D3  3445               	retlw	69	;'E'
 11050  39D4  3441               	retlw	65	;'A'
 11051  39D5  3450               	retlw	80	;'P'
 11052  39D6  344F               	retlw	79	;'O'
 11053  39D7  3454               	retlw	84	;'T'
 11054  39D8  3420               	retlw	32	;' '
 11055  39D9  3420               	retlw	32	;' '
 11056  39DA  3420               	retlw	32	;' '
 11057  39DB  3420               	retlw	32	;' '
 11058  39DC  3400               	retlw	0
 11059                           
 11060                           	psect	stringtext17
 11061  39DD                     __pstringtext17:	
 11062  39DD                     STR_82:	
 11063  39DD  3454               	retlw	84	;'T'
 11064  39DE  3448               	retlw	72	;'H'
 11065  39DF  3445               	retlw	69	;'E'
 11066  39E0  3420               	retlw	32	;' '
 11067  39E1  3443               	retlw	67	;'C'
 11068  39E2  3448               	retlw	72	;'H'
 11069  39E3  344F               	retlw	79	;'O'
 11070  39E4  3449               	retlw	73	;'I'
 11071  39E5  3443               	retlw	67	;'C'
 11072  39E6  3445               	retlw	69	;'E'
 11073  39E7  3420               	retlw	32	;' '
 11074  39E8  3449               	retlw	73	;'I'
 11075  39E9  3453               	retlw	83	;'S'
 11076  39EA  3420               	retlw	32	;' '
 11077  39EB  3459               	retlw	89	;'Y'
 11078  39EC  344F               	retlw	79	;'O'
 11079  39ED  3455               	retlw	85	;'U'
 11080  39EE  3452               	retlw	82	;'R'
 11081  39EF  3453               	retlw	83	;'S'
 11082  39F0  3420               	retlw	32	;' '
 11083  39F1  3420               	retlw	32	;' '
 11084  39F2  3420               	retlw	32	;' '
 11085  39F3  3400               	retlw	0
 11086                           
 11087                           	psect	stringtext18
 11088  39F4                     __pstringtext18:	
 11089  39F4                     STR_19:	
 11090  39F4  3449               	retlw	73	;'I'
 11091  39F5  3420               	retlw	32	;' '
 11092  39F6  3441               	retlw	65	;'A'
 11093  39F7  344D               	retlw	77	;'M'
 11094  39F8  3420               	retlw	32	;' '
 11095  39F9  344A               	retlw	74	;'J'
 11096  39FA  3455               	retlw	85	;'U'
 11097  39FB  3453               	retlw	83	;'S'
 11098  39FC  3454               	retlw	84	;'T'
 11099  39FD  3420               	retlw	32	;' '
 11100  39FE  3441               	retlw	65	;'A'
 11101  39FF  3420               	retlw	32	;' '
 11102  3A00  3442               	retlw	66	;'B'
 11103  3A01  3441               	retlw	65	;'A'
 11104  3A02  3444               	retlw	68	;'D'
 11105  3A03  3447               	retlw	71	;'G'
 11106  3A04  3445               	retlw	69	;'E'
 11107  3A05  3420               	retlw	32	;' '
 11108  3A06  3420               	retlw	32	;' '
 11109  3A07  3420               	retlw	32	;' '
 11110  3A08  3420               	retlw	32	;' '
 11111  3A09  3400               	retlw	0
 11112                           
 11113                           	psect	stringtext19
 11114  3A0A                     __pstringtext19:	
 11115  3A0A                     STR_16:	
 11116  3A0A  3457               	retlw	87	;'W'
 11117  3A0B  3449               	retlw	73	;'I'
 11118  3A0C  344C               	retlw	76	;'L'
 11119  3A0D  344C               	retlw	76	;'L'
 11120  3A0E  3420               	retlw	32	;' '
 11121  3A0F  3448               	retlw	72	;'H'
 11122  3A10  3441               	retlw	65	;'A'
 11123  3A11  3443               	retlw	67	;'C'
 11124  3A12  344B               	retlw	75	;'K'
 11125  3A13  3420               	retlw	32	;' '
 11126  3A14  3446               	retlw	70	;'F'
 11127  3A15  344F               	retlw	79	;'O'
 11128  3A16  3452               	retlw	82	;'R'
 11129  3A17  3420               	retlw	32	;' '
 11130  3A18  3441               	retlw	65	;'A'
 11131  3A19  342F               	retlw	47	;'/'
 11132  3A1A  3443               	retlw	67	;'C'
 11133  3A1B  3420               	retlw	32	;' '
 11134  3A1C  3420               	retlw	32	;' '
 11135  3A1D  3420               	retlw	32	;' '
 11136  3A1E  3400               	retlw	0
 11137                           
 11138                           	psect	stringtext20
 11139  3A1F                     __pstringtext20:	
 11140  3A1F                     STR_27:	
 11141  3A1F  3442               	retlw	66	;'B'
 11142  3A20  3445               	retlw	69	;'E'
 11143  3A21  344C               	retlw	76	;'L'
 11144  3A22  3449               	retlw	73	;'I'
 11145  3A23  3445               	retlw	69	;'E'
 11146  3A24  3456               	retlw	86	;'V'
 11147  3A25  3445               	retlw	69	;'E'
 11148  3A26  3420               	retlw	32	;' '
 11149  3A27  3454               	retlw	84	;'T'
 11150  3A28  3448               	retlw	72	;'H'
 11151  3A29  3445               	retlw	69	;'E'
 11152  3A2A  3420               	retlw	32	;' '
 11153  3A2B  344C               	retlw	76	;'L'
 11154  3A2C  3449               	retlw	73	;'I'
 11155  3A2D  3445               	retlw	69	;'E'
 11156  3A2E  3420               	retlw	32	;' '
 11157  3A2F  3420               	retlw	32	;' '
 11158  3A30  3420               	retlw	32	;' '
 11159  3A31  3400               	retlw	0
 11160                           
 11161                           	psect	stringtext21
 11162  3A32                     __pstringtext21:	
 11163  3A32                     STR_15:	
 11164  3A32  3448               	retlw	72	;'H'
 11165  3A33  3441               	retlw	65	;'A'
 11166  3A34  3443               	retlw	67	;'C'
 11167  3A35  344B               	retlw	75	;'K'
 11168  3A36  3420               	retlw	32	;' '
 11169  3A37  3454               	retlw	84	;'T'
 11170  3A38  3448               	retlw	72	;'H'
 11171  3A39  3445               	retlw	69	;'E'
 11172  3A3A  3420               	retlw	32	;' '
 11173  3A3B  3450               	retlw	80	;'P'
 11174  3A3C  344C               	retlw	76	;'L'
 11175  3A3D  3441               	retlw	65	;'A'
 11176  3A3E  344E               	retlw	78	;'N'
 11177  3A3F  3445               	retlw	69	;'E'
 11178  3A40  3454               	retlw	84	;'T'
 11179  3A41  3420               	retlw	32	;' '
 11180  3A42  3420               	retlw	32	;' '
 11181  3A43  3420               	retlw	32	;' '
 11182  3A44  3400               	retlw	0
 11183                           
 11184                           	psect	stringtext22
 11185  3A45                     __pstringtext22:	
 11186  3A45                     STR_10:	
 11187  3A45  3405               	retlw	5
 11188  3A46  3407               	retlw	7
 11189  3A47  3407               	retlw	7
 11190  3A48  3408               	retlw	8
 11191  3A49  342D               	retlw	45	;'-'
 11192  3A4A  342D               	retlw	45	;'-'
 11193  3A4B  3420               	retlw	32	;' '
 11194  3A4C  3420               	retlw	32	;' '
 11195  3A4D  342D               	retlw	45	;'-'
 11196  3A4E  342D               	retlw	45	;'-'
 11197  3A4F  3409               	retlw	9
 11198  3A50  3407               	retlw	7
 11199  3A51  3407               	retlw	7
 11200  3A52  3406               	retlw	6
 11201  3A53  3420               	retlw	32	;' '
 11202  3A54  340B               	retlw	11
 11203  3A55  3420               	retlw	32	;' '
 11204  3A56  3400               	retlw	0
 11205                           
 11206                           	psect	stringtext23
 11207  3A57                     __pstringtext23:	
 11208  3A57                     STR_26:	
 11209  3A57  3464               	retlw	100	;'d'
 11210  3A58  3465               	retlw	101	;'e'
 11211  3A59  346E               	retlw	110	;'n'
 11212  3A5A  3479               	retlw	121	;'y'
 11213  3A5B  3420               	retlw	32	;' '
 11214  3A5C  3461               	retlw	97	;'a'
 11215  3A5D  346E               	retlw	110	;'n'
 11216  3A5E  3479               	retlw	121	;'y'
 11217  3A5F  3420               	retlw	32	;' '
 11218  3A60  3461               	retlw	97	;'a'
 11219  3A61  346E               	retlw	110	;'n'
 11220  3A62  3479               	retlw	121	;'y'
 11221  3A63  3420               	retlw	32	;' '
 11222  3A64  3420               	retlw	32	;' '
 11223  3A65  3420               	retlw	32	;' '
 11224  3A66  3420               	retlw	32	;' '
 11225  3A67  3400               	retlw	0
 11226                           
 11227                           	psect	stringtext24
 11228  3A68                     __pstringtext24:	
 11229  3A68                     STR_35:	
 11230  3A68  3442               	retlw	66	;'B'
 11231  3A69  3455               	retlw	85	;'U'
 11232  3A6A  3454               	retlw	84	;'T'
 11233  3A6B  3454               	retlw	84	;'T'
 11234  3A6C  3445               	retlw	69	;'E'
 11235  3A6D  3452               	retlw	82	;'R'
 11236  3A6E  3420               	retlw	32	;' '
 11237  3A6F  3445               	retlw	69	;'E'
 11238  3A70  344D               	retlw	77	;'M'
 11239  3A71  3441               	retlw	65	;'A'
 11240  3A72  3449               	retlw	73	;'I'
 11241  3A73  344C               	retlw	76	;'L'
 11242  3A74  3453               	retlw	83	;'S'
 11243  3A75  3420               	retlw	32	;' '
 11244  3A76  3420               	retlw	32	;' '
 11245  3A77  3420               	retlw	32	;' '
 11246  3A78  3400               	retlw	0
 11247                           
 11248                           	psect	stringtext25
 11249  3A79                     __pstringtext25:	
 11250  3A79                     STR_32:	
 11251  3A79  3454               	retlw	84	;'T'
 11252  3A7A  3452               	retlw	82	;'R'
 11253  3A7B  3455               	retlw	85	;'U'
 11254  3A7C  3453               	retlw	83	;'S'
 11255  3A7D  3454               	retlw	84	;'T'
 11256  3A7E  3420               	retlw	32	;' '
 11257  3A7F  344E               	retlw	78	;'N'
 11258  3A80  344F               	retlw	79	;'O'
 11259  3A81  3420               	retlw	32	;' '
 11260  3A82  344F               	retlw	79	;'O'
 11261  3A83  344E               	retlw	78	;'N'
 11262  3A84  3445               	retlw	69	;'E'
 11263  3A85  3420               	retlw	32	;' '
 11264  3A86  3420               	retlw	32	;' '
 11265  3A87  3420               	retlw	32	;' '
 11266  3A88  3400               	retlw	0
 11267                           
 11268                           	psect	stringtext26
 11269  3A89                     __pstringtext26:	
 11270  3A89                     STR_30:	
 11271  3A89  3448               	retlw	72	;'H'
 11272  3A8A  3449               	retlw	73	;'I'
 11273  3A8B  3453               	retlw	83	;'S'
 11274  3A8C  3454               	retlw	84	;'T'
 11275  3A8D  344F               	retlw	79	;'O'
 11276  3A8E  3452               	retlw	82	;'R'
 11277  3A8F  3459               	retlw	89	;'Y'
 11278  3A90  3420               	retlw	32	;' '
 11279  3A91  342D               	retlw	45	;'-'
 11280  3A92  3443               	retlw	67	;'C'
 11281  3A93  3457               	retlw	87	;'W'
 11282  3A94  3420               	retlw	32	;' '
 11283  3A95  3420               	retlw	32	;' '
 11284  3A96  3420               	retlw	32	;' '
 11285  3A97  3400               	retlw	0
 11286                           
 11287                           	psect	stringtext27
 11288  3A98                     __pstringtext27:	
 11289  3A98                     STR_62:	
 11290  3A98  3446               	retlw	70	;'F'
 11291  3A99  3449               	retlw	73	;'I'
 11292  3A9A  3452               	retlw	82	;'R'
 11293  3A9B  3445               	retlw	69	;'E'
 11294  3A9C  3420               	retlw	32	;' '
 11295  3A9D  3442               	retlw	66	;'B'
 11296  3A9E  3441               	retlw	65	;'A'
 11297  3A9F  344C               	retlw	76	;'L'
 11298  3AA0  344C               	retlw	76	;'L'
 11299  3AA1  3420               	retlw	32	;' '
 11300  3AA2  3420               	retlw	32	;' '
 11301  3AA3  3420               	retlw	32	;' '
 11302  3AA4  3400               	retlw	0
 11303                           
 11304                           	psect	stringtext28
 11305  3AA5                     __pstringtext28:	
 11306  3AA5                     STR_42:	
 11307  3AA5  3455               	retlw	85	;'U'
 11308  3AA6  344E               	retlw	78	;'N'
 11309  3AA7  344C               	retlw	76	;'L'
 11310  3AA8  344F               	retlw	79	;'O'
 11311  3AA9  3443               	retlw	67	;'C'
 11312  3AAA  344B               	retlw	75	;'K'
 11313  3AAB  3449               	retlw	73	;'I'
 11314  3AAC  344E               	retlw	78	;'N'
 11315  3AAD  3447               	retlw	71	;'G'
 11316  3AAE  342E               	retlw	46	;'.'
 11317  3AAF  342E               	retlw	46	;'.'
 11318  3AB0  342E               	retlw	46	;'.'
 11319  3AB1  3400               	retlw	0
 11320                           
 11321                           	psect	stringtext29
 11322  3AB2                     __pstringtext29:	
 11323  3AB2                     STR_37:	
 11324  3AB2  3442               	retlw	66	;'B'
 11325  3AB3  3441               	retlw	65	;'A'
 11326  3AB4  3442               	retlw	66	;'B'
 11327  3AB5  3441               	retlw	65	;'A'
 11328  3AB6  3420               	retlw	32	;' '
 11329  3AB7  3457               	retlw	87	;'W'
 11330  3AB8  3445               	retlw	69	;'E'
 11331  3AB9  3452               	retlw	82	;'R'
 11332  3ABA  344B               	retlw	75	;'K'
 11333  3ABB  3420               	retlw	32	;' '
 11334  3ABC  3420               	retlw	32	;' '
 11335  3ABD  3420               	retlw	32	;' '
 11336  3ABE  3400               	retlw	0
 11337                           
 11338                           	psect	stringtext30
 11339  3ABF                     __pstringtext30:	
 11340  3ABF                     STR_61:	
 11341  3ABF  3452               	retlw	82	;'R'
 11342  3AC0  3445               	retlw	69	;'E'
 11343  3AC1  3444               	retlw	68	;'D'
 11344  3AC2  3420               	retlw	32	;' '
 11345  3AC3  3442               	retlw	66	;'B'
 11346  3AC4  3455               	retlw	85	;'U'
 11347  3AC5  344C               	retlw	76	;'L'
 11348  3AC6  344C               	retlw	76	;'L'
 11349  3AC7  3420               	retlw	32	;' '
 11350  3AC8  3420               	retlw	32	;' '
 11351  3AC9  3420               	retlw	32	;' '
 11352  3ACA  3400               	retlw	0
 11353                           
 11354                           	psect	stringtext31
 11355  3ACB                     __pstringtext31:	
 11356  3ACB                     STR_29:	
 11357  3ACB  3452               	retlw	82	;'R'
 11358  3ACC  344D               	retlw	77	;'M'
 11359  3ACD  3420               	retlw	32	;' '
 11360  3ACE  342D               	retlw	45	;'-'
 11361  3ACF  3452               	retlw	82	;'R'
 11362  3AD0  3446               	retlw	70	;'F'
 11363  3AD1  3420               	retlw	32	;' '
 11364  3AD2  342F               	retlw	47	;'/'
 11365  3AD3  3420               	retlw	32	;' '
 11366  3AD4  3420               	retlw	32	;' '
 11367  3AD5  3420               	retlw	32	;' '
 11368  3AD6  3400               	retlw	0
 11369                           
 11370                           	psect	stringtext32
 11371  3AD7                     __pstringtext32:	
 11372  3AD7                     STR_59:	
 11373  3AD7  3454               	retlw	84	;'T'
 11374  3AD8  3445               	retlw	69	;'E'
 11375  3AD9  3451               	retlw	81	;'Q'
 11376  3ADA  3455               	retlw	85	;'U'
 11377  3ADB  3449               	retlw	73	;'I'
 11378  3ADC  344C               	retlw	76	;'L'
 11379  3ADD  3441               	retlw	65	;'A'
 11380  3ADE  3420               	retlw	32	;' '
 11381  3ADF  3420               	retlw	32	;' '
 11382  3AE0  3420               	retlw	32	;' '
 11383  3AE1  3400               	retlw	0
 11384                           
 11385                           	psect	stringtext33
 11386  3AE2                     __pstringtext33:	
 11387  3AE2                     STR_58:	
 11388  3AE2  3457               	retlw	87	;'W'
 11389  3AE3  3448               	retlw	72	;'H'
 11390  3AE4  3449               	retlw	73	;'I'
 11391  3AE5  3453               	retlw	83	;'S'
 11392  3AE6  344B               	retlw	75	;'K'
 11393  3AE7  3445               	retlw	69	;'E'
 11394  3AE8  3459               	retlw	89	;'Y'
 11395  3AE9  3420               	retlw	32	;' '
 11396  3AEA  3420               	retlw	32	;' '
 11397  3AEB  3420               	retlw	32	;' '
 11398  3AEC  3400               	retlw	0
 11399                           
 11400                           	psect	stringtext34
 11401  3AED                     __pstringtext34:	
 11402  3AED                     STR_75:	
 11403  3AED  3420               	retlw	32	;' '
 11404  3AEE  3420               	retlw	32	;' '
 11405  3AEF  3442               	retlw	66	;'B'
 11406  3AF0  3449               	retlw	73	;'I'
 11407  3AF1  3454               	retlw	84	;'T'
 11408  3AF2  3420               	retlw	32	;' '
 11409  3AF3  344E               	retlw	78	;'N'
 11410  3AF4  3420               	retlw	32	;' '
 11411  3AF5  3420               	retlw	32	;' '
 11412  3AF6  3400               	retlw	0
 11413                           
 11414                           	psect	stringtext35
 11415  3AF7                     __pstringtext35:	
 11416  3AF7                     STR_6:	
 11417  3AF7  3450               	retlw	80	;'P'
 11418  3AF8  3441               	retlw	65	;'A'
 11419  3AF9  3453               	retlw	83	;'S'
 11420  3AFA  3453               	retlw	83	;'S'
 11421  3AFB  3457               	retlw	87	;'W'
 11422  3AFC  344F               	retlw	79	;'O'
 11423  3AFD  3452               	retlw	82	;'R'
 11424  3AFE  3444               	retlw	68	;'D'
 11425  3AFF  3420               	retlw	32	;' '
 11426  3B00  3400               	retlw	0
 11427                           
 11428                           	psect	stringtext36
 11429  3B01                     __pstringtext36:	
 11430  3B01                     STR_72:	
 11431  3B01  3420               	retlw	32	;' '
 11432  3B02  3454               	retlw	84	;'T'
 11433  3B03  3448               	retlw	72	;'H'
 11434  3B04  3445               	retlw	69	;'E'
 11435  3B05  3420               	retlw	32	;' '
 11436  3B06  3457               	retlw	87	;'W'
 11437  3B07  3448               	retlw	72	;'H'
 11438  3B08  3420               	retlw	32	;' '
 11439  3B09  3400               	retlw	0
 11440                           
 11441                           	psect	stringtext37
 11442  3B0A                     __pstringtext37:	
 11443  3B0A                     STR_57:	
 11444  3B0A  3456               	retlw	86	;'V'
 11445  3B0B  344F               	retlw	79	;'O'
 11446  3B0C  3444               	retlw	68	;'D'
 11447  3B0D  344B               	retlw	75	;'K'
 11448  3B0E  3441               	retlw	65	;'A'
 11449  3B0F  3420               	retlw	32	;' '
 11450  3B10  3420               	retlw	32	;' '
 11451  3B11  3420               	retlw	32	;' '
 11452  3B12  3400               	retlw	0
 11453                           
 11454                           	psect	stringtext38
 11455  3B13                     __pstringtext38:	
 11456  3B13                     STR_63:	
 11457  3B13  3457               	retlw	87	;'W'
 11458  3B14  3441               	retlw	65	;'A'
 11459  3B15  3454               	retlw	84	;'T'
 11460  3B16  3445               	retlw	69	;'E'
 11461  3B17  3452               	retlw	82	;'R'
 11462  3B18  3420               	retlw	32	;' '
 11463  3B19  3420               	retlw	32	;' '
 11464  3B1A  3420               	retlw	32	;' '
 11465  3B1B  3400               	retlw	0
 11466                           
 11467                           	psect	stringtext39
 11468  3B1C                     __pstringtext39:	
 11469  3B1C                     STR_64:	
 11470  3B1C  3425               	retlw	37	;'%'
 11471  3B1D  3463               	retlw	99	;'c'
 11472  3B1E  3425               	retlw	37	;'%'
 11473  3B1F  3463               	retlw	99	;'c'
 11474  3B20  3425               	retlw	37	;'%'
 11475  3B21  3463               	retlw	99	;'c'
 11476  3B22  3425               	retlw	37	;'%'
 11477  3B23  3463               	retlw	99	;'c'
 11478  3B24  3400               	retlw	0
 11479                           
 11480                           	psect	stringtext40
 11481  3B25                     __pstringtext40:	
 11482  3B25                     STR_12:	
 11483  3B25  344E               	retlw	78	;'N'
 11484  3B26  3455               	retlw	85	;'U'
 11485  3B27  344C               	retlw	76	;'L'
 11486  3B28  344C               	retlw	76	;'L'
 11487  3B29  3449               	retlw	73	;'I'
 11488  3B2A  3446               	retlw	70	;'F'
 11489  3B2B  3459               	retlw	89	;'Y'
 11490  3B2C  3420               	retlw	32	;' '
 11491  3B2D  3400               	retlw	0
 11492                           
 11493                           	psect	stringtext41
 11494  3B2E                     __pstringtext41:	
 11495  3B2E                     STR_77:	
 11496  3B2E  3450               	retlw	80	;'P'
 11497  3B2F  344F               	retlw	79	;'O'
 11498  3B30  3454               	retlw	84	;'T'
 11499  3B31  3441               	retlw	65	;'A'
 11500  3B32  3454               	retlw	84	;'T'
 11501  3B33  3420               	retlw	32	;' '
 11502  3B34  3420               	retlw	32	;' '
 11503  3B35  3400               	retlw	0
 11504                           
 11505                           	psect	stringtext42
 11506  3B36                     __pstringtext42:	
 11507  3B36                     STR_79:	
 11508  3B36  3420               	retlw	32	;' '
 11509  3B37  3420               	retlw	32	;' '
 11510  3B38  3454               	retlw	84	;'T'
 11511  3B39  3445               	retlw	69	;'E'
 11512  3B3A  3459               	retlw	89	;'Y'
 11513  3B3B  3420               	retlw	32	;' '
 11514  3B3C  3420               	retlw	32	;' '
 11515  3B3D  3400               	retlw	0
 11516                           
 11517                           	psect	stringtext43
 11518  3B3E                     __pstringtext43:	
 11519  3B3E                     STR_60:	
 11520  3B3E  3443               	retlw	67	;'C'
 11521  3B3F  3448               	retlw	72	;'H'
 11522  3B40  3455               	retlw	85	;'U'
 11523  3B41  3447               	retlw	71	;'G'
 11524  3B42  3420               	retlw	32	;' '
 11525  3B43  3420               	retlw	32	;' '
 11526  3B44  3420               	retlw	32	;' '
 11527  3B45  3400               	retlw	0
 11528                           
 11529                           	psect	stringtext44
 11530  3B46                     __pstringtext44:	
 11531  3B46                     STR_56:	
 11532  3B46  3442               	retlw	66	;'B'
 11533  3B47  3445               	retlw	69	;'E'
 11534  3B48  3445               	retlw	69	;'E'
 11535  3B49  3452               	retlw	82	;'R'
 11536  3B4A  3420               	retlw	32	;' '
 11537  3B4B  3420               	retlw	32	;' '
 11538  3B4C  3420               	retlw	32	;' '
 11539  3B4D  3400               	retlw	0
 11540                           
 11541                           	psect	stringtext45
 11542  3B4E                     __pstringtext45:	
 11543  3B4E                     STR_55:	
 11544  3B4E  3453               	retlw	83	;'S'
 11545  3B4F  3448               	retlw	72	;'H'
 11546  3B50  344F               	retlw	79	;'O'
 11547  3B51  3454               	retlw	84	;'T'
 11548  3B52  3420               	retlw	32	;' '
 11549  3B53  3420               	retlw	32	;' '
 11550  3B54  3420               	retlw	32	;' '
 11551  3B55  3400               	retlw	0
 11552                           
 11553                           	psect	stringtext46
 11554  3B56                     __pstringtext46:	
 11555  3B56                     STR_18:	
 11556  3B56  3449               	retlw	73	;'I'
 11557  3B57  3450               	retlw	80	;'P'
 11558  3B58  346F               	retlw	111	;'o'
 11559  3B59  3441               	retlw	65	;'A'
 11560  3B5A  3443               	retlw	67	;'C'
 11561  3B5B  3420               	retlw	32	;' '
 11562  3B5C  3420               	retlw	32	;' '
 11563  3B5D  3400               	retlw	0
 11564                           
 11565                           	psect	stringtext47
 11566  3B5E                     __pstringtext47:	
 11567  3B5E                     STR_13:	
 11568  3B5E  3444               	retlw	68	;'D'
 11569  3B5F  3445               	retlw	69	;'E'
 11570  3B60  3446               	retlw	70	;'F'
 11571  3B61  3443               	retlw	67	;'C'
 11572  3B62  344F               	retlw	79	;'O'
 11573  3B63  344E               	retlw	78	;'N'
 11574  3B64  3420               	retlw	32	;' '
 11575  3B65  3400               	retlw	0
 11576                           
 11577                           	psect	stringtext48
 11578  3B66                     __pstringtext48:	
 11579  3B66                     STR_7:	
 11580  3B66  344D               	retlw	77	;'M'
 11581  3B67  3441               	retlw	65	;'A'
 11582  3B68  3454               	retlw	84	;'T'
 11583  3B69  3452               	retlw	82	;'R'
 11584  3B6A  3449               	retlw	73	;'I'
 11585  3B6B  3458               	retlw	88	;'X'
 11586  3B6C  3420               	retlw	32	;' '
 11587  3B6D  3400               	retlw	0
 11588                           
 11589                           	psect	stringtext49
 11590  3B6E                     __pstringtext49:	
 11591  3B6E                     STR_83:	
 11592  3B6E  3428               	retlw	40	;'('
 11593  3B6F  346E               	retlw	110	;'n'
 11594  3B70  3475               	retlw	117	;'u'
 11595  3B71  346C               	retlw	108	;'l'
 11596  3B72  346C               	retlw	108	;'l'
 11597  3B73  3429               	retlw	41	;')'
 11598  3B74  3400               	retlw	0
 11599                           
 11600                           	psect	stringtext50
 11601  3B75                     __pstringtext50:	
 11602  3B75                     STR_71:	
 11603  3B75  344F               	retlw	79	;'O'
 11604  3B76  3457               	retlw	87	;'W'
 11605  3B77  3420               	retlw	32	;' '
 11606  3B78  3420               	retlw	32	;' '
 11607  3B79  3420               	retlw	32	;' '
 11608  3B7A  3420               	retlw	32	;' '
 11609  3B7B  3400               	retlw	0
 11610                           
 11611                           	psect	stringtext51
 11612  3B7C                     __pstringtext51:	
 11613  3B7C                     STR_73:	
 11614  3B7C  3449               	retlw	73	;'I'
 11615  3B7D  3454               	retlw	84	;'T'
 11616  3B7E  3445               	retlw	69	;'E'
 11617  3B7F  3420               	retlw	32	;' '
 11618  3B80  3420               	retlw	32	;' '
 11619  3B81  3420               	retlw	32	;' '
 11620  3B82  3400               	retlw	0
 11621                           
 11622                           	psect	stringtext52
 11623  3B83                     __pstringtext52:	
 11624  3B83                     STR_78:	
 11625  3B83  3420               	retlw	32	;' '
 11626  3B84  3420               	retlw	32	;' '
 11627  3B85  3445               	retlw	69	;'E'
 11628  3B86  3457               	retlw	87	;'W'
 11629  3B87  3420               	retlw	32	;' '
 11630  3B88  3420               	retlw	32	;' '
 11631  3B89  3400               	retlw	0
 11632                           
 11633                           	psect	stringtext53
 11634  3B8A                     __pstringtext53:	
 11635  3B8A                     STR_70:	
 11636  3B8A  3420               	retlw	32	;' '
 11637  3B8B  3420               	retlw	32	;' '
 11638  3B8C  3446               	retlw	70	;'F'
 11639  3B8D  344F               	retlw	79	;'O'
 11640  3B8E  344C               	retlw	76	;'L'
 11641  3B8F  344C               	retlw	76	;'L'
 11642  3B90  3400               	retlw	0
 11643                           
 11644                           	psect	stringtext54
 11645  3B91                     __pstringtext54:	
 11646  3B91                     STR_76:	
 11647  3B91  3445               	retlw	69	;'E'
 11648  3B92  344F               	retlw	79	;'O'
 11649  3B93  3420               	retlw	32	;' '
 11650  3B94  3420               	retlw	32	;' '
 11651  3B95  3420               	retlw	32	;' '
 11652  3B96  3400               	retlw	0
 11653                           
 11654                           	psect	stringtext55
 11655  3B97                     __pstringtext55:	
 11656  3B97                     STR_14:	
 11657  3B97  3448               	retlw	72	;'H'
 11658  3B98  3441               	retlw	65	;'A'
 11659  3B99  3458               	retlw	88	;'X'
 11660  3B9A  3420               	retlw	32	;' '
 11661  3B9B  3420               	retlw	32	;' '
 11662  3B9C  3400               	retlw	0
 11663                           
 11664                           	psect	stringtext56
 11665  3B9D                     __pstringtext56:	
 11666  3B9D                     STR_8:	
 11667  3B9D  3445               	retlw	69	;'E'
 11668  3B9E  3458               	retlw	88	;'X'
 11669  3B9F  3449               	retlw	73	;'I'
 11670  3BA0  3454               	retlw	84	;'T'
 11671  3BA1  3420               	retlw	32	;' '
 11672  3BA2  3400               	retlw	0
 11673                           
 11674                           	psect	stringtext57
 11675  3BA3                     __pstringtext57:	
 11676  3BA3                     STR_5:	
 11677  3BA3  3453               	retlw	83	;'S'
 11678  3BA4  344C               	retlw	76	;'L'
 11679  3BA5  344F               	retlw	79	;'O'
 11680  3BA6  3454               	retlw	84	;'T'
 11681  3BA7  3420               	retlw	32	;' '
 11682  3BA8  3400               	retlw	0
 11683                           
 11684                           	psect	stringtext58
 11685  3BA9                     __pstringtext58:	
 11686  3BA9                     STR_74:	
 11687  3BA9  3420               	retlw	32	;' '
 11688  3BAA  3452               	retlw	82	;'R'
 11689  3BAB  3441               	retlw	65	;'A'
 11690  3BAC  3442               	retlw	66	;'B'
 11691  3BAD  3400               	retlw	0
 11692                           
 11693                           	psect	stringtext59
 11694  3BAE                     __pstringtext59:	
 11695  3BAE                     STR_48:	
 11696  3BAE  3456               	retlw	86	;'V'
 11697  3BAF  3444               	retlw	68	;'D'
 11698  3BB0  344B               	retlw	75	;'K'
 11699  3BB1  3441               	retlw	65	;'A'
 11700  3BB2  3400               	retlw	0
 11701                           
 11702                           	psect	stringtext60
 11703  3BB3                     __pstringtext60:	
 11704  3BB3                     STR_50:	
 11705  3BB3  3454               	retlw	84	;'T'
 11706  3BB4  3451               	retlw	81	;'Q'
 11707  3BB5  344C               	retlw	76	;'L'
 11708  3BB6  3441               	retlw	65	;'A'
 11709  3BB7  3400               	retlw	0
 11710                           
 11711                           	psect	stringtext61
 11712  3BB8                     __pstringtext61:	
 11713  3BB8                     STR_53:	
 11714  3BB8  3446               	retlw	70	;'F'
 11715  3BB9  3449               	retlw	73	;'I'
 11716  3BBA  3452               	retlw	82	;'R'
 11717  3BBB  3445               	retlw	69	;'E'
 11718  3BBC  3400               	retlw	0
 11719                           
 11720                           	psect	stringtext62
 11721  3BBD                     __pstringtext62:	
 11722  3BBD                     STR_51:	
 11723  3BBD  3443               	retlw	67	;'C'
 11724  3BBE  3448               	retlw	72	;'H'
 11725  3BBF  3455               	retlw	85	;'U'
 11726  3BC0  3447               	retlw	71	;'G'
 11727  3BC1  3400               	retlw	0
 11728                           
 11729                           	psect	stringtext63
 11730  3BC2                     __pstringtext63:	
 11731  3BC2                     STR_52:	
 11732  3BC2  3452               	retlw	82	;'R'
 11733  3BC3  3445               	retlw	69	;'E'
 11734  3BC4  3442               	retlw	66	;'B'
 11735  3BC5  344C               	retlw	76	;'L'
 11736  3BC6  3400               	retlw	0
 11737                           
 11738                           	psect	stringtext64
 11739  3BC7                     __pstringtext64:	
 11740  3BC7                     STR_47:	
 11741  3BC7  3442               	retlw	66	;'B'
 11742  3BC8  3445               	retlw	69	;'E'
 11743  3BC9  3445               	retlw	69	;'E'
 11744  3BCA  3452               	retlw	82	;'R'
 11745  3BCB  3400               	retlw	0
 11746                           
 11747                           	psect	stringtext65
 11748  3BCC                     __pstringtext65:	
 11749  3BCC                     STR_54:	
 11750  3BCC  3457               	retlw	87	;'W'
 11751  3BCD  3441               	retlw	65	;'A'
 11752  3BCE  3454               	retlw	84	;'T'
 11753  3BCF  3452               	retlw	82	;'R'
 11754  3BD0  3400               	retlw	0
 11755                           
 11756                           	psect	stringtext66
 11757  3BD1                     __pstringtext66:	
 11758  3BD1                     STR_46:	
 11759  3BD1  3453               	retlw	83	;'S'
 11760  3BD2  3448               	retlw	72	;'H'
 11761  3BD3  344F               	retlw	79	;'O'
 11762  3BD4  3454               	retlw	84	;'T'
 11763  3BD5  3400               	retlw	0
 11764                           
 11765                           	psect	stringtext67
 11766  3BD6                     __pstringtext67:	
 11767  3BD6                     STR_49:	
 11768  3BD6  3457               	retlw	87	;'W'
 11769  3BD7  3453               	retlw	83	;'S'
 11770  3BD8  344B               	retlw	75	;'K'
 11771  3BD9  3459               	retlw	89	;'Y'
 11772  3BDA  3400               	retlw	0
 11773                           
 11774                           	psect	stringtext68
 11775  3BDB                     __pstringtext68:	
 11776  3BDB                     STR_45:	
 11777  3BDB  344C               	retlw	76	;'L'
 11778  3BDC  344F               	retlw	79	;'O'
 11779  3BDD  3443               	retlw	67	;'C'
 11780  3BDE  344B               	retlw	75	;'K'
 11781  3BDF  3400               	retlw	0
 11782                           
 11783                           	psect	stringtext69
 11784  3BE0                     __pstringtext69:	
 11785  3BE0                     STR_44:	
 11786  3BE0  344F               	retlw	79	;'O'
 11787  3BE1  3450               	retlw	80	;'P'
 11788  3BE2  3445               	retlw	69	;'E'
 11789  3BE3  344E               	retlw	78	;'N'
 11790  3BE4  3400               	retlw	0
 11791                           
 11792                           	psect	stringtext70
 11793  3BE5                     __pstringtext70:	
 11794  3BE5                     STR_40:	
 11795  3BE5  3450               	retlw	80	;'P'
 11796  3BE6  3445               	retlw	69	;'E'
 11797  3BE7  3457               	retlw	87	;'W'
 11798  3BE8  3420               	retlw	32	;' '
 11799  3BE9  3400               	retlw	0
 11800                           
 11801                           	psect	stringtext71
 11802  3BEA                     __pstringtext71:	
 11803  3BEA                     STR_9:	
 11804  3BEA  344E               	retlw	78	;'N'
 11805  3BEB  3455               	retlw	85	;'U'
 11806  3BEC  344C               	retlw	76	;'L'
 11807  3BED  344C               	retlw	76	;'L'
 11808  3BEE  3400               	retlw	0
 11809                           
 11810                           	psect	stringtext72
 11811  3BEF                     __pstringtext72:	
 11812  3BEF                     STR_4:	
 11813  3BEF  344D               	retlw	77	;'M'
 11814  3BF0  3445               	retlw	69	;'E'
 11815  3BF1  344E               	retlw	78	;'N'
 11816  3BF2  3455               	retlw	85	;'U'
 11817  3BF3  3400               	retlw	0
 11818                           
 11819                           	psect	stringtext73
 11820  3BF4                     __pstringtext73:	
 11821  3BF4                     STR_2:	
 11822  3BF4  3444               	retlw	68	;'D'
 11823  3BF5  344F               	retlw	79	;'O'
 11824  3BF6  3457               	retlw	87	;'W'
 11825  3BF7  344E               	retlw	78	;'N'
 11826  3BF8  3400               	retlw	0
 11827                           
 11828                           	psect	stringtext74
 11829  3BF9                     __pstringtext74:	
 11830  3BF9                     STR_1:	
 11831  3BF9  3420               	retlw	32	;' '
 11832  3BFA  3420               	retlw	32	;' '
 11833  3BFB  3455               	retlw	85	;'U'
 11834  3BFC  3450               	retlw	80	;'P'
 11835  3BFD  3400               	retlw	0
 11836                           
 11837                           	psect	stringtext75
 11838  3BFE                     __pstringtext75:	
 11839  3BFE                     STR_41:	
 11840  3BFE  3425               	retlw	37	;'%'
 11841  3BFF  3434               	retlw	52	;'4'
 11842  3C00  3464               	retlw	100	;'d'
 11843  3C01  3400               	retlw	0
 11844                           
 11845                           	psect	stringtext76
 11846  3C02                     __pstringtext76:	
 11847  3C02                     STR_69:	
 11848  3C02  3425               	retlw	37	;'%'
 11849  3C03  3473               	retlw	115	;'s'
 11850  3C04  3400               	retlw	0
 11851                           
 11852                           	psect	stringtext77
 11853  0000                     __pstringtext77:	
 11854  287D                     
 11855                           ; #config settings
 11856  0000                     
 11857                           	psect	cinit
 11858  0018                     start_initialization:	
 11859  0018                     __initialization:		;BIGRAM
 11860                           
 11861                           ; Initialize objects allocated to BIGRAM
 11862  0018  3043               	movlw	low __pidataBIGRAM
 11863  0019  0084               	movwf	4
 11864  001A  30A5               	movlw	(high __pidataBIGRAM)| (0+128)
 11865  001B  0085               	movwf	5
 11866  001C  30F0               	movlw	low (0+9968)
 11867  001D  0086               	movwf	6
 11868  001E  3026               	movlw	high (0+9968)
 11869  001F  0087               	movwf	7
 11870  0020  3001               	movlw	1
 11871  0021  00FF               	movwf	btemp+1
 11872  0022  3000               	movlw	0
 11873  0023  31B4  2472  3180   	fcall	init_ram
 11874                           
 11875                           ; Initialize objects allocated to BANK1
 11876  0026  30AB               	movlw	low __pidataBANK1
 11877  0027  0084               	movwf	4
 11878  0028  30B5               	movlw	(high __pidataBANK1)| (0+128)
 11879  0029  0085               	movwf	5
 11880  002A  30C7               	movlw	low __pdataBANK1
 11881  002B  0086               	movwf	6
 11882  002C  3000               	movlw	high __pdataBANK1
 11883  002D  0087               	movwf	7
 11884  002E  3000               	movlw	0
 11885  002F  00FF               	movwf	btemp+1
 11886  0030  3016               	movlw	22
 11887  0031  31B4  2472  3180   	fcall	init_ram
 11888                           
 11889                           ; Initialize objects allocated to BANK2
 11890  0034  0022               	movlb	2	; select bank2
 11891  0035  3180  2002  3180   	fcall	__pidataBANK2	;fetch initializer
 11892  0038  00E7               	movwf	__pdataBANK2& (0+127)
 11893  0039  3180  2003  3180   	fcall	__pidataBANK2+1	;fetch initializer
 11894  003C  00E8               	movwf	(__pdataBANK2+1)& (0+127)
 11895                           
 11896                           ; Initialize objects allocated to BANK3
 11897  003D  3029               	movlw	low __pidataBANK3
 11898  003E  0084               	movwf	4
 11899  003F  30B6               	movlw	(high __pidataBANK3)| (0+128)
 11900  0040  0085               	movwf	5
 11901  0041  30D1               	movlw	low __pdataBANK3
 11902  0042  0086               	movwf	6
 11903  0043  3001               	movlw	high __pdataBANK3
 11904  0044  0087               	movwf	7
 11905  0045  3000               	movlw	0
 11906  0046  00FF               	movwf	btemp+1
 11907  0047  301C               	movlw	28
 11908  0048  31B4  2472  3180   	fcall	init_ram
 11909                           
 11910                           ; Initialize objects allocated to BANK4
 11911  004B  30C1               	movlw	low __pidataBANK4
 11912  004C  0084               	movwf	4
 11913  004D  30AB               	movlw	(high __pidataBANK4)| (0+128)
 11914  004E  0085               	movwf	5
 11915  004F  3020               	movlw	low __pdataBANK4
 11916  0050  0086               	movwf	6
 11917  0051  3002               	movlw	high __pdataBANK4
 11918  0052  0087               	movwf	7
 11919  0053  3000               	movlw	0
 11920  0054  00FF               	movwf	btemp+1
 11921  0055  3046               	movlw	70
 11922  0056  31B4  2472  3180   	fcall	init_ram
 11923                           
 11924                           ; Initialize objects allocated to BANK5
 11925  0059  3002               	movlw	low __pidataBANK5
 11926  005A  0084               	movwf	4
 11927  005B  30A0               	movlw	(high __pidataBANK5)| (0+128)
 11928  005C  0085               	movwf	5
 11929  005D  30CA               	movlw	low __pdataBANK5
 11930  005E  0086               	movwf	6
 11931  005F  3002               	movlw	high __pdataBANK5
 11932  0060  0087               	movwf	7
 11933  0061  3000               	movlw	0
 11934  0062  00FF               	movwf	btemp+1
 11935  0063  3026               	movlw	38
 11936  0064  31B4  2472  3180   	fcall	init_ram
 11937                           
 11938                           ; Initialize objects allocated to BANK6
 11939  0067  3019               	movlw	low __pidataBANK6
 11940  0068  0084               	movwf	4
 11941  0069  30A9               	movlw	(high __pidataBANK6)| (0+128)
 11942  006A  0085               	movwf	5
 11943  006B  3020               	movlw	low __pdataBANK6
 11944  006C  0086               	movwf	6
 11945  006D  3003               	movlw	high __pdataBANK6
 11946  006E  0087               	movwf	7
 11947  006F  3000               	movlw	0
 11948  0070  00FF               	movwf	btemp+1
 11949  0071  3037               	movlw	55
 11950  0072  31B4  2472  3180   	fcall	init_ram
 11951                           
 11952                           ; Initialize objects allocated to BANK7
 11953  0075  3088               	movlw	low __pidataBANK7
 11954  0076  0084               	movwf	4
 11955  0077  30A9               	movlw	(high __pidataBANK7)| (0+128)
 11956  0078  0085               	movwf	5
 11957  0079  30A0               	movlw	low __pdataBANK7
 11958  007A  0086               	movwf	6
 11959  007B  3003               	movlw	high __pdataBANK7
 11960  007C  0087               	movwf	7
 11961  007D  3000               	movlw	0
 11962  007E  00FF               	movwf	btemp+1
 11963  007F  3038               	movlw	56
 11964  0080  31B4  2472  3180   	fcall	init_ram
 11965                           
 11966                           ; Initialize objects allocated to BANK8
 11967  0083  3050               	movlw	low __pidataBANK8
 11968  0084  0084               	movwf	4
 11969  0085  30A9               	movlw	(high __pidataBANK8)| (0+128)
 11970  0086  0085               	movwf	5
 11971  0087  3020               	movlw	low __pdataBANK8
 11972  0088  0086               	movwf	6
 11973  0089  3004               	movlw	high __pdataBANK8
 11974  008A  0087               	movwf	7
 11975  008B  3000               	movlw	0
 11976  008C  00FF               	movwf	btemp+1
 11977  008D  3038               	movlw	56
 11978  008E  31B4  2472  3180   	fcall	init_ram
 11979                           
 11980                           ; Initialize objects allocated to BANK10
 11981  0091  30F9               	movlw	low __pidataBANK10
 11982  0092  0084               	movwf	4
 11983  0093  30A9               	movlw	(high __pidataBANK10)| (0+128)
 11984  0094  0085               	movwf	5
 11985  0095  3020               	movlw	low __pdataBANK10
 11986  0096  0086               	movwf	6
 11987  0097  3005               	movlw	high __pdataBANK10
 11988  0098  0087               	movwf	7
 11989  0099  3000               	movlw	0
 11990  009A  00FF               	movwf	btemp+1
 11991  009B  303A               	movlw	58
 11992  009C  31B4  2472  3180   	fcall	init_ram
 11993                           
 11994                           ; Clear objects allocated to COMMON
 11995  009F  01FC               	clrf	__pbssCOMMON& (0+127)
 11996                           
 11997                           ; Clear objects allocated to BANK1
 11998  00A0  30A0               	movlw	low __pbssBANK1
 11999  00A1  0084               	movwf	4
 12000  00A2  3000               	movlw	high __pbssBANK1
 12001  00A3  0085               	movwf	5
 12002  00A4  3027               	movlw	39
 12003  00A5  00FE               	movwf	btemp
 12004  00A6  3000               	movlw	0
 12005  00A7  00FF               	movwf	btemp+1
 12006  00A8  31B4  2466  3180   	fcall	clear_ram0
 12007                           
 12008                           ; Clear objects allocated to BANK2
 12009  00AB  3020               	movlw	low __pbssBANK2
 12010  00AC  0084               	movwf	4
 12011  00AD  3001               	movlw	high __pbssBANK2
 12012  00AE  0085               	movwf	5
 12013  00AF  3047               	movlw	71
 12014  00B0  00FE               	movwf	btemp
 12015  00B1  3000               	movlw	0
 12016  00B2  00FF               	movwf	btemp+1
 12017  00B3  31B4  2466  3180   	fcall	clear_ram0
 12018                           
 12019                           ; Clear objects allocated to BANK3
 12020  00B6  30A0               	movlw	low __pbssBANK3
 12021  00B7  0084               	movwf	4
 12022  00B8  3001               	movlw	high __pbssBANK3
 12023  00B9  0085               	movwf	5
 12024  00BA  3031               	movlw	49
 12025  00BB  00FE               	movwf	btemp
 12026  00BC  3000               	movlw	0
 12027  00BD  00FF               	movwf	btemp+1
 12028  00BE  31B4  2466  3180   	fcall	clear_ram0
 12029                           
 12030                           ; Clear objects allocated to BANK5
 12031  00C1  30A0               	movlw	low __pbssBANK5
 12032  00C2  0084               	movwf	4
 12033  00C3  3002               	movlw	high __pbssBANK5
 12034  00C4  0085               	movwf	5
 12035  00C5  302A               	movlw	42
 12036  00C6  00FE               	movwf	btemp
 12037  00C7  3000               	movlw	0
 12038  00C8  00FF               	movwf	btemp+1
 12039  00C9  31B4  2466  3180   	fcall	clear_ram0
 12040                           
 12041                           ; Clear objects allocated to BANK9
 12042  00CC  30A0               	movlw	low __pbssBANK9
 12043  00CD  0084               	movwf	4
 12044  00CE  3004               	movlw	high __pbssBANK9
 12045  00CF  0085               	movwf	5
 12046  00D0  303D               	movlw	61
 12047  00D1  00FE               	movwf	btemp
 12048  00D2  3000               	movlw	0
 12049  00D3  00FF               	movwf	btemp+1
 12050  00D4  31B4  2466  3180   	fcall	clear_ram0
 12051                           
 12052                           ; Clear objects allocated to BANK11
 12053  00D7  30A0               	movlw	low __pbssBANK11
 12054  00D8  0084               	movwf	4
 12055  00D9  3005               	movlw	high __pbssBANK11
 12056  00DA  0085               	movwf	5
 12057  00DB  3028               	movlw	40
 12058  00DC  00FE               	movwf	btemp
 12059  00DD  3000               	movlw	0
 12060  00DE  00FF               	movwf	btemp+1
 12061  00DF  31B4  2466         	fcall	clear_ram0
 12062  00E1                     end_of_initialization:	
 12063                           ;End of C runtime variable initialization code
 12064                           
 12065  00E1                     __end_of__initialization:	
 12066  00E1  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
 12067  00E2  0020               	movlb	0
 12068  00E3  3186  2E61         	ljmp	_main	;jump to C main() function
 12069                           
 12070                           	psect	bssCOMMON
 12071  007C                     __pbssCOMMON:	
 12072  007C                     _Shot_Index:	
 12073  007C                     	ds	1
 12074                           
 12075                           	psect	bssBANK1
 12076  00A0                     __pbssBANK1:	
 12077  00A0                     _matrix_leds_idx:	
 12078  00A0                     	ds	2
 12079  00A2                     _locked_leds:	
 12080  00A2                     	ds	2
 12081  00A4                     _locked_locking_leds_idx:	
 12082  00A4                     	ds	2
 12083  00A6                     _flashy_option_size:	
 12084  00A6                     	ds	2
 12085  00A8                     _flashy_option_idx:	
 12086  00A8                     	ds	2
 12087  00AA                     _deaths:	
 12088  00AA                     	ds	2
 12089  00AC                     _flashy_scroll_rate:	
 12090  00AC                     	ds	2
 12091  00AE                     _flashy_sparkle_rate:	
 12092  00AE                     	ds	2
 12093  00B0                     _flashy_leds_state_track:	
 12094  00B0                     	ds	2
 12095  00B2                     _flashy_leds_idx:	
 12096  00B2                     	ds	2
 12097  00B4                     _menu_option_size:	
 12098  00B4                     	ds	2
 12099  00B6                     _menu_option_idx:	
 12100  00B6                     	ds	2
 12101  00B8                     _oddeven:	
 12102  00B8                     	ds	2
 12103  00BA                     _currentTask:	
 12104  00BA                     	ds	2
 12105  00BC                     _slot_taskData:	
 12106  00BC                     	ds	2
 12107  00BE                     _TMR0_InterruptHandler:	
 12108  00BE                     	ds	2
 12109  00C0                     _timer0ReloadVal16bit:	
 12110  00C0                     	ds	2
 12111  00C2                     _TMR2_InterruptHandler:	
 12112  00C2                     	ds	2
 12113  00C4                     _badge_locked:	
 12114  00C4                     	ds	1
 12115  00C5                     _secret_value:	
 12116  00C5                     	ds	2
 12117                           
 12118                           	psect	dataBANK1
 12119  00C7                     __pdataBANK1:	
 12120  00C7                     _locked_locking_leds:	
 12121  00C7                     	ds	12
 12122  00D3                     _randx:	
 12123  00D3                     	ds	4
 12124  00D7                     _Leds_idx:	
 12125  00D7                     	ds	2
 12126  00D9                     _locked_lock_base_leds:	
 12127  00D9                     	ds	2
 12128  00DB                     _FLASHY_TEXT_SECRET_TEST:	
 12129  00DB                     	ds	2
 12130                           
 12131                           	psect	bssBANK2
 12132  0120                     __pbssBANK2:	
 12133  0120                     _matrix_option_size:	
 12134  0120                     	ds	2
 12135  0122                     _matrix_option_idx:	
 12136  0122                     	ds	2
 12137  0124                     _TMR4_InterruptHandler:	
 12138  0124                     	ds	2
 12139  0126                     _secret_task:	
 12140  0126                     	ds	13
 12141  0133                     _locked_task:	
 12142  0133                     	ds	13
 12143  0140                     _slot_task:	
 12144  0140                     	ds	13
 12145  014D                     _menu_task:	
 12146  014D                     	ds	13
 12147  015A                     _flashy_task:	
 12148  015A                     	ds	13
 12149                           
 12150                           	psect	dataBANK2
 12151  0167                     __pdataBANK2:	
 12152  0167                     _FLASHY_TEXT:	
 12153  0167                     	ds	2
 12154                           
 12155                           	psect	bssBANK3
 12156  01A0                     __pbssBANK3:	
 12157  01A0                     _schedulerInst:	
 12158  01A0                     	ds	18
 12159  01B2                     _badge_inst:	
 12160  01B2                     	ds	18
 12161  01C4                     _matrix_task:	
 12162  01C4                     	ds	13
 12163                           
 12164                           	psect	dataBANK3
 12165  01D1                     __pdataBANK3:	
 12166  01D1                     _Shot_Options:	
 12167  01D1                     	ds	18
 12168  01E3                     marquee@F14099:	
 12169  01E3                     	ds	5
 12170  01E8                     marquee_speedy@F14090:	
 12171  01E8                     	ds	5
 12172                           
 12173                           	psect	dataBANK4
 12174  0220                     __pdataBANK4:	
 12175  0220                     _menu_options_leds:	
 12176  0220                     	ds	10
 12177  022A                     _menu_option:	
 12178  022A                     	ds	10
 12179  0234                     _matrix_secret_inputs:	
 12180  0234                     	ds	25
 12181  024D                     _secret_inputs:	
 12182  024D                     	ds	25
 12183                           
 12184                           	psect	bssBANK5
 12185  02A0                     __pbssBANK5:	
 12186  02A0                     _secret_TaskData:	
 12187  02A0                     	ds	14
 12188  02AE                     _locked_TaskData:	
 12189  02AE                     	ds	14
 12190  02BC                     _menu_TaskData:	
 12191  02BC                     	ds	14
 12192                           
 12193                           	psect	dataBANK5
 12194  02CA                     __pdataBANK5:	
 12195  02CA                     _matrix_option:	
 12196  02CA                     	ds	20
 12197  02DE                     _Shot_Options_Long:	
 12198  02DE                     	ds	18
 12199                           
 12200                           	psect	dataBANK6
 12201  0320                     __pdataBANK6:	
 12202  0320                     _Slot_Wheel:	
 12203  0320                     	ds	55
 12204                           
 12205                           	psect	dataBANK7
 12206  03A0                     __pdataBANK7:	
 12207  03A0                     _roundabout_leds_inverse:	
 12208  03A0                     	ds	28
 12209  03BC                     _roundabout_leds:	
 12210  03BC                     	ds	28
 12211                           
 12212                           	psect	dataBANK8
 12213  0420                     __pdataBANK8:	
 12214  0420                     _curtain_leds_inverse:	
 12215  0420                     	ds	28
 12216  043C                     _curtain_leds:	
 12217  043C                     	ds	28
 12218                           
 12219                           	psect	bssBANK9
 12220  04A0                     __pbssBANK9:	
 12221  04A0                     _matrix_TaskData:	
 12222  04A0                     	ds	31
 12223  04BF                     _flashy_TaskData:	
 12224  04BF                     	ds	30
 12225                           
 12226                           	psect	dataBANK10
 12227  0520                     __pdataBANK10:	
 12228  0520                     _flashy_option:	
 12229  0520                     	ds	58
 12230                           
 12231                           	psect	bssBANK11
 12232  05A0                     __pbssBANK11:	
 12233  05A0                     _slot_TaskData:	
 12234  05A0                     	ds	40
 12235                           
 12236                           	psect	inittext
 12237  3472                     init_ram:	
 12238  3472  00FE               	movwf	126
 12239  3473                     initloop:	
 12240  3473  0012               	moviw fsr0++
 12241  3474  001E               	movwi fsr1++
 12242  3475  3001               	movlw	1
 12243  3476  02FE               	subwf	126,f
 12244  3477  3000               	movlw	0
 12245  3478  3BFF               	subwfb	127,f
 12246  3479  087F               	movf	127,w
 12247  347A  047E               	iorwf	126,w
 12248  347B  1903               	btfsc	3,2
 12249  347C  3400               	retlw	0
 12250  347D  2C73               	goto	initloop
 12251                           
 12252                           	psect	clrtext
 12253  3466                     clear_ram0:	
 12254                           ;	Called with FSR0 containing the base address, and
 12255                           ;	btemp/btemp+1 has the size to clear
 12256                           
 12257  3466  0064               	clrwdt	;clear the watchdog before getting into this loop
 12258  3467                     clrloop0:	
 12259  3467  0180               	clrf	0	;clear RAM location pointed to by FSR
 12260  3468  3101               	addfsr 0,1
 12261  3469  3001               	movlw	1
 12262  346A  02FE               	subwf	126,f
 12263  346B  3000               	movlw	0
 12264  346C  3BFF               	subwfb	127,f
 12265  346D  087F               	movf	127,w
 12266  346E  047E               	iorwf	126,w
 12267  346F  1903               	btfsc	3,2
 12268  3470  3400               	retlw	0	;all done for this memory range, return
 12269  3471  2C67               	goto	clrloop0	;have we reached the end yet?
 12270                           
 12271                           	psect	cstackBANK1
 12272  00DD                     __pcstackBANK1:	
 12273  00DD                     schedulerExecute@currentSystemTick:	
 12274                           
 12275                           ; 2 bytes @ 0x0
 12276  00DD                     	ds	2
 12277  00DF                     schedulerExecute@taskLastSystemTick:	
 12278                           
 12279                           ; 2 bytes @ 0x2
 12280  00DF                     	ds	2
 12281  00E1                     schedulerExecute@tickDelta:	
 12282                           
 12283                           ; 2 bytes @ 0x4
 12284  00E1                     	ds	2
 12285  00E3                     schedulerExecute@scheduler:	
 12286                           
 12287                           ; 1 bytes @ 0x6
 12288  00E3                     	ds	1
 12289  00E4                     schedulerExecute@k:	
 12290                           
 12291                           ; 1 bytes @ 0x7
 12292  00E4                     	ds	1
 12293                           
 12294                           	psect	cstackCOMMON
 12295  0070                     __pcstackCOMMON:	
 12296  0070                     ?_isdigit:	
 12297  0070                     ?_TMR2_StartTimer:	
 12298                           ; 1 bit 
 12299                           
 12300  0070                     ?_TMR4_StartTimer:	
 12301                           ; 1 bytes @ 0x0
 12302                           
 12303  0070                     ?_PIN_MANAGER_Initialize:	
 12304                           ; 1 bytes @ 0x0
 12305                           
 12306  0070                     ?_OSCILLATOR_Initialize:	
 12307                           ; 1 bytes @ 0x0
 12308                           
 12309  0070                     ?_WDT_Initialize:	
 12310                           ; 1 bytes @ 0x0
 12311                           
 12312  0070                     ?_PWM2_Initialize:	
 12313                           ; 1 bytes @ 0x0
 12314                           
 12315  0070                     ?_TMR0_Initialize:	
 12316                           ; 1 bytes @ 0x0
 12317                           
 12318  0070                     ?_TMR0_DefaultInterruptHandler:	
 12319                           ; 1 bytes @ 0x0
 12320                           
 12321  0070                     ??_TMR0_DefaultInterruptHandler:	
 12322                           ; 1 bytes @ 0x0
 12323                           
 12324  0070                     ?_TMR0_StartTimer:	
 12325                           ; 1 bytes @ 0x0
 12326                           
 12327  0070                     ?_TMR0_CallBack:	
 12328                           ; 1 bytes @ 0x0
 12329                           
 12330  0070                     ??_TMR0_CallBack:	
 12331                           ; 1 bytes @ 0x0
 12332                           
 12333  0070                     ?_nullifyBadge_segDisplayRegister:	
 12334                           ; 1 bytes @ 0x0
 12335                           
 12336  0070                     ?_nullifyBadge_segDisplayErase:	
 12337                           ; 1 bytes @ 0x0
 12338                           
 12339  0070                     ?_nullifyBadge_segDisplayForceUpdate:	
 12340                           ; 1 bytes @ 0x0
 12341                           
 12342  0070                     ?_nullifyBadge_platformInit:	
 12343                           ; 1 bytes @ 0x0
 12344                           
 12345  0070                     ?_displayL2_Initialize:	
 12346                           ; 1 bytes @ 0x0
 12347                           
 12348  0070                     ?_displayL2_ForceUpdate:	
 12349                           ; 1 bytes @ 0x0
 12350                           
 12351  0070                     ?_displayL2_EraseSegDisplay:	
 12352                           ; 1 bytes @ 0x0
 12353                           
 12354  0070                     ?_displayL2_ClrUserLeds:	
 12355                           ; 1 bytes @ 0x0
 12356                           
 12357  0070                     ?_displayL1_Update:	
 12358                           ; 1 bytes @ 0x0
 12359                           
 12360  0070                     ?_SPI1_Initialize:	
 12361                           ; 1 bytes @ 0x0
 12362                           
 12363  0070                     ?_SPI1_Exchange8bit:	
 12364                           ; 1 bytes @ 0x0
 12365                           
 12366  0070                     ?_PWM5_Initialize:	
 12367                           ; 1 bytes @ 0x0
 12368                           
 12369  0070                     ?_PWM6_Initialize:	
 12370                           ; 1 bytes @ 0x0
 12371                           
 12372  0070                     ?_PWM1_Initialize:	
 12373                           ; 1 bytes @ 0x0
 12374                           
 12375  0070                     ?_TMR2_Initialize:	
 12376                           ; 1 bytes @ 0x0
 12377                           
 12378  0070                     ?_TMR4_Initialize:	
 12379                           ; 1 bytes @ 0x0
 12380                           
 12381  0070                     ?_SYSTEM_Initialize:	
 12382                           ; 1 bytes @ 0x0
 12383                           
 12384  0070                     ?_TMR0_ISR:	
 12385                           ; 1 bytes @ 0x0
 12386                           
 12387  0070                     ??_TMR0_ISR:	
 12388                           ; 1 bytes @ 0x0
 12389                           
 12390  0070                     ?_INTERRUPT_InterruptManager:	
 12391                           ; 1 bytes @ 0x0
 12392                           
 12393  0070                     ??_INTERRUPT_InterruptManager:	
 12394                           ; 1 bytes @ 0x0
 12395                           
 12396  0070                     ?_scheduler_TaskRun:	
 12397                           ; 1 bytes @ 0x0
 12398                           
 12399  0070                     ?_scheduler_Init:	
 12400                           ; 1 bytes @ 0x0
 12401                           
 12402  0070                     ?_scheduler_TaskInit:	
 12403                           ; 1 bytes @ 0x0
 12404                           
 12405  0070                     ?_schedulerExecute:	
 12406                           ; 1 bytes @ 0x0
 12407                           
 12408  0070                     ?_led_rand:	
 12409                           ; 1 bytes @ 0x0
 12410                           
 12411  0070                     ?_main:	
 12412                           ; 1 bytes @ 0x0
 12413                           
 12414  0070                     ?_nullifyBadge_userLedsRegister:	
 12415                           ; 1 bytes @ 0x0
 12416                           
 12417  0070                     ?_nullifyBadge_userLedsClr:	
 12418                           ; 1 bytes @ 0x0
 12419                           
 12420  0070                     ?_nullifyBadge_buttonsGet:	
 12421                           ; 1 bytes @ 0x0
 12422                           
 12423  0070                     ?_nullifyBadge_irGet:	
 12424                           ; 1 bytes @ 0x0
 12425                           
 12426  0070                     ?_nullifyBadge_irTxRegister:	
 12427                           ; 1 bytes @ 0x0
 12428                           
 12429  0070                     ?_nullifyBadge_irTxRelease:	
 12430                           ; 1 bytes @ 0x0
 12431                           
 12432  0070                     ?_nullifyBadge_irTxSet:	
 12433                           ; 1 bytes @ 0x0
 12434                           
 12435  0070                     ?_nullifyBadge_irTxClr:	
 12436                           ; 1 bytes @ 0x0
 12437                           
 12438  0070                     ?_displayL1_Initialize:	
 12439                           ; 1 bytes @ 0x0
 12440                           
 12441  0070                     ?_locked_lock_leds:	
 12442                           ; 1 bytes @ 0x0
 12443                           
 12444  0070                     ?_locked_unlock_leds:	
 12445                           ; 2 bytes @ 0x0
 12446                           
 12447                           
 12448                           ; 2 bytes @ 0x0
 12449  0070                     	ds	1
 12450  0071                     ??_TMR2_StartTimer:	
 12451  0071                     ??_TMR4_StartTimer:	
 12452                           ; 1 bytes @ 0x1
 12453                           
 12454  0071                     ??_PIN_MANAGER_Initialize:	
 12455                           ; 1 bytes @ 0x1
 12456                           
 12457  0071                     ??_OSCILLATOR_Initialize:	
 12458                           ; 1 bytes @ 0x1
 12459                           
 12460  0071                     ??_WDT_Initialize:	
 12461                           ; 1 bytes @ 0x1
 12462                           
 12463  0071                     ??_PWM2_Initialize:	
 12464                           ; 1 bytes @ 0x1
 12465                           
 12466  0071                     ?_TMR0_SetInterruptHandler:	
 12467                           ; 1 bytes @ 0x1
 12468                           
 12469  0071                     ??_TMR0_StartTimer:	
 12470                           ; 1 bytes @ 0x1
 12471                           
 12472  0071                     ??_nullifyBadge_segDisplayRegister:	
 12473                           ; 1 bytes @ 0x1
 12474                           
 12475  0071                     ?_secret_clear:	
 12476                           ; 1 bytes @ 0x1
 12477                           
 12478  0071                     ??_isdigit:	
 12479                           ; 1 bytes @ 0x1
 12480                           
 12481  0071                     ??_SPI1_Initialize:	
 12482                           ; 1 bytes @ 0x1
 12483                           
 12484  0071                     ??_SPI1_Exchange8bit:	
 12485                           ; 1 bytes @ 0x1
 12486                           
 12487  0071                     ??_PWM5_Initialize:	
 12488                           ; 1 bytes @ 0x1
 12489                           
 12490  0071                     ?_PWM5_LoadDutyValue:	
 12491                           ; 1 bytes @ 0x1
 12492                           
 12493  0071                     ??_PWM6_Initialize:	
 12494                           ; 1 bytes @ 0x1
 12495                           
 12496  0071                     ?_PWM6_LoadDutyValue:	
 12497                           ; 1 bytes @ 0x1
 12498                           
 12499  0071                     ??_PWM1_Initialize:	
 12500                           ; 1 bytes @ 0x1
 12501                           
 12502  0071                     ?_PWM1_LoadDutyValue:	
 12503                           ; 1 bytes @ 0x1
 12504                           
 12505  0071                     ??_TMR2_Initialize:	
 12506                           ; 1 bytes @ 0x1
 12507                           
 12508  0071                     ??_TMR4_Initialize:	
 12509                           ; 1 bytes @ 0x1
 12510                           
 12511  0071                     ?_PWM2_LoadDutyValue:	
 12512                           ; 1 bytes @ 0x1
 12513                           
 12514  0071                     ??_scheduler_Init:	
 12515                           ; 1 bytes @ 0x1
 12516                           
 12517  0071                     ??_scheduler_TaskInit:	
 12518                           ; 1 bytes @ 0x1
 12519                           
 12520  0071                     ??_nullifyBadge_userLedsRegister:	
 12521                           ; 1 bytes @ 0x1
 12522                           
 12523  0071                     ??_nullifyBadge_buttonsGet:	
 12524                           ; 1 bytes @ 0x1
 12525                           
 12526  0071                     ??_nullifyBadge_irGet:	
 12527                           ; 1 bytes @ 0x1
 12528                           
 12529  0071                     ??_nullifyBadge_irTxRegister:	
 12530                           ; 1 bytes @ 0x1
 12531                           
 12532  0071                     ??_nullifyBadge_irTxRelease:	
 12533                           ; 1 bytes @ 0x1
 12534                           
 12535  0071                     ??_nullifyBadge_irTxSet:	
 12536                           ; 1 bytes @ 0x1
 12537                           
 12538  0071                     ??_nullifyBadge_irTxClr:	
 12539                           ; 1 bytes @ 0x1
 12540                           
 12541  0071                     ?_displayL1_SetUserLed:	
 12542                           ; 1 bytes @ 0x1
 12543                           
 12544  0071                     ??_locked_lock_leds:	
 12545                           ; 1 bytes @ 0x1
 12546                           
 12547  0071                     ??_locked_unlock_leds:	
 12548                           ; 1 bytes @ 0x1
 12549                           
 12550  0071                     ?___bmul:	
 12551                           ; 1 bytes @ 0x1
 12552                           
 12553  0071                     ?_strlen:	
 12554                           ; 1 bytes @ 0x1
 12555                           
 12556  0071                     ?_memset:	
 12557                           ; 2 bytes @ 0x1
 12558                           
 12559  0071                     ?_displayCharReverse:	
 12560                           ; 2 bytes @ 0x1
 12561                           
 12562  0071                     ?_TMR0_Read16bitTimer:	
 12563                           ; 2 bytes @ 0x1
 12564                           
 12565  0071                     ?_locked_get_lock_leds:	
 12566                           ; 2 bytes @ 0x1
 12567                           
 12568  0071                     ?_locked_get_unlock_leds:	
 12569                           ; 2 bytes @ 0x1
 12570                           
 12571  0071                     ?___wmul:	
 12572                           ; 2 bytes @ 0x1
 12573                           
 12574  0071                     ?___lwdiv:	
 12575                           ; 2 bytes @ 0x1
 12576                           
 12577  0071                     ?___lmul:	
 12578                           ; 2 bytes @ 0x1
 12579                           
 12580  0071                     SPI1_Exchange8bit@data:	
 12581                           ; 4 bytes @ 0x1
 12582                           
 12583  0071                     PIN_MANAGER_Initialize@state:	
 12584                           ; 1 bytes @ 0x1
 12585                           
 12586  0071                     scheduler_TaskInit@task:	
 12587                           ; 1 bytes @ 0x1
 12588                           
 12589  0071                     nullifyBadge_segDisplayRegister@badge:	
 12590                           ; 1 bytes @ 0x1
 12591                           
 12592  0071                     nullifyBadge_userLedsRegister@badge:	
 12593                           ; 1 bytes @ 0x1
 12594                           
 12595  0071                     nullifyBadge_irTxRegister@badge:	
 12596                           ; 1 bytes @ 0x1
 12597                           
 12598  0071                     ___bmul@multiplicand:	
 12599                           ; 1 bytes @ 0x1
 12600                           
 12601  0071                     _isdigit$3610:	
 12602                           ; 1 bytes @ 0x1
 12603                           
 12604  0071                     PWM5_LoadDutyValue@dutyValue:	
 12605                           ; 1 bytes @ 0x1
 12606                           
 12607  0071                     PWM6_LoadDutyValue@dutyValue:	
 12608                           ; 2 bytes @ 0x1
 12609                           
 12610  0071                     PWM1_LoadDutyValue@dutyValue:	
 12611                           ; 2 bytes @ 0x1
 12612                           
 12613  0071                     PWM2_LoadDutyValue@dutyValue:	
 12614                           ; 2 bytes @ 0x1
 12615                           
 12616  0071                     TMR0_SetInterruptHandler@InterruptHandler:	
 12617                           ; 2 bytes @ 0x1
 12618                           
 12619  0071                     displayL1_SetUserLed@userLedVect:	
 12620                           ; 2 bytes @ 0x1
 12621                           
 12622  0071                     displayCharReverse@cVal:	
 12623                           ; 2 bytes @ 0x1
 12624                           
 12625  0071                     secret_clear@data:	
 12626                           ; 2 bytes @ 0x1
 12627                           
 12628  0071                     ___wmul@multiplier:	
 12629                           ; 2 bytes @ 0x1
 12630                           
 12631  0071                     ___lwdiv@divisor:	
 12632                           ; 2 bytes @ 0x1
 12633                           
 12634  0071                     memset@p1:	
 12635                           ; 2 bytes @ 0x1
 12636                           
 12637  0071                     strlen@s:	
 12638                           ; 2 bytes @ 0x1
 12639                           
 12640  0071                     ___lmul@multiplier:	
 12641                           ; 2 bytes @ 0x1
 12642                           
 12643                           
 12644                           ; 4 bytes @ 0x1
 12645  0071                     	ds	1
 12646  0072                     ?_SPI1_Exchange8bitBuffer:	
 12647  0072                     ??___bmul:	
 12648                           ; 1 bytes @ 0x2
 12649                           
 12650  0072                     SPI1_Exchange8bitBuffer@bufLen:	
 12651                           ; 1 bytes @ 0x2
 12652                           
 12653  0072                     scheduler_Init@scheduler:	
 12654                           ; 1 bytes @ 0x2
 12655                           
 12656  0072                     nullifyBadge_irTxRelease@badge:	
 12657                           ; 1 bytes @ 0x2
 12658                           
 12659  0072                     isdigit@c:	
 12660                           ; 1 bytes @ 0x2
 12661                           
 12662                           
 12663                           ; 1 bytes @ 0x2
 12664  0072                     	ds	1
 12665  0073                     ??_TMR0_Initialize:	
 12666  0073                     ??_TMR0_SetInterruptHandler:	
 12667                           ; 1 bytes @ 0x3
 12668                           
 12669  0073                     ??_strlen:	
 12670                           ; 1 bytes @ 0x3
 12671                           
 12672  0073                     ??_displayCharReverse:	
 12673                           ; 1 bytes @ 0x3
 12674                           
 12675  0073                     ??_secret_clear:	
 12676                           ; 1 bytes @ 0x3
 12677                           
 12678  0073                     ??_PWM5_LoadDutyValue:	
 12679                           ; 1 bytes @ 0x3
 12680                           
 12681  0073                     ??_PWM6_LoadDutyValue:	
 12682                           ; 1 bytes @ 0x3
 12683                           
 12684  0073                     ??_PWM1_LoadDutyValue:	
 12685                           ; 1 bytes @ 0x3
 12686                           
 12687  0073                     ??_SYSTEM_Initialize:	
 12688                           ; 1 bytes @ 0x3
 12689                           
 12690  0073                     ??_PWM2_LoadDutyValue:	
 12691                           ; 1 bytes @ 0x3
 12692                           
 12693  0073                     ??_TMR0_Read16bitTimer:	
 12694                           ; 1 bytes @ 0x3
 12695                           
 12696  0073                     ??_displayL1_SetUserLed:	
 12697                           ; 1 bytes @ 0x3
 12698                           
 12699  0073                     ??_locked_get_lock_leds:	
 12700                           ; 1 bytes @ 0x3
 12701                           
 12702  0073                     ??_locked_get_unlock_leds:	
 12703                           ; 1 bytes @ 0x3
 12704                           
 12705  0073                     SPI1_Exchange8bitBuffer@dataOut:	
 12706                           ; 1 bytes @ 0x3
 12707                           
 12708  0073                     scheduler_Init@k:	
 12709                           ; 1 bytes @ 0x3
 12710                           
 12711  0073                     nullifyBadge_buttonsGet@retVal:	
 12712                           ; 1 bytes @ 0x3
 12713                           
 12714  0073                     ___bmul@product:	
 12715                           ; 1 bytes @ 0x3
 12716                           
 12717  0073                     locked_lock_leds@size:	
 12718                           ; 1 bytes @ 0x3
 12719                           
 12720  0073                     locked_get_unlock_leds@leds:	
 12721                           ; 2 bytes @ 0x3
 12722                           
 12723  0073                     ___wmul@multiplicand:	
 12724                           ; 2 bytes @ 0x3
 12725                           
 12726  0073                     ___lwdiv@dividend:	
 12727                           ; 2 bytes @ 0x3
 12728                           
 12729  0073                     memset@c:	
 12730                           ; 2 bytes @ 0x3
 12731                           
 12732                           
 12733                           ; 2 bytes @ 0x3
 12734  0073                     	ds	1
 12735  0074                     ??_SPI1_Exchange8bitBuffer:	
 12736  0074                     displayL1_SetUserLed@display:	
 12737                           ; 1 bytes @ 0x4
 12738                           
 12739  0074                     ___bmul@multiplier:	
 12740                           ; 1 bytes @ 0x4
 12741                           
 12742                           
 12743                           ; 1 bytes @ 0x4
 12744  0074                     	ds	1
 12745  0075                     ??___wmul:	
 12746  0075                     ??___lwdiv:	
 12747                           ; 1 bytes @ 0x5
 12748                           
 12749  0075                     locked_get_lock_leds@size:	
 12750                           ; 1 bytes @ 0x5
 12751                           
 12752  0075                     ___wmul@product:	
 12753                           ; 2 bytes @ 0x5
 12754                           
 12755  0075                     memset@n:	
 12756                           ; 2 bytes @ 0x5
 12757                           
 12758  0075                     strlen@cp:	
 12759                           ; 2 bytes @ 0x5
 12760                           
 12761  0075                     ___lmul@multiplicand:	
 12762                           ; 2 bytes @ 0x5
 12763                           
 12764                           
 12765                           ; 4 bytes @ 0x5
 12766  0075                     	ds	1
 12767  0076                     ___lwdiv@counter:	
 12768                           
 12769                           ; 1 bytes @ 0x6
 12770  0076                     	ds	1
 12771  0077                     ??_memset:	
 12772  0077                     ?_secret_check:	
 12773                           ; 1 bytes @ 0x7
 12774                           
 12775  0077                     ?_matrix_secret_check:	
 12776                           ; 1 bytes @ 0x7
 12777                           
 12778  0077                     SPI1_Exchange8bitBuffer@dataIn:	
 12779                           ; 1 bytes @ 0x7
 12780                           
 12781  0077                     locked_get_lock_leds@leds:	
 12782                           ; 1 bytes @ 0x7
 12783                           
 12784  0077                     secret_check@data:	
 12785                           ; 2 bytes @ 0x7
 12786                           
 12787  0077                     matrix_secret_check@data:	
 12788                           ; 2 bytes @ 0x7
 12789                           
 12790  0077                     ___lwdiv@quotient:	
 12791                           ; 2 bytes @ 0x7
 12792                           
 12793  0077                     memset@p:	
 12794                           ; 2 bytes @ 0x7
 12795                           
 12796                           
 12797                           ; 2 bytes @ 0x7
 12798  0077                     	ds	1
 12799  0078                     SPI1_Exchange8bitBuffer@bytesWritten:	
 12800  0078                     displayCharReverse@retValLower:	
 12801                           ; 1 bytes @ 0x8
 12802                           
 12803  0078                     TMR0_Read16bitTimer@readVal:	
 12804                           ; 1 bytes @ 0x8
 12805                           
 12806                           
 12807                           ; 2 bytes @ 0x8
 12808  0078                     	ds	1
 12809  0079                     ??_displayL1_Update:	
 12810  0079                     ??___lmul:	
 12811                           ; 1 bytes @ 0x9
 12812                           
 12813  0079                     ??___almod:	
 12814                           ; 1 bytes @ 0x9
 12815                           
 12816  0079                     ??___lwmod:	
 12817                           ; 1 bytes @ 0x9
 12818                           
 12819  0079                     displayCharReverse@retValUpper:	
 12820                           ; 1 bytes @ 0x9
 12821                           
 12822  0079                     secret_check@buttonPressed:	
 12823                           ; 1 bytes @ 0x9
 12824                           
 12825  0079                     matrix_secret_check@buttonPressed:	
 12826                           ; 1 bytes @ 0x9
 12827                           
 12828                           
 12829                           ; 1 bytes @ 0x9
 12830  0079                     	ds	1
 12831  007A                     TMR0_Read16bitTimer@readValLow:	
 12832  007A                     displayCharReverse@retValUpperRev:	
 12833                           ; 1 bytes @ 0xA
 12834                           
 12835  007A                     ___almod@counter:	
 12836                           ; 1 bytes @ 0xA
 12837                           
 12838  007A                     ___lwmod@counter:	
 12839                           ; 1 bytes @ 0xA
 12840                           
 12841                           
 12842                           ; 1 bytes @ 0xA
 12843  007A                     	ds	1
 12844  007B                     ??_displayL2_ForceUpdate:	
 12845  007B                     ??_displayL2_SetUserLeds:	
 12846                           ; 1 bytes @ 0xB
 12847                           
 12848  007B                     ??_displayL2_ClrUserLeds:	
 12849                           ; 1 bytes @ 0xB
 12850                           
 12851  007B                     ??_displayL1_Initialize:	
 12852                           ; 1 bytes @ 0xB
 12853                           
 12854  007B                     TMR0_Read16bitTimer@readValHigh:	
 12855                           ; 1 bytes @ 0xB
 12856                           
 12857  007B                     displayL1_Initialize@display:	
 12858                           ; 1 bytes @ 0xB
 12859                           
 12860  007B                     displayCharReverse@k:	
 12861                           ; 1 bytes @ 0xB
 12862                           
 12863  007B                     displayL2_ForceUpdate@display:	
 12864                           ; 1 bytes @ 0xB
 12865                           
 12866  007B                     displayL2_SetUserLeds@display:	
 12867                           ; 1 bytes @ 0xB
 12868                           
 12869  007B                     displayL2_ClrUserLeds@display:	
 12870                           ; 1 bytes @ 0xB
 12871                           
 12872  007B                     ___almod@sign:	
 12873                           ; 1 bytes @ 0xB
 12874                           
 12875                           
 12876                           ; 1 bytes @ 0xB
 12877  007B                     	ds	1
 12878  007C                     ??_nullifyBadge_segDisplayErase:	
 12879  007C                     ??_nullifyBadge_segDisplayPutStr:	
 12880                           ; 1 bytes @ 0xC
 12881                           
 12882  007C                     ??_nullifyBadge_segDisplayForceUpdate:	
 12883                           ; 1 bytes @ 0xC
 12884                           
 12885  007C                     ??_nullifyBadge_userLedsSet:	
 12886                           ; 1 bytes @ 0xC
 12887                           
 12888  007C                     ??_nullifyBadge_platformInit:	
 12889                           ; 1 bytes @ 0xC
 12890                           
 12891  007C                     ??_flashy_Init:	
 12892                           ; 1 bytes @ 0xC
 12893                           
 12894  007C                     ??_menu_Init:	
 12895                           ; 1 bytes @ 0xC
 12896                           
 12897  007C                     ??_slot_Init:	
 12898                           ; 1 bytes @ 0xC
 12899                           
 12900  007C                     ??_locked_Init:	
 12901                           ; 1 bytes @ 0xC
 12902                           
 12903  007C                     ??_secret_Init:	
 12904                           ; 1 bytes @ 0xC
 12905                           
 12906  007C                     ??_displayL2_Initialize:	
 12907                           ; 1 bytes @ 0xC
 12908                           
 12909  007C                     ??_displayL2_EraseSegDisplay:	
 12910                           ; 1 bytes @ 0xC
 12911                           
 12912  007C                     ??_menu_clear:	
 12913                           ; 1 bytes @ 0xC
 12914                           
 12915  007C                     ??_menu_display_option:	
 12916                           ; 1 bytes @ 0xC
 12917                           
 12918  007C                     ??_menu_run_option:	
 12919                           ; 1 bytes @ 0xC
 12920                           
 12921  007C                     ??_locked_clear:	
 12922                           ; 1 bytes @ 0xC
 12923                           
 12924  007C                     ??_scheduler_TaskRun:	
 12925                           ; 1 bytes @ 0xC
 12926                           
 12927  007C                     ??_led_circle:	
 12928                           ; 1 bytes @ 0xC
 12929                           
 12930  007C                     ??_let_alternate:	
 12931                           ; 1 bytes @ 0xC
 12932                           
 12933  007C                     ??_nullifyBadge_userLedsClr:	
 12934                           ; 1 bytes @ 0xC
 12935                           
 12936  007C                     ??_flashy_display_option:	
 12937                           ; 1 bytes @ 0xC
 12938                           
 12939                           
 12940                           	psect	cstackBANK0
 12941  0020                     __pcstackBANK0:	
 12942                           ; 1 bytes @ 0xC
 12943                           
 12944  0020                     ?_displayL1_SetSegChar:	
 12945  0020                     ??_secret_check:	
 12946                           ; 1 bytes @ 0x0
 12947                           
 12948  0020                     ??_matrix_secret_check:	
 12949                           ; 1 bytes @ 0x0
 12950                           
 12951  0020                     displayL1_SetSegChar@c:	
 12952                           ; 1 bytes @ 0x0
 12953                           
 12954  0020                     ___lmul@product:	
 12955                           ; 1 bytes @ 0x0
 12956                           
 12957  0020                     displayL1_Update@tmpRxBuf:	
 12958                           ; 4 bytes @ 0x0
 12959                           
 12960                           
 12961                           ; 10 bytes @ 0x0
 12962  0020                     	ds	1
 12963  0021                     displayL1_SetSegChar@charPos:	
 12964                           
 12965                           ; 1 bytes @ 0x1
 12966  0021                     	ds	1
 12967  0022                     ??_displayL1_SetSegChar:	
 12968                           
 12969                           ; 1 bytes @ 0x2
 12970  0022                     	ds	1
 12971  0023                     secret_check@size:	
 12972  0023                     matrix_secret_check@size:	
 12973                           ; 2 bytes @ 0x3
 12974                           
 12975                           
 12976                           ; 2 bytes @ 0x3
 12977  0023                     	ds	1
 12978  0024                     ?_rand:	
 12979                           
 12980                           ; 2 bytes @ 0x4
 12981  0024                     	ds	1
 12982  0025                     secret_check@currents_size:	
 12983  0025                     matrix_secret_check@currents_size:	
 12984                           ; 2 bytes @ 0x5
 12985                           
 12986                           
 12987                           ; 2 bytes @ 0x5
 12988  0025                     	ds	1
 12989  0026                     ??_rand:	
 12990  0026                     displayL1_SetSegChar@dispDataVectBaseIdx:	
 12991                           ; 1 bytes @ 0x6
 12992                           
 12993                           
 12994                           ; 1 bytes @ 0x6
 12995  0026                     	ds	1
 12996  0027                     displayL1_SetSegChar@display:	
 12997  0027                     secret_check@inputs:	
 12998                           ; 1 bytes @ 0x7
 12999                           
 13000  0027                     matrix_secret_check@inputs:	
 13001                           ; 1 bytes @ 0x7
 13002                           
 13003                           
 13004                           ; 1 bytes @ 0x7
 13005  0027                     	ds	1
 13006  0028                     displayL1_SetSegChar@charData:	
 13007  0028                     secret_check@i:	
 13008                           ; 2 bytes @ 0x8
 13009                           
 13010  0028                     matrix_secret_check@i:	
 13011                           ; 2 bytes @ 0x8
 13012                           
 13013                           
 13014                           ; 2 bytes @ 0x8
 13015  0028                     	ds	2
 13016  002A                     ?_displayL2_PutChar:	
 13017  002A                     displayL1_Update@display:	
 13018                           ; 1 bytes @ 0xA
 13019                           
 13020  002A                     displayL2_PutChar@c:	
 13021                           ; 1 bytes @ 0xA
 13022                           
 13023                           
 13024                           ; 1 bytes @ 0xA
 13025  002A                     	ds	1
 13026  002B                     ??_displayL2_PutChar:	
 13027  002B                     ?_displayL2_SetUserLeds:	
 13028                           ; 1 bytes @ 0xB
 13029                           
 13030  002B                     ?___lwmod:	
 13031                           ; 1 bytes @ 0xB
 13032                           
 13033  002B                     ?___almod:	
 13034                           ; 2 bytes @ 0xB
 13035                           
 13036  002B                     nullifyBadge_segDisplayForceUpdate@badge:	
 13037                           ; 4 bytes @ 0xB
 13038                           
 13039  002B                     nullifyBadge_userLedsClr@badge:	
 13040                           ; 1 bytes @ 0xB
 13041                           
 13042  002B                     displayL2_Initialize@display:	
 13043                           ; 1 bytes @ 0xB
 13044                           
 13045  002B                     displayL2_SetUserLeds@userLedData:	
 13046                           ; 1 bytes @ 0xB
 13047                           
 13048  002B                     ___lwmod@divisor:	
 13049                           ; 2 bytes @ 0xB
 13050                           
 13051  002B                     ___almod@divisor:	
 13052                           ; 2 bytes @ 0xB
 13053                           
 13054                           
 13055                           ; 4 bytes @ 0xB
 13056  002B                     	ds	1
 13057  002C                     nullifyBadge_platformInit@badge:	
 13058                           
 13059                           ; 1 bytes @ 0xC
 13060  002C                     	ds	1
 13061  002D                     ?_nullifyBadge_userLedsSet:	
 13062  002D                     nullifyBadge_userLedsSet@userLedData:	
 13063                           ; 1 bytes @ 0xD
 13064                           
 13065  002D                     ___lwmod@dividend:	
 13066                           ; 2 bytes @ 0xD
 13067                           
 13068                           
 13069                           ; 2 bytes @ 0xD
 13070  002D                     	ds	1
 13071  002E                     displayL2_PutChar@k:	
 13072                           
 13073                           ; 1 bytes @ 0xE
 13074  002E                     	ds	1
 13075  002F                     ?_slot_Setup:	
 13076  002F                     ?_sprintf:	
 13077                           ; 1 bytes @ 0xF
 13078                           
 13079  002F                     nullifyBadge_userLedsSet@badge:	
 13080                           ; 2 bytes @ 0xF
 13081                           
 13082  002F                     displayL2_PutChar@display:	
 13083                           ; 1 bytes @ 0xF
 13084                           
 13085  002F                     slot_Setup@taskData:	
 13086                           ; 1 bytes @ 0xF
 13087                           
 13088  002F                     sprintf@sp:	
 13089                           ; 2 bytes @ 0xF
 13090                           
 13091  002F                     ___almod@dividend:	
 13092                           ; 2 bytes @ 0xF
 13093                           
 13094                           
 13095                           ; 4 bytes @ 0xF
 13096  002F                     	ds	1
 13097  0030                     ?_displayL2_PutStr:	
 13098  0030                     ?_led_roundabout:	
 13099                           ; 1 bytes @ 0x10
 13100                           
 13101  0030                     ?_led_curtain:	
 13102                           ; 1 bytes @ 0x10
 13103                           
 13104  0030                     ?_led_circle:	
 13105                           ; 1 bytes @ 0x10
 13106                           
 13107  0030                     ?_let_alternate:	
 13108                           ; 1 bytes @ 0x10
 13109                           
 13110  0030                     ?_led_Parody:	
 13111                           ; 1 bytes @ 0x10
 13112                           
 13113  0030                     led_roundabout@counter:	
 13114                           ; 1 bytes @ 0x10
 13115                           
 13116  0030                     led_curtain@counter:	
 13117                           ; 2 bytes @ 0x10
 13118                           
 13119  0030                     led_circle@count:	
 13120                           ; 2 bytes @ 0x10
 13121                           
 13122  0030                     let_alternate@count:	
 13123                           ; 2 bytes @ 0x10
 13124                           
 13125  0030                     led_Parody@count:	
 13126                           ; 2 bytes @ 0x10
 13127                           
 13128  0030                     displayL2_PutStr@str:	
 13129                           ; 2 bytes @ 0x10
 13130                           
 13131                           
 13132                           ; 2 bytes @ 0x10
 13133  0030                     	ds	1
 13134  0031                     ??_slot_Setup:	
 13135  0031                     sprintf@f:	
 13136                           ; 1 bytes @ 0x11
 13137                           
 13138                           
 13139                           ; 2 bytes @ 0x11
 13140  0031                     	ds	1
 13141  0032                     ??_displayL2_PutStr:	
 13142  0032                     ??_led_roundabout:	
 13143                           ; 1 bytes @ 0x12
 13144                           
 13145  0032                     ??_led_curtain:	
 13146                           ; 1 bytes @ 0x12
 13147                           
 13148  0032                     ??_led_Parody:	
 13149                           ; 1 bytes @ 0x12
 13150                           
 13151  0032                     ?_slot_Running_Animation:	
 13152                           ; 1 bytes @ 0x12
 13153                           
 13154  0032                     slot_Running_Animation@taskData:	
 13155                           ; 1 bytes @ 0x12
 13156                           
 13157                           
 13158                           ; 2 bytes @ 0x12
 13159  0032                     	ds	1
 13160  0033                     ??_led_rand:	
 13161                           
 13162                           ; 1 bytes @ 0x13
 13163  0033                     	ds	1
 13164  0034                     ??_slot_Running_Animation:	
 13165  0034                     led_roundabout@leds:	
 13166                           ; 1 bytes @ 0x14
 13167                           
 13168  0034                     led_curtain@leds:	
 13169                           ; 2 bytes @ 0x14
 13170                           
 13171  0034                     led_Parody@leds:	
 13172                           ; 2 bytes @ 0x14
 13173                           
 13174  0034                     slot_Setup@data:	
 13175                           ; 2 bytes @ 0x14
 13176                           
 13177                           
 13178                           ; 2 bytes @ 0x14
 13179  0034                     	ds	1
 13180  0035                     displayL2_PutStr@display:	
 13181                           
 13182                           ; 1 bytes @ 0x15
 13183  0035                     	ds	1
 13184  0036                     displayL2_PutStr@k:	
 13185  0036                     led_roundabout@size:	
 13186                           ; 1 bytes @ 0x16
 13187                           
 13188  0036                     led_curtain@size:	
 13189                           ; 2 bytes @ 0x16
 13190                           
 13191  0036                     led_Parody@size:	
 13192                           ; 2 bytes @ 0x16
 13193                           
 13194  0036                     slot_Running_Animation@data:	
 13195                           ; 2 bytes @ 0x16
 13196                           
 13197                           
 13198                           ; 2 bytes @ 0x16
 13199  0036                     	ds	1
 13200  0037                     ?_nullifyBadge_segDisplayPutStr:	
 13201  0037                     displayL2_EraseSegDisplay@display:	
 13202                           ; 1 bytes @ 0x17
 13203                           
 13204  0037                     nullifyBadge_segDisplayPutStr@str:	
 13205                           ; 1 bytes @ 0x17
 13206                           
 13207                           
 13208                           ; 2 bytes @ 0x17
 13209  0037                     	ds	1
 13210  0038                     nullifyBadge_segDisplayErase@badge:	
 13211                           
 13212                           ; 1 bytes @ 0x18
 13213  0038                     	ds	1
 13214  0039                     ?_flashy_Init:	
 13215  0039                     ?_menu_Init:	
 13216                           ; 1 bytes @ 0x19
 13217                           
 13218  0039                     ?_slot_Init:	
 13219                           ; 1 bytes @ 0x19
 13220                           
 13221  0039                     ?_locked_Init:	
 13222                           ; 1 bytes @ 0x19
 13223                           
 13224  0039                     ?_secret_Init:	
 13225                           ; 1 bytes @ 0x19
 13226                           
 13227  0039                     ?_matrix_Init:	
 13228                           ; 1 bytes @ 0x19
 13229                           
 13230  0039                     ?_menu_clear:	
 13231                           ; 1 bytes @ 0x19
 13232                           
 13233  0039                     ?_locked_clear:	
 13234                           ; 1 bytes @ 0x19
 13235                           
 13236  0039                     nullifyBadge_segDisplayPutStr@badge:	
 13237                           ; 1 bytes @ 0x19
 13238                           
 13239  0039                     menu_Init@taskData:	
 13240                           ; 1 bytes @ 0x19
 13241                           
 13242  0039                     menu_clear@data:	
 13243                           ; 2 bytes @ 0x19
 13244                           
 13245  0039                     flashy_Init@taskData:	
 13246                           ; 2 bytes @ 0x19
 13247                           
 13248  0039                     locked_Init@taskData:	
 13249                           ; 2 bytes @ 0x19
 13250                           
 13251  0039                     locked_clear@data:	
 13252                           ; 2 bytes @ 0x19
 13253                           
 13254  0039                     secret_Init@taskData:	
 13255                           ; 2 bytes @ 0x19
 13256                           
 13257  0039                     slot_Init@taskData:	
 13258                           ; 2 bytes @ 0x19
 13259                           
 13260  0039                     matrix_Init@taskData:	
 13261                           ; 2 bytes @ 0x19
 13262                           
 13263                           
 13264                           ; 2 bytes @ 0x19
 13265  0039                     	ds	1
 13266  003A                     ?_marquee_speedy:	
 13267  003A                     ?_marquee:	
 13268                           ; 1 bytes @ 0x1A
 13269                           
 13270  003A                     marquee_speedy@string:	
 13271                           ; 1 bytes @ 0x1A
 13272                           
 13273  003A                     marquee@string:	
 13274                           ; 2 bytes @ 0x1A
 13275                           
 13276                           
 13277                           ; 2 bytes @ 0x1A
 13278  003A                     	ds	1
 13279  003B                     ??_matrix_Init:	
 13280  003B                     ?_menu_run_option:	
 13281                           ; 1 bytes @ 0x1B
 13282                           
 13283  003B                     ??_sprintf:	
 13284                           ; 1 bytes @ 0x1B
 13285                           
 13286  003B                     led_rand@spark:	
 13287                           ; 1 bytes @ 0x1B
 13288                           
 13289  003B                     menu_Init@data:	
 13290                           ; 2 bytes @ 0x1B
 13291                           
 13292  003B                     menu_run_option@data:	
 13293                           ; 2 bytes @ 0x1B
 13294                           
 13295  003B                     flashy_Init@data:	
 13296                           ; 2 bytes @ 0x1B
 13297                           
 13298  003B                     locked_Init@data:	
 13299                           ; 2 bytes @ 0x1B
 13300                           
 13301  003B                     secret_Init@data:	
 13302                           ; 2 bytes @ 0x1B
 13303                           
 13304  003B                     slot_Init@data:	
 13305                           ; 2 bytes @ 0x1B
 13306                           
 13307                           
 13308                           ; 2 bytes @ 0x1B
 13309  003B                     	ds	1
 13310  003C                     marquee_speedy@count:	
 13311  003C                     marquee@count:	
 13312                           ; 2 bytes @ 0x1C
 13313                           
 13314                           
 13315                           ; 2 bytes @ 0x1C
 13316  003C                     	ds	1
 13317  003D                     ?_slot_Finished_Animation:	
 13318  003D                     slot_Finished_Animation@taskData:	
 13319                           ; 1 bytes @ 0x1D
 13320                           
 13321  003D                     matrix_Init@data:	
 13322                           ; 2 bytes @ 0x1D
 13323                           
 13324                           
 13325                           ; 2 bytes @ 0x1D
 13326  003D                     	ds	1
 13327  003E                     ??_marquee:	
 13328  003E                     marquee_speedy@multiplier:	
 13329                           ; 1 bytes @ 0x1E
 13330                           
 13331                           
 13332                           ; 2 bytes @ 0x1E
 13333  003E                     	ds	1
 13334  003F                     ?_scheduler_TaskAdd:	
 13335  003F                     ??_slot_Finished_Animation:	
 13336                           ; 1 bytes @ 0x1F
 13337                           
 13338  003F                     scheduler_TaskAdd@task:	
 13339                           ; 1 bytes @ 0x1F
 13340                           
 13341  003F                     sprintf@prec:	
 13342                           ; 1 bytes @ 0x1F
 13343                           
 13344  003F                     marquee@display_string:	
 13345                           ; 1 bytes @ 0x1F
 13346                           
 13347                           
 13348                           ; 5 bytes @ 0x1F
 13349  003F                     	ds	1
 13350  0040                     ??_scheduler_TaskAdd:	
 13351  0040                     ??_marquee_speedy:	
 13352                           ; 1 bytes @ 0x20
 13353                           
 13354  0040                     sprintf@flag:	
 13355                           ; 1 bytes @ 0x20
 13356                           
 13357                           
 13358                           ; 1 bytes @ 0x20
 13359  0040                     	ds	1
 13360  0041                     slot_Finished_Animation@data:	
 13361  0041                     sprintf@cp:	
 13362                           ; 2 bytes @ 0x21
 13363                           
 13364  0041                     marquee_speedy@display_string:	
 13365                           ; 2 bytes @ 0x21
 13366                           
 13367                           
 13368                           ; 5 bytes @ 0x21
 13369  0041                     	ds	2
 13370  0043                     sprintf@ap:	
 13371                           
 13372                           ; 1 bytes @ 0x23
 13373  0043                     	ds	1
 13374  0044                     marquee@multiplier:	
 13375  0044                     sprintf@val:	
 13376                           ; 2 bytes @ 0x24
 13377                           
 13378                           
 13379                           ; 2 bytes @ 0x24
 13380  0044                     	ds	2
 13381  0046                     scheduler_TaskAdd@scheduler:	
 13382  0046                     marquee_speedy@i:	
 13383                           ; 1 bytes @ 0x26
 13384                           
 13385  0046                     marquee@i:	
 13386                           ; 2 bytes @ 0x26
 13387                           
 13388  0046                     sprintf@len:	
 13389                           ; 2 bytes @ 0x26
 13390                           
 13391                           
 13392                           ; 2 bytes @ 0x26
 13393  0046                     	ds	1
 13394  0047                     scheduler_TaskAdd@k:	
 13395                           
 13396                           ; 1 bytes @ 0x27
 13397  0047                     	ds	1
 13398  0048                     marquee_speedy@string_length:	
 13399  0048                     marquee@string_length:	
 13400                           ; 2 bytes @ 0x28
 13401                           
 13402  0048                     sprintf@width:	
 13403                           ; 2 bytes @ 0x28
 13404                           
 13405                           
 13406                           ; 2 bytes @ 0x28
 13407  0048                     	ds	2
 13408  004A                     sprintf@c:	
 13409  004A                     marquee_speedy@j:	
 13410                           ; 1 bytes @ 0x2A
 13411                           
 13412  004A                     marquee@j:	
 13413                           ; 2 bytes @ 0x2A
 13414                           
 13415                           
 13416                           ; 2 bytes @ 0x2A
 13417  004A                     	ds	2
 13418  004C                     ?_menu_display_option:	
 13419  004C                     ?_flashy_display_option:	
 13420                           ; 1 bytes @ 0x2C
 13421                           
 13422  004C                     ?_matrix_display_option:	
 13423                           ; 1 bytes @ 0x2C
 13424                           
 13425  004C                     menu_display_option@data:	
 13426                           ; 1 bytes @ 0x2C
 13427                           
 13428  004C                     flashy_display_option@data:	
 13429                           ; 2 bytes @ 0x2C
 13430                           
 13431  004C                     matrix_display_option@data:	
 13432                           ; 2 bytes @ 0x2C
 13433                           
 13434                           
 13435                           ; 2 bytes @ 0x2C
 13436  004C                     	ds	2
 13437  004E                     ??_matrix_display_option:	
 13438  004E                     menu_display_option@size:	
 13439                           ; 1 bytes @ 0x2E
 13440                           
 13441                           
 13442                           ; 2 bytes @ 0x2E
 13443  004E                     	ds	2
 13444  0050                     menu_display_option@led:	
 13445                           
 13446                           ; 2 bytes @ 0x30
 13447  0050                     	ds	2
 13448  0052                     ?_flashy_Main:	
 13449  0052                     ?_menu_Main:	
 13450                           ; 1 bytes @ 0x32
 13451                           
 13452  0052                     ?_slot_Main:	
 13453                           ; 1 bytes @ 0x32
 13454                           
 13455  0052                     ?_locked_Main:	
 13456                           ; 1 bytes @ 0x32
 13457                           
 13458  0052                     ?_secret_Main:	
 13459                           ; 1 bytes @ 0x32
 13460                           
 13461  0052                     ?_matrix_Main:	
 13462                           ; 1 bytes @ 0x32
 13463                           
 13464  0052                     menu_Main@taskData:	
 13465                           ; 1 bytes @ 0x32
 13466                           
 13467  0052                     flashy_Main@taskData:	
 13468                           ; 2 bytes @ 0x32
 13469                           
 13470  0052                     locked_Main@taskData:	
 13471                           ; 2 bytes @ 0x32
 13472                           
 13473  0052                     secret_Main@taskData:	
 13474                           ; 2 bytes @ 0x32
 13475                           
 13476  0052                     slot_Main@taskData:	
 13477                           ; 2 bytes @ 0x32
 13478                           
 13479  0052                     matrix_Main@taskData:	
 13480                           ; 2 bytes @ 0x32
 13481                           
 13482                           
 13483                           ; 2 bytes @ 0x32
 13484  0052                     	ds	2
 13485  0054                     ??_flashy_Main:	
 13486  0054                     ??_menu_Main:	
 13487                           ; 1 bytes @ 0x34
 13488                           
 13489  0054                     ??_slot_Main:	
 13490                           ; 1 bytes @ 0x34
 13491                           
 13492  0054                     ??_locked_Main:	
 13493                           ; 1 bytes @ 0x34
 13494                           
 13495  0054                     ??_secret_Main:	
 13496                           ; 1 bytes @ 0x34
 13497                           
 13498  0054                     ??_matrix_Main:	
 13499                           ; 1 bytes @ 0x34
 13500                           
 13501                           
 13502                           ; 1 bytes @ 0x34
 13503  0054                     	ds	2
 13504  0056                     menu_Main@buttonPressed:	
 13505  0056                     locked_Main@buttonPressed:	
 13506                           ; 1 bytes @ 0x36
 13507                           
 13508  0056                     secret_Main@secret_found:	
 13509                           ; 1 bytes @ 0x36
 13510                           
 13511  0056                     flashy_Main@hit_counter:	
 13512                           ; 1 bytes @ 0x36
 13513                           
 13514                           
 13515                           ; 6 bytes @ 0x36
 13516  0056                     	ds	1
 13517  0057                     secret_Main@buttonPressed:	
 13518  0057                     menu_Main@data:	
 13519                           ; 1 bytes @ 0x37
 13520                           
 13521  0057                     locked_Main@data:	
 13522                           ; 2 bytes @ 0x37
 13523                           
 13524                           
 13525                           ; 2 bytes @ 0x37
 13526  0057                     	ds	1
 13527  0058                     matrix_Main@matrix_found:	
 13528  0058                     secret_Main@data:	
 13529                           ; 1 bytes @ 0x38
 13530                           
 13531                           
 13532                           ; 2 bytes @ 0x38
 13533  0058                     	ds	1
 13534  0059                     matrix_Main@buttonPressed:	
 13535                           
 13536                           ; 1 bytes @ 0x39
 13537  0059                     	ds	1
 13538  005A                     matrix_Main@holdvalue:	
 13539                           
 13540                           ; 1 bytes @ 0x3A
 13541  005A                     	ds	1
 13542  005B                     matrix_Main@data:	
 13543                           
 13544                           ; 2 bytes @ 0x3B
 13545  005B                     	ds	1
 13546  005C                     flashy_Main@buttonPressed:	
 13547                           
 13548                           ; 2 bytes @ 0x3C
 13549  005C                     	ds	2
 13550  005E                     flashy_Main@data:	
 13551                           
 13552                           ; 2 bytes @ 0x3E
 13553  005E                     	ds	6
 13554  0064                     slot_Main@buttonPressed:	
 13555                           
 13556                           ; 1 bytes @ 0x44
 13557  0064                     	ds	1
 13558  0065                     slot_Main@data:	
 13559                           
 13560                           ; 2 bytes @ 0x45
 13561  0065                     	ds	2
 13562  0067                     scheduler_TaskRun@task:	
 13563                           
 13564                           ; 1 bytes @ 0x47
 13565  0067                     	ds	1
 13566  0068                     ??_schedulerExecute:	
 13567                           
 13568                           ; 1 bytes @ 0x48
 13569  0068                     	ds	6
 13570  006E                     ??_main:	
 13571                           
 13572                           ; 1 bytes @ 0x4E
 13573  006E                     	ds	1
 13574                           
 13575                           	psect	maintext
 13576  0661                     __pmaintext:	
 13577 ;;
 13578 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
 13579 ;;
 13580 ;; *************** function _main *****************
 13581 ;; Defined at:
 13582 ;;		line 225 in file "main.c"
 13583 ;; Parameters:    Size  Location     Type
 13584 ;;		None
 13585 ;; Auto vars:     Size  Location     Type
 13586 ;;		None
 13587 ;; Return value:  Size  Location     Type
 13588 ;;                  1    wreg      void 
 13589 ;; Registers used:
 13590 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13591 ;; Tracked objects:
 13592 ;;		On entry : B1F/0
 13593 ;;		On exit  : 0/0
 13594 ;;		Unchanged: 0/0
 13595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13596 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13597 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13598 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13599 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13600 ;;Total ram usage:        1 bytes
 13601 ;; Hardware stack levels required when called:   15
 13602 ;; This function calls:
 13603 ;;		_nullifyBadge_platformInit
 13604 ;;		_schedulerExecute
 13605 ;;		_scheduler_Init
 13606 ;;		_scheduler_TaskAdd
 13607 ;;		_scheduler_TaskInit
 13608 ;; This function is called by:
 13609 ;;		Startup code after reset
 13610 ;; This function uses a non-reentrant model
 13611 ;;
 13612                           
 13613                           
 13614                           ;psect for function _main
 13615  0661                     _main:	
 13616                           
 13617                           ;main.c: 228: nullifyBadge_platformInit(&badge_inst);
 13618                           
 13619                           ;incstack = 0
 13620                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13621  0661  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 13622  0662  31AE  2629  3186   	fcall	_nullifyBadge_platformInit
 13623                           
 13624                           ;main.c: 231: scheduler_Init(&schedulerInst);
 13625  0665  30A0               	movlw	(low (_schedulerInst| (0+256)))& (0+255)
 13626  0666  31B6  260E  3186   	fcall	_scheduler_Init
 13627                           
 13628                           ;main.c: 234: scheduler_TaskInit(&flashy_task);
 13629  0669  305A               	movlw	(low (_flashy_task| (0+256)))& (0+255)
 13630  066A  31A9  21C0  3186   	fcall	_scheduler_TaskInit
 13631                           
 13632                           ;main.c: 235: scheduler_TaskInit(&menu_task);
 13633  066D  304D               	movlw	(low (_menu_task| (0+256)))& (0+255)
 13634  066E  31A9  21C0  3186   	fcall	_scheduler_TaskInit
 13635                           
 13636                           ;main.c: 236: scheduler_TaskInit(&slot_task);
 13637  0671  3040               	movlw	(low (_slot_task| (0+256)))& (0+255)
 13638  0672  31A9  21C0  3186   	fcall	_scheduler_TaskInit
 13639                           
 13640                           ;main.c: 237: scheduler_TaskInit(&locked_task);
 13641  0675  3033               	movlw	(low (_locked_task| (0+256)))& (0+255)
 13642  0676  31A9  21C0  3186   	fcall	_scheduler_TaskInit
 13643                           
 13644                           ;main.c: 238: scheduler_TaskInit(&secret_task);
 13645  0679  3026               	movlw	(low (_secret_task| (0+256)))& (0+255)
 13646  067A  31A9  21C0  3186   	fcall	_scheduler_TaskInit
 13647                           
 13648                           ;main.c: 239: scheduler_TaskInit(&matrix_task);
 13649  067D  30C4               	movlw	(low (_matrix_task| (0+256)))& (0+255)
 13650  067E  31A9  21C0  3186   	fcall	_scheduler_TaskInit
 13651                           
 13652                           ;main.c: 242: flashy_TaskData.badge = &badge_inst;
 13653  0681  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 13654  0682  0020               	movlb	0	; select bank0
 13655  0683  00EE               	movwf	??_main
 13656  0684  086E               	movf	??_main,w
 13657  0685  0029               	movlb	9	; select bank9
 13658  0686  00BF               	movwf	_flashy_TaskData^(0+1152)
 13659                           
 13660                           ;main.c: 243: menu_TaskData.badge = &badge_inst;
 13661  0687  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 13662  0688  0020               	movlb	0	; select bank0
 13663  0689  00EE               	movwf	??_main
 13664  068A  086E               	movf	??_main,w
 13665  068B  0025               	movlb	5	; select bank5
 13666  068C  00BC               	movwf	_menu_TaskData^(0+640)
 13667                           
 13668                           ;main.c: 244: slot_TaskData.badge = &badge_inst;
 13669  068D  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 13670  068E  0020               	movlb	0	; select bank0
 13671  068F  00EE               	movwf	??_main
 13672  0690  086E               	movf	??_main,w
 13673  0691  002B               	movlb	11	; select bank11
 13674  0692  00A0               	movwf	_slot_TaskData^(0+1408)
 13675                           
 13676                           ;main.c: 245: locked_TaskData.badge = &badge_inst;
 13677  0693  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 13678  0694  0020               	movlb	0	; select bank0
 13679  0695  00EE               	movwf	??_main
 13680  0696  086E               	movf	??_main,w
 13681  0697  0025               	movlb	5	; select bank5
 13682  0698  00AE               	movwf	_locked_TaskData^(0+640)
 13683                           
 13684                           ;main.c: 246: secret_TaskData.badge = &badge_inst;
 13685  0699  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 13686  069A  0020               	movlb	0	; select bank0
 13687  069B  00EE               	movwf	??_main
 13688  069C  086E               	movf	??_main,w
 13689  069D  0025               	movlb	5	; select bank5
 13690  069E  00A0               	movwf	_secret_TaskData^(0+640)
 13691                           
 13692                           ;main.c: 247: matrix_TaskData.badge = &badge_inst;
 13693  069F  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 13694  06A0  0020               	movlb	0	; select bank0
 13695  06A1  00EE               	movwf	??_main
 13696  06A2  086E               	movf	??_main,w
 13697  06A3  0029               	movlb	9	; select bank9
 13698  06A4  00A0               	movwf	_matrix_TaskData^(0+1152)
 13699                           
 13700                           ;main.c: 251: badge_locked = 1;
 13701  06A5  0021               	movlb	1	; select bank1
 13702  06A6  01C4               	clrf	_badge_locked^(0+128)
 13703  06A7  0AC4               	incf	_badge_locked^(0+128),f
 13704                           
 13705                           ;main.c: 254: flashy_task.taskData = (void *) &flashy_TaskData;
 13706  06A8  30BF               	movlw	low _flashy_TaskData
 13707  06A9  0022               	movlb	2	; select bank2
 13708  06AA  00DC               	movwf	(low ((_flashy_task| (0+256)+2)))^0
 13709  06AB  3004               	movlw	high _flashy_TaskData
 13710  06AC  00DD               	movwf	((low ((_flashy_task| (0+256)+2))+1))^0
 13711                           
 13712                           ;main.c: 255: flashy_task.taskInitCallback = flashy_Init;
 13713  06AD  3064               	movlw	low _flashy_Init
 13714  06AE  00DE               	movwf	(low ((_flashy_task| (0+256)+4)))^0
 13715  06AF  3007               	movlw	high _flashy_Init
 13716  06B0  00DF               	movwf	((low ((_flashy_task| (0+256)+4)))^0+1)
 13717                           
 13718                           ;main.c: 256: flashy_task.taskExecuteCallback = flashy_Main;
 13719  06B1  3019               	movlw	low _flashy_Main
 13720  06B2  00E2               	movwf	(low ((_flashy_task| (0+256)+8)))^0
 13721  06B3  3008               	movlw	high _flashy_Main
 13722  06B4  00E3               	movwf	((low ((_flashy_task| (0+256)+8)))^0+1)
 13723                           
 13724                           ;main.c: 257: flashy_task.taskExitCallback = flashy_Exit;
 13725  06B5  3000               	movlw	0
 13726  06B6  00E0               	movwf	(low ((_flashy_task| (0+256)+6)))^0
 13727  06B7  3000               	movlw	0
 13728  06B8  00E1               	movwf	((low ((_flashy_task| (0+256)+6)))^0+1)
 13729                           
 13730                           ;main.c: 258: flashy_task.taskInterval = 10;
 13731  06B9  300A               	movlw	10
 13732  06BA  00E4               	movwf	(_flashy_task^(0+256)+10)
 13733  06BB  3000               	movlw	0
 13734  06BC  00E5               	movwf	(_flashy_task^(0+256)+11)
 13735                           
 13736                           ;main.c: 260: menu_task.taskData = (void *) &menu_TaskData;
 13737  06BD  30BC               	movlw	low _menu_TaskData
 13738  06BE  00CF               	movwf	(low ((_menu_task| (0+256)+2)))^0
 13739  06BF  3002               	movlw	high _menu_TaskData
 13740  06C0  00D0               	movwf	((low ((_menu_task| (0+256)+2))+1))^0
 13741                           
 13742                           ;main.c: 261: menu_task.taskInitCallback = menu_Init;
 13743  06C1  303B               	movlw	low _menu_Init
 13744  06C2  00D1               	movwf	(low ((_menu_task| (0+256)+4)))^0
 13745  06C3  302F               	movlw	high _menu_Init
 13746  06C4  00D2               	movwf	((low ((_menu_task| (0+256)+4)))^0+1)
 13747                           
 13748                           ;main.c: 262: menu_task.taskExecuteCallback = menu_Main;
 13749  06C5  3009               	movlw	low _menu_Main
 13750  06C6  00D5               	movwf	(low ((_menu_task| (0+256)+8)))^0
 13751  06C7  301E               	movlw	high _menu_Main
 13752  06C8  00D6               	movwf	((low ((_menu_task| (0+256)+8)))^0+1)
 13753                           
 13754                           ;main.c: 263: menu_task.taskExitCallback = menu_Exit;
 13755  06C9  3000               	movlw	0
 13756  06CA  00D3               	movwf	(low ((_menu_task| (0+256)+6)))^0
 13757  06CB  3000               	movlw	0
 13758  06CC  00D4               	movwf	((low ((_menu_task| (0+256)+6)))^0+1)
 13759                           
 13760                           ;main.c: 264: menu_task.taskInterval = 10;
 13761  06CD  300A               	movlw	10
 13762  06CE  00D7               	movwf	(_menu_task^(0+256)+10)
 13763  06CF  3000               	movlw	0
 13764  06D0  00D8               	movwf	(_menu_task^(0+256)+11)
 13765                           
 13766                           ;main.c: 266: slot_task.taskData = (void *) &slot_TaskData;
 13767  06D1  30A0               	movlw	low _slot_TaskData
 13768  06D2  00C2               	movwf	(low ((_slot_task| (0+256)+2)))^0
 13769  06D3  3005               	movlw	high _slot_TaskData
 13770  06D4  00C3               	movwf	((low ((_slot_task| (0+256)+2))+1))^0
 13771                           
 13772                           ;main.c: 267: slot_task.taskInitCallback = slot_Init;
 13773  06D5  3028               	movlw	low _slot_Init
 13774  06D6  00C4               	movwf	(low ((_slot_task| (0+256)+4)))^0
 13775  06D7  3020               	movlw	high _slot_Init
 13776  06D8  00C5               	movwf	((low ((_slot_task| (0+256)+4)))^0+1)
 13777                           
 13778                           ;main.c: 268: slot_task.taskExecuteCallback = slot_Main;
 13779  06D9  30E5               	movlw	low _slot_Main
 13780  06DA  00C8               	movwf	(low ((_slot_task| (0+256)+8)))^0
 13781  06DB  3000               	movlw	high _slot_Main
 13782  06DC  00C9               	movwf	((low ((_slot_task| (0+256)+8)))^0+1)
 13783                           
 13784                           ;main.c: 269: slot_task.taskExitCallback = slot_Exit;
 13785  06DD  3000               	movlw	0
 13786  06DE  00C6               	movwf	(low ((_slot_task| (0+256)+6)))^0
 13787  06DF  3000               	movlw	0
 13788  06E0  00C7               	movwf	((low ((_slot_task| (0+256)+6)))^0+1)
 13789                           
 13790                           ;main.c: 270: slot_task.taskInterval = 10;
 13791  06E1  300A               	movlw	10
 13792  06E2  00CA               	movwf	(_slot_task^(0+256)+10)
 13793  06E3  3000               	movlw	0
 13794  06E4  00CB               	movwf	(_slot_task^(0+256)+11)
 13795                           
 13796                           ;main.c: 272: locked_task.taskData = (void *) &locked_TaskData;
 13797  06E5  30AE               	movlw	low _locked_TaskData
 13798  06E6  00B5               	movwf	(low ((_locked_task| (0+256)+2)))^0
 13799  06E7  3002               	movlw	high _locked_TaskData
 13800  06E8  00B6               	movwf	((low ((_locked_task| (0+256)+2))+1))^0
 13801                           
 13802                           ;main.c: 273: locked_task.taskInitCallback = locked_Init;
 13803  06E9  309D               	movlw	low _locked_Init
 13804  06EA  00B7               	movwf	(low ((_locked_task| (0+256)+4)))^0
 13805  06EB  302F               	movlw	high _locked_Init
 13806  06EC  00B8               	movwf	((low ((_locked_task| (0+256)+4)))^0+1)
 13807                           
 13808                           ;main.c: 274: locked_task.taskExecuteCallback = locked_Main;
 13809  06ED  302C               	movlw	low _locked_Main
 13810  06EE  00BB               	movwf	(low ((_locked_task| (0+256)+8)))^0
 13811  06EF  301C               	movlw	high _locked_Main
 13812  06F0  00BC               	movwf	((low ((_locked_task| (0+256)+8)))^0+1)
 13813                           
 13814                           ;main.c: 275: locked_task.taskExitCallback = locked_Exit;
 13815  06F1  3000               	movlw	0
 13816  06F2  00B9               	movwf	(low ((_locked_task| (0+256)+6)))^0
 13817  06F3  3000               	movlw	0
 13818  06F4  00BA               	movwf	((low ((_locked_task| (0+256)+6)))^0+1)
 13819                           
 13820                           ;main.c: 276: locked_task.taskInterval = 10;
 13821  06F5  300A               	movlw	10
 13822  06F6  00BD               	movwf	(_locked_task^(0+256)+10)
 13823  06F7  3000               	movlw	0
 13824  06F8  00BE               	movwf	(_locked_task^(0+256)+11)
 13825                           
 13826                           ;main.c: 278: secret_task.taskData = (void *) &secret_TaskData;
 13827  06F9  30A0               	movlw	low _secret_TaskData
 13828  06FA  00A8               	movwf	(low ((_secret_task| (0+256)+2)))^0
 13829  06FB  3002               	movlw	high _secret_TaskData
 13830  06FC  00A9               	movwf	((low ((_secret_task| (0+256)+2))+1))^0
 13831                           
 13832                           ;main.c: 279: secret_task.taskInitCallback = secret_Init;
 13833  06FD  307E               	movlw	low _secret_Init
 13834  06FE  00AA               	movwf	(low ((_secret_task| (0+256)+4)))^0
 13835  06FF  302E               	movlw	high _secret_Init
 13836  0700  00AB               	movwf	((low ((_secret_task| (0+256)+4)))^0+1)
 13837                           
 13838                           ;main.c: 280: secret_task.taskExecuteCallback = secret_Main;
 13839  0701  3043               	movlw	low _secret_Main
 13840  0702  00AE               	movwf	(low ((_secret_task| (0+256)+8)))^0
 13841  0703  3026               	movlw	high _secret_Main
 13842  0704  00AF               	movwf	((low ((_secret_task| (0+256)+8)))^0+1)
 13843                           
 13844                           ;main.c: 281: secret_task.taskExitCallback = secret_Exit;
 13845  0705  3000               	movlw	0
 13846  0706  00AC               	movwf	(low ((_secret_task| (0+256)+6)))^0
 13847  0707  3000               	movlw	0
 13848  0708  00AD               	movwf	((low ((_secret_task| (0+256)+6)))^0+1)
 13849                           
 13850                           ;main.c: 282: secret_task.taskInterval = 10;
 13851  0709  300A               	movlw	10
 13852  070A  00B0               	movwf	(_secret_task^(0+256)+10)
 13853  070B  3000               	movlw	0
 13854  070C  00B1               	movwf	(_secret_task^(0+256)+11)
 13855                           
 13856                           ;main.c: 284: matrix_task.taskData = (void *) &matrix_TaskData;
 13857  070D  30A0               	movlw	low _matrix_TaskData
 13858  070E  0023               	movlb	3	; select bank3
 13859  070F  00C6               	movwf	(low ((_matrix_task| (0+256)+2)))^(0+128)
 13860  0710  3004               	movlw	high _matrix_TaskData
 13861  0711  00C7               	movwf	((low ((_matrix_task| (0+256)+2))+1))^(0+128)
 13862                           
 13863                           ;main.c: 285: matrix_task.taskInitCallback = matrix_Init;
 13864  0712  3047               	movlw	low _matrix_Init
 13865  0713  00C8               	movwf	(low ((_matrix_task| (0+256)+4)))^(0+128)
 13866  0714  3023               	movlw	high _matrix_Init
 13867  0715  00C9               	movwf	((low ((_matrix_task| (0+256)+4)))^(0+128)+1)
 13868                           
 13869                           ;main.c: 286: matrix_task.taskExecuteCallback = matrix_Main;
 13870  0716  30E3               	movlw	low _matrix_Main
 13871  0717  00CC               	movwf	(low ((_matrix_task| (0+256)+8)))^(0+128)
 13872  0718  3010               	movlw	high _matrix_Main
 13873  0719  00CD               	movwf	((low ((_matrix_task| (0+256)+8)))^(0+128)+1)
 13874                           
 13875                           ;main.c: 287: matrix_task.taskExitCallback = matrix_Exit;
 13876  071A  3000               	movlw	0
 13877  071B  00CA               	movwf	(low ((_matrix_task| (0+256)+6)))^(0+128)
 13878  071C  3000               	movlw	0
 13879  071D  00CB               	movwf	((low ((_matrix_task| (0+256)+6)))^(0+128)+1)
 13880                           
 13881                           ;main.c: 288: matrix_task.taskInterval = 10;
 13882  071E  300A               	movlw	10
 13883  071F  00CE               	movwf	(_matrix_task^(0+384)+10)
 13884  0720  3000               	movlw	0
 13885  0721  00CF               	movwf	(_matrix_task^(0+384)+11)
 13886                           
 13887                           ;main.c: 291: secret_value = SECRET_VALUE_INIT;
 13888  0722  0021               	movlb	1	; select bank1
 13889  0723  01C5               	clrf	_secret_value^(0+128)
 13890  0724  01C6               	clrf	(_secret_value+1)^(0+128)
 13891                           
 13892                           ;main.c: 294: currentTask = FLASHY_TASK;
 13893  0725  3002               	movlw	2
 13894  0726  00BA               	movwf	_currentTask^(0+128)
 13895  0727  3000               	movlw	0
 13896  0728  00BB               	movwf	(_currentTask^(0+128)+1)
 13897                           
 13898                           ;main.c: 296: scheduler_TaskAdd(&schedulerInst, &flashy_task);
 13899  0729  305A               	movlw	(low (_flashy_task| (0+256)))& (0+255)
 13900  072A  0020               	movlb	0	; select bank0
 13901  072B  00EE               	movwf	??_main
 13902  072C  086E               	movf	??_main,w
 13903  072D  00BF               	movwf	scheduler_TaskAdd@task
 13904  072E  30A0               	movlw	(low (_schedulerInst| (0+256)))& (0+255)
 13905  072F  31A2  2249  3186   	fcall	_scheduler_TaskAdd
 13906                           
 13907                           ;main.c: 297: scheduler_TaskAdd(&schedulerInst, &menu_task);
 13908  0732  304D               	movlw	(low (_menu_task| (0+256)))& (0+255)
 13909  0733  0020               	movlb	0	; select bank0
 13910  0734  00EE               	movwf	??_main
 13911  0735  086E               	movf	??_main,w
 13912  0736  00BF               	movwf	scheduler_TaskAdd@task
 13913  0737  30A0               	movlw	(low (_schedulerInst| (0+256)))& (0+255)
 13914  0738  31A2  2249  3186   	fcall	_scheduler_TaskAdd
 13915                           
 13916                           ;main.c: 298: scheduler_TaskAdd(&schedulerInst, &slot_task);
 13917  073B  3040               	movlw	(low (_slot_task| (0+256)))& (0+255)
 13918  073C  0020               	movlb	0	; select bank0
 13919  073D  00EE               	movwf	??_main
 13920  073E  086E               	movf	??_main,w
 13921  073F  00BF               	movwf	scheduler_TaskAdd@task
 13922  0740  30A0               	movlw	(low (_schedulerInst| (0+256)))& (0+255)
 13923  0741  31A2  2249  3186   	fcall	_scheduler_TaskAdd
 13924                           
 13925                           ;main.c: 299: scheduler_TaskAdd(&schedulerInst, &locked_task);
 13926  0744  3033               	movlw	(low (_locked_task| (0+256)))& (0+255)
 13927  0745  0020               	movlb	0	; select bank0
 13928  0746  00EE               	movwf	??_main
 13929  0747  086E               	movf	??_main,w
 13930  0748  00BF               	movwf	scheduler_TaskAdd@task
 13931  0749  30A0               	movlw	(low (_schedulerInst| (0+256)))& (0+255)
 13932  074A  31A2  2249  3186   	fcall	_scheduler_TaskAdd
 13933                           
 13934                           ;main.c: 300: scheduler_TaskAdd(&schedulerInst, &secret_task);
 13935  074D  3026               	movlw	(low (_secret_task| (0+256)))& (0+255)
 13936  074E  0020               	movlb	0	; select bank0
 13937  074F  00EE               	movwf	??_main
 13938  0750  086E               	movf	??_main,w
 13939  0751  00BF               	movwf	scheduler_TaskAdd@task
 13940  0752  30A0               	movlw	(low (_schedulerInst| (0+256)))& (0+255)
 13941  0753  31A2  2249  3186   	fcall	_scheduler_TaskAdd
 13942                           
 13943                           ;main.c: 301: scheduler_TaskAdd(&schedulerInst, &matrix_task);
 13944  0756  30C4               	movlw	(low (_matrix_task| (0+256)))& (0+255)
 13945  0757  0020               	movlb	0	; select bank0
 13946  0758  00EE               	movwf	??_main
 13947  0759  086E               	movf	??_main,w
 13948  075A  00BF               	movwf	scheduler_TaskAdd@task
 13949  075B  30A0               	movlw	(low (_schedulerInst| (0+256)))& (0+255)
 13950  075C  31A2  2249  3186   	fcall	_scheduler_TaskAdd
 13951  075F                     l10639:	
 13952                           ;main.c: 304: while(1){
 13953                           
 13954                           
 13955                           ;main.c: 305: schedulerExecute(&schedulerInst);
 13956  075F  30A0               	movlw	(low (_schedulerInst| (0+256)))& (0+255)
 13957  0760  31A2  22C3  3186   	fcall	_schedulerExecute
 13958  0763  2F5F               	goto	l10639
 13959  0764                     __end_of_main:	
 13960                           
 13961                           	psect	text1
 13962  29C0                     __ptext1:	
 13963 ;; *************** function _scheduler_TaskInit *****************
 13964 ;; Defined at:
 13965 ;;		line 36 in file "cooperative_scheduler.c"
 13966 ;; Parameters:    Size  Location     Type
 13967 ;;  task            1    wreg     PTR struct t_schedulerTa
 13968 ;;		 -> matrix_task(13), secret_task(13), locked_task(13), slot_task(13), 
 13969 ;;		 -> menu_task(13), flashy_task(13), 
 13970 ;; Auto vars:     Size  Location     Type
 13971 ;;  task            1    1[COMMON] PTR struct t_schedulerTa
 13972 ;;		 -> matrix_task(13), secret_task(13), locked_task(13), slot_task(13), 
 13973 ;;		 -> menu_task(13), flashy_task(13), 
 13974 ;; Return value:  Size  Location     Type
 13975 ;;                  1    wreg      void 
 13976 ;; Registers used:
 13977 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13978 ;; Tracked objects:
 13979 ;;		On entry : 0/0
 13980 ;;		On exit  : 0/0
 13981 ;;		Unchanged: 0/0
 13982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13984 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13985 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13986 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13987 ;;Total ram usage:        1 bytes
 13988 ;; Hardware stack levels used:    1
 13989 ;; Hardware stack levels required when called:    4
 13990 ;; This function calls:
 13991 ;;		Nothing
 13992 ;; This function is called by:
 13993 ;;		_main
 13994 ;; This function uses a non-reentrant model
 13995 ;;
 13996                           
 13997                           
 13998                           ;psect for function _scheduler_TaskInit
 13999  29C0                     _scheduler_TaskInit:	
 14000                           
 14001                           ;incstack = 0
 14002                           ; Regs used in _scheduler_TaskInit: [wreg+fsr1l+fsr1h+status,2+status,0]
 14003                           ;scheduler_TaskInit@task stored from wreg
 14004  29C0  00F1               	movwf	scheduler_TaskInit@task
 14005                           
 14006                           ;cooperative_scheduler.c: 37: task->systemTickLastExecuted = 0;
 14007  29C1  0871               	movf	scheduler_TaskInit@task,w
 14008  29C2  0086               	movwf	6
 14009  29C3  3001               	movlw	1	; select bank2/3
 14010  29C4  0087               	movwf	7
 14011  29C5  3000               	movlw	0
 14012  29C6  3FC0               	movwi [0]fsr1
 14013  29C7  3FC1               	movwi [1]fsr1
 14014                           
 14015                           ;cooperative_scheduler.c: 38: task->taskData = (0);
 14016  29C8  0871               	movf	scheduler_TaskInit@task,w
 14017  29C9  3E02               	addlw	2
 14018  29CA  0086               	movwf	6
 14019  29CB  3001               	movlw	1	; select bank2/3
 14020  29CC  0087               	movwf	7
 14021  29CD  3000               	movlw	0
 14022  29CE  3FC0               	movwi [0]fsr1
 14023  29CF  3FC1               	movwi [1]fsr1
 14024                           
 14025                           ;cooperative_scheduler.c: 39: task->taskInitCallback = (0);
 14026  29D0  0871               	movf	scheduler_TaskInit@task,w
 14027  29D1  3E04               	addlw	4
 14028  29D2  0086               	movwf	6
 14029  29D3  3001               	movlw	1	; select bank2/3
 14030  29D4  0087               	movwf	7
 14031  29D5  3000               	movlw	0
 14032  29D6  3FC0               	movwi [0]fsr1
 14033  29D7  3FC1               	movwi [1]fsr1
 14034                           
 14035                           ;cooperative_scheduler.c: 40: task->taskExitCallback = (0);
 14036  29D8  0871               	movf	scheduler_TaskInit@task,w
 14037  29D9  3E06               	addlw	6
 14038  29DA  0086               	movwf	6
 14039  29DB  3001               	movlw	1	; select bank2/3
 14040  29DC  0087               	movwf	7
 14041  29DD  3000               	movlw	0
 14042  29DE  3FC0               	movwi [0]fsr1
 14043  29DF  3FC1               	movwi [1]fsr1
 14044                           
 14045                           ;cooperative_scheduler.c: 41: task->taskExecuteCallback = (0);
 14046  29E0  0871               	movf	scheduler_TaskInit@task,w
 14047  29E1  3E08               	addlw	8
 14048  29E2  0086               	movwf	6
 14049  29E3  3001               	movlw	1	; select bank2/3
 14050  29E4  0087               	movwf	7
 14051  29E5  3000               	movlw	0
 14052  29E6  3FC0               	movwi [0]fsr1
 14053  29E7  3FC1               	movwi [1]fsr1
 14054                           
 14055                           ;cooperative_scheduler.c: 42: task->taskInterval = 65535;
 14056  29E8  0871               	movf	scheduler_TaskInit@task,w
 14057  29E9  3E0A               	addlw	10
 14058  29EA  0086               	movwf	6
 14059  29EB  3001               	movlw	1	; select bank2/3
 14060  29EC  0087               	movwf	7
 14061  29ED  30FF               	movlw	255
 14062  29EE  3FC0               	movwi [0]fsr1
 14063  29EF  30FF               	movlw	255
 14064  29F0  3FC1               	movwi [1]fsr1
 14065                           
 14066                           ;cooperative_scheduler.c: 43: task->taskId = -1;
 14067  29F1  0871               	movf	scheduler_TaskInit@task,w
 14068  29F2  3E0C               	addlw	12
 14069  29F3  0086               	movwf	6
 14070  29F4  3001               	movlw	1	; select bank2/3
 14071  29F5  0087               	movwf	7
 14072  29F6  0181               	clrf	1
 14073  29F7  0381               	decf	1,f
 14074  29F8  0008               	return
 14075  29F9                     __end_of_scheduler_TaskInit:	
 14076                           
 14077                           	psect	text2
 14078  2249                     __ptext2:	
 14079 ;; *************** function _scheduler_TaskAdd *****************
 14080 ;; Defined at:
 14081 ;;		line 46 in file "cooperative_scheduler.c"
 14082 ;; Parameters:    Size  Location     Type
 14083 ;;  scheduler       1    wreg     PTR struct t_scheduler
 14084 ;;		 -> schedulerInst(18), 
 14085 ;;  task            1   31[BANK0 ] PTR struct t_schedulerTa
 14086 ;;		 -> matrix_task(13), secret_task(13), locked_task(13), slot_task(13), 
 14087 ;;		 -> menu_task(13), flashy_task(13), 
 14088 ;; Auto vars:     Size  Location     Type
 14089 ;;  scheduler       1   38[BANK0 ] PTR struct t_scheduler
 14090 ;;		 -> schedulerInst(18), 
 14091 ;;  k               1   39[BANK0 ] unsigned char 
 14092 ;; Return value:  Size  Location     Type
 14093 ;;                  1    wreg      char 
 14094 ;; Registers used:
 14095 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14096 ;; Tracked objects:
 14097 ;;		On entry : 0/0
 14098 ;;		On exit  : 0/0
 14099 ;;		Unchanged: 0/0
 14100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14101 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14102 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14103 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14104 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14105 ;;Total ram usage:        9 bytes
 14106 ;; Hardware stack levels used:    1
 14107 ;; Hardware stack levels required when called:   11
 14108 ;; This function calls:
 14109 ;;		Absolute function
 14110 ;;		_flashy_Init
 14111 ;;		_locked_Init
 14112 ;;		_matrix_Init
 14113 ;;		_menu_Init
 14114 ;;		_secret_Init
 14115 ;;		_slot_Init
 14116 ;; This function is called by:
 14117 ;;		_main
 14118 ;; This function uses a non-reentrant model
 14119 ;;
 14120                           
 14121                           
 14122                           ;psect for function _scheduler_TaskAdd
 14123  2249                     _scheduler_TaskAdd:	
 14124                           
 14125                           ;incstack = 0
 14126                           ; Regs used in _scheduler_TaskAdd: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14127                           ;scheduler_TaskAdd@scheduler stored from wreg
 14128  2249  0020               	movlb	0	; select bank0
 14129  224A  00C6               	movwf	scheduler_TaskAdd@scheduler
 14130                           
 14131                           ;cooperative_scheduler.c: 47: u8 k;
 14132                           ;cooperative_scheduler.c: 48: for (k = 0; k < 16; k++) {
 14133  224B  01C7               	clrf	scheduler_TaskAdd@k
 14134  224C  3010               	movlw	16
 14135  224D  0247               	subwf	scheduler_TaskAdd@k,w
 14136  224E  1803               	btfsc	3,0
 14137  224F  2ABB               	goto	l10435
 14138  2250                     l10421:	
 14139                           
 14140                           ;cooperative_scheduler.c: 49: if (!(scheduler->taskEntryVector & (1 << k)) ) {
 14141  2250  0846               	movf	scheduler_TaskAdd@scheduler,w
 14142  2251  3E10               	addlw	16
 14143  2252  0086               	movwf	6
 14144  2253  3001               	movlw	1	; select bank2/3
 14145  2254  0087               	movwf	7
 14146  2255  3F40               	moviw [0]fsr1
 14147  2256  00C0               	movwf	??_scheduler_TaskAdd
 14148  2257  3F41               	moviw [1]fsr1
 14149  2258  00C1               	movwf	??_scheduler_TaskAdd+1
 14150  2259  3001               	movlw	1
 14151  225A  00C2               	movwf	??_scheduler_TaskAdd+2
 14152  225B  3000               	movlw	0
 14153  225C  00C3               	movwf	??_scheduler_TaskAdd+3
 14154  225D  0A47               	incf	scheduler_TaskAdd@k,w
 14155  225E  2A61               	goto	u6424
 14156  225F                     u6425:	
 14157  225F  35C2               	lslf	??_scheduler_TaskAdd+2,f
 14158  2260  0DC3               	rlf	??_scheduler_TaskAdd+3,f
 14159  2261                     u6424:	
 14160  2261  0B89               	decfsz	9,f
 14161  2262  2A5F               	goto	u6425
 14162  2263  0840               	movf	??_scheduler_TaskAdd,w
 14163  2264  0542               	andwf	??_scheduler_TaskAdd+2,w
 14164  2265  00C4               	movwf	??_scheduler_TaskAdd+4
 14165  2266  0841               	movf	??_scheduler_TaskAdd+1,w
 14166  2267  0543               	andwf	??_scheduler_TaskAdd+3,w
 14167  2268  00C5               	movwf	??_scheduler_TaskAdd+5
 14168  2269  0844               	movf	??_scheduler_TaskAdd+4,w
 14169  226A  0445               	iorwf	??_scheduler_TaskAdd+5,w
 14170  226B  1D03               	btfss	3,2
 14171  226C  2AB3               	goto	l10431
 14172                           
 14173                           ;cooperative_scheduler.c: 50: scheduler->tasks[k] = task;
 14174  226D  083F               	movf	scheduler_TaskAdd@task,w
 14175  226E  00C0               	movwf	??_scheduler_TaskAdd
 14176  226F  0847               	movf	scheduler_TaskAdd@k,w
 14177  2270  0746               	addwf	scheduler_TaskAdd@scheduler,w
 14178  2271  00C1               	movwf	??_scheduler_TaskAdd+1
 14179  2272  0841               	movf	??_scheduler_TaskAdd+1,w
 14180  2273  0086               	movwf	6
 14181  2274  3001               	movlw	1	; select bank2/3
 14182  2275  0087               	movwf	7
 14183  2276  0840               	movf	??_scheduler_TaskAdd,w
 14184  2277  0081               	movwf	1
 14185                           
 14186                           ;cooperative_scheduler.c: 51: scheduler->taskEntryVector |= (1 << k);
 14187  2278  3001               	movlw	1
 14188  2279  00C0               	movwf	??_scheduler_TaskAdd
 14189  227A  3000               	movlw	0
 14190  227B  00C1               	movwf	??_scheduler_TaskAdd+1
 14191  227C  0A47               	incf	scheduler_TaskAdd@k,w
 14192  227D  2A80               	goto	u6444
 14193  227E                     u6445:	
 14194  227E  35C0               	lslf	??_scheduler_TaskAdd,f
 14195  227F  0DC1               	rlf	??_scheduler_TaskAdd+1,f
 14196  2280                     u6444:	
 14197  2280  0B89               	decfsz	9,f
 14198  2281  2A7E               	goto	u6445
 14199  2282  0846               	movf	scheduler_TaskAdd@scheduler,w
 14200  2283  3E10               	addlw	16
 14201  2284  0086               	movwf	6
 14202  2285  3001               	movlw	1	; select bank2/3
 14203  2286  0087               	movwf	7
 14204  2287  0840               	movf	??_scheduler_TaskAdd,w
 14205  2288  0481               	iorwf	1,f
 14206  2289  3141               	addfsr 1,1
 14207  228A  0841               	movf	??_scheduler_TaskAdd+1,w
 14208  228B  0481               	iorwf	1,f
 14209                           
 14210                           ;cooperative_scheduler.c: 53: if (task->taskInitCallback != (0)) {
 14211  228C  083F               	movf	scheduler_TaskAdd@task,w
 14212  228D  3E04               	addlw	4
 14213  228E  0086               	movwf	6
 14214  228F  3001               	movlw	1	; select bank2/3
 14215  2290  0087               	movwf	7
 14216  2291  0016               	moviw fsr1++
 14217  2292  0401               	iorwf	1,w
 14218  2293  1903               	btfsc	3,2
 14219  2294  2AA8               	goto	l10427
 14220                           
 14221                           ;cooperative_scheduler.c: 54: task->taskInitCallback (task->taskData);
 14222  2295  083F               	movf	scheduler_TaskAdd@task,w
 14223  2296  3E02               	addlw	2
 14224  2297  0086               	movwf	6
 14225  2298  3001               	movlw	1	; select bank2/3
 14226  2299  0087               	movwf	7
 14227  229A  3F40               	moviw [0]fsr1
 14228  229B  00B9               	movwf	matrix_Init@taskData
 14229  229C  3F41               	moviw [1]fsr1
 14230  229D  00BA               	movwf	matrix_Init@taskData+1
 14231  229E  083F               	movf	scheduler_TaskAdd@task,w
 14232  229F  3E04               	addlw	4
 14233  22A0  0086               	movwf	6
 14234  22A1  3001               	movlw	1	; select bank2/3
 14235  22A2  0087               	movwf	7
 14236  22A3  3F41               	moviw [1]fsr1
 14237  22A4  008A               	movwf	10
 14238  22A5  3F40               	moviw [0]fsr1
 14239  22A6  000A               	callw
 14240  22A7  31A2               	pagesel	$
 14241  22A8                     l10427:	
 14242                           
 14243                           ;cooperative_scheduler.c: 55: }
 14244                           ;cooperative_scheduler.c: 57: task->taskId = (s8) k;
 14245  22A8  0020               	movlb	0	; select bank0
 14246  22A9  0847               	movf	scheduler_TaskAdd@k,w
 14247  22AA  00C0               	movwf	??_scheduler_TaskAdd
 14248  22AB  083F               	movf	scheduler_TaskAdd@task,w
 14249  22AC  3E0C               	addlw	12
 14250  22AD  0086               	movwf	6
 14251  22AE  3001               	movlw	1	; select bank2/3
 14252  22AF  0087               	movwf	7
 14253  22B0  0840               	movf	??_scheduler_TaskAdd,w
 14254  22B1  0081               	movwf	1
 14255                           
 14256                           ;cooperative_scheduler.c: 58: return k;
 14257                           ;	Return value of _scheduler_TaskAdd is never used
 14258  22B2  0008               	return
 14259  22B3                     l10431:	
 14260  22B3  3001               	movlw	1
 14261  22B4  00C0               	movwf	??_scheduler_TaskAdd
 14262  22B5  0840               	movf	??_scheduler_TaskAdd,w
 14263  22B6  07C7               	addwf	scheduler_TaskAdd@k,f
 14264  22B7  3010               	movlw	16
 14265  22B8  0247               	subwf	scheduler_TaskAdd@k,w
 14266  22B9  1C03               	skipc
 14267  22BA  2A50               	goto	l10421
 14268  22BB                     l10435:	
 14269                           
 14270                           ;cooperative_scheduler.c: 59: }
 14271                           ;cooperative_scheduler.c: 60: }
 14272                           ;cooperative_scheduler.c: 62: task->taskId = -1;
 14273  22BB  083F               	movf	scheduler_TaskAdd@task,w
 14274  22BC  3E0C               	addlw	12
 14275  22BD  0086               	movwf	6
 14276  22BE  3001               	movlw	1	; select bank2/3
 14277  22BF  0087               	movwf	7
 14278  22C0  0181               	clrf	1
 14279  22C1  0381               	decf	1,f
 14280  22C2  0008               	return
 14281  22C3                     __end_of_scheduler_TaskAdd:	
 14282                           ;cooperative_scheduler.c: 63: return -1;
 14283                           ;	Return value of _scheduler_TaskAdd is never used
 14284                           
 14285                           
 14286                           	psect	text3
 14287  2347                     __ptext3:	
 14288 ;; *************** function _matrix_Init *****************
 14289 ;; Defined at:
 14290 ;;		line 66 in file "matrix_task.c"
 14291 ;; Parameters:    Size  Location     Type
 14292 ;;  taskData        2   25[BANK0 ] PTR void 
 14293 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 14294 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 14295 ;; Auto vars:     Size  Location     Type
 14296 ;;  data            2   29[BANK0 ] PTR struct t_matrix_task
 14297 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 14298 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 14299 ;; Return value:  Size  Location     Type
 14300 ;;                  1    wreg      void 
 14301 ;; Registers used:
 14302 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14303 ;; Tracked objects:
 14304 ;;		On entry : 0/0
 14305 ;;		On exit  : 0/0
 14306 ;;		Unchanged: 0/0
 14307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14308 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14309 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14310 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14311 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14312 ;;Total ram usage:        6 bytes
 14313 ;; Hardware stack levels used:    1
 14314 ;; Hardware stack levels required when called:   10
 14315 ;; This function calls:
 14316 ;;		_nullifyBadge_segDisplayErase
 14317 ;;		_nullifyBadge_segDisplayRegister
 14318 ;;		_nullifyBadge_userLedsClr
 14319 ;;		_nullifyBadge_userLedsRegister
 14320 ;; This function is called by:
 14321 ;;		_main
 14322 ;;		_scheduler_TaskAdd
 14323 ;; This function uses a non-reentrant model
 14324 ;;
 14325                           
 14326                           
 14327                           ;psect for function _matrix_Init
 14328  2347                     _matrix_Init:	
 14329                           
 14330                           ;matrix_task.c: 67: struct t_matrix_taskData *data = (struct t_matrix_taskData *) taskDa
      +                          ta;
 14331                           
 14332                           ;incstack = 0
 14333                           ; Regs used in _matrix_Init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14334  2347  0020               	movlb	0	; select bank0
 14335  2348  083A               	movf	matrix_Init@taskData+1,w
 14336  2349  00BE               	movwf	matrix_Init@data+1
 14337  234A  0839               	movf	matrix_Init@taskData,w
 14338  234B  00BD               	movwf	matrix_Init@data
 14339                           
 14340                           ;matrix_task.c: 70: nullifyBadge_userLedsRegister(data->badge);
 14341  234C  083D               	movf	matrix_Init@data,w
 14342  234D  0086               	movwf	6
 14343  234E  083E               	movf	matrix_Init@data+1,w
 14344  234F  0087               	movwf	7
 14345  2350  0801               	movf	1,w
 14346  2351  31B4  24B6  31A3   	fcall	_nullifyBadge_userLedsRegister
 14347                           
 14348                           ;matrix_task.c: 71: nullifyBadge_userLedsClr(data->badge);
 14349  2354  0020               	movlb	0	; select bank0
 14350  2355  083D               	movf	matrix_Init@data,w
 14351  2356  0086               	movwf	6
 14352  2357  083E               	movf	matrix_Init@data+1,w
 14353  2358  0087               	movwf	7
 14354  2359  0801               	movf	1,w
 14355  235A  3187  27FA  31A3   	fcall	_nullifyBadge_userLedsClr
 14356                           
 14357                           ;matrix_task.c: 72: nullifyBadge_segDisplayRegister(data->badge);
 14358  235D  0020               	movlb	0	; select bank0
 14359  235E  083D               	movf	matrix_Init@data,w
 14360  235F  0086               	movwf	6
 14361  2360  083E               	movf	matrix_Init@data+1,w
 14362  2361  0087               	movwf	7
 14363  2362  0801               	movf	1,w
 14364  2363  31B3  23DF  31A3   	fcall	_nullifyBadge_segDisplayRegister
 14365                           
 14366                           ;matrix_task.c: 73: nullifyBadge_segDisplayErase(data->badge);
 14367  2366  0020               	movlb	0	; select bank0
 14368  2367  083D               	movf	matrix_Init@data,w
 14369  2368  0086               	movwf	6
 14370  2369  083E               	movf	matrix_Init@data+1,w
 14371  236A  0087               	movwf	7
 14372  236B  0801               	movf	1,w
 14373  236C  31B3  23D1  31A3   	fcall	_nullifyBadge_segDisplayErase
 14374                           
 14375                           ;matrix_task.c: 75: data->display_state = MATRIX_STATE_DISPLAY;
 14376  236F  0020               	movlb	0	; select bank0
 14377  2370  083D               	movf	matrix_Init@data,w
 14378  2371  3E02               	addlw	2
 14379  2372  00BB               	movwf	??_matrix_Init
 14380  2373  3000               	movlw	0
 14381  2374  3D3E               	addwfc	matrix_Init@data+1,w
 14382  2375  00BC               	movwf	??_matrix_Init+1
 14383  2376  083B               	movf	??_matrix_Init,w
 14384  2377  0086               	movwf	6
 14385  2378  083C               	movf	??_matrix_Init+1,w
 14386  2379  0087               	movwf	7
 14387  237A  300A               	movlw	10
 14388  237B  0081               	movwf	1
 14389                           
 14390                           ;matrix_task.c: 76: data->martix_state = STILL_IN_MATRIX;
 14391  237C  083D               	movf	matrix_Init@data,w
 14392  237D  3E01               	addlw	1
 14393  237E  00BB               	movwf	??_matrix_Init
 14394  237F  3000               	movlw	0
 14395  2380  3D3E               	addwfc	matrix_Init@data+1,w
 14396  2381  00BC               	movwf	??_matrix_Init+1
 14397  2382  083B               	movf	??_matrix_Init,w
 14398  2383  0086               	movwf	6
 14399  2384  083C               	movf	??_matrix_Init+1,w
 14400  2385  0087               	movwf	7
 14401  2386  3001               	movlw	1
 14402  2387  0081               	movwf	1
 14403                           
 14404                           ;matrix_task.c: 77: matrix_leds_idx =0;
 14405  2388  0021               	movlb	1	; select bank1
 14406  2389  01A0               	clrf	_matrix_leds_idx^(0+128)
 14407  238A  01A1               	clrf	(_matrix_leds_idx+1)^(0+128)
 14408                           
 14409                           ;matrix_task.c: 80: data->holdCountA = 0 ;
 14410  238B  0020               	movlb	0	; select bank0
 14411  238C  083D               	movf	matrix_Init@data,w
 14412  238D  0086               	movwf	6
 14413  238E  083E               	movf	matrix_Init@data+1,w
 14414  238F  0087               	movwf	7
 14415  2390  3149               	addfsr 1,9
 14416  2391  3000               	movlw	0
 14417  2392  3FC0               	movwi [0]fsr1
 14418  2393  3FC1               	movwi [1]fsr1
 14419                           
 14420                           ;matrix_task.c: 81: data->holdCountB = 0 ;
 14421  2394  083D               	movf	matrix_Init@data,w
 14422  2395  0086               	movwf	6
 14423  2396  083E               	movf	matrix_Init@data+1,w
 14424  2397  0087               	movwf	7
 14425  2398  314B               	addfsr 1,11
 14426  2399  3000               	movlw	0
 14427  239A  3FC0               	movwi [0]fsr1
 14428  239B  3FC1               	movwi [1]fsr1
 14429                           
 14430                           ;matrix_task.c: 82: data->holdCountX = 0 ;
 14431  239C  083D               	movf	matrix_Init@data,w
 14432  239D  0086               	movwf	6
 14433  239E  083E               	movf	matrix_Init@data+1,w
 14434  239F  0087               	movwf	7
 14435  23A0  314D               	addfsr 1,13
 14436  23A1  3000               	movlw	0
 14437  23A2  3FC0               	movwi [0]fsr1
 14438  23A3  3FC1               	movwi [1]fsr1
 14439                           
 14440                           ;matrix_task.c: 83: data->holdCountY = 0 ;
 14441  23A4  083D               	movf	matrix_Init@data,w
 14442  23A5  0086               	movwf	6
 14443  23A6  083E               	movf	matrix_Init@data+1,w
 14444  23A7  0087               	movwf	7
 14445  23A8  314F               	addfsr 1,15
 14446  23A9  3000               	movlw	0
 14447  23AA  3FC0               	movwi [0]fsr1
 14448  23AB  3FC1               	movwi [1]fsr1
 14449                           
 14450                           ;matrix_task.c: 84: data->holdCountXY = 0;
 14451  23AC  083D               	movf	matrix_Init@data,w
 14452  23AD  0086               	movwf	6
 14453  23AE  083E               	movf	matrix_Init@data+1,w
 14454  23AF  0087               	movwf	7
 14455  23B0  3151               	addfsr 1,17
 14456  23B1  3000               	movlw	0
 14457  23B2  3FC0               	movwi [0]fsr1
 14458  23B3  3FC1               	movwi [1]fsr1
 14459                           
 14460                           ;matrix_task.c: 85: data->holdCountAY = 0;
 14461  23B4  083D               	movf	matrix_Init@data,w
 14462  23B5  0086               	movwf	6
 14463  23B6  083E               	movf	matrix_Init@data+1,w
 14464  23B7  0087               	movwf	7
 14465  23B8  3153               	addfsr 1,19
 14466  23B9  3000               	movlw	0
 14467  23BA  3FC0               	movwi [0]fsr1
 14468  23BB  3FC1               	movwi [1]fsr1
 14469                           
 14470                           ;matrix_task.c: 86: data->holdCountAX = 0;
 14471  23BC  083D               	movf	matrix_Init@data,w
 14472  23BD  0086               	movwf	6
 14473  23BE  083E               	movf	matrix_Init@data+1,w
 14474  23BF  0087               	movwf	7
 14475  23C0  3155               	addfsr 1,21
 14476  23C1  3000               	movlw	0
 14477  23C2  3FC0               	movwi [0]fsr1
 14478  23C3  3FC1               	movwi [1]fsr1
 14479                           
 14480                           ;matrix_task.c: 87: data->holdCountBX = 0;
 14481  23C4  083D               	movf	matrix_Init@data,w
 14482  23C5  0086               	movwf	6
 14483  23C6  083E               	movf	matrix_Init@data+1,w
 14484  23C7  0087               	movwf	7
 14485  23C8  3157               	addfsr 1,23
 14486  23C9  3000               	movlw	0
 14487  23CA  3FC0               	movwi [0]fsr1
 14488  23CB  3FC1               	movwi [1]fsr1
 14489                           
 14490                           ;matrix_task.c: 88: data->holdCountBY = 0;
 14491  23CC  083D               	movf	matrix_Init@data,w
 14492  23CD  0086               	movwf	6
 14493  23CE  083E               	movf	matrix_Init@data+1,w
 14494  23CF  0087               	movwf	7
 14495  23D0  3159               	addfsr 1,25
 14496  23D1  3000               	movlw	0
 14497  23D2  3FC0               	movwi [0]fsr1
 14498  23D3  3FC1               	movwi [1]fsr1
 14499                           
 14500                           ;matrix_task.c: 89: data->holdCountBA = 0;
 14501  23D4  083D               	movf	matrix_Init@data,w
 14502  23D5  0086               	movwf	6
 14503  23D6  083E               	movf	matrix_Init@data+1,w
 14504  23D7  0087               	movwf	7
 14505  23D8  315B               	addfsr 1,27
 14506  23D9  3000               	movlw	0
 14507  23DA  3FC0               	movwi [0]fsr1
 14508  23DB  3FC1               	movwi [1]fsr1
 14509                           
 14510                           ;matrix_task.c: 90: data->noholdCount = 0;
 14511  23DC  083D               	movf	matrix_Init@data,w
 14512  23DD  0086               	movwf	6
 14513  23DE  083E               	movf	matrix_Init@data+1,w
 14514  23DF  0087               	movwf	7
 14515  23E0  315D               	addfsr 1,29
 14516  23E1  3000               	movlw	0
 14517  23E2  3FC0               	movwi [0]fsr1
 14518  23E3  3FC1               	movwi [1]fsr1
 14519  23E4  0008               	return
 14520  23E5                     __end_of_matrix_Init:	
 14521                           
 14522                           	psect	text4
 14523  2E7E                     __ptext4:	
 14524 ;; *************** function _secret_Init *****************
 14525 ;; Defined at:
 14526 ;;		line 51 in file "secret_task.c"
 14527 ;; Parameters:    Size  Location     Type
 14528 ;;  taskData        2   25[BANK0 ] PTR void 
 14529 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 14530 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 14531 ;; Auto vars:     Size  Location     Type
 14532 ;;  data            2   27[BANK0 ] PTR struct t_secret_task
 14533 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 14534 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 14535 ;; Return value:  Size  Location     Type
 14536 ;;                  1    wreg      void 
 14537 ;; Registers used:
 14538 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14539 ;; Tracked objects:
 14540 ;;		On entry : 0/0
 14541 ;;		On exit  : 0/0
 14542 ;;		Unchanged: 0/0
 14543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14544 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14545 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14546 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14547 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14548 ;;Total ram usage:        4 bytes
 14549 ;; Hardware stack levels used:    1
 14550 ;; Hardware stack levels required when called:   10
 14551 ;; This function calls:
 14552 ;;		_nullifyBadge_segDisplayErase
 14553 ;;		_nullifyBadge_segDisplayRegister
 14554 ;;		_nullifyBadge_userLedsClr
 14555 ;;		_nullifyBadge_userLedsRegister
 14556 ;; This function is called by:
 14557 ;;		_main
 14558 ;;		_scheduler_TaskAdd
 14559 ;; This function uses a non-reentrant model
 14560 ;;
 14561                           
 14562                           
 14563                           ;psect for function _secret_Init
 14564  2E7E                     _secret_Init:	
 14565                           
 14566                           ;secret_task.c: 52: struct t_secret_taskData *data = (struct t_secret_taskData *) taskDa
      +                          ta;
 14567                           
 14568                           ;incstack = 0
 14569                           ; Regs used in _secret_Init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14570  2E7E  0020               	movlb	0	; select bank0
 14571  2E7F  083A               	movf	secret_Init@taskData+1,w
 14572  2E80  00BC               	movwf	secret_Init@data+1
 14573  2E81  0839               	movf	secret_Init@taskData,w
 14574  2E82  00BB               	movwf	secret_Init@data
 14575                           
 14576                           ;secret_task.c: 55: nullifyBadge_userLedsRegister(data->badge);
 14577  2E83  083B               	movf	secret_Init@data,w
 14578  2E84  0086               	movwf	6
 14579  2E85  083C               	movf	secret_Init@data+1,w
 14580  2E86  0087               	movwf	7
 14581  2E87  0801               	movf	1,w
 14582  2E88  31B4  24B6  31AE   	fcall	_nullifyBadge_userLedsRegister
 14583                           
 14584                           ;secret_task.c: 56: nullifyBadge_userLedsClr(data->badge);
 14585  2E8B  0020               	movlb	0	; select bank0
 14586  2E8C  083B               	movf	secret_Init@data,w
 14587  2E8D  0086               	movwf	6
 14588  2E8E  083C               	movf	secret_Init@data+1,w
 14589  2E8F  0087               	movwf	7
 14590  2E90  0801               	movf	1,w
 14591  2E91  3187  27FA  31AE   	fcall	_nullifyBadge_userLedsClr
 14592                           
 14593                           ;secret_task.c: 57: nullifyBadge_segDisplayRegister(data->badge);
 14594  2E94  0020               	movlb	0	; select bank0
 14595  2E95  083B               	movf	secret_Init@data,w
 14596  2E96  0086               	movwf	6
 14597  2E97  083C               	movf	secret_Init@data+1,w
 14598  2E98  0087               	movwf	7
 14599  2E99  0801               	movf	1,w
 14600  2E9A  31B3  23DF  31AE   	fcall	_nullifyBadge_segDisplayRegister
 14601                           
 14602                           ;secret_task.c: 58: nullifyBadge_segDisplayErase(data->badge);
 14603  2E9D  0020               	movlb	0	; select bank0
 14604  2E9E  083B               	movf	secret_Init@data,w
 14605  2E9F  0086               	movwf	6
 14606  2EA0  083C               	movf	secret_Init@data+1,w
 14607  2EA1  0087               	movwf	7
 14608  2EA2  0801               	movf	1,w
 14609  2EA3  31B3  23D1  31AE   	fcall	_nullifyBadge_segDisplayErase
 14610                           
 14611                           ;secret_task.c: 61: data->delayTickCount = 300;
 14612  2EA6  0020               	movlb	0	; select bank0
 14613  2EA7  083B               	movf	secret_Init@data,w
 14614  2EA8  0086               	movwf	6
 14615  2EA9  083C               	movf	secret_Init@data+1,w
 14616  2EAA  0087               	movwf	7
 14617  2EAB  3142               	addfsr 1,2
 14618  2EAC  302C               	movlw	44
 14619  2EAD  3FC0               	movwi [0]fsr1
 14620  2EAE  3001               	movlw	1
 14621  2EAF  3FC1               	movwi [1]fsr1
 14622                           
 14623                           ;secret_task.c: 62: data->holdCountA = 0;
 14624  2EB0  083B               	movf	secret_Init@data,w
 14625  2EB1  0086               	movwf	6
 14626  2EB2  083C               	movf	secret_Init@data+1,w
 14627  2EB3  0087               	movwf	7
 14628  2EB4  3144               	addfsr 1,4
 14629  2EB5  3000               	movlw	0
 14630  2EB6  3FC0               	movwi [0]fsr1
 14631  2EB7  3FC1               	movwi [1]fsr1
 14632                           
 14633                           ;secret_task.c: 63: data->holdCountB = 0;
 14634  2EB8  083B               	movf	secret_Init@data,w
 14635  2EB9  0086               	movwf	6
 14636  2EBA  083C               	movf	secret_Init@data+1,w
 14637  2EBB  0087               	movwf	7
 14638  2EBC  3146               	addfsr 1,6
 14639  2EBD  3000               	movlw	0
 14640  2EBE  3FC0               	movwi [0]fsr1
 14641  2EBF  3FC1               	movwi [1]fsr1
 14642                           
 14643                           ;secret_task.c: 64: data->holdCountX = 0;
 14644  2EC0  083B               	movf	secret_Init@data,w
 14645  2EC1  0086               	movwf	6
 14646  2EC2  083C               	movf	secret_Init@data+1,w
 14647  2EC3  0087               	movwf	7
 14648  2EC4  3148               	addfsr 1,8
 14649  2EC5  3000               	movlw	0
 14650  2EC6  3FC0               	movwi [0]fsr1
 14651  2EC7  3FC1               	movwi [1]fsr1
 14652                           
 14653                           ;secret_task.c: 65: data->holdCountY = 0;
 14654  2EC8  083B               	movf	secret_Init@data,w
 14655  2EC9  0086               	movwf	6
 14656  2ECA  083C               	movf	secret_Init@data+1,w
 14657  2ECB  0087               	movwf	7
 14658  2ECC  314A               	addfsr 1,10
 14659  2ECD  3000               	movlw	0
 14660  2ECE  3FC0               	movwi [0]fsr1
 14661  2ECF  3FC1               	movwi [1]fsr1
 14662                           
 14663                           ;secret_task.c: 66: data->noholdCount = 0;
 14664  2ED0  083B               	movf	secret_Init@data,w
 14665  2ED1  0086               	movwf	6
 14666  2ED2  083C               	movf	secret_Init@data+1,w
 14667  2ED3  0087               	movwf	7
 14668  2ED4  314C               	addfsr 1,12
 14669  2ED5  3000               	movlw	0
 14670  2ED6  3FC0               	movwi [0]fsr1
 14671  2ED7  3FC1               	movwi [1]fsr1
 14672  2ED8  0008               	return
 14673  2ED9                     __end_of_secret_Init:	
 14674                           
 14675                           	psect	text5
 14676  2F9D                     __ptext5:	
 14677 ;; *************** function _locked_Init *****************
 14678 ;; Defined at:
 14679 ;;		line 65 in file "locked_task.c"
 14680 ;; Parameters:    Size  Location     Type
 14681 ;;  taskData        2   25[BANK0 ] PTR void 
 14682 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 14683 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 14684 ;; Auto vars:     Size  Location     Type
 14685 ;;  data            2   27[BANK0 ] PTR struct t_locked_task
 14686 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 14687 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 14688 ;; Return value:  Size  Location     Type
 14689 ;;                  1    wreg      void 
 14690 ;; Registers used:
 14691 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14692 ;; Tracked objects:
 14693 ;;		On entry : 0/0
 14694 ;;		On exit  : 0/0
 14695 ;;		Unchanged: 0/0
 14696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14697 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14698 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14699 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14700 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14701 ;;Total ram usage:        4 bytes
 14702 ;; Hardware stack levels used:    1
 14703 ;; Hardware stack levels required when called:   10
 14704 ;; This function calls:
 14705 ;;		_locked_lock_leds
 14706 ;;		_nullifyBadge_segDisplayErase
 14707 ;;		_nullifyBadge_segDisplayRegister
 14708 ;;		_nullifyBadge_userLedsClr
 14709 ;;		_nullifyBadge_userLedsRegister
 14710 ;; This function is called by:
 14711 ;;		_main
 14712 ;;		_scheduler_TaskAdd
 14713 ;; This function uses a non-reentrant model
 14714 ;;
 14715                           
 14716                           
 14717                           ;psect for function _locked_Init
 14718  2F9D                     _locked_Init:	
 14719                           
 14720                           ;locked_task.c: 66: struct t_locked_taskData *data = (struct t_locked_taskData *) taskDa
      +                          ta;
 14721                           
 14722                           ;incstack = 0
 14723                           ; Regs used in _locked_Init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14724  2F9D  0020               	movlb	0	; select bank0
 14725  2F9E  083A               	movf	locked_Init@taskData+1,w
 14726  2F9F  00BC               	movwf	locked_Init@data+1
 14727  2FA0  0839               	movf	locked_Init@taskData,w
 14728  2FA1  00BB               	movwf	locked_Init@data
 14729                           
 14730                           ;locked_task.c: 69: nullifyBadge_userLedsRegister(data->badge);
 14731  2FA2  083B               	movf	locked_Init@data,w
 14732  2FA3  0086               	movwf	6
 14733  2FA4  083C               	movf	locked_Init@data+1,w
 14734  2FA5  0087               	movwf	7
 14735  2FA6  0801               	movf	1,w
 14736  2FA7  31B4  24B6  31AF   	fcall	_nullifyBadge_userLedsRegister
 14737                           
 14738                           ;locked_task.c: 70: nullifyBadge_userLedsClr(data->badge);
 14739  2FAA  0020               	movlb	0	; select bank0
 14740  2FAB  083B               	movf	locked_Init@data,w
 14741  2FAC  0086               	movwf	6
 14742  2FAD  083C               	movf	locked_Init@data+1,w
 14743  2FAE  0087               	movwf	7
 14744  2FAF  0801               	movf	1,w
 14745  2FB0  3187  27FA  31AF   	fcall	_nullifyBadge_userLedsClr
 14746                           
 14747                           ;locked_task.c: 71: nullifyBadge_segDisplayRegister(data->badge);
 14748  2FB3  0020               	movlb	0	; select bank0
 14749  2FB4  083B               	movf	locked_Init@data,w
 14750  2FB5  0086               	movwf	6
 14751  2FB6  083C               	movf	locked_Init@data+1,w
 14752  2FB7  0087               	movwf	7
 14753  2FB8  0801               	movf	1,w
 14754  2FB9  31B3  23DF  31AF   	fcall	_nullifyBadge_segDisplayRegister
 14755                           
 14756                           ;locked_task.c: 72: nullifyBadge_segDisplayErase(data->badge);
 14757  2FBC  0020               	movlb	0	; select bank0
 14758  2FBD  083B               	movf	locked_Init@data,w
 14759  2FBE  0086               	movwf	6
 14760  2FBF  083C               	movf	locked_Init@data+1,w
 14761  2FC0  0087               	movwf	7
 14762  2FC1  0801               	movf	1,w
 14763  2FC2  31B3  23D1  31AF   	fcall	_nullifyBadge_segDisplayErase
 14764                           
 14765                           ;locked_task.c: 75: locked_lock_leds();
 14766  2FC5  31B5  25D9  31AF   	fcall	_locked_lock_leds
 14767                           
 14768                           ;locked_task.c: 76: data->state = LOCKED_LOCKED_STATE;
 14769  2FC8  0020               	movlb	0	; select bank0
 14770  2FC9  083B               	movf	locked_Init@data,w
 14771  2FCA  0086               	movwf	6
 14772  2FCB  083C               	movf	locked_Init@data+1,w
 14773  2FCC  0087               	movwf	7
 14774  2FCD  314D               	addfsr 1,13
 14775  2FCE  0181               	clrf	1
 14776                           
 14777                           ;locked_task.c: 77: data->delayTickCount = 0;
 14778  2FCF  083B               	movf	locked_Init@data,w
 14779  2FD0  0086               	movwf	6
 14780  2FD1  083C               	movf	locked_Init@data+1,w
 14781  2FD2  0087               	movwf	7
 14782  2FD3  3141               	addfsr 1,1
 14783  2FD4  3000               	movlw	0
 14784  2FD5  3FC0               	movwi [0]fsr1
 14785  2FD6  3FC1               	movwi [1]fsr1
 14786                           
 14787                           ;locked_task.c: 78: data->holdCountA = 0;
 14788  2FD7  083B               	movf	locked_Init@data,w
 14789  2FD8  0086               	movwf	6
 14790  2FD9  083C               	movf	locked_Init@data+1,w
 14791  2FDA  0087               	movwf	7
 14792  2FDB  3143               	addfsr 1,3
 14793  2FDC  3000               	movlw	0
 14794  2FDD  3FC0               	movwi [0]fsr1
 14795  2FDE  3FC1               	movwi [1]fsr1
 14796                           
 14797                           ;locked_task.c: 79: data->holdCountB = 0;
 14798  2FDF  083B               	movf	locked_Init@data,w
 14799  2FE0  0086               	movwf	6
 14800  2FE1  083C               	movf	locked_Init@data+1,w
 14801  2FE2  0087               	movwf	7
 14802  2FE3  3145               	addfsr 1,5
 14803  2FE4  3000               	movlw	0
 14804  2FE5  3FC0               	movwi [0]fsr1
 14805  2FE6  3FC1               	movwi [1]fsr1
 14806                           
 14807                           ;locked_task.c: 80: data->holdCountX = 0;
 14808  2FE7  083B               	movf	locked_Init@data,w
 14809  2FE8  0086               	movwf	6
 14810  2FE9  083C               	movf	locked_Init@data+1,w
 14811  2FEA  0087               	movwf	7
 14812  2FEB  3147               	addfsr 1,7
 14813  2FEC  3000               	movlw	0
 14814  2FED  3FC0               	movwi [0]fsr1
 14815  2FEE  3FC1               	movwi [1]fsr1
 14816                           
 14817                           ;locked_task.c: 81: data->holdCountY = 0;
 14818  2FEF  083B               	movf	locked_Init@data,w
 14819  2FF0  0086               	movwf	6
 14820  2FF1  083C               	movf	locked_Init@data+1,w
 14821  2FF2  0087               	movwf	7
 14822  2FF3  3149               	addfsr 1,9
 14823  2FF4  3000               	movlw	0
 14824  2FF5  3FC0               	movwi [0]fsr1
 14825  2FF6  3FC1               	movwi [1]fsr1
 14826                           
 14827                           ;locked_task.c: 82: data->noholdCount = 0;
 14828  2FF7  083B               	movf	locked_Init@data,w
 14829  2FF8  0086               	movwf	6
 14830  2FF9  083C               	movf	locked_Init@data+1,w
 14831  2FFA  0087               	movwf	7
 14832  2FFB  314B               	addfsr 1,11
 14833  2FFC  3000               	movlw	0
 14834  2FFD  3FC0               	movwi [0]fsr1
 14835  2FFE  3FC1               	movwi [1]fsr1
 14836  2FFF  0008               	return
 14837  3000                     __end_of_locked_Init:	
 14838                           
 14839                           	psect	text6
 14840  2F3B                     __ptext6:	
 14841 ;; *************** function _menu_Init *****************
 14842 ;; Defined at:
 14843 ;;		line 37 in file "menu_task.c"
 14844 ;; Parameters:    Size  Location     Type
 14845 ;;  taskData        2   25[BANK0 ] PTR void 
 14846 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 14847 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 14848 ;; Auto vars:     Size  Location     Type
 14849 ;;  data            2   27[BANK0 ] PTR struct t_menu_taskDa
 14850 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 14851 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 14852 ;; Return value:  Size  Location     Type
 14853 ;;                  1    wreg      void 
 14854 ;; Registers used:
 14855 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14856 ;; Tracked objects:
 14857 ;;		On entry : 0/0
 14858 ;;		On exit  : 0/0
 14859 ;;		Unchanged: 0/0
 14860 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14861 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14862 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14863 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14864 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14865 ;;Total ram usage:        4 bytes
 14866 ;; Hardware stack levels used:    1
 14867 ;; Hardware stack levels required when called:   10
 14868 ;; This function calls:
 14869 ;;		_nullifyBadge_segDisplayErase
 14870 ;;		_nullifyBadge_segDisplayRegister
 14871 ;;		_nullifyBadge_userLedsClr
 14872 ;;		_nullifyBadge_userLedsRegister
 14873 ;; This function is called by:
 14874 ;;		_main
 14875 ;;		_scheduler_TaskAdd
 14876 ;; This function uses a non-reentrant model
 14877 ;;
 14878                           
 14879                           
 14880                           ;psect for function _menu_Init
 14881  2F3B                     _menu_Init:	
 14882                           
 14883                           ;menu_task.c: 38: struct t_menu_taskData *data = (struct t_menu_taskData *) taskData;
 14884                           
 14885                           ;incstack = 0
 14886                           ; Regs used in _menu_Init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14887  2F3B  0020               	movlb	0	; select bank0
 14888  2F3C  083A               	movf	menu_Init@taskData+1,w
 14889  2F3D  00BC               	movwf	menu_Init@data+1
 14890  2F3E  0839               	movf	menu_Init@taskData,w
 14891  2F3F  00BB               	movwf	menu_Init@data
 14892                           
 14893                           ;menu_task.c: 41: nullifyBadge_userLedsRegister(data->badge);
 14894  2F40  083B               	movf	menu_Init@data,w
 14895  2F41  0086               	movwf	6
 14896  2F42  083C               	movf	menu_Init@data+1,w
 14897  2F43  0087               	movwf	7
 14898  2F44  0801               	movf	1,w
 14899  2F45  31B4  24B6  31AF   	fcall	_nullifyBadge_userLedsRegister
 14900                           
 14901                           ;menu_task.c: 42: nullifyBadge_userLedsClr(data->badge);
 14902  2F48  0020               	movlb	0	; select bank0
 14903  2F49  083B               	movf	menu_Init@data,w
 14904  2F4A  0086               	movwf	6
 14905  2F4B  083C               	movf	menu_Init@data+1,w
 14906  2F4C  0087               	movwf	7
 14907  2F4D  0801               	movf	1,w
 14908  2F4E  3187  27FA  31AF   	fcall	_nullifyBadge_userLedsClr
 14909                           
 14910                           ;menu_task.c: 43: nullifyBadge_segDisplayRegister(data->badge);
 14911  2F51  0020               	movlb	0	; select bank0
 14912  2F52  083B               	movf	menu_Init@data,w
 14913  2F53  0086               	movwf	6
 14914  2F54  083C               	movf	menu_Init@data+1,w
 14915  2F55  0087               	movwf	7
 14916  2F56  0801               	movf	1,w
 14917  2F57  31B3  23DF  31AF   	fcall	_nullifyBadge_segDisplayRegister
 14918                           
 14919                           ;menu_task.c: 44: nullifyBadge_segDisplayErase(data->badge);
 14920  2F5A  0020               	movlb	0	; select bank0
 14921  2F5B  083B               	movf	menu_Init@data,w
 14922  2F5C  0086               	movwf	6
 14923  2F5D  083C               	movf	menu_Init@data+1,w
 14924  2F5E  0087               	movwf	7
 14925  2F5F  0801               	movf	1,w
 14926  2F60  31B3  23D1  31AF   	fcall	_nullifyBadge_segDisplayErase
 14927                           
 14928                           ;menu_task.c: 47: data->delayTickCount = 50;
 14929  2F63  0020               	movlb	0	; select bank0
 14930  2F64  083B               	movf	menu_Init@data,w
 14931  2F65  0086               	movwf	6
 14932  2F66  083C               	movf	menu_Init@data+1,w
 14933  2F67  0087               	movwf	7
 14934  2F68  3142               	addfsr 1,2
 14935  2F69  3032               	movlw	50
 14936  2F6A  3FC0               	movwi [0]fsr1
 14937  2F6B  3000               	movlw	0
 14938  2F6C  3FC1               	movwi [1]fsr1
 14939                           
 14940                           ;menu_task.c: 48: data->holdCountA = 0;
 14941  2F6D  083B               	movf	menu_Init@data,w
 14942  2F6E  0086               	movwf	6
 14943  2F6F  083C               	movf	menu_Init@data+1,w
 14944  2F70  0087               	movwf	7
 14945  2F71  3144               	addfsr 1,4
 14946  2F72  3000               	movlw	0
 14947  2F73  3FC0               	movwi [0]fsr1
 14948  2F74  3FC1               	movwi [1]fsr1
 14949                           
 14950                           ;menu_task.c: 49: data->holdCountB = 0;
 14951  2F75  083B               	movf	menu_Init@data,w
 14952  2F76  0086               	movwf	6
 14953  2F77  083C               	movf	menu_Init@data+1,w
 14954  2F78  0087               	movwf	7
 14955  2F79  3146               	addfsr 1,6
 14956  2F7A  3000               	movlw	0
 14957  2F7B  3FC0               	movwi [0]fsr1
 14958  2F7C  3FC1               	movwi [1]fsr1
 14959                           
 14960                           ;menu_task.c: 50: data->holdCountX = 0;
 14961  2F7D  083B               	movf	menu_Init@data,w
 14962  2F7E  0086               	movwf	6
 14963  2F7F  083C               	movf	menu_Init@data+1,w
 14964  2F80  0087               	movwf	7
 14965  2F81  3148               	addfsr 1,8
 14966  2F82  3000               	movlw	0
 14967  2F83  3FC0               	movwi [0]fsr1
 14968  2F84  3FC1               	movwi [1]fsr1
 14969                           
 14970                           ;menu_task.c: 51: data->holdCountY = 0;
 14971  2F85  083B               	movf	menu_Init@data,w
 14972  2F86  0086               	movwf	6
 14973  2F87  083C               	movf	menu_Init@data+1,w
 14974  2F88  0087               	movwf	7
 14975  2F89  314A               	addfsr 1,10
 14976  2F8A  3000               	movlw	0
 14977  2F8B  3FC0               	movwi [0]fsr1
 14978  2F8C  3FC1               	movwi [1]fsr1
 14979                           
 14980                           ;menu_task.c: 52: data->noholdCount = 0;
 14981  2F8D  083B               	movf	menu_Init@data,w
 14982  2F8E  0086               	movwf	6
 14983  2F8F  083C               	movf	menu_Init@data+1,w
 14984  2F90  0087               	movwf	7
 14985  2F91  314C               	addfsr 1,12
 14986  2F92  3000               	movlw	0
 14987  2F93  3FC0               	movwi [0]fsr1
 14988  2F94  3FC1               	movwi [1]fsr1
 14989                           
 14990                           ;menu_task.c: 54: menu_option_idx = 0;
 14991  2F95  0021               	movlb	1	; select bank1
 14992  2F96  01B6               	clrf	_menu_option_idx^(0+128)
 14993  2F97  01B7               	clrf	(_menu_option_idx+1)^(0+128)
 14994                           
 14995                           ;menu_task.c: 56: menu_option_size = sizeof(menu_option)/sizeof(menu_option[0]);
 14996  2F98  3005               	movlw	5
 14997  2F99  00B4               	movwf	_menu_option_size^(0+128)
 14998  2F9A  3000               	movlw	0
 14999  2F9B  00B5               	movwf	(_menu_option_size^(0+128)+1)
 15000  2F9C  0008               	return
 15001  2F9D                     __end_of_menu_Init:	
 15002                           
 15003                           	psect	text7
 15004  0764                     __ptext7:	
 15005 ;; *************** function _flashy_Init *****************
 15006 ;; Defined at:
 15007 ;;		line 66 in file "flashy_task.c"
 15008 ;; Parameters:    Size  Location     Type
 15009 ;;  taskData        2   25[BANK0 ] PTR void 
 15010 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 15011 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 15012 ;; Auto vars:     Size  Location     Type
 15013 ;;  data            2   27[BANK0 ] PTR struct t_flashy_task
 15014 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 15015 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 15016 ;; Return value:  Size  Location     Type
 15017 ;;                  1    wreg      void 
 15018 ;; Registers used:
 15019 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15020 ;; Tracked objects:
 15021 ;;		On entry : 0/0
 15022 ;;		On exit  : 0/0
 15023 ;;		Unchanged: 0/0
 15024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15025 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15026 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15027 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15028 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15029 ;;Total ram usage:        4 bytes
 15030 ;; Hardware stack levels used:    1
 15031 ;; Hardware stack levels required when called:   10
 15032 ;; This function calls:
 15033 ;;		_nullifyBadge_segDisplayErase
 15034 ;;		_nullifyBadge_segDisplayRegister
 15035 ;;		_nullifyBadge_userLedsClr
 15036 ;;		_nullifyBadge_userLedsRegister
 15037 ;; This function is called by:
 15038 ;;		_main
 15039 ;;		_scheduler_TaskAdd
 15040 ;; This function uses a non-reentrant model
 15041 ;;
 15042                           
 15043                           
 15044                           ;psect for function _flashy_Init
 15045  0764                     _flashy_Init:	
 15046                           
 15047                           ;flashy_task.c: 67: struct t_flashy_taskData *data = (struct t_flashy_taskData *) taskDa
      +                          ta;
 15048                           
 15049                           ;incstack = 0
 15050                           ; Regs used in _flashy_Init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15051  0764  0020               	movlb	0	; select bank0
 15052  0765  083A               	movf	flashy_Init@taskData+1,w
 15053  0766  00BC               	movwf	flashy_Init@data+1
 15054  0767  0839               	movf	flashy_Init@taskData,w
 15055  0768  00BB               	movwf	flashy_Init@data
 15056                           
 15057                           ;flashy_task.c: 70: nullifyBadge_userLedsRegister(data->badge);
 15058  0769  083B               	movf	flashy_Init@data,w
 15059  076A  0086               	movwf	6
 15060  076B  083C               	movf	flashy_Init@data+1,w
 15061  076C  0087               	movwf	7
 15062  076D  0801               	movf	1,w
 15063  076E  31B4  24B6  3187   	fcall	_nullifyBadge_userLedsRegister
 15064                           
 15065                           ;flashy_task.c: 71: nullifyBadge_userLedsClr(data->badge);
 15066  0771  0020               	movlb	0	; select bank0
 15067  0772  083B               	movf	flashy_Init@data,w
 15068  0773  0086               	movwf	6
 15069  0774  083C               	movf	flashy_Init@data+1,w
 15070  0775  0087               	movwf	7
 15071  0776  0801               	movf	1,w
 15072  0777  3187  27FA  3187   	fcall	_nullifyBadge_userLedsClr
 15073                           
 15074                           ;flashy_task.c: 72: nullifyBadge_segDisplayRegister(data->badge);
 15075  077A  0020               	movlb	0	; select bank0
 15076  077B  083B               	movf	flashy_Init@data,w
 15077  077C  0086               	movwf	6
 15078  077D  083C               	movf	flashy_Init@data+1,w
 15079  077E  0087               	movwf	7
 15080  077F  0801               	movf	1,w
 15081  0780  31B3  23DF  3187   	fcall	_nullifyBadge_segDisplayRegister
 15082                           
 15083                           ;flashy_task.c: 73: nullifyBadge_segDisplayErase(data->badge);
 15084  0783  0020               	movlb	0	; select bank0
 15085  0784  083B               	movf	flashy_Init@data,w
 15086  0785  0086               	movwf	6
 15087  0786  083C               	movf	flashy_Init@data+1,w
 15088  0787  0087               	movwf	7
 15089  0788  0801               	movf	1,w
 15090  0789  31B3  23D1  3187   	fcall	_nullifyBadge_segDisplayErase
 15091                           
 15092                           ;flashy_task.c: 79: data->delayTickCount = 35;
 15093  078C  0020               	movlb	0	; select bank0
 15094  078D  083B               	movf	flashy_Init@data,w
 15095  078E  0086               	movwf	6
 15096  078F  083C               	movf	flashy_Init@data+1,w
 15097  0790  0087               	movwf	7
 15098  0791  3141               	addfsr 1,1
 15099  0792  3023               	movlw	35
 15100  0793  3FC0               	movwi [0]fsr1
 15101  0794  3000               	movlw	0
 15102  0795  3FC1               	movwi [1]fsr1
 15103                           
 15104                           ;flashy_task.c: 80: data->displayTickCount = 0;
 15105  0796  083B               	movf	flashy_Init@data,w
 15106  0797  0086               	movwf	6
 15107  0798  083C               	movf	flashy_Init@data+1,w
 15108  0799  0087               	movwf	7
 15109  079A  3144               	addfsr 1,4
 15110  079B  3000               	movlw	0
 15111  079C  3FC0               	movwi [0]fsr1
 15112  079D  3FC1               	movwi [1]fsr1
 15113                           
 15114                           ;flashy_task.c: 83: data->holdCountA = 0;
 15115  079E  083B               	movf	flashy_Init@data,w
 15116  079F  0086               	movwf	6
 15117  07A0  083C               	movf	flashy_Init@data+1,w
 15118  07A1  0087               	movwf	7
 15119  07A2  314A               	addfsr 1,10
 15120  07A3  3000               	movlw	0
 15121  07A4  3FC0               	movwi [0]fsr1
 15122  07A5  3FC1               	movwi [1]fsr1
 15123                           
 15124                           ;flashy_task.c: 84: data->holdCountB = 0;
 15125  07A6  083B               	movf	flashy_Init@data,w
 15126  07A7  0086               	movwf	6
 15127  07A8  083C               	movf	flashy_Init@data+1,w
 15128  07A9  0087               	movwf	7
 15129  07AA  314C               	addfsr 1,12
 15130  07AB  3000               	movlw	0
 15131  07AC  3FC0               	movwi [0]fsr1
 15132  07AD  3FC1               	movwi [1]fsr1
 15133                           
 15134                           ;flashy_task.c: 85: data->holdCountX = 0;
 15135  07AE  083B               	movf	flashy_Init@data,w
 15136  07AF  0086               	movwf	6
 15137  07B0  083C               	movf	flashy_Init@data+1,w
 15138  07B1  0087               	movwf	7
 15139  07B2  314E               	addfsr 1,14
 15140  07B3  3000               	movlw	0
 15141  07B4  3FC0               	movwi [0]fsr1
 15142  07B5  3FC1               	movwi [1]fsr1
 15143                           
 15144                           ;flashy_task.c: 86: data->holdCountY = 0;
 15145  07B6  083B               	movf	flashy_Init@data,w
 15146  07B7  0086               	movwf	6
 15147  07B8  083C               	movf	flashy_Init@data+1,w
 15148  07B9  0087               	movwf	7
 15149  07BA  3150               	addfsr 1,16
 15150  07BB  3000               	movlw	0
 15151  07BC  3FC0               	movwi [0]fsr1
 15152  07BD  3FC1               	movwi [1]fsr1
 15153                           
 15154                           ;flashy_task.c: 87: data->holdCountXY = 0;
 15155  07BE  083B               	movf	flashy_Init@data,w
 15156  07BF  0086               	movwf	6
 15157  07C0  083C               	movf	flashy_Init@data+1,w
 15158  07C1  0087               	movwf	7
 15159  07C2  3152               	addfsr 1,18
 15160  07C3  3000               	movlw	0
 15161  07C4  3FC0               	movwi [0]fsr1
 15162  07C5  3FC1               	movwi [1]fsr1
 15163                           
 15164                           ;flashy_task.c: 88: data->holdCountAY = 0;
 15165  07C6  083B               	movf	flashy_Init@data,w
 15166  07C7  0086               	movwf	6
 15167  07C8  083C               	movf	flashy_Init@data+1,w
 15168  07C9  0087               	movwf	7
 15169  07CA  3154               	addfsr 1,20
 15170  07CB  3000               	movlw	0
 15171  07CC  3FC0               	movwi [0]fsr1
 15172  07CD  3FC1               	movwi [1]fsr1
 15173                           
 15174                           ;flashy_task.c: 89: data->holdCountAX = 0;
 15175  07CE  083B               	movf	flashy_Init@data,w
 15176  07CF  0086               	movwf	6
 15177  07D0  083C               	movf	flashy_Init@data+1,w
 15178  07D1  0087               	movwf	7
 15179  07D2  3156               	addfsr 1,22
 15180  07D3  3000               	movlw	0
 15181  07D4  3FC0               	movwi [0]fsr1
 15182  07D5  3FC1               	movwi [1]fsr1
 15183                           
 15184                           ;flashy_task.c: 90: data->noholdCount = 0;
 15185  07D6  083B               	movf	flashy_Init@data,w
 15186  07D7  0086               	movwf	6
 15187  07D8  083C               	movf	flashy_Init@data+1,w
 15188  07D9  0087               	movwf	7
 15189  07DA  315C               	addfsr 1,28
 15190  07DB  3000               	movlw	0
 15191  07DC  3FC0               	movwi [0]fsr1
 15192  07DD  3FC1               	movwi [1]fsr1
 15193                           
 15194                           ;flashy_task.c: 92: flashy_leds_idx = 0;
 15195  07DE  0021               	movlb	1	; select bank1
 15196  07DF  01B2               	clrf	_flashy_leds_idx^(0+128)
 15197  07E0  01B3               	clrf	(_flashy_leds_idx+1)^(0+128)
 15198                           
 15199                           ;flashy_task.c: 93: data->led_state = FLASHY_STATE_LED_ROUNDABOUT;
 15200  07E1  0020               	movlb	0	; select bank0
 15201  07E2  083B               	movf	flashy_Init@data,w
 15202  07E3  0086               	movwf	6
 15203  07E4  083C               	movf	flashy_Init@data+1,w
 15204  07E5  0087               	movwf	7
 15205  07E6  3143               	addfsr 1,3
 15206  07E7  0181               	clrf	1
 15207                           
 15208                           ;flashy_task.c: 94: flashy_option_idx = 0;
 15209  07E8  0021               	movlb	1	; select bank1
 15210  07E9  01A8               	clrf	_flashy_option_idx^(0+128)
 15211  07EA  01A9               	clrf	(_flashy_option_idx+1)^(0+128)
 15212                           
 15213                           ;flashy_task.c: 96: flashy_option_size = sizeof(flashy_option)/sizeof(flashy_option[0]);
 15214  07EB  301D               	movlw	29
 15215  07EC  00A6               	movwf	_flashy_option_size^(0+128)
 15216  07ED  3000               	movlw	0
 15217  07EE  00A7               	movwf	(_flashy_option_size^(0+128)+1)
 15218                           
 15219                           ;flashy_task.c: 98: flashy_sparkle_rate =50;
 15220  07EF  3032               	movlw	50
 15221  07F0  00AE               	movwf	_flashy_sparkle_rate^(0+128)
 15222  07F1  3000               	movlw	0
 15223  07F2  00AF               	movwf	(_flashy_sparkle_rate^(0+128)+1)
 15224                           
 15225                           ;flashy_task.c: 99: flashy_scroll_rate=50;
 15226  07F3  3032               	movlw	50
 15227  07F4  00AC               	movwf	_flashy_scroll_rate^(0+128)
 15228  07F5  3000               	movlw	0
 15229  07F6  00AD               	movwf	(_flashy_scroll_rate^(0+128)+1)
 15230                           
 15231                           ;flashy_task.c: 100: flashy_leds_state_track =0;
 15232  07F7  01B0               	clrf	_flashy_leds_state_track^(0+128)
 15233  07F8  01B1               	clrf	(_flashy_leds_state_track+1)^(0+128)
 15234  07F9  0008               	return
 15235  07FA                     __end_of_flashy_Init:	
 15236                           
 15237                           	psect	text8
 15238  2028                     __ptext8:	
 15239 ;; *************** function _slot_Init *****************
 15240 ;; Defined at:
 15241 ;;		line 29 in file "slot_task.c"
 15242 ;; Parameters:    Size  Location     Type
 15243 ;;  taskData        2   25[BANK0 ] PTR void 
 15244 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 15245 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 15246 ;; Auto vars:     Size  Location     Type
 15247 ;;  data            2   27[BANK0 ] PTR struct t_slot_taskDa
 15248 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 15249 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 15250 ;; Return value:  Size  Location     Type
 15251 ;;                  1    wreg      void 
 15252 ;; Registers used:
 15253 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15254 ;; Tracked objects:
 15255 ;;		On entry : 0/0
 15256 ;;		On exit  : 0/0
 15257 ;;		Unchanged: 0/0
 15258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15259 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15260 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15261 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15262 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15263 ;;Total ram usage:        4 bytes
 15264 ;; Hardware stack levels used:    1
 15265 ;; Hardware stack levels required when called:   10
 15266 ;; This function calls:
 15267 ;;		_nullifyBadge_segDisplayErase
 15268 ;;		_nullifyBadge_segDisplayRegister
 15269 ;;		_nullifyBadge_userLedsClr
 15270 ;;		_nullifyBadge_userLedsRegister
 15271 ;;		_slot_Setup
 15272 ;; This function is called by:
 15273 ;;		_main
 15274 ;;		_scheduler_TaskAdd
 15275 ;; This function uses a non-reentrant model
 15276 ;;
 15277                           
 15278                           
 15279                           ;psect for function _slot_Init
 15280  2028                     _slot_Init:	
 15281                           
 15282                           ;slot_task.c: 30: struct t_slot_taskData *data = (struct t_slot_taskData *) taskData;
 15283                           
 15284                           ;incstack = 0
 15285                           ; Regs used in _slot_Init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15286  2028  0020               	movlb	0	; select bank0
 15287  2029  083A               	movf	slot_Init@taskData+1,w
 15288  202A  00BC               	movwf	slot_Init@data+1
 15289  202B  0839               	movf	slot_Init@taskData,w
 15290  202C  00BB               	movwf	slot_Init@data
 15291                           
 15292                           ;slot_task.c: 33: nullifyBadge_userLedsRegister(data->badge);
 15293  202D  083B               	movf	slot_Init@data,w
 15294  202E  0086               	movwf	6
 15295  202F  083C               	movf	slot_Init@data+1,w
 15296  2030  0087               	movwf	7
 15297  2031  0801               	movf	1,w
 15298  2032  31B4  24B6  31A0   	fcall	_nullifyBadge_userLedsRegister
 15299                           
 15300                           ;slot_task.c: 34: nullifyBadge_userLedsClr(data->badge);
 15301  2035  0020               	movlb	0	; select bank0
 15302  2036  083B               	movf	slot_Init@data,w
 15303  2037  0086               	movwf	6
 15304  2038  083C               	movf	slot_Init@data+1,w
 15305  2039  0087               	movwf	7
 15306  203A  0801               	movf	1,w
 15307  203B  3187  27FA  31A0   	fcall	_nullifyBadge_userLedsClr
 15308                           
 15309                           ;slot_task.c: 35: nullifyBadge_segDisplayRegister(data->badge);
 15310  203E  0020               	movlb	0	; select bank0
 15311  203F  083B               	movf	slot_Init@data,w
 15312  2040  0086               	movwf	6
 15313  2041  083C               	movf	slot_Init@data+1,w
 15314  2042  0087               	movwf	7
 15315  2043  0801               	movf	1,w
 15316  2044  31B3  23DF  31A0   	fcall	_nullifyBadge_segDisplayRegister
 15317                           
 15318                           ;slot_task.c: 36: nullifyBadge_segDisplayErase(data->badge);
 15319  2047  0020               	movlb	0	; select bank0
 15320  2048  083B               	movf	slot_Init@data,w
 15321  2049  0086               	movwf	6
 15322  204A  083C               	movf	slot_Init@data+1,w
 15323  204B  0087               	movwf	7
 15324  204C  0801               	movf	1,w
 15325  204D  31B3  23D1  31A0   	fcall	_nullifyBadge_segDisplayErase
 15326                           
 15327                           ;slot_task.c: 39: data->displayTickCount = 0;
 15328  2050  0020               	movlb	0	; select bank0
 15329  2051  083B               	movf	slot_Init@data,w
 15330  2052  0086               	movwf	6
 15331  2053  083C               	movf	slot_Init@data+1,w
 15332  2054  0087               	movwf	7
 15333  2055  3143               	addfsr 1,3
 15334  2056  3000               	movlw	0
 15335  2057  3FC0               	movwi [0]fsr1
 15336  2058  3FC1               	movwi [1]fsr1
 15337                           
 15338                           ;slot_task.c: 40: data->holdCountA = 0;
 15339  2059  083B               	movf	slot_Init@data,w
 15340  205A  0086               	movwf	6
 15341  205B  083C               	movf	slot_Init@data+1,w
 15342  205C  0087               	movwf	7
 15343  205D  315F               	addfsr 1,31
 15344  205E  3000               	movlw	0
 15345  205F  3FC0               	movwi [0]fsr1
 15346  2060  3FC1               	movwi [1]fsr1
 15347                           
 15348                           ;slot_task.c: 41: data->holdCountB = 0;
 15349  2061  083B               	movf	slot_Init@data,w
 15350  2062  3E21               	addlw	33
 15351  2063  0086               	movwf	6
 15352  2064  3000               	movlw	0
 15353  2065  3D3C               	addwfc	slot_Init@data+1,w
 15354  2066  0087               	movwf	7
 15355  2067  3000               	movlw	0
 15356  2068  3FC0               	movwi [0]fsr1
 15357  2069  3FC1               	movwi [1]fsr1
 15358                           
 15359                           ;slot_task.c: 42: data->holdCountX = 0;
 15360  206A  083B               	movf	slot_Init@data,w
 15361  206B  3E23               	addlw	35
 15362  206C  0086               	movwf	6
 15363  206D  3000               	movlw	0
 15364  206E  3D3C               	addwfc	slot_Init@data+1,w
 15365  206F  0087               	movwf	7
 15366  2070  3000               	movlw	0
 15367  2071  3FC0               	movwi [0]fsr1
 15368  2072  3FC1               	movwi [1]fsr1
 15369                           
 15370                           ;slot_task.c: 43: data->holdCountY = 0;
 15371  2073  083B               	movf	slot_Init@data,w
 15372  2074  3E25               	addlw	37
 15373  2075  0086               	movwf	6
 15374  2076  3000               	movlw	0
 15375  2077  3D3C               	addwfc	slot_Init@data+1,w
 15376  2078  0087               	movwf	7
 15377  2079  3000               	movlw	0
 15378  207A  3FC0               	movwi [0]fsr1
 15379  207B  3FC1               	movwi [1]fsr1
 15380                           
 15381                           ;slot_task.c: 44: data->noholdCount = 0;
 15382  207C  083B               	movf	slot_Init@data,w
 15383  207D  3E27               	addlw	39
 15384  207E  0086               	movwf	6
 15385  207F  3000               	movlw	0
 15386  2080  3D3C               	addwfc	slot_Init@data+1,w
 15387  2081  0087               	movwf	7
 15388  2082  3000               	movlw	0
 15389  2083  3FC0               	movwi [0]fsr1
 15390  2084  3FC1               	movwi [1]fsr1
 15391                           
 15392                           ;slot_task.c: 45: slot_Setup(data);
 15393  2085  083C               	movf	slot_Init@data+1,w
 15394  2086  00B0               	movwf	slot_Setup@taskData+1
 15395  2087  083B               	movf	slot_Init@data,w
 15396  2088  00AF               	movwf	slot_Setup@taskData
 15397  2089  31AD  2580         	fcall	_slot_Setup
 15398  208B  0008               	return
 15399  208C                     __end_of_slot_Init:	
 15400                           
 15401                           	psect	text9
 15402  34B6                     __ptext9:	
 15403 ;; *************** function _nullifyBadge_userLedsRegister *****************
 15404 ;; Defined at:
 15405 ;;		line 133 in file "nullifyBadge.c"
 15406 ;; Parameters:    Size  Location     Type
 15407 ;;  badge           1    wreg     PTR struct t_nullifyBadg
 15408 ;;		 -> badge_inst(18), 
 15409 ;; Auto vars:     Size  Location     Type
 15410 ;;  badge           1    1[COMMON] PTR struct t_nullifyBadg
 15411 ;;		 -> badge_inst(18), 
 15412 ;; Return value:  Size  Location     Type
 15413 ;;                  1    wreg      char 
 15414 ;; Registers used:
 15415 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15416 ;; Tracked objects:
 15417 ;;		On entry : 0/0
 15418 ;;		On exit  : 0/0
 15419 ;;		Unchanged: 0/0
 15420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15421 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15422 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15423 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15424 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15425 ;;Total ram usage:        1 bytes
 15426 ;; Hardware stack levels used:    1
 15427 ;; Hardware stack levels required when called:    4
 15428 ;; This function calls:
 15429 ;;		Nothing
 15430 ;; This function is called by:
 15431 ;;		_menu_Init
 15432 ;;		_flashy_Init
 15433 ;;		_locked_Init
 15434 ;;		_secret_Init
 15435 ;;		_slot_Init
 15436 ;;		_matrix_Init
 15437 ;; This function uses a non-reentrant model
 15438 ;;
 15439                           
 15440                           
 15441                           ;psect for function _nullifyBadge_userLedsRegister
 15442  34B6                     _nullifyBadge_userLedsRegister:	
 15443                           
 15444                           ;incstack = 0
 15445                           ; Regs used in _nullifyBadge_userLedsRegister: [wreg+fsr1l+fsr1h+status,2+status,0]
 15446                           ;nullifyBadge_userLedsRegister@badge stored from wreg
 15447  34B6  00F1               	movwf	nullifyBadge_userLedsRegister@badge
 15448                           
 15449                           ;nullifyBadge.c: 134: if (badge->registeredHw & HW_USER_LEDS) {
 15450  34B7  0871               	movf	nullifyBadge_userLedsRegister@badge,w
 15451  34B8  3E11               	addlw	17
 15452  34B9  0086               	movwf	6
 15453  34BA  3001               	movlw	1	; select bank2/3
 15454  34BB  0087               	movwf	7
 15455  34BC  1801               	btfsc	1,0
 15456  34BD  0008               	return
 15457                           
 15458                           ;nullifyBadge.c: 137: else {
 15459                           ;nullifyBadge.c: 138: badge->registeredHw |= (1 << HW_USER_LEDS);
 15460                           
 15461                           ;nullifyBadge.c: 136: }
 15462                           
 15463                           ;nullifyBadge.c: 135: return -1;
 15464                           ;	Return value of _nullifyBadge_userLedsRegister is never used
 15465  34BE  0871               	movf	nullifyBadge_userLedsRegister@badge,w
 15466  34BF  3E11               	addlw	17
 15467  34C0  0086               	movwf	6
 15468  34C1  3001               	movlw	1	; select bank2/3
 15469  34C2  0087               	movwf	7
 15470  34C3  1481               	bsf	1,1
 15471                           
 15472                           ;nullifyBadge.c: 139: return 0;
 15473                           ;	Return value of _nullifyBadge_userLedsRegister is never used
 15474  34C4  0008               	return
 15475  34C5                     __end_of_nullifyBadge_userLedsRegister:	
 15476                           
 15477                           	psect	text10
 15478  33DF                     __ptext10:	
 15479 ;; *************** function _nullifyBadge_segDisplayRegister *****************
 15480 ;; Defined at:
 15481 ;;		line 68 in file "nullifyBadge.c"
 15482 ;; Parameters:    Size  Location     Type
 15483 ;;  badge           1    wreg     PTR struct t_nullifyBadg
 15484 ;;		 -> badge_inst(18), 
 15485 ;; Auto vars:     Size  Location     Type
 15486 ;;  badge           1    1[COMMON] PTR struct t_nullifyBadg
 15487 ;;		 -> badge_inst(18), 
 15488 ;; Return value:  Size  Location     Type
 15489 ;;                  1    wreg      char 
 15490 ;; Registers used:
 15491 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15492 ;; Tracked objects:
 15493 ;;		On entry : 0/0
 15494 ;;		On exit  : 0/0
 15495 ;;		Unchanged: 0/0
 15496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15497 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15498 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15499 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15500 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15501 ;;Total ram usage:        1 bytes
 15502 ;; Hardware stack levels used:    1
 15503 ;; Hardware stack levels required when called:    4
 15504 ;; This function calls:
 15505 ;;		Nothing
 15506 ;; This function is called by:
 15507 ;;		_menu_Init
 15508 ;;		_flashy_Init
 15509 ;;		_locked_Init
 15510 ;;		_secret_Init
 15511 ;;		_slot_Init
 15512 ;;		_matrix_Init
 15513 ;;		_fadeDisplay_Init
 15514 ;; This function uses a non-reentrant model
 15515 ;;
 15516                           
 15517                           
 15518                           ;psect for function _nullifyBadge_segDisplayRegister
 15519  33DF                     _nullifyBadge_segDisplayRegister:	
 15520                           
 15521                           ;incstack = 0
 15522                           ; Regs used in _nullifyBadge_segDisplayRegister: [wreg+fsr1l+fsr1h+status,2+status,0]
 15523                           ;nullifyBadge_segDisplayRegister@badge stored from wreg
 15524  33DF  00F1               	movwf	nullifyBadge_segDisplayRegister@badge
 15525                           
 15526                           ;nullifyBadge.c: 72: else {
 15527                           ;nullifyBadge.c: 73: badge->registeredHw |= (1 << HW_SEG_DISPLAY);
 15528                           
 15529                           ;nullifyBadge.c: 71: }
 15530                           
 15531                           ;nullifyBadge.c: 70: return -1;
 15532                           ;	Return value of _nullifyBadge_segDisplayRegister is never used
 15533                           
 15534                           ;nullifyBadge.c: 69: if (badge->registeredHw & HW_SEG_DISPLAY) {
 15535  33E0  0871               	movf	nullifyBadge_segDisplayRegister@badge,w
 15536  33E1  3E11               	addlw	17
 15537  33E2  0086               	movwf	6
 15538  33E3  3001               	movlw	1	; select bank2/3
 15539  33E4  0087               	movwf	7
 15540  33E5  1401               	bsf	1,0
 15541                           
 15542                           ;nullifyBadge.c: 74: return 0;
 15543                           ;	Return value of _nullifyBadge_segDisplayRegister is never used
 15544  33E6  0008               	return
 15545  33E7                     __end_of_nullifyBadge_segDisplayRegister:	
 15546                           
 15547                           	psect	text11
 15548  360E                     __ptext11:	
 15549 ;; *************** function _scheduler_Init *****************
 15550 ;; Defined at:
 15551 ;;		line 27 in file "cooperative_scheduler.c"
 15552 ;; Parameters:    Size  Location     Type
 15553 ;;  scheduler       1    wreg     PTR struct t_scheduler
 15554 ;;		 -> schedulerInst(18), 
 15555 ;; Auto vars:     Size  Location     Type
 15556 ;;  scheduler       1    2[COMMON] PTR struct t_scheduler
 15557 ;;		 -> schedulerInst(18), 
 15558 ;;  k               1    3[COMMON] unsigned char 
 15559 ;; Return value:  Size  Location     Type
 15560 ;;                  1    wreg      void 
 15561 ;; Registers used:
 15562 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15563 ;; Tracked objects:
 15564 ;;		On entry : 0/0
 15565 ;;		On exit  : 0/0
 15566 ;;		Unchanged: 0/0
 15567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15568 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15569 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15570 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15571 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15572 ;;Total ram usage:        3 bytes
 15573 ;; Hardware stack levels used:    1
 15574 ;; Hardware stack levels required when called:    4
 15575 ;; This function calls:
 15576 ;;		Nothing
 15577 ;; This function is called by:
 15578 ;;		_main
 15579 ;; This function uses a non-reentrant model
 15580 ;;
 15581                           
 15582                           
 15583                           ;psect for function _scheduler_Init
 15584  360E                     _scheduler_Init:	
 15585                           
 15586                           ;incstack = 0
 15587                           ; Regs used in _scheduler_Init: [wreg+fsr1l+fsr1h+status,2+status,0]
 15588                           ;scheduler_Init@scheduler stored from wreg
 15589  360E  00F2               	movwf	scheduler_Init@scheduler
 15590                           
 15591                           ;cooperative_scheduler.c: 28: scheduler->taskEntryVector = 0x0;
 15592  360F  0872               	movf	scheduler_Init@scheduler,w
 15593  3610  3E10               	addlw	16
 15594  3611  0086               	movwf	6
 15595  3612  3001               	movlw	1	; select bank2/3
 15596  3613  0087               	movwf	7
 15597  3614  3000               	movlw	0
 15598  3615  3FC0               	movwi [0]fsr1
 15599  3616  3FC1               	movwi [1]fsr1
 15600                           
 15601                           ;cooperative_scheduler.c: 29: u8 k;
 15602                           ;cooperative_scheduler.c: 31: for (k = 0; k < 16; k++) {
 15603  3617  01F3               	clrf	scheduler_Init@k
 15604  3618                     L1:	
 15605  3618  3010               	movlw	16
 15606  3619  0273               	subwf	scheduler_Init@k,w
 15607  361A  1803               	btfsc	3,0
 15608  361B  0008               	return
 15609                           
 15610                           ;cooperative_scheduler.c: 32: scheduler->tasks[k] = (0);
 15611  361C  0873               	movf	scheduler_Init@k,w
 15612  361D  0772               	addwf	scheduler_Init@scheduler,w
 15613  361E  00F1               	movwf	??_scheduler_Init
 15614  361F  0871               	movf	??_scheduler_Init,w
 15615  3620  0086               	movwf	6
 15616  3621  3001               	movlw	1	; select bank2/3
 15617  3622  0087               	movwf	7
 15618  3623  0181               	clrf	1
 15619  3624  3001               	movlw	1
 15620  3625  00F1               	movwf	??_scheduler_Init
 15621  3626  0871               	movf	??_scheduler_Init,w
 15622  3627  07F3               	addwf	scheduler_Init@k,f
 15623  3628  2E18               	goto	L1
 15624  3629                     __end_of_scheduler_Init:	
 15625                           
 15626                           	psect	text12
 15627  22C3                     __ptext12:	
 15628 ;; *************** function _schedulerExecute *****************
 15629 ;; Defined at:
 15630 ;;		line 77 in file "cooperative_scheduler.c"
 15631 ;; Parameters:    Size  Location     Type
 15632 ;;  scheduler       1    wreg     PTR struct t_scheduler
 15633 ;;		 -> schedulerInst(18), 
 15634 ;; Auto vars:     Size  Location     Type
 15635 ;;  scheduler       1    6[BANK1 ] PTR struct t_scheduler
 15636 ;;		 -> schedulerInst(18), 
 15637 ;;  tickDelta       2    4[BANK1 ] unsigned int 
 15638 ;;  taskLastSyst    2    2[BANK1 ] unsigned int 
 15639 ;;  currentSyste    2    0[BANK1 ] unsigned int 
 15640 ;;  k               1    7[BANK1 ] unsigned char 
 15641 ;; Return value:  Size  Location     Type
 15642 ;;                  1    wreg      void 
 15643 ;; Registers used:
 15644 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15645 ;; Tracked objects:
 15646 ;;		On entry : 0/0
 15647 ;;		On exit  : 0/0
 15648 ;;		Unchanged: 0/0
 15649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15650 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15651 ;;      Locals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15652 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15653 ;;      Totals:         0       6       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15654 ;;Total ram usage:       14 bytes
 15655 ;; Hardware stack levels used:    1
 15656 ;; Hardware stack levels required when called:   14
 15657 ;; This function calls:
 15658 ;;		_TMR0_Read16bitTimer
 15659 ;;		_scheduler_TaskRun
 15660 ;; This function is called by:
 15661 ;;		_main
 15662 ;; This function uses a non-reentrant model
 15663 ;;
 15664                           
 15665                           
 15666                           ;psect for function _schedulerExecute
 15667  22C3                     _schedulerExecute:	
 15668                           
 15669                           ;incstack = 0
 15670                           ; Regs used in _schedulerExecute: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15671                           ;schedulerExecute@scheduler stored from wreg
 15672  22C3  0021               	movlb	1	; select bank1
 15673  22C4  00E3               	movwf	schedulerExecute@scheduler^(0+128)
 15674                           
 15675                           ;cooperative_scheduler.c: 78: u16 currentSystemTick;
 15676                           ;cooperative_scheduler.c: 79: u16 taskLastSystemTick;
 15677                           ;cooperative_scheduler.c: 80: u16 tickDelta;
 15678                           ;cooperative_scheduler.c: 81: u8 k;
 15679                           ;cooperative_scheduler.c: 83: for (k = 0; k < 16; k++) {
 15680  22C5  01E4               	clrf	schedulerExecute@k^(0+128)
 15681  22C6                     L2:	
 15682  22C6  3010               	movlw	16
 15683  22C7  0264               	subwf	schedulerExecute@k^(0+128),w
 15684  22C8  1803               	btfsc	3,0
 15685  22C9  0008               	return
 15686                           
 15687                           ;cooperative_scheduler.c: 86: if (!(scheduler->taskEntryVector & (1 << k)) ) {
 15688  22CA  0863               	movf	schedulerExecute@scheduler^(0+128),w
 15689  22CB  3E10               	addlw	16
 15690  22CC  0086               	movwf	6
 15691  22CD  3001               	movlw	1	; select bank2/3
 15692  22CE  0087               	movwf	7
 15693  22CF  3F40               	moviw [0]fsr1
 15694  22D0  0020               	movlb	0	; select bank0
 15695  22D1  00E8               	movwf	??_schedulerExecute
 15696  22D2  3F41               	moviw [1]fsr1
 15697  22D3  00E9               	movwf	??_schedulerExecute+1
 15698  22D4  3001               	movlw	1
 15699  22D5  00EA               	movwf	??_schedulerExecute+2
 15700  22D6  3000               	movlw	0
 15701  22D7  00EB               	movwf	??_schedulerExecute+3
 15702  22D8  0021               	movlb	1	; select bank1
 15703  22D9  0A64               	incf	schedulerExecute@k^(0+128),w
 15704  22DA  0020               	movlb	0	; select bank0
 15705  22DB  2ADE               	goto	u6484
 15706  22DC                     u6485:	
 15707  22DC  35EA               	lslf	??_schedulerExecute+2,f
 15708  22DD  0DEB               	rlf	??_schedulerExecute+3,f
 15709  22DE                     u6484:	
 15710  22DE  0B89               	decfsz	9,f
 15711  22DF  2ADC               	goto	u6485
 15712  22E0  0868               	movf	??_schedulerExecute,w
 15713  22E1  056A               	andwf	??_schedulerExecute+2,w
 15714  22E2  00EC               	movwf	??_schedulerExecute+4
 15715  22E3  0869               	movf	??_schedulerExecute+1,w
 15716  22E4  056B               	andwf	??_schedulerExecute+3,w
 15717  22E5  00ED               	movwf	??_schedulerExecute+5
 15718  22E6  086C               	movf	??_schedulerExecute+4,w
 15719  22E7  046D               	iorwf	??_schedulerExecute+5,w
 15720  22E8  1903               	btfsc	3,2
 15721  22E9  2B40               	goto	l10459
 15722                           
 15723                           ;cooperative_scheduler.c: 88: }
 15724                           ;cooperative_scheduler.c: 90: currentSystemTick = TMR0_Read16bitTimer();
 15725                           
 15726                           ;cooperative_scheduler.c: 87: continue;
 15727  22EA  31B6  2645  31A2   	fcall	_TMR0_Read16bitTimer
 15728  22ED  0872               	movf	?_TMR0_Read16bitTimer+1,w
 15729  22EE  0021               	movlb	1	; select bank1
 15730  22EF  00DE               	movwf	(schedulerExecute@currentSystemTick+1)^(0+128)
 15731  22F0  0871               	movf	?_TMR0_Read16bitTimer,w
 15732  22F1  00DD               	movwf	schedulerExecute@currentSystemTick^(0+128)
 15733                           
 15734                           ;cooperative_scheduler.c: 91: taskLastSystemTick = scheduler->tasks[k]->systemTickLastEx
      +                          ecuted;
 15735  22F2  0864               	movf	schedulerExecute@k^(0+128),w
 15736  22F3  0763               	addwf	schedulerExecute@scheduler^(0+128),w
 15737  22F4  0020               	movlb	0	; select bank0
 15738  22F5  00E8               	movwf	??_schedulerExecute
 15739  22F6  0868               	movf	??_schedulerExecute,w
 15740  22F7  0086               	movwf	6
 15741  22F8  3001               	movlw	1	; select bank2/3
 15742  22F9  0087               	movwf	7
 15743  22FA  0801               	movf	1,w
 15744  22FB  0086               	movwf	6
 15745  22FC  3001               	movlw	1	; select bank2/3
 15746  22FD  0087               	movwf	7
 15747  22FE  3F40               	moviw [0]fsr1
 15748  22FF  0021               	movlb	1	; select bank1
 15749  2300  00DF               	movwf	schedulerExecute@taskLastSystemTick^(0+128)
 15750  2301  3F41               	moviw [1]fsr1
 15751  2302  00E0               	movwf	(schedulerExecute@taskLastSystemTick+1)^(0+128)
 15752                           
 15753                           ;cooperative_scheduler.c: 99: tickDelta = currentSystemTick - taskLastSystemTick;
 15754  2303  095F               	comf	schedulerExecute@taskLastSystemTick^(0+128),w
 15755  2304  0020               	movlb	0	; select bank0
 15756  2305  00E8               	movwf	??_schedulerExecute
 15757  2306  0021               	movlb	1	; select bank1
 15758  2307  0960               	comf	(schedulerExecute@taskLastSystemTick+1)^(0+128),w
 15759  2308  0020               	movlb	0	; select bank0
 15760  2309  00E9               	movwf	??_schedulerExecute+1
 15761  230A  0AE8               	incf	??_schedulerExecute,f
 15762  230B  1903               	skipnz
 15763  230C  0AE9               	incf	??_schedulerExecute+1,f
 15764  230D  0021               	movlb	1	; select bank1
 15765  230E  085D               	movf	schedulerExecute@currentSystemTick^(0+128),w
 15766  230F  0020               	movlb	0	; select bank0
 15767  2310  0768               	addwf	??_schedulerExecute,w
 15768  2311  0021               	movlb	1	; select bank1
 15769  2312  00E1               	movwf	schedulerExecute@tickDelta^(0+128)
 15770  2313  085E               	movf	(schedulerExecute@currentSystemTick+1)^(0+128),w
 15771  2314  0020               	movlb	0	; select bank0
 15772  2315  3D69               	addwfc	??_schedulerExecute+1,w
 15773  2316  0021               	movlb	1	; select bank1
 15774  2317  00E2               	movwf	(schedulerExecute@tickDelta+1)^(0+128)
 15775                           
 15776                           ;cooperative_scheduler.c: 103: if (tickDelta >= scheduler->tasks[k]->taskInterval) {
 15777  2318  0864               	movf	schedulerExecute@k^(0+128),w
 15778  2319  0763               	addwf	schedulerExecute@scheduler^(0+128),w
 15779  231A  0020               	movlb	0	; select bank0
 15780  231B  00E8               	movwf	??_schedulerExecute
 15781  231C  0868               	movf	??_schedulerExecute,w
 15782  231D  0086               	movwf	6
 15783  231E  3001               	movlw	1	; select bank2/3
 15784  231F  0087               	movwf	7
 15785  2320  0801               	movf	1,w
 15786  2321  3E0A               	addlw	10
 15787  2322  0086               	movwf	6
 15788  2323  3001               	movlw	1	; select bank2/3
 15789  2324  0087               	movwf	7
 15790  2325  3F40               	moviw [0]fsr1
 15791  2326  00E9               	movwf	??_schedulerExecute+1
 15792  2327  3F41               	moviw [1]fsr1
 15793  2328  00EA               	movwf	??_schedulerExecute+2
 15794  2329  086A               	movf	??_schedulerExecute+2,w
 15795  232A  0021               	movlb	1	; select bank1
 15796  232B  0262               	subwf	(schedulerExecute@tickDelta+1)^(0+128),w
 15797  232C  1D03               	skipz
 15798  232D  2B32               	goto	u6505
 15799  232E  0020               	movlb	0	; select bank0
 15800  232F  0869               	movf	??_schedulerExecute+1,w
 15801  2330  0021               	movlb	1	; select bank1
 15802  2331  0261               	subwf	schedulerExecute@tickDelta^(0+128),w
 15803  2332                     u6505:	
 15804  2332  1C03               	skipc
 15805  2333  2B40               	goto	l10459
 15806                           
 15807                           ;cooperative_scheduler.c: 104: scheduler_TaskRun(scheduler->tasks[k]);
 15808  2334  0864               	movf	schedulerExecute@k^(0+128),w
 15809  2335  0763               	addwf	schedulerExecute@scheduler^(0+128),w
 15810  2336  0020               	movlb	0	; select bank0
 15811  2337  00E8               	movwf	??_schedulerExecute
 15812  2338  0868               	movf	??_schedulerExecute,w
 15813  2339  0086               	movwf	6
 15814  233A  3001               	movlw	1	; select bank2/3
 15815  233B  0087               	movwf	7
 15816  233C  0801               	movf	1,w
 15817  233D  31B6  26DD  31A2   	fcall	_scheduler_TaskRun
 15818  2340                     l10459:	
 15819  2340  3001               	movlw	1
 15820  2341  0020               	movlb	0	; select bank0
 15821  2342  00E8               	movwf	??_schedulerExecute
 15822  2343  0868               	movf	??_schedulerExecute,w
 15823  2344  0021               	movlb	1	; select bank1
 15824  2345  07E4               	addwf	schedulerExecute@k^(0+128),f
 15825  2346  2AC6               	goto	L2
 15826  2347                     __end_of_schedulerExecute:	
 15827                           
 15828                           	psect	text13
 15829  36DD                     __ptext13:	
 15830 ;; *************** function _scheduler_TaskRun *****************
 15831 ;; Defined at:
 15832 ;;		line 20 in file "cooperative_scheduler.c"
 15833 ;; Parameters:    Size  Location     Type
 15834 ;;  task            1    wreg     PTR struct t_schedulerTa
 15835 ;;		 -> matrix_task(13), secret_task(13), locked_task(13), slot_task(13), 
 15836 ;;		 -> menu_task(13), flashy_task(13), NULL(0), 
 15837 ;; Auto vars:     Size  Location     Type
 15838 ;;  task            1   71[BANK0 ] PTR struct t_schedulerTa
 15839 ;;		 -> matrix_task(13), secret_task(13), locked_task(13), slot_task(13), 
 15840 ;;		 -> menu_task(13), flashy_task(13), NULL(0), 
 15841 ;; Return value:  Size  Location     Type
 15842 ;;                  1    wreg      void 
 15843 ;; Registers used:
 15844 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15845 ;; Tracked objects:
 15846 ;;		On entry : 0/0
 15847 ;;		On exit  : 0/0
 15848 ;;		Unchanged: 0/0
 15849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15850 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15851 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15852 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15853 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15854 ;;Total ram usage:        1 bytes
 15855 ;; Hardware stack levels used:    1
 15856 ;; Hardware stack levels required when called:   13
 15857 ;; This function calls:
 15858 ;;		Absolute function
 15859 ;;		_TMR0_Read16bitTimer
 15860 ;;		_flashy_Main
 15861 ;;		_locked_Main
 15862 ;;		_matrix_Main
 15863 ;;		_menu_Main
 15864 ;;		_secret_Main
 15865 ;;		_slot_Main
 15866 ;; This function is called by:
 15867 ;;		_schedulerExecute
 15868 ;; This function uses a non-reentrant model
 15869 ;;
 15870                           
 15871                           
 15872                           ;psect for function _scheduler_TaskRun
 15873  36DD                     _scheduler_TaskRun:	
 15874                           
 15875                           ;incstack = 0
 15876                           ; Regs used in _scheduler_TaskRun: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15877                           ;scheduler_TaskRun@task stored from wreg
 15878  36DD  0020               	movlb	0	; select bank0
 15879  36DE  00E7               	movwf	scheduler_TaskRun@task
 15880                           
 15881                           ;cooperative_scheduler.c: 21: task->taskExecuteCallback (task->taskData);
 15882  36DF  0867               	movf	scheduler_TaskRun@task,w
 15883  36E0  3E02               	addlw	2
 15884  36E1  0086               	movwf	6
 15885  36E2  3001               	movlw	1	; select bank2/3
 15886  36E3  0087               	movwf	7
 15887  36E4  3F40               	moviw [0]fsr1
 15888  36E5  00D2               	movwf	matrix_Main@taskData
 15889  36E6  3F41               	moviw [1]fsr1
 15890  36E7  00D3               	movwf	matrix_Main@taskData+1
 15891  36E8  0867               	movf	scheduler_TaskRun@task,w
 15892  36E9  3E08               	addlw	8
 15893  36EA  0086               	movwf	6
 15894  36EB  3001               	movlw	1	; select bank2/3
 15895  36EC  0087               	movwf	7
 15896  36ED  3F41               	moviw [1]fsr1
 15897  36EE  008A               	movwf	10
 15898  36EF  3F40               	moviw [0]fsr1
 15899  36F0  000A               	callw
 15900  36F1  31B6               	pagesel	$
 15901                           
 15902                           ;cooperative_scheduler.c: 22: task->systemTickLastExecuted = TMR0_Read16bitTimer();
 15903  36F2  31B6  2645         	fcall	_TMR0_Read16bitTimer
 15904  36F4  0020               	movlb	0	; select bank0
 15905  36F5  0867               	movf	scheduler_TaskRun@task,w
 15906  36F6  0086               	movwf	6
 15907  36F7  3001               	movlw	1	; select bank2/3
 15908  36F8  0087               	movwf	7
 15909  36F9  0871               	movf	?_TMR0_Read16bitTimer,w
 15910  36FA  3FC0               	movwi [0]fsr1
 15911  36FB  0872               	movf	?_TMR0_Read16bitTimer+1,w
 15912  36FC  3FC1               	movwi [1]fsr1
 15913  36FD  0008               	return
 15914  36FE                     __end_of_scheduler_TaskRun:	
 15915                           
 15916                           	psect	text14
 15917  10E3                     __ptext14:	
 15918 ;; *************** function _matrix_Main *****************
 15919 ;; Defined at:
 15920 ;;		line 148 in file "matrix_task.c"
 15921 ;; Parameters:    Size  Location     Type
 15922 ;;  taskData        2   50[BANK0 ] PTR void 
 15923 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 15924 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 15925 ;; Auto vars:     Size  Location     Type
 15926 ;;  data            2   59[BANK0 ] PTR struct t_matrix_task
 15927 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 15928 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 15929 ;;  holdvalue       1   58[BANK0 ] unsigned char 
 15930 ;;  buttonPresse    1   57[BANK0 ] unsigned char 
 15931 ;;  matrix_found    1   56[BANK0 ] unsigned char 
 15932 ;; Return value:  Size  Location     Type
 15933 ;;                  1    wreg      void 
 15934 ;; Registers used:
 15935 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15936 ;; Tracked objects:
 15937 ;;		On entry : 0/0
 15938 ;;		On exit  : 0/0
 15939 ;;		Unchanged: 0/0
 15940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15941 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15942 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15943 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15944 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15945 ;;Total ram usage:       11 bytes
 15946 ;; Hardware stack levels used:    1
 15947 ;; Hardware stack levels required when called:   11
 15948 ;; This function calls:
 15949 ;;		_led_Parody
 15950 ;;		_led_curtain
 15951 ;;		_matrix_display_option
 15952 ;;		_matrix_secret_check
 15953 ;;		_nullifyBadge_buttonsGet
 15954 ;; This function is called by:
 15955 ;;		_main
 15956 ;;		_scheduler_TaskRun
 15957 ;; This function uses a non-reentrant model
 15958 ;;
 15959                           
 15960                           
 15961                           ;psect for function _matrix_Main
 15962  10E3                     _matrix_Main:	
 15963                           
 15964                           ;matrix_task.c: 149: struct t_matrix_taskData *data = (struct t_matrix_taskData *) taskD
      +                          ata ;
 15965                           
 15966                           ;incstack = 0
 15967                           ; Regs used in _matrix_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15968  10E3  0020               	movlb	0	; select bank0
 15969  10E4  0853               	movf	matrix_Main@taskData+1,w
 15970  10E5  00DC               	movwf	matrix_Main@data+1
 15971  10E6  0852               	movf	matrix_Main@taskData,w
 15972  10E7  00DB               	movwf	matrix_Main@data
 15973                           
 15974                           ;matrix_task.c: 150: u8 buttonPressed = 0 ;
 15975  10E8  01D9               	clrf	matrix_Main@buttonPressed
 15976                           
 15977                           ;matrix_task.c: 151: u8 matrix_found =0;
 15978  10E9  01D8               	clrf	matrix_Main@matrix_found
 15979                           
 15980                           ;matrix_task.c: 152: u8 holdvalue = 50;
 15981  10EA  3032               	movlw	50
 15982  10EB  00D4               	movwf	??_matrix_Main
 15983  10EC  0854               	movf	??_matrix_Main,w
 15984  10ED  00DA               	movwf	matrix_Main@holdvalue
 15985                           
 15986                           ;matrix_task.c: 154: if ( currentTask != MATRIX_TASK ){
 15987  10EE  3004               	movlw	4
 15988  10EF  0021               	movlb	1	; select bank1
 15989  10F0  063A               	xorwf	_currentTask^(0+128),w
 15990  10F1  043B               	iorwf	(_currentTask+1)^(0+128),w
 15991  10F2  1903               	btfsc	3,2
 15992  10F3  291A               	goto	l9799
 15993                           
 15994                           ;matrix_task.c: 155: data->holdCountA = 1;
 15995  10F4  0020               	movlb	0	; select bank0
 15996  10F5  085B               	movf	matrix_Main@data,w
 15997  10F6  0086               	movwf	6
 15998  10F7  085C               	movf	matrix_Main@data+1,w
 15999  10F8  0087               	movwf	7
 16000  10F9  3149               	addfsr 1,9
 16001  10FA  3001               	movlw	1
 16002  10FB  3FC0               	movwi [0]fsr1
 16003  10FC  3000               	movlw	0
 16004  10FD  3FC1               	movwi [1]fsr1
 16005                           
 16006                           ;matrix_task.c: 156: data->holdCountB = 1;
 16007  10FE  085B               	movf	matrix_Main@data,w
 16008  10FF  0086               	movwf	6
 16009  1100  085C               	movf	matrix_Main@data+1,w
 16010  1101  0087               	movwf	7
 16011  1102  314B               	addfsr 1,11
 16012  1103  3001               	movlw	1
 16013  1104  3FC0               	movwi [0]fsr1
 16014  1105  3000               	movlw	0
 16015  1106  3FC1               	movwi [1]fsr1
 16016                           
 16017                           ;matrix_task.c: 157: data->holdCountX = 1;
 16018  1107  085B               	movf	matrix_Main@data,w
 16019  1108  0086               	movwf	6
 16020  1109  085C               	movf	matrix_Main@data+1,w
 16021  110A  0087               	movwf	7
 16022  110B  314D               	addfsr 1,13
 16023  110C  3001               	movlw	1
 16024  110D  3FC0               	movwi [0]fsr1
 16025  110E  3000               	movlw	0
 16026  110F  3FC1               	movwi [1]fsr1
 16027                           
 16028                           ;matrix_task.c: 158: data->holdCountY = 1;
 16029  1110  085B               	movf	matrix_Main@data,w
 16030  1111  0086               	movwf	6
 16031  1112  085C               	movf	matrix_Main@data+1,w
 16032  1113  0087               	movwf	7
 16033  1114  314F               	addfsr 1,15
 16034  1115  3001               	movlw	1
 16035  1116  3FC0               	movwi [0]fsr1
 16036  1117  3000               	movlw	0
 16037  1118  3FC1               	movwi [1]fsr1
 16038                           
 16039                           ;matrix_task.c: 159: return;
 16040  1119  0008               	return
 16041  111A                     l9799:	
 16042                           
 16043                           ;matrix_task.c: 160: }
 16044                           ;matrix_task.c: 164: if (data->martix_state == STILL_IN_MATRIX){
 16045  111A  0020               	movlb	0	; select bank0
 16046  111B  085B               	movf	matrix_Main@data,w
 16047  111C  0086               	movwf	6
 16048  111D  085C               	movf	matrix_Main@data+1,w
 16049  111E  0087               	movwf	7
 16050  111F  3141               	addfsr 1,1
 16051  1120  0301               	decf	1,w
 16052  1121  1D03               	btfss	3,2
 16053  1122  2952               	goto	l9811
 16054                           
 16055                           ;matrix_task.c: 165: if(data->delayTickCount == 0){
 16056  1123  085B               	movf	matrix_Main@data,w
 16057  1124  0086               	movwf	6
 16058  1125  085C               	movf	matrix_Main@data+1,w
 16059  1126  0087               	movwf	7
 16060  1127  3143               	addfsr 1,3
 16061  1128  0016               	moviw fsr1++
 16062  1129  0401               	iorwf	1,w
 16063  112A  1D03               	btfss	3,2
 16064  112B  2947               	goto	l9809
 16065                           
 16066                           ;matrix_task.c: 166: led_Parody(matrix_leds_idx);
 16067  112C  0021               	movlb	1	; select bank1
 16068  112D  0821               	movf	(_matrix_leds_idx+1)^(0+128),w
 16069  112E  0020               	movlb	0	; select bank0
 16070  112F  00B1               	movwf	led_Parody@count+1
 16071  1130  0021               	movlb	1	; select bank1
 16072  1131  0820               	movf	_matrix_leds_idx^(0+128),w
 16073  1132  0020               	movlb	0	; select bank0
 16074  1133  00B0               	movwf	led_Parody@count
 16075  1134  31A0  208C  3190   	fcall	_led_Parody
 16076                           
 16077                           ;matrix_task.c: 167: matrix_leds_idx += 1;
 16078  1137  3001               	movlw	1
 16079  1138  0021               	movlb	1	; select bank1
 16080  1139  07A0               	addwf	_matrix_leds_idx^(0+128),f
 16081  113A  3000               	movlw	0
 16082  113B  3DA1               	addwfc	(_matrix_leds_idx+1)^(0+128),f
 16083                           
 16084                           ;matrix_task.c: 168: data->delayTickCount = 10;
 16085  113C  0020               	movlb	0	; select bank0
 16086  113D  085B               	movf	matrix_Main@data,w
 16087  113E  0086               	movwf	6
 16088  113F  085C               	movf	matrix_Main@data+1,w
 16089  1140  0087               	movwf	7
 16090  1141  3143               	addfsr 1,3
 16091  1142  300A               	movlw	10
 16092  1143  3FC0               	movwi [0]fsr1
 16093  1144  3000               	movlw	0
 16094  1145  3FC1               	movwi [1]fsr1
 16095                           
 16096                           ;matrix_task.c: 169: }
 16097  1146  2952               	goto	l9811
 16098  1147                     l9809:	
 16099                           
 16100                           ;matrix_task.c: 170: else {
 16101                           ;matrix_task.c: 171: data->delayTickCount -= 1;
 16102  1147  085B               	movf	matrix_Main@data,w
 16103  1148  0086               	movwf	6
 16104  1149  085C               	movf	matrix_Main@data+1,w
 16105  114A  0087               	movwf	7
 16106  114B  3143               	addfsr 1,3
 16107  114C  3001               	movlw	1
 16108  114D  0281               	subwf	1,f
 16109  114E  3141               	addfsr 1,1
 16110  114F  3000               	movlw	0
 16111  1150  3B81               	subwfb	1,f
 16112  1151  317F               	addfsr 1,-1
 16113  1152                     l9811:	
 16114                           
 16115                           ;matrix_task.c: 172: }
 16116                           ;matrix_task.c: 173: }
 16117                           ;matrix_task.c: 177: buttonPressed = nullifyBadge_buttonsGet();
 16118  1152  31A8  2082  3190   	fcall	_nullifyBadge_buttonsGet
 16119  1155  0020               	movlb	0	; select bank0
 16120  1156  00D4               	movwf	??_matrix_Main
 16121  1157  0854               	movf	??_matrix_Main,w
 16122  1158  00D9               	movwf	matrix_Main@buttonPressed
 16123                           
 16124                           ;matrix_task.c: 180: switch (buttonPressed) {
 16125  1159  2F95               	goto	l10145
 16126  115A                     l9813:	
 16127                           ;matrix_task.c: 181: case 1:
 16128                           
 16129                           
 16130                           ;matrix_task.c: 183: if (data->holdCountA == holdvalue){
 16131  115A  085B               	movf	matrix_Main@data,w
 16132  115B  0086               	movwf	6
 16133  115C  085C               	movf	matrix_Main@data+1,w
 16134  115D  0087               	movwf	7
 16135  115E  3149               	addfsr 1,9
 16136  115F  3F40               	moviw [0]fsr1
 16137  1160  00D4               	movwf	??_matrix_Main
 16138  1161  3F41               	moviw [1]fsr1
 16139  1162  00D5               	movwf	??_matrix_Main+1
 16140  1163  085A               	movf	matrix_Main@holdvalue,w
 16141  1164  00D6               	movwf	??_matrix_Main+2
 16142  1165  01D7               	clrf	??_matrix_Main+3
 16143  1166  0855               	movf	??_matrix_Main+1,w
 16144  1167  0657               	xorwf	??_matrix_Main+3,w
 16145  1168  1D03               	skipz
 16146  1169  296C               	goto	u6195
 16147  116A  0854               	movf	??_matrix_Main,w
 16148  116B  0656               	xorwf	??_matrix_Main+2,w
 16149  116C                     u6195:	
 16150  116C  1D03               	skipz
 16151  116D  2983               	goto	l9819
 16152                           
 16153                           ;matrix_task.c: 184: matrix_found = matrix_secret_check(data, buttonPressed);
 16154  116E  085C               	movf	matrix_Main@data+1,w
 16155  116F  00F8               	movwf	matrix_secret_check@data+1
 16156  1170  085B               	movf	matrix_Main@data,w
 16157  1171  00F7               	movwf	matrix_secret_check@data
 16158  1172  0859               	movf	matrix_Main@buttonPressed,w
 16159  1173  00D4               	movwf	??_matrix_Main
 16160  1174  0854               	movf	??_matrix_Main,w
 16161  1175  00F9               	movwf	matrix_secret_check@buttonPressed
 16162  1176  31A4  2488  3190   	fcall	_matrix_secret_check
 16163  1179  0020               	movlb	0	; select bank0
 16164  117A  00D5               	movwf	??_matrix_Main+1
 16165  117B  0855               	movf	??_matrix_Main+1,w
 16166  117C  00D8               	movwf	matrix_Main@matrix_found
 16167                           
 16168                           ;matrix_task.c: 185: data->display_state = MATRIX_A;
 16169  117D  085B               	movf	matrix_Main@data,w
 16170  117E  0086               	movwf	6
 16171  117F  085C               	movf	matrix_Main@data+1,w
 16172  1180  0087               	movwf	7
 16173  1181  3142               	addfsr 1,2
 16174  1182  0181               	clrf	1
 16175  1183                     l9819:	
 16176                           
 16177                           ;matrix_task.c: 186: }
 16178                           ;matrix_task.c: 187: data->holdCountA += 1;
 16179  1183  085B               	movf	matrix_Main@data,w
 16180  1184  0086               	movwf	6
 16181  1185  085C               	movf	matrix_Main@data+1,w
 16182  1186  0087               	movwf	7
 16183  1187  3149               	addfsr 1,9
 16184  1188  3001               	movlw	1
 16185  1189  0781               	addwf	1,f
 16186  118A  3141               	addfsr 1,1
 16187  118B  1803               	skipnc
 16188  118C  0A81               	incf	1,f
 16189                           
 16190                           ;matrix_task.c: 188: data->holdCountB = 0;
 16191  118D  085B               	movf	matrix_Main@data,w
 16192  118E  0086               	movwf	6
 16193  118F  085C               	movf	matrix_Main@data+1,w
 16194  1190  0087               	movwf	7
 16195  1191  314B               	addfsr 1,11
 16196  1192  3000               	movlw	0
 16197  1193  3FC0               	movwi [0]fsr1
 16198  1194  3FC1               	movwi [1]fsr1
 16199                           
 16200                           ;matrix_task.c: 189: data->holdCountX = 0;
 16201  1195  085B               	movf	matrix_Main@data,w
 16202  1196  0086               	movwf	6
 16203  1197  085C               	movf	matrix_Main@data+1,w
 16204  1198  0087               	movwf	7
 16205  1199  314D               	addfsr 1,13
 16206  119A  3000               	movlw	0
 16207  119B  3FC0               	movwi [0]fsr1
 16208  119C  3FC1               	movwi [1]fsr1
 16209                           
 16210                           ;matrix_task.c: 190: data->holdCountY = 0;
 16211  119D  085B               	movf	matrix_Main@data,w
 16212  119E  0086               	movwf	6
 16213  119F  085C               	movf	matrix_Main@data+1,w
 16214  11A0  0087               	movwf	7
 16215  11A1  314F               	addfsr 1,15
 16216  11A2  3000               	movlw	0
 16217  11A3  3FC0               	movwi [0]fsr1
 16218  11A4  3FC1               	movwi [1]fsr1
 16219                           
 16220                           ;matrix_task.c: 191: data->holdCountXY = 0;
 16221  11A5  085B               	movf	matrix_Main@data,w
 16222  11A6  0086               	movwf	6
 16223  11A7  085C               	movf	matrix_Main@data+1,w
 16224  11A8  0087               	movwf	7
 16225  11A9  3151               	addfsr 1,17
 16226  11AA  3000               	movlw	0
 16227  11AB  3FC0               	movwi [0]fsr1
 16228  11AC  3FC1               	movwi [1]fsr1
 16229                           
 16230                           ;matrix_task.c: 192: data->holdCountAY = 0;
 16231  11AD  085B               	movf	matrix_Main@data,w
 16232  11AE  0086               	movwf	6
 16233  11AF  085C               	movf	matrix_Main@data+1,w
 16234  11B0  0087               	movwf	7
 16235  11B1  3153               	addfsr 1,19
 16236  11B2  3000               	movlw	0
 16237  11B3  3FC0               	movwi [0]fsr1
 16238  11B4  3FC1               	movwi [1]fsr1
 16239                           
 16240                           ;matrix_task.c: 193: data->holdCountAX = 0;
 16241  11B5  085B               	movf	matrix_Main@data,w
 16242  11B6  0086               	movwf	6
 16243  11B7  085C               	movf	matrix_Main@data+1,w
 16244  11B8  0087               	movwf	7
 16245  11B9  3155               	addfsr 1,21
 16246  11BA  3000               	movlw	0
 16247  11BB  3FC0               	movwi [0]fsr1
 16248  11BC  3FC1               	movwi [1]fsr1
 16249                           
 16250                           ;matrix_task.c: 194: data->holdCountBX = 0;
 16251  11BD  085B               	movf	matrix_Main@data,w
 16252  11BE  0086               	movwf	6
 16253  11BF  085C               	movf	matrix_Main@data+1,w
 16254  11C0  0087               	movwf	7
 16255  11C1  3157               	addfsr 1,23
 16256  11C2  3000               	movlw	0
 16257  11C3  3FC0               	movwi [0]fsr1
 16258  11C4  3FC1               	movwi [1]fsr1
 16259                           
 16260                           ;matrix_task.c: 195: data->holdCountBY = 0;
 16261  11C5  085B               	movf	matrix_Main@data,w
 16262  11C6  0086               	movwf	6
 16263  11C7  085C               	movf	matrix_Main@data+1,w
 16264  11C8  0087               	movwf	7
 16265  11C9  3159               	addfsr 1,25
 16266  11CA  3000               	movlw	0
 16267  11CB  3FC0               	movwi [0]fsr1
 16268  11CC  3FC1               	movwi [1]fsr1
 16269                           
 16270                           ;matrix_task.c: 196: data->holdCountBA = 0;
 16271  11CD  085B               	movf	matrix_Main@data,w
 16272  11CE  0086               	movwf	6
 16273  11CF  085C               	movf	matrix_Main@data+1,w
 16274  11D0  0087               	movwf	7
 16275  11D1  315B               	addfsr 1,27
 16276  11D2  3000               	movlw	0
 16277  11D3  3FC0               	movwi [0]fsr1
 16278  11D4  3FC1               	movwi [1]fsr1
 16279                           
 16280                           ;matrix_task.c: 197: data->noholdCount = 0;
 16281  11D5  085B               	movf	matrix_Main@data,w
 16282  11D6  0086               	movwf	6
 16283  11D7  085C               	movf	matrix_Main@data+1,w
 16284  11D8  0087               	movwf	7
 16285  11D9  315D               	addfsr 1,29
 16286  11DA  3000               	movlw	0
 16287  11DB  3FC0               	movwi [0]fsr1
 16288  11DC  3FC1               	movwi [1]fsr1
 16289                           
 16290                           ;matrix_task.c: 198: data->displayTickdown = 300;
 16291  11DD  085B               	movf	matrix_Main@data,w
 16292  11DE  0086               	movwf	6
 16293  11DF  085C               	movf	matrix_Main@data+1,w
 16294  11E0  0087               	movwf	7
 16295  11E1  3147               	addfsr 1,7
 16296  11E2  302C               	movlw	44
 16297  11E3  3FC0               	movwi [0]fsr1
 16298  11E4  3001               	movlw	1
 16299  11E5  3FC1               	movwi [1]fsr1
 16300                           
 16301                           ;matrix_task.c: 199: break;
 16302  11E6  2FB6               	goto	l10147
 16303  11E7                     l9843:	
 16304                           ;matrix_task.c: 200: case 2:
 16305                           
 16306                           
 16307                           ;matrix_task.c: 202: if (data->holdCountB == holdvalue){
 16308  11E7  085B               	movf	matrix_Main@data,w
 16309  11E8  0086               	movwf	6
 16310  11E9  085C               	movf	matrix_Main@data+1,w
 16311  11EA  0087               	movwf	7
 16312  11EB  314B               	addfsr 1,11
 16313  11EC  3F40               	moviw [0]fsr1
 16314  11ED  00D4               	movwf	??_matrix_Main
 16315  11EE  3F41               	moviw [1]fsr1
 16316  11EF  00D5               	movwf	??_matrix_Main+1
 16317  11F0  085A               	movf	matrix_Main@holdvalue,w
 16318  11F1  00D6               	movwf	??_matrix_Main+2
 16319  11F2  01D7               	clrf	??_matrix_Main+3
 16320  11F3  0855               	movf	??_matrix_Main+1,w
 16321  11F4  0657               	xorwf	??_matrix_Main+3,w
 16322  11F5  1D03               	skipz
 16323  11F6  29F9               	goto	u6205
 16324  11F7  0854               	movf	??_matrix_Main,w
 16325  11F8  0656               	xorwf	??_matrix_Main+2,w
 16326  11F9                     u6205:	
 16327  11F9  1D03               	skipz
 16328  11FA  2A16               	goto	l9849
 16329                           
 16330                           ;matrix_task.c: 203: matrix_found = matrix_secret_check(data, buttonPressed);
 16331  11FB  085C               	movf	matrix_Main@data+1,w
 16332  11FC  00F8               	movwf	matrix_secret_check@data+1
 16333  11FD  085B               	movf	matrix_Main@data,w
 16334  11FE  00F7               	movwf	matrix_secret_check@data
 16335  11FF  0859               	movf	matrix_Main@buttonPressed,w
 16336  1200  00D4               	movwf	??_matrix_Main
 16337  1201  0854               	movf	??_matrix_Main,w
 16338  1202  00F9               	movwf	matrix_secret_check@buttonPressed
 16339  1203  31A4  2488  3190   	fcall	_matrix_secret_check
 16340  1206  0020               	movlb	0	; select bank0
 16341  1207  00D5               	movwf	??_matrix_Main+1
 16342  1208  0855               	movf	??_matrix_Main+1,w
 16343  1209  00D8               	movwf	matrix_Main@matrix_found
 16344                           
 16345                           ;matrix_task.c: 204: data->display_state = MATRIX_B;
 16346  120A  085B               	movf	matrix_Main@data,w
 16347  120B  3E02               	addlw	2
 16348  120C  00D4               	movwf	??_matrix_Main
 16349  120D  3000               	movlw	0
 16350  120E  3D5C               	addwfc	matrix_Main@data+1,w
 16351  120F  00D5               	movwf	??_matrix_Main+1
 16352  1210  0854               	movf	??_matrix_Main,w
 16353  1211  0086               	movwf	6
 16354  1212  0855               	movf	??_matrix_Main+1,w
 16355  1213  0087               	movwf	7
 16356  1214  3002               	movlw	2
 16357  1215  0081               	movwf	1
 16358  1216                     l9849:	
 16359                           
 16360                           ;matrix_task.c: 205: }
 16361                           ;matrix_task.c: 206: data->holdCountA = 0;
 16362  1216  085B               	movf	matrix_Main@data,w
 16363  1217  0086               	movwf	6
 16364  1218  085C               	movf	matrix_Main@data+1,w
 16365  1219  0087               	movwf	7
 16366  121A  3149               	addfsr 1,9
 16367  121B  3000               	movlw	0
 16368  121C  3FC0               	movwi [0]fsr1
 16369  121D  3FC1               	movwi [1]fsr1
 16370                           
 16371                           ;matrix_task.c: 207: data->holdCountB += 1;
 16372  121E  085B               	movf	matrix_Main@data,w
 16373  121F  0086               	movwf	6
 16374  1220  085C               	movf	matrix_Main@data+1,w
 16375  1221  0087               	movwf	7
 16376  1222  314B               	addfsr 1,11
 16377  1223  3001               	movlw	1
 16378  1224  0781               	addwf	1,f
 16379  1225  3141               	addfsr 1,1
 16380  1226  1803               	skipnc
 16381  1227  0A81               	incf	1,f
 16382                           
 16383                           ;matrix_task.c: 208: data->holdCountX = 0;
 16384  1228  085B               	movf	matrix_Main@data,w
 16385  1229  0086               	movwf	6
 16386  122A  085C               	movf	matrix_Main@data+1,w
 16387  122B  0087               	movwf	7
 16388  122C  314D               	addfsr 1,13
 16389  122D  3000               	movlw	0
 16390  122E  3FC0               	movwi [0]fsr1
 16391  122F  3FC1               	movwi [1]fsr1
 16392                           
 16393                           ;matrix_task.c: 209: data->holdCountY = 0;
 16394  1230  085B               	movf	matrix_Main@data,w
 16395  1231  0086               	movwf	6
 16396  1232  085C               	movf	matrix_Main@data+1,w
 16397  1233  0087               	movwf	7
 16398  1234  314F               	addfsr 1,15
 16399  1235  3000               	movlw	0
 16400  1236  3FC0               	movwi [0]fsr1
 16401  1237  3FC1               	movwi [1]fsr1
 16402                           
 16403                           ;matrix_task.c: 210: data->holdCountXY = 0;
 16404  1238  085B               	movf	matrix_Main@data,w
 16405  1239  0086               	movwf	6
 16406  123A  085C               	movf	matrix_Main@data+1,w
 16407  123B  0087               	movwf	7
 16408  123C  3151               	addfsr 1,17
 16409  123D  3000               	movlw	0
 16410  123E  3FC0               	movwi [0]fsr1
 16411  123F  3FC1               	movwi [1]fsr1
 16412                           
 16413                           ;matrix_task.c: 211: data->holdCountAY = 0;
 16414  1240  085B               	movf	matrix_Main@data,w
 16415  1241  0086               	movwf	6
 16416  1242  085C               	movf	matrix_Main@data+1,w
 16417  1243  0087               	movwf	7
 16418  1244  3153               	addfsr 1,19
 16419  1245  3000               	movlw	0
 16420  1246  3FC0               	movwi [0]fsr1
 16421  1247  3FC1               	movwi [1]fsr1
 16422                           
 16423                           ;matrix_task.c: 212: data->holdCountAX = 0;
 16424  1248  085B               	movf	matrix_Main@data,w
 16425  1249  0086               	movwf	6
 16426  124A  085C               	movf	matrix_Main@data+1,w
 16427  124B  0087               	movwf	7
 16428  124C  3155               	addfsr 1,21
 16429  124D  3000               	movlw	0
 16430  124E  3FC0               	movwi [0]fsr1
 16431  124F  3FC1               	movwi [1]fsr1
 16432                           
 16433                           ;matrix_task.c: 213: data->holdCountBX = 0;
 16434  1250  085B               	movf	matrix_Main@data,w
 16435  1251  0086               	movwf	6
 16436  1252  085C               	movf	matrix_Main@data+1,w
 16437  1253  0087               	movwf	7
 16438  1254  3157               	addfsr 1,23
 16439  1255  3000               	movlw	0
 16440  1256  3FC0               	movwi [0]fsr1
 16441  1257  3FC1               	movwi [1]fsr1
 16442                           
 16443                           ;matrix_task.c: 214: data->holdCountBY = 0;
 16444  1258  085B               	movf	matrix_Main@data,w
 16445  1259  0086               	movwf	6
 16446  125A  085C               	movf	matrix_Main@data+1,w
 16447  125B  0087               	movwf	7
 16448  125C  3159               	addfsr 1,25
 16449  125D  3000               	movlw	0
 16450  125E  3FC0               	movwi [0]fsr1
 16451  125F  3FC1               	movwi [1]fsr1
 16452                           
 16453                           ;matrix_task.c: 215: data->holdCountBA = 0;
 16454  1260  085B               	movf	matrix_Main@data,w
 16455  1261  0086               	movwf	6
 16456  1262  085C               	movf	matrix_Main@data+1,w
 16457  1263  0087               	movwf	7
 16458  1264  315B               	addfsr 1,27
 16459  1265  3000               	movlw	0
 16460  1266  3FC0               	movwi [0]fsr1
 16461  1267  3FC1               	movwi [1]fsr1
 16462                           
 16463                           ;matrix_task.c: 216: data->noholdCount = 0;
 16464  1268  085B               	movf	matrix_Main@data,w
 16465  1269  0086               	movwf	6
 16466  126A  085C               	movf	matrix_Main@data+1,w
 16467  126B  0087               	movwf	7
 16468  126C  315D               	addfsr 1,29
 16469  126D  3000               	movlw	0
 16470  126E  3FC0               	movwi [0]fsr1
 16471  126F  3FC1               	movwi [1]fsr1
 16472                           
 16473                           ;matrix_task.c: 217: data->displayTickdown = 300;
 16474  1270  085B               	movf	matrix_Main@data,w
 16475  1271  0086               	movwf	6
 16476  1272  085C               	movf	matrix_Main@data+1,w
 16477  1273  0087               	movwf	7
 16478  1274  3147               	addfsr 1,7
 16479  1275  302C               	movlw	44
 16480  1276  3FC0               	movwi [0]fsr1
 16481  1277  3001               	movlw	1
 16482  1278  3FC1               	movwi [1]fsr1
 16483                           
 16484                           ;matrix_task.c: 218: break;
 16485  1279  2FB6               	goto	l10147
 16486  127A                     l9873:	
 16487                           ;matrix_task.c: 219: case 4:
 16488                           
 16489                           
 16490                           ;matrix_task.c: 221: if (data->holdCountX == holdvalue){
 16491  127A  085B               	movf	matrix_Main@data,w
 16492  127B  0086               	movwf	6
 16493  127C  085C               	movf	matrix_Main@data+1,w
 16494  127D  0087               	movwf	7
 16495  127E  314D               	addfsr 1,13
 16496  127F  3F40               	moviw [0]fsr1
 16497  1280  00D4               	movwf	??_matrix_Main
 16498  1281  3F41               	moviw [1]fsr1
 16499  1282  00D5               	movwf	??_matrix_Main+1
 16500  1283  085A               	movf	matrix_Main@holdvalue,w
 16501  1284  00D6               	movwf	??_matrix_Main+2
 16502  1285  01D7               	clrf	??_matrix_Main+3
 16503  1286  0855               	movf	??_matrix_Main+1,w
 16504  1287  0657               	xorwf	??_matrix_Main+3,w
 16505  1288  1D03               	skipz
 16506  1289  2A8C               	goto	u6215
 16507  128A  0854               	movf	??_matrix_Main,w
 16508  128B  0656               	xorwf	??_matrix_Main+2,w
 16509  128C                     u6215:	
 16510  128C  1D03               	skipz
 16511  128D  2AA9               	goto	l9879
 16512                           
 16513                           ;matrix_task.c: 222: matrix_found = matrix_secret_check(data, buttonPressed);
 16514  128E  085C               	movf	matrix_Main@data+1,w
 16515  128F  00F8               	movwf	matrix_secret_check@data+1
 16516  1290  085B               	movf	matrix_Main@data,w
 16517  1291  00F7               	movwf	matrix_secret_check@data
 16518  1292  0859               	movf	matrix_Main@buttonPressed,w
 16519  1293  00D4               	movwf	??_matrix_Main
 16520  1294  0854               	movf	??_matrix_Main,w
 16521  1295  00F9               	movwf	matrix_secret_check@buttonPressed
 16522  1296  31A4  2488  3190   	fcall	_matrix_secret_check
 16523  1299  0020               	movlb	0	; select bank0
 16524  129A  00D5               	movwf	??_matrix_Main+1
 16525  129B  0855               	movf	??_matrix_Main+1,w
 16526  129C  00D8               	movwf	matrix_Main@matrix_found
 16527                           
 16528                           ;matrix_task.c: 223: data->display_state = MATRIX_X;
 16529  129D  085B               	movf	matrix_Main@data,w
 16530  129E  3E02               	addlw	2
 16531  129F  00D4               	movwf	??_matrix_Main
 16532  12A0  3000               	movlw	0
 16533  12A1  3D5C               	addwfc	matrix_Main@data+1,w
 16534  12A2  00D5               	movwf	??_matrix_Main+1
 16535  12A3  0854               	movf	??_matrix_Main,w
 16536  12A4  0086               	movwf	6
 16537  12A5  0855               	movf	??_matrix_Main+1,w
 16538  12A6  0087               	movwf	7
 16539  12A7  3003               	movlw	3
 16540  12A8  0081               	movwf	1
 16541  12A9                     l9879:	
 16542                           
 16543                           ;matrix_task.c: 224: }
 16544                           ;matrix_task.c: 225: data->holdCountA = 0;
 16545  12A9  085B               	movf	matrix_Main@data,w
 16546  12AA  0086               	movwf	6
 16547  12AB  085C               	movf	matrix_Main@data+1,w
 16548  12AC  0087               	movwf	7
 16549  12AD  3149               	addfsr 1,9
 16550  12AE  3000               	movlw	0
 16551  12AF  3FC0               	movwi [0]fsr1
 16552  12B0  3FC1               	movwi [1]fsr1
 16553                           
 16554                           ;matrix_task.c: 226: data->holdCountB = 0;
 16555  12B1  085B               	movf	matrix_Main@data,w
 16556  12B2  0086               	movwf	6
 16557  12B3  085C               	movf	matrix_Main@data+1,w
 16558  12B4  0087               	movwf	7
 16559  12B5  314B               	addfsr 1,11
 16560  12B6  3000               	movlw	0
 16561  12B7  3FC0               	movwi [0]fsr1
 16562  12B8  3FC1               	movwi [1]fsr1
 16563                           
 16564                           ;matrix_task.c: 227: data->holdCountX += 1;
 16565  12B9  085B               	movf	matrix_Main@data,w
 16566  12BA  0086               	movwf	6
 16567  12BB  085C               	movf	matrix_Main@data+1,w
 16568  12BC  0087               	movwf	7
 16569  12BD  314D               	addfsr 1,13
 16570  12BE  3001               	movlw	1
 16571  12BF  0781               	addwf	1,f
 16572  12C0  3141               	addfsr 1,1
 16573  12C1  1803               	skipnc
 16574  12C2  0A81               	incf	1,f
 16575                           
 16576                           ;matrix_task.c: 228: data->holdCountY = 0;
 16577  12C3  085B               	movf	matrix_Main@data,w
 16578  12C4  0086               	movwf	6
 16579  12C5  085C               	movf	matrix_Main@data+1,w
 16580  12C6  0087               	movwf	7
 16581  12C7  314F               	addfsr 1,15
 16582  12C8  3000               	movlw	0
 16583  12C9  3FC0               	movwi [0]fsr1
 16584  12CA  3FC1               	movwi [1]fsr1
 16585                           
 16586                           ;matrix_task.c: 229: data->holdCountXY = 0;
 16587  12CB  085B               	movf	matrix_Main@data,w
 16588  12CC  0086               	movwf	6
 16589  12CD  085C               	movf	matrix_Main@data+1,w
 16590  12CE  0087               	movwf	7
 16591  12CF  3151               	addfsr 1,17
 16592  12D0  3000               	movlw	0
 16593  12D1  3FC0               	movwi [0]fsr1
 16594  12D2  3FC1               	movwi [1]fsr1
 16595                           
 16596                           ;matrix_task.c: 230: data->holdCountAY = 0;
 16597  12D3  085B               	movf	matrix_Main@data,w
 16598  12D4  0086               	movwf	6
 16599  12D5  085C               	movf	matrix_Main@data+1,w
 16600  12D6  0087               	movwf	7
 16601  12D7  3153               	addfsr 1,19
 16602  12D8  3000               	movlw	0
 16603  12D9  3FC0               	movwi [0]fsr1
 16604  12DA  3FC1               	movwi [1]fsr1
 16605                           
 16606                           ;matrix_task.c: 231: data->holdCountAX = 0;
 16607  12DB  085B               	movf	matrix_Main@data,w
 16608  12DC  0086               	movwf	6
 16609  12DD  085C               	movf	matrix_Main@data+1,w
 16610  12DE  0087               	movwf	7
 16611  12DF  3155               	addfsr 1,21
 16612  12E0  3000               	movlw	0
 16613  12E1  3FC0               	movwi [0]fsr1
 16614  12E2  3FC1               	movwi [1]fsr1
 16615                           
 16616                           ;matrix_task.c: 232: data->holdCountBX = 0;
 16617  12E3  085B               	movf	matrix_Main@data,w
 16618  12E4  0086               	movwf	6
 16619  12E5  085C               	movf	matrix_Main@data+1,w
 16620  12E6  0087               	movwf	7
 16621  12E7  3157               	addfsr 1,23
 16622  12E8  3000               	movlw	0
 16623  12E9  3FC0               	movwi [0]fsr1
 16624  12EA  3FC1               	movwi [1]fsr1
 16625                           
 16626                           ;matrix_task.c: 233: data->holdCountBY = 0;
 16627  12EB  085B               	movf	matrix_Main@data,w
 16628  12EC  0086               	movwf	6
 16629  12ED  085C               	movf	matrix_Main@data+1,w
 16630  12EE  0087               	movwf	7
 16631  12EF  3159               	addfsr 1,25
 16632  12F0  3000               	movlw	0
 16633  12F1  3FC0               	movwi [0]fsr1
 16634  12F2  3FC1               	movwi [1]fsr1
 16635                           
 16636                           ;matrix_task.c: 234: data->holdCountBA = 0;
 16637  12F3  085B               	movf	matrix_Main@data,w
 16638  12F4  0086               	movwf	6
 16639  12F5  085C               	movf	matrix_Main@data+1,w
 16640  12F6  0087               	movwf	7
 16641  12F7  315B               	addfsr 1,27
 16642  12F8  3000               	movlw	0
 16643  12F9  3FC0               	movwi [0]fsr1
 16644  12FA  3FC1               	movwi [1]fsr1
 16645                           
 16646                           ;matrix_task.c: 235: data->noholdCount = 0;
 16647  12FB  085B               	movf	matrix_Main@data,w
 16648  12FC  0086               	movwf	6
 16649  12FD  085C               	movf	matrix_Main@data+1,w
 16650  12FE  0087               	movwf	7
 16651  12FF  315D               	addfsr 1,29
 16652  1300  3000               	movlw	0
 16653  1301  3FC0               	movwi [0]fsr1
 16654  1302  3FC1               	movwi [1]fsr1
 16655                           
 16656                           ;matrix_task.c: 236: data->displayTickdown = 300;
 16657  1303  085B               	movf	matrix_Main@data,w
 16658  1304  0086               	movwf	6
 16659  1305  085C               	movf	matrix_Main@data+1,w
 16660  1306  0087               	movwf	7
 16661  1307  3147               	addfsr 1,7
 16662  1308  302C               	movlw	44
 16663  1309  3FC0               	movwi [0]fsr1
 16664  130A  3001               	movlw	1
 16665  130B  3FC1               	movwi [1]fsr1
 16666                           
 16667                           ;matrix_task.c: 237: break;
 16668  130C  2FB6               	goto	l10147
 16669  130D                     l9903:	
 16670                           ;matrix_task.c: 238: case 8:
 16671                           
 16672                           
 16673                           ;matrix_task.c: 240: if (data->holdCountY == holdvalue){
 16674  130D  085B               	movf	matrix_Main@data,w
 16675  130E  0086               	movwf	6
 16676  130F  085C               	movf	matrix_Main@data+1,w
 16677  1310  0087               	movwf	7
 16678  1311  314F               	addfsr 1,15
 16679  1312  3F40               	moviw [0]fsr1
 16680  1313  00D4               	movwf	??_matrix_Main
 16681  1314  3F41               	moviw [1]fsr1
 16682  1315  00D5               	movwf	??_matrix_Main+1
 16683  1316  085A               	movf	matrix_Main@holdvalue,w
 16684  1317  00D6               	movwf	??_matrix_Main+2
 16685  1318  01D7               	clrf	??_matrix_Main+3
 16686  1319  0855               	movf	??_matrix_Main+1,w
 16687  131A  0657               	xorwf	??_matrix_Main+3,w
 16688  131B  1D03               	skipz
 16689  131C  2B1F               	goto	u6225
 16690  131D  0854               	movf	??_matrix_Main,w
 16691  131E  0656               	xorwf	??_matrix_Main+2,w
 16692  131F                     u6225:	
 16693  131F  1D03               	skipz
 16694  1320  2B3C               	goto	l9909
 16695                           
 16696                           ;matrix_task.c: 241: matrix_found = matrix_secret_check(data, buttonPressed);
 16697  1321  085C               	movf	matrix_Main@data+1,w
 16698  1322  00F8               	movwf	matrix_secret_check@data+1
 16699  1323  085B               	movf	matrix_Main@data,w
 16700  1324  00F7               	movwf	matrix_secret_check@data
 16701  1325  0859               	movf	matrix_Main@buttonPressed,w
 16702  1326  00D4               	movwf	??_matrix_Main
 16703  1327  0854               	movf	??_matrix_Main,w
 16704  1328  00F9               	movwf	matrix_secret_check@buttonPressed
 16705  1329  31A4  2488  3190   	fcall	_matrix_secret_check
 16706  132C  0020               	movlb	0	; select bank0
 16707  132D  00D5               	movwf	??_matrix_Main+1
 16708  132E  0855               	movf	??_matrix_Main+1,w
 16709  132F  00D8               	movwf	matrix_Main@matrix_found
 16710                           
 16711                           ;matrix_task.c: 242: data->display_state = MATRIX_Y;
 16712  1330  085B               	movf	matrix_Main@data,w
 16713  1331  3E02               	addlw	2
 16714  1332  00D4               	movwf	??_matrix_Main
 16715  1333  3000               	movlw	0
 16716  1334  3D5C               	addwfc	matrix_Main@data+1,w
 16717  1335  00D5               	movwf	??_matrix_Main+1
 16718  1336  0854               	movf	??_matrix_Main,w
 16719  1337  0086               	movwf	6
 16720  1338  0855               	movf	??_matrix_Main+1,w
 16721  1339  0087               	movwf	7
 16722  133A  3001               	movlw	1
 16723  133B  0081               	movwf	1
 16724  133C                     l9909:	
 16725                           
 16726                           ;matrix_task.c: 243: }
 16727                           ;matrix_task.c: 245: data->holdCountA = 0;
 16728  133C  085B               	movf	matrix_Main@data,w
 16729  133D  0086               	movwf	6
 16730  133E  085C               	movf	matrix_Main@data+1,w
 16731  133F  0087               	movwf	7
 16732  1340  3149               	addfsr 1,9
 16733  1341  3000               	movlw	0
 16734  1342  3FC0               	movwi [0]fsr1
 16735  1343  3FC1               	movwi [1]fsr1
 16736                           
 16737                           ;matrix_task.c: 246: data->holdCountB = 0;
 16738  1344  085B               	movf	matrix_Main@data,w
 16739  1345  0086               	movwf	6
 16740  1346  085C               	movf	matrix_Main@data+1,w
 16741  1347  0087               	movwf	7
 16742  1348  314B               	addfsr 1,11
 16743  1349  3000               	movlw	0
 16744  134A  3FC0               	movwi [0]fsr1
 16745  134B  3FC1               	movwi [1]fsr1
 16746                           
 16747                           ;matrix_task.c: 247: data->holdCountX = 0;
 16748  134C  085B               	movf	matrix_Main@data,w
 16749  134D  0086               	movwf	6
 16750  134E  085C               	movf	matrix_Main@data+1,w
 16751  134F  0087               	movwf	7
 16752  1350  314D               	addfsr 1,13
 16753  1351  3000               	movlw	0
 16754  1352  3FC0               	movwi [0]fsr1
 16755  1353  3FC1               	movwi [1]fsr1
 16756                           
 16757                           ;matrix_task.c: 248: data->holdCountY += 1;
 16758  1354  085B               	movf	matrix_Main@data,w
 16759  1355  0086               	movwf	6
 16760  1356  085C               	movf	matrix_Main@data+1,w
 16761  1357  0087               	movwf	7
 16762  1358  314F               	addfsr 1,15
 16763  1359  3001               	movlw	1
 16764  135A  0781               	addwf	1,f
 16765  135B  3141               	addfsr 1,1
 16766  135C  1803               	skipnc
 16767  135D  0A81               	incf	1,f
 16768                           
 16769                           ;matrix_task.c: 249: data->holdCountXY = 0;
 16770  135E  085B               	movf	matrix_Main@data,w
 16771  135F  0086               	movwf	6
 16772  1360  085C               	movf	matrix_Main@data+1,w
 16773  1361  0087               	movwf	7
 16774  1362  3151               	addfsr 1,17
 16775  1363  3000               	movlw	0
 16776  1364  3FC0               	movwi [0]fsr1
 16777  1365  3FC1               	movwi [1]fsr1
 16778                           
 16779                           ;matrix_task.c: 250: data->holdCountAY = 0;
 16780  1366  085B               	movf	matrix_Main@data,w
 16781  1367  0086               	movwf	6
 16782  1368  085C               	movf	matrix_Main@data+1,w
 16783  1369  0087               	movwf	7
 16784  136A  3153               	addfsr 1,19
 16785  136B  3000               	movlw	0
 16786  136C  3FC0               	movwi [0]fsr1
 16787  136D  3FC1               	movwi [1]fsr1
 16788                           
 16789                           ;matrix_task.c: 251: data->holdCountAX = 0;
 16790  136E  085B               	movf	matrix_Main@data,w
 16791  136F  0086               	movwf	6
 16792  1370  085C               	movf	matrix_Main@data+1,w
 16793  1371  0087               	movwf	7
 16794  1372  3155               	addfsr 1,21
 16795  1373  3000               	movlw	0
 16796  1374  3FC0               	movwi [0]fsr1
 16797  1375  3FC1               	movwi [1]fsr1
 16798                           
 16799                           ;matrix_task.c: 252: data->holdCountBX = 0;
 16800  1376  085B               	movf	matrix_Main@data,w
 16801  1377  0086               	movwf	6
 16802  1378  085C               	movf	matrix_Main@data+1,w
 16803  1379  0087               	movwf	7
 16804  137A  3157               	addfsr 1,23
 16805  137B  3000               	movlw	0
 16806  137C  3FC0               	movwi [0]fsr1
 16807  137D  3FC1               	movwi [1]fsr1
 16808                           
 16809                           ;matrix_task.c: 253: data->holdCountBY = 0;
 16810  137E  085B               	movf	matrix_Main@data,w
 16811  137F  0086               	movwf	6
 16812  1380  085C               	movf	matrix_Main@data+1,w
 16813  1381  0087               	movwf	7
 16814  1382  3159               	addfsr 1,25
 16815  1383  3000               	movlw	0
 16816  1384  3FC0               	movwi [0]fsr1
 16817  1385  3FC1               	movwi [1]fsr1
 16818                           
 16819                           ;matrix_task.c: 254: data->holdCountBA = 0;
 16820  1386  085B               	movf	matrix_Main@data,w
 16821  1387  0086               	movwf	6
 16822  1388  085C               	movf	matrix_Main@data+1,w
 16823  1389  0087               	movwf	7
 16824  138A  315B               	addfsr 1,27
 16825  138B  3000               	movlw	0
 16826  138C  3FC0               	movwi [0]fsr1
 16827  138D  3FC1               	movwi [1]fsr1
 16828                           
 16829                           ;matrix_task.c: 255: data->noholdCount = 0;
 16830  138E  085B               	movf	matrix_Main@data,w
 16831  138F  0086               	movwf	6
 16832  1390  085C               	movf	matrix_Main@data+1,w
 16833  1391  0087               	movwf	7
 16834  1392  315D               	addfsr 1,29
 16835  1393  3000               	movlw	0
 16836  1394  3FC0               	movwi [0]fsr1
 16837  1395  3FC1               	movwi [1]fsr1
 16838                           
 16839                           ;matrix_task.c: 256: data->displayTickdown = 300;
 16840  1396  085B               	movf	matrix_Main@data,w
 16841  1397  0086               	movwf	6
 16842  1398  085C               	movf	matrix_Main@data+1,w
 16843  1399  0087               	movwf	7
 16844  139A  3147               	addfsr 1,7
 16845  139B  302C               	movlw	44
 16846  139C  3FC0               	movwi [0]fsr1
 16847  139D  3001               	movlw	1
 16848  139E  3FC1               	movwi [1]fsr1
 16849                           
 16850                           ;matrix_task.c: 257: break;
 16851  139F  2FB6               	goto	l10147
 16852  13A0                     l9933:	
 16853                           ;matrix_task.c: 258: case 4 | 8:
 16854                           
 16855                           
 16856                           ;matrix_task.c: 260: if (data->holdCountXY == holdvalue){
 16857  13A0  085B               	movf	matrix_Main@data,w
 16858  13A1  0086               	movwf	6
 16859  13A2  085C               	movf	matrix_Main@data+1,w
 16860  13A3  0087               	movwf	7
 16861  13A4  3151               	addfsr 1,17
 16862  13A5  3F40               	moviw [0]fsr1
 16863  13A6  00D4               	movwf	??_matrix_Main
 16864  13A7  3F41               	moviw [1]fsr1
 16865  13A8  00D5               	movwf	??_matrix_Main+1
 16866  13A9  085A               	movf	matrix_Main@holdvalue,w
 16867  13AA  00D6               	movwf	??_matrix_Main+2
 16868  13AB  01D7               	clrf	??_matrix_Main+3
 16869  13AC  0855               	movf	??_matrix_Main+1,w
 16870  13AD  0657               	xorwf	??_matrix_Main+3,w
 16871  13AE  1D03               	skipz
 16872  13AF  2BB2               	goto	u6235
 16873  13B0  0854               	movf	??_matrix_Main,w
 16874  13B1  0656               	xorwf	??_matrix_Main+2,w
 16875  13B2                     u6235:	
 16876  13B2  1D03               	skipz
 16877  13B3  2BCF               	goto	l9939
 16878                           
 16879                           ;matrix_task.c: 261: matrix_found = matrix_secret_check(data, 4 | 8);
 16880  13B4  085C               	movf	matrix_Main@data+1,w
 16881  13B5  00F8               	movwf	matrix_secret_check@data+1
 16882  13B6  085B               	movf	matrix_Main@data,w
 16883  13B7  00F7               	movwf	matrix_secret_check@data
 16884  13B8  300C               	movlw	12
 16885  13B9  00D4               	movwf	??_matrix_Main
 16886  13BA  0854               	movf	??_matrix_Main,w
 16887  13BB  00F9               	movwf	matrix_secret_check@buttonPressed
 16888  13BC  31A4  2488  3190   	fcall	_matrix_secret_check
 16889  13BF  0020               	movlb	0	; select bank0
 16890  13C0  00D5               	movwf	??_matrix_Main+1
 16891  13C1  0855               	movf	??_matrix_Main+1,w
 16892  13C2  00D8               	movwf	matrix_Main@matrix_found
 16893                           
 16894                           ;matrix_task.c: 262: data->display_state = MATRIX_XY;
 16895  13C3  085B               	movf	matrix_Main@data,w
 16896  13C4  3E02               	addlw	2
 16897  13C5  00D4               	movwf	??_matrix_Main
 16898  13C6  3000               	movlw	0
 16899  13C7  3D5C               	addwfc	matrix_Main@data+1,w
 16900  13C8  00D5               	movwf	??_matrix_Main+1
 16901  13C9  0854               	movf	??_matrix_Main,w
 16902  13CA  0086               	movwf	6
 16903  13CB  0855               	movf	??_matrix_Main+1,w
 16904  13CC  0087               	movwf	7
 16905  13CD  3008               	movlw	8
 16906  13CE  0081               	movwf	1
 16907  13CF                     l9939:	
 16908                           
 16909                           ;matrix_task.c: 263: }
 16910                           ;matrix_task.c: 264: data->holdCountA = 0;
 16911  13CF  085B               	movf	matrix_Main@data,w
 16912  13D0  0086               	movwf	6
 16913  13D1  085C               	movf	matrix_Main@data+1,w
 16914  13D2  0087               	movwf	7
 16915  13D3  3149               	addfsr 1,9
 16916  13D4  3000               	movlw	0
 16917  13D5  3FC0               	movwi [0]fsr1
 16918  13D6  3FC1               	movwi [1]fsr1
 16919                           
 16920                           ;matrix_task.c: 265: data->holdCountB = 0;
 16921  13D7  085B               	movf	matrix_Main@data,w
 16922  13D8  0086               	movwf	6
 16923  13D9  085C               	movf	matrix_Main@data+1,w
 16924  13DA  0087               	movwf	7
 16925  13DB  314B               	addfsr 1,11
 16926  13DC  3000               	movlw	0
 16927  13DD  3FC0               	movwi [0]fsr1
 16928  13DE  3FC1               	movwi [1]fsr1
 16929                           
 16930                           ;matrix_task.c: 266: data->holdCountX = 0;
 16931  13DF  085B               	movf	matrix_Main@data,w
 16932  13E0  0086               	movwf	6
 16933  13E1  085C               	movf	matrix_Main@data+1,w
 16934  13E2  0087               	movwf	7
 16935  13E3  314D               	addfsr 1,13
 16936  13E4  3000               	movlw	0
 16937  13E5  3FC0               	movwi [0]fsr1
 16938  13E6  3FC1               	movwi [1]fsr1
 16939                           
 16940                           ;matrix_task.c: 267: data->holdCountY = 0;
 16941  13E7  085B               	movf	matrix_Main@data,w
 16942  13E8  0086               	movwf	6
 16943  13E9  085C               	movf	matrix_Main@data+1,w
 16944  13EA  0087               	movwf	7
 16945  13EB  314F               	addfsr 1,15
 16946  13EC  3000               	movlw	0
 16947  13ED  3FC0               	movwi [0]fsr1
 16948  13EE  3FC1               	movwi [1]fsr1
 16949                           
 16950                           ;matrix_task.c: 268: data->holdCountXY += 1;
 16951  13EF  085B               	movf	matrix_Main@data,w
 16952  13F0  0086               	movwf	6
 16953  13F1  085C               	movf	matrix_Main@data+1,w
 16954  13F2  0087               	movwf	7
 16955  13F3  3151               	addfsr 1,17
 16956  13F4  3001               	movlw	1
 16957  13F5  0781               	addwf	1,f
 16958  13F6  3141               	addfsr 1,1
 16959  13F7  1803               	skipnc
 16960  13F8  0A81               	incf	1,f
 16961                           
 16962                           ;matrix_task.c: 269: data->holdCountAY = 0;
 16963  13F9  085B               	movf	matrix_Main@data,w
 16964  13FA  0086               	movwf	6
 16965  13FB  085C               	movf	matrix_Main@data+1,w
 16966  13FC  0087               	movwf	7
 16967  13FD  3153               	addfsr 1,19
 16968  13FE  3000               	movlw	0
 16969  13FF  3FC0               	movwi [0]fsr1
 16970  1400  3FC1               	movwi [1]fsr1
 16971                           
 16972                           ;matrix_task.c: 270: data->holdCountAX = 0;
 16973  1401  085B               	movf	matrix_Main@data,w
 16974  1402  0086               	movwf	6
 16975  1403  085C               	movf	matrix_Main@data+1,w
 16976  1404  0087               	movwf	7
 16977  1405  3155               	addfsr 1,21
 16978  1406  3000               	movlw	0
 16979  1407  3FC0               	movwi [0]fsr1
 16980  1408  3FC1               	movwi [1]fsr1
 16981                           
 16982                           ;matrix_task.c: 271: data->holdCountBX = 0;
 16983  1409  085B               	movf	matrix_Main@data,w
 16984  140A  0086               	movwf	6
 16985  140B  085C               	movf	matrix_Main@data+1,w
 16986  140C  0087               	movwf	7
 16987  140D  3157               	addfsr 1,23
 16988  140E  3000               	movlw	0
 16989  140F  3FC0               	movwi [0]fsr1
 16990  1410  3FC1               	movwi [1]fsr1
 16991                           
 16992                           ;matrix_task.c: 272: data->holdCountBY = 0;
 16993  1411  085B               	movf	matrix_Main@data,w
 16994  1412  0086               	movwf	6
 16995  1413  085C               	movf	matrix_Main@data+1,w
 16996  1414  0087               	movwf	7
 16997  1415  3159               	addfsr 1,25
 16998  1416  3000               	movlw	0
 16999  1417  3FC0               	movwi [0]fsr1
 17000  1418  3FC1               	movwi [1]fsr1
 17001                           
 17002                           ;matrix_task.c: 273: data->holdCountBA = 0;
 17003  1419  085B               	movf	matrix_Main@data,w
 17004  141A  0086               	movwf	6
 17005  141B  085C               	movf	matrix_Main@data+1,w
 17006  141C  0087               	movwf	7
 17007  141D  315B               	addfsr 1,27
 17008  141E  3000               	movlw	0
 17009  141F  3FC0               	movwi [0]fsr1
 17010  1420  3FC1               	movwi [1]fsr1
 17011                           
 17012                           ;matrix_task.c: 274: data->noholdCount = 0;
 17013  1421  085B               	movf	matrix_Main@data,w
 17014  1422  0086               	movwf	6
 17015  1423  085C               	movf	matrix_Main@data+1,w
 17016  1424  0087               	movwf	7
 17017  1425  315D               	addfsr 1,29
 17018  1426  3000               	movlw	0
 17019  1427  3FC0               	movwi [0]fsr1
 17020  1428  3FC1               	movwi [1]fsr1
 17021                           
 17022                           ;matrix_task.c: 275: data->displayTickdown = 300;
 17023  1429  085B               	movf	matrix_Main@data,w
 17024  142A  0086               	movwf	6
 17025  142B  085C               	movf	matrix_Main@data+1,w
 17026  142C  0087               	movwf	7
 17027  142D  3147               	addfsr 1,7
 17028  142E  302C               	movlw	44
 17029  142F  3FC0               	movwi [0]fsr1
 17030  1430  3001               	movlw	1
 17031  1431  3FC1               	movwi [1]fsr1
 17032                           
 17033                           ;matrix_task.c: 276: break;
 17034  1432  2FB6               	goto	l10147
 17035  1433                     l9963:	
 17036                           ;matrix_task.c: 277: case 1 | 8:
 17037                           
 17038                           
 17039                           ;matrix_task.c: 279: if (data->holdCountAY == holdvalue){
 17040  1433  085B               	movf	matrix_Main@data,w
 17041  1434  0086               	movwf	6
 17042  1435  085C               	movf	matrix_Main@data+1,w
 17043  1436  0087               	movwf	7
 17044  1437  3153               	addfsr 1,19
 17045  1438  3F40               	moviw [0]fsr1
 17046  1439  00D4               	movwf	??_matrix_Main
 17047  143A  3F41               	moviw [1]fsr1
 17048  143B  00D5               	movwf	??_matrix_Main+1
 17049  143C  085A               	movf	matrix_Main@holdvalue,w
 17050  143D  00D6               	movwf	??_matrix_Main+2
 17051  143E  01D7               	clrf	??_matrix_Main+3
 17052  143F  0855               	movf	??_matrix_Main+1,w
 17053  1440  0657               	xorwf	??_matrix_Main+3,w
 17054  1441  1D03               	skipz
 17055  1442  2C45               	goto	u6245
 17056  1443  0854               	movf	??_matrix_Main,w
 17057  1444  0656               	xorwf	??_matrix_Main+2,w
 17058  1445                     u6245:	
 17059  1445  1D03               	skipz
 17060  1446  2C62               	goto	l9969
 17061                           
 17062                           ;matrix_task.c: 280: matrix_found = matrix_secret_check(data, 1 | 8);
 17063  1447  085C               	movf	matrix_Main@data+1,w
 17064  1448  00F8               	movwf	matrix_secret_check@data+1
 17065  1449  085B               	movf	matrix_Main@data,w
 17066  144A  00F7               	movwf	matrix_secret_check@data
 17067  144B  3009               	movlw	9
 17068  144C  00D4               	movwf	??_matrix_Main
 17069  144D  0854               	movf	??_matrix_Main,w
 17070  144E  00F9               	movwf	matrix_secret_check@buttonPressed
 17071  144F  31A4  2488  3190   	fcall	_matrix_secret_check
 17072  1452  0020               	movlb	0	; select bank0
 17073  1453  00D5               	movwf	??_matrix_Main+1
 17074  1454  0855               	movf	??_matrix_Main+1,w
 17075  1455  00D8               	movwf	matrix_Main@matrix_found
 17076                           
 17077                           ;matrix_task.c: 281: data->display_state = MATRIX_AY;
 17078  1456  085B               	movf	matrix_Main@data,w
 17079  1457  3E02               	addlw	2
 17080  1458  00D4               	movwf	??_matrix_Main
 17081  1459  3000               	movlw	0
 17082  145A  3D5C               	addwfc	matrix_Main@data+1,w
 17083  145B  00D5               	movwf	??_matrix_Main+1
 17084  145C  0854               	movf	??_matrix_Main,w
 17085  145D  0086               	movwf	6
 17086  145E  0855               	movf	??_matrix_Main+1,w
 17087  145F  0087               	movwf	7
 17088  1460  3005               	movlw	5
 17089  1461  0081               	movwf	1
 17090  1462                     l9969:	
 17091                           
 17092                           ;matrix_task.c: 282: }
 17093                           ;matrix_task.c: 283: data->holdCountA = 0;
 17094  1462  085B               	movf	matrix_Main@data,w
 17095  1463  0086               	movwf	6
 17096  1464  085C               	movf	matrix_Main@data+1,w
 17097  1465  0087               	movwf	7
 17098  1466  3149               	addfsr 1,9
 17099  1467  3000               	movlw	0
 17100  1468  3FC0               	movwi [0]fsr1
 17101  1469  3FC1               	movwi [1]fsr1
 17102                           
 17103                           ;matrix_task.c: 284: data->holdCountB = 0;
 17104  146A  085B               	movf	matrix_Main@data,w
 17105  146B  0086               	movwf	6
 17106  146C  085C               	movf	matrix_Main@data+1,w
 17107  146D  0087               	movwf	7
 17108  146E  314B               	addfsr 1,11
 17109  146F  3000               	movlw	0
 17110  1470  3FC0               	movwi [0]fsr1
 17111  1471  3FC1               	movwi [1]fsr1
 17112                           
 17113                           ;matrix_task.c: 285: data->holdCountX = 0;
 17114  1472  085B               	movf	matrix_Main@data,w
 17115  1473  0086               	movwf	6
 17116  1474  085C               	movf	matrix_Main@data+1,w
 17117  1475  0087               	movwf	7
 17118  1476  314D               	addfsr 1,13
 17119  1477  3000               	movlw	0
 17120  1478  3FC0               	movwi [0]fsr1
 17121  1479  3FC1               	movwi [1]fsr1
 17122                           
 17123                           ;matrix_task.c: 286: data->holdCountY = 0;
 17124  147A  085B               	movf	matrix_Main@data,w
 17125  147B  0086               	movwf	6
 17126  147C  085C               	movf	matrix_Main@data+1,w
 17127  147D  0087               	movwf	7
 17128  147E  314F               	addfsr 1,15
 17129  147F  3000               	movlw	0
 17130  1480  3FC0               	movwi [0]fsr1
 17131  1481  3FC1               	movwi [1]fsr1
 17132                           
 17133                           ;matrix_task.c: 287: data->holdCountXY = 0;
 17134  1482  085B               	movf	matrix_Main@data,w
 17135  1483  0086               	movwf	6
 17136  1484  085C               	movf	matrix_Main@data+1,w
 17137  1485  0087               	movwf	7
 17138  1486  3151               	addfsr 1,17
 17139  1487  3000               	movlw	0
 17140  1488  3FC0               	movwi [0]fsr1
 17141  1489  3FC1               	movwi [1]fsr1
 17142                           
 17143                           ;matrix_task.c: 288: data->holdCountAY += 1;
 17144  148A  085B               	movf	matrix_Main@data,w
 17145  148B  0086               	movwf	6
 17146  148C  085C               	movf	matrix_Main@data+1,w
 17147  148D  0087               	movwf	7
 17148  148E  3153               	addfsr 1,19
 17149  148F  3001               	movlw	1
 17150  1490  0781               	addwf	1,f
 17151  1491  3141               	addfsr 1,1
 17152  1492  1803               	skipnc
 17153  1493  0A81               	incf	1,f
 17154                           
 17155                           ;matrix_task.c: 289: data->holdCountAX = 0;
 17156  1494  085B               	movf	matrix_Main@data,w
 17157  1495  0086               	movwf	6
 17158  1496  085C               	movf	matrix_Main@data+1,w
 17159  1497  0087               	movwf	7
 17160  1498  3155               	addfsr 1,21
 17161  1499  3000               	movlw	0
 17162  149A  3FC0               	movwi [0]fsr1
 17163  149B  3FC1               	movwi [1]fsr1
 17164                           
 17165                           ;matrix_task.c: 290: data->holdCountBX = 0;
 17166  149C  085B               	movf	matrix_Main@data,w
 17167  149D  0086               	movwf	6
 17168  149E  085C               	movf	matrix_Main@data+1,w
 17169  149F  0087               	movwf	7
 17170  14A0  3157               	addfsr 1,23
 17171  14A1  3000               	movlw	0
 17172  14A2  3FC0               	movwi [0]fsr1
 17173  14A3  3FC1               	movwi [1]fsr1
 17174                           
 17175                           ;matrix_task.c: 291: data->holdCountBY = 0;
 17176  14A4  085B               	movf	matrix_Main@data,w
 17177  14A5  0086               	movwf	6
 17178  14A6  085C               	movf	matrix_Main@data+1,w
 17179  14A7  0087               	movwf	7
 17180  14A8  3159               	addfsr 1,25
 17181  14A9  3000               	movlw	0
 17182  14AA  3FC0               	movwi [0]fsr1
 17183  14AB  3FC1               	movwi [1]fsr1
 17184                           
 17185                           ;matrix_task.c: 292: data->holdCountBA = 0;
 17186  14AC  085B               	movf	matrix_Main@data,w
 17187  14AD  0086               	movwf	6
 17188  14AE  085C               	movf	matrix_Main@data+1,w
 17189  14AF  0087               	movwf	7
 17190  14B0  315B               	addfsr 1,27
 17191  14B1  3000               	movlw	0
 17192  14B2  3FC0               	movwi [0]fsr1
 17193  14B3  3FC1               	movwi [1]fsr1
 17194                           
 17195                           ;matrix_task.c: 293: data->noholdCount = 0;
 17196  14B4  085B               	movf	matrix_Main@data,w
 17197  14B5  0086               	movwf	6
 17198  14B6  085C               	movf	matrix_Main@data+1,w
 17199  14B7  0087               	movwf	7
 17200  14B8  315D               	addfsr 1,29
 17201  14B9  3000               	movlw	0
 17202  14BA  3FC0               	movwi [0]fsr1
 17203  14BB  3FC1               	movwi [1]fsr1
 17204                           
 17205                           ;matrix_task.c: 294: data->displayTickdown = 300;
 17206  14BC  085B               	movf	matrix_Main@data,w
 17207  14BD  0086               	movwf	6
 17208  14BE  085C               	movf	matrix_Main@data+1,w
 17209  14BF  0087               	movwf	7
 17210  14C0  3147               	addfsr 1,7
 17211  14C1  302C               	movlw	44
 17212  14C2  3FC0               	movwi [0]fsr1
 17213  14C3  3001               	movlw	1
 17214  14C4  3FC1               	movwi [1]fsr1
 17215                           
 17216                           ;matrix_task.c: 295: break;
 17217  14C5  2FB6               	goto	l10147
 17218  14C6                     l9993:	
 17219                           ;matrix_task.c: 296: case 1 | 4:
 17220                           
 17221                           
 17222                           ;matrix_task.c: 298: if (data->holdCountAX == holdvalue){
 17223  14C6  085B               	movf	matrix_Main@data,w
 17224  14C7  0086               	movwf	6
 17225  14C8  085C               	movf	matrix_Main@data+1,w
 17226  14C9  0087               	movwf	7
 17227  14CA  3155               	addfsr 1,21
 17228  14CB  3F40               	moviw [0]fsr1
 17229  14CC  00D4               	movwf	??_matrix_Main
 17230  14CD  3F41               	moviw [1]fsr1
 17231  14CE  00D5               	movwf	??_matrix_Main+1
 17232  14CF  085A               	movf	matrix_Main@holdvalue,w
 17233  14D0  00D6               	movwf	??_matrix_Main+2
 17234  14D1  01D7               	clrf	??_matrix_Main+3
 17235  14D2  0855               	movf	??_matrix_Main+1,w
 17236  14D3  0657               	xorwf	??_matrix_Main+3,w
 17237  14D4  1D03               	skipz
 17238  14D5  2CD8               	goto	u6255
 17239  14D6  0854               	movf	??_matrix_Main,w
 17240  14D7  0656               	xorwf	??_matrix_Main+2,w
 17241  14D8                     u6255:	
 17242  14D8  1D03               	skipz
 17243  14D9  2CF5               	goto	l9999
 17244                           
 17245                           ;matrix_task.c: 299: matrix_found = matrix_secret_check(data, 1 | 4);
 17246  14DA  085C               	movf	matrix_Main@data+1,w
 17247  14DB  00F8               	movwf	matrix_secret_check@data+1
 17248  14DC  085B               	movf	matrix_Main@data,w
 17249  14DD  00F7               	movwf	matrix_secret_check@data
 17250  14DE  3005               	movlw	5
 17251  14DF  00D4               	movwf	??_matrix_Main
 17252  14E0  0854               	movf	??_matrix_Main,w
 17253  14E1  00F9               	movwf	matrix_secret_check@buttonPressed
 17254  14E2  31A4  2488  3190   	fcall	_matrix_secret_check
 17255  14E5  0020               	movlb	0	; select bank0
 17256  14E6  00D5               	movwf	??_matrix_Main+1
 17257  14E7  0855               	movf	??_matrix_Main+1,w
 17258  14E8  00D8               	movwf	matrix_Main@matrix_found
 17259                           
 17260                           ;matrix_task.c: 300: data->display_state = MATRIX_AX;
 17261  14E9  085B               	movf	matrix_Main@data,w
 17262  14EA  3E02               	addlw	2
 17263  14EB  00D4               	movwf	??_matrix_Main
 17264  14EC  3000               	movlw	0
 17265  14ED  3D5C               	addwfc	matrix_Main@data+1,w
 17266  14EE  00D5               	movwf	??_matrix_Main+1
 17267  14EF  0854               	movf	??_matrix_Main,w
 17268  14F0  0086               	movwf	6
 17269  14F1  0855               	movf	??_matrix_Main+1,w
 17270  14F2  0087               	movwf	7
 17271  14F3  3004               	movlw	4
 17272  14F4  0081               	movwf	1
 17273  14F5                     l9999:	
 17274                           
 17275                           ;matrix_task.c: 301: }
 17276                           ;matrix_task.c: 302: data->holdCountA = 0;
 17277  14F5  085B               	movf	matrix_Main@data,w
 17278  14F6  0086               	movwf	6
 17279  14F7  085C               	movf	matrix_Main@data+1,w
 17280  14F8  0087               	movwf	7
 17281  14F9  3149               	addfsr 1,9
 17282  14FA  3000               	movlw	0
 17283  14FB  3FC0               	movwi [0]fsr1
 17284  14FC  3FC1               	movwi [1]fsr1
 17285                           
 17286                           ;matrix_task.c: 303: data->holdCountB = 0;
 17287  14FD  085B               	movf	matrix_Main@data,w
 17288  14FE  0086               	movwf	6
 17289  14FF  085C               	movf	matrix_Main@data+1,w
 17290  1500  0087               	movwf	7
 17291  1501  314B               	addfsr 1,11
 17292  1502  3000               	movlw	0
 17293  1503  3FC0               	movwi [0]fsr1
 17294  1504  3FC1               	movwi [1]fsr1
 17295                           
 17296                           ;matrix_task.c: 304: data->holdCountX = 0;
 17297  1505  085B               	movf	matrix_Main@data,w
 17298  1506  0086               	movwf	6
 17299  1507  085C               	movf	matrix_Main@data+1,w
 17300  1508  0087               	movwf	7
 17301  1509  314D               	addfsr 1,13
 17302  150A  3000               	movlw	0
 17303  150B  3FC0               	movwi [0]fsr1
 17304  150C  3FC1               	movwi [1]fsr1
 17305                           
 17306                           ;matrix_task.c: 305: data->holdCountY = 0;
 17307  150D  085B               	movf	matrix_Main@data,w
 17308  150E  0086               	movwf	6
 17309  150F  085C               	movf	matrix_Main@data+1,w
 17310  1510  0087               	movwf	7
 17311  1511  314F               	addfsr 1,15
 17312  1512  3000               	movlw	0
 17313  1513  3FC0               	movwi [0]fsr1
 17314  1514  3FC1               	movwi [1]fsr1
 17315                           
 17316                           ;matrix_task.c: 306: data->holdCountXY = 0;
 17317  1515  085B               	movf	matrix_Main@data,w
 17318  1516  0086               	movwf	6
 17319  1517  085C               	movf	matrix_Main@data+1,w
 17320  1518  0087               	movwf	7
 17321  1519  3151               	addfsr 1,17
 17322  151A  3000               	movlw	0
 17323  151B  3FC0               	movwi [0]fsr1
 17324  151C  3FC1               	movwi [1]fsr1
 17325                           
 17326                           ;matrix_task.c: 307: data->holdCountAY = 0;
 17327  151D  085B               	movf	matrix_Main@data,w
 17328  151E  0086               	movwf	6
 17329  151F  085C               	movf	matrix_Main@data+1,w
 17330  1520  0087               	movwf	7
 17331  1521  3153               	addfsr 1,19
 17332  1522  3000               	movlw	0
 17333  1523  3FC0               	movwi [0]fsr1
 17334  1524  3FC1               	movwi [1]fsr1
 17335                           
 17336                           ;matrix_task.c: 308: data->holdCountAX += 1;
 17337  1525  085B               	movf	matrix_Main@data,w
 17338  1526  0086               	movwf	6
 17339  1527  085C               	movf	matrix_Main@data+1,w
 17340  1528  0087               	movwf	7
 17341  1529  3155               	addfsr 1,21
 17342  152A  3001               	movlw	1
 17343  152B  0781               	addwf	1,f
 17344  152C  3141               	addfsr 1,1
 17345  152D  1803               	skipnc
 17346  152E  0A81               	incf	1,f
 17347                           
 17348                           ;matrix_task.c: 309: data->holdCountBX = 0;
 17349  152F  085B               	movf	matrix_Main@data,w
 17350  1530  0086               	movwf	6
 17351  1531  085C               	movf	matrix_Main@data+1,w
 17352  1532  0087               	movwf	7
 17353  1533  3157               	addfsr 1,23
 17354  1534  3000               	movlw	0
 17355  1535  3FC0               	movwi [0]fsr1
 17356  1536  3FC1               	movwi [1]fsr1
 17357                           
 17358                           ;matrix_task.c: 310: data->holdCountBY = 0;
 17359  1537  085B               	movf	matrix_Main@data,w
 17360  1538  0086               	movwf	6
 17361  1539  085C               	movf	matrix_Main@data+1,w
 17362  153A  0087               	movwf	7
 17363  153B  3159               	addfsr 1,25
 17364  153C  3000               	movlw	0
 17365  153D  3FC0               	movwi [0]fsr1
 17366  153E  3FC1               	movwi [1]fsr1
 17367                           
 17368                           ;matrix_task.c: 311: data->holdCountBA = 0;
 17369  153F  085B               	movf	matrix_Main@data,w
 17370  1540  0086               	movwf	6
 17371  1541  085C               	movf	matrix_Main@data+1,w
 17372  1542  0087               	movwf	7
 17373  1543  315B               	addfsr 1,27
 17374  1544  3000               	movlw	0
 17375  1545  3FC0               	movwi [0]fsr1
 17376  1546  3FC1               	movwi [1]fsr1
 17377                           
 17378                           ;matrix_task.c: 312: data->noholdCount = 0;
 17379  1547  085B               	movf	matrix_Main@data,w
 17380  1548  0086               	movwf	6
 17381  1549  085C               	movf	matrix_Main@data+1,w
 17382  154A  0087               	movwf	7
 17383  154B  315D               	addfsr 1,29
 17384  154C  3000               	movlw	0
 17385  154D  3FC0               	movwi [0]fsr1
 17386  154E  3FC1               	movwi [1]fsr1
 17387                           
 17388                           ;matrix_task.c: 313: data->displayTickdown = 300;
 17389  154F  085B               	movf	matrix_Main@data,w
 17390  1550  0086               	movwf	6
 17391  1551  085C               	movf	matrix_Main@data+1,w
 17392  1552  0087               	movwf	7
 17393  1553  3147               	addfsr 1,7
 17394  1554  302C               	movlw	44
 17395  1555  3FC0               	movwi [0]fsr1
 17396  1556  3001               	movlw	1
 17397  1557  3FC1               	movwi [1]fsr1
 17398                           
 17399                           ;matrix_task.c: 314: break;
 17400  1558  2FB6               	goto	l10147
 17401  1559                     l10023:	
 17402                           ;matrix_task.c: 315: case 2 | 4:
 17403                           
 17404                           
 17405                           ;matrix_task.c: 317: if (data->holdCountBX == holdvalue){
 17406  1559  085B               	movf	matrix_Main@data,w
 17407  155A  0086               	movwf	6
 17408  155B  085C               	movf	matrix_Main@data+1,w
 17409  155C  0087               	movwf	7
 17410  155D  3157               	addfsr 1,23
 17411  155E  3F40               	moviw [0]fsr1
 17412  155F  00D4               	movwf	??_matrix_Main
 17413  1560  3F41               	moviw [1]fsr1
 17414  1561  00D5               	movwf	??_matrix_Main+1
 17415  1562  085A               	movf	matrix_Main@holdvalue,w
 17416  1563  00D6               	movwf	??_matrix_Main+2
 17417  1564  01D7               	clrf	??_matrix_Main+3
 17418  1565  0855               	movf	??_matrix_Main+1,w
 17419  1566  0657               	xorwf	??_matrix_Main+3,w
 17420  1567  1D03               	skipz
 17421  1568  2D6B               	goto	u6265
 17422  1569  0854               	movf	??_matrix_Main,w
 17423  156A  0656               	xorwf	??_matrix_Main+2,w
 17424  156B                     u6265:	
 17425  156B  1D03               	skipz
 17426  156C  2D88               	goto	l10029
 17427                           
 17428                           ;matrix_task.c: 318: matrix_found = matrix_secret_check(data, 2 | 4);
 17429  156D  085C               	movf	matrix_Main@data+1,w
 17430  156E  00F8               	movwf	matrix_secret_check@data+1
 17431  156F  085B               	movf	matrix_Main@data,w
 17432  1570  00F7               	movwf	matrix_secret_check@data
 17433  1571  3006               	movlw	6
 17434  1572  00D4               	movwf	??_matrix_Main
 17435  1573  0854               	movf	??_matrix_Main,w
 17436  1574  00F9               	movwf	matrix_secret_check@buttonPressed
 17437  1575  31A4  2488  3190   	fcall	_matrix_secret_check
 17438  1578  0020               	movlb	0	; select bank0
 17439  1579  00D5               	movwf	??_matrix_Main+1
 17440  157A  0855               	movf	??_matrix_Main+1,w
 17441  157B  00D8               	movwf	matrix_Main@matrix_found
 17442                           
 17443                           ;matrix_task.c: 319: data->display_state = MATRIX_BX;
 17444  157C  085B               	movf	matrix_Main@data,w
 17445  157D  3E02               	addlw	2
 17446  157E  00D4               	movwf	??_matrix_Main
 17447  157F  3000               	movlw	0
 17448  1580  3D5C               	addwfc	matrix_Main@data+1,w
 17449  1581  00D5               	movwf	??_matrix_Main+1
 17450  1582  0854               	movf	??_matrix_Main,w
 17451  1583  0086               	movwf	6
 17452  1584  0855               	movf	??_matrix_Main+1,w
 17453  1585  0087               	movwf	7
 17454  1586  3007               	movlw	7
 17455  1587  0081               	movwf	1
 17456  1588                     l10029:	
 17457                           
 17458                           ;matrix_task.c: 320: }
 17459                           ;matrix_task.c: 321: data->holdCountA = 0;
 17460  1588  085B               	movf	matrix_Main@data,w
 17461  1589  0086               	movwf	6
 17462  158A  085C               	movf	matrix_Main@data+1,w
 17463  158B  0087               	movwf	7
 17464  158C  3149               	addfsr 1,9
 17465  158D  3000               	movlw	0
 17466  158E  3FC0               	movwi [0]fsr1
 17467  158F  3FC1               	movwi [1]fsr1
 17468                           
 17469                           ;matrix_task.c: 322: data->holdCountB = 0;
 17470  1590  085B               	movf	matrix_Main@data,w
 17471  1591  0086               	movwf	6
 17472  1592  085C               	movf	matrix_Main@data+1,w
 17473  1593  0087               	movwf	7
 17474  1594  314B               	addfsr 1,11
 17475  1595  3000               	movlw	0
 17476  1596  3FC0               	movwi [0]fsr1
 17477  1597  3FC1               	movwi [1]fsr1
 17478                           
 17479                           ;matrix_task.c: 323: data->holdCountX = 0;
 17480  1598  085B               	movf	matrix_Main@data,w
 17481  1599  0086               	movwf	6
 17482  159A  085C               	movf	matrix_Main@data+1,w
 17483  159B  0087               	movwf	7
 17484  159C  314D               	addfsr 1,13
 17485  159D  3000               	movlw	0
 17486  159E  3FC0               	movwi [0]fsr1
 17487  159F  3FC1               	movwi [1]fsr1
 17488                           
 17489                           ;matrix_task.c: 324: data->holdCountY = 0;
 17490  15A0  085B               	movf	matrix_Main@data,w
 17491  15A1  0086               	movwf	6
 17492  15A2  085C               	movf	matrix_Main@data+1,w
 17493  15A3  0087               	movwf	7
 17494  15A4  314F               	addfsr 1,15
 17495  15A5  3000               	movlw	0
 17496  15A6  3FC0               	movwi [0]fsr1
 17497  15A7  3FC1               	movwi [1]fsr1
 17498                           
 17499                           ;matrix_task.c: 325: data->holdCountXY = 0;
 17500  15A8  085B               	movf	matrix_Main@data,w
 17501  15A9  0086               	movwf	6
 17502  15AA  085C               	movf	matrix_Main@data+1,w
 17503  15AB  0087               	movwf	7
 17504  15AC  3151               	addfsr 1,17
 17505  15AD  3000               	movlw	0
 17506  15AE  3FC0               	movwi [0]fsr1
 17507  15AF  3FC1               	movwi [1]fsr1
 17508                           
 17509                           ;matrix_task.c: 326: data->holdCountAY = 0;
 17510  15B0  085B               	movf	matrix_Main@data,w
 17511  15B1  0086               	movwf	6
 17512  15B2  085C               	movf	matrix_Main@data+1,w
 17513  15B3  0087               	movwf	7
 17514  15B4  3153               	addfsr 1,19
 17515  15B5  3000               	movlw	0
 17516  15B6  3FC0               	movwi [0]fsr1
 17517  15B7  3FC1               	movwi [1]fsr1
 17518                           
 17519                           ;matrix_task.c: 327: data->holdCountAX = 0;
 17520  15B8  085B               	movf	matrix_Main@data,w
 17521  15B9  0086               	movwf	6
 17522  15BA  085C               	movf	matrix_Main@data+1,w
 17523  15BB  0087               	movwf	7
 17524  15BC  3155               	addfsr 1,21
 17525  15BD  3000               	movlw	0
 17526  15BE  3FC0               	movwi [0]fsr1
 17527  15BF  3FC1               	movwi [1]fsr1
 17528                           
 17529                           ;matrix_task.c: 328: data->holdCountBX += 1;
 17530  15C0  085B               	movf	matrix_Main@data,w
 17531  15C1  0086               	movwf	6
 17532  15C2  085C               	movf	matrix_Main@data+1,w
 17533  15C3  0087               	movwf	7
 17534  15C4  3157               	addfsr 1,23
 17535  15C5  3001               	movlw	1
 17536  15C6  0781               	addwf	1,f
 17537  15C7  3141               	addfsr 1,1
 17538  15C8  1803               	skipnc
 17539  15C9  0A81               	incf	1,f
 17540                           
 17541                           ;matrix_task.c: 329: data->holdCountBY = 0;
 17542  15CA  085B               	movf	matrix_Main@data,w
 17543  15CB  0086               	movwf	6
 17544  15CC  085C               	movf	matrix_Main@data+1,w
 17545  15CD  0087               	movwf	7
 17546  15CE  3159               	addfsr 1,25
 17547  15CF  3000               	movlw	0
 17548  15D0  3FC0               	movwi [0]fsr1
 17549  15D1  3FC1               	movwi [1]fsr1
 17550                           
 17551                           ;matrix_task.c: 330: data->holdCountBA = 0;
 17552  15D2  085B               	movf	matrix_Main@data,w
 17553  15D3  0086               	movwf	6
 17554  15D4  085C               	movf	matrix_Main@data+1,w
 17555  15D5  0087               	movwf	7
 17556  15D6  315B               	addfsr 1,27
 17557  15D7  3000               	movlw	0
 17558  15D8  3FC0               	movwi [0]fsr1
 17559  15D9  3FC1               	movwi [1]fsr1
 17560                           
 17561                           ;matrix_task.c: 331: data->noholdCount = 0;
 17562  15DA  085B               	movf	matrix_Main@data,w
 17563  15DB  0086               	movwf	6
 17564  15DC  085C               	movf	matrix_Main@data+1,w
 17565  15DD  0087               	movwf	7
 17566  15DE  315D               	addfsr 1,29
 17567  15DF  3000               	movlw	0
 17568  15E0  3FC0               	movwi [0]fsr1
 17569  15E1  3FC1               	movwi [1]fsr1
 17570                           
 17571                           ;matrix_task.c: 332: data->displayTickdown = 300;
 17572  15E2  085B               	movf	matrix_Main@data,w
 17573  15E3  0086               	movwf	6
 17574  15E4  085C               	movf	matrix_Main@data+1,w
 17575  15E5  0087               	movwf	7
 17576  15E6  3147               	addfsr 1,7
 17577  15E7  302C               	movlw	44
 17578  15E8  3FC0               	movwi [0]fsr1
 17579  15E9  3001               	movlw	1
 17580  15EA  3FC1               	movwi [1]fsr1
 17581                           
 17582                           ;matrix_task.c: 333: break;
 17583  15EB  2FB6               	goto	l10147
 17584  15EC                     l10053:	
 17585                           ;matrix_task.c: 334: case 2 | 8:
 17586                           
 17587                           
 17588                           ;matrix_task.c: 336: if (data->holdCountBY == holdvalue){
 17589  15EC  085B               	movf	matrix_Main@data,w
 17590  15ED  0086               	movwf	6
 17591  15EE  085C               	movf	matrix_Main@data+1,w
 17592  15EF  0087               	movwf	7
 17593  15F0  3159               	addfsr 1,25
 17594  15F1  3F40               	moviw [0]fsr1
 17595  15F2  00D4               	movwf	??_matrix_Main
 17596  15F3  3F41               	moviw [1]fsr1
 17597  15F4  00D5               	movwf	??_matrix_Main+1
 17598  15F5  085A               	movf	matrix_Main@holdvalue,w
 17599  15F6  00D6               	movwf	??_matrix_Main+2
 17600  15F7  01D7               	clrf	??_matrix_Main+3
 17601  15F8  0855               	movf	??_matrix_Main+1,w
 17602  15F9  0657               	xorwf	??_matrix_Main+3,w
 17603  15FA  1D03               	skipz
 17604  15FB  2DFE               	goto	u6275
 17605  15FC  0854               	movf	??_matrix_Main,w
 17606  15FD  0656               	xorwf	??_matrix_Main+2,w
 17607  15FE                     u6275:	
 17608  15FE  1D03               	skipz
 17609  15FF  2E1B               	goto	l10059
 17610                           
 17611                           ;matrix_task.c: 337: matrix_found = matrix_secret_check(data, 2 | 8);
 17612  1600  085C               	movf	matrix_Main@data+1,w
 17613  1601  00F8               	movwf	matrix_secret_check@data+1
 17614  1602  085B               	movf	matrix_Main@data,w
 17615  1603  00F7               	movwf	matrix_secret_check@data
 17616  1604  300A               	movlw	10
 17617  1605  00D4               	movwf	??_matrix_Main
 17618  1606  0854               	movf	??_matrix_Main,w
 17619  1607  00F9               	movwf	matrix_secret_check@buttonPressed
 17620  1608  31A4  2488  3190   	fcall	_matrix_secret_check
 17621  160B  0020               	movlb	0	; select bank0
 17622  160C  00D5               	movwf	??_matrix_Main+1
 17623  160D  0855               	movf	??_matrix_Main+1,w
 17624  160E  00D8               	movwf	matrix_Main@matrix_found
 17625                           
 17626                           ;matrix_task.c: 338: data->display_state = MATRIX_BY;
 17627  160F  085B               	movf	matrix_Main@data,w
 17628  1610  3E02               	addlw	2
 17629  1611  00D4               	movwf	??_matrix_Main
 17630  1612  3000               	movlw	0
 17631  1613  3D5C               	addwfc	matrix_Main@data+1,w
 17632  1614  00D5               	movwf	??_matrix_Main+1
 17633  1615  0854               	movf	??_matrix_Main,w
 17634  1616  0086               	movwf	6
 17635  1617  0855               	movf	??_matrix_Main+1,w
 17636  1618  0087               	movwf	7
 17637  1619  3009               	movlw	9
 17638  161A  0081               	movwf	1
 17639  161B                     l10059:	
 17640                           
 17641                           ;matrix_task.c: 339: }
 17642                           ;matrix_task.c: 340: data->holdCountA = 0;
 17643  161B  085B               	movf	matrix_Main@data,w
 17644  161C  0086               	movwf	6
 17645  161D  085C               	movf	matrix_Main@data+1,w
 17646  161E  0087               	movwf	7
 17647  161F  3149               	addfsr 1,9
 17648  1620  3000               	movlw	0
 17649  1621  3FC0               	movwi [0]fsr1
 17650  1622  3FC1               	movwi [1]fsr1
 17651                           
 17652                           ;matrix_task.c: 341: data->holdCountB = 0;
 17653  1623  085B               	movf	matrix_Main@data,w
 17654  1624  0086               	movwf	6
 17655  1625  085C               	movf	matrix_Main@data+1,w
 17656  1626  0087               	movwf	7
 17657  1627  314B               	addfsr 1,11
 17658  1628  3000               	movlw	0
 17659  1629  3FC0               	movwi [0]fsr1
 17660  162A  3FC1               	movwi [1]fsr1
 17661                           
 17662                           ;matrix_task.c: 342: data->holdCountX = 0;
 17663  162B  085B               	movf	matrix_Main@data,w
 17664  162C  0086               	movwf	6
 17665  162D  085C               	movf	matrix_Main@data+1,w
 17666  162E  0087               	movwf	7
 17667  162F  314D               	addfsr 1,13
 17668  1630  3000               	movlw	0
 17669  1631  3FC0               	movwi [0]fsr1
 17670  1632  3FC1               	movwi [1]fsr1
 17671                           
 17672                           ;matrix_task.c: 343: data->holdCountY = 0;
 17673  1633  085B               	movf	matrix_Main@data,w
 17674  1634  0086               	movwf	6
 17675  1635  085C               	movf	matrix_Main@data+1,w
 17676  1636  0087               	movwf	7
 17677  1637  314F               	addfsr 1,15
 17678  1638  3000               	movlw	0
 17679  1639  3FC0               	movwi [0]fsr1
 17680  163A  3FC1               	movwi [1]fsr1
 17681                           
 17682                           ;matrix_task.c: 344: data->holdCountXY = 0;
 17683  163B  085B               	movf	matrix_Main@data,w
 17684  163C  0086               	movwf	6
 17685  163D  085C               	movf	matrix_Main@data+1,w
 17686  163E  0087               	movwf	7
 17687  163F  3151               	addfsr 1,17
 17688  1640  3000               	movlw	0
 17689  1641  3FC0               	movwi [0]fsr1
 17690  1642  3FC1               	movwi [1]fsr1
 17691                           
 17692                           ;matrix_task.c: 345: data->holdCountAY = 0;
 17693  1643  085B               	movf	matrix_Main@data,w
 17694  1644  0086               	movwf	6
 17695  1645  085C               	movf	matrix_Main@data+1,w
 17696  1646  0087               	movwf	7
 17697  1647  3153               	addfsr 1,19
 17698  1648  3000               	movlw	0
 17699  1649  3FC0               	movwi [0]fsr1
 17700  164A  3FC1               	movwi [1]fsr1
 17701                           
 17702                           ;matrix_task.c: 346: data->holdCountAX = 0;
 17703  164B  085B               	movf	matrix_Main@data,w
 17704  164C  0086               	movwf	6
 17705  164D  085C               	movf	matrix_Main@data+1,w
 17706  164E  0087               	movwf	7
 17707  164F  3155               	addfsr 1,21
 17708  1650  3000               	movlw	0
 17709  1651  3FC0               	movwi [0]fsr1
 17710  1652  3FC1               	movwi [1]fsr1
 17711                           
 17712                           ;matrix_task.c: 347: data->holdCountBX = 0;
 17713  1653  085B               	movf	matrix_Main@data,w
 17714  1654  0086               	movwf	6
 17715  1655  085C               	movf	matrix_Main@data+1,w
 17716  1656  0087               	movwf	7
 17717  1657  3157               	addfsr 1,23
 17718  1658  3000               	movlw	0
 17719  1659  3FC0               	movwi [0]fsr1
 17720  165A  3FC1               	movwi [1]fsr1
 17721                           
 17722                           ;matrix_task.c: 348: data->holdCountBY += 1;
 17723  165B  085B               	movf	matrix_Main@data,w
 17724  165C  0086               	movwf	6
 17725  165D  085C               	movf	matrix_Main@data+1,w
 17726  165E  0087               	movwf	7
 17727  165F  3159               	addfsr 1,25
 17728  1660  3001               	movlw	1
 17729  1661  0781               	addwf	1,f
 17730  1662  3141               	addfsr 1,1
 17731  1663  1803               	skipnc
 17732  1664  0A81               	incf	1,f
 17733                           
 17734                           ;matrix_task.c: 349: data->holdCountBA = 0;
 17735  1665  085B               	movf	matrix_Main@data,w
 17736  1666  0086               	movwf	6
 17737  1667  085C               	movf	matrix_Main@data+1,w
 17738  1668  0087               	movwf	7
 17739  1669  315B               	addfsr 1,27
 17740  166A  3000               	movlw	0
 17741  166B  3FC0               	movwi [0]fsr1
 17742  166C  3FC1               	movwi [1]fsr1
 17743                           
 17744                           ;matrix_task.c: 350: data->noholdCount = 0;
 17745  166D  085B               	movf	matrix_Main@data,w
 17746  166E  0086               	movwf	6
 17747  166F  085C               	movf	matrix_Main@data+1,w
 17748  1670  0087               	movwf	7
 17749  1671  315D               	addfsr 1,29
 17750  1672  3000               	movlw	0
 17751  1673  3FC0               	movwi [0]fsr1
 17752  1674  3FC1               	movwi [1]fsr1
 17753                           
 17754                           ;matrix_task.c: 351: data->displayTickdown = 300;
 17755  1675  085B               	movf	matrix_Main@data,w
 17756  1676  0086               	movwf	6
 17757  1677  085C               	movf	matrix_Main@data+1,w
 17758  1678  0087               	movwf	7
 17759  1679  3147               	addfsr 1,7
 17760  167A  302C               	movlw	44
 17761  167B  3FC0               	movwi [0]fsr1
 17762  167C  3001               	movlw	1
 17763  167D  3FC1               	movwi [1]fsr1
 17764                           
 17765                           ;matrix_task.c: 353: break;
 17766  167E  2FB6               	goto	l10147
 17767  167F                     l10083:	
 17768                           ;matrix_task.c: 354: case 2 | 1:
 17769                           
 17770                           
 17771                           ;matrix_task.c: 356: if (data->holdCountBA == holdvalue){
 17772  167F  085B               	movf	matrix_Main@data,w
 17773  1680  0086               	movwf	6
 17774  1681  085C               	movf	matrix_Main@data+1,w
 17775  1682  0087               	movwf	7
 17776  1683  315B               	addfsr 1,27
 17777  1684  3F40               	moviw [0]fsr1
 17778  1685  00D4               	movwf	??_matrix_Main
 17779  1686  3F41               	moviw [1]fsr1
 17780  1687  00D5               	movwf	??_matrix_Main+1
 17781  1688  085A               	movf	matrix_Main@holdvalue,w
 17782  1689  00D6               	movwf	??_matrix_Main+2
 17783  168A  01D7               	clrf	??_matrix_Main+3
 17784  168B  0855               	movf	??_matrix_Main+1,w
 17785  168C  0657               	xorwf	??_matrix_Main+3,w
 17786  168D  1D03               	skipz
 17787  168E  2E91               	goto	u6285
 17788  168F  0854               	movf	??_matrix_Main,w
 17789  1690  0656               	xorwf	??_matrix_Main+2,w
 17790  1691                     u6285:	
 17791  1691  1D03               	skipz
 17792  1692  2EAE               	goto	l10089
 17793                           
 17794                           ;matrix_task.c: 357: matrix_found = matrix_secret_check(data, 2 | 1);
 17795  1693  085C               	movf	matrix_Main@data+1,w
 17796  1694  00F8               	movwf	matrix_secret_check@data+1
 17797  1695  085B               	movf	matrix_Main@data,w
 17798  1696  00F7               	movwf	matrix_secret_check@data
 17799  1697  3003               	movlw	3
 17800  1698  00D4               	movwf	??_matrix_Main
 17801  1699  0854               	movf	??_matrix_Main,w
 17802  169A  00F9               	movwf	matrix_secret_check@buttonPressed
 17803  169B  31A4  2488  3190   	fcall	_matrix_secret_check
 17804  169E  0020               	movlb	0	; select bank0
 17805  169F  00D5               	movwf	??_matrix_Main+1
 17806  16A0  0855               	movf	??_matrix_Main+1,w
 17807  16A1  00D8               	movwf	matrix_Main@matrix_found
 17808                           
 17809                           ;matrix_task.c: 358: data->display_state = MATRIX_BA;
 17810  16A2  085B               	movf	matrix_Main@data,w
 17811  16A3  3E02               	addlw	2
 17812  16A4  00D4               	movwf	??_matrix_Main
 17813  16A5  3000               	movlw	0
 17814  16A6  3D5C               	addwfc	matrix_Main@data+1,w
 17815  16A7  00D5               	movwf	??_matrix_Main+1
 17816  16A8  0854               	movf	??_matrix_Main,w
 17817  16A9  0086               	movwf	6
 17818  16AA  0855               	movf	??_matrix_Main+1,w
 17819  16AB  0087               	movwf	7
 17820  16AC  3006               	movlw	6
 17821  16AD  0081               	movwf	1
 17822  16AE                     l10089:	
 17823                           
 17824                           ;matrix_task.c: 359: }
 17825                           ;matrix_task.c: 360: data->holdCountA = 0;
 17826  16AE  085B               	movf	matrix_Main@data,w
 17827  16AF  0086               	movwf	6
 17828  16B0  085C               	movf	matrix_Main@data+1,w
 17829  16B1  0087               	movwf	7
 17830  16B2  3149               	addfsr 1,9
 17831  16B3  3000               	movlw	0
 17832  16B4  3FC0               	movwi [0]fsr1
 17833  16B5  3FC1               	movwi [1]fsr1
 17834                           
 17835                           ;matrix_task.c: 361: data->holdCountB = 0;
 17836  16B6  085B               	movf	matrix_Main@data,w
 17837  16B7  0086               	movwf	6
 17838  16B8  085C               	movf	matrix_Main@data+1,w
 17839  16B9  0087               	movwf	7
 17840  16BA  314B               	addfsr 1,11
 17841  16BB  3000               	movlw	0
 17842  16BC  3FC0               	movwi [0]fsr1
 17843  16BD  3FC1               	movwi [1]fsr1
 17844                           
 17845                           ;matrix_task.c: 362: data->holdCountX = 0;
 17846  16BE  085B               	movf	matrix_Main@data,w
 17847  16BF  0086               	movwf	6
 17848  16C0  085C               	movf	matrix_Main@data+1,w
 17849  16C1  0087               	movwf	7
 17850  16C2  314D               	addfsr 1,13
 17851  16C3  3000               	movlw	0
 17852  16C4  3FC0               	movwi [0]fsr1
 17853  16C5  3FC1               	movwi [1]fsr1
 17854                           
 17855                           ;matrix_task.c: 363: data->holdCountY = 0;
 17856  16C6  085B               	movf	matrix_Main@data,w
 17857  16C7  0086               	movwf	6
 17858  16C8  085C               	movf	matrix_Main@data+1,w
 17859  16C9  0087               	movwf	7
 17860  16CA  314F               	addfsr 1,15
 17861  16CB  3000               	movlw	0
 17862  16CC  3FC0               	movwi [0]fsr1
 17863  16CD  3FC1               	movwi [1]fsr1
 17864                           
 17865                           ;matrix_task.c: 364: data->holdCountXY = 0;
 17866  16CE  085B               	movf	matrix_Main@data,w
 17867  16CF  0086               	movwf	6
 17868  16D0  085C               	movf	matrix_Main@data+1,w
 17869  16D1  0087               	movwf	7
 17870  16D2  3151               	addfsr 1,17
 17871  16D3  3000               	movlw	0
 17872  16D4  3FC0               	movwi [0]fsr1
 17873  16D5  3FC1               	movwi [1]fsr1
 17874                           
 17875                           ;matrix_task.c: 365: data->holdCountAY = 0;
 17876  16D6  085B               	movf	matrix_Main@data,w
 17877  16D7  0086               	movwf	6
 17878  16D8  085C               	movf	matrix_Main@data+1,w
 17879  16D9  0087               	movwf	7
 17880  16DA  3153               	addfsr 1,19
 17881  16DB  3000               	movlw	0
 17882  16DC  3FC0               	movwi [0]fsr1
 17883  16DD  3FC1               	movwi [1]fsr1
 17884                           
 17885                           ;matrix_task.c: 366: data->holdCountAX = 0;
 17886  16DE  085B               	movf	matrix_Main@data,w
 17887  16DF  0086               	movwf	6
 17888  16E0  085C               	movf	matrix_Main@data+1,w
 17889  16E1  0087               	movwf	7
 17890  16E2  3155               	addfsr 1,21
 17891  16E3  3000               	movlw	0
 17892  16E4  3FC0               	movwi [0]fsr1
 17893  16E5  3FC1               	movwi [1]fsr1
 17894                           
 17895                           ;matrix_task.c: 367: data->holdCountBX = 0;
 17896  16E6  085B               	movf	matrix_Main@data,w
 17897  16E7  0086               	movwf	6
 17898  16E8  085C               	movf	matrix_Main@data+1,w
 17899  16E9  0087               	movwf	7
 17900  16EA  3157               	addfsr 1,23
 17901  16EB  3000               	movlw	0
 17902  16EC  3FC0               	movwi [0]fsr1
 17903  16ED  3FC1               	movwi [1]fsr1
 17904                           
 17905                           ;matrix_task.c: 368: data->holdCountBY = 0;
 17906  16EE  085B               	movf	matrix_Main@data,w
 17907  16EF  0086               	movwf	6
 17908  16F0  085C               	movf	matrix_Main@data+1,w
 17909  16F1  0087               	movwf	7
 17910  16F2  3159               	addfsr 1,25
 17911  16F3  3000               	movlw	0
 17912  16F4  3FC0               	movwi [0]fsr1
 17913  16F5  3FC1               	movwi [1]fsr1
 17914                           
 17915                           ;matrix_task.c: 369: data->holdCountBA += 1;
 17916  16F6  085B               	movf	matrix_Main@data,w
 17917  16F7  0086               	movwf	6
 17918  16F8  085C               	movf	matrix_Main@data+1,w
 17919  16F9  0087               	movwf	7
 17920  16FA  315B               	addfsr 1,27
 17921  16FB  3001               	movlw	1
 17922  16FC  0781               	addwf	1,f
 17923  16FD  3141               	addfsr 1,1
 17924  16FE  1803               	skipnc
 17925  16FF  0A81               	incf	1,f
 17926                           
 17927                           ;matrix_task.c: 370: data->noholdCount = 0;
 17928  1700  085B               	movf	matrix_Main@data,w
 17929  1701  0086               	movwf	6
 17930  1702  085C               	movf	matrix_Main@data+1,w
 17931  1703  0087               	movwf	7
 17932  1704  315D               	addfsr 1,29
 17933  1705  3000               	movlw	0
 17934  1706  3FC0               	movwi [0]fsr1
 17935  1707  3FC1               	movwi [1]fsr1
 17936                           
 17937                           ;matrix_task.c: 371: data->displayTickdown = 300;
 17938  1708  085B               	movf	matrix_Main@data,w
 17939  1709  0086               	movwf	6
 17940  170A  085C               	movf	matrix_Main@data+1,w
 17941  170B  0087               	movwf	7
 17942  170C  3147               	addfsr 1,7
 17943  170D  302C               	movlw	44
 17944  170E  3FC0               	movwi [0]fsr1
 17945  170F  3001               	movlw	1
 17946  1710  3FC1               	movwi [1]fsr1
 17947                           
 17948                           ;matrix_task.c: 372: break;
 17949  1711  2FB6               	goto	l10147
 17950  1712                     l10113:	
 17951                           ;matrix_task.c: 373: default:
 17952                           
 17953                           
 17954                           ;matrix_task.c: 374: data->noholdCount += 1;
 17955  1712  085B               	movf	matrix_Main@data,w
 17956  1713  0086               	movwf	6
 17957  1714  085C               	movf	matrix_Main@data+1,w
 17958  1715  0087               	movwf	7
 17959  1716  315D               	addfsr 1,29
 17960  1717  3001               	movlw	1
 17961  1718  0781               	addwf	1,f
 17962  1719  3141               	addfsr 1,1
 17963  171A  1803               	skipnc
 17964  171B  0A81               	incf	1,f
 17965                           
 17966                           ;matrix_task.c: 375: data->holdCountA = 0;
 17967  171C  085B               	movf	matrix_Main@data,w
 17968  171D  0086               	movwf	6
 17969  171E  085C               	movf	matrix_Main@data+1,w
 17970  171F  0087               	movwf	7
 17971  1720  3149               	addfsr 1,9
 17972  1721  3000               	movlw	0
 17973  1722  3FC0               	movwi [0]fsr1
 17974  1723  3FC1               	movwi [1]fsr1
 17975                           
 17976                           ;matrix_task.c: 376: data->holdCountB = 0;
 17977  1724  085B               	movf	matrix_Main@data,w
 17978  1725  0086               	movwf	6
 17979  1726  085C               	movf	matrix_Main@data+1,w
 17980  1727  0087               	movwf	7
 17981  1728  314B               	addfsr 1,11
 17982  1729  3000               	movlw	0
 17983  172A  3FC0               	movwi [0]fsr1
 17984  172B  3FC1               	movwi [1]fsr1
 17985                           
 17986                           ;matrix_task.c: 377: data->holdCountX = 0;
 17987  172C  085B               	movf	matrix_Main@data,w
 17988  172D  0086               	movwf	6
 17989  172E  085C               	movf	matrix_Main@data+1,w
 17990  172F  0087               	movwf	7
 17991  1730  314D               	addfsr 1,13
 17992  1731  3000               	movlw	0
 17993  1732  3FC0               	movwi [0]fsr1
 17994  1733  3FC1               	movwi [1]fsr1
 17995                           
 17996                           ;matrix_task.c: 378: data->holdCountY = 0;
 17997  1734  085B               	movf	matrix_Main@data,w
 17998  1735  0086               	movwf	6
 17999  1736  085C               	movf	matrix_Main@data+1,w
 18000  1737  0087               	movwf	7
 18001  1738  314F               	addfsr 1,15
 18002  1739  3000               	movlw	0
 18003  173A  3FC0               	movwi [0]fsr1
 18004  173B  3FC1               	movwi [1]fsr1
 18005                           
 18006                           ;matrix_task.c: 379: data->holdCountXY = 0;
 18007  173C  085B               	movf	matrix_Main@data,w
 18008  173D  0086               	movwf	6
 18009  173E  085C               	movf	matrix_Main@data+1,w
 18010  173F  0087               	movwf	7
 18011  1740  3151               	addfsr 1,17
 18012  1741  3000               	movlw	0
 18013  1742  3FC0               	movwi [0]fsr1
 18014  1743  3FC1               	movwi [1]fsr1
 18015                           
 18016                           ;matrix_task.c: 380: data->holdCountAY = 0;
 18017  1744  085B               	movf	matrix_Main@data,w
 18018  1745  0086               	movwf	6
 18019  1746  085C               	movf	matrix_Main@data+1,w
 18020  1747  0087               	movwf	7
 18021  1748  3153               	addfsr 1,19
 18022  1749  3000               	movlw	0
 18023  174A  3FC0               	movwi [0]fsr1
 18024  174B  3FC1               	movwi [1]fsr1
 18025                           
 18026                           ;matrix_task.c: 381: data->holdCountAX = 0;
 18027  174C  085B               	movf	matrix_Main@data,w
 18028  174D  0086               	movwf	6
 18029  174E  085C               	movf	matrix_Main@data+1,w
 18030  174F  0087               	movwf	7
 18031  1750  3155               	addfsr 1,21
 18032  1751  3000               	movlw	0
 18033  1752  3FC0               	movwi [0]fsr1
 18034  1753  3FC1               	movwi [1]fsr1
 18035                           
 18036                           ;matrix_task.c: 382: data->holdCountBX = 0;
 18037  1754  085B               	movf	matrix_Main@data,w
 18038  1755  0086               	movwf	6
 18039  1756  085C               	movf	matrix_Main@data+1,w
 18040  1757  0087               	movwf	7
 18041  1758  3157               	addfsr 1,23
 18042  1759  3000               	movlw	0
 18043  175A  3FC0               	movwi [0]fsr1
 18044  175B  3FC1               	movwi [1]fsr1
 18045                           
 18046                           ;matrix_task.c: 383: data->holdCountBY = 0;
 18047  175C  085B               	movf	matrix_Main@data,w
 18048  175D  0086               	movwf	6
 18049  175E  085C               	movf	matrix_Main@data+1,w
 18050  175F  0087               	movwf	7
 18051  1760  3159               	addfsr 1,25
 18052  1761  3000               	movlw	0
 18053  1762  3FC0               	movwi [0]fsr1
 18054  1763  3FC1               	movwi [1]fsr1
 18055                           
 18056                           ;matrix_task.c: 384: data->holdCountBA = 0;
 18057  1764  085B               	movf	matrix_Main@data,w
 18058  1765  0086               	movwf	6
 18059  1766  085C               	movf	matrix_Main@data+1,w
 18060  1767  0087               	movwf	7
 18061  1768  315B               	addfsr 1,27
 18062  1769  3000               	movlw	0
 18063  176A  3FC0               	movwi [0]fsr1
 18064  176B  3FC1               	movwi [1]fsr1
 18065                           
 18066                           ;matrix_task.c: 385: if (matrix_found){
 18067  176C  0858               	movf	matrix_Main@matrix_found,w
 18068  176D  1903               	btfsc	3,2
 18069  176E  2F82               	goto	l10141
 18070                           
 18071                           ;matrix_task.c: 386: data->display_state = MATRIX_DONE;
 18072  176F  085B               	movf	matrix_Main@data,w
 18073  1770  3E02               	addlw	2
 18074  1771  00D4               	movwf	??_matrix_Main
 18075  1772  3000               	movlw	0
 18076  1773  3D5C               	addwfc	matrix_Main@data+1,w
 18077  1774  00D5               	movwf	??_matrix_Main+1
 18078  1775  0854               	movf	??_matrix_Main,w
 18079  1776  0086               	movwf	6
 18080  1777  0855               	movf	??_matrix_Main+1,w
 18081  1778  0087               	movwf	7
 18082  1779  300B               	movlw	11
 18083  177A  0081               	movwf	1
 18084                           
 18085                           ;matrix_task.c: 387: data->martix_state = MATRIX_SOLVED;
 18086  177B  085B               	movf	matrix_Main@data,w
 18087  177C  0086               	movwf	6
 18088  177D  085C               	movf	matrix_Main@data+1,w
 18089  177E  0087               	movwf	7
 18090  177F  3141               	addfsr 1,1
 18091  1780  0181               	clrf	1
 18092                           
 18093                           ;matrix_task.c: 388: break;
 18094  1781  2FB6               	goto	l10147
 18095  1782                     l10141:	
 18096                           
 18097                           ;matrix_task.c: 389: }
 18098                           ;matrix_task.c: 390: data->displayTickdown -= 1;
 18099  1782  085B               	movf	matrix_Main@data,w
 18100  1783  0086               	movwf	6
 18101  1784  085C               	movf	matrix_Main@data+1,w
 18102  1785  0087               	movwf	7
 18103  1786  3147               	addfsr 1,7
 18104  1787  3001               	movlw	1
 18105  1788  0281               	subwf	1,f
 18106  1789  3141               	addfsr 1,1
 18107  178A  3000               	movlw	0
 18108  178B  3B81               	subwfb	1,f
 18109  178C  317F               	addfsr 1,-1
 18110                           
 18111                           ;matrix_task.c: 391: matrix_display_option(data);
 18112  178D  085C               	movf	matrix_Main@data+1,w
 18113  178E  00CD               	movwf	matrix_display_option@data+1
 18114  178F  085B               	movf	matrix_Main@data,w
 18115  1790  00CC               	movwf	matrix_display_option@data
 18116  1791  31A3  23E5  3190   	fcall	_matrix_display_option
 18117                           
 18118                           ;matrix_task.c: 392: }
 18119  1794  2FB6               	goto	l10147
 18120  1795                     l10145:	
 18121  1795  0020               	movlb	0	; select bank0
 18122  1796  0859               	movf	matrix_Main@buttonPressed,w
 18123                           
 18124                           ; Switch size 1, requested type "space"
 18125                           ; Number of cases is 10, Range of values is 1 to 12
 18126                           ; switch strategies available:
 18127                           ; Name         Instructions Cycles
 18128                           ; simple_byte           31    16 (average)
 18129                           ; direct_byte           33     9 (fixed)
 18130                           ; jumptable            263     9 (fixed)
 18131                           ;	Chosen strategy is simple_byte
 18132  1797  3A01               	xorlw	1	; case 1
 18133  1798  1903               	skipnz
 18134  1799  295A               	goto	l9813
 18135  179A  3A03               	xorlw	3	; case 2
 18136  179B  1903               	skipnz
 18137  179C  29E7               	goto	l9843
 18138  179D  3A01               	xorlw	1	; case 3
 18139  179E  1903               	skipnz
 18140  179F  2E7F               	goto	l10083
 18141  17A0  3A07               	xorlw	7	; case 4
 18142  17A1  1903               	skipnz
 18143  17A2  2A7A               	goto	l9873
 18144  17A3  3A01               	xorlw	1	; case 5
 18145  17A4  1903               	skipnz
 18146  17A5  2CC6               	goto	l9993
 18147  17A6  3A03               	xorlw	3	; case 6
 18148  17A7  1903               	skipnz
 18149  17A8  2D59               	goto	l10023
 18150  17A9  3A0E               	xorlw	14	; case 8
 18151  17AA  1903               	skipnz
 18152  17AB  2B0D               	goto	l9903
 18153  17AC  3A01               	xorlw	1	; case 9
 18154  17AD  1903               	skipnz
 18155  17AE  2C33               	goto	l9963
 18156  17AF  3A03               	xorlw	3	; case 10
 18157  17B0  1903               	skipnz
 18158  17B1  2DEC               	goto	l10053
 18159  17B2  3A06               	xorlw	6	; case 12
 18160  17B3  1903               	skipnz
 18161  17B4  2BA0               	goto	l9933
 18162  17B5  2F12               	goto	l10113
 18163  17B6                     l10147:	
 18164                           
 18165                           ;matrix_task.c: 393: if (matrix_found){
 18166  17B6  0020               	movlb	0	; select bank0
 18167  17B7  0858               	movf	matrix_Main@matrix_found,w
 18168  17B8  1903               	btfsc	3,2
 18169  17B9  2FCC               	goto	l10153
 18170                           
 18171                           ;matrix_task.c: 394: data->display_state = MATRIX_DONE;
 18172  17BA  085B               	movf	matrix_Main@data,w
 18173  17BB  3E02               	addlw	2
 18174  17BC  00D4               	movwf	??_matrix_Main
 18175  17BD  3000               	movlw	0
 18176  17BE  3D5C               	addwfc	matrix_Main@data+1,w
 18177  17BF  00D5               	movwf	??_matrix_Main+1
 18178  17C0  0854               	movf	??_matrix_Main,w
 18179  17C1  0086               	movwf	6
 18180  17C2  0855               	movf	??_matrix_Main+1,w
 18181  17C3  0087               	movwf	7
 18182  17C4  300B               	movlw	11
 18183  17C5  0081               	movwf	1
 18184                           
 18185                           ;matrix_task.c: 395: data->martix_state = MATRIX_SOLVED;
 18186  17C6  085B               	movf	matrix_Main@data,w
 18187  17C7  0086               	movwf	6
 18188  17C8  085C               	movf	matrix_Main@data+1,w
 18189  17C9  0087               	movwf	7
 18190  17CA  3141               	addfsr 1,1
 18191  17CB  0181               	clrf	1
 18192  17CC                     l10153:	
 18193                           
 18194                           ;matrix_task.c: 396: }
 18195                           ;matrix_task.c: 398: if(data->display_state == MATRIX_DONE){
 18196  17CC  085B               	movf	matrix_Main@data,w
 18197  17CD  0086               	movwf	6
 18198  17CE  085C               	movf	matrix_Main@data+1,w
 18199  17CF  0087               	movwf	7
 18200  17D0  3142               	addfsr 1,2
 18201  17D1  300B               	movlw	11
 18202  17D2  0601               	xorwf	1,w
 18203  17D3  1D03               	btfss	3,2
 18204  17D4  0008               	return
 18205                           
 18206                           ;matrix_task.c: 400: if (data->delayTickCount < 1){
 18207  17D5  085B               	movf	matrix_Main@data,w
 18208  17D6  0086               	movwf	6
 18209  17D7  085C               	movf	matrix_Main@data+1,w
 18210  17D8  0087               	movwf	7
 18211  17D9  3143               	addfsr 1,3
 18212  17DA  0016               	moviw fsr1++
 18213  17DB  0401               	iorwf	1,w
 18214  17DC  1D03               	btfss	3,2
 18215  17DD  2FF4               	goto	l10161
 18216                           
 18217                           ;matrix_task.c: 401: led_curtain(data->noholdCount);
 18218  17DE  085B               	movf	matrix_Main@data,w
 18219  17DF  0086               	movwf	6
 18220  17E0  085C               	movf	matrix_Main@data+1,w
 18221  17E1  0087               	movwf	7
 18222  17E2  315D               	addfsr 1,29
 18223  17E3  3F40               	moviw [0]fsr1
 18224  17E4  00B0               	movwf	led_curtain@counter
 18225  17E5  3F41               	moviw [1]fsr1
 18226  17E6  00B1               	movwf	led_curtain@counter+1
 18227  17E7  31AA  2274         	fcall	_led_curtain
 18228                           
 18229                           ;matrix_task.c: 402: data->delayTickCount = 20;
 18230  17E9  0020               	movlb	0	; select bank0
 18231  17EA  085B               	movf	matrix_Main@data,w
 18232  17EB  0086               	movwf	6
 18233  17EC  085C               	movf	matrix_Main@data+1,w
 18234  17ED  0087               	movwf	7
 18235  17EE  3143               	addfsr 1,3
 18236  17EF  3014               	movlw	20
 18237  17F0  3FC0               	movwi [0]fsr1
 18238  17F1  3000               	movlw	0
 18239  17F2  3FC1               	movwi [1]fsr1
 18240                           
 18241                           ;matrix_task.c: 403: }
 18242  17F3  0008               	return
 18243  17F4                     l10161:	
 18244                           
 18245                           ;matrix_task.c: 404: else {
 18246                           ;matrix_task.c: 405: data->delayTickCount -= 1;
 18247  17F4  085B               	movf	matrix_Main@data,w
 18248  17F5  0086               	movwf	6
 18249  17F6  085C               	movf	matrix_Main@data+1,w
 18250  17F7  0087               	movwf	7
 18251  17F8  3143               	addfsr 1,3
 18252  17F9  3001               	movlw	1
 18253  17FA  0281               	subwf	1,f
 18254  17FB  3141               	addfsr 1,1
 18255  17FC  3000               	movlw	0
 18256  17FD  3B81               	subwfb	1,f
 18257  17FE  317F               	addfsr 1,-1
 18258  17FF  0008               	return
 18259  1800                     __end_of_matrix_Main:	
 18260                           
 18261                           	psect	text15
 18262  2643                     __ptext15:	
 18263 ;; *************** function _secret_Main *****************
 18264 ;; Defined at:
 18265 ;;		line 99 in file "secret_task.c"
 18266 ;; Parameters:    Size  Location     Type
 18267 ;;  taskData        2   50[BANK0 ] PTR void 
 18268 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 18269 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 18270 ;; Auto vars:     Size  Location     Type
 18271 ;;  data            2   56[BANK0 ] PTR struct t_secret_task
 18272 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 18273 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 18274 ;;  buttonPresse    1   55[BANK0 ] unsigned char 
 18275 ;;  secret_found    1   54[BANK0 ] unsigned char 
 18276 ;; Return value:  Size  Location     Type
 18277 ;;                  1    wreg      void 
 18278 ;; Registers used:
 18279 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18280 ;; Tracked objects:
 18281 ;;		On entry : 0/0
 18282 ;;		On exit  : 0/0
 18283 ;;		Unchanged: 0/0
 18284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18285 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18286 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18287 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18288 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18289 ;;Total ram usage:        8 bytes
 18290 ;; Hardware stack levels used:    1
 18291 ;; Hardware stack levels required when called:    6
 18292 ;; This function calls:
 18293 ;;		_nullifyBadge_buttonsGet
 18294 ;;		_secret_check
 18295 ;;		_secret_clear
 18296 ;; This function is called by:
 18297 ;;		_main
 18298 ;;		_scheduler_TaskRun
 18299 ;; This function uses a non-reentrant model
 18300 ;;
 18301                           
 18302                           
 18303                           ;psect for function _secret_Main
 18304  2643                     _secret_Main:	
 18305                           
 18306                           ;secret_task.c: 100: struct t_secret_taskData *data = (struct t_secret_taskData *) taskD
      +                          ata;
 18307                           
 18308                           ;incstack = 0
 18309                           ; Regs used in _secret_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18310  2643  0020               	movlb	0	; select bank0
 18311  2644  0853               	movf	secret_Main@taskData+1,w
 18312  2645  00D9               	movwf	secret_Main@data+1
 18313  2646  0852               	movf	secret_Main@taskData,w
 18314  2647  00D8               	movwf	secret_Main@data
 18315                           
 18316                           ;secret_task.c: 101: u8 buttonPressed, secret_found = 0;
 18317  2648  01D6               	clrf	secret_Main@secret_found
 18318                           
 18319                           ;secret_task.c: 103: buttonPressed = nullifyBadge_buttonsGet();
 18320  2649  31A8  2082  31A6   	fcall	_nullifyBadge_buttonsGet
 18321  264C  0020               	movlb	0	; select bank0
 18322  264D  00D4               	movwf	??_secret_Main
 18323  264E  0854               	movf	??_secret_Main,w
 18324  264F  00D7               	movwf	secret_Main@buttonPressed
 18325                           
 18326                           ;secret_task.c: 104: switch (buttonPressed) {
 18327  2650  2FE3               	goto	l9675
 18328  2651                     l9589:	
 18329                           ;secret_task.c: 105: case 0:
 18330                           
 18331                           
 18332                           ;secret_task.c: 107: if (data->delayTickCount == 0){
 18333  2651  0858               	movf	secret_Main@data,w
 18334  2652  0086               	movwf	6
 18335  2653  0859               	movf	secret_Main@data+1,w
 18336  2654  0087               	movwf	7
 18337  2655  3142               	addfsr 1,2
 18338  2656  0016               	moviw fsr1++
 18339  2657  0401               	iorwf	1,w
 18340  2658  1D03               	btfss	3,2
 18341  2659  2E6B               	goto	l9595
 18342                           
 18343                           ;secret_task.c: 108: data->delayTickCount = 300;
 18344  265A  0858               	movf	secret_Main@data,w
 18345  265B  0086               	movwf	6
 18346  265C  0859               	movf	secret_Main@data+1,w
 18347  265D  0087               	movwf	7
 18348  265E  3142               	addfsr 1,2
 18349  265F  302C               	movlw	44
 18350  2660  3FC0               	movwi [0]fsr1
 18351  2661  3001               	movlw	1
 18352  2662  3FC1               	movwi [1]fsr1
 18353                           
 18354                           ;secret_task.c: 109: secret_check(data, 0);
 18355  2663  0859               	movf	secret_Main@data+1,w
 18356  2664  00F8               	movwf	secret_check@data+1
 18357  2665  0858               	movf	secret_Main@data,w
 18358  2666  00F7               	movwf	secret_check@data
 18359  2667  01F9               	clrf	secret_check@buttonPressed
 18360  2668  3190  2028  31A6   	fcall	_secret_check
 18361  266B                     l9595:	
 18362                           
 18363                           ;secret_task.c: 110: }
 18364                           ;secret_task.c: 111: data->holdCountA = 0;
 18365  266B  0020               	movlb	0	; select bank0
 18366  266C  0858               	movf	secret_Main@data,w
 18367  266D  0086               	movwf	6
 18368  266E  0859               	movf	secret_Main@data+1,w
 18369  266F  0087               	movwf	7
 18370  2670  3144               	addfsr 1,4
 18371  2671  3000               	movlw	0
 18372  2672  3FC0               	movwi [0]fsr1
 18373  2673  3FC1               	movwi [1]fsr1
 18374                           
 18375                           ;secret_task.c: 112: data->holdCountB = 0;
 18376  2674  0858               	movf	secret_Main@data,w
 18377  2675  0086               	movwf	6
 18378  2676  0859               	movf	secret_Main@data+1,w
 18379  2677  0087               	movwf	7
 18380  2678  3146               	addfsr 1,6
 18381  2679  3000               	movlw	0
 18382  267A  3FC0               	movwi [0]fsr1
 18383  267B  3FC1               	movwi [1]fsr1
 18384                           
 18385                           ;secret_task.c: 113: data->holdCountX = 0;
 18386  267C  0858               	movf	secret_Main@data,w
 18387  267D  0086               	movwf	6
 18388  267E  0859               	movf	secret_Main@data+1,w
 18389  267F  0087               	movwf	7
 18390  2680  3148               	addfsr 1,8
 18391  2681  3000               	movlw	0
 18392  2682  3FC0               	movwi [0]fsr1
 18393  2683  3FC1               	movwi [1]fsr1
 18394                           
 18395                           ;secret_task.c: 114: data->holdCountY = 0;
 18396  2684  0858               	movf	secret_Main@data,w
 18397  2685  0086               	movwf	6
 18398  2686  0859               	movf	secret_Main@data+1,w
 18399  2687  0087               	movwf	7
 18400  2688  314A               	addfsr 1,10
 18401  2689  3000               	movlw	0
 18402  268A  3FC0               	movwi [0]fsr1
 18403  268B  3FC1               	movwi [1]fsr1
 18404                           
 18405                           ;secret_task.c: 115: data->noholdCount += 1;
 18406  268C  0858               	movf	secret_Main@data,w
 18407  268D  0086               	movwf	6
 18408  268E  0859               	movf	secret_Main@data+1,w
 18409  268F  0087               	movwf	7
 18410  2690  314C               	addfsr 1,12
 18411  2691  3001               	movlw	1
 18412  2692  0781               	addwf	1,f
 18413  2693  3141               	addfsr 1,1
 18414  2694  1803               	skipnc
 18415  2695  0A81               	incf	1,f
 18416                           
 18417                           ;secret_task.c: 116: data->delayTickCount -= 1;
 18418  2696  0858               	movf	secret_Main@data,w
 18419  2697  0086               	movwf	6
 18420  2698  0859               	movf	secret_Main@data+1,w
 18421  2699  0087               	movwf	7
 18422  269A  3142               	addfsr 1,2
 18423  269B  3001               	movlw	1
 18424  269C  0281               	subwf	1,f
 18425  269D  3141               	addfsr 1,1
 18426  269E  3000               	movlw	0
 18427  269F  3B81               	subwfb	1,f
 18428  26A0  317F               	addfsr 1,-1
 18429                           
 18430                           ;secret_task.c: 117: break;
 18431  26A1  2FF5               	goto	l9677
 18432  26A2                     l9607:	
 18433                           ;secret_task.c: 118: case 1:
 18434                           
 18435                           
 18436                           ;secret_task.c: 120: if (data->holdCountA == 0){
 18437  26A2  0858               	movf	secret_Main@data,w
 18438  26A3  0086               	movwf	6
 18439  26A4  0859               	movf	secret_Main@data+1,w
 18440  26A5  0087               	movwf	7
 18441  26A6  3144               	addfsr 1,4
 18442  26A7  0016               	moviw fsr1++
 18443  26A8  0401               	iorwf	1,w
 18444  26A9  1D03               	btfss	3,2
 18445  26AA  2EBA               	goto	l9611
 18446                           
 18447                           ;secret_task.c: 121: secret_found = secret_check(data, buttonPressed);
 18448  26AB  0859               	movf	secret_Main@data+1,w
 18449  26AC  00F8               	movwf	secret_check@data+1
 18450  26AD  0858               	movf	secret_Main@data,w
 18451  26AE  00F7               	movwf	secret_check@data
 18452  26AF  0857               	movf	secret_Main@buttonPressed,w
 18453  26B0  00D4               	movwf	??_secret_Main
 18454  26B1  0854               	movf	??_secret_Main,w
 18455  26B2  00F9               	movwf	secret_check@buttonPressed
 18456  26B3  3190  2028  31A6   	fcall	_secret_check
 18457  26B6  0020               	movlb	0	; select bank0
 18458  26B7  00D5               	movwf	??_secret_Main+1
 18459  26B8  0855               	movf	??_secret_Main+1,w
 18460  26B9  00D6               	movwf	secret_Main@secret_found
 18461  26BA                     l9611:	
 18462                           
 18463                           ;secret_task.c: 122: }
 18464                           ;secret_task.c: 123: data->holdCountA += 1;
 18465  26BA  0858               	movf	secret_Main@data,w
 18466  26BB  0086               	movwf	6
 18467  26BC  0859               	movf	secret_Main@data+1,w
 18468  26BD  0087               	movwf	7
 18469  26BE  3144               	addfsr 1,4
 18470  26BF  3001               	movlw	1
 18471  26C0  0781               	addwf	1,f
 18472  26C1  3141               	addfsr 1,1
 18473  26C2  1803               	skipnc
 18474  26C3  0A81               	incf	1,f
 18475                           
 18476                           ;secret_task.c: 124: data->holdCountB = 0;
 18477  26C4  0858               	movf	secret_Main@data,w
 18478  26C5  0086               	movwf	6
 18479  26C6  0859               	movf	secret_Main@data+1,w
 18480  26C7  0087               	movwf	7
 18481  26C8  3146               	addfsr 1,6
 18482  26C9  3000               	movlw	0
 18483  26CA  3FC0               	movwi [0]fsr1
 18484  26CB  3FC1               	movwi [1]fsr1
 18485                           
 18486                           ;secret_task.c: 125: data->holdCountX = 0;
 18487  26CC  0858               	movf	secret_Main@data,w
 18488  26CD  0086               	movwf	6
 18489  26CE  0859               	movf	secret_Main@data+1,w
 18490  26CF  0087               	movwf	7
 18491  26D0  3148               	addfsr 1,8
 18492  26D1  3000               	movlw	0
 18493  26D2  3FC0               	movwi [0]fsr1
 18494  26D3  3FC1               	movwi [1]fsr1
 18495                           
 18496                           ;secret_task.c: 126: data->holdCountY = 0;
 18497  26D4  0858               	movf	secret_Main@data,w
 18498  26D5  0086               	movwf	6
 18499  26D6  0859               	movf	secret_Main@data+1,w
 18500  26D7  0087               	movwf	7
 18501  26D8  314A               	addfsr 1,10
 18502  26D9  3000               	movlw	0
 18503  26DA  3FC0               	movwi [0]fsr1
 18504  26DB  3FC1               	movwi [1]fsr1
 18505                           
 18506                           ;secret_task.c: 127: data->noholdCount = 0;
 18507  26DC  0858               	movf	secret_Main@data,w
 18508  26DD  0086               	movwf	6
 18509  26DE  0859               	movf	secret_Main@data+1,w
 18510  26DF  0087               	movwf	7
 18511  26E0  314C               	addfsr 1,12
 18512  26E1  3000               	movlw	0
 18513  26E2  3FC0               	movwi [0]fsr1
 18514  26E3  3FC1               	movwi [1]fsr1
 18515                           
 18516                           ;secret_task.c: 128: data->delayTickCount = 300;
 18517  26E4  0858               	movf	secret_Main@data,w
 18518  26E5  0086               	movwf	6
 18519  26E6  0859               	movf	secret_Main@data+1,w
 18520  26E7  0087               	movwf	7
 18521  26E8  3142               	addfsr 1,2
 18522  26E9  302C               	movlw	44
 18523  26EA  3FC0               	movwi [0]fsr1
 18524  26EB  3001               	movlw	1
 18525  26EC  3FC1               	movwi [1]fsr1
 18526                           
 18527                           ;secret_task.c: 129: break;
 18528  26ED  2FF5               	goto	l9677
 18529  26EE                     l9623:	
 18530                           ;secret_task.c: 130: case 2:
 18531                           
 18532                           
 18533                           ;secret_task.c: 132: if (data->holdCountB == 0){
 18534  26EE  0858               	movf	secret_Main@data,w
 18535  26EF  0086               	movwf	6
 18536  26F0  0859               	movf	secret_Main@data+1,w
 18537  26F1  0087               	movwf	7
 18538  26F2  3146               	addfsr 1,6
 18539  26F3  0016               	moviw fsr1++
 18540  26F4  0401               	iorwf	1,w
 18541  26F5  1D03               	btfss	3,2
 18542  26F6  2F06               	goto	l9627
 18543                           
 18544                           ;secret_task.c: 133: secret_found = secret_check(data, buttonPressed);
 18545  26F7  0859               	movf	secret_Main@data+1,w
 18546  26F8  00F8               	movwf	secret_check@data+1
 18547  26F9  0858               	movf	secret_Main@data,w
 18548  26FA  00F7               	movwf	secret_check@data
 18549  26FB  0857               	movf	secret_Main@buttonPressed,w
 18550  26FC  00D4               	movwf	??_secret_Main
 18551  26FD  0854               	movf	??_secret_Main,w
 18552  26FE  00F9               	movwf	secret_check@buttonPressed
 18553  26FF  3190  2028  31A6   	fcall	_secret_check
 18554  2702  0020               	movlb	0	; select bank0
 18555  2703  00D5               	movwf	??_secret_Main+1
 18556  2704  0855               	movf	??_secret_Main+1,w
 18557  2705  00D6               	movwf	secret_Main@secret_found
 18558  2706                     l9627:	
 18559                           
 18560                           ;secret_task.c: 134: }
 18561                           ;secret_task.c: 135: data->holdCountA = 0;
 18562  2706  0858               	movf	secret_Main@data,w
 18563  2707  0086               	movwf	6
 18564  2708  0859               	movf	secret_Main@data+1,w
 18565  2709  0087               	movwf	7
 18566  270A  3144               	addfsr 1,4
 18567  270B  3000               	movlw	0
 18568  270C  3FC0               	movwi [0]fsr1
 18569  270D  3FC1               	movwi [1]fsr1
 18570                           
 18571                           ;secret_task.c: 136: data->holdCountB += 1;
 18572  270E  0858               	movf	secret_Main@data,w
 18573  270F  0086               	movwf	6
 18574  2710  0859               	movf	secret_Main@data+1,w
 18575  2711  0087               	movwf	7
 18576  2712  3146               	addfsr 1,6
 18577  2713  3001               	movlw	1
 18578  2714  0781               	addwf	1,f
 18579  2715  3141               	addfsr 1,1
 18580  2716  1803               	skipnc
 18581  2717  0A81               	incf	1,f
 18582                           
 18583                           ;secret_task.c: 137: data->holdCountX = 0;
 18584  2718  0858               	movf	secret_Main@data,w
 18585  2719  0086               	movwf	6
 18586  271A  0859               	movf	secret_Main@data+1,w
 18587  271B  0087               	movwf	7
 18588  271C  3148               	addfsr 1,8
 18589  271D  3000               	movlw	0
 18590  271E  3FC0               	movwi [0]fsr1
 18591  271F  3FC1               	movwi [1]fsr1
 18592                           
 18593                           ;secret_task.c: 138: data->holdCountY = 0;
 18594  2720  0858               	movf	secret_Main@data,w
 18595  2721  0086               	movwf	6
 18596  2722  0859               	movf	secret_Main@data+1,w
 18597  2723  0087               	movwf	7
 18598  2724  314A               	addfsr 1,10
 18599  2725  3000               	movlw	0
 18600  2726  3FC0               	movwi [0]fsr1
 18601  2727  3FC1               	movwi [1]fsr1
 18602                           
 18603                           ;secret_task.c: 139: data->noholdCount = 0;
 18604  2728  0858               	movf	secret_Main@data,w
 18605  2729  0086               	movwf	6
 18606  272A  0859               	movf	secret_Main@data+1,w
 18607  272B  0087               	movwf	7
 18608  272C  314C               	addfsr 1,12
 18609  272D  3000               	movlw	0
 18610  272E  3FC0               	movwi [0]fsr1
 18611  272F  3FC1               	movwi [1]fsr1
 18612                           
 18613                           ;secret_task.c: 140: data->delayTickCount = 300;
 18614  2730  0858               	movf	secret_Main@data,w
 18615  2731  0086               	movwf	6
 18616  2732  0859               	movf	secret_Main@data+1,w
 18617  2733  0087               	movwf	7
 18618  2734  3142               	addfsr 1,2
 18619  2735  302C               	movlw	44
 18620  2736  3FC0               	movwi [0]fsr1
 18621  2737  3001               	movlw	1
 18622  2738  3FC1               	movwi [1]fsr1
 18623                           
 18624                           ;secret_task.c: 141: break;
 18625  2739  2FF5               	goto	l9677
 18626  273A                     l9639:	
 18627                           ;secret_task.c: 142: case 4:
 18628                           
 18629                           
 18630                           ;secret_task.c: 144: if (data->holdCountX == 0){
 18631  273A  0858               	movf	secret_Main@data,w
 18632  273B  0086               	movwf	6
 18633  273C  0859               	movf	secret_Main@data+1,w
 18634  273D  0087               	movwf	7
 18635  273E  3148               	addfsr 1,8
 18636  273F  0016               	moviw fsr1++
 18637  2740  0401               	iorwf	1,w
 18638  2741  1D03               	btfss	3,2
 18639  2742  2F52               	goto	l9643
 18640                           
 18641                           ;secret_task.c: 145: secret_found = secret_check(data, buttonPressed);
 18642  2743  0859               	movf	secret_Main@data+1,w
 18643  2744  00F8               	movwf	secret_check@data+1
 18644  2745  0858               	movf	secret_Main@data,w
 18645  2746  00F7               	movwf	secret_check@data
 18646  2747  0857               	movf	secret_Main@buttonPressed,w
 18647  2748  00D4               	movwf	??_secret_Main
 18648  2749  0854               	movf	??_secret_Main,w
 18649  274A  00F9               	movwf	secret_check@buttonPressed
 18650  274B  3190  2028  31A6   	fcall	_secret_check
 18651  274E  0020               	movlb	0	; select bank0
 18652  274F  00D5               	movwf	??_secret_Main+1
 18653  2750  0855               	movf	??_secret_Main+1,w
 18654  2751  00D6               	movwf	secret_Main@secret_found
 18655  2752                     l9643:	
 18656                           
 18657                           ;secret_task.c: 146: }
 18658                           ;secret_task.c: 147: data->holdCountA = 0;
 18659  2752  0858               	movf	secret_Main@data,w
 18660  2753  0086               	movwf	6
 18661  2754  0859               	movf	secret_Main@data+1,w
 18662  2755  0087               	movwf	7
 18663  2756  3144               	addfsr 1,4
 18664  2757  3000               	movlw	0
 18665  2758  3FC0               	movwi [0]fsr1
 18666  2759  3FC1               	movwi [1]fsr1
 18667                           
 18668                           ;secret_task.c: 148: data->holdCountB = 0;
 18669  275A  0858               	movf	secret_Main@data,w
 18670  275B  0086               	movwf	6
 18671  275C  0859               	movf	secret_Main@data+1,w
 18672  275D  0087               	movwf	7
 18673  275E  3146               	addfsr 1,6
 18674  275F  3000               	movlw	0
 18675  2760  3FC0               	movwi [0]fsr1
 18676  2761  3FC1               	movwi [1]fsr1
 18677                           
 18678                           ;secret_task.c: 149: data->holdCountX += 1;
 18679  2762  0858               	movf	secret_Main@data,w
 18680  2763  0086               	movwf	6
 18681  2764  0859               	movf	secret_Main@data+1,w
 18682  2765  0087               	movwf	7
 18683  2766  3148               	addfsr 1,8
 18684  2767  3001               	movlw	1
 18685  2768  0781               	addwf	1,f
 18686  2769  3141               	addfsr 1,1
 18687  276A  1803               	skipnc
 18688  276B  0A81               	incf	1,f
 18689                           
 18690                           ;secret_task.c: 150: data->holdCountY = 0;
 18691  276C  0858               	movf	secret_Main@data,w
 18692  276D  0086               	movwf	6
 18693  276E  0859               	movf	secret_Main@data+1,w
 18694  276F  0087               	movwf	7
 18695  2770  314A               	addfsr 1,10
 18696  2771  3000               	movlw	0
 18697  2772  3FC0               	movwi [0]fsr1
 18698  2773  3FC1               	movwi [1]fsr1
 18699                           
 18700                           ;secret_task.c: 151: data->noholdCount = 0;
 18701  2774  0858               	movf	secret_Main@data,w
 18702  2775  0086               	movwf	6
 18703  2776  0859               	movf	secret_Main@data+1,w
 18704  2777  0087               	movwf	7
 18705  2778  314C               	addfsr 1,12
 18706  2779  3000               	movlw	0
 18707  277A  3FC0               	movwi [0]fsr1
 18708  277B  3FC1               	movwi [1]fsr1
 18709                           
 18710                           ;secret_task.c: 152: data->delayTickCount = 300;
 18711  277C  0858               	movf	secret_Main@data,w
 18712  277D  0086               	movwf	6
 18713  277E  0859               	movf	secret_Main@data+1,w
 18714  277F  0087               	movwf	7
 18715  2780  3142               	addfsr 1,2
 18716  2781  302C               	movlw	44
 18717  2782  3FC0               	movwi [0]fsr1
 18718  2783  3001               	movlw	1
 18719  2784  3FC1               	movwi [1]fsr1
 18720                           
 18721                           ;secret_task.c: 153: break;
 18722  2785  2FF5               	goto	l9677
 18723  2786                     l9655:	
 18724                           ;secret_task.c: 154: case 8:
 18725                           
 18726                           
 18727                           ;secret_task.c: 156: if (data->holdCountY == 0){
 18728  2786  0858               	movf	secret_Main@data,w
 18729  2787  0086               	movwf	6
 18730  2788  0859               	movf	secret_Main@data+1,w
 18731  2789  0087               	movwf	7
 18732  278A  314A               	addfsr 1,10
 18733  278B  0016               	moviw fsr1++
 18734  278C  0401               	iorwf	1,w
 18735  278D  1D03               	btfss	3,2
 18736  278E  2F9E               	goto	l9659
 18737                           
 18738                           ;secret_task.c: 157: secret_found = secret_check(data, buttonPressed);
 18739  278F  0859               	movf	secret_Main@data+1,w
 18740  2790  00F8               	movwf	secret_check@data+1
 18741  2791  0858               	movf	secret_Main@data,w
 18742  2792  00F7               	movwf	secret_check@data
 18743  2793  0857               	movf	secret_Main@buttonPressed,w
 18744  2794  00D4               	movwf	??_secret_Main
 18745  2795  0854               	movf	??_secret_Main,w
 18746  2796  00F9               	movwf	secret_check@buttonPressed
 18747  2797  3190  2028  31A6   	fcall	_secret_check
 18748  279A  0020               	movlb	0	; select bank0
 18749  279B  00D5               	movwf	??_secret_Main+1
 18750  279C  0855               	movf	??_secret_Main+1,w
 18751  279D  00D6               	movwf	secret_Main@secret_found
 18752  279E                     l9659:	
 18753                           
 18754                           ;secret_task.c: 158: }
 18755                           ;secret_task.c: 159: data->holdCountA = 0;
 18756  279E  0858               	movf	secret_Main@data,w
 18757  279F  0086               	movwf	6
 18758  27A0  0859               	movf	secret_Main@data+1,w
 18759  27A1  0087               	movwf	7
 18760  27A2  3144               	addfsr 1,4
 18761  27A3  3000               	movlw	0
 18762  27A4  3FC0               	movwi [0]fsr1
 18763  27A5  3FC1               	movwi [1]fsr1
 18764                           
 18765                           ;secret_task.c: 160: data->holdCountB = 0;
 18766  27A6  0858               	movf	secret_Main@data,w
 18767  27A7  0086               	movwf	6
 18768  27A8  0859               	movf	secret_Main@data+1,w
 18769  27A9  0087               	movwf	7
 18770  27AA  3146               	addfsr 1,6
 18771  27AB  3000               	movlw	0
 18772  27AC  3FC0               	movwi [0]fsr1
 18773  27AD  3FC1               	movwi [1]fsr1
 18774                           
 18775                           ;secret_task.c: 161: data->holdCountX = 0;
 18776  27AE  0858               	movf	secret_Main@data,w
 18777  27AF  0086               	movwf	6
 18778  27B0  0859               	movf	secret_Main@data+1,w
 18779  27B1  0087               	movwf	7
 18780  27B2  3148               	addfsr 1,8
 18781  27B3  3000               	movlw	0
 18782  27B4  3FC0               	movwi [0]fsr1
 18783  27B5  3FC1               	movwi [1]fsr1
 18784                           
 18785                           ;secret_task.c: 162: data->holdCountY += 1;
 18786  27B6  0858               	movf	secret_Main@data,w
 18787  27B7  0086               	movwf	6
 18788  27B8  0859               	movf	secret_Main@data+1,w
 18789  27B9  0087               	movwf	7
 18790  27BA  314A               	addfsr 1,10
 18791  27BB  3001               	movlw	1
 18792  27BC  0781               	addwf	1,f
 18793  27BD  3141               	addfsr 1,1
 18794  27BE  1803               	skipnc
 18795  27BF  0A81               	incf	1,f
 18796                           
 18797                           ;secret_task.c: 163: data->noholdCount = 0;
 18798  27C0  0858               	movf	secret_Main@data,w
 18799  27C1  0086               	movwf	6
 18800  27C2  0859               	movf	secret_Main@data+1,w
 18801  27C3  0087               	movwf	7
 18802  27C4  314C               	addfsr 1,12
 18803  27C5  3000               	movlw	0
 18804  27C6  3FC0               	movwi [0]fsr1
 18805  27C7  3FC1               	movwi [1]fsr1
 18806                           
 18807                           ;secret_task.c: 164: data->delayTickCount = 300;
 18808  27C8  0858               	movf	secret_Main@data,w
 18809  27C9  0086               	movwf	6
 18810  27CA  0859               	movf	secret_Main@data+1,w
 18811  27CB  0087               	movwf	7
 18812  27CC  3142               	addfsr 1,2
 18813  27CD  302C               	movlw	44
 18814  27CE  3FC0               	movwi [0]fsr1
 18815  27CF  3001               	movlw	1
 18816  27D0  3FC1               	movwi [1]fsr1
 18817                           
 18818                           ;secret_task.c: 165: break;
 18819  27D1  2FF5               	goto	l9677
 18820  27D2                     l9671:	
 18821                           ;secret_task.c: 166: default:
 18822                           
 18823                           
 18824                           ;secret_task.c: 168: secret_check(data, 0);
 18825  27D2  0859               	movf	secret_Main@data+1,w
 18826  27D3  00F8               	movwf	secret_check@data+1
 18827  27D4  0858               	movf	secret_Main@data,w
 18828  27D5  00F7               	movwf	secret_check@data
 18829  27D6  01F9               	clrf	secret_check@buttonPressed
 18830  27D7  3190  2028  31A6   	fcall	_secret_check
 18831                           
 18832                           ;secret_task.c: 169: secret_clear(data);
 18833  27DA  0020               	movlb	0	; select bank0
 18834  27DB  0859               	movf	secret_Main@data+1,w
 18835  27DC  00F2               	movwf	secret_clear@data+1
 18836  27DD  0858               	movf	secret_Main@data,w
 18837  27DE  00F1               	movwf	secret_clear@data
 18838  27DF  31A8  20B3  31A6   	fcall	_secret_clear
 18839                           
 18840                           ;secret_task.c: 170: }
 18841  27E2  2FF5               	goto	l9677
 18842  27E3                     l9675:	
 18843  27E3  0020               	movlb	0	; select bank0
 18844  27E4  0857               	movf	secret_Main@buttonPressed,w
 18845                           
 18846                           ; Switch size 1, requested type "space"
 18847                           ; Number of cases is 5, Range of values is 0 to 8
 18848                           ; switch strategies available:
 18849                           ; Name         Instructions Cycles
 18850                           ; simple_byte           16     9 (average)
 18851                           ; direct_byte           24     6 (fixed)
 18852                           ; jumptable            260     6 (fixed)
 18853                           ;	Chosen strategy is simple_byte
 18854  27E5  3A00               	xorlw	0	; case 0
 18855  27E6  1903               	skipnz
 18856  27E7  2E51               	goto	l9589
 18857  27E8  3A01               	xorlw	1	; case 1
 18858  27E9  1903               	skipnz
 18859  27EA  2EA2               	goto	l9607
 18860  27EB  3A03               	xorlw	3	; case 2
 18861  27EC  1903               	skipnz
 18862  27ED  2EEE               	goto	l9623
 18863  27EE  3A06               	xorlw	6	; case 4
 18864  27EF  1903               	skipnz
 18865  27F0  2F3A               	goto	l9639
 18866  27F1  3A0C               	xorlw	12	; case 8
 18867  27F2  1903               	skipnz
 18868  27F3  2F86               	goto	l9655
 18869  27F4  2FD2               	goto	l9671
 18870  27F5                     l9677:	
 18871                           
 18872                           ;secret_task.c: 173: if (secret_found){
 18873  27F5  0020               	movlb	0	; select bank0
 18874  27F6  0856               	movf	secret_Main@secret_found,w
 18875  27F7  1903               	btfsc	3,2
 18876  27F8  0008               	return
 18877                           
 18878                           ;secret_task.c: 174: secret_clear(data);
 18879  27F9  0859               	movf	secret_Main@data+1,w
 18880  27FA  00F2               	movwf	secret_clear@data+1
 18881  27FB  0858               	movf	secret_Main@data,w
 18882  27FC  00F1               	movwf	secret_clear@data
 18883  27FD  31A8  20B3         	fcall	_secret_clear
 18884  27FF  0008               	return
 18885  2800                     __end_of_secret_Main:	
 18886                           
 18887                           	psect	text16
 18888  1C2C                     __ptext16:	
 18889 ;; *************** function _locked_Main *****************
 18890 ;; Defined at:
 18891 ;;		line 85 in file "locked_task.c"
 18892 ;; Parameters:    Size  Location     Type
 18893 ;;  taskData        2   50[BANK0 ] PTR void 
 18894 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 18895 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 18896 ;; Auto vars:     Size  Location     Type
 18897 ;;  data            2   55[BANK0 ] PTR struct t_locked_task
 18898 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 18899 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 18900 ;;  buttonPresse    1   54[BANK0 ] unsigned char 
 18901 ;; Return value:  Size  Location     Type
 18902 ;;                  1    wreg      void 
 18903 ;; Registers used:
 18904 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18905 ;; Tracked objects:
 18906 ;;		On entry : 0/0
 18907 ;;		On exit  : 0/0
 18908 ;;		Unchanged: 0/0
 18909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18910 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18911 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18912 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18913 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18914 ;;Total ram usage:        7 bytes
 18915 ;; Hardware stack levels used:    1
 18916 ;; Hardware stack levels required when called:   11
 18917 ;; This function calls:
 18918 ;;		___lwmod
 18919 ;;		_locked_clear
 18920 ;;		_locked_get_lock_leds
 18921 ;;		_locked_get_unlock_leds
 18922 ;;		_locked_lock_leds
 18923 ;;		_locked_unlock_leds
 18924 ;;		_marquee
 18925 ;;		_nullifyBadge_buttonsGet
 18926 ;;		_nullifyBadge_userLedsSet
 18927 ;;		_slot_Setup
 18928 ;; This function is called by:
 18929 ;;		_main
 18930 ;;		_scheduler_TaskRun
 18931 ;; This function uses a non-reentrant model
 18932 ;;
 18933                           
 18934                           
 18935                           ;psect for function _locked_Main
 18936  1C2C                     _locked_Main:	
 18937                           
 18938                           ;locked_task.c: 86: struct t_locked_taskData *data = (struct t_locked_taskData *) taskDa
      +                          ta;
 18939                           
 18940                           ;incstack = 0
 18941                           ; Regs used in _locked_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18942  1C2C  0020               	movlb	0	; select bank0
 18943  1C2D  0853               	movf	locked_Main@taskData+1,w
 18944  1C2E  00D8               	movwf	locked_Main@data+1
 18945  1C2F  0852               	movf	locked_Main@taskData,w
 18946  1C30  00D7               	movwf	locked_Main@data
 18947                           
 18948                           ;locked_task.c: 87: u8 buttonPressed;
 18949                           ;locked_task.c: 89: if ( currentTask != LOCKED_TASK ){
 18950  1C31  3003               	movlw	3
 18951  1C32  0021               	movlb	1	; select bank1
 18952  1C33  063A               	xorwf	_currentTask^(0+128),w
 18953  1C34  043B               	iorwf	(_currentTask+1)^(0+128),w
 18954  1C35  1903               	btfsc	3,2
 18955  1C36  2D44               	goto	l9549
 18956                           
 18957                           ;locked_task.c: 90: data->holdCountA = 1;
 18958  1C37  0020               	movlb	0	; select bank0
 18959  1C38  0857               	movf	locked_Main@data,w
 18960  1C39  0086               	movwf	6
 18961  1C3A  0858               	movf	locked_Main@data+1,w
 18962  1C3B  0087               	movwf	7
 18963  1C3C  3143               	addfsr 1,3
 18964  1C3D  3001               	movlw	1
 18965  1C3E  3FC0               	movwi [0]fsr1
 18966  1C3F  3000               	movlw	0
 18967  1C40  3FC1               	movwi [1]fsr1
 18968                           
 18969                           ;locked_task.c: 91: data->holdCountB = 1;
 18970  1C41  0857               	movf	locked_Main@data,w
 18971  1C42  0086               	movwf	6
 18972  1C43  0858               	movf	locked_Main@data+1,w
 18973  1C44  0087               	movwf	7
 18974  1C45  3145               	addfsr 1,5
 18975  1C46  3001               	movlw	1
 18976  1C47  3FC0               	movwi [0]fsr1
 18977  1C48  3000               	movlw	0
 18978  1C49  3FC1               	movwi [1]fsr1
 18979                           
 18980                           ;locked_task.c: 92: data->holdCountX = 1;
 18981  1C4A  0857               	movf	locked_Main@data,w
 18982  1C4B  0086               	movwf	6
 18983  1C4C  0858               	movf	locked_Main@data+1,w
 18984  1C4D  0087               	movwf	7
 18985  1C4E  3147               	addfsr 1,7
 18986  1C4F  3001               	movlw	1
 18987  1C50  3FC0               	movwi [0]fsr1
 18988  1C51  3000               	movlw	0
 18989  1C52  3FC1               	movwi [1]fsr1
 18990                           
 18991                           ;locked_task.c: 93: data->holdCountY = 1;
 18992  1C53  0857               	movf	locked_Main@data,w
 18993  1C54  0086               	movwf	6
 18994  1C55  0858               	movf	locked_Main@data+1,w
 18995  1C56  0087               	movwf	7
 18996  1C57  3149               	addfsr 1,9
 18997  1C58  3001               	movlw	1
 18998  1C59  3FC0               	movwi [0]fsr1
 18999  1C5A  3000               	movlw	0
 19000  1C5B  3FC1               	movwi [1]fsr1
 19001                           
 19002                           ;locked_task.c: 94: return;
 19003  1C5C  0008               	return
 19004  1C5D                     l9505:	
 19005                           ;locked_task.c: 101: case LOCKED_UNLOCKING_STATE:
 19006                           
 19007                           ;locked_task.c: 95: }
 19008                           ;locked_task.c: 100: switch (data->state){
 19009                           
 19010                           
 19011                           ;locked_task.c: 102: badge_locked = 0;
 19012  1C5D  0021               	movlb	1	; select bank1
 19013  1C5E  01C4               	clrf	_badge_locked^(0+128)
 19014                           
 19015                           ;locked_task.c: 103: slot_Setup(slot_taskData);
 19016  1C5F  083D               	movf	(_slot_taskData+1)^(0+128),w
 19017  1C60  0020               	movlb	0	; select bank0
 19018  1C61  00B0               	movwf	slot_Setup@taskData+1
 19019  1C62  0021               	movlb	1	; select bank1
 19020  1C63  083C               	movf	_slot_taskData^(0+128),w
 19021  1C64  0020               	movlb	0	; select bank0
 19022  1C65  00AF               	movwf	slot_Setup@taskData
 19023  1C66  31AD  2580  319C   	fcall	_slot_Setup
 19024                           
 19025                           ;locked_task.c: 104: marquee("UNLOCKING...", data->delayTickCount);
 19026  1C69  30A5               	movlw	low (STR_42| (0+32768))
 19027  1C6A  0020               	movlb	0	; select bank0
 19028  1C6B  00BA               	movwf	marquee@string
 19029  1C6C  30BA               	movlw	high (STR_42| (0+32768))
 19030  1C6D  00BB               	movwf	marquee@string+1
 19031  1C6E  0857               	movf	locked_Main@data,w
 19032  1C6F  0086               	movwf	6
 19033  1C70  0858               	movf	locked_Main@data+1,w
 19034  1C71  0087               	movwf	7
 19035  1C72  3141               	addfsr 1,1
 19036  1C73  3F40               	moviw [0]fsr1
 19037  1C74  00BC               	movwf	marquee@count
 19038  1C75  3F41               	moviw [1]fsr1
 19039  1C76  00BD               	movwf	marquee@count+1
 19040  1C77  31A1  21D2  319C   	fcall	_marquee
 19041                           
 19042                           ;locked_task.c: 106: if (data->delayTickCount % 75 == 0){
 19043  1C7A  304B               	movlw	75
 19044  1C7B  0020               	movlb	0	; select bank0
 19045  1C7C  00AB               	movwf	___lwmod@divisor
 19046  1C7D  3000               	movlw	0
 19047  1C7E  00AC               	movwf	___lwmod@divisor+1
 19048  1C7F  0857               	movf	locked_Main@data,w
 19049  1C80  0086               	movwf	6
 19050  1C81  0858               	movf	locked_Main@data+1,w
 19051  1C82  0087               	movwf	7
 19052  1C83  3141               	addfsr 1,1
 19053  1C84  3F40               	moviw [0]fsr1
 19054  1C85  00AD               	movwf	___lwmod@dividend
 19055  1C86  3F41               	moviw [1]fsr1
 19056  1C87  00AE               	movwf	___lwmod@dividend+1
 19057  1C88  31B7  2772  319C   	fcall	___lwmod
 19058  1C8B  0020               	movlb	0	; select bank0
 19059  1C8C  082B               	movf	?___lwmod,w
 19060  1C8D  042C               	iorwf	?___lwmod+1,w
 19061  1C8E  1D03               	btfss	3,2
 19062  1C8F  2C9A               	goto	l9515
 19063                           
 19064                           ;locked_task.c: 107: locked_leds = locked_lock_base_leds | locked_get_unlock_leds();
 19065  1C90  3188  2001  319C   	fcall	_locked_get_unlock_leds
 19066  1C93  0021               	movlb	1	; select bank1
 19067  1C94  0859               	movf	_locked_lock_base_leds^(0+128),w
 19068  1C95  0471               	iorwf	?_locked_get_unlock_leds,w
 19069  1C96  00A2               	movwf	_locked_leds^(0+128)
 19070  1C97  085A               	movf	(_locked_lock_base_leds+1)^(0+128),w
 19071  1C98  0472               	iorwf	?_locked_get_unlock_leds+1,w
 19072  1C99  00A3               	movwf	(_locked_leds+1)^(0+128)
 19073  1C9A                     l9515:	
 19074                           
 19075                           ;locked_task.c: 108: }
 19076                           ;locked_task.c: 111: if (data->delayTickCount == 375){
 19077  1C9A  0020               	movlb	0	; select bank0
 19078  1C9B  0857               	movf	locked_Main@data,w
 19079  1C9C  0086               	movwf	6
 19080  1C9D  0858               	movf	locked_Main@data+1,w
 19081  1C9E  0087               	movwf	7
 19082  1C9F  3141               	addfsr 1,1
 19083  1CA0  0016               	moviw fsr1++
 19084  1CA1  3A77               	xorlw	119
 19085  1CA2  00D4               	movwf	??_locked_Main
 19086  1CA3  0016               	moviw fsr1++
 19087  1CA4  3A01               	xorlw	1
 19088  1CA5  04D4               	iorwf	??_locked_Main,f
 19089  1CA6  1D03               	btfss	3,2
 19090  1CA7  2D0A               	goto	l9535
 19091                           
 19092                           ;locked_task.c: 112: data->state = LOCKED_UNLOCKED_STATE;
 19093  1CA8  0857               	movf	locked_Main@data,w
 19094  1CA9  3E0D               	addlw	13
 19095  1CAA  00D4               	movwf	??_locked_Main
 19096  1CAB  3000               	movlw	0
 19097  1CAC  3D58               	addwfc	locked_Main@data+1,w
 19098  1CAD  00D5               	movwf	??_locked_Main+1
 19099  1CAE  0854               	movf	??_locked_Main,w
 19100  1CAF  0086               	movwf	6
 19101  1CB0  0855               	movf	??_locked_Main+1,w
 19102  1CB1  0087               	movwf	7
 19103  1CB2  3002               	movlw	2
 19104  1CB3  0081               	movwf	1
 19105                           
 19106                           ;locked_task.c: 113: data->delayTickCount = 0;
 19107  1CB4  0857               	movf	locked_Main@data,w
 19108  1CB5  0086               	movwf	6
 19109  1CB6  0858               	movf	locked_Main@data+1,w
 19110  1CB7  0087               	movwf	7
 19111  1CB8  3141               	addfsr 1,1
 19112  1CB9  3000               	movlw	0
 19113  1CBA  3FC0               	movwi [0]fsr1
 19114  1CBB  3FC1               	movwi [1]fsr1
 19115  1CBC  2D58               	goto	l9551
 19116  1CBD                     l9523:	
 19117                           ;locked_task.c: 119: case LOCKED_LOCKING_STATE:
 19118                           
 19119                           ;locked_task.c: 117: }
 19120                           ;locked_task.c: 118: break;
 19121                           
 19122                           ;locked_task.c: 115: else {
 19123                           ;locked_task.c: 116: data->delayTickCount += 1;
 19124                           
 19125                           ;locked_task.c: 114: }
 19126                           
 19127                           
 19128                           ;locked_task.c: 120: marquee("LOCKING...", data->delayTickCount);
 19129  1CBD  30A7               	movlw	low ((STR_42+2)| (0+32768))
 19130  1CBE  00BA               	movwf	marquee@string
 19131  1CBF  30BA               	movlw	high ((STR_42+2)| (0+32768))
 19132  1CC0  00BB               	movwf	marquee@string+1
 19133  1CC1  0857               	movf	locked_Main@data,w
 19134  1CC2  0086               	movwf	6
 19135  1CC3  0858               	movf	locked_Main@data+1,w
 19136  1CC4  0087               	movwf	7
 19137  1CC5  3141               	addfsr 1,1
 19138  1CC6  3F40               	moviw [0]fsr1
 19139  1CC7  00BC               	movwf	marquee@count
 19140  1CC8  3F41               	moviw [1]fsr1
 19141  1CC9  00BD               	movwf	marquee@count+1
 19142  1CCA  31A1  21D2  319C   	fcall	_marquee
 19143                           
 19144                           ;locked_task.c: 122: if (data->delayTickCount % 75 == 0){
 19145  1CCD  304B               	movlw	75
 19146  1CCE  0020               	movlb	0	; select bank0
 19147  1CCF  00AB               	movwf	___lwmod@divisor
 19148  1CD0  3000               	movlw	0
 19149  1CD1  00AC               	movwf	___lwmod@divisor+1
 19150  1CD2  0857               	movf	locked_Main@data,w
 19151  1CD3  0086               	movwf	6
 19152  1CD4  0858               	movf	locked_Main@data+1,w
 19153  1CD5  0087               	movwf	7
 19154  1CD6  3141               	addfsr 1,1
 19155  1CD7  3F40               	moviw [0]fsr1
 19156  1CD8  00AD               	movwf	___lwmod@dividend
 19157  1CD9  3F41               	moviw [1]fsr1
 19158  1CDA  00AE               	movwf	___lwmod@dividend+1
 19159  1CDB  31B7  2772  319C   	fcall	___lwmod
 19160  1CDE  0020               	movlb	0	; select bank0
 19161  1CDF  082B               	movf	?___lwmod,w
 19162  1CE0  042C               	iorwf	?___lwmod+1,w
 19163  1CE1  1D03               	btfss	3,2
 19164  1CE2  2CED               	goto	l9529
 19165                           
 19166                           ;locked_task.c: 123: locked_leds = locked_lock_base_leds | locked_get_lock_leds();
 19167  1CE3  31B6  26FE  319C   	fcall	_locked_get_lock_leds
 19168  1CE6  0021               	movlb	1	; select bank1
 19169  1CE7  0859               	movf	_locked_lock_base_leds^(0+128),w
 19170  1CE8  0471               	iorwf	?_locked_get_lock_leds,w
 19171  1CE9  00A2               	movwf	_locked_leds^(0+128)
 19172  1CEA  085A               	movf	(_locked_lock_base_leds+1)^(0+128),w
 19173  1CEB  0472               	iorwf	?_locked_get_lock_leds+1,w
 19174  1CEC  00A3               	movwf	(_locked_leds+1)^(0+128)
 19175  1CED                     l9529:	
 19176                           
 19177                           ;locked_task.c: 124: }
 19178                           ;locked_task.c: 127: if (data->delayTickCount == 375){
 19179  1CED  0020               	movlb	0	; select bank0
 19180  1CEE  0857               	movf	locked_Main@data,w
 19181  1CEF  0086               	movwf	6
 19182  1CF0  0858               	movf	locked_Main@data+1,w
 19183  1CF1  0087               	movwf	7
 19184  1CF2  3141               	addfsr 1,1
 19185  1CF3  0016               	moviw fsr1++
 19186  1CF4  3A77               	xorlw	119
 19187  1CF5  00D4               	movwf	??_locked_Main
 19188  1CF6  0016               	moviw fsr1++
 19189  1CF7  3A01               	xorlw	1
 19190  1CF8  04D4               	iorwf	??_locked_Main,f
 19191  1CF9  1D03               	btfss	3,2
 19192  1CFA  2D0A               	goto	l9535
 19193                           
 19194                           ;locked_task.c: 128: data->state = LOCKED_LOCKED_STATE;
 19195  1CFB  0857               	movf	locked_Main@data,w
 19196  1CFC  0086               	movwf	6
 19197  1CFD  0858               	movf	locked_Main@data+1,w
 19198  1CFE  0087               	movwf	7
 19199  1CFF  314D               	addfsr 1,13
 19200  1D00  0181               	clrf	1
 19201                           
 19202                           ;locked_task.c: 129: data->delayTickCount = 0;
 19203  1D01  0857               	movf	locked_Main@data,w
 19204  1D02  0086               	movwf	6
 19205  1D03  0858               	movf	locked_Main@data+1,w
 19206  1D04  0087               	movwf	7
 19207  1D05  3141               	addfsr 1,1
 19208  1D06  3000               	movlw	0
 19209  1D07  3FC0               	movwi [0]fsr1
 19210  1D08  3FC1               	movwi [1]fsr1
 19211                           
 19212                           ;locked_task.c: 130: }
 19213  1D09  2D58               	goto	l9551
 19214  1D0A                     l9535:	
 19215                           
 19216                           ;locked_task.c: 131: else {
 19217                           ;locked_task.c: 132: data->delayTickCount += 1;
 19218  1D0A  0857               	movf	locked_Main@data,w
 19219  1D0B  0086               	movwf	6
 19220  1D0C  0858               	movf	locked_Main@data+1,w
 19221  1D0D  0087               	movwf	7
 19222  1D0E  3141               	addfsr 1,1
 19223  1D0F  3001               	movlw	1
 19224  1D10  0781               	addwf	1,f
 19225  1D11  3141               	addfsr 1,1
 19226  1D12  1803               	skipnc
 19227  1D13  0A81               	incf	1,f
 19228                           
 19229                           ;locked_task.c: 133: }
 19230                           ;locked_task.c: 134: break;
 19231  1D14  2D58               	goto	l9551
 19232  1D15                     l9537:	
 19233                           ;locked_task.c: 135: case LOCKED_UNLOCKED_STATE:
 19234                           
 19235                           
 19236                           ;locked_task.c: 136: badge_locked = 0;
 19237  1D15  0021               	movlb	1	; select bank1
 19238  1D16  01C4               	clrf	_badge_locked^(0+128)
 19239                           
 19240                           ;locked_task.c: 138: marquee("OPEN", data->delayTickCount);
 19241  1D17  30E0               	movlw	low (STR_44| (0+32768))
 19242  1D18  0020               	movlb	0	; select bank0
 19243  1D19  00BA               	movwf	marquee@string
 19244  1D1A  30BB               	movlw	high (STR_44| (0+32768))
 19245  1D1B  00BB               	movwf	marquee@string+1
 19246  1D1C  0857               	movf	locked_Main@data,w
 19247  1D1D  0086               	movwf	6
 19248  1D1E  0858               	movf	locked_Main@data+1,w
 19249  1D1F  0087               	movwf	7
 19250  1D20  3141               	addfsr 1,1
 19251  1D21  3F40               	moviw [0]fsr1
 19252  1D22  00BC               	movwf	marquee@count
 19253  1D23  3F41               	moviw [1]fsr1
 19254  1D24  00BD               	movwf	marquee@count+1
 19255  1D25  31A1  21D2  319C   	fcall	_marquee
 19256                           
 19257                           ;locked_task.c: 139: locked_unlock_leds();
 19258  1D28  31B5  251A  319C   	fcall	_locked_unlock_leds
 19259                           
 19260                           ;locked_task.c: 140: break;
 19261  1D2B  2D58               	goto	l9551
 19262  1D2C                     l1265:	
 19263                           ;locked_task.c: 141: case LOCKED_LOCKED_STATE:
 19264                           
 19265                           
 19266                           ;locked_task.c: 142: badge_locked = 1;
 19267  1D2C  0021               	movlb	1	; select bank1
 19268  1D2D  01C4               	clrf	_badge_locked^(0+128)
 19269  1D2E  0AC4               	incf	_badge_locked^(0+128),f
 19270                           
 19271                           ;locked_task.c: 143: marquee("LOCK", data->delayTickCount);
 19272  1D2F  30DB               	movlw	low (STR_45| (0+32768))
 19273  1D30  0020               	movlb	0	; select bank0
 19274  1D31  00BA               	movwf	marquee@string
 19275  1D32  30BB               	movlw	high (STR_45| (0+32768))
 19276  1D33  00BB               	movwf	marquee@string+1
 19277  1D34  0857               	movf	locked_Main@data,w
 19278  1D35  0086               	movwf	6
 19279  1D36  0858               	movf	locked_Main@data+1,w
 19280  1D37  0087               	movwf	7
 19281  1D38  3141               	addfsr 1,1
 19282  1D39  3F40               	moviw [0]fsr1
 19283  1D3A  00BC               	movwf	marquee@count
 19284  1D3B  3F41               	moviw [1]fsr1
 19285  1D3C  00BD               	movwf	marquee@count+1
 19286  1D3D  31A1  21D2  319C   	fcall	_marquee
 19287                           
 19288                           ;locked_task.c: 145: locked_lock_leds();
 19289  1D40  31B5  25D9  319C   	fcall	_locked_lock_leds
 19290                           
 19291                           ;locked_task.c: 147: }
 19292                           
 19293                           ;locked_task.c: 146: break;
 19294  1D43  2D58               	goto	l9551
 19295  1D44                     l9549:	
 19296  1D44  0020               	movlb	0	; select bank0
 19297  1D45  0857               	movf	locked_Main@data,w
 19298  1D46  0086               	movwf	6
 19299  1D47  0858               	movf	locked_Main@data+1,w
 19300  1D48  0087               	movwf	7
 19301  1D49  314D               	addfsr 1,13
 19302  1D4A  0801               	movf	1,w
 19303                           
 19304                           ; Switch size 1, requested type "space"
 19305                           ; Number of cases is 4, Range of values is 0 to 3
 19306                           ; switch strategies available:
 19307                           ; Name         Instructions Cycles
 19308                           ; simple_byte           13     7 (average)
 19309                           ; direct_byte           14     6 (fixed)
 19310                           ; jumptable            260     6 (fixed)
 19311                           ;	Chosen strategy is simple_byte
 19312  1D4B  3A00               	xorlw	0	; case 0
 19313  1D4C  1903               	skipnz
 19314  1D4D  2D2C               	goto	l1265
 19315  1D4E  3A01               	xorlw	1	; case 1
 19316  1D4F  1903               	skipnz
 19317  1D50  2CBD               	goto	l9523
 19318  1D51  3A03               	xorlw	3	; case 2
 19319  1D52  1903               	skipnz
 19320  1D53  2D15               	goto	l9537
 19321  1D54  3A01               	xorlw	1	; case 3
 19322  1D55  1903               	skipnz
 19323  1D56  2C5D               	goto	l9505
 19324  1D57  2D58               	goto	l9551
 19325  1D58                     l9551:	
 19326                           
 19327                           ;locked_task.c: 148: nullifyBadge_userLedsSet(data->badge, locked_leds);
 19328  1D58  0021               	movlb	1	; select bank1
 19329  1D59  0823               	movf	(_locked_leds+1)^(0+128),w
 19330  1D5A  0020               	movlb	0	; select bank0
 19331  1D5B  00AE               	movwf	nullifyBadge_userLedsSet@userLedData+1
 19332  1D5C  0021               	movlb	1	; select bank1
 19333  1D5D  0822               	movf	_locked_leds^(0+128),w
 19334  1D5E  0020               	movlb	0	; select bank0
 19335  1D5F  00AD               	movwf	nullifyBadge_userLedsSet@userLedData
 19336  1D60  0857               	movf	locked_Main@data,w
 19337  1D61  0086               	movwf	6
 19338  1D62  0858               	movf	locked_Main@data+1,w
 19339  1D63  0087               	movwf	7
 19340  1D64  0801               	movf	1,w
 19341  1D65  31B4  24E6  319C   	fcall	_nullifyBadge_userLedsSet
 19342                           
 19343                           ;locked_task.c: 151: buttonPressed = nullifyBadge_buttonsGet();
 19344  1D68  31A8  2082  319C   	fcall	_nullifyBadge_buttonsGet
 19345  1D6B  0020               	movlb	0	; select bank0
 19346  1D6C  00D4               	movwf	??_locked_Main
 19347  1D6D  0854               	movf	??_locked_Main,w
 19348  1D6E  00D6               	movwf	locked_Main@buttonPressed
 19349                           
 19350                           ;locked_task.c: 152: switch (buttonPressed) {
 19351  1D6F  2E00               	goto	l9581
 19352  1D70                     l9555:	
 19353                           ;locked_task.c: 153: case 4:
 19354                           
 19355                           
 19356                           ;locked_task.c: 154: locked_clear(data);
 19357  1D70  0858               	movf	locked_Main@data+1,w
 19358  1D71  00BA               	movwf	locked_clear@data+1
 19359  1D72  0857               	movf	locked_Main@data,w
 19360  1D73  00B9               	movwf	locked_clear@data
 19361  1D74  31AA  22F6         	fcall	_locked_clear
 19362                           
 19363                           ;locked_task.c: 155: currentTask = MENU_TASK;
 19364  1D76  0021               	movlb	1	; select bank1
 19365  1D77  01BA               	clrf	_currentTask^(0+128)
 19366  1D78  01BB               	clrf	(_currentTask+1)^(0+128)
 19367                           
 19368                           ;locked_task.c: 156: break;
 19369  1D79  0008               	return
 19370  1D7A                     l9559:	
 19371                           ;locked_task.c: 157: case 8:
 19372                           
 19373                           
 19374                           ;locked_task.c: 158: if (data->holdCountY == 0){
 19375  1D7A  0020               	movlb	0	; select bank0
 19376  1D7B  0857               	movf	locked_Main@data,w
 19377  1D7C  0086               	movwf	6
 19378  1D7D  0858               	movf	locked_Main@data+1,w
 19379  1D7E  0087               	movwf	7
 19380  1D7F  3149               	addfsr 1,9
 19381  1D80  0016               	moviw fsr1++
 19382  1D81  0401               	iorwf	1,w
 19383  1D82  1D03               	btfss	3,2
 19384  1D83  2DAA               	goto	l9569
 19385                           
 19386                           ;locked_task.c: 161: data->delayTickCount = 0;
 19387  1D84  0857               	movf	locked_Main@data,w
 19388  1D85  0086               	movwf	6
 19389  1D86  0858               	movf	locked_Main@data+1,w
 19390  1D87  0087               	movwf	7
 19391  1D88  3141               	addfsr 1,1
 19392  1D89  3000               	movlw	0
 19393  1D8A  3FC0               	movwi [0]fsr1
 19394  1D8B  3FC1               	movwi [1]fsr1
 19395                           
 19396                           ;locked_task.c: 162: if (badge_locked){
 19397  1D8C  0021               	movlb	1	; select bank1
 19398  1D8D  0844               	movf	_badge_locked^(0+128),w
 19399  1D8E  1903               	btfsc	3,2
 19400  1D8F  2D9D               	goto	l9567
 19401                           
 19402                           ;locked_task.c: 164: data->state = LOCKED_UNLOCKING_STATE;
 19403  1D90  0020               	movlb	0	; select bank0
 19404  1D91  0857               	movf	locked_Main@data,w
 19405  1D92  3E0D               	addlw	13
 19406  1D93  00D4               	movwf	??_locked_Main
 19407  1D94  3000               	movlw	0
 19408  1D95  3D58               	addwfc	locked_Main@data+1,w
 19409  1D96  00D5               	movwf	??_locked_Main+1
 19410  1D97  0854               	movf	??_locked_Main,w
 19411  1D98  0086               	movwf	6
 19412  1D99  0855               	movf	??_locked_Main+1,w
 19413  1D9A  0087               	movwf	7
 19414  1D9B  3003               	movlw	3
 19415  1D9C  2DA9               	goto	L3
 19416  1D9D                     l9567:	
 19417                           ;locked_task.c: 165: }
 19418                           
 19419                           
 19420                           ;locked_task.c: 166: else {
 19421                           ;locked_task.c: 168: data->state = LOCKED_LOCKING_STATE;
 19422  1D9D  0020               	movlb	0	; select bank0
 19423  1D9E  0857               	movf	locked_Main@data,w
 19424  1D9F  3E0D               	addlw	13
 19425  1DA0  00D4               	movwf	??_locked_Main
 19426  1DA1  3000               	movlw	0
 19427  1DA2  3D58               	addwfc	locked_Main@data+1,w
 19428  1DA3  00D5               	movwf	??_locked_Main+1
 19429  1DA4  0854               	movf	??_locked_Main,w
 19430  1DA5  0086               	movwf	6
 19431  1DA6  0855               	movf	??_locked_Main+1,w
 19432  1DA7  0087               	movwf	7
 19433  1DA8  3001               	movlw	1
 19434  1DA9                     L3:	
 19435  1DA9  0081               	movwf	1
 19436  1DAA                     l9569:	
 19437                           
 19438                           ;locked_task.c: 169: }
 19439                           ;locked_task.c: 170: }
 19440                           ;locked_task.c: 171: data->holdCountA = 0;
 19441  1DAA  0857               	movf	locked_Main@data,w
 19442  1DAB  0086               	movwf	6
 19443  1DAC  0858               	movf	locked_Main@data+1,w
 19444  1DAD  0087               	movwf	7
 19445  1DAE  3143               	addfsr 1,3
 19446  1DAF  3000               	movlw	0
 19447  1DB0  3FC0               	movwi [0]fsr1
 19448  1DB1  3FC1               	movwi [1]fsr1
 19449                           
 19450                           ;locked_task.c: 172: data->holdCountB = 0;
 19451  1DB2  0857               	movf	locked_Main@data,w
 19452  1DB3  0086               	movwf	6
 19453  1DB4  0858               	movf	locked_Main@data+1,w
 19454  1DB5  0087               	movwf	7
 19455  1DB6  3145               	addfsr 1,5
 19456  1DB7  3000               	movlw	0
 19457  1DB8  3FC0               	movwi [0]fsr1
 19458  1DB9  3FC1               	movwi [1]fsr1
 19459                           
 19460                           ;locked_task.c: 173: data->holdCountX = 0;
 19461  1DBA  0857               	movf	locked_Main@data,w
 19462  1DBB  0086               	movwf	6
 19463  1DBC  0858               	movf	locked_Main@data+1,w
 19464  1DBD  0087               	movwf	7
 19465  1DBE  3147               	addfsr 1,7
 19466  1DBF  3000               	movlw	0
 19467  1DC0  3FC0               	movwi [0]fsr1
 19468  1DC1  3FC1               	movwi [1]fsr1
 19469                           
 19470                           ;locked_task.c: 174: data->holdCountY += 1;
 19471  1DC2  0857               	movf	locked_Main@data,w
 19472  1DC3  0086               	movwf	6
 19473  1DC4  0858               	movf	locked_Main@data+1,w
 19474  1DC5  0087               	movwf	7
 19475  1DC6  3149               	addfsr 1,9
 19476  1DC7  3001               	movlw	1
 19477  1DC8  0781               	addwf	1,f
 19478  1DC9  3141               	addfsr 1,1
 19479  1DCA  1803               	skipnc
 19480  1DCB  0A81               	incf	1,f
 19481                           
 19482                           ;locked_task.c: 175: data->noholdCount = 0;
 19483  1DCC  0857               	movf	locked_Main@data,w
 19484  1DCD  0086               	movwf	6
 19485  1DCE  0858               	movf	locked_Main@data+1,w
 19486  1DCF  0087               	movwf	7
 19487  1DD0  314B               	addfsr 1,11
 19488  1DD1  3000               	movlw	0
 19489  1DD2  3FC0               	movwi [0]fsr1
 19490  1DD3  3FC1               	movwi [1]fsr1
 19491                           
 19492                           ;locked_task.c: 176: break;
 19493  1DD4  0008               	return
 19494  1DD5                     l9577:	
 19495                           ;locked_task.c: 177: default:
 19496                           
 19497                           
 19498                           ;locked_task.c: 178: data->holdCountA = 0;
 19499  1DD5  0857               	movf	locked_Main@data,w
 19500  1DD6  0086               	movwf	6
 19501  1DD7  0858               	movf	locked_Main@data+1,w
 19502  1DD8  0087               	movwf	7
 19503  1DD9  3143               	addfsr 1,3
 19504  1DDA  3000               	movlw	0
 19505  1DDB  3FC0               	movwi [0]fsr1
 19506  1DDC  3FC1               	movwi [1]fsr1
 19507                           
 19508                           ;locked_task.c: 179: data->holdCountB = 0;
 19509  1DDD  0857               	movf	locked_Main@data,w
 19510  1DDE  0086               	movwf	6
 19511  1DDF  0858               	movf	locked_Main@data+1,w
 19512  1DE0  0087               	movwf	7
 19513  1DE1  3145               	addfsr 1,5
 19514  1DE2  3000               	movlw	0
 19515  1DE3  3FC0               	movwi [0]fsr1
 19516  1DE4  3FC1               	movwi [1]fsr1
 19517                           
 19518                           ;locked_task.c: 180: data->holdCountX = 0;
 19519  1DE5  0857               	movf	locked_Main@data,w
 19520  1DE6  0086               	movwf	6
 19521  1DE7  0858               	movf	locked_Main@data+1,w
 19522  1DE8  0087               	movwf	7
 19523  1DE9  3147               	addfsr 1,7
 19524  1DEA  3000               	movlw	0
 19525  1DEB  3FC0               	movwi [0]fsr1
 19526  1DEC  3FC1               	movwi [1]fsr1
 19527                           
 19528                           ;locked_task.c: 181: data->holdCountY = 0;
 19529  1DED  0857               	movf	locked_Main@data,w
 19530  1DEE  0086               	movwf	6
 19531  1DEF  0858               	movf	locked_Main@data+1,w
 19532  1DF0  0087               	movwf	7
 19533  1DF1  3149               	addfsr 1,9
 19534  1DF2  3000               	movlw	0
 19535  1DF3  3FC0               	movwi [0]fsr1
 19536  1DF4  3FC1               	movwi [1]fsr1
 19537                           
 19538                           ;locked_task.c: 182: data->noholdCount += 1;
 19539  1DF5  0857               	movf	locked_Main@data,w
 19540  1DF6  0086               	movwf	6
 19541  1DF7  0858               	movf	locked_Main@data+1,w
 19542  1DF8  0087               	movwf	7
 19543  1DF9  314B               	addfsr 1,11
 19544  1DFA  3001               	movlw	1
 19545  1DFB  0781               	addwf	1,f
 19546  1DFC  3141               	addfsr 1,1
 19547  1DFD  1803               	skipnc
 19548  1DFE  0A81               	incf	1,f
 19549                           
 19550                           ;locked_task.c: 183: }
 19551  1DFF  0008               	return
 19552  1E00                     l9581:	
 19553  1E00  0856               	movf	locked_Main@buttonPressed,w
 19554                           
 19555                           ; Switch size 1, requested type "space"
 19556                           ; Number of cases is 2, Range of values is 4 to 8
 19557                           ; switch strategies available:
 19558                           ; Name         Instructions Cycles
 19559                           ; simple_byte            7     4 (average)
 19560                           ; direct_byte           19     9 (fixed)
 19561                           ; jumptable            263     9 (fixed)
 19562                           ;	Chosen strategy is simple_byte
 19563  1E01  3A04               	xorlw	4	; case 4
 19564  1E02  1903               	skipnz
 19565  1E03  2D70               	goto	l9555
 19566  1E04  3A0C               	xorlw	12	; case 8
 19567  1E05  1903               	skipnz
 19568  1E06  2D7A               	goto	l9559
 19569  1E07  2DD5               	goto	l9577
 19570  1E08  0008               	return
 19571  1E09                     __end_of_locked_Main:	
 19572                           
 19573                           	psect	text17
 19574  1E09                     __ptext17:	
 19575 ;; *************** function _menu_Main *****************
 19576 ;; Defined at:
 19577 ;;		line 59 in file "menu_task.c"
 19578 ;; Parameters:    Size  Location     Type
 19579 ;;  taskData        2   50[BANK0 ] PTR void 
 19580 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 19581 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 19582 ;; Auto vars:     Size  Location     Type
 19583 ;;  data            2   55[BANK0 ] PTR struct t_menu_taskDa
 19584 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 19585 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 19586 ;;  buttonPresse    1   54[BANK0 ] unsigned char 
 19587 ;; Return value:  Size  Location     Type
 19588 ;;                  1    wreg      void 
 19589 ;; Registers used:
 19590 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19591 ;; Tracked objects:
 19592 ;;		On entry : 0/0
 19593 ;;		On exit  : 0/0
 19594 ;;		Unchanged: 0/0
 19595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19596 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19597 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19598 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19599 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19600 ;;Total ram usage:        7 bytes
 19601 ;; Hardware stack levels used:    1
 19602 ;; Hardware stack levels required when called:   12
 19603 ;; This function calls:
 19604 ;;		_menu_clear
 19605 ;;		_menu_display_option
 19606 ;;		_menu_run_option
 19607 ;;		_nullifyBadge_buttonsGet
 19608 ;;		_slot_Setup
 19609 ;; This function is called by:
 19610 ;;		_main
 19611 ;;		_scheduler_TaskRun
 19612 ;; This function uses a non-reentrant model
 19613 ;;
 19614                           
 19615                           
 19616                           ;psect for function _menu_Main
 19617  1E09                     _menu_Main:	
 19618                           
 19619                           ;menu_task.c: 60: struct t_menu_taskData *data = (struct t_menu_taskData *) taskData;
 19620                           
 19621                           ;incstack = 0
 19622                           ; Regs used in _menu_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 19623  1E09  0020               	movlb	0	; select bank0
 19624  1E0A  0853               	movf	menu_Main@taskData+1,w
 19625  1E0B  00D8               	movwf	menu_Main@data+1
 19626  1E0C  0852               	movf	menu_Main@taskData,w
 19627  1E0D  00D7               	movwf	menu_Main@data
 19628                           
 19629                           ;menu_task.c: 61: u8 buttonPressed;
 19630                           ;menu_task.c: 63: if ( currentTask != MENU_TASK ){
 19631  1E0E  0021               	movlb	1	; select bank1
 19632  1E0F  083A               	movf	_currentTask^(0+128),w
 19633  1E10  043B               	iorwf	(_currentTask+1)^(0+128),w
 19634  1E11  1903               	btfsc	3,2
 19635  1E12  2E8D               	goto	l8959
 19636                           
 19637                           ;menu_task.c: 65: buttonPressed = nullifyBadge_buttonsGet();
 19638  1E13  31A8  2082  319E   	fcall	_nullifyBadge_buttonsGet
 19639  1E16  0020               	movlb	0	; select bank0
 19640  1E17  00D4               	movwf	??_menu_Main
 19641  1E18  0854               	movf	??_menu_Main,w
 19642  1E19  00D6               	movwf	menu_Main@buttonPressed
 19643                           
 19644                           ;menu_task.c: 66: switch (buttonPressed) {
 19645  1E1A  2E87               	goto	l8957
 19646  1E1B                     l8935:	
 19647                           ;menu_task.c: 67: case 1 | 2 | 8:
 19648                           
 19649                           
 19650                           ;menu_task.c: 68: currentTask = MENU_TASK;
 19651  1E1B  0021               	movlb	1	; select bank1
 19652  1E1C  01BA               	clrf	_currentTask^(0+128)
 19653  1E1D  01BB               	clrf	(_currentTask+1)^(0+128)
 19654                           
 19655                           ;menu_task.c: 69: menu_clear(data);
 19656  1E1E  0020               	movlb	0	; select bank0
 19657  1E1F  0858               	movf	menu_Main@data+1,w
 19658  1E20  00BA               	movwf	menu_clear@data+1
 19659  1E21  0857               	movf	menu_Main@data,w
 19660  1E22  00B9               	movwf	menu_clear@data
 19661  1E23  31AC  2407  319E   	fcall	_menu_clear
 19662                           
 19663                           ;menu_task.c: 72: slot_Setup(slot_taskData);
 19664  1E26  0021               	movlb	1	; select bank1
 19665  1E27  083D               	movf	(_slot_taskData+1)^(0+128),w
 19666  1E28  0020               	movlb	0	; select bank0
 19667  1E29  00B0               	movwf	slot_Setup@taskData+1
 19668  1E2A  0021               	movlb	1	; select bank1
 19669  1E2B  083C               	movf	_slot_taskData^(0+128),w
 19670  1E2C  0020               	movlb	0	; select bank0
 19671  1E2D  00AF               	movwf	slot_Setup@taskData
 19672  1E2E  31AD  2580  319E   	fcall	_slot_Setup
 19673                           
 19674                           ;menu_task.c: 75: data->holdCountA = 1;
 19675  1E31  0020               	movlb	0	; select bank0
 19676  1E32  0857               	movf	menu_Main@data,w
 19677  1E33  0086               	movwf	6
 19678  1E34  0858               	movf	menu_Main@data+1,w
 19679  1E35  0087               	movwf	7
 19680  1E36  3144               	addfsr 1,4
 19681  1E37  3001               	movlw	1
 19682  1E38  3FC0               	movwi [0]fsr1
 19683  1E39  3000               	movlw	0
 19684  1E3A  3FC1               	movwi [1]fsr1
 19685                           
 19686                           ;menu_task.c: 76: data->holdCountB = 1;
 19687  1E3B  0857               	movf	menu_Main@data,w
 19688  1E3C  0086               	movwf	6
 19689  1E3D  0858               	movf	menu_Main@data+1,w
 19690  1E3E  0087               	movwf	7
 19691  1E3F  3146               	addfsr 1,6
 19692  1E40  3001               	movlw	1
 19693  1E41  3FC0               	movwi [0]fsr1
 19694  1E42  3000               	movlw	0
 19695  1E43  3FC1               	movwi [1]fsr1
 19696                           
 19697                           ;menu_task.c: 77: data->holdCountX = 1;
 19698  1E44  0857               	movf	menu_Main@data,w
 19699  1E45  0086               	movwf	6
 19700  1E46  0858               	movf	menu_Main@data+1,w
 19701  1E47  0087               	movwf	7
 19702  1E48  3148               	addfsr 1,8
 19703  1E49  3001               	movlw	1
 19704  1E4A  3FC0               	movwi [0]fsr1
 19705  1E4B  3000               	movlw	0
 19706  1E4C  3FC1               	movwi [1]fsr1
 19707                           
 19708                           ;menu_task.c: 78: data->holdCountY = 1;
 19709  1E4D  0857               	movf	menu_Main@data,w
 19710  1E4E  0086               	movwf	6
 19711  1E4F  0858               	movf	menu_Main@data+1,w
 19712  1E50  0087               	movwf	7
 19713  1E51  314A               	addfsr 1,10
 19714  1E52  3001               	movlw	1
 19715  1E53  3FC0               	movwi [0]fsr1
 19716  1E54  3000               	movlw	0
 19717  1E55  3FC1               	movwi [1]fsr1
 19718                           
 19719                           ;menu_task.c: 80: menu_option_idx = 0;
 19720  1E56  0021               	movlb	1	; select bank1
 19721  1E57  01B6               	clrf	_menu_option_idx^(0+128)
 19722  1E58  01B7               	clrf	(_menu_option_idx+1)^(0+128)
 19723                           
 19724                           ;menu_task.c: 81: menu_display_option(data);
 19725  1E59  0020               	movlb	0	; select bank0
 19726  1E5A  0858               	movf	menu_Main@data+1,w
 19727  1E5B  00CD               	movwf	menu_display_option@data+1
 19728  1E5C  0857               	movf	menu_Main@data,w
 19729  1E5D  00CC               	movwf	menu_display_option@data
 19730  1E5E  31AE  26D9         	fcall	_menu_display_option
 19731                           
 19732                           ;menu_task.c: 82: break;
 19733  1E60  0008               	return
 19734  1E61                     l8953:	
 19735                           ;menu_task.c: 83: default:
 19736                           
 19737                           
 19738                           ;menu_task.c: 85: data->holdCountA = 1;
 19739  1E61  0020               	movlb	0	; select bank0
 19740  1E62  0857               	movf	menu_Main@data,w
 19741  1E63  0086               	movwf	6
 19742  1E64  0858               	movf	menu_Main@data+1,w
 19743  1E65  0087               	movwf	7
 19744  1E66  3144               	addfsr 1,4
 19745  1E67  3001               	movlw	1
 19746  1E68  3FC0               	movwi [0]fsr1
 19747  1E69  3000               	movlw	0
 19748  1E6A  3FC1               	movwi [1]fsr1
 19749                           
 19750                           ;menu_task.c: 86: data->holdCountB = 1;
 19751  1E6B  0857               	movf	menu_Main@data,w
 19752  1E6C  0086               	movwf	6
 19753  1E6D  0858               	movf	menu_Main@data+1,w
 19754  1E6E  0087               	movwf	7
 19755  1E6F  3146               	addfsr 1,6
 19756  1E70  3001               	movlw	1
 19757  1E71  3FC0               	movwi [0]fsr1
 19758  1E72  3000               	movlw	0
 19759  1E73  3FC1               	movwi [1]fsr1
 19760                           
 19761                           ;menu_task.c: 87: data->holdCountX = 1;
 19762  1E74  0857               	movf	menu_Main@data,w
 19763  1E75  0086               	movwf	6
 19764  1E76  0858               	movf	menu_Main@data+1,w
 19765  1E77  0087               	movwf	7
 19766  1E78  3148               	addfsr 1,8
 19767  1E79  3001               	movlw	1
 19768  1E7A  3FC0               	movwi [0]fsr1
 19769  1E7B  3000               	movlw	0
 19770  1E7C  3FC1               	movwi [1]fsr1
 19771                           
 19772                           ;menu_task.c: 88: data->holdCountY = 1;
 19773  1E7D  0857               	movf	menu_Main@data,w
 19774  1E7E  0086               	movwf	6
 19775  1E7F  0858               	movf	menu_Main@data+1,w
 19776  1E80  0087               	movwf	7
 19777  1E81  314A               	addfsr 1,10
 19778  1E82  3001               	movlw	1
 19779  1E83  3FC0               	movwi [0]fsr1
 19780  1E84  3000               	movlw	0
 19781  1E85  3FC1               	movwi [1]fsr1
 19782                           
 19783                           ;menu_task.c: 90: }
 19784                           
 19785                           ;menu_task.c: 89: break;
 19786  1E86  0008               	return
 19787  1E87                     l8957:	
 19788  1E87  0856               	movf	menu_Main@buttonPressed,w
 19789                           
 19790                           ; Switch size 1, requested type "space"
 19791                           ; Number of cases is 1, Range of values is 11 to 11
 19792                           ; switch strategies available:
 19793                           ; Name         Instructions Cycles
 19794                           ; simple_byte            4     3 (average)
 19795                           ; direct_byte           11     9 (fixed)
 19796                           ; jumptable            263     9 (fixed)
 19797                           ;	Chosen strategy is simple_byte
 19798  1E88  3A0B               	xorlw	11	; case 11
 19799  1E89  1903               	skipnz
 19800  1E8A  2E1B               	goto	l8935
 19801  1E8B  2E61               	goto	l8953
 19802                           
 19803                           ;menu_task.c: 91: return;
 19804  1E8C  0008               	return
 19805  1E8D                     l8959:	
 19806                           
 19807                           ;menu_task.c: 92: }
 19808                           ;menu_task.c: 94: buttonPressed = nullifyBadge_buttonsGet();
 19809  1E8D  31A8  2082  319E   	fcall	_nullifyBadge_buttonsGet
 19810  1E90  0020               	movlb	0	; select bank0
 19811  1E91  00D4               	movwf	??_menu_Main
 19812  1E92  0854               	movf	??_menu_Main,w
 19813  1E93  00D6               	movwf	menu_Main@buttonPressed
 19814                           
 19815                           ;menu_task.c: 95: switch (buttonPressed) {
 19816  1E94  2FEE               	goto	l9043
 19817  1E95                     l8961:	
 19818                           ;menu_task.c: 96: case 1:
 19819                           
 19820                           
 19821                           ;menu_task.c: 98: if (data->holdCountA == 0){
 19822  1E95  0857               	movf	menu_Main@data,w
 19823  1E96  0086               	movwf	6
 19824  1E97  0858               	movf	menu_Main@data+1,w
 19825  1E98  0087               	movwf	7
 19826  1E99  3144               	addfsr 1,4
 19827  1E9A  0016               	moviw fsr1++
 19828  1E9B  0401               	iorwf	1,w
 19829  1E9C  1D03               	btfss	3,2
 19830  1E9D  2EAE               	goto	l8969
 19831                           
 19832                           ;menu_task.c: 100: if (menu_option_idx == 0){
 19833  1E9E  0021               	movlb	1	; select bank1
 19834  1E9F  0836               	movf	_menu_option_idx^(0+128),w
 19835  1EA0  0437               	iorwf	(_menu_option_idx+1)^(0+128),w
 19836  1EA1  1D03               	btfss	3,2
 19837  1EA2  2EAA               	goto	l8967
 19838                           
 19839                           ;menu_task.c: 101: menu_option_idx = menu_option_size - 1;
 19840  1EA3  0834               	movf	_menu_option_size^(0+128),w
 19841  1EA4  3EFF               	addlw	255
 19842  1EA5  00B6               	movwf	_menu_option_idx^(0+128)
 19843  1EA6  30FF               	movlw	255
 19844  1EA7  3D35               	addwfc	(_menu_option_size+1)^(0+128),w
 19845  1EA8  00B7               	movwf	(_menu_option_idx+1)^(0+128)
 19846                           
 19847                           ;menu_task.c: 102: }
 19848  1EA9  2EAE               	goto	l8969
 19849  1EAA                     l8967:	
 19850                           
 19851                           ;menu_task.c: 103: else {
 19852                           ;menu_task.c: 104: menu_option_idx -= 1;
 19853  1EAA  3001               	movlw	1
 19854  1EAB  02B6               	subwf	_menu_option_idx^(0+128),f
 19855  1EAC  3000               	movlw	0
 19856  1EAD  3BB7               	subwfb	(_menu_option_idx+1)^(0+128),f
 19857  1EAE                     l8969:	
 19858                           
 19859                           ;menu_task.c: 105: }
 19860                           ;menu_task.c: 106: }
 19861                           ;menu_task.c: 107: menu_display_option(data);
 19862  1EAE  0020               	movlb	0	; select bank0
 19863  1EAF  0858               	movf	menu_Main@data+1,w
 19864  1EB0  00CD               	movwf	menu_display_option@data+1
 19865  1EB1  0857               	movf	menu_Main@data,w
 19866  1EB2  00CC               	movwf	menu_display_option@data
 19867  1EB3  31AE  26D9  319E   	fcall	_menu_display_option
 19868                           
 19869                           ;menu_task.c: 108: data->holdCountA += 1;
 19870  1EB6  0020               	movlb	0	; select bank0
 19871  1EB7  0857               	movf	menu_Main@data,w
 19872  1EB8  0086               	movwf	6
 19873  1EB9  0858               	movf	menu_Main@data+1,w
 19874  1EBA  0087               	movwf	7
 19875  1EBB  3144               	addfsr 1,4
 19876  1EBC  3001               	movlw	1
 19877  1EBD  0781               	addwf	1,f
 19878  1EBE  3141               	addfsr 1,1
 19879  1EBF  1803               	skipnc
 19880  1EC0  0A81               	incf	1,f
 19881                           
 19882                           ;menu_task.c: 109: data->holdCountB = 0;
 19883  1EC1  0857               	movf	menu_Main@data,w
 19884  1EC2  0086               	movwf	6
 19885  1EC3  0858               	movf	menu_Main@data+1,w
 19886  1EC4  0087               	movwf	7
 19887  1EC5  3146               	addfsr 1,6
 19888  1EC6  3000               	movlw	0
 19889  1EC7  3FC0               	movwi [0]fsr1
 19890  1EC8  3FC1               	movwi [1]fsr1
 19891                           
 19892                           ;menu_task.c: 110: data->holdCountX = 0;
 19893  1EC9  0857               	movf	menu_Main@data,w
 19894  1ECA  0086               	movwf	6
 19895  1ECB  0858               	movf	menu_Main@data+1,w
 19896  1ECC  0087               	movwf	7
 19897  1ECD  3148               	addfsr 1,8
 19898  1ECE  3000               	movlw	0
 19899  1ECF  3FC0               	movwi [0]fsr1
 19900  1ED0  3FC1               	movwi [1]fsr1
 19901                           
 19902                           ;menu_task.c: 111: data->holdCountY = 0;
 19903  1ED1  0857               	movf	menu_Main@data,w
 19904  1ED2  0086               	movwf	6
 19905  1ED3  0858               	movf	menu_Main@data+1,w
 19906  1ED4  0087               	movwf	7
 19907  1ED5  314A               	addfsr 1,10
 19908  1ED6  3000               	movlw	0
 19909  1ED7  3FC0               	movwi [0]fsr1
 19910  1ED8  3FC1               	movwi [1]fsr1
 19911                           
 19912                           ;menu_task.c: 112: data->noholdCount = 0;
 19913  1ED9  0857               	movf	menu_Main@data,w
 19914  1EDA  0086               	movwf	6
 19915  1EDB  0858               	movf	menu_Main@data+1,w
 19916  1EDC  0087               	movwf	7
 19917  1EDD  314C               	addfsr 1,12
 19918  1EDE  3000               	movlw	0
 19919  1EDF  3FC0               	movwi [0]fsr1
 19920  1EE0  3FC1               	movwi [1]fsr1
 19921                           
 19922                           ;menu_task.c: 113: break;
 19923  1EE1  0008               	return
 19924  1EE2                     l8981:	
 19925                           ;menu_task.c: 114: case 2:
 19926                           
 19927                           
 19928                           ;menu_task.c: 116: if (data->holdCountB == 0){
 19929  1EE2  0857               	movf	menu_Main@data,w
 19930  1EE3  0086               	movwf	6
 19931  1EE4  0858               	movf	menu_Main@data+1,w
 19932  1EE5  0087               	movwf	7
 19933  1EE6  3146               	addfsr 1,6
 19934  1EE7  0016               	moviw fsr1++
 19935  1EE8  0401               	iorwf	1,w
 19936  1EE9  1D03               	btfss	3,2
 19937  1EEA  2F0A               	goto	l8989
 19938                           
 19939                           ;menu_task.c: 118: if (menu_option_idx == menu_option_size - 1){
 19940  1EEB  0021               	movlb	1	; select bank1
 19941  1EEC  0834               	movf	_menu_option_size^(0+128),w
 19942  1EED  3EFF               	addlw	255
 19943  1EEE  0020               	movlb	0	; select bank0
 19944  1EEF  00D4               	movwf	??_menu_Main
 19945  1EF0  30FF               	movlw	255
 19946  1EF1  0021               	movlb	1	; select bank1
 19947  1EF2  3D35               	addwfc	(_menu_option_size+1)^(0+128),w
 19948  1EF3  0020               	movlb	0	; select bank0
 19949  1EF4  00D5               	movwf	??_menu_Main+1
 19950  1EF5  0021               	movlb	1	; select bank1
 19951  1EF6  0837               	movf	(_menu_option_idx+1)^(0+128),w
 19952  1EF7  0020               	movlb	0	; select bank0
 19953  1EF8  0655               	xorwf	??_menu_Main+1,w
 19954  1EF9  1D03               	skipz
 19955  1EFA  2EFF               	goto	u5545
 19956  1EFB  0021               	movlb	1	; select bank1
 19957  1EFC  0836               	movf	_menu_option_idx^(0+128),w
 19958  1EFD  0020               	movlb	0	; select bank0
 19959  1EFE  0654               	xorwf	??_menu_Main,w
 19960  1EFF                     u5545:	
 19961  1EFF  1D03               	skipz
 19962  1F00  2F05               	goto	l8987
 19963                           
 19964                           ;menu_task.c: 119: menu_option_idx = 0;
 19965  1F01  0021               	movlb	1	; select bank1
 19966  1F02  01B6               	clrf	_menu_option_idx^(0+128)
 19967  1F03  01B7               	clrf	(_menu_option_idx+1)^(0+128)
 19968                           
 19969                           ;menu_task.c: 120: }
 19970  1F04  2F0A               	goto	l8989
 19971  1F05                     l8987:	
 19972                           
 19973                           ;menu_task.c: 121: else {
 19974                           ;menu_task.c: 122: menu_option_idx += 1;
 19975  1F05  3001               	movlw	1
 19976  1F06  0021               	movlb	1	; select bank1
 19977  1F07  07B6               	addwf	_menu_option_idx^(0+128),f
 19978  1F08  3000               	movlw	0
 19979  1F09  3DB7               	addwfc	(_menu_option_idx+1)^(0+128),f
 19980  1F0A                     l8989:	
 19981                           
 19982                           ;menu_task.c: 123: }
 19983                           ;menu_task.c: 124: }
 19984                           ;menu_task.c: 125: menu_display_option(data);
 19985  1F0A  0020               	movlb	0	; select bank0
 19986  1F0B  0858               	movf	menu_Main@data+1,w
 19987  1F0C  00CD               	movwf	menu_display_option@data+1
 19988  1F0D  0857               	movf	menu_Main@data,w
 19989  1F0E  00CC               	movwf	menu_display_option@data
 19990  1F0F  31AE  26D9  319E   	fcall	_menu_display_option
 19991                           
 19992                           ;menu_task.c: 126: data->holdCountA = 0;
 19993  1F12  0020               	movlb	0	; select bank0
 19994  1F13  0857               	movf	menu_Main@data,w
 19995  1F14  0086               	movwf	6
 19996  1F15  0858               	movf	menu_Main@data+1,w
 19997  1F16  0087               	movwf	7
 19998  1F17  3144               	addfsr 1,4
 19999  1F18  3000               	movlw	0
 20000  1F19  3FC0               	movwi [0]fsr1
 20001  1F1A  3FC1               	movwi [1]fsr1
 20002                           
 20003                           ;menu_task.c: 127: data->holdCountB += 1;
 20004  1F1B  0857               	movf	menu_Main@data,w
 20005  1F1C  0086               	movwf	6
 20006  1F1D  0858               	movf	menu_Main@data+1,w
 20007  1F1E  0087               	movwf	7
 20008  1F1F  3146               	addfsr 1,6
 20009  1F20  3001               	movlw	1
 20010  1F21  0781               	addwf	1,f
 20011  1F22  3141               	addfsr 1,1
 20012  1F23  1803               	skipnc
 20013  1F24  0A81               	incf	1,f
 20014                           
 20015                           ;menu_task.c: 128: data->holdCountX = 0;
 20016  1F25  0857               	movf	menu_Main@data,w
 20017  1F26  0086               	movwf	6
 20018  1F27  0858               	movf	menu_Main@data+1,w
 20019  1F28  0087               	movwf	7
 20020  1F29  3148               	addfsr 1,8
 20021  1F2A  3000               	movlw	0
 20022  1F2B  3FC0               	movwi [0]fsr1
 20023  1F2C  3FC1               	movwi [1]fsr1
 20024                           
 20025                           ;menu_task.c: 129: data->holdCountY = 0;
 20026  1F2D  0857               	movf	menu_Main@data,w
 20027  1F2E  0086               	movwf	6
 20028  1F2F  0858               	movf	menu_Main@data+1,w
 20029  1F30  0087               	movwf	7
 20030  1F31  314A               	addfsr 1,10
 20031  1F32  3000               	movlw	0
 20032  1F33  3FC0               	movwi [0]fsr1
 20033  1F34  3FC1               	movwi [1]fsr1
 20034                           
 20035                           ;menu_task.c: 130: data->noholdCount = 0;
 20036  1F35  0857               	movf	menu_Main@data,w
 20037  1F36  0086               	movwf	6
 20038  1F37  0858               	movf	menu_Main@data+1,w
 20039  1F38  0087               	movwf	7
 20040  1F39  314C               	addfsr 1,12
 20041  1F3A  3000               	movlw	0
 20042  1F3B  3FC0               	movwi [0]fsr1
 20043  1F3C  3FC1               	movwi [1]fsr1
 20044                           
 20045                           ;menu_task.c: 131: break;
 20046  1F3D  0008               	return
 20047  1F3E                     l9001:	
 20048                           ;menu_task.c: 132: case 4:
 20049                           
 20050                           
 20051                           ;menu_task.c: 133: if (data->holdCountX == 0){
 20052  1F3E  0857               	movf	menu_Main@data,w
 20053  1F3F  0086               	movwf	6
 20054  1F40  0858               	movf	menu_Main@data+1,w
 20055  1F41  0087               	movwf	7
 20056  1F42  3148               	addfsr 1,8
 20057  1F43  0016               	moviw fsr1++
 20058  1F44  0401               	iorwf	1,w
 20059  1F45  1D03               	btfss	3,2
 20060  1F46  2F53               	goto	l9007
 20061                           
 20062                           ;menu_task.c: 135: menu_clear(data);
 20063  1F47  0858               	movf	menu_Main@data+1,w
 20064  1F48  00BA               	movwf	menu_clear@data+1
 20065  1F49  0857               	movf	menu_Main@data,w
 20066  1F4A  00B9               	movwf	menu_clear@data
 20067  1F4B  31AC  2407  319E   	fcall	_menu_clear
 20068                           
 20069                           ;menu_task.c: 136: currentTask = FLASHY_TASK;
 20070  1F4E  3002               	movlw	2
 20071  1F4F  0021               	movlb	1	; select bank1
 20072  1F50  00BA               	movwf	_currentTask^(0+128)
 20073  1F51  3000               	movlw	0
 20074  1F52  00BB               	movwf	(_currentTask^(0+128)+1)
 20075  1F53                     l9007:	
 20076                           
 20077                           ;menu_task.c: 137: }
 20078                           ;menu_task.c: 138: data->holdCountA = 0;
 20079  1F53  0020               	movlb	0	; select bank0
 20080  1F54  0857               	movf	menu_Main@data,w
 20081  1F55  0086               	movwf	6
 20082  1F56  0858               	movf	menu_Main@data+1,w
 20083  1F57  0087               	movwf	7
 20084  1F58  3144               	addfsr 1,4
 20085  1F59  3000               	movlw	0
 20086  1F5A  3FC0               	movwi [0]fsr1
 20087  1F5B  3FC1               	movwi [1]fsr1
 20088                           
 20089                           ;menu_task.c: 139: data->holdCountB = 0;
 20090  1F5C  0857               	movf	menu_Main@data,w
 20091  1F5D  0086               	movwf	6
 20092  1F5E  0858               	movf	menu_Main@data+1,w
 20093  1F5F  0087               	movwf	7
 20094  1F60  3146               	addfsr 1,6
 20095  1F61  3000               	movlw	0
 20096  1F62  3FC0               	movwi [0]fsr1
 20097  1F63  3FC1               	movwi [1]fsr1
 20098                           
 20099                           ;menu_task.c: 140: data->holdCountX += 1;
 20100  1F64  0857               	movf	menu_Main@data,w
 20101  1F65  0086               	movwf	6
 20102  1F66  0858               	movf	menu_Main@data+1,w
 20103  1F67  0087               	movwf	7
 20104  1F68  3148               	addfsr 1,8
 20105  1F69  3001               	movlw	1
 20106  1F6A  0781               	addwf	1,f
 20107  1F6B  3141               	addfsr 1,1
 20108  1F6C  1803               	skipnc
 20109  1F6D  0A81               	incf	1,f
 20110                           
 20111                           ;menu_task.c: 141: data->holdCountY = 0;
 20112  1F6E  0857               	movf	menu_Main@data,w
 20113  1F6F  0086               	movwf	6
 20114  1F70  0858               	movf	menu_Main@data+1,w
 20115  1F71  0087               	movwf	7
 20116  1F72  314A               	addfsr 1,10
 20117  1F73  3000               	movlw	0
 20118  1F74  3FC0               	movwi [0]fsr1
 20119  1F75  3FC1               	movwi [1]fsr1
 20120                           
 20121                           ;menu_task.c: 142: data->noholdCount = 0;
 20122  1F76  0857               	movf	menu_Main@data,w
 20123  1F77  0086               	movwf	6
 20124  1F78  0858               	movf	menu_Main@data+1,w
 20125  1F79  0087               	movwf	7
 20126  1F7A  314C               	addfsr 1,12
 20127  1F7B  3000               	movlw	0
 20128  1F7C  3FC0               	movwi [0]fsr1
 20129  1F7D  3FC1               	movwi [1]fsr1
 20130                           
 20131                           ;menu_task.c: 143: break;
 20132  1F7E  0008               	return
 20133  1F7F                     l9017:	
 20134                           ;menu_task.c: 144: case 8:
 20135                           
 20136                           
 20137                           ;menu_task.c: 145: if (data->holdCountY == 0){
 20138  1F7F  0857               	movf	menu_Main@data,w
 20139  1F80  0086               	movwf	6
 20140  1F81  0858               	movf	menu_Main@data+1,w
 20141  1F82  0087               	movwf	7
 20142  1F83  314A               	addfsr 1,10
 20143  1F84  0016               	moviw fsr1++
 20144  1F85  0401               	iorwf	1,w
 20145  1F86  1D03               	btfss	3,2
 20146  1F87  2F8F               	goto	l9021
 20147                           
 20148                           ;menu_task.c: 146: menu_run_option(data);
 20149  1F88  0858               	movf	menu_Main@data+1,w
 20150  1F89  00BC               	movwf	menu_run_option@data+1
 20151  1F8A  0857               	movf	menu_Main@data,w
 20152  1F8B  00BB               	movwf	menu_run_option@data
 20153  1F8C  31AC  2496  319E   	fcall	_menu_run_option
 20154  1F8F                     l9021:	
 20155                           
 20156                           ;menu_task.c: 147: }
 20157                           ;menu_task.c: 148: data->holdCountA = 0;
 20158  1F8F  0020               	movlb	0	; select bank0
 20159  1F90  0857               	movf	menu_Main@data,w
 20160  1F91  0086               	movwf	6
 20161  1F92  0858               	movf	menu_Main@data+1,w
 20162  1F93  0087               	movwf	7
 20163  1F94  3144               	addfsr 1,4
 20164  1F95  3000               	movlw	0
 20165  1F96  3FC0               	movwi [0]fsr1
 20166  1F97  3FC1               	movwi [1]fsr1
 20167                           
 20168                           ;menu_task.c: 149: data->holdCountB = 0;
 20169  1F98  0857               	movf	menu_Main@data,w
 20170  1F99  0086               	movwf	6
 20171  1F9A  0858               	movf	menu_Main@data+1,w
 20172  1F9B  0087               	movwf	7
 20173  1F9C  3146               	addfsr 1,6
 20174  1F9D  3000               	movlw	0
 20175  1F9E  3FC0               	movwi [0]fsr1
 20176  1F9F  3FC1               	movwi [1]fsr1
 20177                           
 20178                           ;menu_task.c: 150: data->holdCountX = 0;
 20179  1FA0  0857               	movf	menu_Main@data,w
 20180  1FA1  0086               	movwf	6
 20181  1FA2  0858               	movf	menu_Main@data+1,w
 20182  1FA3  0087               	movwf	7
 20183  1FA4  3148               	addfsr 1,8
 20184  1FA5  3000               	movlw	0
 20185  1FA6  3FC0               	movwi [0]fsr1
 20186  1FA7  3FC1               	movwi [1]fsr1
 20187                           
 20188                           ;menu_task.c: 151: data->holdCountY += 1;
 20189  1FA8  0857               	movf	menu_Main@data,w
 20190  1FA9  0086               	movwf	6
 20191  1FAA  0858               	movf	menu_Main@data+1,w
 20192  1FAB  0087               	movwf	7
 20193  1FAC  314A               	addfsr 1,10
 20194  1FAD  3001               	movlw	1
 20195  1FAE  0781               	addwf	1,f
 20196  1FAF  3141               	addfsr 1,1
 20197  1FB0  1803               	skipnc
 20198  1FB1  0A81               	incf	1,f
 20199                           
 20200                           ;menu_task.c: 152: data->noholdCount = 0;
 20201  1FB2  0857               	movf	menu_Main@data,w
 20202  1FB3  0086               	movwf	6
 20203  1FB4  0858               	movf	menu_Main@data+1,w
 20204  1FB5  0087               	movwf	7
 20205  1FB6  314C               	addfsr 1,12
 20206  1FB7  3000               	movlw	0
 20207  1FB8  3FC0               	movwi [0]fsr1
 20208  1FB9  3FC1               	movwi [1]fsr1
 20209                           
 20210                           ;menu_task.c: 153: break;
 20211  1FBA  0008               	return
 20212  1FBB                     l9031:	
 20213                           ;menu_task.c: 155: default:
 20214                           
 20215                           ;menu_task.c: 154: case 1 | 2 | 8:
 20216                           
 20217                           
 20218                           ;menu_task.c: 156: menu_display_option(data);
 20219  1FBB  0858               	movf	menu_Main@data+1,w
 20220  1FBC  00CD               	movwf	menu_display_option@data+1
 20221  1FBD  0857               	movf	menu_Main@data,w
 20222  1FBE  00CC               	movwf	menu_display_option@data
 20223  1FBF  31AE  26D9  319E   	fcall	_menu_display_option
 20224                           
 20225                           ;menu_task.c: 157: data->holdCountA = 0;
 20226  1FC2  0020               	movlb	0	; select bank0
 20227  1FC3  0857               	movf	menu_Main@data,w
 20228  1FC4  0086               	movwf	6
 20229  1FC5  0858               	movf	menu_Main@data+1,w
 20230  1FC6  0087               	movwf	7
 20231  1FC7  3144               	addfsr 1,4
 20232  1FC8  3000               	movlw	0
 20233  1FC9  3FC0               	movwi [0]fsr1
 20234  1FCA  3FC1               	movwi [1]fsr1
 20235                           
 20236                           ;menu_task.c: 158: data->holdCountB = 0;
 20237  1FCB  0857               	movf	menu_Main@data,w
 20238  1FCC  0086               	movwf	6
 20239  1FCD  0858               	movf	menu_Main@data+1,w
 20240  1FCE  0087               	movwf	7
 20241  1FCF  3146               	addfsr 1,6
 20242  1FD0  3000               	movlw	0
 20243  1FD1  3FC0               	movwi [0]fsr1
 20244  1FD2  3FC1               	movwi [1]fsr1
 20245                           
 20246                           ;menu_task.c: 159: data->holdCountX = 0;
 20247  1FD3  0857               	movf	menu_Main@data,w
 20248  1FD4  0086               	movwf	6
 20249  1FD5  0858               	movf	menu_Main@data+1,w
 20250  1FD6  0087               	movwf	7
 20251  1FD7  3148               	addfsr 1,8
 20252  1FD8  3000               	movlw	0
 20253  1FD9  3FC0               	movwi [0]fsr1
 20254  1FDA  3FC1               	movwi [1]fsr1
 20255                           
 20256                           ;menu_task.c: 160: data->holdCountY = 0;
 20257  1FDB  0857               	movf	menu_Main@data,w
 20258  1FDC  0086               	movwf	6
 20259  1FDD  0858               	movf	menu_Main@data+1,w
 20260  1FDE  0087               	movwf	7
 20261  1FDF  314A               	addfsr 1,10
 20262  1FE0  3000               	movlw	0
 20263  1FE1  3FC0               	movwi [0]fsr1
 20264  1FE2  3FC1               	movwi [1]fsr1
 20265                           
 20266                           ;menu_task.c: 161: data->noholdCount += 1;
 20267  1FE3  0857               	movf	menu_Main@data,w
 20268  1FE4  0086               	movwf	6
 20269  1FE5  0858               	movf	menu_Main@data+1,w
 20270  1FE6  0087               	movwf	7
 20271  1FE7  314C               	addfsr 1,12
 20272  1FE8  3001               	movlw	1
 20273  1FE9  0781               	addwf	1,f
 20274  1FEA  3141               	addfsr 1,1
 20275  1FEB  1803               	skipnc
 20276  1FEC  0A81               	incf	1,f
 20277                           
 20278                           ;menu_task.c: 162: }
 20279  1FED  0008               	return
 20280  1FEE                     l9043:	
 20281  1FEE  0856               	movf	menu_Main@buttonPressed,w
 20282                           
 20283                           ; Switch size 1, requested type "space"
 20284                           ; Number of cases is 5, Range of values is 1 to 11
 20285                           ; switch strategies available:
 20286                           ; Name         Instructions Cycles
 20287                           ; simple_byte           16     9 (average)
 20288                           ; direct_byte           31     9 (fixed)
 20289                           ; jumptable            263     9 (fixed)
 20290                           ;	Chosen strategy is simple_byte
 20291  1FEF  3A01               	xorlw	1	; case 1
 20292  1FF0  1903               	skipnz
 20293  1FF1  2E95               	goto	l8961
 20294  1FF2  3A03               	xorlw	3	; case 2
 20295  1FF3  1903               	skipnz
 20296  1FF4  2EE2               	goto	l8981
 20297  1FF5  3A06               	xorlw	6	; case 4
 20298  1FF6  1903               	skipnz
 20299  1FF7  2F3E               	goto	l9001
 20300  1FF8  3A0C               	xorlw	12	; case 8
 20301  1FF9  1903               	skipnz
 20302  1FFA  2F7F               	goto	l9017
 20303  1FFB  3A03               	xorlw	3	; case 11
 20304  1FFC  1903               	skipnz
 20305  1FFD  2FBB               	goto	l9031
 20306  1FFE  2FBB               	goto	l9031
 20307  1FFF  0008               	return
 20308  2000                     __end_of_menu_Main:	
 20309                           
 20310                           	psect	text18
 20311  0819                     __ptext18:	
 20312 ;; *************** function _flashy_Main *****************
 20313 ;; Defined at:
 20314 ;;		line 122 in file "flashy_task.c"
 20315 ;; Parameters:    Size  Location     Type
 20316 ;;  taskData        2   50[BANK0 ] PTR void 
 20317 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 20318 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 20319 ;; Auto vars:     Size  Location     Type
 20320 ;;  hit_counter     6   54[BANK0 ] unsigned char [6]
 20321 ;;  data            2   62[BANK0 ] PTR struct t_flashy_task
 20322 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 20323 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 20324 ;;  buttonPresse    2   60[BANK0 ] unsigned int 
 20325 ;; Return value:  Size  Location     Type
 20326 ;;                  1    wreg      void 
 20327 ;; Registers used:
 20328 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20329 ;; Tracked objects:
 20330 ;;		On entry : 0/0
 20331 ;;		On exit  : 0/0
 20332 ;;		Unchanged: 0/0
 20333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20334 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20335 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20336 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20337 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20338 ;;Total ram usage:       14 bytes
 20339 ;; Hardware stack levels used:    1
 20340 ;; Hardware stack levels required when called:   11
 20341 ;; This function calls:
 20342 ;;		_flashy_display_option
 20343 ;;		_led_Parody
 20344 ;;		_led_circle
 20345 ;;		_led_curtain
 20346 ;;		_led_rand
 20347 ;;		_led_roundabout
 20348 ;;		_let_alternate
 20349 ;;		_marquee
 20350 ;;		_nullifyBadge_buttonsGet
 20351 ;;		_nullifyBadge_irGet
 20352 ;;		_nullifyBadge_irTxClr
 20353 ;;		_nullifyBadge_irTxRegister
 20354 ;;		_nullifyBadge_irTxRelease
 20355 ;;		_nullifyBadge_irTxSet
 20356 ;;		_nullifyBadge_segDisplayForceUpdate
 20357 ;;		_nullifyBadge_segDisplayPutStr
 20358 ;;		_nullifyBadge_userLedsSet
 20359 ;;		_sprintf
 20360 ;; This function is called by:
 20361 ;;		_main
 20362 ;;		_scheduler_TaskRun
 20363 ;; This function uses a non-reentrant model
 20364 ;;
 20365                           
 20366                           
 20367                           ;psect for function _flashy_Main
 20368  0819                     _flashy_Main:	
 20369                           
 20370                           ;flashy_task.c: 123: struct t_flashy_taskData *data = (struct t_flashy_taskData *) taskD
      +                          ata;
 20371                           
 20372                           ;incstack = 0
 20373                           ; Regs used in _flashy_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 20374  0819  0020               	movlb	0	; select bank0
 20375  081A  0853               	movf	flashy_Main@taskData+1,w
 20376  081B  00DF               	movwf	flashy_Main@data+1
 20377  081C  0852               	movf	flashy_Main@taskData,w
 20378  081D  00DE               	movwf	flashy_Main@data
 20379                           
 20380                           ;flashy_task.c: 124: u16 buttonPressed;
 20381                           ;flashy_task.c: 125: char hit_counter[6];
 20382                           ;flashy_task.c: 127: if ( currentTask != FLASHY_TASK ){
 20383  081E  3002               	movlw	2
 20384  081F  0021               	movlb	1	; select bank1
 20385  0820  063A               	xorwf	_currentTask^(0+128),w
 20386  0821  043B               	iorwf	(_currentTask+1)^(0+128),w
 20387  0822  1903               	btfsc	3,2
 20388  0823  28C6               	goto	l9081
 20389                           
 20390                           ;flashy_task.c: 128: data->holdCountA = 1;
 20391  0824  0020               	movlb	0	; select bank0
 20392  0825  085E               	movf	flashy_Main@data,w
 20393  0826  0086               	movwf	6
 20394  0827  085F               	movf	flashy_Main@data+1,w
 20395  0828  0087               	movwf	7
 20396  0829  314A               	addfsr 1,10
 20397  082A  3001               	movlw	1
 20398  082B  3FC0               	movwi [0]fsr1
 20399  082C  3000               	movlw	0
 20400  082D  3FC1               	movwi [1]fsr1
 20401                           
 20402                           ;flashy_task.c: 129: data->holdCountB = 1;
 20403  082E  085E               	movf	flashy_Main@data,w
 20404  082F  0086               	movwf	6
 20405  0830  085F               	movf	flashy_Main@data+1,w
 20406  0831  0087               	movwf	7
 20407  0832  314C               	addfsr 1,12
 20408  0833  3001               	movlw	1
 20409  0834  3FC0               	movwi [0]fsr1
 20410  0835  3000               	movlw	0
 20411  0836  3FC1               	movwi [1]fsr1
 20412                           
 20413                           ;flashy_task.c: 130: data->holdCountX = 1;
 20414  0837  085E               	movf	flashy_Main@data,w
 20415  0838  0086               	movwf	6
 20416  0839  085F               	movf	flashy_Main@data+1,w
 20417  083A  0087               	movwf	7
 20418  083B  314E               	addfsr 1,14
 20419  083C  3001               	movlw	1
 20420  083D  3FC0               	movwi [0]fsr1
 20421  083E  3000               	movlw	0
 20422  083F  3FC1               	movwi [1]fsr1
 20423                           
 20424                           ;flashy_task.c: 131: data->holdCountY = 1;
 20425  0840  085E               	movf	flashy_Main@data,w
 20426  0841  0086               	movwf	6
 20427  0842  085F               	movf	flashy_Main@data+1,w
 20428  0843  0087               	movwf	7
 20429  0844  3150               	addfsr 1,16
 20430  0845  3001               	movlw	1
 20431  0846  3FC0               	movwi [0]fsr1
 20432  0847  3000               	movlw	0
 20433  0848  3FC1               	movwi [1]fsr1
 20434                           
 20435                           ;flashy_task.c: 132: data->holdCountXY = 1;
 20436  0849  085E               	movf	flashy_Main@data,w
 20437  084A  0086               	movwf	6
 20438  084B  085F               	movf	flashy_Main@data+1,w
 20439  084C  0087               	movwf	7
 20440  084D  3152               	addfsr 1,18
 20441  084E  3001               	movlw	1
 20442  084F  3FC0               	movwi [0]fsr1
 20443  0850  3000               	movlw	0
 20444  0851  3FC1               	movwi [1]fsr1
 20445                           
 20446                           ;flashy_task.c: 133: data->holdCountAY = 1;
 20447  0852  085E               	movf	flashy_Main@data,w
 20448  0853  0086               	movwf	6
 20449  0854  085F               	movf	flashy_Main@data+1,w
 20450  0855  0087               	movwf	7
 20451  0856  3154               	addfsr 1,20
 20452  0857  3001               	movlw	1
 20453  0858  3FC0               	movwi [0]fsr1
 20454  0859  3000               	movlw	0
 20455  085A  3FC1               	movwi [1]fsr1
 20456                           
 20457                           ;flashy_task.c: 134: data->holdCountAX = 1;
 20458  085B  085E               	movf	flashy_Main@data,w
 20459  085C  0086               	movwf	6
 20460  085D  085F               	movf	flashy_Main@data+1,w
 20461  085E  0087               	movwf	7
 20462  085F  3156               	addfsr 1,22
 20463  0860  3001               	movlw	1
 20464  0861  3FC0               	movwi [0]fsr1
 20465  0862  3000               	movlw	0
 20466  0863  3FC1               	movwi [1]fsr1
 20467                           
 20468                           ;flashy_task.c: 135: return;
 20469  0864  0008               	return
 20470  0865                     l9053:	
 20471                           ;flashy_task.c: 142: case SECRET_VALUE_TEST:
 20472                           
 20473                           ;flashy_task.c: 141: break;
 20474                           
 20475                           ;flashy_task.c: 140: case SECRET_VALUE_INIT:
 20476                           
 20477                           ;flashy_task.c: 136: }
 20478                           ;flashy_task.c: 139: switch (secret_value){
 20479                           
 20480                           
 20481                           ;flashy_task.c: 143: secret_value = SECRET_VALUE_INIT;
 20482  0865  0021               	movlb	1	; select bank1
 20483  0866  01C5               	clrf	_secret_value^(0+128)
 20484  0867  01C6               	clrf	(_secret_value+1)^(0+128)
 20485                           
 20486                           ;flashy_task.c: 144: data->displayTickCount = 0;
 20487  0868  0020               	movlb	0	; select bank0
 20488  0869  085E               	movf	flashy_Main@data,w
 20489  086A  0086               	movwf	6
 20490  086B  085F               	movf	flashy_Main@data+1,w
 20491  086C  0087               	movwf	7
 20492  086D  3144               	addfsr 1,4
 20493  086E  3000               	movlw	0
 20494  086F  3FC0               	movwi [0]fsr1
 20495  0870  3FC1               	movwi [1]fsr1
 20496                           
 20497                           ;flashy_task.c: 145: data->display_state = FLASHY_STATE_DISPLAY_SECRET_TEST;
 20498  0871  085E               	movf	flashy_Main@data,w
 20499  0872  3E06               	addlw	6
 20500  0873  00D4               	movwf	??_flashy_Main
 20501  0874  3000               	movlw	0
 20502  0875  3D5F               	addwfc	flashy_Main@data+1,w
 20503  0876  00D5               	movwf	??_flashy_Main+1
 20504  0877  0854               	movf	??_flashy_Main,w
 20505  0878  0086               	movwf	6
 20506  0879  0855               	movf	??_flashy_Main+1,w
 20507  087A  0087               	movwf	7
 20508  087B  3005               	movlw	5
 20509  087C  0081               	movwf	1
 20510                           
 20511                           ;flashy_task.c: 147: data->holdCountA = 1;
 20512  087D  085E               	movf	flashy_Main@data,w
 20513  087E  0086               	movwf	6
 20514  087F  085F               	movf	flashy_Main@data+1,w
 20515  0880  0087               	movwf	7
 20516  0881  314A               	addfsr 1,10
 20517  0882  3001               	movlw	1
 20518  0883  3FC0               	movwi [0]fsr1
 20519  0884  3000               	movlw	0
 20520  0885  3FC1               	movwi [1]fsr1
 20521                           
 20522                           ;flashy_task.c: 148: data->holdCountB = 1;
 20523  0886  085E               	movf	flashy_Main@data,w
 20524  0887  0086               	movwf	6
 20525  0888  085F               	movf	flashy_Main@data+1,w
 20526  0889  0087               	movwf	7
 20527  088A  314C               	addfsr 1,12
 20528  088B  3001               	movlw	1
 20529  088C  3FC0               	movwi [0]fsr1
 20530  088D  3000               	movlw	0
 20531  088E  3FC1               	movwi [1]fsr1
 20532                           
 20533                           ;flashy_task.c: 149: data->holdCountX = 1;
 20534  088F  085E               	movf	flashy_Main@data,w
 20535  0890  0086               	movwf	6
 20536  0891  085F               	movf	flashy_Main@data+1,w
 20537  0892  0087               	movwf	7
 20538  0893  314E               	addfsr 1,14
 20539  0894  3001               	movlw	1
 20540  0895  3FC0               	movwi [0]fsr1
 20541  0896  3000               	movlw	0
 20542  0897  3FC1               	movwi [1]fsr1
 20543                           
 20544                           ;flashy_task.c: 150: data->holdCountY = 1;
 20545  0898  085E               	movf	flashy_Main@data,w
 20546  0899  0086               	movwf	6
 20547  089A  085F               	movf	flashy_Main@data+1,w
 20548  089B  0087               	movwf	7
 20549  089C  3150               	addfsr 1,16
 20550  089D  3001               	movlw	1
 20551  089E  3FC0               	movwi [0]fsr1
 20552  089F  3000               	movlw	0
 20553  08A0  3FC1               	movwi [1]fsr1
 20554                           
 20555                           ;flashy_task.c: 151: data->holdCountXY = 1;
 20556  08A1  085E               	movf	flashy_Main@data,w
 20557  08A2  0086               	movwf	6
 20558  08A3  085F               	movf	flashy_Main@data+1,w
 20559  08A4  0087               	movwf	7
 20560  08A5  3152               	addfsr 1,18
 20561  08A6  3001               	movlw	1
 20562  08A7  3FC0               	movwi [0]fsr1
 20563  08A8  3000               	movlw	0
 20564  08A9  3FC1               	movwi [1]fsr1
 20565                           
 20566                           ;flashy_task.c: 152: data->holdCountAY = 1;
 20567  08AA  085E               	movf	flashy_Main@data,w
 20568  08AB  0086               	movwf	6
 20569  08AC  085F               	movf	flashy_Main@data+1,w
 20570  08AD  0087               	movwf	7
 20571  08AE  3154               	addfsr 1,20
 20572  08AF  3001               	movlw	1
 20573  08B0  3FC0               	movwi [0]fsr1
 20574  08B1  3000               	movlw	0
 20575  08B2  3FC1               	movwi [1]fsr1
 20576                           
 20577                           ;flashy_task.c: 153: data->holdCountAX = 1;
 20578  08B3  085E               	movf	flashy_Main@data,w
 20579  08B4  0086               	movwf	6
 20580  08B5  085F               	movf	flashy_Main@data+1,w
 20581  08B6  0087               	movwf	7
 20582  08B7  3156               	addfsr 1,22
 20583  08B8  3001               	movlw	1
 20584  08B9  3FC0               	movwi [0]fsr1
 20585  08BA  3000               	movlw	0
 20586  08BB  3FC1               	movwi [1]fsr1
 20587                           
 20588                           ;flashy_task.c: 154: data->noholdCount = 1;
 20589  08BC  085E               	movf	flashy_Main@data,w
 20590  08BD  0086               	movwf	6
 20591  08BE  085F               	movf	flashy_Main@data+1,w
 20592  08BF  0087               	movwf	7
 20593  08C0  315C               	addfsr 1,28
 20594  08C1  3001               	movlw	1
 20595  08C2  3FC0               	movwi [0]fsr1
 20596  08C3  3000               	movlw	0
 20597  08C4  3FC1               	movwi [1]fsr1
 20598                           
 20599                           ;flashy_task.c: 155: return;
 20600  08C5  0008               	return
 20601  08C6                     l9081:	
 20602                           ;flashy_task.c: 157: }
 20603                           
 20604                           ;flashy_task.c: 156: break;
 20605                           
 20606                           
 20607                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 20608                           ; Switch size 1, requested type "space"
 20609                           ; Number of cases is 1, Range of values is 0 to 0
 20610                           ; switch strategies available:
 20611                           ; Name         Instructions Cycles
 20612                           ; simple_byte            4     3 (average)
 20613                           ; direct_byte            8     6 (fixed)
 20614                           ; jumptable            260     6 (fixed)
 20615                           ;	Chosen strategy is simple_byte
 20616  08C6  0021               	movlb	1	; select bank1
 20617  08C7  0846               	movf	(_secret_value+1)^(0+128),w
 20618  08C8  3A00               	xorlw	0	; case 0
 20619  08C9  1903               	skipnz
 20620  08CA  28CC               	goto	l10801
 20621  08CB  29C4               	goto	l9151
 20622  08CC                     l10801:	
 20623                           
 20624                           ; Switch size 1, requested type "space"
 20625                           ; Number of cases is 2, Range of values is 0 to 1
 20626                           ; switch strategies available:
 20627                           ; Name         Instructions Cycles
 20628                           ; simple_byte            7     4 (average)
 20629                           ; direct_byte           10     6 (fixed)
 20630                           ; jumptable            260     6 (fixed)
 20631                           ;	Chosen strategy is simple_byte
 20632  08CC  0845               	movf	_secret_value^(0+128),w
 20633  08CD  3A00               	xorlw	0	; case 0
 20634  08CE  1903               	skipnz
 20635  08CF  29C4               	goto	l9151
 20636  08D0  3A01               	xorlw	1	; case 1
 20637  08D1  1903               	skipnz
 20638  08D2  2865               	goto	l9053
 20639  08D3  29C4               	goto	l9151
 20640                           
 20641                           ;flashy_task.c: 160: switch (data->led_state){
 20642  08D4  29C4               	goto	l9151
 20643  08D5                     l9083:	
 20644                           ;flashy_task.c: 161: case FLASHY_STATE_LED_ROUNDABOUT:
 20645                           
 20646                           
 20647                           ;flashy_task.c: 162: if (data->delayTickCount == 0){
 20648  08D5  0020               	movlb	0	; select bank0
 20649  08D6  085E               	movf	flashy_Main@data,w
 20650  08D7  0086               	movwf	6
 20651  08D8  085F               	movf	flashy_Main@data+1,w
 20652  08D9  0087               	movwf	7
 20653  08DA  3141               	addfsr 1,1
 20654  08DB  0016               	moviw fsr1++
 20655  08DC  0401               	iorwf	1,w
 20656  08DD  1D03               	btfss	3,2
 20657  08DE  29B8               	goto	L8
 20658                           
 20659                           ;flashy_task.c: 163: led_roundabout(flashy_leds_idx);
 20660  08DF  0021               	movlb	1	; select bank1
 20661  08E0  0833               	movf	(_flashy_leds_idx+1)^(0+128),w
 20662  08E1  0020               	movlb	0	; select bank0
 20663  08E2  00B1               	movwf	led_roundabout@counter+1
 20664  08E3  0021               	movlb	1	; select bank1
 20665  08E4  0832               	movf	_flashy_leds_idx^(0+128),w
 20666  08E5  0020               	movlb	0	; select bank0
 20667  08E6  00B0               	movwf	led_roundabout@counter
 20668  08E7  31AA  22B5  3188   	fcall	_led_roundabout
 20669                           
 20670                           ;flashy_task.c: 164: flashy_leds_idx += 1;
 20671  08EA  3001               	movlw	1
 20672  08EB  0021               	movlb	1	; select bank1
 20673  08EC  07B2               	addwf	_flashy_leds_idx^(0+128),f
 20674  08ED  3000               	movlw	0
 20675  08EE  3DB3               	addwfc	(_flashy_leds_idx+1)^(0+128),f
 20676                           
 20677                           ;flashy_task.c: 165: data->delayTickCount = 35;
 20678  08EF  0020               	movlb	0	; select bank0
 20679  08F0  085E               	movf	flashy_Main@data,w
 20680  08F1  0086               	movwf	6
 20681  08F2  085F               	movf	flashy_Main@data+1,w
 20682  08F3  0087               	movwf	7
 20683  08F4  3141               	addfsr 1,1
 20684  08F5  3023               	movlw	35
 20685  08F6  3FC0               	movwi [0]fsr1
 20686  08F7  3000               	movlw	0
 20687  08F8  3FC1               	movwi [1]fsr1
 20688                           
 20689                           ;flashy_task.c: 166: }
 20690  08F9  2A5E               	goto	l9181
 20691  08FA                     l9093:	
 20692                           ;flashy_task.c: 171: case FLASHY_STATE_LED_SHOT:
 20693                           
 20694                           ;flashy_task.c: 169: }
 20695                           ;flashy_task.c: 170: break;
 20696                           
 20697                           ;flashy_task.c: 167: else {
 20698                           ;flashy_task.c: 168: data->delayTickCount -= 1;
 20699                           
 20700                           
 20701                           ;flashy_task.c: 172: if (data->delayTickCount == 0){
 20702  08FA  085E               	movf	flashy_Main@data,w
 20703  08FB  0086               	movwf	6
 20704  08FC  085F               	movf	flashy_Main@data+1,w
 20705  08FD  0087               	movwf	7
 20706  08FE  3141               	addfsr 1,1
 20707  08FF  0016               	moviw fsr1++
 20708  0900  0401               	iorwf	1,w
 20709  0901  1D03               	btfss	3,2
 20710  0902  29B8               	goto	L8
 20711                           
 20712                           ;flashy_task.c: 173: led_curtain(flashy_leds_idx);
 20713  0903  0021               	movlb	1	; select bank1
 20714  0904  0833               	movf	(_flashy_leds_idx+1)^(0+128),w
 20715  0905  0020               	movlb	0	; select bank0
 20716  0906  00B1               	movwf	led_curtain@counter+1
 20717  0907  0021               	movlb	1	; select bank1
 20718  0908  0832               	movf	_flashy_leds_idx^(0+128),w
 20719  0909  0020               	movlb	0	; select bank0
 20720  090A  00B0               	movwf	led_curtain@counter
 20721  090B  31AA  2274  3188   	fcall	_led_curtain
 20722                           
 20723                           ;flashy_task.c: 174: flashy_leds_idx += 1;
 20724  090E  3001               	movlw	1
 20725  090F  0021               	movlb	1	; select bank1
 20726  0910  07B2               	addwf	_flashy_leds_idx^(0+128),f
 20727  0911  3000               	movlw	0
 20728  0912  3DB3               	addwfc	(_flashy_leds_idx+1)^(0+128),f
 20729                           
 20730                           ;flashy_task.c: 175: data->delayTickCount = 5;
 20731  0913  0020               	movlb	0	; select bank0
 20732  0914  085E               	movf	flashy_Main@data,w
 20733  0915  0086               	movwf	6
 20734  0916  085F               	movf	flashy_Main@data+1,w
 20735  0917  0087               	movwf	7
 20736  0918  3141               	addfsr 1,1
 20737  0919  3005               	movlw	5
 20738  091A  3FC0               	movwi [0]fsr1
 20739  091B  3000               	movlw	0
 20740  091C  3FC1               	movwi [1]fsr1
 20741                           
 20742                           ;flashy_task.c: 176: }
 20743  091D  2A5E               	goto	l9181
 20744  091E                     l9103:	
 20745                           ;flashy_task.c: 181: case FLASHY_STATE_SPARKLE:
 20746                           
 20747                           ;flashy_task.c: 179: }
 20748                           ;flashy_task.c: 180: break;
 20749                           
 20750                           ;flashy_task.c: 177: else {
 20751                           ;flashy_task.c: 178: data->delayTickCount -= 1;
 20752                           
 20753                           
 20754                           ;flashy_task.c: 182: if (data->delayTickCount < 1){
 20755  091E  085E               	movf	flashy_Main@data,w
 20756  091F  0086               	movwf	6
 20757  0920  085F               	movf	flashy_Main@data+1,w
 20758  0921  0087               	movwf	7
 20759  0922  3141               	addfsr 1,1
 20760  0923  0016               	moviw fsr1++
 20761  0924  0401               	iorwf	1,w
 20762  0925  1D03               	btfss	3,2
 20763  0926  29B7               	goto	l9147
 20764                           
 20765                           ;flashy_task.c: 183: led_rand();
 20766  0927  31AC  244E  3188   	fcall	_led_rand
 20767                           
 20768                           ;flashy_task.c: 184: data->delayTickCount = flashy_sparkle_rate;
 20769  092A  0020               	movlb	0	; select bank0
 20770  092B  085E               	movf	flashy_Main@data,w
 20771  092C  0086               	movwf	6
 20772  092D  085F               	movf	flashy_Main@data+1,w
 20773  092E  0087               	movwf	7
 20774  092F  3141               	addfsr 1,1
 20775  0930  0021               	movlb	1	; select bank1
 20776  0931  082E               	movf	_flashy_sparkle_rate^(0+128),w
 20777  0932  3FC0               	movwi [0]fsr1
 20778  0933  082F               	movf	(_flashy_sparkle_rate+1)^(0+128),w
 20779  0934  3FC1               	movwi [1]fsr1
 20780  0935  2A5E               	goto	l9181
 20781  0936                     l9111:	
 20782                           ;flashy_task.c: 190: case FLASHY_STATE_CIRCLE:
 20783                           
 20784                           ;flashy_task.c: 188: }
 20785                           ;flashy_task.c: 189: break;
 20786                           
 20787                           ;flashy_task.c: 186: else {
 20788                           ;flashy_task.c: 187: data->delayTickCount -= 1;
 20789                           
 20790                           ;flashy_task.c: 185: }
 20791                           
 20792                           
 20793                           ;flashy_task.c: 191: if (data->delayTickCount ==0 ){
 20794  0936  085E               	movf	flashy_Main@data,w
 20795  0937  0086               	movwf	6
 20796  0938  085F               	movf	flashy_Main@data+1,w
 20797  0939  0087               	movwf	7
 20798  093A  3141               	addfsr 1,1
 20799  093B  0016               	moviw fsr1++
 20800  093C  0401               	iorwf	1,w
 20801  093D  1D03               	btfss	3,2
 20802  093E  29B7               	goto	l9147
 20803                           
 20804                           ;flashy_task.c: 192: if (flashy_leds_idx == 1024 ){
 20805  093F  3004               	movlw	4
 20806  0940  0021               	movlb	1	; select bank1
 20807  0941  0633               	xorwf	(_flashy_leds_idx+1)^(0+128),w
 20808  0942  0432               	iorwf	_flashy_leds_idx^(0+128),w
 20809  0943  1D03               	btfss	3,2
 20810  0944  2949               	goto	l9117
 20811                           
 20812                           ;flashy_task.c: 193: flashy_leds_idx = flashy_leds_idx << 1;
 20813  0945  3532               	lslf	_flashy_leds_idx^(0+128),w
 20814  0946  00B2               	movwf	_flashy_leds_idx^(0+128)
 20815  0947  0D33               	rlf	(_flashy_leds_idx+1)^(0+128),w
 20816  0948  00B3               	movwf	(_flashy_leds_idx+1)^(0+128)
 20817  0949                     l9117:	
 20818                           
 20819                           ;flashy_task.c: 194: }
 20820                           ;flashy_task.c: 195: led_circle(flashy_leds_idx);
 20821  0949  0833               	movf	(_flashy_leds_idx+1)^(0+128),w
 20822  094A  0020               	movlb	0	; select bank0
 20823  094B  00B1               	movwf	led_circle@count+1
 20824  094C  0021               	movlb	1	; select bank1
 20825  094D  0832               	movf	_flashy_leds_idx^(0+128),w
 20826  094E  0020               	movlb	0	; select bank0
 20827  094F  00B0               	movwf	led_circle@count
 20828  0950  31B3  23F0  3188   	fcall	_led_circle
 20829                           
 20830                           ;flashy_task.c: 196: if (flashy_leds_idx < 1 ){
 20831  0953  0021               	movlb	1	; select bank1
 20832  0954  0832               	movf	_flashy_leds_idx^(0+128),w
 20833  0955  0433               	iorwf	(_flashy_leds_idx+1)^(0+128),w
 20834  0956  1D03               	btfss	3,2
 20835  0957  295D               	goto	l9123
 20836                           
 20837                           ;flashy_task.c: 197: flashy_leds_idx = 1;
 20838  0958  3001               	movlw	1
 20839  0959  00B2               	movwf	_flashy_leds_idx^(0+128)
 20840  095A  3000               	movlw	0
 20841  095B  00B3               	movwf	(_flashy_leds_idx^(0+128)+1)
 20842                           
 20843                           ;flashy_task.c: 198: break;
 20844  095C  2A5E               	goto	l9181
 20845  095D                     l9123:	
 20846                           
 20847                           ;flashy_task.c: 199: }
 20848                           ;flashy_task.c: 200: flashy_leds_idx = flashy_leds_idx << 1;
 20849  095D  3532               	lslf	_flashy_leds_idx^(0+128),w
 20850  095E  00B2               	movwf	_flashy_leds_idx^(0+128)
 20851  095F  0D33               	rlf	(_flashy_leds_idx+1)^(0+128),w
 20852  0960  00B3               	movwf	(_flashy_leds_idx+1)^(0+128)
 20853                           
 20854                           ;flashy_task.c: 202: data->delayTickCount = flashy_sparkle_rate;
 20855  0961  0020               	movlb	0	; select bank0
 20856  0962  085E               	movf	flashy_Main@data,w
 20857  0963  0086               	movwf	6
 20858  0964  085F               	movf	flashy_Main@data+1,w
 20859  0965  0087               	movwf	7
 20860  0966  3141               	addfsr 1,1
 20861  0967  0021               	movlb	1	; select bank1
 20862  0968  082E               	movf	_flashy_sparkle_rate^(0+128),w
 20863  0969  3FC0               	movwi [0]fsr1
 20864  096A  082F               	movf	(_flashy_sparkle_rate+1)^(0+128),w
 20865  096B  3FC1               	movwi [1]fsr1
 20866  096C  2A5E               	goto	l9181
 20867  096D                     l9129:	
 20868                           ;flashy_task.c: 208: case FLASHY_STATE_LED_ALT:
 20869                           
 20870                           ;flashy_task.c: 206: }
 20871                           ;flashy_task.c: 207: break;
 20872                           
 20873                           ;flashy_task.c: 204: else {
 20874                           ;flashy_task.c: 205: data->delayTickCount -= 1;
 20875                           
 20876                           ;flashy_task.c: 203: }
 20877                           
 20878                           
 20879                           ;flashy_task.c: 209: if (data->delayTickCount == 0){
 20880  096D  085E               	movf	flashy_Main@data,w
 20881  096E  0086               	movwf	6
 20882  096F  085F               	movf	flashy_Main@data+1,w
 20883  0970  0087               	movwf	7
 20884  0971  3141               	addfsr 1,1
 20885  0972  0016               	moviw fsr1++
 20886  0973  0401               	iorwf	1,w
 20887  0974  1D03               	btfss	3,2
 20888  0975  29B7               	goto	l9147
 20889                           
 20890                           ;flashy_task.c: 210: let_alternate(flashy_leds_idx);
 20891  0976  0021               	movlb	1	; select bank1
 20892  0977  0833               	movf	(_flashy_leds_idx+1)^(0+128),w
 20893  0978  0020               	movlb	0	; select bank0
 20894  0979  00B1               	movwf	let_alternate@count+1
 20895  097A  0021               	movlb	1	; select bank1
 20896  097B  0832               	movf	_flashy_leds_idx^(0+128),w
 20897  097C  0020               	movlb	0	; select bank0
 20898  097D  00B0               	movwf	let_alternate@count
 20899  097E  31B5  253F  3188   	fcall	_let_alternate
 20900                           
 20901                           ;flashy_task.c: 211: flashy_leds_idx += 1;
 20902  0981  3001               	movlw	1
 20903  0982  0021               	movlb	1	; select bank1
 20904  0983  07B2               	addwf	_flashy_leds_idx^(0+128),f
 20905  0984  3000               	movlw	0
 20906  0985  3DB3               	addwfc	(_flashy_leds_idx+1)^(0+128),f
 20907                           
 20908                           ;flashy_task.c: 212: data->delayTickCount = flashy_sparkle_rate;
 20909  0986  0020               	movlb	0	; select bank0
 20910  0987  085E               	movf	flashy_Main@data,w
 20911  0988  0086               	movwf	6
 20912  0989  085F               	movf	flashy_Main@data+1,w
 20913  098A  0087               	movwf	7
 20914  098B  3141               	addfsr 1,1
 20915  098C  0021               	movlb	1	; select bank1
 20916  098D  082E               	movf	_flashy_sparkle_rate^(0+128),w
 20917  098E  3FC0               	movwi [0]fsr1
 20918  098F  082F               	movf	(_flashy_sparkle_rate+1)^(0+128),w
 20919  0990  3FC1               	movwi [1]fsr1
 20920  0991  2A5E               	goto	l9181
 20921  0992                     l9139:	
 20922                           ;flashy_task.c: 218: case FLASHY_STATE_LED_PARODY:
 20923                           
 20924                           ;flashy_task.c: 216: }
 20925                           ;flashy_task.c: 217: break;
 20926                           
 20927                           ;flashy_task.c: 214: else {
 20928                           ;flashy_task.c: 215: data->delayTickCount -= 1;
 20929                           
 20930                           ;flashy_task.c: 213: }
 20931                           
 20932                           
 20933                           ;flashy_task.c: 219: if (data->delayTickCount == 0){
 20934  0992  085E               	movf	flashy_Main@data,w
 20935  0993  0086               	movwf	6
 20936  0994  085F               	movf	flashy_Main@data+1,w
 20937  0995  0087               	movwf	7
 20938  0996  3141               	addfsr 1,1
 20939  0997  0016               	moviw fsr1++
 20940  0998  0401               	iorwf	1,w
 20941  0999  1D03               	btfss	3,2
 20942  099A  29B7               	goto	l9147
 20943                           
 20944                           ;flashy_task.c: 220: led_Parody(flashy_leds_idx);
 20945  099B  0021               	movlb	1	; select bank1
 20946  099C  0833               	movf	(_flashy_leds_idx+1)^(0+128),w
 20947  099D  0020               	movlb	0	; select bank0
 20948  099E  00B1               	movwf	led_Parody@count+1
 20949  099F  0021               	movlb	1	; select bank1
 20950  09A0  0832               	movf	_flashy_leds_idx^(0+128),w
 20951  09A1  0020               	movlb	0	; select bank0
 20952  09A2  00B0               	movwf	led_Parody@count
 20953  09A3  31A0  208C  3188   	fcall	_led_Parody
 20954                           
 20955                           ;flashy_task.c: 221: flashy_leds_idx += 1;
 20956  09A6  3001               	movlw	1
 20957  09A7  0021               	movlb	1	; select bank1
 20958  09A8  07B2               	addwf	_flashy_leds_idx^(0+128),f
 20959  09A9  3000               	movlw	0
 20960  09AA  3DB3               	addwfc	(_flashy_leds_idx+1)^(0+128),f
 20961                           
 20962                           ;flashy_task.c: 222: data->delayTickCount = flashy_sparkle_rate;
 20963  09AB  0020               	movlb	0	; select bank0
 20964  09AC  085E               	movf	flashy_Main@data,w
 20965  09AD  0086               	movwf	6
 20966  09AE  085F               	movf	flashy_Main@data+1,w
 20967  09AF  0087               	movwf	7
 20968  09B0  3141               	addfsr 1,1
 20969  09B1  0021               	movlb	1	; select bank1
 20970  09B2  082E               	movf	_flashy_sparkle_rate^(0+128),w
 20971  09B3  3FC0               	movwi [0]fsr1
 20972  09B4  082F               	movf	(_flashy_sparkle_rate+1)^(0+128),w
 20973  09B5  3FC1               	movwi [1]fsr1
 20974                           
 20975                           ;flashy_task.c: 223: }
 20976  09B6  2A5E               	goto	l9181
 20977  09B7                     l9147:	
 20978                           
 20979                           ;flashy_task.c: 224: else {
 20980                           ;flashy_task.c: 225: data->delayTickCount -= 1;
 20981  09B7  0020               	movlb	0	; select bank0
 20982  09B8                     L8:	
 20983  09B8  085E               	movf	flashy_Main@data,w
 20984  09B9  0086               	movwf	6
 20985  09BA  085F               	movf	flashy_Main@data+1,w
 20986  09BB  0087               	movwf	7
 20987  09BC  3141               	addfsr 1,1
 20988  09BD  3001               	movlw	1
 20989  09BE  0281               	subwf	1,f
 20990  09BF  3141               	addfsr 1,1
 20991  09C0  3000               	movlw	0
 20992  09C1  3B81               	subwfb	1,f
 20993  09C2  317F               	addfsr 1,-1
 20994                           
 20995                           ;flashy_task.c: 229: }
 20996                           
 20997                           ;flashy_task.c: 226: }
 20998                           ;flashy_task.c: 227: break;
 20999  09C3  2A5E               	goto	l9181
 21000  09C4                     l9151:	
 21001  09C4  0020               	movlb	0	; select bank0
 21002  09C5  085E               	movf	flashy_Main@data,w
 21003  09C6  0086               	movwf	6
 21004  09C7  085F               	movf	flashy_Main@data+1,w
 21005  09C8  0087               	movwf	7
 21006  09C9  3143               	addfsr 1,3
 21007  09CA  0801               	movf	1,w
 21008                           
 21009                           ; Switch size 1, requested type "space"
 21010                           ; Number of cases is 6, Range of values is 0 to 5
 21011                           ; switch strategies available:
 21012                           ; Name         Instructions Cycles
 21013                           ; direct_byte           18     6 (fixed)
 21014                           ; simple_byte           19    10 (average)
 21015                           ; jumptable            260     6 (fixed)
 21016                           ;	Chosen strategy is direct_byte
 21017  09CB  0084               	movwf	4
 21018  09CC  3006               	movlw	6
 21019  09CD  0204               	subwf	4,w
 21020  09CE  1803               	skipnc
 21021  09CF  2A5E               	goto	l9181
 21022  09D0  31B0               	movlp	high S10803
 21023  09D1  3504               	lslf	4,w
 21024  09D2  3E00               	addlw	low S10803
 21025  09D3  0082               	movwf	2
 21026                           
 21027                           ;flashy_task.c: 232: switch (data->display_state){
 21028  09D4  2A5E               	goto	l9181
 21029  09D5                     l9153:	
 21030                           ;flashy_task.c: 233: case FLASHY_STATE_DISPLAY_BLASTER:
 21031                           
 21032                           
 21033                           ;flashy_task.c: 234: nullifyBadge_segDisplayPutStr(data->badge, "PEW ");
 21034  09D5  30E5               	movlw	low (STR_40| (0+32768))
 21035  09D6  00B7               	movwf	nullifyBadge_segDisplayPutStr@str
 21036  09D7  30BB               	movlw	high (STR_40| (0+32768))
 21037  09D8  00B8               	movwf	nullifyBadge_segDisplayPutStr@str+1
 21038  09D9  085E               	movf	flashy_Main@data,w
 21039  09DA  0086               	movwf	6
 21040  09DB  085F               	movf	flashy_Main@data+1,w
 21041  09DC  0087               	movwf	7
 21042  09DD  0801               	movf	1,w
 21043  09DE  31B4  240D  3188   	fcall	_nullifyBadge_segDisplayPutStr
 21044                           
 21045                           ;flashy_task.c: 235: nullifyBadge_segDisplayForceUpdate(data->badge);
 21046  09E1  0020               	movlb	0	; select bank0
 21047  09E2  085E               	movf	flashy_Main@data,w
 21048  09E3  0086               	movwf	6
 21049  09E4  085F               	movf	flashy_Main@data+1,w
 21050  09E5  0087               	movwf	7
 21051  09E6  0801               	movf	1,w
 21052  09E7  31B3  23CB  3188   	fcall	_nullifyBadge_segDisplayForceUpdate
 21053  09EA  2A52               	goto	L11
 21054  09EB                     l9159:	
 21055                           ;flashy_task.c: 238: case FLASHY_STATE_DISPLAY_SHOT:
 21056                           
 21057                           ;flashy_task.c: 237: break;
 21058                           
 21059                           ;flashy_task.c: 236: data->displayTickCount += 1;
 21060                           
 21061                           
 21062                           ;flashy_task.c: 239: sprintf((char *)hit_counter, "%4d", deaths);
 21063  09EB  3056               	movlw	low flashy_Main@hit_counter
 21064  09EC  00AF               	movwf	sprintf@sp
 21065  09ED  3000               	movlw	high flashy_Main@hit_counter
 21066  09EE  00B0               	movwf	sprintf@sp+1
 21067  09EF  30FE               	movlw	low (STR_41| (0+32768))
 21068  09F0  00B1               	movwf	sprintf@f
 21069  09F1  30BB               	movlw	high (STR_41| (0+32768))
 21070  09F2  00B2               	movwf	sprintf@f+1
 21071  09F3  0021               	movlb	1	; select bank1
 21072  09F4  082B               	movf	(_deaths+1)^(0+128),w
 21073  09F5  0020               	movlb	0	; select bank0
 21074  09F6  00B4               	movwf	?_sprintf+5
 21075  09F7  0021               	movlb	1	; select bank1
 21076  09F8  082A               	movf	_deaths^(0+128),w
 21077  09F9  0020               	movlb	0	; select bank0
 21078  09FA  00B3               	movwf	?_sprintf+4
 21079  09FB  319A  225F  3188   	fcall	_sprintf
 21080                           
 21081                           ;flashy_task.c: 241: nullifyBadge_segDisplayPutStr(data->badge, hit_counter);
 21082  09FE  3056               	movlw	low flashy_Main@hit_counter
 21083  09FF  0020               	movlb	0	; select bank0
 21084  0A00  00B7               	movwf	nullifyBadge_segDisplayPutStr@str
 21085  0A01  3000               	movlw	high flashy_Main@hit_counter
 21086  0A02  00B8               	movwf	nullifyBadge_segDisplayPutStr@str+1
 21087  0A03  085E               	movf	flashy_Main@data,w
 21088  0A04  0086               	movwf	6
 21089  0A05  085F               	movf	flashy_Main@data+1,w
 21090  0A06  0087               	movwf	7
 21091  0A07  0801               	movf	1,w
 21092  0A08  31B4  240D  3188   	fcall	_nullifyBadge_segDisplayPutStr
 21093                           
 21094                           ;flashy_task.c: 242: nullifyBadge_segDisplayForceUpdate(data->badge);
 21095  0A0B  0020               	movlb	0	; select bank0
 21096  0A0C  085E               	movf	flashy_Main@data,w
 21097  0A0D  0086               	movwf	6
 21098  0A0E  085F               	movf	flashy_Main@data+1,w
 21099  0A0F  0087               	movwf	7
 21100  0A10  0801               	movf	1,w
 21101  0A11  31B3  23CB  3188   	fcall	_nullifyBadge_segDisplayForceUpdate
 21102                           
 21103                           ;flashy_task.c: 243: if (data->displayTickCount == 150){
 21104  0A14  0020               	movlb	0	; select bank0
 21105  0A15  085E               	movf	flashy_Main@data,w
 21106  0A16  0086               	movwf	6
 21107  0A17  085F               	movf	flashy_Main@data+1,w
 21108  0A18  0087               	movwf	7
 21109  0A19  3144               	addfsr 1,4
 21110  0A1A  0016               	moviw fsr1++
 21111  0A1B  3A96               	xorlw	150
 21112  0A1C  00D4               	movwf	??_flashy_Main
 21113  0A1D  0016               	moviw fsr1++
 21114  0A1E  04D4               	iorwf	??_flashy_Main,f
 21115  0A1F  1D03               	btfss	3,2
 21116  0A20  2A53               	goto	L10
 21117                           
 21118                           ;flashy_task.c: 244: data->displayTickCount = 0;
 21119  0A21  085E               	movf	flashy_Main@data,w
 21120  0A22  0086               	movwf	6
 21121  0A23  085F               	movf	flashy_Main@data+1,w
 21122  0A24  0087               	movwf	7
 21123  0A25  3144               	addfsr 1,4
 21124  0A26  3000               	movlw	0
 21125  0A27  3FC0               	movwi [0]fsr1
 21126  0A28  3FC1               	movwi [1]fsr1
 21127                           
 21128                           ;flashy_task.c: 245: data->display_state = 35;
 21129  0A29  085E               	movf	flashy_Main@data,w
 21130  0A2A  3E06               	addlw	6
 21131  0A2B  00D4               	movwf	??_flashy_Main
 21132  0A2C  3000               	movlw	0
 21133  0A2D  3D5F               	addwfc	flashy_Main@data+1,w
 21134  0A2E  00D5               	movwf	??_flashy_Main+1
 21135  0A2F  0854               	movf	??_flashy_Main,w
 21136  0A30  0086               	movwf	6
 21137  0A31  0855               	movf	??_flashy_Main+1,w
 21138  0A32  0087               	movwf	7
 21139  0A33  3023               	movlw	35
 21140  0A34  0081               	movwf	1
 21141  0A35  2A53               	goto	L10
 21142  0A36                     l9171:	
 21143                           ;flashy_task.c: 249: case FLASHY_STATE_DISPLAY_SECRET_TEST:
 21144                           
 21145                           ;flashy_task.c: 248: break;
 21146                           
 21147                           ;flashy_task.c: 246: }
 21148                           ;flashy_task.c: 247: data->displayTickCount += 1;
 21149                           
 21150                           
 21151                           ;flashy_task.c: 250: marquee(FLASHY_TEXT_SECRET_TEST, data->displayTickCount);
 21152  0A36  0021               	movlb	1	; select bank1
 21153  0A37  085C               	movf	(_FLASHY_TEXT_SECRET_TEST+1)^(0+128),w
 21154  0A38  0020               	movlb	0	; select bank0
 21155  0A39  00BB               	movwf	marquee@string+1
 21156  0A3A  0021               	movlb	1	; select bank1
 21157  0A3B  085B               	movf	_FLASHY_TEXT_SECRET_TEST^(0+128),w
 21158  0A3C  0020               	movlb	0	; select bank0
 21159  0A3D  00BA               	movwf	marquee@string
 21160  0A3E  085E               	movf	flashy_Main@data,w
 21161  0A3F  0086               	movwf	6
 21162  0A40  085F               	movf	flashy_Main@data+1,w
 21163  0A41  0087               	movwf	7
 21164  0A42  3144               	addfsr 1,4
 21165  0A43  3F40               	moviw [0]fsr1
 21166  0A44  00BC               	movwf	marquee@count
 21167  0A45  3F41               	moviw [1]fsr1
 21168  0A46  00BD               	movwf	marquee@count+1
 21169  0A47  31A1  21D2  3188   	fcall	_marquee
 21170  0A4A  2A52               	goto	L11
 21171  0A4B                     l9175:	
 21172                           ;flashy_task.c: 255: default:
 21173                           
 21174                           ;flashy_task.c: 253: case FLASHY_STATE_DISPLAY:
 21175                           
 21176                           ;flashy_task.c: 252: break;
 21177                           
 21178                           ;flashy_task.c: 251: data->displayTickCount += 1;
 21179                           
 21180                           
 21181                           ;flashy_task.c: 256: flashy_display_option(data);
 21182  0A4B  085F               	movf	flashy_Main@data+1,w
 21183  0A4C  00CD               	movwf	flashy_display_option@data+1
 21184  0A4D  085E               	movf	flashy_Main@data,w
 21185  0A4E  00CC               	movwf	flashy_display_option@data
 21186  0A4F  319A  2200  3188   	fcall	_flashy_display_option
 21187  0A52                     L11:	
 21188                           
 21189                           ;flashy_task.c: 257: data->displayTickCount += 1;
 21190  0A52  0020               	movlb	0	; select bank0
 21191  0A53                     L10:	
 21192  0A53  085E               	movf	flashy_Main@data,w
 21193  0A54  0086               	movwf	6
 21194  0A55  085F               	movf	flashy_Main@data+1,w
 21195  0A56  0087               	movwf	7
 21196  0A57  3144               	addfsr 1,4
 21197  0A58  3001               	movlw	1
 21198  0A59  0781               	addwf	1,f
 21199  0A5A  3141               	addfsr 1,1
 21200  0A5B  1803               	skipnc
 21201  0A5C  0A81               	incf	1,f
 21202                           
 21203                           ;flashy_task.c: 259: }
 21204                           
 21205                           ;flashy_task.c: 258: break;
 21206  0A5D  2A72               	goto	l9183
 21207  0A5E                     l9181:	
 21208  0A5E  0020               	movlb	0	; select bank0
 21209  0A5F  085E               	movf	flashy_Main@data,w
 21210  0A60  0086               	movwf	6
 21211  0A61  085F               	movf	flashy_Main@data+1,w
 21212  0A62  0087               	movwf	7
 21213  0A63  3146               	addfsr 1,6
 21214  0A64  0801               	movf	1,w
 21215                           
 21216                           ; Switch size 1, requested type "space"
 21217                           ; Number of cases is 4, Range of values is 0 to 5
 21218                           ; switch strategies available:
 21219                           ; Name         Instructions Cycles
 21220                           ; simple_byte           13     7 (average)
 21221                           ; direct_byte           18     6 (fixed)
 21222                           ; jumptable            260     6 (fixed)
 21223                           ;	Chosen strategy is simple_byte
 21224  0A65  3A00               	xorlw	0	; case 0
 21225  0A66  1903               	skipnz
 21226  0A67  2A4B               	goto	l9175
 21227  0A68  3A02               	xorlw	2	; case 2
 21228  0A69  1903               	skipnz
 21229  0A6A  29D5               	goto	l9153
 21230  0A6B  3A01               	xorlw	1	; case 3
 21231  0A6C  1903               	skipnz
 21232  0A6D  29EB               	goto	l9159
 21233  0A6E  3A06               	xorlw	6	; case 5
 21234  0A6F  1903               	skipnz
 21235  0A70  2A36               	goto	l9171
 21236  0A71  2A4B               	goto	l9175
 21237  0A72                     l9183:	
 21238                           
 21239                           ;flashy_task.c: 262: buttonPressed = nullifyBadge_buttonsGet();
 21240  0A72  31A8  2082  3188   	fcall	_nullifyBadge_buttonsGet
 21241  0A75  0020               	movlb	0	; select bank0
 21242  0A76  00D4               	movwf	??_flashy_Main
 21243  0A77  01D5               	clrf	??_flashy_Main+1
 21244  0A78  0854               	movf	??_flashy_Main,w
 21245  0A79  00DC               	movwf	flashy_Main@buttonPressed
 21246  0A7A  0855               	movf	??_flashy_Main+1,w
 21247  0A7B  00DD               	movwf	flashy_Main@buttonPressed+1
 21248                           
 21249                           ;flashy_task.c: 263: switch (buttonPressed) {
 21250  0A7C  2F36               	goto	l9443
 21251  0A7D                     l9185:	
 21252                           ;flashy_task.c: 264: case 4 | 8:
 21253                           
 21254                           
 21255                           ;flashy_task.c: 265: if (data->holdCountXY == 0 ){
 21256  0A7D  085E               	movf	flashy_Main@data,w
 21257  0A7E  0086               	movwf	6
 21258  0A7F  085F               	movf	flashy_Main@data+1,w
 21259  0A80  0087               	movwf	7
 21260  0A81  3152               	addfsr 1,18
 21261  0A82  0016               	moviw fsr1++
 21262  0A83  0401               	iorwf	1,w
 21263  0A84  1D03               	btfss	3,2
 21264  0A85  2A8C               	goto	l9189
 21265                           
 21266                           ;flashy_task.c: 267: data->display_state = FLASHY_STATE_DISPLAY;
 21267  0A86  085E               	movf	flashy_Main@data,w
 21268  0A87  0086               	movwf	6
 21269  0A88  085F               	movf	flashy_Main@data+1,w
 21270  0A89  0087               	movwf	7
 21271  0A8A  3146               	addfsr 1,6
 21272  0A8B  0181               	clrf	1
 21273  0A8C                     l9189:	
 21274                           
 21275                           ;flashy_task.c: 268: }
 21276                           ;flashy_task.c: 270: data->holdCountA = 0;
 21277  0A8C  085E               	movf	flashy_Main@data,w
 21278  0A8D  0086               	movwf	6
 21279  0A8E  085F               	movf	flashy_Main@data+1,w
 21280  0A8F  0087               	movwf	7
 21281  0A90  314A               	addfsr 1,10
 21282  0A91  3000               	movlw	0
 21283  0A92  3FC0               	movwi [0]fsr1
 21284  0A93  3FC1               	movwi [1]fsr1
 21285                           
 21286                           ;flashy_task.c: 271: data->holdCountB = 0;
 21287  0A94  085E               	movf	flashy_Main@data,w
 21288  0A95  0086               	movwf	6
 21289  0A96  085F               	movf	flashy_Main@data+1,w
 21290  0A97  0087               	movwf	7
 21291  0A98  314C               	addfsr 1,12
 21292  0A99  3000               	movlw	0
 21293  0A9A  3FC0               	movwi [0]fsr1
 21294  0A9B  3FC1               	movwi [1]fsr1
 21295                           
 21296                           ;flashy_task.c: 272: data->holdCountX = 0;
 21297  0A9C  085E               	movf	flashy_Main@data,w
 21298  0A9D  0086               	movwf	6
 21299  0A9E  085F               	movf	flashy_Main@data+1,w
 21300  0A9F  0087               	movwf	7
 21301  0AA0  314E               	addfsr 1,14
 21302  0AA1  3000               	movlw	0
 21303  0AA2  3FC0               	movwi [0]fsr1
 21304  0AA3  3FC1               	movwi [1]fsr1
 21305                           
 21306                           ;flashy_task.c: 273: data->holdCountY = 0;
 21307  0AA4  085E               	movf	flashy_Main@data,w
 21308  0AA5  0086               	movwf	6
 21309  0AA6  085F               	movf	flashy_Main@data+1,w
 21310  0AA7  0087               	movwf	7
 21311  0AA8  3150               	addfsr 1,16
 21312  0AA9  3000               	movlw	0
 21313  0AAA  3FC0               	movwi [0]fsr1
 21314  0AAB  3FC1               	movwi [1]fsr1
 21315                           
 21316                           ;flashy_task.c: 274: data->holdCountXY += 1;
 21317  0AAC  085E               	movf	flashy_Main@data,w
 21318  0AAD  0086               	movwf	6
 21319  0AAE  085F               	movf	flashy_Main@data+1,w
 21320  0AAF  0087               	movwf	7
 21321  0AB0  3152               	addfsr 1,18
 21322  0AB1  3001               	movlw	1
 21323  0AB2  0781               	addwf	1,f
 21324  0AB3  3141               	addfsr 1,1
 21325  0AB4  1803               	skipnc
 21326  0AB5  0A81               	incf	1,f
 21327                           
 21328                           ;flashy_task.c: 275: data->holdCountAY = 0;
 21329  0AB6  085E               	movf	flashy_Main@data,w
 21330  0AB7  0086               	movwf	6
 21331  0AB8  085F               	movf	flashy_Main@data+1,w
 21332  0AB9  0087               	movwf	7
 21333  0ABA  3154               	addfsr 1,20
 21334  0ABB  3000               	movlw	0
 21335  0ABC  3FC0               	movwi [0]fsr1
 21336  0ABD  3FC1               	movwi [1]fsr1
 21337                           
 21338                           ;flashy_task.c: 276: data->holdCountAX = 0;
 21339  0ABE  085E               	movf	flashy_Main@data,w
 21340  0ABF  0086               	movwf	6
 21341  0AC0  085F               	movf	flashy_Main@data+1,w
 21342  0AC1  0087               	movwf	7
 21343  0AC2  3156               	addfsr 1,22
 21344  0AC3  3000               	movlw	0
 21345  0AC4  3FC0               	movwi [0]fsr1
 21346  0AC5  3FC1               	movwi [1]fsr1
 21347                           
 21348                           ;flashy_task.c: 277: data->holdCountBX = 0;
 21349  0AC6  085E               	movf	flashy_Main@data,w
 21350  0AC7  0086               	movwf	6
 21351  0AC8  085F               	movf	flashy_Main@data+1,w
 21352  0AC9  0087               	movwf	7
 21353  0ACA  3158               	addfsr 1,24
 21354  0ACB  3000               	movlw	0
 21355  0ACC  3FC0               	movwi [0]fsr1
 21356  0ACD  3FC1               	movwi [1]fsr1
 21357                           
 21358                           ;flashy_task.c: 278: data->holdCountBY = 0;
 21359  0ACE  085E               	movf	flashy_Main@data,w
 21360  0ACF  0086               	movwf	6
 21361  0AD0  085F               	movf	flashy_Main@data+1,w
 21362  0AD1  0087               	movwf	7
 21363  0AD2  315A               	addfsr 1,26
 21364  0AD3  3000               	movlw	0
 21365  0AD4  3FC0               	movwi [0]fsr1
 21366  0AD5  3FC1               	movwi [1]fsr1
 21367                           
 21368                           ;flashy_task.c: 279: data->noholdCount = 0;
 21369  0AD6  085E               	movf	flashy_Main@data,w
 21370  0AD7  0086               	movwf	6
 21371  0AD8  085F               	movf	flashy_Main@data+1,w
 21372  0AD9  0087               	movwf	7
 21373  0ADA  315C               	addfsr 1,28
 21374  0ADB  3000               	movlw	0
 21375  0ADC  3FC0               	movwi [0]fsr1
 21376  0ADD  3FC1               	movwi [1]fsr1
 21377                           
 21378                           ;flashy_task.c: 280: break;
 21379  0ADE  2FC9               	goto	l9473
 21380  0ADF                     l9209:	
 21381                           ;flashy_task.c: 281: case 1 | 8:
 21382                           
 21383                           
 21384                           ;flashy_task.c: 282: if ( data->holdCountAY == 0 ){
 21385  0ADF  085E               	movf	flashy_Main@data,w
 21386  0AE0  0086               	movwf	6
 21387  0AE1  085F               	movf	flashy_Main@data+1,w
 21388  0AE2  0087               	movwf	7
 21389  0AE3  3154               	addfsr 1,20
 21390  0AE4  0016               	moviw fsr1++
 21391  0AE5  0401               	iorwf	1,w
 21392  0AE6  1D03               	btfss	3,2
 21393  0AE7  2AF8               	goto	l9215
 21394                           
 21395                           ;flashy_task.c: 283: if (flashy_sparkle_rate > 1000){
 21396  0AE8  3003               	movlw	3
 21397  0AE9  0021               	movlb	1	; select bank1
 21398  0AEA  022F               	subwf	(_flashy_sparkle_rate+1)^(0+128),w
 21399  0AEB  30E9               	movlw	233
 21400  0AEC  1903               	skipnz
 21401  0AED  022E               	subwf	_flashy_sparkle_rate^(0+128),w
 21402  0AEE  1C03               	skipc
 21403  0AEF  2AF4               	goto	l1147
 21404                           
 21405                           ;flashy_task.c: 284: flashy_sparkle_rate = 1000;
 21406  0AF0  30E8               	movlw	232
 21407  0AF1  00AE               	movwf	_flashy_sparkle_rate^(0+128)
 21408  0AF2  3003               	movlw	3
 21409  0AF3  00AF               	movwf	(_flashy_sparkle_rate^(0+128)+1)
 21410  0AF4                     l1147:	
 21411                           
 21412                           ;flashy_task.c: 285: }
 21413                           ;flashy_task.c: 286: flashy_sparkle_rate += 5;
 21414  0AF4  3005               	movlw	5
 21415  0AF5  07AE               	addwf	_flashy_sparkle_rate^(0+128),f
 21416  0AF6  3000               	movlw	0
 21417  0AF7  3DAF               	addwfc	(_flashy_sparkle_rate+1)^(0+128),f
 21418  0AF8                     l9215:	
 21419                           
 21420                           ;flashy_task.c: 287: }
 21421                           ;flashy_task.c: 289: data->holdCountA = 0;
 21422  0AF8  0020               	movlb	0	; select bank0
 21423  0AF9  085E               	movf	flashy_Main@data,w
 21424  0AFA  0086               	movwf	6
 21425  0AFB  085F               	movf	flashy_Main@data+1,w
 21426  0AFC  0087               	movwf	7
 21427  0AFD  314A               	addfsr 1,10
 21428  0AFE  3000               	movlw	0
 21429  0AFF  3FC0               	movwi [0]fsr1
 21430  0B00  3FC1               	movwi [1]fsr1
 21431                           
 21432                           ;flashy_task.c: 290: data->holdCountB = 0;
 21433  0B01  085E               	movf	flashy_Main@data,w
 21434  0B02  0086               	movwf	6
 21435  0B03  085F               	movf	flashy_Main@data+1,w
 21436  0B04  0087               	movwf	7
 21437  0B05  314C               	addfsr 1,12
 21438  0B06  3000               	movlw	0
 21439  0B07  3FC0               	movwi [0]fsr1
 21440  0B08  3FC1               	movwi [1]fsr1
 21441                           
 21442                           ;flashy_task.c: 291: data->holdCountX = 0;
 21443  0B09  085E               	movf	flashy_Main@data,w
 21444  0B0A  0086               	movwf	6
 21445  0B0B  085F               	movf	flashy_Main@data+1,w
 21446  0B0C  0087               	movwf	7
 21447  0B0D  314E               	addfsr 1,14
 21448  0B0E  3000               	movlw	0
 21449  0B0F  3FC0               	movwi [0]fsr1
 21450  0B10  3FC1               	movwi [1]fsr1
 21451                           
 21452                           ;flashy_task.c: 292: data->holdCountY = 0;
 21453  0B11  085E               	movf	flashy_Main@data,w
 21454  0B12  0086               	movwf	6
 21455  0B13  085F               	movf	flashy_Main@data+1,w
 21456  0B14  0087               	movwf	7
 21457  0B15  3150               	addfsr 1,16
 21458  0B16  3000               	movlw	0
 21459  0B17  3FC0               	movwi [0]fsr1
 21460  0B18  3FC1               	movwi [1]fsr1
 21461                           
 21462                           ;flashy_task.c: 293: data->holdCountXY = 0;
 21463  0B19  085E               	movf	flashy_Main@data,w
 21464  0B1A  0086               	movwf	6
 21465  0B1B  085F               	movf	flashy_Main@data+1,w
 21466  0B1C  0087               	movwf	7
 21467  0B1D  3152               	addfsr 1,18
 21468  0B1E  3000               	movlw	0
 21469  0B1F  3FC0               	movwi [0]fsr1
 21470  0B20  3FC1               	movwi [1]fsr1
 21471                           
 21472                           ;flashy_task.c: 294: data->holdCountAY += 1;
 21473  0B21  085E               	movf	flashy_Main@data,w
 21474  0B22  0086               	movwf	6
 21475  0B23  085F               	movf	flashy_Main@data+1,w
 21476  0B24  0087               	movwf	7
 21477  0B25  3154               	addfsr 1,20
 21478  0B26  3001               	movlw	1
 21479  0B27  0781               	addwf	1,f
 21480  0B28  3141               	addfsr 1,1
 21481  0B29  1803               	skipnc
 21482  0B2A  0A81               	incf	1,f
 21483                           
 21484                           ;flashy_task.c: 295: data->holdCountAX = 0;
 21485  0B2B  085E               	movf	flashy_Main@data,w
 21486  0B2C  0086               	movwf	6
 21487  0B2D  085F               	movf	flashy_Main@data+1,w
 21488  0B2E  0087               	movwf	7
 21489  0B2F  3156               	addfsr 1,22
 21490  0B30  3000               	movlw	0
 21491  0B31  3FC0               	movwi [0]fsr1
 21492  0B32  3FC1               	movwi [1]fsr1
 21493                           
 21494                           ;flashy_task.c: 296: data->holdCountBX = 0;
 21495  0B33  085E               	movf	flashy_Main@data,w
 21496  0B34  0086               	movwf	6
 21497  0B35  085F               	movf	flashy_Main@data+1,w
 21498  0B36  0087               	movwf	7
 21499  0B37  3158               	addfsr 1,24
 21500  0B38  3000               	movlw	0
 21501  0B39  3FC0               	movwi [0]fsr1
 21502  0B3A  3FC1               	movwi [1]fsr1
 21503                           
 21504                           ;flashy_task.c: 297: data->holdCountBY = 0;
 21505  0B3B  085E               	movf	flashy_Main@data,w
 21506  0B3C  0086               	movwf	6
 21507  0B3D  085F               	movf	flashy_Main@data+1,w
 21508  0B3E  0087               	movwf	7
 21509  0B3F  315A               	addfsr 1,26
 21510  0B40  3000               	movlw	0
 21511  0B41  3FC0               	movwi [0]fsr1
 21512  0B42  3FC1               	movwi [1]fsr1
 21513                           
 21514                           ;flashy_task.c: 298: data->noholdCount = 0;
 21515  0B43  085E               	movf	flashy_Main@data,w
 21516  0B44  0086               	movwf	6
 21517  0B45  085F               	movf	flashy_Main@data+1,w
 21518  0B46  0087               	movwf	7
 21519  0B47  315C               	addfsr 1,28
 21520  0B48  3000               	movlw	0
 21521  0B49  3FC0               	movwi [0]fsr1
 21522  0B4A  3FC1               	movwi [1]fsr1
 21523                           
 21524                           ;flashy_task.c: 299: break;
 21525  0B4B  2FC9               	goto	l9473
 21526  0B4C                     l9235:	
 21527                           ;flashy_task.c: 300: case 1 | 4:
 21528                           
 21529                           
 21530                           ;flashy_task.c: 301: if ( data->holdCountAX == 0 ){
 21531  0B4C  085E               	movf	flashy_Main@data,w
 21532  0B4D  0086               	movwf	6
 21533  0B4E  085F               	movf	flashy_Main@data+1,w
 21534  0B4F  0087               	movwf	7
 21535  0B50  3156               	addfsr 1,22
 21536  0B51  0016               	moviw fsr1++
 21537  0B52  0401               	iorwf	1,w
 21538  0B53  1D03               	btfss	3,2
 21539  0B54  2B65               	goto	l9241
 21540                           
 21541                           ;flashy_task.c: 302: if (flashy_sparkle_rate < 5)
 21542  0B55  3000               	movlw	0
 21543  0B56  0021               	movlb	1	; select bank1
 21544  0B57  022F               	subwf	(_flashy_sparkle_rate+1)^(0+128),w
 21545  0B58  3005               	movlw	5
 21546  0B59  1903               	skipnz
 21547  0B5A  022E               	subwf	_flashy_sparkle_rate^(0+128),w
 21548  0B5B  1803               	skipnc
 21549  0B5C  2B61               	goto	l1150
 21550                           
 21551                           ;flashy_task.c: 303: flashy_sparkle_rate=5;
 21552  0B5D  3005               	movlw	5
 21553  0B5E  00AE               	movwf	_flashy_sparkle_rate^(0+128)
 21554  0B5F  3000               	movlw	0
 21555  0B60  00AF               	movwf	(_flashy_sparkle_rate^(0+128)+1)
 21556  0B61                     l1150:	
 21557                           
 21558                           ;flashy_task.c: 304: flashy_sparkle_rate -= 5;
 21559  0B61  3005               	movlw	5
 21560  0B62  02AE               	subwf	_flashy_sparkle_rate^(0+128),f
 21561  0B63  3000               	movlw	0
 21562  0B64  3BAF               	subwfb	(_flashy_sparkle_rate+1)^(0+128),f
 21563  0B65                     l9241:	
 21564                           
 21565                           ;flashy_task.c: 305: }
 21566                           ;flashy_task.c: 307: data->holdCountA = 0;
 21567  0B65  0020               	movlb	0	; select bank0
 21568  0B66  085E               	movf	flashy_Main@data,w
 21569  0B67  0086               	movwf	6
 21570  0B68  085F               	movf	flashy_Main@data+1,w
 21571  0B69  0087               	movwf	7
 21572  0B6A  314A               	addfsr 1,10
 21573  0B6B  3000               	movlw	0
 21574  0B6C  3FC0               	movwi [0]fsr1
 21575  0B6D  3FC1               	movwi [1]fsr1
 21576                           
 21577                           ;flashy_task.c: 308: data->holdCountB = 0;
 21578  0B6E  085E               	movf	flashy_Main@data,w
 21579  0B6F  0086               	movwf	6
 21580  0B70  085F               	movf	flashy_Main@data+1,w
 21581  0B71  0087               	movwf	7
 21582  0B72  314C               	addfsr 1,12
 21583  0B73  3000               	movlw	0
 21584  0B74  3FC0               	movwi [0]fsr1
 21585  0B75  3FC1               	movwi [1]fsr1
 21586                           
 21587                           ;flashy_task.c: 309: data->holdCountX += 1;
 21588  0B76  085E               	movf	flashy_Main@data,w
 21589  0B77  0086               	movwf	6
 21590  0B78  085F               	movf	flashy_Main@data+1,w
 21591  0B79  0087               	movwf	7
 21592  0B7A  314E               	addfsr 1,14
 21593  0B7B  3001               	movlw	1
 21594  0B7C  0781               	addwf	1,f
 21595  0B7D  3141               	addfsr 1,1
 21596  0B7E  1803               	skipnc
 21597  0B7F  0A81               	incf	1,f
 21598                           
 21599                           ;flashy_task.c: 310: data->holdCountY = 0;
 21600  0B80  085E               	movf	flashy_Main@data,w
 21601  0B81  0086               	movwf	6
 21602  0B82  085F               	movf	flashy_Main@data+1,w
 21603  0B83  0087               	movwf	7
 21604  0B84  3150               	addfsr 1,16
 21605  0B85  3000               	movlw	0
 21606  0B86  3FC0               	movwi [0]fsr1
 21607  0B87  3FC1               	movwi [1]fsr1
 21608                           
 21609                           ;flashy_task.c: 311: data->holdCountXY = 0;
 21610  0B88  085E               	movf	flashy_Main@data,w
 21611  0B89  0086               	movwf	6
 21612  0B8A  085F               	movf	flashy_Main@data+1,w
 21613  0B8B  0087               	movwf	7
 21614  0B8C  3152               	addfsr 1,18
 21615  0B8D  3000               	movlw	0
 21616  0B8E  3FC0               	movwi [0]fsr1
 21617  0B8F  3FC1               	movwi [1]fsr1
 21618                           
 21619                           ;flashy_task.c: 312: data->holdCountAY = 0;
 21620  0B90  085E               	movf	flashy_Main@data,w
 21621  0B91  0086               	movwf	6
 21622  0B92  085F               	movf	flashy_Main@data+1,w
 21623  0B93  0087               	movwf	7
 21624  0B94  3154               	addfsr 1,20
 21625  0B95  3000               	movlw	0
 21626  0B96  3FC0               	movwi [0]fsr1
 21627  0B97  3FC1               	movwi [1]fsr1
 21628                           
 21629                           ;flashy_task.c: 313: data->holdCountAX += 1;
 21630  0B98  085E               	movf	flashy_Main@data,w
 21631  0B99  0086               	movwf	6
 21632  0B9A  085F               	movf	flashy_Main@data+1,w
 21633  0B9B  0087               	movwf	7
 21634  0B9C  3156               	addfsr 1,22
 21635  0B9D  3001               	movlw	1
 21636  0B9E  0781               	addwf	1,f
 21637  0B9F  3141               	addfsr 1,1
 21638  0BA0  1803               	skipnc
 21639  0BA1  0A81               	incf	1,f
 21640                           
 21641                           ;flashy_task.c: 314: data->holdCountBX = 0;
 21642  0BA2  085E               	movf	flashy_Main@data,w
 21643  0BA3  0086               	movwf	6
 21644  0BA4  085F               	movf	flashy_Main@data+1,w
 21645  0BA5  0087               	movwf	7
 21646  0BA6  3158               	addfsr 1,24
 21647  0BA7  3000               	movlw	0
 21648  0BA8  3FC0               	movwi [0]fsr1
 21649  0BA9  3FC1               	movwi [1]fsr1
 21650                           
 21651                           ;flashy_task.c: 315: data->holdCountBY = 0;
 21652  0BAA  085E               	movf	flashy_Main@data,w
 21653  0BAB  0086               	movwf	6
 21654  0BAC  085F               	movf	flashy_Main@data+1,w
 21655  0BAD  0087               	movwf	7
 21656  0BAE  315A               	addfsr 1,26
 21657  0BAF  3000               	movlw	0
 21658  0BB0  3FC0               	movwi [0]fsr1
 21659  0BB1  3FC1               	movwi [1]fsr1
 21660                           
 21661                           ;flashy_task.c: 316: data->noholdCount = 0;
 21662  0BB2  085E               	movf	flashy_Main@data,w
 21663  0BB3  0086               	movwf	6
 21664  0BB4  085F               	movf	flashy_Main@data+1,w
 21665  0BB5  0087               	movwf	7
 21666  0BB6  315C               	addfsr 1,28
 21667  0BB7  3000               	movlw	0
 21668  0BB8  3FC0               	movwi [0]fsr1
 21669  0BB9  3FC1               	movwi [1]fsr1
 21670                           
 21671                           ;flashy_task.c: 317: break;
 21672  0BBA  2FC9               	goto	l9473
 21673  0BBB                     l9261:	
 21674                           ;flashy_task.c: 318: case 2 | 8:
 21675                           
 21676                           
 21677                           ;flashy_task.c: 319: if (data->holdCountBY == 0){
 21678  0BBB  085E               	movf	flashy_Main@data,w
 21679  0BBC  0086               	movwf	6
 21680  0BBD  085F               	movf	flashy_Main@data+1,w
 21681  0BBE  0087               	movwf	7
 21682  0BBF  315A               	addfsr 1,26
 21683  0BC0  0016               	moviw fsr1++
 21684  0BC1  0401               	iorwf	1,w
 21685  0BC2  1D03               	btfss	3,2
 21686  0BC3  2BD8               	goto	l9271
 21687                           
 21688                           ;flashy_task.c: 320: if (flashy_option_idx == 0){
 21689  0BC4  0021               	movlb	1	; select bank1
 21690  0BC5  0828               	movf	_flashy_option_idx^(0+128),w
 21691  0BC6  0429               	iorwf	(_flashy_option_idx+1)^(0+128),w
 21692  0BC7  1903               	btfsc	3,2
 21693  0BC8  2BD8               	goto	l9271
 21694                           
 21695                           ;flashy_task.c: 323: else {
 21696                           ;flashy_task.c: 324: if (flashy_scroll_rate > 150){
 21697                           
 21698                           ;flashy_task.c: 322: }
 21699  0BC9  3000               	movlw	0
 21700  0BCA  022D               	subwf	(_flashy_scroll_rate+1)^(0+128),w
 21701  0BCB  3097               	movlw	151
 21702  0BCC  1903               	skipnz
 21703  0BCD  022C               	subwf	_flashy_scroll_rate^(0+128),w
 21704  0BCE  1C03               	skipc
 21705  0BCF  2BD4               	goto	l1155
 21706                           
 21707                           ;flashy_task.c: 325: flashy_scroll_rate =150;
 21708  0BD0  3096               	movlw	150
 21709  0BD1  00AC               	movwf	_flashy_scroll_rate^(0+128)
 21710  0BD2  3000               	movlw	0
 21711  0BD3  00AD               	movwf	(_flashy_scroll_rate^(0+128)+1)
 21712  0BD4                     l1155:	
 21713                           
 21714                           ;flashy_task.c: 326: }
 21715                           ;flashy_task.c: 327: flashy_scroll_rate +=2;
 21716  0BD4  3002               	movlw	2
 21717  0BD5  07AC               	addwf	_flashy_scroll_rate^(0+128),f
 21718  0BD6  3000               	movlw	0
 21719  0BD7  3DAD               	addwfc	(_flashy_scroll_rate+1)^(0+128),f
 21720  0BD8                     l9271:	
 21721                           
 21722                           ;flashy_task.c: 328: }
 21723                           ;flashy_task.c: 330: }
 21724                           ;flashy_task.c: 331: data->holdCountA = 0;
 21725  0BD8  0020               	movlb	0	; select bank0
 21726  0BD9  085E               	movf	flashy_Main@data,w
 21727  0BDA  0086               	movwf	6
 21728  0BDB  085F               	movf	flashy_Main@data+1,w
 21729  0BDC  0087               	movwf	7
 21730  0BDD  314A               	addfsr 1,10
 21731  0BDE  3000               	movlw	0
 21732  0BDF  3FC0               	movwi [0]fsr1
 21733  0BE0  3FC1               	movwi [1]fsr1
 21734                           
 21735                           ;flashy_task.c: 332: data->holdCountB += 1;
 21736  0BE1  085E               	movf	flashy_Main@data,w
 21737  0BE2  0086               	movwf	6
 21738  0BE3  085F               	movf	flashy_Main@data+1,w
 21739  0BE4  0087               	movwf	7
 21740  0BE5  314C               	addfsr 1,12
 21741  0BE6  3001               	movlw	1
 21742  0BE7  0781               	addwf	1,f
 21743  0BE8  3141               	addfsr 1,1
 21744  0BE9  1803               	skipnc
 21745  0BEA  0A81               	incf	1,f
 21746                           
 21747                           ;flashy_task.c: 333: data->holdCountX = 0;
 21748  0BEB  085E               	movf	flashy_Main@data,w
 21749  0BEC  0086               	movwf	6
 21750  0BED  085F               	movf	flashy_Main@data+1,w
 21751  0BEE  0087               	movwf	7
 21752  0BEF  314E               	addfsr 1,14
 21753  0BF0  3000               	movlw	0
 21754  0BF1  3FC0               	movwi [0]fsr1
 21755  0BF2  3FC1               	movwi [1]fsr1
 21756                           
 21757                           ;flashy_task.c: 334: data->holdCountY += 1;
 21758  0BF3  085E               	movf	flashy_Main@data,w
 21759  0BF4  0086               	movwf	6
 21760  0BF5  085F               	movf	flashy_Main@data+1,w
 21761  0BF6  0087               	movwf	7
 21762  0BF7  3150               	addfsr 1,16
 21763  0BF8  3001               	movlw	1
 21764  0BF9  0781               	addwf	1,f
 21765  0BFA  3141               	addfsr 1,1
 21766  0BFB  1803               	skipnc
 21767  0BFC  0A81               	incf	1,f
 21768                           
 21769                           ;flashy_task.c: 335: data->holdCountXY = 0;
 21770  0BFD  085E               	movf	flashy_Main@data,w
 21771  0BFE  0086               	movwf	6
 21772  0BFF  085F               	movf	flashy_Main@data+1,w
 21773  0C00  0087               	movwf	7
 21774  0C01  3152               	addfsr 1,18
 21775  0C02  3000               	movlw	0
 21776  0C03  3FC0               	movwi [0]fsr1
 21777  0C04  3FC1               	movwi [1]fsr1
 21778                           
 21779                           ;flashy_task.c: 336: data->holdCountAY = 0;
 21780  0C05  085E               	movf	flashy_Main@data,w
 21781  0C06  0086               	movwf	6
 21782  0C07  085F               	movf	flashy_Main@data+1,w
 21783  0C08  0087               	movwf	7
 21784  0C09  3154               	addfsr 1,20
 21785  0C0A  3000               	movlw	0
 21786  0C0B  3FC0               	movwi [0]fsr1
 21787  0C0C  3FC1               	movwi [1]fsr1
 21788                           
 21789                           ;flashy_task.c: 337: data->holdCountAX = 0;
 21790  0C0D  085E               	movf	flashy_Main@data,w
 21791  0C0E  0086               	movwf	6
 21792  0C0F  085F               	movf	flashy_Main@data+1,w
 21793  0C10  0087               	movwf	7
 21794  0C11  3156               	addfsr 1,22
 21795  0C12  3000               	movlw	0
 21796  0C13  3FC0               	movwi [0]fsr1
 21797  0C14  3FC1               	movwi [1]fsr1
 21798                           
 21799                           ;flashy_task.c: 338: data->holdCountBX = 0;
 21800  0C15  085E               	movf	flashy_Main@data,w
 21801  0C16  0086               	movwf	6
 21802  0C17  085F               	movf	flashy_Main@data+1,w
 21803  0C18  0087               	movwf	7
 21804  0C19  3158               	addfsr 1,24
 21805  0C1A  3000               	movlw	0
 21806  0C1B  3FC0               	movwi [0]fsr1
 21807  0C1C  3FC1               	movwi [1]fsr1
 21808                           
 21809                           ;flashy_task.c: 339: data->holdCountBY += 1;
 21810  0C1D  085E               	movf	flashy_Main@data,w
 21811  0C1E  0086               	movwf	6
 21812  0C1F  085F               	movf	flashy_Main@data+1,w
 21813  0C20  0087               	movwf	7
 21814  0C21  315A               	addfsr 1,26
 21815  0C22  3001               	movlw	1
 21816  0C23  0781               	addwf	1,f
 21817  0C24  3141               	addfsr 1,1
 21818  0C25  1803               	skipnc
 21819  0C26  0A81               	incf	1,f
 21820                           
 21821                           ;flashy_task.c: 340: data->noholdCount = 0;
 21822  0C27  085E               	movf	flashy_Main@data,w
 21823  0C28  0086               	movwf	6
 21824  0C29  085F               	movf	flashy_Main@data+1,w
 21825  0C2A  0087               	movwf	7
 21826  0C2B  315C               	addfsr 1,28
 21827  0C2C  3000               	movlw	0
 21828  0C2D  3FC0               	movwi [0]fsr1
 21829  0C2E  3FC1               	movwi [1]fsr1
 21830                           
 21831                           ;flashy_task.c: 341: break;
 21832  0C2F  2FC9               	goto	l9473
 21833  0C30                     l9291:	
 21834                           ;flashy_task.c: 342: case 2 | 4:
 21835                           
 21836                           
 21837                           ;flashy_task.c: 343: if (data-> holdCountBX == 0){
 21838  0C30  085E               	movf	flashy_Main@data,w
 21839  0C31  0086               	movwf	6
 21840  0C32  085F               	movf	flashy_Main@data+1,w
 21841  0C33  0087               	movwf	7
 21842  0C34  3158               	addfsr 1,24
 21843  0C35  0016               	moviw fsr1++
 21844  0C36  0401               	iorwf	1,w
 21845  0C37  1D03               	btfss	3,2
 21846  0C38  2C4D               	goto	l9301
 21847                           
 21848                           ;flashy_task.c: 344: if (flashy_option_idx == 0){
 21849  0C39  0021               	movlb	1	; select bank1
 21850  0C3A  0828               	movf	_flashy_option_idx^(0+128),w
 21851  0C3B  0429               	iorwf	(_flashy_option_idx+1)^(0+128),w
 21852  0C3C  1903               	btfsc	3,2
 21853  0C3D  2C4D               	goto	l9301
 21854                           
 21855                           ;flashy_task.c: 347: else {
 21856                           ;flashy_task.c: 348: if (flashy_scroll_rate < 5){
 21857                           
 21858                           ;flashy_task.c: 346: }
 21859  0C3E  3000               	movlw	0
 21860  0C3F  022D               	subwf	(_flashy_scroll_rate+1)^(0+128),w
 21861  0C40  3005               	movlw	5
 21862  0C41  1903               	skipnz
 21863  0C42  022C               	subwf	_flashy_scroll_rate^(0+128),w
 21864  0C43  1803               	skipnc
 21865  0C44  2C49               	goto	l1160
 21866                           
 21867                           ;flashy_task.c: 349: flashy_scroll_rate =5;
 21868  0C45  3005               	movlw	5
 21869  0C46  00AC               	movwf	_flashy_scroll_rate^(0+128)
 21870  0C47  3000               	movlw	0
 21871  0C48  00AD               	movwf	(_flashy_scroll_rate^(0+128)+1)
 21872  0C49                     l1160:	
 21873                           
 21874                           ;flashy_task.c: 350: }
 21875                           ;flashy_task.c: 351: flashy_scroll_rate -=3;
 21876  0C49  3003               	movlw	3
 21877  0C4A  02AC               	subwf	_flashy_scroll_rate^(0+128),f
 21878  0C4B  3000               	movlw	0
 21879  0C4C  3BAD               	subwfb	(_flashy_scroll_rate+1)^(0+128),f
 21880  0C4D                     l9301:	
 21881                           
 21882                           ;flashy_task.c: 352: }
 21883                           ;flashy_task.c: 354: }
 21884                           ;flashy_task.c: 355: data->holdCountA = 0;
 21885  0C4D  0020               	movlb	0	; select bank0
 21886  0C4E  085E               	movf	flashy_Main@data,w
 21887  0C4F  0086               	movwf	6
 21888  0C50  085F               	movf	flashy_Main@data+1,w
 21889  0C51  0087               	movwf	7
 21890  0C52  314A               	addfsr 1,10
 21891  0C53  3000               	movlw	0
 21892  0C54  3FC0               	movwi [0]fsr1
 21893  0C55  3FC1               	movwi [1]fsr1
 21894                           
 21895                           ;flashy_task.c: 356: data->holdCountB += 1;
 21896  0C56  085E               	movf	flashy_Main@data,w
 21897  0C57  0086               	movwf	6
 21898  0C58  085F               	movf	flashy_Main@data+1,w
 21899  0C59  0087               	movwf	7
 21900  0C5A  314C               	addfsr 1,12
 21901  0C5B  3001               	movlw	1
 21902  0C5C  0781               	addwf	1,f
 21903  0C5D  3141               	addfsr 1,1
 21904  0C5E  1803               	skipnc
 21905  0C5F  0A81               	incf	1,f
 21906                           
 21907                           ;flashy_task.c: 357: data->holdCountX += 1;
 21908  0C60  085E               	movf	flashy_Main@data,w
 21909  0C61  0086               	movwf	6
 21910  0C62  085F               	movf	flashy_Main@data+1,w
 21911  0C63  0087               	movwf	7
 21912  0C64  314E               	addfsr 1,14
 21913  0C65  3001               	movlw	1
 21914  0C66  0781               	addwf	1,f
 21915  0C67  3141               	addfsr 1,1
 21916  0C68  1803               	skipnc
 21917  0C69  0A81               	incf	1,f
 21918                           
 21919                           ;flashy_task.c: 358: data->holdCountY = 0;
 21920  0C6A  085E               	movf	flashy_Main@data,w
 21921  0C6B  0086               	movwf	6
 21922  0C6C  085F               	movf	flashy_Main@data+1,w
 21923  0C6D  0087               	movwf	7
 21924  0C6E  3150               	addfsr 1,16
 21925  0C6F  3000               	movlw	0
 21926  0C70  3FC0               	movwi [0]fsr1
 21927  0C71  3FC1               	movwi [1]fsr1
 21928                           
 21929                           ;flashy_task.c: 359: data->holdCountXY = 0;
 21930  0C72  085E               	movf	flashy_Main@data,w
 21931  0C73  0086               	movwf	6
 21932  0C74  085F               	movf	flashy_Main@data+1,w
 21933  0C75  0087               	movwf	7
 21934  0C76  3152               	addfsr 1,18
 21935  0C77  3000               	movlw	0
 21936  0C78  3FC0               	movwi [0]fsr1
 21937  0C79  3FC1               	movwi [1]fsr1
 21938                           
 21939                           ;flashy_task.c: 360: data->holdCountAY = 0;
 21940  0C7A  085E               	movf	flashy_Main@data,w
 21941  0C7B  0086               	movwf	6
 21942  0C7C  085F               	movf	flashy_Main@data+1,w
 21943  0C7D  0087               	movwf	7
 21944  0C7E  3154               	addfsr 1,20
 21945  0C7F  3000               	movlw	0
 21946  0C80  3FC0               	movwi [0]fsr1
 21947  0C81  3FC1               	movwi [1]fsr1
 21948                           
 21949                           ;flashy_task.c: 361: data->holdCountAX = 0;
 21950  0C82  085E               	movf	flashy_Main@data,w
 21951  0C83  0086               	movwf	6
 21952  0C84  085F               	movf	flashy_Main@data+1,w
 21953  0C85  0087               	movwf	7
 21954  0C86  3156               	addfsr 1,22
 21955  0C87  3000               	movlw	0
 21956  0C88  3FC0               	movwi [0]fsr1
 21957  0C89  3FC1               	movwi [1]fsr1
 21958                           
 21959                           ;flashy_task.c: 362: data->holdCountBX += 1;
 21960  0C8A  085E               	movf	flashy_Main@data,w
 21961  0C8B  0086               	movwf	6
 21962  0C8C  085F               	movf	flashy_Main@data+1,w
 21963  0C8D  0087               	movwf	7
 21964  0C8E  3158               	addfsr 1,24
 21965  0C8F  3001               	movlw	1
 21966  0C90  0781               	addwf	1,f
 21967  0C91  3141               	addfsr 1,1
 21968  0C92  1803               	skipnc
 21969  0C93  0A81               	incf	1,f
 21970                           
 21971                           ;flashy_task.c: 363: data->holdCountBY = 0;
 21972  0C94  085E               	movf	flashy_Main@data,w
 21973  0C95  0086               	movwf	6
 21974  0C96  085F               	movf	flashy_Main@data+1,w
 21975  0C97  0087               	movwf	7
 21976  0C98  315A               	addfsr 1,26
 21977  0C99  3000               	movlw	0
 21978  0C9A  3FC0               	movwi [0]fsr1
 21979  0C9B  3FC1               	movwi [1]fsr1
 21980                           
 21981                           ;flashy_task.c: 364: data->noholdCount = 0;
 21982  0C9C  085E               	movf	flashy_Main@data,w
 21983  0C9D  0086               	movwf	6
 21984  0C9E  085F               	movf	flashy_Main@data+1,w
 21985  0C9F  0087               	movwf	7
 21986  0CA0  315C               	addfsr 1,28
 21987  0CA1  3000               	movlw	0
 21988  0CA2  3FC0               	movwi [0]fsr1
 21989  0CA3  3FC1               	movwi [1]fsr1
 21990                           
 21991                           ;flashy_task.c: 365: break;
 21992  0CA4  2FC9               	goto	l9473
 21993  0CA5                     l9321:	
 21994                           ;flashy_task.c: 366: case 8:
 21995                           
 21996                           
 21997                           ;flashy_task.c: 368: if (data->holdCountY == 0 && data->blasterTickCount == 0){
 21998  0CA5  085E               	movf	flashy_Main@data,w
 21999  0CA6  0086               	movwf	6
 22000  0CA7  085F               	movf	flashy_Main@data+1,w
 22001  0CA8  0087               	movwf	7
 22002  0CA9  3150               	addfsr 1,16
 22003  0CAA  0016               	moviw fsr1++
 22004  0CAB  0401               	iorwf	1,w
 22005  0CAC  1D03               	btfss	3,2
 22006  0CAD  2CFB               	goto	l9339
 22007  0CAE  085E               	movf	flashy_Main@data,w
 22008  0CAF  0086               	movwf	6
 22009  0CB0  085F               	movf	flashy_Main@data+1,w
 22010  0CB1  0087               	movwf	7
 22011  0CB2  3147               	addfsr 1,7
 22012  0CB3  0016               	moviw fsr1++
 22013  0CB4  0401               	iorwf	1,w
 22014  0CB5  1D03               	btfss	3,2
 22015  0CB6  2CFB               	goto	l9339
 22016                           
 22017                           ;flashy_task.c: 370: nullifyBadge_userLedsSet(data->badge, 0x0);
 22018  0CB7  3000               	movlw	0
 22019  0CB8  00AD               	movwf	nullifyBadge_userLedsSet@userLedData
 22020  0CB9  00AE               	movwf	nullifyBadge_userLedsSet@userLedData+1
 22021  0CBA  085E               	movf	flashy_Main@data,w
 22022  0CBB  0086               	movwf	6
 22023  0CBC  085F               	movf	flashy_Main@data+1,w
 22024  0CBD  0087               	movwf	7
 22025  0CBE  0801               	movf	1,w
 22026  0CBF  31B4  24E6  3188   	fcall	_nullifyBadge_userLedsSet
 22027                           
 22028                           ;flashy_task.c: 372: data->displayTickCount = 0;
 22029  0CC2  0020               	movlb	0	; select bank0
 22030  0CC3  085E               	movf	flashy_Main@data,w
 22031  0CC4  0086               	movwf	6
 22032  0CC5  085F               	movf	flashy_Main@data+1,w
 22033  0CC6  0087               	movwf	7
 22034  0CC7  3144               	addfsr 1,4
 22035  0CC8  3000               	movlw	0
 22036  0CC9  3FC0               	movwi [0]fsr1
 22037  0CCA  3FC1               	movwi [1]fsr1
 22038                           
 22039                           ;flashy_task.c: 373: data->blasterTickCount = 100;
 22040  0CCB  085E               	movf	flashy_Main@data,w
 22041  0CCC  0086               	movwf	6
 22042  0CCD  085F               	movf	flashy_Main@data+1,w
 22043  0CCE  0087               	movwf	7
 22044  0CCF  3147               	addfsr 1,7
 22045  0CD0  3064               	movlw	100
 22046  0CD1  3FC0               	movwi [0]fsr1
 22047  0CD2  3000               	movlw	0
 22048  0CD3  3FC1               	movwi [1]fsr1
 22049                           
 22050                           ;flashy_task.c: 374: data->delayTickCount = 5;
 22051  0CD4  085E               	movf	flashy_Main@data,w
 22052  0CD5  0086               	movwf	6
 22053  0CD6  085F               	movf	flashy_Main@data+1,w
 22054  0CD7  0087               	movwf	7
 22055  0CD8  3141               	addfsr 1,1
 22056  0CD9  3005               	movlw	5
 22057  0CDA  3FC0               	movwi [0]fsr1
 22058  0CDB  3000               	movlw	0
 22059  0CDC  3FC1               	movwi [1]fsr1
 22060                           
 22061                           ;flashy_task.c: 376: data->led_state = FLASHY_STATE_LED_SHOT;
 22062  0CDD  085E               	movf	flashy_Main@data,w
 22063  0CDE  3E03               	addlw	3
 22064  0CDF  00D4               	movwf	??_flashy_Main
 22065  0CE0  3000               	movlw	0
 22066  0CE1  3D5F               	addwfc	flashy_Main@data+1,w
 22067  0CE2  00D5               	movwf	??_flashy_Main+1
 22068  0CE3  0854               	movf	??_flashy_Main,w
 22069  0CE4  0086               	movwf	6
 22070  0CE5  0855               	movf	??_flashy_Main+1,w
 22071  0CE6  0087               	movwf	7
 22072  0CE7  3001               	movlw	1
 22073  0CE8  0081               	movwf	1
 22074                           
 22075                           ;flashy_task.c: 377: data->display_state = FLASHY_STATE_DISPLAY_BLASTER;
 22076  0CE9  085E               	movf	flashy_Main@data,w
 22077  0CEA  3E06               	addlw	6
 22078  0CEB  00D4               	movwf	??_flashy_Main
 22079  0CEC  3000               	movlw	0
 22080  0CED  3D5F               	addwfc	flashy_Main@data+1,w
 22081  0CEE  00D5               	movwf	??_flashy_Main+1
 22082  0CEF  0854               	movf	??_flashy_Main,w
 22083  0CF0  0086               	movwf	6
 22084  0CF1  0855               	movf	??_flashy_Main+1,w
 22085  0CF2  0087               	movwf	7
 22086  0CF3  3002               	movlw	2
 22087  0CF4  0081               	movwf	1
 22088                           
 22089                           ;flashy_task.c: 378: data->blaster_state = FLASHY_BLASTER_SHOOTING_STATE;
 22090  0CF5  085E               	movf	flashy_Main@data,w
 22091  0CF6  0086               	movwf	6
 22092  0CF7  085F               	movf	flashy_Main@data+1,w
 22093  0CF8  0087               	movwf	7
 22094  0CF9  3149               	addfsr 1,9
 22095  0CFA  0181               	clrf	1
 22096  0CFB                     l9339:	
 22097                           
 22098                           ;flashy_task.c: 379: }
 22099                           ;flashy_task.c: 381: data->holdCountA = 0;
 22100  0CFB  085E               	movf	flashy_Main@data,w
 22101  0CFC  0086               	movwf	6
 22102  0CFD  085F               	movf	flashy_Main@data+1,w
 22103  0CFE  0087               	movwf	7
 22104  0CFF  314A               	addfsr 1,10
 22105  0D00  3000               	movlw	0
 22106  0D01  3FC0               	movwi [0]fsr1
 22107  0D02  3FC1               	movwi [1]fsr1
 22108                           
 22109                           ;flashy_task.c: 382: data->holdCountB = 0;
 22110  0D03  085E               	movf	flashy_Main@data,w
 22111  0D04  0086               	movwf	6
 22112  0D05  085F               	movf	flashy_Main@data+1,w
 22113  0D06  0087               	movwf	7
 22114  0D07  314C               	addfsr 1,12
 22115  0D08  3000               	movlw	0
 22116  0D09  3FC0               	movwi [0]fsr1
 22117  0D0A  3FC1               	movwi [1]fsr1
 22118                           
 22119                           ;flashy_task.c: 383: data->holdCountX = 0;
 22120  0D0B  085E               	movf	flashy_Main@data,w
 22121  0D0C  0086               	movwf	6
 22122  0D0D  085F               	movf	flashy_Main@data+1,w
 22123  0D0E  0087               	movwf	7
 22124  0D0F  314E               	addfsr 1,14
 22125  0D10  3000               	movlw	0
 22126  0D11  3FC0               	movwi [0]fsr1
 22127  0D12  3FC1               	movwi [1]fsr1
 22128                           
 22129                           ;flashy_task.c: 384: data->holdCountY += 1;
 22130  0D13  085E               	movf	flashy_Main@data,w
 22131  0D14  0086               	movwf	6
 22132  0D15  085F               	movf	flashy_Main@data+1,w
 22133  0D16  0087               	movwf	7
 22134  0D17  3150               	addfsr 1,16
 22135  0D18  3001               	movlw	1
 22136  0D19  0781               	addwf	1,f
 22137  0D1A  3141               	addfsr 1,1
 22138  0D1B  1803               	skipnc
 22139  0D1C  0A81               	incf	1,f
 22140                           
 22141                           ;flashy_task.c: 385: data->holdCountXY = 0;
 22142  0D1D  085E               	movf	flashy_Main@data,w
 22143  0D1E  0086               	movwf	6
 22144  0D1F  085F               	movf	flashy_Main@data+1,w
 22145  0D20  0087               	movwf	7
 22146  0D21  3152               	addfsr 1,18
 22147  0D22  3000               	movlw	0
 22148  0D23  3FC0               	movwi [0]fsr1
 22149  0D24  3FC1               	movwi [1]fsr1
 22150                           
 22151                           ;flashy_task.c: 386: data->holdCountAY = 0;
 22152  0D25  085E               	movf	flashy_Main@data,w
 22153  0D26  0086               	movwf	6
 22154  0D27  085F               	movf	flashy_Main@data+1,w
 22155  0D28  0087               	movwf	7
 22156  0D29  3154               	addfsr 1,20
 22157  0D2A  3000               	movlw	0
 22158  0D2B  3FC0               	movwi [0]fsr1
 22159  0D2C  3FC1               	movwi [1]fsr1
 22160                           
 22161                           ;flashy_task.c: 387: data->holdCountAX = 0;
 22162  0D2D  085E               	movf	flashy_Main@data,w
 22163  0D2E  0086               	movwf	6
 22164  0D2F  085F               	movf	flashy_Main@data+1,w
 22165  0D30  0087               	movwf	7
 22166  0D31  3156               	addfsr 1,22
 22167  0D32  3000               	movlw	0
 22168  0D33  3FC0               	movwi [0]fsr1
 22169  0D34  3FC1               	movwi [1]fsr1
 22170                           
 22171                           ;flashy_task.c: 388: data->holdCountBX = 0;
 22172  0D35  085E               	movf	flashy_Main@data,w
 22173  0D36  0086               	movwf	6
 22174  0D37  085F               	movf	flashy_Main@data+1,w
 22175  0D38  0087               	movwf	7
 22176  0D39  3158               	addfsr 1,24
 22177  0D3A  3000               	movlw	0
 22178  0D3B  3FC0               	movwi [0]fsr1
 22179  0D3C  3FC1               	movwi [1]fsr1
 22180                           
 22181                           ;flashy_task.c: 389: data->holdCountBY = 0;
 22182  0D3D  085E               	movf	flashy_Main@data,w
 22183  0D3E  0086               	movwf	6
 22184  0D3F  085F               	movf	flashy_Main@data+1,w
 22185  0D40  0087               	movwf	7
 22186  0D41  315A               	addfsr 1,26
 22187  0D42  3000               	movlw	0
 22188  0D43  3FC0               	movwi [0]fsr1
 22189  0D44  3FC1               	movwi [1]fsr1
 22190                           
 22191                           ;flashy_task.c: 390: data->noholdCount = 0;
 22192  0D45  085E               	movf	flashy_Main@data,w
 22193  0D46  0086               	movwf	6
 22194  0D47  085F               	movf	flashy_Main@data+1,w
 22195  0D48  0087               	movwf	7
 22196  0D49  315C               	addfsr 1,28
 22197  0D4A  3000               	movlw	0
 22198  0D4B  3FC0               	movwi [0]fsr1
 22199  0D4C  3FC1               	movwi [1]fsr1
 22200                           
 22201                           ;flashy_task.c: 391: break;
 22202  0D4D  2FC9               	goto	l9473
 22203  0D4E                     l9359:	
 22204                           ;flashy_task.c: 392: case 2:
 22205                           
 22206                           
 22207                           ;flashy_task.c: 394: if (data->holdCountB == 0){
 22208  0D4E  085E               	movf	flashy_Main@data,w
 22209  0D4F  0086               	movwf	6
 22210  0D50  085F               	movf	flashy_Main@data+1,w
 22211  0D51  0087               	movwf	7
 22212  0D52  314C               	addfsr 1,12
 22213  0D53  0016               	moviw fsr1++
 22214  0D54  0401               	iorwf	1,w
 22215  0D55  1D03               	btfss	3,2
 22216  0D56  2D7C               	goto	l9369
 22217                           
 22218                           ;flashy_task.c: 395: data->display_state = FLASHY_STATE_DISPLAY;
 22219  0D57  085E               	movf	flashy_Main@data,w
 22220  0D58  0086               	movwf	6
 22221  0D59  085F               	movf	flashy_Main@data+1,w
 22222  0D5A  0087               	movwf	7
 22223  0D5B  3146               	addfsr 1,6
 22224  0D5C  0181               	clrf	1
 22225                           
 22226                           ;flashy_task.c: 396: if (flashy_option_idx == flashy_option_size - 1){
 22227  0D5D  0021               	movlb	1	; select bank1
 22228  0D5E  0826               	movf	_flashy_option_size^(0+128),w
 22229  0D5F  3EFF               	addlw	255
 22230  0D60  0020               	movlb	0	; select bank0
 22231  0D61  00D4               	movwf	??_flashy_Main
 22232  0D62  30FF               	movlw	255
 22233  0D63  0021               	movlb	1	; select bank1
 22234  0D64  3D27               	addwfc	(_flashy_option_size+1)^(0+128),w
 22235  0D65  0020               	movlb	0	; select bank0
 22236  0D66  00D5               	movwf	??_flashy_Main+1
 22237  0D67  0021               	movlb	1	; select bank1
 22238  0D68  0829               	movf	(_flashy_option_idx+1)^(0+128),w
 22239  0D69  0020               	movlb	0	; select bank0
 22240  0D6A  0655               	xorwf	??_flashy_Main+1,w
 22241  0D6B  1D03               	skipz
 22242  0D6C  2D71               	goto	u5815
 22243  0D6D  0021               	movlb	1	; select bank1
 22244  0D6E  0828               	movf	_flashy_option_idx^(0+128),w
 22245  0D6F  0020               	movlb	0	; select bank0
 22246  0D70  0654               	xorwf	??_flashy_Main,w
 22247  0D71                     u5815:	
 22248  0D71  1D03               	skipz
 22249  0D72  2D77               	goto	l9367
 22250                           
 22251                           ;flashy_task.c: 397: flashy_option_idx = 0;
 22252  0D73  0021               	movlb	1	; select bank1
 22253  0D74  01A8               	clrf	_flashy_option_idx^(0+128)
 22254  0D75  01A9               	clrf	(_flashy_option_idx+1)^(0+128)
 22255                           
 22256                           ;flashy_task.c: 398: }
 22257  0D76  2D7C               	goto	l9369
 22258  0D77                     l9367:	
 22259                           
 22260                           ;flashy_task.c: 399: else {
 22261                           ;flashy_task.c: 400: flashy_option_idx += 1;
 22262  0D77  3001               	movlw	1
 22263  0D78  0021               	movlb	1	; select bank1
 22264  0D79  07A8               	addwf	_flashy_option_idx^(0+128),f
 22265  0D7A  3000               	movlw	0
 22266  0D7B  3DA9               	addwfc	(_flashy_option_idx+1)^(0+128),f
 22267  0D7C                     l9369:	
 22268                           
 22269                           ;flashy_task.c: 401: }
 22270                           ;flashy_task.c: 402: }
 22271                           ;flashy_task.c: 403: data->holdCountA = 0;
 22272  0D7C  0020               	movlb	0	; select bank0
 22273  0D7D  085E               	movf	flashy_Main@data,w
 22274  0D7E  0086               	movwf	6
 22275  0D7F  085F               	movf	flashy_Main@data+1,w
 22276  0D80  0087               	movwf	7
 22277  0D81  314A               	addfsr 1,10
 22278  0D82  3000               	movlw	0
 22279  0D83  3FC0               	movwi [0]fsr1
 22280  0D84  3FC1               	movwi [1]fsr1
 22281                           
 22282                           ;flashy_task.c: 404: data->holdCountB += 1;
 22283  0D85  085E               	movf	flashy_Main@data,w
 22284  0D86  0086               	movwf	6
 22285  0D87  085F               	movf	flashy_Main@data+1,w
 22286  0D88  0087               	movwf	7
 22287  0D89  314C               	addfsr 1,12
 22288  0D8A  3001               	movlw	1
 22289  0D8B  0781               	addwf	1,f
 22290  0D8C  3141               	addfsr 1,1
 22291  0D8D  1803               	skipnc
 22292  0D8E  0A81               	incf	1,f
 22293                           
 22294                           ;flashy_task.c: 405: data->holdCountX = 0;
 22295  0D8F  085E               	movf	flashy_Main@data,w
 22296  0D90  0086               	movwf	6
 22297  0D91  085F               	movf	flashy_Main@data+1,w
 22298  0D92  0087               	movwf	7
 22299  0D93  314E               	addfsr 1,14
 22300  0D94  3000               	movlw	0
 22301  0D95  3FC0               	movwi [0]fsr1
 22302  0D96  3FC1               	movwi [1]fsr1
 22303                           
 22304                           ;flashy_task.c: 406: data->holdCountY = 0;
 22305  0D97  085E               	movf	flashy_Main@data,w
 22306  0D98  0086               	movwf	6
 22307  0D99  085F               	movf	flashy_Main@data+1,w
 22308  0D9A  0087               	movwf	7
 22309  0D9B  3150               	addfsr 1,16
 22310  0D9C  3000               	movlw	0
 22311  0D9D  3FC0               	movwi [0]fsr1
 22312  0D9E  3FC1               	movwi [1]fsr1
 22313                           
 22314                           ;flashy_task.c: 407: data->holdCountXY = 0;
 22315  0D9F  085E               	movf	flashy_Main@data,w
 22316  0DA0  0086               	movwf	6
 22317  0DA1  085F               	movf	flashy_Main@data+1,w
 22318  0DA2  0087               	movwf	7
 22319  0DA3  3152               	addfsr 1,18
 22320  0DA4  3000               	movlw	0
 22321  0DA5  3FC0               	movwi [0]fsr1
 22322  0DA6  3FC1               	movwi [1]fsr1
 22323                           
 22324                           ;flashy_task.c: 408: data->holdCountAY = 0;
 22325  0DA7  085E               	movf	flashy_Main@data,w
 22326  0DA8  0086               	movwf	6
 22327  0DA9  085F               	movf	flashy_Main@data+1,w
 22328  0DAA  0087               	movwf	7
 22329  0DAB  3154               	addfsr 1,20
 22330  0DAC  3000               	movlw	0
 22331  0DAD  3FC0               	movwi [0]fsr1
 22332  0DAE  3FC1               	movwi [1]fsr1
 22333                           
 22334                           ;flashy_task.c: 409: data->holdCountAX = 0;
 22335  0DAF  085E               	movf	flashy_Main@data,w
 22336  0DB0  0086               	movwf	6
 22337  0DB1  085F               	movf	flashy_Main@data+1,w
 22338  0DB2  0087               	movwf	7
 22339  0DB3  3156               	addfsr 1,22
 22340  0DB4  3000               	movlw	0
 22341  0DB5  3FC0               	movwi [0]fsr1
 22342  0DB6  3FC1               	movwi [1]fsr1
 22343                           
 22344                           ;flashy_task.c: 410: data->holdCountBX = 0;
 22345  0DB7  085E               	movf	flashy_Main@data,w
 22346  0DB8  0086               	movwf	6
 22347  0DB9  085F               	movf	flashy_Main@data+1,w
 22348  0DBA  0087               	movwf	7
 22349  0DBB  3158               	addfsr 1,24
 22350  0DBC  3000               	movlw	0
 22351  0DBD  3FC0               	movwi [0]fsr1
 22352  0DBE  3FC1               	movwi [1]fsr1
 22353                           
 22354                           ;flashy_task.c: 411: data->holdCountBY = 0;
 22355  0DBF  085E               	movf	flashy_Main@data,w
 22356  0DC0  0086               	movwf	6
 22357  0DC1  085F               	movf	flashy_Main@data+1,w
 22358  0DC2  0087               	movwf	7
 22359  0DC3  315A               	addfsr 1,26
 22360  0DC4  3000               	movlw	0
 22361  0DC5  3FC0               	movwi [0]fsr1
 22362  0DC6  3FC1               	movwi [1]fsr1
 22363                           
 22364                           ;flashy_task.c: 412: data->noholdCount = 0;
 22365  0DC7  085E               	movf	flashy_Main@data,w
 22366  0DC8  0086               	movwf	6
 22367  0DC9  085F               	movf	flashy_Main@data+1,w
 22368  0DCA  0087               	movwf	7
 22369  0DCB  315C               	addfsr 1,28
 22370  0DCC  3000               	movlw	0
 22371  0DCD  3FC0               	movwi [0]fsr1
 22372  0DCE  3FC1               	movwi [1]fsr1
 22373                           
 22374                           ;flashy_task.c: 413: break;
 22375  0DCF  2FC9               	goto	l9473
 22376  0DD0                     l9389:	
 22377                           ;flashy_task.c: 414: case 1:
 22378                           
 22379                           
 22380                           ;flashy_task.c: 415: if ( data->holdCountA == 0){
 22381  0DD0  085E               	movf	flashy_Main@data,w
 22382  0DD1  0086               	movwf	6
 22383  0DD2  085F               	movf	flashy_Main@data+1,w
 22384  0DD3  0087               	movwf	7
 22385  0DD4  314A               	addfsr 1,10
 22386  0DD5  0016               	moviw fsr1++
 22387  0DD6  0401               	iorwf	1,w
 22388  0DD7  1D03               	btfss	3,2
 22389  0DD8  2E3E               	goto	l9417
 22390                           
 22391                           ;flashy_task.c: 418: if (flashy_leds_state_track > 4){
 22392  0DD9  3000               	movlw	0
 22393  0DDA  0021               	movlb	1	; select bank1
 22394  0DDB  0231               	subwf	(_flashy_leds_state_track+1)^(0+128),w
 22395  0DDC  3005               	movlw	5
 22396  0DDD  1903               	skipnz
 22397  0DDE  0230               	subwf	_flashy_leds_state_track^(0+128),w
 22398  0DDF  1C03               	skipc
 22399  0DE0  2DE3               	goto	l9395
 22400                           
 22401                           ;flashy_task.c: 419: flashy_leds_state_track=0;
 22402  0DE1  01B0               	clrf	_flashy_leds_state_track^(0+128)
 22403  0DE2  01B1               	clrf	(_flashy_leds_state_track+1)^(0+128)
 22404  0DE3                     l9395:	
 22405                           
 22406                           ;flashy_task.c: 420: }
 22407                           ;flashy_task.c: 421: if (flashy_leds_state_track== 0){
 22408  0DE3  0830               	movf	_flashy_leds_state_track^(0+128),w
 22409  0DE4  0431               	iorwf	(_flashy_leds_state_track+1)^(0+128),w
 22410  0DE5  1D03               	btfss	3,2
 22411  0DE6  2DF4               	goto	l9399
 22412                           
 22413                           ;flashy_task.c: 422: data->led_state = FLASHY_STATE_LED_ALT;
 22414  0DE7  0020               	movlb	0	; select bank0
 22415  0DE8  085E               	movf	flashy_Main@data,w
 22416  0DE9  3E03               	addlw	3
 22417  0DEA  00D4               	movwf	??_flashy_Main
 22418  0DEB  3000               	movlw	0
 22419  0DEC  3D5F               	addwfc	flashy_Main@data+1,w
 22420  0DED  00D5               	movwf	??_flashy_Main+1
 22421  0DEE  0854               	movf	??_flashy_Main,w
 22422  0DEF  0086               	movwf	6
 22423  0DF0  0855               	movf	??_flashy_Main+1,w
 22424  0DF1  0087               	movwf	7
 22425  0DF2  3004               	movlw	4
 22426  0DF3  0081               	movwf	1
 22427  0DF4                     l9399:	
 22428                           
 22429                           ;flashy_task.c: 423: }
 22430                           ;flashy_task.c: 424: if (flashy_leds_state_track ==1){
 22431  0DF4  0021               	movlb	1	; select bank1
 22432  0DF5  0330               	decf	_flashy_leds_state_track^(0+128),w
 22433  0DF6  0431               	iorwf	(_flashy_leds_state_track+1)^(0+128),w
 22434  0DF7  1D03               	btfss	3,2
 22435  0DF8  2E06               	goto	l9403
 22436                           
 22437                           ;flashy_task.c: 425: data->led_state = FLASHY_STATE_SPARKLE;
 22438  0DF9  0020               	movlb	0	; select bank0
 22439  0DFA  085E               	movf	flashy_Main@data,w
 22440  0DFB  3E03               	addlw	3
 22441  0DFC  00D4               	movwf	??_flashy_Main
 22442  0DFD  3000               	movlw	0
 22443  0DFE  3D5F               	addwfc	flashy_Main@data+1,w
 22444  0DFF  00D5               	movwf	??_flashy_Main+1
 22445  0E00  0854               	movf	??_flashy_Main,w
 22446  0E01  0086               	movwf	6
 22447  0E02  0855               	movf	??_flashy_Main+1,w
 22448  0E03  0087               	movwf	7
 22449  0E04  3002               	movlw	2
 22450  0E05  0081               	movwf	1
 22451  0E06                     l9403:	
 22452                           
 22453                           ;flashy_task.c: 426: }
 22454                           ;flashy_task.c: 427: if (flashy_leds_state_track == 2){
 22455  0E06  3002               	movlw	2
 22456  0E07  0021               	movlb	1	; select bank1
 22457  0E08  0630               	xorwf	_flashy_leds_state_track^(0+128),w
 22458  0E09  0431               	iorwf	(_flashy_leds_state_track+1)^(0+128),w
 22459  0E0A  1D03               	btfss	3,2
 22460  0E0B  2E19               	goto	l9407
 22461                           
 22462                           ;flashy_task.c: 428: data->led_state = FLASHY_STATE_CIRCLE;
 22463  0E0C  0020               	movlb	0	; select bank0
 22464  0E0D  085E               	movf	flashy_Main@data,w
 22465  0E0E  3E03               	addlw	3
 22466  0E0F  00D4               	movwf	??_flashy_Main
 22467  0E10  3000               	movlw	0
 22468  0E11  3D5F               	addwfc	flashy_Main@data+1,w
 22469  0E12  00D5               	movwf	??_flashy_Main+1
 22470  0E13  0854               	movf	??_flashy_Main,w
 22471  0E14  0086               	movwf	6
 22472  0E15  0855               	movf	??_flashy_Main+1,w
 22473  0E16  0087               	movwf	7
 22474  0E17  3003               	movlw	3
 22475  0E18  0081               	movwf	1
 22476  0E19                     l9407:	
 22477                           
 22478                           ;flashy_task.c: 429: }
 22479                           ;flashy_task.c: 430: if (flashy_leds_state_track == 3){
 22480  0E19  3003               	movlw	3
 22481  0E1A  0021               	movlb	1	; select bank1
 22482  0E1B  0630               	xorwf	_flashy_leds_state_track^(0+128),w
 22483  0E1C  0431               	iorwf	(_flashy_leds_state_track+1)^(0+128),w
 22484  0E1D  1D03               	btfss	3,2
 22485  0E1E  2E26               	goto	l9411
 22486                           
 22487                           ;flashy_task.c: 431: data->led_state = FLASHY_STATE_LED_ROUNDABOUT;
 22488  0E1F  0020               	movlb	0	; select bank0
 22489  0E20  085E               	movf	flashy_Main@data,w
 22490  0E21  0086               	movwf	6
 22491  0E22  085F               	movf	flashy_Main@data+1,w
 22492  0E23  0087               	movwf	7
 22493  0E24  3143               	addfsr 1,3
 22494  0E25  0181               	clrf	1
 22495  0E26                     l9411:	
 22496                           
 22497                           ;flashy_task.c: 432: }
 22498                           ;flashy_task.c: 433: if (flashy_leds_state_track ==4 ){
 22499  0E26  3004               	movlw	4
 22500  0E27  0021               	movlb	1	; select bank1
 22501  0E28  0630               	xorwf	_flashy_leds_state_track^(0+128),w
 22502  0E29  0431               	iorwf	(_flashy_leds_state_track+1)^(0+128),w
 22503  0E2A  1D03               	btfss	3,2
 22504  0E2B  2E39               	goto	l9415
 22505                           
 22506                           ;flashy_task.c: 434: data->led_state = FLASHY_STATE_LED_PARODY;
 22507  0E2C  0020               	movlb	0	; select bank0
 22508  0E2D  085E               	movf	flashy_Main@data,w
 22509  0E2E  3E03               	addlw	3
 22510  0E2F  00D4               	movwf	??_flashy_Main
 22511  0E30  3000               	movlw	0
 22512  0E31  3D5F               	addwfc	flashy_Main@data+1,w
 22513  0E32  00D5               	movwf	??_flashy_Main+1
 22514  0E33  0854               	movf	??_flashy_Main,w
 22515  0E34  0086               	movwf	6
 22516  0E35  0855               	movf	??_flashy_Main+1,w
 22517  0E36  0087               	movwf	7
 22518  0E37  3005               	movlw	5
 22519  0E38  0081               	movwf	1
 22520  0E39                     l9415:	
 22521                           
 22522                           ;flashy_task.c: 435: }
 22523                           ;flashy_task.c: 436: flashy_leds_state_track +=1;
 22524  0E39  3001               	movlw	1
 22525  0E3A  0021               	movlb	1	; select bank1
 22526  0E3B  07B0               	addwf	_flashy_leds_state_track^(0+128),f
 22527  0E3C  3000               	movlw	0
 22528  0E3D  3DB1               	addwfc	(_flashy_leds_state_track+1)^(0+128),f
 22529  0E3E                     l9417:	
 22530                           
 22531                           ;flashy_task.c: 437: }
 22532                           ;flashy_task.c: 439: data->holdCountA += 1;
 22533  0E3E  0020               	movlb	0	; select bank0
 22534  0E3F  085E               	movf	flashy_Main@data,w
 22535  0E40  0086               	movwf	6
 22536  0E41  085F               	movf	flashy_Main@data+1,w
 22537  0E42  0087               	movwf	7
 22538  0E43  314A               	addfsr 1,10
 22539  0E44  3001               	movlw	1
 22540  0E45  0781               	addwf	1,f
 22541  0E46  3141               	addfsr 1,1
 22542  0E47  1803               	skipnc
 22543  0E48  0A81               	incf	1,f
 22544                           
 22545                           ;flashy_task.c: 440: data->holdCountB = 0;
 22546  0E49  085E               	movf	flashy_Main@data,w
 22547  0E4A  0086               	movwf	6
 22548  0E4B  085F               	movf	flashy_Main@data+1,w
 22549  0E4C  0087               	movwf	7
 22550  0E4D  314C               	addfsr 1,12
 22551  0E4E  3000               	movlw	0
 22552  0E4F  3FC0               	movwi [0]fsr1
 22553  0E50  3FC1               	movwi [1]fsr1
 22554                           
 22555                           ;flashy_task.c: 441: data->holdCountX = 0;
 22556  0E51  085E               	movf	flashy_Main@data,w
 22557  0E52  0086               	movwf	6
 22558  0E53  085F               	movf	flashy_Main@data+1,w
 22559  0E54  0087               	movwf	7
 22560  0E55  314E               	addfsr 1,14
 22561  0E56  3000               	movlw	0
 22562  0E57  3FC0               	movwi [0]fsr1
 22563  0E58  3FC1               	movwi [1]fsr1
 22564                           
 22565                           ;flashy_task.c: 442: data->holdCountY = 0;
 22566  0E59  085E               	movf	flashy_Main@data,w
 22567  0E5A  0086               	movwf	6
 22568  0E5B  085F               	movf	flashy_Main@data+1,w
 22569  0E5C  0087               	movwf	7
 22570  0E5D  3150               	addfsr 1,16
 22571  0E5E  3000               	movlw	0
 22572  0E5F  3FC0               	movwi [0]fsr1
 22573  0E60  3FC1               	movwi [1]fsr1
 22574                           
 22575                           ;flashy_task.c: 443: data->holdCountXY = 0;
 22576  0E61  085E               	movf	flashy_Main@data,w
 22577  0E62  0086               	movwf	6
 22578  0E63  085F               	movf	flashy_Main@data+1,w
 22579  0E64  0087               	movwf	7
 22580  0E65  3152               	addfsr 1,18
 22581  0E66  3000               	movlw	0
 22582  0E67  3FC0               	movwi [0]fsr1
 22583  0E68  3FC1               	movwi [1]fsr1
 22584                           
 22585                           ;flashy_task.c: 444: data->holdCountAY = 0;
 22586  0E69  085E               	movf	flashy_Main@data,w
 22587  0E6A  0086               	movwf	6
 22588  0E6B  085F               	movf	flashy_Main@data+1,w
 22589  0E6C  0087               	movwf	7
 22590  0E6D  3154               	addfsr 1,20
 22591  0E6E  3000               	movlw	0
 22592  0E6F  3FC0               	movwi [0]fsr1
 22593  0E70  3FC1               	movwi [1]fsr1
 22594                           
 22595                           ;flashy_task.c: 445: data->holdCountAX = 0;
 22596  0E71  085E               	movf	flashy_Main@data,w
 22597  0E72  0086               	movwf	6
 22598  0E73  085F               	movf	flashy_Main@data+1,w
 22599  0E74  0087               	movwf	7
 22600  0E75  3156               	addfsr 1,22
 22601  0E76  3000               	movlw	0
 22602  0E77  3FC0               	movwi [0]fsr1
 22603  0E78  3FC1               	movwi [1]fsr1
 22604                           
 22605                           ;flashy_task.c: 446: data->holdCountBX = 0;
 22606  0E79  085E               	movf	flashy_Main@data,w
 22607  0E7A  0086               	movwf	6
 22608  0E7B  085F               	movf	flashy_Main@data+1,w
 22609  0E7C  0087               	movwf	7
 22610  0E7D  3158               	addfsr 1,24
 22611  0E7E  3000               	movlw	0
 22612  0E7F  3FC0               	movwi [0]fsr1
 22613  0E80  3FC1               	movwi [1]fsr1
 22614                           
 22615                           ;flashy_task.c: 447: data->holdCountBY = 0;
 22616  0E81  085E               	movf	flashy_Main@data,w
 22617  0E82  0086               	movwf	6
 22618  0E83  085F               	movf	flashy_Main@data+1,w
 22619  0E84  0087               	movwf	7
 22620  0E85  315A               	addfsr 1,26
 22621  0E86  3000               	movlw	0
 22622  0E87  3FC0               	movwi [0]fsr1
 22623  0E88  3FC1               	movwi [1]fsr1
 22624                           
 22625                           ;flashy_task.c: 448: data->noholdCount = 0;
 22626  0E89  085E               	movf	flashy_Main@data,w
 22627  0E8A  0086               	movwf	6
 22628  0E8B  085F               	movf	flashy_Main@data+1,w
 22629  0E8C  0087               	movwf	7
 22630  0E8D  315C               	addfsr 1,28
 22631  0E8E  3000               	movlw	0
 22632  0E8F  3FC0               	movwi [0]fsr1
 22633  0E90  3FC1               	movwi [1]fsr1
 22634                           
 22635                           ;flashy_task.c: 449: break;
 22636  0E91  2FC9               	goto	l9473
 22637  0E92                     l9437:	
 22638                           ;flashy_task.c: 450: case 0:
 22639                           
 22640                           
 22641                           ;flashy_task.c: 452: data->holdCountA = 0;
 22642  0E92  085E               	movf	flashy_Main@data,w
 22643  0E93  0086               	movwf	6
 22644  0E94  085F               	movf	flashy_Main@data+1,w
 22645  0E95  0087               	movwf	7
 22646  0E96  314A               	addfsr 1,10
 22647  0E97  3000               	movlw	0
 22648  0E98  3FC0               	movwi [0]fsr1
 22649  0E99  3FC1               	movwi [1]fsr1
 22650                           
 22651                           ;flashy_task.c: 453: data->holdCountB = 0;
 22652  0E9A  085E               	movf	flashy_Main@data,w
 22653  0E9B  0086               	movwf	6
 22654  0E9C  085F               	movf	flashy_Main@data+1,w
 22655  0E9D  0087               	movwf	7
 22656  0E9E  314C               	addfsr 1,12
 22657  0E9F  3000               	movlw	0
 22658  0EA0  3FC0               	movwi [0]fsr1
 22659  0EA1  3FC1               	movwi [1]fsr1
 22660                           
 22661                           ;flashy_task.c: 454: data->holdCountX = 0;
 22662  0EA2  085E               	movf	flashy_Main@data,w
 22663  0EA3  0086               	movwf	6
 22664  0EA4  085F               	movf	flashy_Main@data+1,w
 22665  0EA5  0087               	movwf	7
 22666  0EA6  314E               	addfsr 1,14
 22667  0EA7  3000               	movlw	0
 22668  0EA8  3FC0               	movwi [0]fsr1
 22669  0EA9  3FC1               	movwi [1]fsr1
 22670                           
 22671                           ;flashy_task.c: 455: data->holdCountY = 0;
 22672  0EAA  085E               	movf	flashy_Main@data,w
 22673  0EAB  0086               	movwf	6
 22674  0EAC  085F               	movf	flashy_Main@data+1,w
 22675  0EAD  0087               	movwf	7
 22676  0EAE  3150               	addfsr 1,16
 22677  0EAF  3000               	movlw	0
 22678  0EB0  3FC0               	movwi [0]fsr1
 22679  0EB1  3FC1               	movwi [1]fsr1
 22680                           
 22681                           ;flashy_task.c: 456: data->holdCountXY = 0;
 22682  0EB2  085E               	movf	flashy_Main@data,w
 22683  0EB3  0086               	movwf	6
 22684  0EB4  085F               	movf	flashy_Main@data+1,w
 22685  0EB5  0087               	movwf	7
 22686  0EB6  3152               	addfsr 1,18
 22687  0EB7  3000               	movlw	0
 22688  0EB8  3FC0               	movwi [0]fsr1
 22689  0EB9  3FC1               	movwi [1]fsr1
 22690                           
 22691                           ;flashy_task.c: 457: data->holdCountAY = 0;
 22692  0EBA  085E               	movf	flashy_Main@data,w
 22693  0EBB  0086               	movwf	6
 22694  0EBC  085F               	movf	flashy_Main@data+1,w
 22695  0EBD  0087               	movwf	7
 22696  0EBE  3154               	addfsr 1,20
 22697  0EBF  3000               	movlw	0
 22698  0EC0  3FC0               	movwi [0]fsr1
 22699  0EC1  3FC1               	movwi [1]fsr1
 22700                           
 22701                           ;flashy_task.c: 458: data->holdCountAX = 0;
 22702  0EC2  085E               	movf	flashy_Main@data,w
 22703  0EC3  0086               	movwf	6
 22704  0EC4  085F               	movf	flashy_Main@data+1,w
 22705  0EC5  0087               	movwf	7
 22706  0EC6  3156               	addfsr 1,22
 22707  0EC7  3000               	movlw	0
 22708  0EC8  3FC0               	movwi [0]fsr1
 22709  0EC9  3FC1               	movwi [1]fsr1
 22710                           
 22711                           ;flashy_task.c: 459: data->holdCountBX = 0;
 22712  0ECA  085E               	movf	flashy_Main@data,w
 22713  0ECB  0086               	movwf	6
 22714  0ECC  085F               	movf	flashy_Main@data+1,w
 22715  0ECD  0087               	movwf	7
 22716  0ECE  3158               	addfsr 1,24
 22717  0ECF  3000               	movlw	0
 22718  0ED0  3FC0               	movwi [0]fsr1
 22719  0ED1  3FC1               	movwi [1]fsr1
 22720                           
 22721                           ;flashy_task.c: 460: data->holdCountBY = 0;
 22722  0ED2  085E               	movf	flashy_Main@data,w
 22723  0ED3  0086               	movwf	6
 22724  0ED4  085F               	movf	flashy_Main@data+1,w
 22725  0ED5  0087               	movwf	7
 22726  0ED6  315A               	addfsr 1,26
 22727  0ED7  3000               	movlw	0
 22728  0ED8  3FC0               	movwi [0]fsr1
 22729  0ED9  3FC1               	movwi [1]fsr1
 22730                           
 22731                           ;flashy_task.c: 461: data->noholdCount += 1;
 22732  0EDA  085E               	movf	flashy_Main@data,w
 22733  0EDB  0086               	movwf	6
 22734  0EDC  085F               	movf	flashy_Main@data+1,w
 22735  0EDD  0087               	movwf	7
 22736  0EDE  315C               	addfsr 1,28
 22737  0EDF  3001               	movlw	1
 22738  0EE0  0781               	addwf	1,f
 22739  0EE1  3141               	addfsr 1,1
 22740  0EE2  1803               	skipnc
 22741  0EE3  0A81               	incf	1,f
 22742                           
 22743                           ;flashy_task.c: 462: break;
 22744  0EE4  2FC9               	goto	l9473
 22745  0EE5                     l9441:	
 22746                           ;flashy_task.c: 463: default:
 22747                           
 22748                           
 22749                           ;flashy_task.c: 464: data->holdCountA = 0;
 22750  0EE5  085E               	movf	flashy_Main@data,w
 22751  0EE6  0086               	movwf	6
 22752  0EE7  085F               	movf	flashy_Main@data+1,w
 22753  0EE8  0087               	movwf	7
 22754  0EE9  314A               	addfsr 1,10
 22755  0EEA  3000               	movlw	0
 22756  0EEB  3FC0               	movwi [0]fsr1
 22757  0EEC  3FC1               	movwi [1]fsr1
 22758                           
 22759                           ;flashy_task.c: 465: data->holdCountB = 0;
 22760  0EED  085E               	movf	flashy_Main@data,w
 22761  0EEE  0086               	movwf	6
 22762  0EEF  085F               	movf	flashy_Main@data+1,w
 22763  0EF0  0087               	movwf	7
 22764  0EF1  314C               	addfsr 1,12
 22765  0EF2  3000               	movlw	0
 22766  0EF3  3FC0               	movwi [0]fsr1
 22767  0EF4  3FC1               	movwi [1]fsr1
 22768                           
 22769                           ;flashy_task.c: 466: data->holdCountX = 0;
 22770  0EF5  085E               	movf	flashy_Main@data,w
 22771  0EF6  0086               	movwf	6
 22772  0EF7  085F               	movf	flashy_Main@data+1,w
 22773  0EF8  0087               	movwf	7
 22774  0EF9  314E               	addfsr 1,14
 22775  0EFA  3000               	movlw	0
 22776  0EFB  3FC0               	movwi [0]fsr1
 22777  0EFC  3FC1               	movwi [1]fsr1
 22778                           
 22779                           ;flashy_task.c: 467: data->holdCountY = 0;
 22780  0EFD  085E               	movf	flashy_Main@data,w
 22781  0EFE  0086               	movwf	6
 22782  0EFF  085F               	movf	flashy_Main@data+1,w
 22783  0F00  0087               	movwf	7
 22784  0F01  3150               	addfsr 1,16
 22785  0F02  3000               	movlw	0
 22786  0F03  3FC0               	movwi [0]fsr1
 22787  0F04  3FC1               	movwi [1]fsr1
 22788                           
 22789                           ;flashy_task.c: 468: data->holdCountXY = 0;
 22790  0F05  085E               	movf	flashy_Main@data,w
 22791  0F06  0086               	movwf	6
 22792  0F07  085F               	movf	flashy_Main@data+1,w
 22793  0F08  0087               	movwf	7
 22794  0F09  3152               	addfsr 1,18
 22795  0F0A  3000               	movlw	0
 22796  0F0B  3FC0               	movwi [0]fsr1
 22797  0F0C  3FC1               	movwi [1]fsr1
 22798                           
 22799                           ;flashy_task.c: 469: data->holdCountAY = 0;
 22800  0F0D  085E               	movf	flashy_Main@data,w
 22801  0F0E  0086               	movwf	6
 22802  0F0F  085F               	movf	flashy_Main@data+1,w
 22803  0F10  0087               	movwf	7
 22804  0F11  3154               	addfsr 1,20
 22805  0F12  3000               	movlw	0
 22806  0F13  3FC0               	movwi [0]fsr1
 22807  0F14  3FC1               	movwi [1]fsr1
 22808                           
 22809                           ;flashy_task.c: 470: data->holdCountAX = 0;
 22810  0F15  085E               	movf	flashy_Main@data,w
 22811  0F16  0086               	movwf	6
 22812  0F17  085F               	movf	flashy_Main@data+1,w
 22813  0F18  0087               	movwf	7
 22814  0F19  3156               	addfsr 1,22
 22815  0F1A  3000               	movlw	0
 22816  0F1B  3FC0               	movwi [0]fsr1
 22817  0F1C  3FC1               	movwi [1]fsr1
 22818                           
 22819                           ;flashy_task.c: 471: data->holdCountBX = 0;
 22820  0F1D  085E               	movf	flashy_Main@data,w
 22821  0F1E  0086               	movwf	6
 22822  0F1F  085F               	movf	flashy_Main@data+1,w
 22823  0F20  0087               	movwf	7
 22824  0F21  3158               	addfsr 1,24
 22825  0F22  3000               	movlw	0
 22826  0F23  3FC0               	movwi [0]fsr1
 22827  0F24  3FC1               	movwi [1]fsr1
 22828                           
 22829                           ;flashy_task.c: 472: data->holdCountBY = 0;
 22830  0F25  085E               	movf	flashy_Main@data,w
 22831  0F26  0086               	movwf	6
 22832  0F27  085F               	movf	flashy_Main@data+1,w
 22833  0F28  0087               	movwf	7
 22834  0F29  315A               	addfsr 1,26
 22835  0F2A  3000               	movlw	0
 22836  0F2B  3FC0               	movwi [0]fsr1
 22837  0F2C  3FC1               	movwi [1]fsr1
 22838                           
 22839                           ;flashy_task.c: 473: data->noholdCount = 0;
 22840  0F2D  085E               	movf	flashy_Main@data,w
 22841  0F2E  0086               	movwf	6
 22842  0F2F  085F               	movf	flashy_Main@data+1,w
 22843  0F30  0087               	movwf	7
 22844  0F31  315C               	addfsr 1,28
 22845  0F32  3000               	movlw	0
 22846  0F33  3FC0               	movwi [0]fsr1
 22847  0F34  3FC1               	movwi [1]fsr1
 22848                           
 22849                           ;flashy_task.c: 474: }
 22850  0F35  2FC9               	goto	l9473
 22851  0F36                     l9443:	
 22852                           
 22853                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 22854                           ; Switch size 1, requested type "space"
 22855                           ; Number of cases is 1, Range of values is 0 to 0
 22856                           ; switch strategies available:
 22857                           ; Name         Instructions Cycles
 22858                           ; simple_byte            4     3 (average)
 22859                           ; direct_byte            8     6 (fixed)
 22860                           ; jumptable            260     6 (fixed)
 22861                           ;	Chosen strategy is simple_byte
 22862  0F36  085D               	movf	flashy_Main@buttonPressed+1,w
 22863  0F37  3A00               	xorlw	0	; case 0
 22864  0F38  1903               	skipnz
 22865  0F39  2F3B               	goto	l10805
 22866  0F3A  2EE5               	goto	l9441
 22867  0F3B                     l10805:	
 22868                           
 22869                           ; Switch size 1, requested type "space"
 22870                           ; Number of cases is 9, Range of values is 0 to 12
 22871                           ; switch strategies available:
 22872                           ; Name         Instructions Cycles
 22873                           ; simple_byte           28    15 (average)
 22874                           ; direct_byte           32     6 (fixed)
 22875                           ; jumptable            260     6 (fixed)
 22876                           ;	Chosen strategy is simple_byte
 22877  0F3B  085C               	movf	flashy_Main@buttonPressed,w
 22878  0F3C  3A00               	xorlw	0	; case 0
 22879  0F3D  1903               	skipnz
 22880  0F3E  2E92               	goto	l9437
 22881  0F3F  3A01               	xorlw	1	; case 1
 22882  0F40  1903               	skipnz
 22883  0F41  2DD0               	goto	l9389
 22884  0F42  3A03               	xorlw	3	; case 2
 22885  0F43  1903               	skipnz
 22886  0F44  2D4E               	goto	l9359
 22887  0F45  3A07               	xorlw	7	; case 5
 22888  0F46  1903               	skipnz
 22889  0F47  2B4C               	goto	l9235
 22890  0F48  3A03               	xorlw	3	; case 6
 22891  0F49  1903               	skipnz
 22892  0F4A  2C30               	goto	l9291
 22893  0F4B  3A0E               	xorlw	14	; case 8
 22894  0F4C  1903               	skipnz
 22895  0F4D  2CA5               	goto	l9321
 22896  0F4E  3A01               	xorlw	1	; case 9
 22897  0F4F  1903               	skipnz
 22898  0F50  2ADF               	goto	l9209
 22899  0F51  3A03               	xorlw	3	; case 10
 22900  0F52  1903               	skipnz
 22901  0F53  2BBB               	goto	l9261
 22902  0F54  3A06               	xorlw	6	; case 12
 22903  0F55  1903               	skipnz
 22904  0F56  2A7D               	goto	l9185
 22905  0F57  2EE5               	goto	l9441
 22906                           
 22907                           ;flashy_task.c: 477: switch (data->blaster_state) {
 22908  0F58  2FC9               	goto	l9473
 22909  0F59                     l9445:	
 22910                           ;flashy_task.c: 478: case FLASHY_BLASTER_SHOOTING_STATE:
 22911                           
 22912                           
 22913                           ;flashy_task.c: 480: if (data->blasterTickCount == 100) {
 22914  0F59  085E               	movf	flashy_Main@data,w
 22915  0F5A  0086               	movwf	6
 22916  0F5B  085F               	movf	flashy_Main@data+1,w
 22917  0F5C  0087               	movwf	7
 22918  0F5D  3147               	addfsr 1,7
 22919  0F5E  0016               	moviw fsr1++
 22920  0F5F  3A64               	xorlw	100
 22921  0F60  00D4               	movwf	??_flashy_Main
 22922  0F61  0016               	moviw fsr1++
 22923  0F62  04D4               	iorwf	??_flashy_Main,f
 22924  0F63  1D03               	btfss	3,2
 22925  0F64  2F70               	goto	l9451
 22926                           
 22927                           ;flashy_task.c: 481: nullifyBadge_irTxRegister(data->badge);
 22928  0F65  085E               	movf	flashy_Main@data,w
 22929  0F66  0086               	movwf	6
 22930  0F67  085F               	movf	flashy_Main@data+1,w
 22931  0F68  0087               	movwf	7
 22932  0F69  0801               	movf	1,w
 22933  0F6A  31B4  24A7  3188   	fcall	_nullifyBadge_irTxRegister
 22934                           
 22935                           ;flashy_task.c: 482: nullifyBadge_irTxSet();
 22936  0F6D  31B3  23B3  3188   	fcall	_nullifyBadge_irTxSet
 22937  0F70                     l9451:	
 22938                           
 22939                           ;flashy_task.c: 483: }
 22940                           ;flashy_task.c: 484: if (data->blasterTickCount == 100 - 1 ){
 22941  0F70  0020               	movlb	0	; select bank0
 22942  0F71  085E               	movf	flashy_Main@data,w
 22943  0F72  0086               	movwf	6
 22944  0F73  085F               	movf	flashy_Main@data+1,w
 22945  0F74  0087               	movwf	7
 22946  0F75  3147               	addfsr 1,7
 22947  0F76  0016               	moviw fsr1++
 22948  0F77  3A63               	xorlw	99
 22949  0F78  00D4               	movwf	??_flashy_Main
 22950  0F79  0016               	moviw fsr1++
 22951  0F7A  04D4               	iorwf	??_flashy_Main,f
 22952  0F7B  1D03               	btfss	3,2
 22953  0F7C  2F89               	goto	l9457
 22954                           
 22955                           ;flashy_task.c: 485: nullifyBadge_irTxClr();
 22956  0F7D  31B3  23B0  3188   	fcall	_nullifyBadge_irTxClr
 22957                           
 22958                           ;flashy_task.c: 486: nullifyBadge_irTxRelease(data->badge);
 22959  0F80  0020               	movlb	0	; select bank0
 22960  0F81  085E               	movf	flashy_Main@data,w
 22961  0F82  0086               	movwf	6
 22962  0F83  085F               	movf	flashy_Main@data+1,w
 22963  0F84  0087               	movwf	7
 22964  0F85  0801               	movf	1,w
 22965  0F86  31B4  2443  3188   	fcall	_nullifyBadge_irTxRelease
 22966  0F89                     l9457:	
 22967                           
 22968                           ;flashy_task.c: 487: }
 22969                           ;flashy_task.c: 488: if (data->blasterTickCount == 0){
 22970  0F89  0020               	movlb	0	; select bank0
 22971  0F8A  085E               	movf	flashy_Main@data,w
 22972  0F8B  0086               	movwf	6
 22973  0F8C  085F               	movf	flashy_Main@data+1,w
 22974  0F8D  0087               	movwf	7
 22975  0F8E  3147               	addfsr 1,7
 22976  0F8F  0016               	moviw fsr1++
 22977  0F90  0401               	iorwf	1,w
 22978  0F91  1D03               	btfss	3,2
 22979  0F92  2FBD               	goto	l9469
 22980                           
 22981                           ;flashy_task.c: 489: data->displayTickCount = 0;
 22982  0F93  085E               	movf	flashy_Main@data,w
 22983  0F94  0086               	movwf	6
 22984  0F95  085F               	movf	flashy_Main@data+1,w
 22985  0F96  0087               	movwf	7
 22986  0F97  3144               	addfsr 1,4
 22987  0F98  3000               	movlw	0
 22988  0F99  3FC0               	movwi [0]fsr1
 22989  0F9A  3FC1               	movwi [1]fsr1
 22990                           
 22991                           ;flashy_task.c: 490: data->delayTickCount = 5;
 22992  0F9B  085E               	movf	flashy_Main@data,w
 22993  0F9C  0086               	movwf	6
 22994  0F9D  085F               	movf	flashy_Main@data+1,w
 22995  0F9E  0087               	movwf	7
 22996  0F9F  3141               	addfsr 1,1
 22997  0FA0  3005               	movlw	5
 22998  0FA1  3FC0               	movwi [0]fsr1
 22999  0FA2  3000               	movlw	0
 23000  0FA3  3FC1               	movwi [1]fsr1
 23001                           
 23002                           ;flashy_task.c: 492: data->led_state = FLASHY_STATE_LED_ROUNDABOUT;
 23003  0FA4  085E               	movf	flashy_Main@data,w
 23004  0FA5  0086               	movwf	6
 23005  0FA6  085F               	movf	flashy_Main@data+1,w
 23006  0FA7  0087               	movwf	7
 23007  0FA8  3143               	addfsr 1,3
 23008  0FA9  0181               	clrf	1
 23009                           
 23010                           ;flashy_task.c: 493: data->display_state = FLASHY_STATE_DISPLAY;
 23011  0FAA  085E               	movf	flashy_Main@data,w
 23012  0FAB  0086               	movwf	6
 23013  0FAC  085F               	movf	flashy_Main@data+1,w
 23014  0FAD  0087               	movwf	7
 23015  0FAE  3146               	addfsr 1,6
 23016  0FAF  0181               	clrf	1
 23017                           
 23018                           ;flashy_task.c: 494: data->blaster_state = FLASHY_BLASTER_IDLE_STATE;
 23019  0FB0  085E               	movf	flashy_Main@data,w
 23020  0FB1  3E09               	addlw	9
 23021  0FB2  00D4               	movwf	??_flashy_Main
 23022  0FB3  3000               	movlw	0
 23023  0FB4  3D5F               	addwfc	flashy_Main@data+1,w
 23024  0FB5  00D5               	movwf	??_flashy_Main+1
 23025  0FB6  0854               	movf	??_flashy_Main,w
 23026  0FB7  0086               	movwf	6
 23027  0FB8  0855               	movf	??_flashy_Main+1,w
 23028  0FB9  0087               	movwf	7
 23029  0FBA  3001               	movlw	1
 23030  0FBB  0081               	movwf	1
 23031                           
 23032                           ;flashy_task.c: 495: }
 23033  0FBC  2FD6               	goto	l9475
 23034  0FBD                     l9469:	
 23035                           
 23036                           ;flashy_task.c: 496: else {
 23037                           ;flashy_task.c: 497: data->blasterTickCount -= 1;
 23038  0FBD  085E               	movf	flashy_Main@data,w
 23039  0FBE  0086               	movwf	6
 23040  0FBF  085F               	movf	flashy_Main@data+1,w
 23041  0FC0  0087               	movwf	7
 23042  0FC1  3147               	addfsr 1,7
 23043  0FC2  3001               	movlw	1
 23044  0FC3  0281               	subwf	1,f
 23045  0FC4  3141               	addfsr 1,1
 23046  0FC5  3000               	movlw	0
 23047  0FC6  3B81               	subwfb	1,f
 23048  0FC7  317F               	addfsr 1,-1
 23049                           
 23050                           ;flashy_task.c: 502: }
 23051                           
 23052                           ;flashy_task.c: 501: break;
 23053                           
 23054                           ;flashy_task.c: 500: case FLASHY_BLASTER_IDLE_STATE:
 23055                           
 23056                           ;flashy_task.c: 498: }
 23057                           ;flashy_task.c: 499: break;
 23058  0FC8  2FD6               	goto	l9475
 23059  0FC9                     l9473:	
 23060  0FC9  085E               	movf	flashy_Main@data,w
 23061  0FCA  0086               	movwf	6
 23062  0FCB  085F               	movf	flashy_Main@data+1,w
 23063  0FCC  0087               	movwf	7
 23064  0FCD  3149               	addfsr 1,9
 23065  0FCE  0801               	movf	1,w
 23066                           
 23067                           ; Switch size 1, requested type "space"
 23068                           ; Number of cases is 2, Range of values is 0 to 1
 23069                           ; switch strategies available:
 23070                           ; Name         Instructions Cycles
 23071                           ; simple_byte            7     4 (average)
 23072                           ; direct_byte           10     6 (fixed)
 23073                           ; jumptable            260     6 (fixed)
 23074                           ;	Chosen strategy is simple_byte
 23075  0FCF  3A00               	xorlw	0	; case 0
 23076  0FD0  1903               	skipnz
 23077  0FD1  2F59               	goto	l9445
 23078  0FD2  3A01               	xorlw	1	; case 1
 23079  0FD3  1903               	skipnz
 23080  0FD4  2FD6               	goto	l9475
 23081  0FD5  2FD6               	goto	l9475
 23082  0FD6                     l9475:	
 23083                           
 23084                           ;flashy_task.c: 505: if (nullifyBadge_irGet() && (data->blaster_state != FLASHY_BLASTER_
      +                          SHOOTING_STATE)) {
 23085  0FD6  31B3  23BA  3188   	fcall	_nullifyBadge_irGet
 23086  0FD9  3A00               	xorlw	0
 23087  0FDA  1903               	skipnz
 23088  0FDB  0008               	return
 23089  0FDC  0020               	movlb	0	; select bank0
 23090  0FDD  085E               	movf	flashy_Main@data,w
 23091  0FDE  0086               	movwf	6
 23092  0FDF  085F               	movf	flashy_Main@data+1,w
 23093  0FE0  0087               	movwf	7
 23094  0FE1  3149               	addfsr 1,9
 23095  0FE2  0801               	movf	1,w
 23096  0FE3  1903               	btfsc	3,2
 23097  0FE4  0008               	return
 23098                           
 23099                           ;flashy_task.c: 506: data->displayTickCount = 0;
 23100  0FE5  085E               	movf	flashy_Main@data,w
 23101  0FE6  0086               	movwf	6
 23102  0FE7  085F               	movf	flashy_Main@data+1,w
 23103  0FE8  0087               	movwf	7
 23104  0FE9  3144               	addfsr 1,4
 23105  0FEA  3000               	movlw	0
 23106  0FEB  3FC0               	movwi [0]fsr1
 23107  0FEC  3FC1               	movwi [1]fsr1
 23108                           
 23109                           ;flashy_task.c: 507: deaths += 1;
 23110  0FED  3001               	movlw	1
 23111  0FEE  0021               	movlb	1	; select bank1
 23112  0FEF  07AA               	addwf	_deaths^(0+128),f
 23113  0FF0  3000               	movlw	0
 23114  0FF1  3DAB               	addwfc	(_deaths+1)^(0+128),f
 23115                           
 23116                           ;flashy_task.c: 508: data->display_state = FLASHY_STATE_DISPLAY_SHOT;
 23117  0FF2  0020               	movlb	0	; select bank0
 23118  0FF3  085E               	movf	flashy_Main@data,w
 23119  0FF4  3E06               	addlw	6
 23120  0FF5  00D4               	movwf	??_flashy_Main
 23121  0FF6  3000               	movlw	0
 23122  0FF7  3D5F               	addwfc	flashy_Main@data+1,w
 23123  0FF8  00D5               	movwf	??_flashy_Main+1
 23124  0FF9  0854               	movf	??_flashy_Main,w
 23125  0FFA  0086               	movwf	6
 23126  0FFB  0855               	movf	??_flashy_Main+1,w
 23127  0FFC  0087               	movwf	7
 23128  0FFD  3003               	movlw	3
 23129  0FFE  0081               	movwf	1
 23130  0FFF  0008               	return
 23131  1000                     __end_of_flashy_Main:	
 23132                           
 23133                           	psect	swtext1
 23134  3000                     __pswtext1:	
 23135  3000                     S10803:	
 23136  3000  3188  28D5         	ljmp	l9083
 23137  3002  3188  28FA         	ljmp	l9093
 23138  3004  3189  291E         	ljmp	l9103
 23139  3006  3189  2936         	ljmp	l9111
 23140  3008  3189  296D         	ljmp	l9129
 23141  300A  3189  2992         	ljmp	l9139
 23142                           
 23143                           	psect	text19
 23144  00E5                     __ptext19:	
 23145 ;; *************** function _slot_Main *****************
 23146 ;; Defined at:
 23147 ;;		line 96 in file "slot_task.c"
 23148 ;; Parameters:    Size  Location     Type
 23149 ;;  taskData        2   50[BANK0 ] PTR void 
 23150 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 23151 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 23152 ;; Auto vars:     Size  Location     Type
 23153 ;;  data            2   69[BANK0 ] PTR struct t_slot_taskDa
 23154 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 23155 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 23156 ;;  buttonPresse    1   68[BANK0 ] unsigned char 
 23157 ;; Return value:  Size  Location     Type
 23158 ;;                  1    wreg      void 
 23159 ;; Registers used:
 23160 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 23161 ;; Tracked objects:
 23162 ;;		On entry : 0/0
 23163 ;;		On exit  : 0/0
 23164 ;;		Unchanged: 0/0
 23165 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23166 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23167 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23168 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23169 ;;      Totals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23170 ;;Total ram usage:       21 bytes
 23171 ;; Hardware stack levels used:    1
 23172 ;; Hardware stack levels required when called:   11
 23173 ;; This function calls:
 23174 ;;		___lwmod
 23175 ;;		_marquee
 23176 ;;		_marquee_speedy
 23177 ;;		_memset
 23178 ;;		_nullifyBadge_buttonsGet
 23179 ;;		_rand
 23180 ;;		_slot_Finished_Animation
 23181 ;;		_slot_Running_Animation
 23182 ;;		_slot_Setup
 23183 ;;		_sprintf
 23184 ;;		_strlen
 23185 ;; This function is called by:
 23186 ;;		_main
 23187 ;;		_scheduler_TaskRun
 23188 ;; This function uses a non-reentrant model
 23189 ;;
 23190                           
 23191                           
 23192                           ;psect for function _slot_Main
 23193  00E5                     _slot_Main:	
 23194                           
 23195                           ;slot_task.c: 97: struct t_slot_taskData *data = (struct t_slot_taskData *) taskData;
 23196                           
 23197                           ;incstack = 0
 23198                           ; Regs used in _slot_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 23199  00E5  0020               	movlb	0	; select bank0
 23200  00E6  0853               	movf	slot_Main@taskData+1,w
 23201  00E7  00E6               	movwf	slot_Main@data+1
 23202  00E8  0852               	movf	slot_Main@taskData,w
 23203  00E9  00E5               	movwf	slot_Main@data
 23204                           
 23205                           ;slot_task.c: 98: u8 buttonPressed;
 23206                           ;slot_task.c: 101: if ( currentTask != SLOT_TASK ){
 23207  00EA  0021               	movlb	1	; select bank1
 23208  00EB  033A               	decf	_currentTask^(0+128),w
 23209  00EC  043B               	iorwf	(_currentTask+1)^(0+128),w
 23210  00ED  1903               	btfsc	3,2
 23211  00EE  291E               	goto	l9691
 23212                           
 23213                           ;slot_task.c: 102: buttonPressed = nullifyBadge_buttonsGet();
 23214  00EF  31A8  2082  3180   	fcall	_nullifyBadge_buttonsGet
 23215  00F2  0020               	movlb	0	; select bank0
 23216  00F3  00D4               	movwf	??_slot_Main
 23217  00F4  0854               	movf	??_slot_Main,w
 23218  00F5  00E4               	movwf	slot_Main@buttonPressed
 23219                           
 23220                           ;slot_task.c: 106: data->holdCountA = 1;
 23221                           
 23222                           ;slot_task.c: 104: default:
 23223                           
 23224                           ;slot_task.c: 103: switch (buttonPressed) {
 23225  00F6  0865               	movf	slot_Main@data,w
 23226  00F7  0086               	movwf	6
 23227  00F8  0866               	movf	slot_Main@data+1,w
 23228  00F9  0087               	movwf	7
 23229  00FA  315F               	addfsr 1,31
 23230  00FB  3001               	movlw	1
 23231  00FC  3FC0               	movwi [0]fsr1
 23232  00FD  3000               	movlw	0
 23233  00FE  3FC1               	movwi [1]fsr1
 23234                           
 23235                           ;slot_task.c: 107: data->holdCountB = 1;
 23236  00FF  0865               	movf	slot_Main@data,w
 23237  0100  3E21               	addlw	33
 23238  0101  0086               	movwf	6
 23239  0102  3000               	movlw	0
 23240  0103  3D66               	addwfc	slot_Main@data+1,w
 23241  0104  0087               	movwf	7
 23242  0105  3001               	movlw	1
 23243  0106  3FC0               	movwi [0]fsr1
 23244  0107  3000               	movlw	0
 23245  0108  3FC1               	movwi [1]fsr1
 23246                           
 23247                           ;slot_task.c: 108: data->holdCountX = 1;
 23248  0109  0865               	movf	slot_Main@data,w
 23249  010A  3E23               	addlw	35
 23250  010B  0086               	movwf	6
 23251  010C  3000               	movlw	0
 23252  010D  3D66               	addwfc	slot_Main@data+1,w
 23253  010E  0087               	movwf	7
 23254  010F  3001               	movlw	1
 23255  0110  3FC0               	movwi [0]fsr1
 23256  0111  3000               	movlw	0
 23257  0112  3FC1               	movwi [1]fsr1
 23258                           
 23259                           ;slot_task.c: 109: data->holdCountY = 1;
 23260  0113  0865               	movf	slot_Main@data,w
 23261  0114  3E25               	addlw	37
 23262  0115  0086               	movwf	6
 23263  0116  3000               	movlw	0
 23264  0117  3D66               	addwfc	slot_Main@data+1,w
 23265  0118  0087               	movwf	7
 23266  0119  3001               	movlw	1
 23267  011A  3FC0               	movwi [0]fsr1
 23268  011B  3000               	movlw	0
 23269  011C  3FC1               	movwi [1]fsr1
 23270                           
 23271                           ;slot_task.c: 111: }
 23272                           
 23273                           ;slot_task.c: 110: break;
 23274  011D  0008               	return
 23275  011E                     l9691:	
 23276                           ;slot_task.c: 112: return;
 23277                           
 23278                           
 23279                           ;slot_task.c: 113: }
 23280                           ;slot_task.c: 115: buttonPressed = nullifyBadge_buttonsGet();
 23281  011E  31A8  2082  3180   	fcall	_nullifyBadge_buttonsGet
 23282  0121  0020               	movlb	0	; select bank0
 23283  0122  00D4               	movwf	??_slot_Main
 23284  0123  0854               	movf	??_slot_Main,w
 23285  0124  00E4               	movwf	slot_Main@buttonPressed
 23286                           
 23287                           ;slot_task.c: 119: memset(data->slot_print_buf, 0x00, 20);
 23288                           
 23289                           ;slot_task.c: 117: default:
 23290                           
 23291                           ;slot_task.c: 116: switch (buttonPressed) {
 23292  0125  0865               	movf	slot_Main@data,w
 23293  0126  3E0B               	addlw	11
 23294  0127  00F1               	movwf	memset@p1
 23295  0128  3000               	movlw	0
 23296  0129  3D66               	addwfc	slot_Main@data+1,w
 23297  012A  00F2               	movwf	memset@p1+1
 23298  012B  3000               	movlw	0
 23299  012C  00F3               	movwf	memset@c
 23300  012D  00F4               	movwf	memset@c+1
 23301  012E  3014               	movlw	20
 23302  012F  00F5               	movwf	memset@n
 23303  0130  3000               	movlw	0
 23304  0131  00F6               	movwf	memset@n+1
 23305  0132  31B5  25C1  3180   	fcall	_memset
 23306                           
 23307                           ;slot_task.c: 122: if (data->displayTickCount < 100) {
 23308  0135  0020               	movlb	0	; select bank0
 23309  0136  0865               	movf	slot_Main@data,w
 23310  0137  0086               	movwf	6
 23311  0138  0866               	movf	slot_Main@data+1,w
 23312  0139  0087               	movwf	7
 23313  013A  3143               	addfsr 1,3
 23314  013B  3F40               	moviw [0]fsr1
 23315  013C  00D4               	movwf	??_slot_Main
 23316  013D  3F41               	moviw [1]fsr1
 23317  013E  00D5               	movwf	??_slot_Main+1
 23318  013F  3000               	movlw	0
 23319  0140  0255               	subwf	??_slot_Main+1,w
 23320  0141  3064               	movlw	100
 23321  0142  1903               	skipnz
 23322  0143  0254               	subwf	??_slot_Main,w
 23323  0144  1803               	skipnc
 23324  0145  2A51               	goto	l9711
 23325                           
 23326                           ;slot_task.c: 123: slot_Running_Animation(data);
 23327  0146  0866               	movf	slot_Main@data+1,w
 23328  0147  00B3               	movwf	slot_Running_Animation@taskData+1
 23329  0148  0865               	movf	slot_Main@data,w
 23330  0149  00B2               	movwf	slot_Running_Animation@taskData
 23331  014A  31AB  237B  3180   	fcall	_slot_Running_Animation
 23332                           
 23333                           ;slot_task.c: 124: data->slot_wheel_index[0] = (u8)rand() % strlen(Slot_Wheel);
 23334  014D  3020               	movlw	low _Slot_Wheel
 23335  014E  00F1               	movwf	strlen@s
 23336  014F  3003               	movlw	high _Slot_Wheel
 23337  0150  00F2               	movwf	strlen@s+1
 23338  0151  31B6  2680  3180   	fcall	_strlen
 23339  0154  0872               	movf	?_strlen+1,w
 23340  0155  0020               	movlb	0	; select bank0
 23341  0156  00AC               	movwf	___lwmod@divisor+1
 23342  0157  0871               	movf	?_strlen,w
 23343  0158  00AB               	movwf	___lwmod@divisor
 23344  0159  31AB  2338  3180   	fcall	_rand
 23345  015C  0020               	movlb	0	; select bank0
 23346  015D  0824               	movf	?_rand,w
 23347  015E  00D4               	movwf	??_slot_Main
 23348  015F  01D5               	clrf	??_slot_Main+1
 23349  0160  0854               	movf	??_slot_Main,w
 23350  0161  00AD               	movwf	___lwmod@dividend
 23351  0162  0855               	movf	??_slot_Main+1,w
 23352  0163  00AE               	movwf	___lwmod@dividend+1
 23353  0164  31B7  2772  3180   	fcall	___lwmod
 23354  0167  0020               	movlb	0	; select bank0
 23355  0168  082B               	movf	?___lwmod,w
 23356  0169  00D6               	movwf	??_slot_Main+2
 23357  016A  0865               	movf	slot_Main@data,w
 23358  016B  3E07               	addlw	7
 23359  016C  00D7               	movwf	??_slot_Main+3
 23360  016D  3000               	movlw	0
 23361  016E  3D66               	addwfc	slot_Main@data+1,w
 23362  016F  00D8               	movwf	??_slot_Main+4
 23363  0170  0857               	movf	??_slot_Main+3,w
 23364  0171  0086               	movwf	6
 23365  0172  0858               	movf	??_slot_Main+4,w
 23366  0173  0087               	movwf	7
 23367  0174  0856               	movf	??_slot_Main+2,w
 23368  0175  0081               	movwf	1
 23369                           
 23370                           ;slot_task.c: 125: data->slot_wheel_index[1] = (u8)rand() % strlen(Slot_Wheel);
 23371  0176  3020               	movlw	low _Slot_Wheel
 23372  0177  00F1               	movwf	strlen@s
 23373  0178  3003               	movlw	high _Slot_Wheel
 23374  0179  00F2               	movwf	strlen@s+1
 23375  017A  31B6  2680  3180   	fcall	_strlen
 23376  017D  0872               	movf	?_strlen+1,w
 23377  017E  0020               	movlb	0	; select bank0
 23378  017F  00AC               	movwf	___lwmod@divisor+1
 23379  0180  0871               	movf	?_strlen,w
 23380  0181  00AB               	movwf	___lwmod@divisor
 23381  0182  31AB  2338  3180   	fcall	_rand
 23382  0185  0020               	movlb	0	; select bank0
 23383  0186  0824               	movf	?_rand,w
 23384  0187  00D4               	movwf	??_slot_Main
 23385  0188  01D5               	clrf	??_slot_Main+1
 23386  0189  0854               	movf	??_slot_Main,w
 23387  018A  00AD               	movwf	___lwmod@dividend
 23388  018B  0855               	movf	??_slot_Main+1,w
 23389  018C  00AE               	movwf	___lwmod@dividend+1
 23390  018D  31B7  2772  3180   	fcall	___lwmod
 23391  0190  0020               	movlb	0	; select bank0
 23392  0191  082B               	movf	?___lwmod,w
 23393  0192  00D6               	movwf	??_slot_Main+2
 23394  0193  0865               	movf	slot_Main@data,w
 23395  0194  3E08               	addlw	8
 23396  0195  00D7               	movwf	??_slot_Main+3
 23397  0196  3000               	movlw	0
 23398  0197  3D66               	addwfc	slot_Main@data+1,w
 23399  0198  00D8               	movwf	??_slot_Main+4
 23400  0199  0857               	movf	??_slot_Main+3,w
 23401  019A  0086               	movwf	6
 23402  019B  0858               	movf	??_slot_Main+4,w
 23403  019C  0087               	movwf	7
 23404  019D  0856               	movf	??_slot_Main+2,w
 23405  019E  0081               	movwf	1
 23406                           
 23407                           ;slot_task.c: 126: data->slot_wheel_index[2] = (u8)rand() % strlen(Slot_Wheel);
 23408  019F  3020               	movlw	low _Slot_Wheel
 23409  01A0  00F1               	movwf	strlen@s
 23410  01A1  3003               	movlw	high _Slot_Wheel
 23411  01A2  00F2               	movwf	strlen@s+1
 23412  01A3  31B6  2680  3180   	fcall	_strlen
 23413  01A6  0872               	movf	?_strlen+1,w
 23414  01A7  0020               	movlb	0	; select bank0
 23415  01A8  00AC               	movwf	___lwmod@divisor+1
 23416  01A9  0871               	movf	?_strlen,w
 23417  01AA  00AB               	movwf	___lwmod@divisor
 23418  01AB  31AB  2338  3180   	fcall	_rand
 23419  01AE  0020               	movlb	0	; select bank0
 23420  01AF  0824               	movf	?_rand,w
 23421  01B0  00D4               	movwf	??_slot_Main
 23422  01B1  01D5               	clrf	??_slot_Main+1
 23423  01B2  0854               	movf	??_slot_Main,w
 23424  01B3  00AD               	movwf	___lwmod@dividend
 23425  01B4  0855               	movf	??_slot_Main+1,w
 23426  01B5  00AE               	movwf	___lwmod@dividend+1
 23427  01B6  31B7  2772  3180   	fcall	___lwmod
 23428  01B9  0020               	movlb	0	; select bank0
 23429  01BA  082B               	movf	?___lwmod,w
 23430  01BB  00D6               	movwf	??_slot_Main+2
 23431  01BC  0865               	movf	slot_Main@data,w
 23432  01BD  3E09               	addlw	9
 23433  01BE  00D7               	movwf	??_slot_Main+3
 23434  01BF  3000               	movlw	0
 23435  01C0  3D66               	addwfc	slot_Main@data+1,w
 23436  01C1  00D8               	movwf	??_slot_Main+4
 23437  01C2  0857               	movf	??_slot_Main+3,w
 23438  01C3  0086               	movwf	6
 23439  01C4  0858               	movf	??_slot_Main+4,w
 23440  01C5  0087               	movwf	7
 23441  01C6  0856               	movf	??_slot_Main+2,w
 23442  01C7  0081               	movwf	1
 23443                           
 23444                           ;slot_task.c: 127: data->slot_wheel_index[3] = (u8)rand() % strlen(Slot_Wheel);
 23445  01C8  3020               	movlw	low _Slot_Wheel
 23446  01C9  00F1               	movwf	strlen@s
 23447  01CA  3003               	movlw	high _Slot_Wheel
 23448  01CB  00F2               	movwf	strlen@s+1
 23449  01CC  31B6  2680  3180   	fcall	_strlen
 23450  01CF  0872               	movf	?_strlen+1,w
 23451  01D0  0020               	movlb	0	; select bank0
 23452  01D1  00AC               	movwf	___lwmod@divisor+1
 23453  01D2  0871               	movf	?_strlen,w
 23454  01D3  00AB               	movwf	___lwmod@divisor
 23455  01D4  31AB  2338  3180   	fcall	_rand
 23456  01D7  0020               	movlb	0	; select bank0
 23457  01D8  0824               	movf	?_rand,w
 23458  01D9  00D4               	movwf	??_slot_Main
 23459  01DA  01D5               	clrf	??_slot_Main+1
 23460  01DB  0854               	movf	??_slot_Main,w
 23461  01DC  00AD               	movwf	___lwmod@dividend
 23462  01DD  0855               	movf	??_slot_Main+1,w
 23463  01DE  00AE               	movwf	___lwmod@dividend+1
 23464  01DF  31B7  2772  3180   	fcall	___lwmod
 23465  01E2  0020               	movlb	0	; select bank0
 23466  01E3  082B               	movf	?___lwmod,w
 23467  01E4  00D6               	movwf	??_slot_Main+2
 23468  01E5  0865               	movf	slot_Main@data,w
 23469  01E6  3E0A               	addlw	10
 23470  01E7  00D7               	movwf	??_slot_Main+3
 23471  01E8  3000               	movlw	0
 23472  01E9  3D66               	addwfc	slot_Main@data+1,w
 23473  01EA  00D8               	movwf	??_slot_Main+4
 23474  01EB  0857               	movf	??_slot_Main+3,w
 23475  01EC  0086               	movwf	6
 23476  01ED  0858               	movf	??_slot_Main+4,w
 23477  01EE  0087               	movwf	7
 23478  01EF  0856               	movf	??_slot_Main+2,w
 23479  01F0  0081               	movwf	1
 23480                           
 23481                           ;slot_task.c: 128: sprintf(data->slot_print_buf, "%c%c%c%c", Slot_Wheel[data->slot_wheel
      +                          _index[0]], Slot_Wheel[data->slot_wheel_index[1]], Slot_Wheel[data->slot_wheel_index[2]]
      +                          , Slot_Wheel[data->slot_wheel_index[3]]);
 23482  01F1  0865               	movf	slot_Main@data,w
 23483  01F2  3E0B               	addlw	11
 23484  01F3  00AF               	movwf	sprintf@sp
 23485  01F4  3000               	movlw	0
 23486  01F5  3D66               	addwfc	slot_Main@data+1,w
 23487  01F6  00B0               	movwf	sprintf@sp+1
 23488  01F7  301C               	movlw	low (STR_64| (0+32768))
 23489  01F8  00B1               	movwf	sprintf@f
 23490  01F9  30BB               	movlw	high (STR_64| (0+32768))
 23491  01FA  00B2               	movwf	sprintf@f+1
 23492  01FB  0865               	movf	slot_Main@data,w
 23493  01FC  0086               	movwf	6
 23494  01FD  0866               	movf	slot_Main@data+1,w
 23495  01FE  0087               	movwf	7
 23496  01FF  3147               	addfsr 1,7
 23497  0200  0801               	movf	1,w
 23498  0201  3E20               	addlw	(low (_Slot_Wheel| (0+768)))& (0+255)
 23499  0202  0086               	movwf	6
 23500  0203  3003               	movlw	3	; select bank6/7
 23501  0204  0087               	movwf	7
 23502  0205  0801               	movf	1,w
 23503  0206  00D4               	movwf	??_slot_Main
 23504  0207  01D5               	clrf	??_slot_Main+1
 23505  0208  0854               	movf	??_slot_Main,w
 23506  0209  00B3               	movwf	?_sprintf+4
 23507  020A  0855               	movf	??_slot_Main+1,w
 23508  020B  00B4               	movwf	?_sprintf+5
 23509  020C  0865               	movf	slot_Main@data,w
 23510  020D  0086               	movwf	6
 23511  020E  0866               	movf	slot_Main@data+1,w
 23512  020F  0087               	movwf	7
 23513  0210  3148               	addfsr 1,8
 23514  0211  0801               	movf	1,w
 23515  0212  3E20               	addlw	(low (_Slot_Wheel| (0+768)))& (0+255)
 23516  0213  0086               	movwf	6
 23517  0214  3003               	movlw	3	; select bank6/7
 23518  0215  0087               	movwf	7
 23519  0216  0801               	movf	1,w
 23520  0217  00D6               	movwf	??_slot_Main+2
 23521  0218  01D7               	clrf	??_slot_Main+3
 23522  0219  0856               	movf	??_slot_Main+2,w
 23523  021A  00B5               	movwf	?_sprintf+6
 23524  021B  0857               	movf	??_slot_Main+3,w
 23525  021C  00B6               	movwf	?_sprintf+7
 23526  021D  0865               	movf	slot_Main@data,w
 23527  021E  0086               	movwf	6
 23528  021F  0866               	movf	slot_Main@data+1,w
 23529  0220  0087               	movwf	7
 23530  0221  3149               	addfsr 1,9
 23531  0222  0801               	movf	1,w
 23532  0223  3E20               	addlw	(low (_Slot_Wheel| (0+768)))& (0+255)
 23533  0224  0086               	movwf	6
 23534  0225  3003               	movlw	3	; select bank6/7
 23535  0226  0087               	movwf	7
 23536  0227  0801               	movf	1,w
 23537  0228  00D8               	movwf	??_slot_Main+4
 23538  0229  01D9               	clrf	??_slot_Main+5
 23539  022A  0858               	movf	??_slot_Main+4,w
 23540  022B  00B7               	movwf	?_sprintf+8
 23541  022C  0859               	movf	??_slot_Main+5,w
 23542  022D  00B8               	movwf	?_sprintf+9
 23543  022E  0865               	movf	slot_Main@data,w
 23544  022F  0086               	movwf	6
 23545  0230  0866               	movf	slot_Main@data+1,w
 23546  0231  0087               	movwf	7
 23547  0232  314A               	addfsr 1,10
 23548  0233  0801               	movf	1,w
 23549  0234  3E20               	addlw	(low (_Slot_Wheel| (0+768)))& (0+255)
 23550  0235  0086               	movwf	6
 23551  0236  3003               	movlw	3	; select bank6/7
 23552  0237  0087               	movwf	7
 23553  0238  0801               	movf	1,w
 23554  0239  00DA               	movwf	??_slot_Main+6
 23555  023A  01DB               	clrf	??_slot_Main+7
 23556  023B  085A               	movf	??_slot_Main+6,w
 23557  023C  00B9               	movwf	?_sprintf+10
 23558  023D  085B               	movf	??_slot_Main+7,w
 23559  023E  00BA               	movwf	?_sprintf+11
 23560  023F  319A  225F  3180   	fcall	_sprintf
 23561                           
 23562                           ;slot_task.c: 129: marquee(data->slot_print_buf, 1);}
 23563  0242  0020               	movlb	0	; select bank0
 23564  0243  0865               	movf	slot_Main@data,w
 23565  0244  3E0B               	addlw	11
 23566  0245  00BA               	movwf	marquee@string
 23567  0246  3000               	movlw	0
 23568  0247  3D66               	addwfc	slot_Main@data+1,w
 23569  0248  00BB               	movwf	marquee@string+1
 23570  0249  3001               	movlw	1
 23571  024A  00BC               	movwf	marquee@count
 23572  024B  3000               	movlw	0
 23573  024C  00BD               	movwf	marquee@count+1
 23574  024D  31A1  21D2  3180   	fcall	_marquee
 23575  0250  2E27               	goto	l9775
 23576  0251                     l9711:	
 23577                           
 23578                           ;slot_task.c: 130: else if (data->displayTickCount < 200) {
 23579  0251  0020               	movlb	0	; select bank0
 23580  0252  0865               	movf	slot_Main@data,w
 23581  0253  0086               	movwf	6
 23582  0254  0866               	movf	slot_Main@data+1,w
 23583  0255  0087               	movwf	7
 23584  0256  3143               	addfsr 1,3
 23585  0257  3F40               	moviw [0]fsr1
 23586  0258  00D4               	movwf	??_slot_Main
 23587  0259  3F41               	moviw [1]fsr1
 23588  025A  00D5               	movwf	??_slot_Main+1
 23589  025B  3000               	movlw	0
 23590  025C  0255               	subwf	??_slot_Main+1,w
 23591  025D  30C8               	movlw	200
 23592  025E  1903               	skipnz
 23593  025F  0254               	subwf	??_slot_Main,w
 23594  0260  1803               	skipnc
 23595  0261  2B47               	goto	l9725
 23596                           
 23597                           ;slot_task.c: 131: slot_Running_Animation(data);
 23598  0262  0866               	movf	slot_Main@data+1,w
 23599  0263  00B3               	movwf	slot_Running_Animation@taskData+1
 23600  0264  0865               	movf	slot_Main@data,w
 23601  0265  00B2               	movwf	slot_Running_Animation@taskData
 23602  0266  31AB  237B  3180   	fcall	_slot_Running_Animation
 23603                           
 23604                           ;slot_task.c: 132: data->slot_wheel_index[1] = (u8)rand() % strlen(Slot_Wheel);
 23605  0269  3020               	movlw	low _Slot_Wheel
 23606  026A  00F1               	movwf	strlen@s
 23607  026B  3003               	movlw	high _Slot_Wheel
 23608  026C  00F2               	movwf	strlen@s+1
 23609  026D  31B6  2680  3180   	fcall	_strlen
 23610  0270  0872               	movf	?_strlen+1,w
 23611  0271  0020               	movlb	0	; select bank0
 23612  0272  00AC               	movwf	___lwmod@divisor+1
 23613  0273  0871               	movf	?_strlen,w
 23614  0274  00AB               	movwf	___lwmod@divisor
 23615  0275  31AB  2338  3180   	fcall	_rand
 23616  0278  0020               	movlb	0	; select bank0
 23617  0279  0824               	movf	?_rand,w
 23618  027A  00D4               	movwf	??_slot_Main
 23619  027B  01D5               	clrf	??_slot_Main+1
 23620  027C  0854               	movf	??_slot_Main,w
 23621  027D  00AD               	movwf	___lwmod@dividend
 23622  027E  0855               	movf	??_slot_Main+1,w
 23623  027F  00AE               	movwf	___lwmod@dividend+1
 23624  0280  31B7  2772  3180   	fcall	___lwmod
 23625  0283  0020               	movlb	0	; select bank0
 23626  0284  082B               	movf	?___lwmod,w
 23627  0285  00D6               	movwf	??_slot_Main+2
 23628  0286  0865               	movf	slot_Main@data,w
 23629  0287  3E08               	addlw	8
 23630  0288  00D7               	movwf	??_slot_Main+3
 23631  0289  3000               	movlw	0
 23632  028A  3D66               	addwfc	slot_Main@data+1,w
 23633  028B  00D8               	movwf	??_slot_Main+4
 23634  028C  0857               	movf	??_slot_Main+3,w
 23635  028D  0086               	movwf	6
 23636  028E  0858               	movf	??_slot_Main+4,w
 23637  028F  0087               	movwf	7
 23638  0290  0856               	movf	??_slot_Main+2,w
 23639  0291  0081               	movwf	1
 23640                           
 23641                           ;slot_task.c: 133: data->slot_wheel_index[2] = (u8)rand() % strlen(Slot_Wheel);
 23642  0292  3020               	movlw	low _Slot_Wheel
 23643  0293  00F1               	movwf	strlen@s
 23644  0294  3003               	movlw	high _Slot_Wheel
 23645  0295  00F2               	movwf	strlen@s+1
 23646  0296  31B6  2680  3180   	fcall	_strlen
 23647  0299  0872               	movf	?_strlen+1,w
 23648  029A  0020               	movlb	0	; select bank0
 23649  029B  00AC               	movwf	___lwmod@divisor+1
 23650  029C  0871               	movf	?_strlen,w
 23651  029D  00AB               	movwf	___lwmod@divisor
 23652  029E  31AB  2338  3180   	fcall	_rand
 23653  02A1  0020               	movlb	0	; select bank0
 23654  02A2  0824               	movf	?_rand,w
 23655  02A3  00D4               	movwf	??_slot_Main
 23656  02A4  01D5               	clrf	??_slot_Main+1
 23657  02A5  0854               	movf	??_slot_Main,w
 23658  02A6  00AD               	movwf	___lwmod@dividend
 23659  02A7  0855               	movf	??_slot_Main+1,w
 23660  02A8  00AE               	movwf	___lwmod@dividend+1
 23661  02A9  31B7  2772  3180   	fcall	___lwmod
 23662  02AC  0020               	movlb	0	; select bank0
 23663  02AD  082B               	movf	?___lwmod,w
 23664  02AE  00D6               	movwf	??_slot_Main+2
 23665  02AF  0865               	movf	slot_Main@data,w
 23666  02B0  3E09               	addlw	9
 23667  02B1  00D7               	movwf	??_slot_Main+3
 23668  02B2  3000               	movlw	0
 23669  02B3  3D66               	addwfc	slot_Main@data+1,w
 23670  02B4  00D8               	movwf	??_slot_Main+4
 23671  02B5  0857               	movf	??_slot_Main+3,w
 23672  02B6  0086               	movwf	6
 23673  02B7  0858               	movf	??_slot_Main+4,w
 23674  02B8  0087               	movwf	7
 23675  02B9  0856               	movf	??_slot_Main+2,w
 23676  02BA  0081               	movwf	1
 23677                           
 23678                           ;slot_task.c: 134: data->slot_wheel_index[3] = (u8)rand() % strlen(Slot_Wheel);
 23679  02BB  3020               	movlw	low _Slot_Wheel
 23680  02BC  00F1               	movwf	strlen@s
 23681  02BD  3003               	movlw	high _Slot_Wheel
 23682  02BE  00F2               	movwf	strlen@s+1
 23683  02BF  31B6  2680  3180   	fcall	_strlen
 23684  02C2  0872               	movf	?_strlen+1,w
 23685  02C3  0020               	movlb	0	; select bank0
 23686  02C4  00AC               	movwf	___lwmod@divisor+1
 23687  02C5  0871               	movf	?_strlen,w
 23688  02C6  00AB               	movwf	___lwmod@divisor
 23689  02C7  31AB  2338  3180   	fcall	_rand
 23690  02CA  0020               	movlb	0	; select bank0
 23691  02CB  0824               	movf	?_rand,w
 23692  02CC  00D4               	movwf	??_slot_Main
 23693  02CD  01D5               	clrf	??_slot_Main+1
 23694  02CE  0854               	movf	??_slot_Main,w
 23695  02CF  00AD               	movwf	___lwmod@dividend
 23696  02D0  0855               	movf	??_slot_Main+1,w
 23697  02D1  00AE               	movwf	___lwmod@dividend+1
 23698  02D2  31B7  2772  3180   	fcall	___lwmod
 23699  02D5  0020               	movlb	0	; select bank0
 23700  02D6  082B               	movf	?___lwmod,w
 23701  02D7  00D6               	movwf	??_slot_Main+2
 23702  02D8  0865               	movf	slot_Main@data,w
 23703  02D9  3E0A               	addlw	10
 23704  02DA  00D7               	movwf	??_slot_Main+3
 23705  02DB  3000               	movlw	0
 23706  02DC  3D66               	addwfc	slot_Main@data+1,w
 23707  02DD  00D8               	movwf	??_slot_Main+4
 23708  02DE  0857               	movf	??_slot_Main+3,w
 23709  02DF  0086               	movwf	6
 23710  02E0  0858               	movf	??_slot_Main+4,w
 23711  02E1  0087               	movwf	7
 23712  02E2  0856               	movf	??_slot_Main+2,w
 23713  02E3  0081               	movwf	1
 23714                           
 23715                           ;slot_task.c: 135: sprintf(data->slot_print_buf, "%c%c%c%c", Shot_Options[Shot_Index][0]
      +                          , Slot_Wheel[data->slot_wheel_index[1]], Slot_Wheel[data->slot_wheel_index[2]], Slot_Whe
      +                          el[data->slot_wheel_index[3]]);
 23716  02E4  0865               	movf	slot_Main@data,w
 23717  02E5  3E0B               	addlw	11
 23718  02E6  00AF               	movwf	sprintf@sp
 23719  02E7  3000               	movlw	0
 23720  02E8  3D66               	addwfc	slot_Main@data+1,w
 23721  02E9  00B0               	movwf	sprintf@sp+1
 23722  02EA  301C               	movlw	low (STR_64| (0+32768))
 23723  02EB  00B1               	movwf	sprintf@f
 23724  02EC  30BB               	movlw	high (STR_64| (0+32768))
 23725  02ED  00B2               	movwf	sprintf@f+1
 23726  02EE  357C               	lslf	_Shot_Index,w
 23727  02EF  3ED1               	addlw	(low (_Shot_Options| (0+256)))& (0+255)
 23728  02F0  0086               	movwf	6
 23729  02F1  3001               	movlw	1	; select bank3/4
 23730  02F2  0087               	movwf	7
 23731  02F3  3F40               	moviw [0]fsr1
 23732  02F4  00D4               	movwf	??_slot_Main
 23733  02F5  3F41               	moviw [1]fsr1
 23734  02F6  00D5               	movwf	??_slot_Main+1
 23735  02F7  0854               	movf	??_slot_Main,w
 23736  02F8  0084               	movwf	4
 23737  02F9  0855               	movf	??_slot_Main+1,w
 23738  02FA  0085               	movwf	5
 23739  02FB  0800               	movf	0,w	;code access
 23740  02FC  00D6               	movwf	??_slot_Main+2
 23741  02FD  01D7               	clrf	??_slot_Main+3
 23742  02FE  0856               	movf	??_slot_Main+2,w
 23743  02FF  00B3               	movwf	?_sprintf+4
 23744  0300  0857               	movf	??_slot_Main+3,w
 23745  0301  00B4               	movwf	?_sprintf+5
 23746  0302  0865               	movf	slot_Main@data,w
 23747  0303  0086               	movwf	6
 23748  0304  0866               	movf	slot_Main@data+1,w
 23749  0305  0087               	movwf	7
 23750  0306  3148               	addfsr 1,8
 23751  0307  0801               	movf	1,w
 23752  0308  3E20               	addlw	(low (_Slot_Wheel| (0+768)))& (0+255)
 23753  0309  0086               	movwf	6
 23754  030A  3003               	movlw	3	; select bank6/7
 23755  030B  0087               	movwf	7
 23756  030C  0801               	movf	1,w
 23757  030D  00D8               	movwf	??_slot_Main+4
 23758  030E  01D9               	clrf	??_slot_Main+5
 23759  030F  0858               	movf	??_slot_Main+4,w
 23760  0310  00B5               	movwf	?_sprintf+6
 23761  0311  0859               	movf	??_slot_Main+5,w
 23762  0312  00B6               	movwf	?_sprintf+7
 23763  0313  0865               	movf	slot_Main@data,w
 23764  0314  0086               	movwf	6
 23765  0315  0866               	movf	slot_Main@data+1,w
 23766  0316  0087               	movwf	7
 23767  0317  3149               	addfsr 1,9
 23768  0318  0801               	movf	1,w
 23769  0319  3E20               	addlw	(low (_Slot_Wheel| (0+768)))& (0+255)
 23770  031A  0086               	movwf	6
 23771  031B  3003               	movlw	3	; select bank6/7
 23772  031C  0087               	movwf	7
 23773  031D  0801               	movf	1,w
 23774  031E  00DA               	movwf	??_slot_Main+6
 23775  031F  01DB               	clrf	??_slot_Main+7
 23776  0320  085A               	movf	??_slot_Main+6,w
 23777  0321  00B7               	movwf	?_sprintf+8
 23778  0322  085B               	movf	??_slot_Main+7,w
 23779  0323  00B8               	movwf	?_sprintf+9
 23780  0324  0865               	movf	slot_Main@data,w
 23781  0325  0086               	movwf	6
 23782  0326  0866               	movf	slot_Main@data+1,w
 23783  0327  0087               	movwf	7
 23784  0328  314A               	addfsr 1,10
 23785  0329  0801               	movf	1,w
 23786  032A  3E20               	addlw	(low (_Slot_Wheel| (0+768)))& (0+255)
 23787  032B  0086               	movwf	6
 23788  032C  3003               	movlw	3	; select bank6/7
 23789  032D  0087               	movwf	7
 23790  032E  0801               	movf	1,w
 23791  032F  00DC               	movwf	??_slot_Main+8
 23792  0330  01DD               	clrf	??_slot_Main+9
 23793  0331  085C               	movf	??_slot_Main+8,w
 23794  0332  00B9               	movwf	?_sprintf+10
 23795  0333  085D               	movf	??_slot_Main+9,w
 23796  0334  00BA               	movwf	?_sprintf+11
 23797  0335  319A  225F  3180   	fcall	_sprintf
 23798                           
 23799                           ;slot_task.c: 136: marquee(data->slot_print_buf, 1);}
 23800  0338  0020               	movlb	0	; select bank0
 23801  0339  0865               	movf	slot_Main@data,w
 23802  033A  3E0B               	addlw	11
 23803  033B  00BA               	movwf	marquee@string
 23804  033C  3000               	movlw	0
 23805  033D  3D66               	addwfc	slot_Main@data+1,w
 23806  033E  00BB               	movwf	marquee@string+1
 23807  033F  3001               	movlw	1
 23808  0340  00BC               	movwf	marquee@count
 23809  0341  3000               	movlw	0
 23810  0342  00BD               	movwf	marquee@count+1
 23811  0343  31A1  21D2  3180   	fcall	_marquee
 23812  0346  2E27               	goto	l9775
 23813  0347                     l9725:	
 23814                           
 23815                           ;slot_task.c: 137: else if (data->displayTickCount < 300) {
 23816  0347  0020               	movlb	0	; select bank0
 23817  0348  0865               	movf	slot_Main@data,w
 23818  0349  0086               	movwf	6
 23819  034A  0866               	movf	slot_Main@data+1,w
 23820  034B  0087               	movwf	7
 23821  034C  3143               	addfsr 1,3
 23822  034D  3F40               	moviw [0]fsr1
 23823  034E  00D4               	movwf	??_slot_Main
 23824  034F  3F41               	moviw [1]fsr1
 23825  0350  00D5               	movwf	??_slot_Main+1
 23826  0351  3001               	movlw	1
 23827  0352  0255               	subwf	??_slot_Main+1,w
 23828  0353  302C               	movlw	44
 23829  0354  1903               	skipnz
 23830  0355  0254               	subwf	??_slot_Main,w
 23831  0356  1803               	skipnc
 23832  0357  2C1A               	goto	l9737
 23833                           
 23834                           ;slot_task.c: 138: slot_Running_Animation(data);
 23835  0358  0866               	movf	slot_Main@data+1,w
 23836  0359  00B3               	movwf	slot_Running_Animation@taskData+1
 23837  035A  0865               	movf	slot_Main@data,w
 23838  035B  00B2               	movwf	slot_Running_Animation@taskData
 23839  035C  31AB  237B  3180   	fcall	_slot_Running_Animation
 23840                           
 23841                           ;slot_task.c: 139: data->slot_wheel_index[2] = (u8)rand() % strlen(Slot_Wheel);
 23842  035F  3020               	movlw	low _Slot_Wheel
 23843  0360  00F1               	movwf	strlen@s
 23844  0361  3003               	movlw	high _Slot_Wheel
 23845  0362  00F2               	movwf	strlen@s+1
 23846  0363  31B6  2680  3180   	fcall	_strlen
 23847  0366  0872               	movf	?_strlen+1,w
 23848  0367  0020               	movlb	0	; select bank0
 23849  0368  00AC               	movwf	___lwmod@divisor+1
 23850  0369  0871               	movf	?_strlen,w
 23851  036A  00AB               	movwf	___lwmod@divisor
 23852  036B  31AB  2338  3180   	fcall	_rand
 23853  036E  0020               	movlb	0	; select bank0
 23854  036F  0824               	movf	?_rand,w
 23855  0370  00D4               	movwf	??_slot_Main
 23856  0371  01D5               	clrf	??_slot_Main+1
 23857  0372  0854               	movf	??_slot_Main,w
 23858  0373  00AD               	movwf	___lwmod@dividend
 23859  0374  0855               	movf	??_slot_Main+1,w
 23860  0375  00AE               	movwf	___lwmod@dividend+1
 23861  0376  31B7  2772  3180   	fcall	___lwmod
 23862  0379  0020               	movlb	0	; select bank0
 23863  037A  082B               	movf	?___lwmod,w
 23864  037B  00D6               	movwf	??_slot_Main+2
 23865  037C  0865               	movf	slot_Main@data,w
 23866  037D  3E09               	addlw	9
 23867  037E  00D7               	movwf	??_slot_Main+3
 23868  037F  3000               	movlw	0
 23869  0380  3D66               	addwfc	slot_Main@data+1,w
 23870  0381  00D8               	movwf	??_slot_Main+4
 23871  0382  0857               	movf	??_slot_Main+3,w
 23872  0383  0086               	movwf	6
 23873  0384  0858               	movf	??_slot_Main+4,w
 23874  0385  0087               	movwf	7
 23875  0386  0856               	movf	??_slot_Main+2,w
 23876  0387  0081               	movwf	1
 23877                           
 23878                           ;slot_task.c: 140: data->slot_wheel_index[3] = (u8)rand() % strlen(Slot_Wheel);
 23879  0388  3020               	movlw	low _Slot_Wheel
 23880  0389  00F1               	movwf	strlen@s
 23881  038A  3003               	movlw	high _Slot_Wheel
 23882  038B  00F2               	movwf	strlen@s+1
 23883  038C  31B6  2680  3180   	fcall	_strlen
 23884  038F  0872               	movf	?_strlen+1,w
 23885  0390  0020               	movlb	0	; select bank0
 23886  0391  00AC               	movwf	___lwmod@divisor+1
 23887  0392  0871               	movf	?_strlen,w
 23888  0393  00AB               	movwf	___lwmod@divisor
 23889  0394  31AB  2338  3180   	fcall	_rand
 23890  0397  0020               	movlb	0	; select bank0
 23891  0398  0824               	movf	?_rand,w
 23892  0399  00D4               	movwf	??_slot_Main
 23893  039A  01D5               	clrf	??_slot_Main+1
 23894  039B  0854               	movf	??_slot_Main,w
 23895  039C  00AD               	movwf	___lwmod@dividend
 23896  039D  0855               	movf	??_slot_Main+1,w
 23897  039E  00AE               	movwf	___lwmod@dividend+1
 23898  039F  31B7  2772  3180   	fcall	___lwmod
 23899  03A2  0020               	movlb	0	; select bank0
 23900  03A3  082B               	movf	?___lwmod,w
 23901  03A4  00D6               	movwf	??_slot_Main+2
 23902  03A5  0865               	movf	slot_Main@data,w
 23903  03A6  3E0A               	addlw	10
 23904  03A7  00D7               	movwf	??_slot_Main+3
 23905  03A8  3000               	movlw	0
 23906  03A9  3D66               	addwfc	slot_Main@data+1,w
 23907  03AA  00D8               	movwf	??_slot_Main+4
 23908  03AB  0857               	movf	??_slot_Main+3,w
 23909  03AC  0086               	movwf	6
 23910  03AD  0858               	movf	??_slot_Main+4,w
 23911  03AE  0087               	movwf	7
 23912  03AF  0856               	movf	??_slot_Main+2,w
 23913  03B0  0081               	movwf	1
 23914                           
 23915                           ;slot_task.c: 141: sprintf(data->slot_print_buf, "%c%c%c%c", Shot_Options[Shot_Index][0]
      +                          , Shot_Options[Shot_Index][1], Slot_Wheel[data->slot_wheel_index[2]], Slot_Wheel[data->s
      +                          lot_wheel_index[3]]);
 23916  03B1  0865               	movf	slot_Main@data,w
 23917  03B2  3E0B               	addlw	11
 23918  03B3  00AF               	movwf	sprintf@sp
 23919  03B4  3000               	movlw	0
 23920  03B5  3D66               	addwfc	slot_Main@data+1,w
 23921  03B6  00B0               	movwf	sprintf@sp+1
 23922  03B7  301C               	movlw	low (STR_64| (0+32768))
 23923  03B8  00B1               	movwf	sprintf@f
 23924  03B9  30BB               	movlw	high (STR_64| (0+32768))
 23925  03BA  00B2               	movwf	sprintf@f+1
 23926  03BB  357C               	lslf	_Shot_Index,w
 23927  03BC  3ED1               	addlw	(low (_Shot_Options| (0+256)))& (0+255)
 23928  03BD  0086               	movwf	6
 23929  03BE  3001               	movlw	1	; select bank3/4
 23930  03BF  0087               	movwf	7
 23931  03C0  3F40               	moviw [0]fsr1
 23932  03C1  00D4               	movwf	??_slot_Main
 23933  03C2  3F41               	moviw [1]fsr1
 23934  03C3  00D5               	movwf	??_slot_Main+1
 23935  03C4  0854               	movf	??_slot_Main,w
 23936  03C5  0084               	movwf	4
 23937  03C6  0855               	movf	??_slot_Main+1,w
 23938  03C7  0085               	movwf	5
 23939  03C8  0800               	movf	0,w	;code access
 23940  03C9  00D6               	movwf	??_slot_Main+2
 23941  03CA  01D7               	clrf	??_slot_Main+3
 23942  03CB  0856               	movf	??_slot_Main+2,w
 23943  03CC  00B3               	movwf	?_sprintf+4
 23944  03CD  0857               	movf	??_slot_Main+3,w
 23945  03CE  00B4               	movwf	?_sprintf+5
 23946  03CF  357C               	lslf	_Shot_Index,w
 23947  03D0  3ED1               	addlw	(low (_Shot_Options| (0+256)))& (0+255)
 23948  03D1  0086               	movwf	6
 23949  03D2  3001               	movlw	1	; select bank3/4
 23950  03D3  0087               	movwf	7
 23951  03D4  3F40               	moviw [0]fsr1
 23952  03D5  00D8               	movwf	??_slot_Main+4
 23953  03D6  3F41               	moviw [1]fsr1
 23954  03D7  00D9               	movwf	??_slot_Main+5
 23955  03D8  3001               	movlw	1
 23956  03D9  0758               	addwf	??_slot_Main+4,w
 23957  03DA  0084               	movwf	4
 23958  03DB  0859               	movf	??_slot_Main+5,w
 23959  03DC  1803               	skipnc
 23960  03DD  0A59               	incf	??_slot_Main+5,w
 23961  03DE  0085               	movwf	5
 23962  03DF  0800               	movf	0,w	;code access
 23963  03E0  00DA               	movwf	??_slot_Main+6
 23964  03E1  01DB               	clrf	??_slot_Main+7
 23965  03E2  085A               	movf	??_slot_Main+6,w
 23966  03E3  00B5               	movwf	?_sprintf+6
 23967  03E4  085B               	movf	??_slot_Main+7,w
 23968  03E5  00B6               	movwf	?_sprintf+7
 23969  03E6  0865               	movf	slot_Main@data,w
 23970  03E7  0086               	movwf	6
 23971  03E8  0866               	movf	slot_Main@data+1,w
 23972  03E9  0087               	movwf	7
 23973  03EA  3149               	addfsr 1,9
 23974  03EB  0801               	movf	1,w
 23975  03EC  3E20               	addlw	(low (_Slot_Wheel| (0+768)))& (0+255)
 23976  03ED  0086               	movwf	6
 23977  03EE  3003               	movlw	3	; select bank6/7
 23978  03EF  0087               	movwf	7
 23979  03F0  0801               	movf	1,w
 23980  03F1  00DC               	movwf	??_slot_Main+8
 23981  03F2  01DD               	clrf	??_slot_Main+9
 23982  03F3  085C               	movf	??_slot_Main+8,w
 23983  03F4  00B7               	movwf	?_sprintf+8
 23984  03F5  085D               	movf	??_slot_Main+9,w
 23985  03F6  00B8               	movwf	?_sprintf+9
 23986  03F7  0865               	movf	slot_Main@data,w
 23987  03F8  0086               	movwf	6
 23988  03F9  0866               	movf	slot_Main@data+1,w
 23989  03FA  0087               	movwf	7
 23990  03FB  314A               	addfsr 1,10
 23991  03FC  0801               	movf	1,w
 23992  03FD  3E20               	addlw	(low (_Slot_Wheel| (0+768)))& (0+255)
 23993  03FE  0086               	movwf	6
 23994  03FF  3003               	movlw	3	; select bank6/7
 23995  0400  0087               	movwf	7
 23996  0401  0801               	movf	1,w
 23997  0402  00DE               	movwf	??_slot_Main+10
 23998  0403  01DF               	clrf	??_slot_Main+11
 23999  0404  085E               	movf	??_slot_Main+10,w
 24000  0405  00B9               	movwf	?_sprintf+10
 24001  0406  085F               	movf	??_slot_Main+11,w
 24002  0407  00BA               	movwf	?_sprintf+11
 24003  0408  319A  225F  3180   	fcall	_sprintf
 24004                           
 24005                           ;slot_task.c: 142: marquee(data->slot_print_buf, 1);}
 24006  040B  0020               	movlb	0	; select bank0
 24007  040C  0865               	movf	slot_Main@data,w
 24008  040D  3E0B               	addlw	11
 24009  040E  00BA               	movwf	marquee@string
 24010  040F  3000               	movlw	0
 24011  0410  3D66               	addwfc	slot_Main@data+1,w
 24012  0411  00BB               	movwf	marquee@string+1
 24013  0412  3001               	movlw	1
 24014  0413  00BC               	movwf	marquee@count
 24015  0414  3000               	movlw	0
 24016  0415  00BD               	movwf	marquee@count+1
 24017  0416  31A1  21D2  3180   	fcall	_marquee
 24018  0419  2E27               	goto	l9775
 24019  041A                     l9737:	
 24020                           
 24021                           ;slot_task.c: 143: else if (data->displayTickCount < 400) {
 24022  041A  0020               	movlb	0	; select bank0
 24023  041B  0865               	movf	slot_Main@data,w
 24024  041C  0086               	movwf	6
 24025  041D  0866               	movf	slot_Main@data+1,w
 24026  041E  0087               	movwf	7
 24027  041F  3143               	addfsr 1,3
 24028  0420  3F40               	moviw [0]fsr1
 24029  0421  00D4               	movwf	??_slot_Main
 24030  0422  3F41               	moviw [1]fsr1
 24031  0423  00D5               	movwf	??_slot_Main+1
 24032  0424  3001               	movlw	1
 24033  0425  0255               	subwf	??_slot_Main+1,w
 24034  0426  3090               	movlw	144
 24035  0427  1903               	skipnz
 24036  0428  0254               	subwf	??_slot_Main,w
 24037  0429  1803               	skipnc
 24038  042A  2CCA               	goto	l9747
 24039                           
 24040                           ;slot_task.c: 144: slot_Running_Animation(data);
 24041  042B  0866               	movf	slot_Main@data+1,w
 24042  042C  00B3               	movwf	slot_Running_Animation@taskData+1
 24043  042D  0865               	movf	slot_Main@data,w
 24044  042E  00B2               	movwf	slot_Running_Animation@taskData
 24045  042F  31AB  237B  3180   	fcall	_slot_Running_Animation
 24046                           
 24047                           ;slot_task.c: 145: data->slot_wheel_index[3] = (u8)rand() % strlen(Slot_Wheel);
 24048  0432  3020               	movlw	low _Slot_Wheel
 24049  0433  00F1               	movwf	strlen@s
 24050  0434  3003               	movlw	high _Slot_Wheel
 24051  0435  00F2               	movwf	strlen@s+1
 24052  0436  31B6  2680  3180   	fcall	_strlen
 24053  0439  0872               	movf	?_strlen+1,w
 24054  043A  0020               	movlb	0	; select bank0
 24055  043B  00AC               	movwf	___lwmod@divisor+1
 24056  043C  0871               	movf	?_strlen,w
 24057  043D  00AB               	movwf	___lwmod@divisor
 24058  043E  31AB  2338  3180   	fcall	_rand
 24059  0441  0020               	movlb	0	; select bank0
 24060  0442  0824               	movf	?_rand,w
 24061  0443  00D4               	movwf	??_slot_Main
 24062  0444  01D5               	clrf	??_slot_Main+1
 24063  0445  0854               	movf	??_slot_Main,w
 24064  0446  00AD               	movwf	___lwmod@dividend
 24065  0447  0855               	movf	??_slot_Main+1,w
 24066  0448  00AE               	movwf	___lwmod@dividend+1
 24067  0449  31B7  2772  3180   	fcall	___lwmod
 24068  044C  0020               	movlb	0	; select bank0
 24069  044D  082B               	movf	?___lwmod,w
 24070  044E  00D6               	movwf	??_slot_Main+2
 24071  044F  0865               	movf	slot_Main@data,w
 24072  0450  3E0A               	addlw	10
 24073  0451  00D7               	movwf	??_slot_Main+3
 24074  0452  3000               	movlw	0
 24075  0453  3D66               	addwfc	slot_Main@data+1,w
 24076  0454  00D8               	movwf	??_slot_Main+4
 24077  0455  0857               	movf	??_slot_Main+3,w
 24078  0456  0086               	movwf	6
 24079  0457  0858               	movf	??_slot_Main+4,w
 24080  0458  0087               	movwf	7
 24081  0459  0856               	movf	??_slot_Main+2,w
 24082  045A  0081               	movwf	1
 24083                           
 24084                           ;slot_task.c: 146: sprintf(data->slot_print_buf, "%c%c%c%c", Shot_Options[Shot_Index][0]
      +                          , Shot_Options[Shot_Index][1], Shot_Options[Shot_Index][2], Slot_Wheel[data->slot_wheel_
      +                          index[3]]);
 24085  045B  0865               	movf	slot_Main@data,w
 24086  045C  3E0B               	addlw	11
 24087  045D  00AF               	movwf	sprintf@sp
 24088  045E  3000               	movlw	0
 24089  045F  3D66               	addwfc	slot_Main@data+1,w
 24090  0460  00B0               	movwf	sprintf@sp+1
 24091  0461  301C               	movlw	low (STR_64| (0+32768))
 24092  0462  00B1               	movwf	sprintf@f
 24093  0463  30BB               	movlw	high (STR_64| (0+32768))
 24094  0464  00B2               	movwf	sprintf@f+1
 24095  0465  357C               	lslf	_Shot_Index,w
 24096  0466  3ED1               	addlw	(low (_Shot_Options| (0+256)))& (0+255)
 24097  0467  0086               	movwf	6
 24098  0468  3001               	movlw	1	; select bank3/4
 24099  0469  0087               	movwf	7
 24100  046A  3F40               	moviw [0]fsr1
 24101  046B  00D4               	movwf	??_slot_Main
 24102  046C  3F41               	moviw [1]fsr1
 24103  046D  00D5               	movwf	??_slot_Main+1
 24104  046E  0854               	movf	??_slot_Main,w
 24105  046F  0084               	movwf	4
 24106  0470  0855               	movf	??_slot_Main+1,w
 24107  0471  0085               	movwf	5
 24108  0472  0800               	movf	0,w	;code access
 24109  0473  00D6               	movwf	??_slot_Main+2
 24110  0474  01D7               	clrf	??_slot_Main+3
 24111  0475  0856               	movf	??_slot_Main+2,w
 24112  0476  00B3               	movwf	?_sprintf+4
 24113  0477  0857               	movf	??_slot_Main+3,w
 24114  0478  00B4               	movwf	?_sprintf+5
 24115  0479  357C               	lslf	_Shot_Index,w
 24116  047A  3ED1               	addlw	(low (_Shot_Options| (0+256)))& (0+255)
 24117  047B  0086               	movwf	6
 24118  047C  3001               	movlw	1	; select bank3/4
 24119  047D  0087               	movwf	7
 24120  047E  3F40               	moviw [0]fsr1
 24121  047F  00D8               	movwf	??_slot_Main+4
 24122  0480  3F41               	moviw [1]fsr1
 24123  0481  00D9               	movwf	??_slot_Main+5
 24124  0482  3001               	movlw	1
 24125  0483  0758               	addwf	??_slot_Main+4,w
 24126  0484  0084               	movwf	4
 24127  0485  0859               	movf	??_slot_Main+5,w
 24128  0486  1803               	skipnc
 24129  0487  0A59               	incf	??_slot_Main+5,w
 24130  0488  0085               	movwf	5
 24131  0489  0800               	movf	0,w	;code access
 24132  048A  00DA               	movwf	??_slot_Main+6
 24133  048B  01DB               	clrf	??_slot_Main+7
 24134  048C  085A               	movf	??_slot_Main+6,w
 24135  048D  00B5               	movwf	?_sprintf+6
 24136  048E  085B               	movf	??_slot_Main+7,w
 24137  048F  00B6               	movwf	?_sprintf+7
 24138  0490  357C               	lslf	_Shot_Index,w
 24139  0491  3ED1               	addlw	(low (_Shot_Options| (0+256)))& (0+255)
 24140  0492  0086               	movwf	6
 24141  0493  3001               	movlw	1	; select bank3/4
 24142  0494  0087               	movwf	7
 24143  0495  3F40               	moviw [0]fsr1
 24144  0496  00DC               	movwf	??_slot_Main+8
 24145  0497  3F41               	moviw [1]fsr1
 24146  0498  00DD               	movwf	??_slot_Main+9
 24147  0499  3002               	movlw	2
 24148  049A  075C               	addwf	??_slot_Main+8,w
 24149  049B  0084               	movwf	4
 24150  049C  085D               	movf	??_slot_Main+9,w
 24151  049D  1803               	skipnc
 24152  049E  0A5D               	incf	??_slot_Main+9,w
 24153  049F  0085               	movwf	5
 24154  04A0  0800               	movf	0,w	;code access
 24155  04A1  00DE               	movwf	??_slot_Main+10
 24156  04A2  01DF               	clrf	??_slot_Main+11
 24157  04A3  085E               	movf	??_slot_Main+10,w
 24158  04A4  00B7               	movwf	?_sprintf+8
 24159  04A5  085F               	movf	??_slot_Main+11,w
 24160  04A6  00B8               	movwf	?_sprintf+9
 24161  04A7  0865               	movf	slot_Main@data,w
 24162  04A8  0086               	movwf	6
 24163  04A9  0866               	movf	slot_Main@data+1,w
 24164  04AA  0087               	movwf	7
 24165  04AB  314A               	addfsr 1,10
 24166  04AC  0801               	movf	1,w
 24167  04AD  3E20               	addlw	(low (_Slot_Wheel| (0+768)))& (0+255)
 24168  04AE  0086               	movwf	6
 24169  04AF  3003               	movlw	3	; select bank6/7
 24170  04B0  0087               	movwf	7
 24171  04B1  0801               	movf	1,w
 24172  04B2  00E0               	movwf	??_slot_Main+12
 24173  04B3  01E1               	clrf	??_slot_Main+13
 24174  04B4  0860               	movf	??_slot_Main+12,w
 24175  04B5  00B9               	movwf	?_sprintf+10
 24176  04B6  0861               	movf	??_slot_Main+13,w
 24177  04B7  00BA               	movwf	?_sprintf+11
 24178  04B8  319A  225F  3180   	fcall	_sprintf
 24179                           
 24180                           ;slot_task.c: 148: marquee(data->slot_print_buf, 1);}
 24181  04BB  0020               	movlb	0	; select bank0
 24182  04BC  0865               	movf	slot_Main@data,w
 24183  04BD  3E0B               	addlw	11
 24184  04BE  00BA               	movwf	marquee@string
 24185  04BF  3000               	movlw	0
 24186  04C0  3D66               	addwfc	slot_Main@data+1,w
 24187  04C1  00BB               	movwf	marquee@string+1
 24188  04C2  3001               	movlw	1
 24189  04C3  00BC               	movwf	marquee@count
 24190  04C4  3000               	movlw	0
 24191  04C5  00BD               	movwf	marquee@count+1
 24192  04C6  31A1  21D2  3180   	fcall	_marquee
 24193  04C9  2E27               	goto	l9775
 24194  04CA                     l9747:	
 24195                           
 24196                           ;slot_task.c: 149: else if (data->displayTickCount < 500) {
 24197  04CA  0020               	movlb	0	; select bank0
 24198  04CB  0865               	movf	slot_Main@data,w
 24199  04CC  0086               	movwf	6
 24200  04CD  0866               	movf	slot_Main@data+1,w
 24201  04CE  0087               	movwf	7
 24202  04CF  3143               	addfsr 1,3
 24203  04D0  3F40               	moviw [0]fsr1
 24204  04D1  00D4               	movwf	??_slot_Main
 24205  04D2  3F41               	moviw [1]fsr1
 24206  04D3  00D5               	movwf	??_slot_Main+1
 24207  04D4  3001               	movlw	1
 24208  04D5  0255               	subwf	??_slot_Main+1,w
 24209  04D6  30F4               	movlw	244
 24210  04D7  1903               	skipnz
 24211  04D8  0254               	subwf	??_slot_Main,w
 24212  04D9  1803               	skipnc
 24213  04DA  2D83               	goto	l9755
 24214                           
 24215                           ;slot_task.c: 150: slot_Finished_Animation(data);
 24216  04DB  0866               	movf	slot_Main@data+1,w
 24217  04DC  00BE               	movwf	slot_Finished_Animation@taskData+1
 24218  04DD  0865               	movf	slot_Main@data,w
 24219  04DE  00BD               	movwf	slot_Finished_Animation@taskData
 24220  04DF  3190  2001  3180   	fcall	_slot_Finished_Animation
 24221                           
 24222                           ;slot_task.c: 151: if ( data->displayTickCount % 50 <= 25 ) {
 24223  04E2  3032               	movlw	50
 24224  04E3  0020               	movlb	0	; select bank0
 24225  04E4  00AB               	movwf	___lwmod@divisor
 24226  04E5  3000               	movlw	0
 24227  04E6  00AC               	movwf	___lwmod@divisor+1
 24228  04E7  0865               	movf	slot_Main@data,w
 24229  04E8  0086               	movwf	6
 24230  04E9  0866               	movf	slot_Main@data+1,w
 24231  04EA  0087               	movwf	7
 24232  04EB  3143               	addfsr 1,3
 24233  04EC  3F40               	moviw [0]fsr1
 24234  04ED  00AD               	movwf	___lwmod@dividend
 24235  04EE  3F41               	moviw [1]fsr1
 24236  04EF  00AE               	movwf	___lwmod@dividend+1
 24237  04F0  31B7  2772  3180   	fcall	___lwmod
 24238  04F3  3000               	movlw	0
 24239  04F4  0020               	movlb	0	; select bank0
 24240  04F5  022C               	subwf	?___lwmod+1,w
 24241  04F6  301A               	movlw	26
 24242  04F7  1903               	skipnz
 24243  04F8  022B               	subwf	?___lwmod,w
 24244  04F9  1803               	skipnc
 24245  04FA  2D0D               	goto	l9753
 24246                           
 24247                           ;slot_task.c: 152: memset(data->slot_print_buf, 0x20, 4);
 24248  04FB  0865               	movf	slot_Main@data,w
 24249  04FC  3E0B               	addlw	11
 24250  04FD  00F1               	movwf	memset@p1
 24251  04FE  3000               	movlw	0
 24252  04FF  3D66               	addwfc	slot_Main@data+1,w
 24253  0500  00F2               	movwf	memset@p1+1
 24254  0501  3020               	movlw	32
 24255  0502  00F3               	movwf	memset@c
 24256  0503  3000               	movlw	0
 24257  0504  00F4               	movwf	memset@c+1
 24258  0505  3004               	movlw	4
 24259  0506  00F5               	movwf	memset@n
 24260  0507  3000               	movlw	0
 24261  0508  00F6               	movwf	memset@n+1
 24262  0509  31B5  25C1  3180   	fcall	_memset
 24263                           
 24264                           ;slot_task.c: 153: }
 24265  050C  2D74               	goto	l1432
 24266  050D                     l9753:	
 24267                           
 24268                           ;slot_task.c: 154: else {
 24269                           ;slot_task.c: 155: sprintf(data->slot_print_buf, "%c%c%c%c", Shot_Options[Shot_Index][0]
      +                          , Shot_Options[Shot_Index][1], Shot_Options[Shot_Index][2], Shot_Options[Shot_Index][3])
      +                          ;
 24270  050D  0020               	movlb	0	; select bank0
 24271  050E  0865               	movf	slot_Main@data,w
 24272  050F  3E0B               	addlw	11
 24273  0510  00AF               	movwf	sprintf@sp
 24274  0511  3000               	movlw	0
 24275  0512  3D66               	addwfc	slot_Main@data+1,w
 24276  0513  00B0               	movwf	sprintf@sp+1
 24277  0514  301C               	movlw	low (STR_64| (0+32768))
 24278  0515  00B1               	movwf	sprintf@f
 24279  0516  30BB               	movlw	high (STR_64| (0+32768))
 24280  0517  00B2               	movwf	sprintf@f+1
 24281  0518  357C               	lslf	_Shot_Index,w
 24282  0519  3ED1               	addlw	(low (_Shot_Options| (0+256)))& (0+255)
 24283  051A  0086               	movwf	6
 24284  051B  3001               	movlw	1	; select bank3/4
 24285  051C  0087               	movwf	7
 24286  051D  3F40               	moviw [0]fsr1
 24287  051E  00D4               	movwf	??_slot_Main
 24288  051F  3F41               	moviw [1]fsr1
 24289  0520  00D5               	movwf	??_slot_Main+1
 24290  0521  0854               	movf	??_slot_Main,w
 24291  0522  0084               	movwf	4
 24292  0523  0855               	movf	??_slot_Main+1,w
 24293  0524  0085               	movwf	5
 24294  0525  0800               	movf	0,w	;code access
 24295  0526  00D6               	movwf	??_slot_Main+2
 24296  0527  01D7               	clrf	??_slot_Main+3
 24297  0528  0856               	movf	??_slot_Main+2,w
 24298  0529  00B3               	movwf	?_sprintf+4
 24299  052A  0857               	movf	??_slot_Main+3,w
 24300  052B  00B4               	movwf	?_sprintf+5
 24301  052C  357C               	lslf	_Shot_Index,w
 24302  052D  3ED1               	addlw	(low (_Shot_Options| (0+256)))& (0+255)
 24303  052E  0086               	movwf	6
 24304  052F  3001               	movlw	1	; select bank3/4
 24305  0530  0087               	movwf	7
 24306  0531  3F40               	moviw [0]fsr1
 24307  0532  00D8               	movwf	??_slot_Main+4
 24308  0533  3F41               	moviw [1]fsr1
 24309  0534  00D9               	movwf	??_slot_Main+5
 24310  0535  3001               	movlw	1
 24311  0536  0758               	addwf	??_slot_Main+4,w
 24312  0537  0084               	movwf	4
 24313  0538  0859               	movf	??_slot_Main+5,w
 24314  0539  1803               	skipnc
 24315  053A  0A59               	incf	??_slot_Main+5,w
 24316  053B  0085               	movwf	5
 24317  053C  0800               	movf	0,w	;code access
 24318  053D  00DA               	movwf	??_slot_Main+6
 24319  053E  01DB               	clrf	??_slot_Main+7
 24320  053F  085A               	movf	??_slot_Main+6,w
 24321  0540  00B5               	movwf	?_sprintf+6
 24322  0541  085B               	movf	??_slot_Main+7,w
 24323  0542  00B6               	movwf	?_sprintf+7
 24324  0543  357C               	lslf	_Shot_Index,w
 24325  0544  3ED1               	addlw	(low (_Shot_Options| (0+256)))& (0+255)
 24326  0545  0086               	movwf	6
 24327  0546  3001               	movlw	1	; select bank3/4
 24328  0547  0087               	movwf	7
 24329  0548  3F40               	moviw [0]fsr1
 24330  0549  00DC               	movwf	??_slot_Main+8
 24331  054A  3F41               	moviw [1]fsr1
 24332  054B  00DD               	movwf	??_slot_Main+9
 24333  054C  3002               	movlw	2
 24334  054D  075C               	addwf	??_slot_Main+8,w
 24335  054E  0084               	movwf	4
 24336  054F  085D               	movf	??_slot_Main+9,w
 24337  0550  1803               	skipnc
 24338  0551  0A5D               	incf	??_slot_Main+9,w
 24339  0552  0085               	movwf	5
 24340  0553  0800               	movf	0,w	;code access
 24341  0554  00DE               	movwf	??_slot_Main+10
 24342  0555  01DF               	clrf	??_slot_Main+11
 24343  0556  085E               	movf	??_slot_Main+10,w
 24344  0557  00B7               	movwf	?_sprintf+8
 24345  0558  085F               	movf	??_slot_Main+11,w
 24346  0559  00B8               	movwf	?_sprintf+9
 24347  055A  357C               	lslf	_Shot_Index,w
 24348  055B  3ED1               	addlw	(low (_Shot_Options| (0+256)))& (0+255)
 24349  055C  0086               	movwf	6
 24350  055D  3001               	movlw	1	; select bank3/4
 24351  055E  0087               	movwf	7
 24352  055F  3F40               	moviw [0]fsr1
 24353  0560  00E0               	movwf	??_slot_Main+12
 24354  0561  3F41               	moviw [1]fsr1
 24355  0562  00E1               	movwf	??_slot_Main+13
 24356  0563  3003               	movlw	3
 24357  0564  0760               	addwf	??_slot_Main+12,w
 24358  0565  0084               	movwf	4
 24359  0566  0861               	movf	??_slot_Main+13,w
 24360  0567  1803               	skipnc
 24361  0568  0A61               	incf	??_slot_Main+13,w
 24362  0569  0085               	movwf	5
 24363  056A  0800               	movf	0,w	;code access
 24364  056B  00E2               	movwf	??_slot_Main+14
 24365  056C  01E3               	clrf	??_slot_Main+15
 24366  056D  0862               	movf	??_slot_Main+14,w
 24367  056E  00B9               	movwf	?_sprintf+10
 24368  056F  0863               	movf	??_slot_Main+15,w
 24369  0570  00BA               	movwf	?_sprintf+11
 24370  0571  319A  225F  3180   	fcall	_sprintf
 24371  0574                     l1432:	
 24372                           
 24373                           ;slot_task.c: 156: }
 24374                           ;slot_task.c: 157: marquee(data->slot_print_buf, 1);
 24375  0574  0020               	movlb	0	; select bank0
 24376  0575  0865               	movf	slot_Main@data,w
 24377  0576  3E0B               	addlw	11
 24378  0577  00BA               	movwf	marquee@string
 24379  0578  3000               	movlw	0
 24380  0579  3D66               	addwfc	slot_Main@data+1,w
 24381  057A  00BB               	movwf	marquee@string+1
 24382  057B  3001               	movlw	1
 24383  057C  00BC               	movwf	marquee@count
 24384  057D  3000               	movlw	0
 24385  057E  00BD               	movwf	marquee@count+1
 24386  057F  31A1  21D2  3180   	fcall	_marquee
 24387                           
 24388                           ;slot_task.c: 158: }
 24389  0582  2E27               	goto	l9775
 24390  0583                     l9755:	
 24391                           
 24392                           ;slot_task.c: 159: else {
 24393                           ;slot_task.c: 160: slot_Finished_Animation(data);
 24394  0583  0020               	movlb	0	; select bank0
 24395  0584  0866               	movf	slot_Main@data+1,w
 24396  0585  00BE               	movwf	slot_Finished_Animation@taskData+1
 24397  0586  0865               	movf	slot_Main@data,w
 24398  0587  00BD               	movwf	slot_Finished_Animation@taskData
 24399  0588  3190  2001  3180   	fcall	_slot_Finished_Animation
 24400                           
 24401                           ;slot_task.c: 161: if ( data->displayTickCount % 50 <= 25 ) {
 24402  058B  3032               	movlw	50
 24403  058C  0020               	movlb	0	; select bank0
 24404  058D  00AB               	movwf	___lwmod@divisor
 24405  058E  3000               	movlw	0
 24406  058F  00AC               	movwf	___lwmod@divisor+1
 24407  0590  0865               	movf	slot_Main@data,w
 24408  0591  0086               	movwf	6
 24409  0592  0866               	movf	slot_Main@data+1,w
 24410  0593  0087               	movwf	7
 24411  0594  3143               	addfsr 1,3
 24412  0595  3F40               	moviw [0]fsr1
 24413  0596  00AD               	movwf	___lwmod@dividend
 24414  0597  3F41               	moviw [1]fsr1
 24415  0598  00AE               	movwf	___lwmod@dividend+1
 24416  0599  31B7  2772  3180   	fcall	___lwmod
 24417  059C  3000               	movlw	0
 24418  059D  0020               	movlb	0	; select bank0
 24419  059E  022C               	subwf	?___lwmod+1,w
 24420  059F  301A               	movlw	26
 24421  05A0  1903               	skipnz
 24422  05A1  022B               	subwf	?___lwmod,w
 24423  05A2  1803               	skipnc
 24424  05A3  2DB6               	goto	l9759
 24425                           
 24426                           ;slot_task.c: 162: memset(data->slot_print_buf, 0x20, 4);
 24427  05A4  0865               	movf	slot_Main@data,w
 24428  05A5  3E0B               	addlw	11
 24429  05A6  00F1               	movwf	memset@p1
 24430  05A7  3000               	movlw	0
 24431  05A8  3D66               	addwfc	slot_Main@data+1,w
 24432  05A9  00F2               	movwf	memset@p1+1
 24433  05AA  3020               	movlw	32
 24434  05AB  00F3               	movwf	memset@c
 24435  05AC  3000               	movlw	0
 24436  05AD  00F4               	movwf	memset@c+1
 24437  05AE  3004               	movlw	4
 24438  05AF  00F5               	movwf	memset@n
 24439  05B0  3000               	movlw	0
 24440  05B1  00F6               	movwf	memset@n+1
 24441  05B2  31B5  25C1  3180   	fcall	_memset
 24442                           
 24443                           ;slot_task.c: 163: }
 24444  05B5  2DCD               	goto	l1435
 24445  05B6                     l9759:	
 24446                           
 24447                           ;slot_task.c: 164: else {
 24448                           ;slot_task.c: 165: sprintf(data->slot_print_buf, "%s", Shot_Options_Long[Shot_Index]);
 24449  05B6  0020               	movlb	0	; select bank0
 24450  05B7  0865               	movf	slot_Main@data,w
 24451  05B8  3E0B               	addlw	11
 24452  05B9  00AF               	movwf	sprintf@sp
 24453  05BA  3000               	movlw	0
 24454  05BB  3D66               	addwfc	slot_Main@data+1,w
 24455  05BC  00B0               	movwf	sprintf@sp+1
 24456  05BD  3002               	movlw	low (STR_69| (0+32768))
 24457  05BE  00B1               	movwf	sprintf@f
 24458  05BF  30BC               	movlw	high (STR_69| (0+32768))
 24459  05C0  00B2               	movwf	sprintf@f+1
 24460  05C1  357C               	lslf	_Shot_Index,w
 24461  05C2  3EDE               	addlw	(low (_Shot_Options_Long| (0+512)))& (0+255)
 24462  05C3  0086               	movwf	6
 24463  05C4  3002               	movlw	2	; select bank5/6
 24464  05C5  0087               	movwf	7
 24465  05C6  3F40               	moviw [0]fsr1
 24466  05C7  00B3               	movwf	low ((?_sprintf| 0+4))
 24467  05C8  3F41               	moviw [1]fsr1
 24468  05C9  00B4               	movwf	(low ((?_sprintf| 0+4))+1)
 24469  05CA  319A  225F  3180   	fcall	_sprintf
 24470  05CD                     l1435:	
 24471                           
 24472                           ;slot_task.c: 166: }
 24473                           ;slot_task.c: 168: marquee_speedy(data->slot_print_buf, data->displayTickCount, 20);
 24474  05CD  0020               	movlb	0	; select bank0
 24475  05CE  0865               	movf	slot_Main@data,w
 24476  05CF  3E0B               	addlw	11
 24477  05D0  00BA               	movwf	marquee_speedy@string
 24478  05D1  3000               	movlw	0
 24479  05D2  3D66               	addwfc	slot_Main@data+1,w
 24480  05D3  00BB               	movwf	marquee_speedy@string+1
 24481  05D4  0865               	movf	slot_Main@data,w
 24482  05D5  0086               	movwf	6
 24483  05D6  0866               	movf	slot_Main@data+1,w
 24484  05D7  0087               	movwf	7
 24485  05D8  3143               	addfsr 1,3
 24486  05D9  3F40               	moviw [0]fsr1
 24487  05DA  00BC               	movwf	marquee_speedy@count
 24488  05DB  3F41               	moviw [1]fsr1
 24489  05DC  00BD               	movwf	marquee_speedy@count+1
 24490  05DD  3014               	movlw	20
 24491  05DE  00BE               	movwf	marquee_speedy@multiplier
 24492  05DF  3000               	movlw	0
 24493  05E0  00BF               	movwf	marquee_speedy@multiplier+1
 24494  05E1  31A1  215F  3180   	fcall	_marquee_speedy
 24495                           
 24496                           ;slot_task.c: 169: if (data->displayTickCount == 500 + (50 * 10)) {
 24497  05E4  0020               	movlb	0	; select bank0
 24498  05E5  0865               	movf	slot_Main@data,w
 24499  05E6  0086               	movwf	6
 24500  05E7  0866               	movf	slot_Main@data+1,w
 24501  05E8  0087               	movwf	7
 24502  05E9  3143               	addfsr 1,3
 24503  05EA  0016               	moviw fsr1++
 24504  05EB  3AE8               	xorlw	232
 24505  05EC  00D4               	movwf	??_slot_Main
 24506  05ED  0016               	moviw fsr1++
 24507  05EE  3A03               	xorlw	3
 24508  05EF  04D4               	iorwf	??_slot_Main,f
 24509  05F0  1D03               	btfss	3,2
 24510  05F1  2E27               	goto	l9775
 24511                           
 24512                           ;slot_task.c: 170: currentTask = MENU_TASK;
 24513  05F2  0021               	movlb	1	; select bank1
 24514  05F3  01BA               	clrf	_currentTask^(0+128)
 24515  05F4  01BB               	clrf	(_currentTask+1)^(0+128)
 24516                           
 24517                           ;slot_task.c: 173: slot_Setup(slot_taskData);
 24518  05F5  083D               	movf	(_slot_taskData+1)^(0+128),w
 24519  05F6  0020               	movlb	0	; select bank0
 24520  05F7  00B0               	movwf	slot_Setup@taskData+1
 24521  05F8  0021               	movlb	1	; select bank1
 24522  05F9  083C               	movf	_slot_taskData^(0+128),w
 24523  05FA  0020               	movlb	0	; select bank0
 24524  05FB  00AF               	movwf	slot_Setup@taskData
 24525  05FC  31AD  2580         	fcall	_slot_Setup
 24526                           
 24527                           ;slot_task.c: 176: data->holdCountA = 1;
 24528  05FE  0020               	movlb	0	; select bank0
 24529  05FF  0865               	movf	slot_Main@data,w
 24530  0600  0086               	movwf	6
 24531  0601  0866               	movf	slot_Main@data+1,w
 24532  0602  0087               	movwf	7
 24533  0603  315F               	addfsr 1,31
 24534  0604  3001               	movlw	1
 24535  0605  3FC0               	movwi [0]fsr1
 24536  0606  3000               	movlw	0
 24537  0607  3FC1               	movwi [1]fsr1
 24538                           
 24539                           ;slot_task.c: 177: data->holdCountB = 1;
 24540  0608  0865               	movf	slot_Main@data,w
 24541  0609  3E21               	addlw	33
 24542  060A  0086               	movwf	6
 24543  060B  3000               	movlw	0
 24544  060C  3D66               	addwfc	slot_Main@data+1,w
 24545  060D  0087               	movwf	7
 24546  060E  3001               	movlw	1
 24547  060F  3FC0               	movwi [0]fsr1
 24548  0610  3000               	movlw	0
 24549  0611  3FC1               	movwi [1]fsr1
 24550                           
 24551                           ;slot_task.c: 178: data->holdCountX = 1;
 24552  0612  0865               	movf	slot_Main@data,w
 24553  0613  3E23               	addlw	35
 24554  0614  0086               	movwf	6
 24555  0615  3000               	movlw	0
 24556  0616  3D66               	addwfc	slot_Main@data+1,w
 24557  0617  0087               	movwf	7
 24558  0618  3001               	movlw	1
 24559  0619  3FC0               	movwi [0]fsr1
 24560  061A  3000               	movlw	0
 24561  061B  3FC1               	movwi [1]fsr1
 24562                           
 24563                           ;slot_task.c: 179: data->holdCountY = 1;
 24564  061C  0865               	movf	slot_Main@data,w
 24565  061D  3E25               	addlw	37
 24566  061E  0086               	movwf	6
 24567  061F  3000               	movlw	0
 24568  0620  3D66               	addwfc	slot_Main@data+1,w
 24569  0621  0087               	movwf	7
 24570  0622  3001               	movlw	1
 24571  0623  3FC0               	movwi [0]fsr1
 24572  0624  3000               	movlw	0
 24573  0625  3FC1               	movwi [1]fsr1
 24574                           
 24575                           ;slot_task.c: 180: break;
 24576  0626  0008               	return
 24577  0627                     l9775:	
 24578                           
 24579                           ;slot_task.c: 181: }
 24580                           ;slot_task.c: 182: }
 24581                           ;slot_task.c: 184: data->displayTickCount += 1;
 24582  0627  0020               	movlb	0	; select bank0
 24583  0628  0865               	movf	slot_Main@data,w
 24584  0629  0086               	movwf	6
 24585  062A  0866               	movf	slot_Main@data+1,w
 24586  062B  0087               	movwf	7
 24587  062C  3143               	addfsr 1,3
 24588  062D  3001               	movlw	1
 24589  062E  0781               	addwf	1,f
 24590  062F  3141               	addfsr 1,1
 24591  0630  1803               	skipnc
 24592  0631  0A81               	incf	1,f
 24593                           
 24594                           ;slot_task.c: 185: data->holdCountA = 0;
 24595  0632  0865               	movf	slot_Main@data,w
 24596  0633  0086               	movwf	6
 24597  0634  0866               	movf	slot_Main@data+1,w
 24598  0635  0087               	movwf	7
 24599  0636  315F               	addfsr 1,31
 24600  0637  3000               	movlw	0
 24601  0638  3FC0               	movwi [0]fsr1
 24602  0639  3FC1               	movwi [1]fsr1
 24603                           
 24604                           ;slot_task.c: 186: data->holdCountB = 0;
 24605  063A  0865               	movf	slot_Main@data,w
 24606  063B  3E21               	addlw	33
 24607  063C  0086               	movwf	6
 24608  063D  3000               	movlw	0
 24609  063E  3D66               	addwfc	slot_Main@data+1,w
 24610  063F  0087               	movwf	7
 24611  0640  3000               	movlw	0
 24612  0641  3FC0               	movwi [0]fsr1
 24613  0642  3FC1               	movwi [1]fsr1
 24614                           
 24615                           ;slot_task.c: 187: data->holdCountX = 0;
 24616  0643  0865               	movf	slot_Main@data,w
 24617  0644  3E23               	addlw	35
 24618  0645  0086               	movwf	6
 24619  0646  3000               	movlw	0
 24620  0647  3D66               	addwfc	slot_Main@data+1,w
 24621  0648  0087               	movwf	7
 24622  0649  3000               	movlw	0
 24623  064A  3FC0               	movwi [0]fsr1
 24624  064B  3FC1               	movwi [1]fsr1
 24625                           
 24626                           ;slot_task.c: 188: data->holdCountY = 0;
 24627  064C  0865               	movf	slot_Main@data,w
 24628  064D  3E25               	addlw	37
 24629  064E  0086               	movwf	6
 24630  064F  3000               	movlw	0
 24631  0650  3D66               	addwfc	slot_Main@data+1,w
 24632  0651  0087               	movwf	7
 24633  0652  3000               	movlw	0
 24634  0653  3FC0               	movwi [0]fsr1
 24635  0654  3FC1               	movwi [1]fsr1
 24636                           
 24637                           ;slot_task.c: 189: data->noholdCount += 1;
 24638  0655  0865               	movf	slot_Main@data,w
 24639  0656  3E27               	addlw	39
 24640  0657  0086               	movwf	6
 24641  0658  3000               	movlw	0
 24642  0659  3D66               	addwfc	slot_Main@data+1,w
 24643  065A  0087               	movwf	7
 24644  065B  3001               	movlw	1
 24645  065C  0781               	addwf	1,f
 24646  065D  3141               	addfsr 1,1
 24647  065E  1803               	skipnc
 24648  065F  0A81               	incf	1,f
 24649                           
 24650                           ;slot_task.c: 190: }
 24651  0660  0008               	return
 24652  0661                     __end_of_slot_Main:	
 24653                           
 24654                           	psect	text20
 24655  2B7B                     __ptext20:	
 24656 ;; *************** function _slot_Running_Animation *****************
 24657 ;; Defined at:
 24658 ;;		line 64 in file "slot_task.c"
 24659 ;; Parameters:    Size  Location     Type
 24660 ;;  taskData        2   18[BANK0 ] PTR void 
 24661 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 24662 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 24663 ;; Auto vars:     Size  Location     Type
 24664 ;;  data            2   22[BANK0 ] PTR struct t_slot_taskDa
 24665 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 24666 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 24667 ;; Return value:  Size  Location     Type
 24668 ;;                  1    wreg      void 
 24669 ;; Registers used:
 24670 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 24671 ;; Tracked objects:
 24672 ;;		On entry : 0/0
 24673 ;;		On exit  : 0/0
 24674 ;;		Unchanged: 0/0
 24675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24676 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24677 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24678 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24679 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24680 ;;Total ram usage:        6 bytes
 24681 ;; Hardware stack levels used:    1
 24682 ;; Hardware stack levels required when called:   10
 24683 ;; This function calls:
 24684 ;;		_led_circle
 24685 ;; This function is called by:
 24686 ;;		_slot_Main
 24687 ;; This function uses a non-reentrant model
 24688 ;;
 24689                           
 24690                           
 24691                           ;psect for function _slot_Running_Animation
 24692  2B7B                     _slot_Running_Animation:	
 24693                           
 24694                           ;slot_task.c: 65: struct t_slot_taskData *data = (struct t_slot_taskData *) taskData;
 24695                           
 24696                           ;incstack = 0
 24697                           ; Regs used in _slot_Running_Animation: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 24698  2B7B  0020               	movlb	0	; select bank0
 24699  2B7C  0833               	movf	slot_Running_Animation@taskData+1,w
 24700  2B7D  00B7               	movwf	slot_Running_Animation@data+1
 24701  2B7E  0832               	movf	slot_Running_Animation@taskData,w
 24702  2B7F  00B6               	movwf	slot_Running_Animation@data
 24703                           
 24704                           ;slot_task.c: 66: if (data->delayTickCount ==0 ){
 24705  2B80  0836               	movf	slot_Running_Animation@data,w
 24706  2B81  0086               	movwf	6
 24707  2B82  0837               	movf	slot_Running_Animation@data+1,w
 24708  2B83  0087               	movwf	7
 24709  2B84  3145               	addfsr 1,5
 24710  2B85  0016               	moviw fsr1++
 24711  2B86  0401               	iorwf	1,w
 24712  2B87  1D03               	btfss	3,2
 24713  2B88  2BB5               	goto	l8711
 24714                           
 24715                           ;slot_task.c: 67: if (Leds_idx == 1024 ){
 24716  2B89  3004               	movlw	4
 24717  2B8A  0021               	movlb	1	; select bank1
 24718  2B8B  0658               	xorwf	(_Leds_idx+1)^(0+128),w
 24719  2B8C  0457               	iorwf	_Leds_idx^(0+128),w
 24720  2B8D  1D03               	btfss	3,2
 24721  2B8E  2B93               	goto	l8703
 24722                           
 24723                           ;slot_task.c: 68: Leds_idx = Leds_idx << 1;
 24724  2B8F  3557               	lslf	_Leds_idx^(0+128),w
 24725  2B90  00D7               	movwf	_Leds_idx^(0+128)
 24726  2B91  0D58               	rlf	(_Leds_idx+1)^(0+128),w
 24727  2B92  00D8               	movwf	(_Leds_idx+1)^(0+128)
 24728  2B93                     l8703:	
 24729                           
 24730                           ;slot_task.c: 69: }
 24731                           ;slot_task.c: 70: led_circle(Leds_idx);
 24732  2B93  0858               	movf	(_Leds_idx+1)^(0+128),w
 24733  2B94  0020               	movlb	0	; select bank0
 24734  2B95  00B1               	movwf	led_circle@count+1
 24735  2B96  0021               	movlb	1	; select bank1
 24736  2B97  0857               	movf	_Leds_idx^(0+128),w
 24737  2B98  0020               	movlb	0	; select bank0
 24738  2B99  00B0               	movwf	led_circle@count
 24739  2B9A  31B3  23F0  31AB   	fcall	_led_circle
 24740                           
 24741                           ;slot_task.c: 71: if (Leds_idx < 1 ){
 24742  2B9D  0021               	movlb	1	; select bank1
 24743  2B9E  0857               	movf	_Leds_idx^(0+128),w
 24744  2B9F  0458               	iorwf	(_Leds_idx+1)^(0+128),w
 24745  2BA0  1D03               	btfss	3,2
 24746  2BA1  2BA6               	goto	l1405
 24747                           
 24748                           ;slot_task.c: 72: Leds_idx = 1;
 24749  2BA2  3001               	movlw	1
 24750  2BA3  00D7               	movwf	_Leds_idx^(0+128)
 24751  2BA4  3000               	movlw	0
 24752  2BA5  00D8               	movwf	(_Leds_idx^(0+128)+1)
 24753  2BA6                     l1405:	
 24754                           
 24755                           ;slot_task.c: 73: }
 24756                           ;slot_task.c: 74: Leds_idx = Leds_idx << 1;
 24757  2BA6  3557               	lslf	_Leds_idx^(0+128),w
 24758  2BA7  00D7               	movwf	_Leds_idx^(0+128)
 24759  2BA8  0D58               	rlf	(_Leds_idx+1)^(0+128),w
 24760  2BA9  00D8               	movwf	(_Leds_idx+1)^(0+128)
 24761                           
 24762                           ;slot_task.c: 76: data->delayTickCount = 10;
 24763  2BAA  0020               	movlb	0	; select bank0
 24764  2BAB  0836               	movf	slot_Running_Animation@data,w
 24765  2BAC  0086               	movwf	6
 24766  2BAD  0837               	movf	slot_Running_Animation@data+1,w
 24767  2BAE  0087               	movwf	7
 24768  2BAF  3145               	addfsr 1,5
 24769  2BB0  300A               	movlw	10
 24770  2BB1  3FC0               	movwi [0]fsr1
 24771  2BB2  3000               	movlw	0
 24772  2BB3  3FC1               	movwi [1]fsr1
 24773                           
 24774                           ;slot_task.c: 77: }
 24775  2BB4  0008               	return
 24776  2BB5                     l8711:	
 24777                           
 24778                           ;slot_task.c: 78: else {
 24779                           ;slot_task.c: 79: data->delayTickCount -= 1;
 24780  2BB5  0836               	movf	slot_Running_Animation@data,w
 24781  2BB6  0086               	movwf	6
 24782  2BB7  0837               	movf	slot_Running_Animation@data+1,w
 24783  2BB8  0087               	movwf	7
 24784  2BB9  3145               	addfsr 1,5
 24785  2BBA  3001               	movlw	1
 24786  2BBB  0281               	subwf	1,f
 24787  2BBC  3141               	addfsr 1,1
 24788  2BBD  3000               	movlw	0
 24789  2BBE  3B81               	subwfb	1,f
 24790  2BBF  317F               	addfsr 1,-1
 24791  2BC0  0008               	return
 24792  2BC1                     __end_of_slot_Running_Animation:	
 24793                           
 24794                           	psect	text21
 24795  1001                     __ptext21:	
 24796 ;; *************** function _slot_Finished_Animation *****************
 24797 ;; Defined at:
 24798 ;;		line 84 in file "slot_task.c"
 24799 ;; Parameters:    Size  Location     Type
 24800 ;;  taskData        2   29[BANK0 ] PTR void 
 24801 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 24802 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 24803 ;; Auto vars:     Size  Location     Type
 24804 ;;  data            2   33[BANK0 ] PTR struct t_slot_taskDa
 24805 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 24806 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 24807 ;; Return value:  Size  Location     Type
 24808 ;;                  1    wreg      void 
 24809 ;; Registers used:
 24810 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 24811 ;; Tracked objects:
 24812 ;;		On entry : 0/0
 24813 ;;		On exit  : 0/0
 24814 ;;		Unchanged: 0/0
 24815 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24816 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24817 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24818 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24819 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24820 ;;Total ram usage:        6 bytes
 24821 ;; Hardware stack levels used:    1
 24822 ;; Hardware stack levels required when called:   10
 24823 ;; This function calls:
 24824 ;;		_led_rand
 24825 ;; This function is called by:
 24826 ;;		_slot_Main
 24827 ;; This function uses a non-reentrant model
 24828 ;;
 24829                           
 24830                           
 24831                           ;psect for function _slot_Finished_Animation
 24832  1001                     _slot_Finished_Animation:	
 24833                           
 24834                           ;slot_task.c: 85: struct t_slot_taskData *data = (struct t_slot_taskData *) taskData;
 24835                           
 24836                           ;incstack = 0
 24837                           ; Regs used in _slot_Finished_Animation: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 24838  1001  0020               	movlb	0	; select bank0
 24839  1002  083E               	movf	slot_Finished_Animation@taskData+1,w
 24840  1003  00C2               	movwf	slot_Finished_Animation@data+1
 24841  1004  083D               	movf	slot_Finished_Animation@taskData,w
 24842  1005  00C1               	movwf	slot_Finished_Animation@data
 24843                           
 24844                           ;slot_task.c: 86: if (data->delayTickCount < 1){
 24845  1006  0841               	movf	slot_Finished_Animation@data,w
 24846  1007  0086               	movwf	6
 24847  1008  0842               	movf	slot_Finished_Animation@data+1,w
 24848  1009  0087               	movwf	7
 24849  100A  3145               	addfsr 1,5
 24850  100B  0016               	moviw fsr1++
 24851  100C  0401               	iorwf	1,w
 24852  100D  1D03               	btfss	3,2
 24853  100E  281C               	goto	l8721
 24854                           
 24855                           ;slot_task.c: 87: led_rand();
 24856  100F  31AC  244E         	fcall	_led_rand
 24857                           
 24858                           ;slot_task.c: 88: data->delayTickCount = 10;
 24859  1011  0020               	movlb	0	; select bank0
 24860  1012  0841               	movf	slot_Finished_Animation@data,w
 24861  1013  0086               	movwf	6
 24862  1014  0842               	movf	slot_Finished_Animation@data+1,w
 24863  1015  0087               	movwf	7
 24864  1016  3145               	addfsr 1,5
 24865  1017  300A               	movlw	10
 24866  1018  3FC0               	movwi [0]fsr1
 24867  1019  3000               	movlw	0
 24868  101A  3FC1               	movwi [1]fsr1
 24869                           
 24870                           ;slot_task.c: 89: }
 24871  101B  0008               	return
 24872  101C                     l8721:	
 24873                           
 24874                           ;slot_task.c: 90: else {
 24875                           ;slot_task.c: 91: data->delayTickCount -= 1;
 24876  101C  0841               	movf	slot_Finished_Animation@data,w
 24877  101D  0086               	movwf	6
 24878  101E  0842               	movf	slot_Finished_Animation@data+1,w
 24879  101F  0087               	movwf	7
 24880  1020  3145               	addfsr 1,5
 24881  1021  3001               	movlw	1
 24882  1022  0281               	subwf	1,f
 24883  1023  3141               	addfsr 1,1
 24884  1024  3000               	movlw	0
 24885  1025  3B81               	subwfb	1,f
 24886  1026  317F               	addfsr 1,-1
 24887  1027  0008               	return
 24888  1028                     __end_of_slot_Finished_Animation:	
 24889                           
 24890                           	psect	text22
 24891  28B3                     __ptext22:	
 24892 ;; *************** function _secret_clear *****************
 24893 ;; Defined at:
 24894 ;;		line 178 in file "secret_task.c"
 24895 ;; Parameters:    Size  Location     Type
 24896 ;;  data            2    1[COMMON] PTR struct t_secret_task
 24897 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 24898 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 24899 ;; Auto vars:     Size  Location     Type
 24900 ;;		None
 24901 ;; Return value:  Size  Location     Type
 24902 ;;                  1    wreg      void 
 24903 ;; Registers used:
 24904 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 24905 ;; Tracked objects:
 24906 ;;		On entry : 0/0
 24907 ;;		On exit  : 0/0
 24908 ;;		Unchanged: 0/0
 24909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24910 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24911 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24912 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24913 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24914 ;;Total ram usage:        2 bytes
 24915 ;; Hardware stack levels used:    1
 24916 ;; Hardware stack levels required when called:    4
 24917 ;; This function calls:
 24918 ;;		Nothing
 24919 ;; This function is called by:
 24920 ;;		_secret_Main
 24921 ;; This function uses a non-reentrant model
 24922 ;;
 24923                           
 24924                           
 24925                           ;psect for function _secret_clear
 24926  28B3                     _secret_clear:	
 24927                           
 24928                           ;secret_task.c: 180: data->delayTickCount = 300;
 24929                           
 24930                           ;incstack = 0
 24931                           ; Regs used in _secret_clear: [wreg+fsr1l+fsr1h+status,2+status,0]
 24932  28B3  0871               	movf	secret_clear@data,w
 24933  28B4  0086               	movwf	6
 24934  28B5  0872               	movf	secret_clear@data+1,w
 24935  28B6  0087               	movwf	7
 24936  28B7  3142               	addfsr 1,2
 24937  28B8  302C               	movlw	44
 24938  28B9  3FC0               	movwi [0]fsr1
 24939  28BA  3001               	movlw	1
 24940  28BB  3FC1               	movwi [1]fsr1
 24941                           
 24942                           ;secret_task.c: 181: data->holdCountA = 0;
 24943  28BC  0871               	movf	secret_clear@data,w
 24944  28BD  0086               	movwf	6
 24945  28BE  0872               	movf	secret_clear@data+1,w
 24946  28BF  0087               	movwf	7
 24947  28C0  3144               	addfsr 1,4
 24948  28C1  3000               	movlw	0
 24949  28C2  3FC0               	movwi [0]fsr1
 24950  28C3  3FC1               	movwi [1]fsr1
 24951                           
 24952                           ;secret_task.c: 182: data->holdCountB = 0;
 24953  28C4  0871               	movf	secret_clear@data,w
 24954  28C5  0086               	movwf	6
 24955  28C6  0872               	movf	secret_clear@data+1,w
 24956  28C7  0087               	movwf	7
 24957  28C8  3146               	addfsr 1,6
 24958  28C9  3000               	movlw	0
 24959  28CA  3FC0               	movwi [0]fsr1
 24960  28CB  3FC1               	movwi [1]fsr1
 24961                           
 24962                           ;secret_task.c: 183: data->holdCountX = 0;
 24963  28CC  0871               	movf	secret_clear@data,w
 24964  28CD  0086               	movwf	6
 24965  28CE  0872               	movf	secret_clear@data+1,w
 24966  28CF  0087               	movwf	7
 24967  28D0  3148               	addfsr 1,8
 24968  28D1  3000               	movlw	0
 24969  28D2  3FC0               	movwi [0]fsr1
 24970  28D3  3FC1               	movwi [1]fsr1
 24971                           
 24972                           ;secret_task.c: 184: data->holdCountY = 0;
 24973  28D4  0871               	movf	secret_clear@data,w
 24974  28D5  0086               	movwf	6
 24975  28D6  0872               	movf	secret_clear@data+1,w
 24976  28D7  0087               	movwf	7
 24977  28D8  314A               	addfsr 1,10
 24978  28D9  3000               	movlw	0
 24979  28DA  3FC0               	movwi [0]fsr1
 24980  28DB  3FC1               	movwi [1]fsr1
 24981                           
 24982                           ;secret_task.c: 185: data->noholdCount = 0;
 24983  28DC  0871               	movf	secret_clear@data,w
 24984  28DD  0086               	movwf	6
 24985  28DE  0872               	movf	secret_clear@data+1,w
 24986  28DF  0087               	movwf	7
 24987  28E0  314C               	addfsr 1,12
 24988  28E1  3000               	movlw	0
 24989  28E2  3FC0               	movwi [0]fsr1
 24990  28E3  3FC1               	movwi [1]fsr1
 24991  28E4  0008               	return
 24992  28E5                     __end_of_secret_clear:	
 24993                           
 24994                           	psect	text23
 24995  1028                     __ptext23:	
 24996 ;; *************** function _secret_check *****************
 24997 ;; Defined at:
 24998 ;;		line 69 in file "secret_task.c"
 24999 ;; Parameters:    Size  Location     Type
 25000 ;;  data            2    7[COMMON] PTR struct t_secret_task
 25001 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 25002 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 25003 ;;  buttonPresse    1    9[COMMON] unsigned char 
 25004 ;; Auto vars:     Size  Location     Type
 25005 ;;  i               2    8[BANK0 ] unsigned int 
 25006 ;;  hit_counter     6    0        unsigned char [6]
 25007 ;;  currents_siz    2    5[BANK0 ] unsigned int 
 25008 ;;  size            2    3[BANK0 ] unsigned int 
 25009 ;;  inputs          1    7[BANK0 ] PTR unsigned char 
 25010 ;;		 -> secret_inputs.inputs(20), secret_inputs(25), 
 25011 ;; Return value:  Size  Location     Type
 25012 ;;                  1    wreg      unsigned char 
 25013 ;; Registers used:
 25014 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 25015 ;; Tracked objects:
 25016 ;;		On entry : 0/0
 25017 ;;		On exit  : 0/0
 25018 ;;		Unchanged: 0/0
 25019 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25020 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25021 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25022 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25023 ;;      Totals:         3      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25024 ;;Total ram usage:       13 bytes
 25025 ;; Hardware stack levels used:    1
 25026 ;; Hardware stack levels required when called:    5
 25027 ;; This function calls:
 25028 ;;		___bmul
 25029 ;;		_strlen
 25030 ;; This function is called by:
 25031 ;;		_secret_Main
 25032 ;; This function uses a non-reentrant model
 25033 ;;
 25034                           
 25035                           
 25036                           ;psect for function _secret_check
 25037  1028                     _secret_check:	
 25038                           
 25039                           ;secret_task.c: 70: u8 *inputs;
 25040                           ;secret_task.c: 71: u16 size = sizeof(secret_inputs) / sizeof(secret_inputs[0]);
 25041                           
 25042                           ;incstack = 0
 25043                           ; Regs used in _secret_check: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 25044  1028  3001               	movlw	1
 25045  1029  0020               	movlb	0	; select bank0
 25046  102A  00A3               	movwf	secret_check@size
 25047  102B  3000               	movlw	0
 25048  102C  00A4               	movwf	secret_check@size+1
 25049                           
 25050                           ;secret_task.c: 72: u16 currents_size;
 25051                           ;secret_task.c: 73: char hit_counter[6];
 25052                           ;secret_task.c: 75: for (u16 i = 0; i < size; i++){
 25053  102D  01A8               	clrf	secret_check@i
 25054  102E  01A9               	clrf	secret_check@i+1
 25055  102F                     l8677:	
 25056  102F  0824               	movf	secret_check@size+1,w
 25057  1030  0229               	subwf	secret_check@i+1,w
 25058  1031  1D03               	skipz
 25059  1032  2835               	goto	u5335
 25060  1033  0823               	movf	secret_check@size,w
 25061  1034  0228               	subwf	secret_check@i,w
 25062  1035                     u5335:	
 25063  1035  1803               	btfsc	3,0
 25064  1036  28E1               	goto	l8679
 25065                           
 25066                           ;secret_task.c: 76: inputs = secret_inputs[i].inputs;
 25067  1037  3019               	movlw	25
 25068  1038  00A0               	movwf	??_secret_check
 25069  1039  0820               	movf	??_secret_check,w
 25070  103A  00F1               	movwf	___bmul@multiplicand
 25071  103B  0828               	movf	secret_check@i,w
 25072  103C  31B4  24F7  3190   	fcall	___bmul
 25073  103F  3E4D               	addlw	(low (_secret_inputs| (0+512)))& (0+255)
 25074  1040  0020               	movlb	0	; select bank0
 25075  1041  00A1               	movwf	??_secret_check+1
 25076  1042  0821               	movf	??_secret_check+1,w
 25077  1043  00A7               	movwf	secret_check@inputs
 25078                           
 25079                           ;secret_task.c: 78: if (buttonPressed == inputs[secret_inputs[i].idx]){
 25080  1044  3019               	movlw	25
 25081  1045  00A0               	movwf	??_secret_check
 25082  1046  0820               	movf	??_secret_check,w
 25083  1047  00F1               	movwf	___bmul@multiplicand
 25084  1048  0828               	movf	secret_check@i,w
 25085  1049  31B4  24F7  3190   	fcall	___bmul
 25086  104C  3E14               	addlw	20
 25087  104D  3E4D               	addlw	(low (_secret_inputs| (0+512)))& (0+255)
 25088  104E  0086               	movwf	6
 25089  104F  3002               	movlw	2	; select bank4/5
 25090  1050  0087               	movwf	7
 25091  1051  0801               	movf	1,w
 25092  1052  0020               	movlb	0	; select bank0
 25093  1053  0727               	addwf	secret_check@inputs,w
 25094  1054  00A1               	movwf	??_secret_check+1
 25095  1055  0821               	movf	??_secret_check+1,w
 25096  1056  0086               	movwf	6
 25097  1057  3002               	movlw	2	; select bank4/5
 25098  1058  0087               	movwf	7
 25099  1059  0801               	movf	1,w
 25100  105A  0679               	xorwf	secret_check@buttonPressed,w
 25101  105B  1D03               	skipz
 25102  105C  28CA               	goto	l8673
 25103                           
 25104                           ;secret_task.c: 79: currents_size = strlen((const char *)inputs);
 25105  105D  0827               	movf	secret_check@inputs,w
 25106  105E  00F1               	movwf	strlen@s
 25107  105F  3002               	movlw	2
 25108  1060  00F2               	movwf	strlen@s+1
 25109  1061  31B6  2680  3190   	fcall	_strlen
 25110  1064  0872               	movf	?_strlen+1,w
 25111  1065  0020               	movlb	0	; select bank0
 25112  1066  00A6               	movwf	secret_check@currents_size+1
 25113  1067  0871               	movf	?_strlen,w
 25114  1068  00A5               	movwf	secret_check@currents_size
 25115                           
 25116                           ;secret_task.c: 80: secret_inputs[i].idx++;
 25117  1069  3019               	movlw	25
 25118  106A  00A0               	movwf	??_secret_check
 25119  106B  0820               	movf	??_secret_check,w
 25120  106C  00F1               	movwf	___bmul@multiplicand
 25121  106D  0828               	movf	secret_check@i,w
 25122  106E  31B4  24F7  3190   	fcall	___bmul
 25123  1071  3E14               	addlw	20
 25124  1072  3E4D               	addlw	(low (_secret_inputs| (0+512)))& (0+255)
 25125  1073  0086               	movwf	6
 25126  1074  3002               	movlw	2	; select bank4/5
 25127  1075  0087               	movwf	7
 25128  1076  3001               	movlw	1
 25129  1077  0781               	addwf	1,f
 25130  1078  3141               	addfsr 1,1
 25131  1079  1803               	skipnc
 25132  107A  0A81               	incf	1,f
 25133                           
 25134                           ;secret_task.c: 82: if (secret_inputs[i].idx == currents_size) {
 25135  107B  3019               	movlw	25
 25136  107C  0020               	movlb	0	; select bank0
 25137  107D  00A0               	movwf	??_secret_check
 25138  107E  0820               	movf	??_secret_check,w
 25139  107F  00F1               	movwf	___bmul@multiplicand
 25140  1080  0828               	movf	secret_check@i,w
 25141  1081  31B4  24F7  3190   	fcall	___bmul
 25142  1084  3E14               	addlw	20
 25143  1085  3E4D               	addlw	(low (_secret_inputs| (0+512)))& (0+255)
 25144  1086  0086               	movwf	6
 25145  1087  3002               	movlw	2	; select bank4/5
 25146  1088  0087               	movwf	7
 25147  1089  3F40               	moviw [0]fsr1
 25148  108A  0020               	movlb	0	; select bank0
 25149  108B  00A1               	movwf	??_secret_check+1
 25150  108C  3F41               	moviw [1]fsr1
 25151  108D  00A2               	movwf	??_secret_check+2
 25152  108E  0826               	movf	secret_check@currents_size+1,w
 25153  108F  0622               	xorwf	??_secret_check+2,w
 25154  1090  1D03               	skipz
 25155  1091  2894               	goto	u5325
 25156  1092  0825               	movf	secret_check@currents_size,w
 25157  1093  0621               	xorwf	??_secret_check+1,w
 25158  1094                     u5325:	
 25159  1094  1D03               	skipz
 25160  1095  28DB               	goto	l8675
 25161                           
 25162                           ;secret_task.c: 84: secret_inputs[i].idx = 0;
 25163  1096  3019               	movlw	25
 25164  1097  00A0               	movwf	??_secret_check
 25165  1098  0820               	movf	??_secret_check,w
 25166  1099  00F1               	movwf	___bmul@multiplicand
 25167  109A  0828               	movf	secret_check@i,w
 25168  109B  31B4  24F7  3190   	fcall	___bmul
 25169  109E  3E14               	addlw	20
 25170  109F  3E4D               	addlw	(low (_secret_inputs| (0+512)))& (0+255)
 25171  10A0  0086               	movwf	6
 25172  10A1  3002               	movlw	2	; select bank4/5
 25173  10A2  0087               	movwf	7
 25174  10A3  3000               	movlw	0
 25175  10A4  3FC0               	movwi [0]fsr1
 25176  10A5  3FC1               	movwi [1]fsr1
 25177                           
 25178                           ;secret_task.c: 87: *(secret_inputs[i].variable) = (u16) secret_inputs[i].value;
 25179  10A6  3019               	movlw	25
 25180  10A7  0020               	movlb	0	; select bank0
 25181  10A8  00A0               	movwf	??_secret_check
 25182  10A9  0820               	movf	??_secret_check,w
 25183  10AA  00F1               	movwf	___bmul@multiplicand
 25184  10AB  0828               	movf	secret_check@i,w
 25185  10AC  31B4  24F7  3190   	fcall	___bmul
 25186  10AF  3E17               	addlw	23
 25187  10B0  3E4D               	addlw	(low (_secret_inputs| (0+512)))& (0+255)
 25188  10B1  0086               	movwf	6
 25189  10B2  3002               	movlw	2	; select bank4/5
 25190  10B3  0087               	movwf	7
 25191  10B4  3019               	movlw	25
 25192  10B5  0020               	movlb	0	; select bank0
 25193  10B6  00A1               	movwf	??_secret_check+1
 25194  10B7  0821               	movf	??_secret_check+1,w
 25195  10B8  00F1               	movwf	___bmul@multiplicand
 25196  10B9  0828               	movf	secret_check@i,w
 25197  10BA  31B4  24F7         	fcall	___bmul
 25198  10BC  3E16               	addlw	22
 25199  10BD  3E4D               	addlw	(low (_secret_inputs| (0+512)))& (0+255)
 25200  10BE  0084               	movwf	4
 25201  10BF  3002               	movlw	2	; select bank4/5
 25202  10C0  0085               	movwf	5
 25203  10C1  0800               	movf	0,w
 25204  10C2  0084               	movwf	4
 25205  10C3  0185               	clrf	5
 25206  10C4  3F40               	moviw [0]fsr1
 25207  10C5  3F80               	movwi [0]fsr0
 25208  10C6  3F41               	moviw [1]fsr1
 25209  10C7  3F81               	movwi [1]fsr0
 25210                           
 25211                           ;secret_task.c: 89: return 1;
 25212  10C8  3001               	movlw	1
 25213  10C9  0008               	return
 25214  10CA                     l8673:	
 25215                           ;secret_task.c: 90: }
 25216                           ;secret_task.c: 91: } else {
 25217                           
 25218                           
 25219                           ;secret_task.c: 93: secret_inputs[i].idx = 0;
 25220  10CA  3019               	movlw	25
 25221  10CB  0020               	movlb	0	; select bank0
 25222  10CC  00A0               	movwf	??_secret_check
 25223  10CD  0820               	movf	??_secret_check,w
 25224  10CE  00F1               	movwf	___bmul@multiplicand
 25225  10CF  0828               	movf	secret_check@i,w
 25226  10D0  31B4  24F7  3190   	fcall	___bmul
 25227  10D3  3E14               	addlw	20
 25228  10D4  3E4D               	addlw	(low (_secret_inputs| (0+512)))& (0+255)
 25229  10D5  0086               	movwf	6
 25230  10D6  3002               	movlw	2	; select bank4/5
 25231  10D7  0087               	movwf	7
 25232  10D8  3000               	movlw	0
 25233  10D9  3FC0               	movwi [0]fsr1
 25234  10DA  3FC1               	movwi [1]fsr1
 25235  10DB                     l8675:	
 25236  10DB  3001               	movlw	1
 25237  10DC  0020               	movlb	0	; select bank0
 25238  10DD  07A8               	addwf	secret_check@i,f
 25239  10DE  3000               	movlw	0
 25240  10DF  3DA9               	addwfc	secret_check@i+1,f
 25241  10E0  282F               	goto	l8677
 25242  10E1                     l8679:	
 25243                           
 25244                           ;secret_task.c: 94: }
 25245                           ;secret_task.c: 95: }
 25246                           ;secret_task.c: 96: return 0;
 25247  10E1  3000               	movlw	0
 25248  10E2  0008               	return
 25249  10E3                     __end_of_secret_check:	
 25250                           
 25251                           	psect	text24
 25252  2C96                     __ptext24:	
 25253 ;; *************** function _menu_run_option *****************
 25254 ;; Defined at:
 25255 ;;		line 185 in file "menu_task.c"
 25256 ;; Parameters:    Size  Location     Type
 25257 ;;  data            2   27[BANK0 ] PTR struct t_menu_taskDa
 25258 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 25259 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 25260 ;; Auto vars:     Size  Location     Type
 25261 ;;		None
 25262 ;; Return value:  Size  Location     Type
 25263 ;;                  1    wreg      void 
 25264 ;; Registers used:
 25265 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 25266 ;; Tracked objects:
 25267 ;;		On entry : 0/0
 25268 ;;		On exit  : 0/0
 25269 ;;		Unchanged: 0/0
 25270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25271 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25272 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25273 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25274 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25275 ;;Total ram usage:        2 bytes
 25276 ;; Hardware stack levels used:    1
 25277 ;; Hardware stack levels required when called:   11
 25278 ;; This function calls:
 25279 ;;		_menu_clear
 25280 ;; This function is called by:
 25281 ;;		_menu_Main
 25282 ;; This function uses a non-reentrant model
 25283 ;;
 25284                           
 25285                           
 25286                           ;psect for function _menu_run_option
 25287  2C96                     _menu_run_option:	
 25288                           
 25289                           ;menu_task.c: 186: switch (menu_option_idx){
 25290                           
 25291                           ;incstack = 0
 25292                           ; Regs used in _menu_run_option: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 25293  2C96  2CCB               	goto	l8465
 25294  2C97                     l8447:	
 25295                           ;menu_task.c: 187: case 1:
 25296                           
 25297                           
 25298                           ;menu_task.c: 188: menu_clear(data);
 25299  2C97  0020               	movlb	0	; select bank0
 25300  2C98  083C               	movf	menu_run_option@data+1,w
 25301  2C99  00BA               	movwf	menu_clear@data+1
 25302  2C9A  083B               	movf	menu_run_option@data,w
 25303  2C9B  00B9               	movwf	menu_clear@data
 25304  2C9C  31AC  2407         	fcall	_menu_clear
 25305                           
 25306                           ;menu_task.c: 189: currentTask = SLOT_TASK;
 25307  2C9E  3001               	movlw	1
 25308  2C9F  0021               	movlb	1	; select bank1
 25309  2CA0  00BA               	movwf	_currentTask^(0+128)
 25310  2CA1  3000               	movlw	0
 25311  2CA2  00BB               	movwf	(_currentTask^(0+128)+1)
 25312                           
 25313                           ;menu_task.c: 190: break;
 25314  2CA3  0008               	return
 25315  2CA4                     l8451:	
 25316                           ;menu_task.c: 191: case 2:
 25317                           
 25318                           
 25319                           ;menu_task.c: 192: menu_clear(data);
 25320  2CA4  0020               	movlb	0	; select bank0
 25321  2CA5  083C               	movf	menu_run_option@data+1,w
 25322  2CA6  00BA               	movwf	menu_clear@data+1
 25323  2CA7  083B               	movf	menu_run_option@data,w
 25324  2CA8  00B9               	movwf	menu_clear@data
 25325  2CA9  31AC  2407         	fcall	_menu_clear
 25326                           
 25327                           ;menu_task.c: 193: currentTask = LOCKED_TASK;
 25328  2CAB  3003               	movlw	3
 25329  2CAC  0021               	movlb	1	; select bank1
 25330  2CAD  00BA               	movwf	_currentTask^(0+128)
 25331  2CAE  3000               	movlw	0
 25332  2CAF  00BB               	movwf	(_currentTask^(0+128)+1)
 25333                           
 25334                           ;menu_task.c: 194: break;
 25335  2CB0  0008               	return
 25336  2CB1                     l8455:	
 25337                           ;menu_task.c: 195: case 4:
 25338                           
 25339                           
 25340                           ;menu_task.c: 196: menu_clear(data);
 25341  2CB1  0020               	movlb	0	; select bank0
 25342  2CB2  083C               	movf	menu_run_option@data+1,w
 25343  2CB3  00BA               	movwf	menu_clear@data+1
 25344  2CB4  083B               	movf	menu_run_option@data,w
 25345  2CB5  00B9               	movwf	menu_clear@data
 25346  2CB6  31AC  2407         	fcall	_menu_clear
 25347                           
 25348                           ;menu_task.c: 197: currentTask = FLASHY_TASK;
 25349  2CB8  3002               	movlw	2
 25350  2CB9  0021               	movlb	1	; select bank1
 25351  2CBA  00BA               	movwf	_currentTask^(0+128)
 25352  2CBB  3000               	movlw	0
 25353  2CBC  00BB               	movwf	(_currentTask^(0+128)+1)
 25354                           
 25355                           ;menu_task.c: 198: break;
 25356  2CBD  0008               	return
 25357  2CBE                     l8459:	
 25358                           ;menu_task.c: 199: case 3:
 25359                           
 25360                           
 25361                           ;menu_task.c: 200: menu_clear(data);
 25362  2CBE  0020               	movlb	0	; select bank0
 25363  2CBF  083C               	movf	menu_run_option@data+1,w
 25364  2CC0  00BA               	movwf	menu_clear@data+1
 25365  2CC1  083B               	movf	menu_run_option@data,w
 25366  2CC2  00B9               	movwf	menu_clear@data
 25367  2CC3  31AC  2407         	fcall	_menu_clear
 25368                           
 25369                           ;menu_task.c: 201: currentTask = MATRIX_TASK;
 25370  2CC5  3004               	movlw	4
 25371  2CC6  0021               	movlb	1	; select bank1
 25372  2CC7  00BA               	movwf	_currentTask^(0+128)
 25373  2CC8  3000               	movlw	0
 25374  2CC9  00BB               	movwf	(_currentTask^(0+128)+1)
 25375                           
 25376                           ;menu_task.c: 203: }
 25377                           
 25378                           ;menu_task.c: 202: break;
 25379  2CCA  0008               	return
 25380  2CCB                     l8465:	
 25381                           
 25382                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 25383                           ; Switch size 1, requested type "space"
 25384                           ; Number of cases is 1, Range of values is 0 to 0
 25385                           ; switch strategies available:
 25386                           ; Name         Instructions Cycles
 25387                           ; simple_byte            4     3 (average)
 25388                           ; direct_byte            8     6 (fixed)
 25389                           ; jumptable            260     6 (fixed)
 25390                           ;	Chosen strategy is simple_byte
 25391  2CCB  0021               	movlb	1	; select bank1
 25392  2CCC  0837               	movf	(_menu_option_idx+1)^(0+128),w
 25393  2CCD  3A00               	xorlw	0	; case 0
 25394  2CCE  1903               	skipnz
 25395  2CCF  2CD1               	goto	l10807
 25396  2CD0  2CDF               	goto	l1010
 25397  2CD1                     l10807:	
 25398                           
 25399                           ; Switch size 1, requested type "space"
 25400                           ; Number of cases is 4, Range of values is 1 to 4
 25401                           ; switch strategies available:
 25402                           ; Name         Instructions Cycles
 25403                           ; simple_byte           13     7 (average)
 25404                           ; direct_byte           17     9 (fixed)
 25405                           ; jumptable            263     9 (fixed)
 25406                           ;	Chosen strategy is simple_byte
 25407  2CD1  0836               	movf	_menu_option_idx^(0+128),w
 25408  2CD2  3A01               	xorlw	1	; case 1
 25409  2CD3  1903               	skipnz
 25410  2CD4  2C97               	goto	l8447
 25411  2CD5  3A03               	xorlw	3	; case 2
 25412  2CD6  1903               	skipnz
 25413  2CD7  2CA4               	goto	l8451
 25414  2CD8  3A01               	xorlw	1	; case 3
 25415  2CD9  1903               	skipnz
 25416  2CDA  2CBE               	goto	l8459
 25417  2CDB  3A07               	xorlw	7	; case 4
 25418  2CDC  1903               	skipnz
 25419  2CDD  2CB1               	goto	l8455
 25420  2CDE  2CDF               	goto	l1010
 25421  2CDF                     l1010:	
 25422  2CDF  0008               	return
 25423  2CE0                     __end_of_menu_run_option:	
 25424                           
 25425                           	psect	text25
 25426  2C07                     __ptext25:	
 25427 ;; *************** function _menu_clear *****************
 25428 ;; Defined at:
 25429 ;;		line 206 in file "menu_task.c"
 25430 ;; Parameters:    Size  Location     Type
 25431 ;;  data            2   25[BANK0 ] PTR struct t_menu_taskDa
 25432 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 25433 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 25434 ;; Auto vars:     Size  Location     Type
 25435 ;;		None
 25436 ;; Return value:  Size  Location     Type
 25437 ;;                  1    wreg      void 
 25438 ;; Registers used:
 25439 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 25440 ;; Tracked objects:
 25441 ;;		On entry : 0/0
 25442 ;;		On exit  : 0/0
 25443 ;;		Unchanged: 0/0
 25444 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25445 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25446 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25447 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25448 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25449 ;;Total ram usage:        2 bytes
 25450 ;; Hardware stack levels used:    1
 25451 ;; Hardware stack levels required when called:   10
 25452 ;; This function calls:
 25453 ;;		_nullifyBadge_segDisplayErase
 25454 ;;		_nullifyBadge_userLedsClr
 25455 ;; This function is called by:
 25456 ;;		_menu_Main
 25457 ;;		_menu_run_option
 25458 ;; This function uses a non-reentrant model
 25459 ;;
 25460                           
 25461                           
 25462                           ;psect for function _menu_clear
 25463  2C07                     _menu_clear:	
 25464                           
 25465                           ;menu_task.c: 208: data->delayTickCount = 50;
 25466                           
 25467                           ;incstack = 0
 25468                           ; Regs used in _menu_clear: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 25469  2C07  0020               	movlb	0	; select bank0
 25470  2C08  0839               	movf	menu_clear@data,w
 25471  2C09  0086               	movwf	6
 25472  2C0A  083A               	movf	menu_clear@data+1,w
 25473  2C0B  0087               	movwf	7
 25474  2C0C  3142               	addfsr 1,2
 25475  2C0D  3032               	movlw	50
 25476  2C0E  3FC0               	movwi [0]fsr1
 25477  2C0F  3000               	movlw	0
 25478  2C10  3FC1               	movwi [1]fsr1
 25479                           
 25480                           ;menu_task.c: 209: data->holdCountA = 0;
 25481  2C11  0839               	movf	menu_clear@data,w
 25482  2C12  0086               	movwf	6
 25483  2C13  083A               	movf	menu_clear@data+1,w
 25484  2C14  0087               	movwf	7
 25485  2C15  3144               	addfsr 1,4
 25486  2C16  3000               	movlw	0
 25487  2C17  3FC0               	movwi [0]fsr1
 25488  2C18  3FC1               	movwi [1]fsr1
 25489                           
 25490                           ;menu_task.c: 210: data->holdCountB = 0;
 25491  2C19  0839               	movf	menu_clear@data,w
 25492  2C1A  0086               	movwf	6
 25493  2C1B  083A               	movf	menu_clear@data+1,w
 25494  2C1C  0087               	movwf	7
 25495  2C1D  3146               	addfsr 1,6
 25496  2C1E  3000               	movlw	0
 25497  2C1F  3FC0               	movwi [0]fsr1
 25498  2C20  3FC1               	movwi [1]fsr1
 25499                           
 25500                           ;menu_task.c: 211: data->holdCountX = 0;
 25501  2C21  0839               	movf	menu_clear@data,w
 25502  2C22  0086               	movwf	6
 25503  2C23  083A               	movf	menu_clear@data+1,w
 25504  2C24  0087               	movwf	7
 25505  2C25  3148               	addfsr 1,8
 25506  2C26  3000               	movlw	0
 25507  2C27  3FC0               	movwi [0]fsr1
 25508  2C28  3FC1               	movwi [1]fsr1
 25509                           
 25510                           ;menu_task.c: 212: data->holdCountY = 0;
 25511  2C29  0839               	movf	menu_clear@data,w
 25512  2C2A  0086               	movwf	6
 25513  2C2B  083A               	movf	menu_clear@data+1,w
 25514  2C2C  0087               	movwf	7
 25515  2C2D  314A               	addfsr 1,10
 25516  2C2E  3000               	movlw	0
 25517  2C2F  3FC0               	movwi [0]fsr1
 25518  2C30  3FC1               	movwi [1]fsr1
 25519                           
 25520                           ;menu_task.c: 213: data->noholdCount = 0;
 25521  2C31  0839               	movf	menu_clear@data,w
 25522  2C32  0086               	movwf	6
 25523  2C33  083A               	movf	menu_clear@data+1,w
 25524  2C34  0087               	movwf	7
 25525  2C35  314C               	addfsr 1,12
 25526  2C36  3000               	movlw	0
 25527  2C37  3FC0               	movwi [0]fsr1
 25528  2C38  3FC1               	movwi [1]fsr1
 25529                           
 25530                           ;menu_task.c: 215: menu_option_idx = 0;
 25531  2C39  0021               	movlb	1	; select bank1
 25532  2C3A  01B6               	clrf	_menu_option_idx^(0+128)
 25533  2C3B  01B7               	clrf	(_menu_option_idx+1)^(0+128)
 25534                           
 25535                           ;menu_task.c: 218: nullifyBadge_userLedsClr(data->badge);
 25536  2C3C  0020               	movlb	0	; select bank0
 25537  2C3D  0839               	movf	menu_clear@data,w
 25538  2C3E  0086               	movwf	6
 25539  2C3F  083A               	movf	menu_clear@data+1,w
 25540  2C40  0087               	movwf	7
 25541  2C41  0801               	movf	1,w
 25542  2C42  3187  27FA  31AC   	fcall	_nullifyBadge_userLedsClr
 25543                           
 25544                           ;menu_task.c: 219: nullifyBadge_segDisplayErase(data->badge);
 25545  2C45  0020               	movlb	0	; select bank0
 25546  2C46  0839               	movf	menu_clear@data,w
 25547  2C47  0086               	movwf	6
 25548  2C48  083A               	movf	menu_clear@data+1,w
 25549  2C49  0087               	movwf	7
 25550  2C4A  0801               	movf	1,w
 25551  2C4B  31B3  23D1         	fcall	_nullifyBadge_segDisplayErase
 25552  2C4D  0008               	return
 25553  2C4E                     __end_of_menu_clear:	
 25554                           
 25555                           	psect	text26
 25556  2ED9                     __ptext26:	
 25557 ;; *************** function _menu_display_option *****************
 25558 ;; Defined at:
 25559 ;;		line 166 in file "menu_task.c"
 25560 ;; Parameters:    Size  Location     Type
 25561 ;;  data            2   44[BANK0 ] PTR struct t_menu_taskDa
 25562 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 25563 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 25564 ;; Auto vars:     Size  Location     Type
 25565 ;;  led             2   48[BANK0 ] unsigned int 
 25566 ;;  size            2   46[BANK0 ] unsigned int 
 25567 ;; Return value:  Size  Location     Type
 25568 ;;                  1    wreg      void 
 25569 ;; Registers used:
 25570 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 25571 ;; Tracked objects:
 25572 ;;		On entry : 0/0
 25573 ;;		On exit  : 0/0
 25574 ;;		Unchanged: 0/0
 25575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25576 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25577 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25578 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25579 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25580 ;;Total ram usage:        6 bytes
 25581 ;; Hardware stack levels used:    1
 25582 ;; Hardware stack levels required when called:   10
 25583 ;; This function calls:
 25584 ;;		___lwmod
 25585 ;;		_marquee
 25586 ;;		_nullifyBadge_segDisplayForceUpdate
 25587 ;;		_nullifyBadge_segDisplayPutStr
 25588 ;;		_nullifyBadge_userLedsSet
 25589 ;; This function is called by:
 25590 ;;		_menu_Main
 25591 ;; This function uses a non-reentrant model
 25592 ;;
 25593                           
 25594                           
 25595                           ;psect for function _menu_display_option
 25596  2ED9                     _menu_display_option:	
 25597                           
 25598                           ;menu_task.c: 167: u16 size = sizeof(menu_options_leds)/sizeof(menu_options_leds[0]);
 25599                           
 25600                           ;incstack = 0
 25601                           ; Regs used in _menu_display_option: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 25602  2ED9  3005               	movlw	5
 25603  2EDA  0020               	movlb	0	; select bank0
 25604  2EDB  00CE               	movwf	menu_display_option@size
 25605  2EDC  3000               	movlw	0
 25606  2EDD  00CF               	movwf	menu_display_option@size+1
 25607                           
 25608                           ;menu_task.c: 168: u16 led = menu_options_leds[menu_option_idx % size];
 25609  2EDE  084F               	movf	menu_display_option@size+1,w
 25610  2EDF  00AC               	movwf	___lwmod@divisor+1
 25611  2EE0  084E               	movf	menu_display_option@size,w
 25612  2EE1  00AB               	movwf	___lwmod@divisor
 25613  2EE2  0021               	movlb	1	; select bank1
 25614  2EE3  0837               	movf	(_menu_option_idx+1)^(0+128),w
 25615  2EE4  0020               	movlb	0	; select bank0
 25616  2EE5  00AE               	movwf	___lwmod@dividend+1
 25617  2EE6  0021               	movlb	1	; select bank1
 25618  2EE7  0836               	movf	_menu_option_idx^(0+128),w
 25619  2EE8  0020               	movlb	0	; select bank0
 25620  2EE9  00AD               	movwf	___lwmod@dividend
 25621  2EEA  31B7  2772  31AE   	fcall	___lwmod
 25622  2EED  0020               	movlb	0	; select bank0
 25623  2EEE  082B               	movf	?___lwmod,w
 25624  2EEF  0709               	addwf	9,w
 25625  2EF0  3E20               	addlw	(low (_menu_options_leds| (0+512)))& (0+255)
 25626  2EF1  0086               	movwf	6
 25627  2EF2  3002               	movlw	2	; select bank4/5
 25628  2EF3  0087               	movwf	7
 25629  2EF4  3F40               	moviw [0]fsr1
 25630  2EF5  00D0               	movwf	menu_display_option@led
 25631  2EF6  3F41               	moviw [1]fsr1
 25632  2EF7  00D1               	movwf	menu_display_option@led+1
 25633                           
 25634                           ;menu_task.c: 174: nullifyBadge_userLedsSet(data->badge, led);
 25635  2EF8  0851               	movf	menu_display_option@led+1,w
 25636  2EF9  00AE               	movwf	nullifyBadge_userLedsSet@userLedData+1
 25637  2EFA  0850               	movf	menu_display_option@led,w
 25638  2EFB  00AD               	movwf	nullifyBadge_userLedsSet@userLedData
 25639  2EFC  084C               	movf	menu_display_option@data,w
 25640  2EFD  0086               	movwf	6
 25641  2EFE  084D               	movf	menu_display_option@data+1,w
 25642  2EFF  0087               	movwf	7
 25643  2F00  0801               	movf	1,w
 25644  2F01  31B4  24E6  31AE   	fcall	_nullifyBadge_userLedsSet
 25645                           
 25646                           ;menu_task.c: 176: if (menu_option_idx == 0){
 25647  2F04  0021               	movlb	1	; select bank1
 25648  2F05  0836               	movf	_menu_option_idx^(0+128),w
 25649  2F06  0437               	iorwf	(_menu_option_idx+1)^(0+128),w
 25650  2F07  1D03               	btfss	3,2
 25651  2F08  2F24               	goto	l8443
 25652                           
 25653                           ;menu_task.c: 177: nullifyBadge_segDisplayPutStr(data->badge, menu_option[menu_option_id
      +                          x]);
 25654  2F09  3536               	lslf	_menu_option_idx^(0+128),w
 25655  2F0A  3E2A               	addlw	(low (_menu_option| (0+512)))& (0+255)
 25656  2F0B  0086               	movwf	6
 25657  2F0C  3002               	movlw	2	; select bank4/5
 25658  2F0D  0087               	movwf	7
 25659  2F0E  3F40               	moviw [0]fsr1
 25660  2F0F  0020               	movlb	0	; select bank0
 25661  2F10  00B7               	movwf	nullifyBadge_segDisplayPutStr@str
 25662  2F11  3F41               	moviw [1]fsr1
 25663  2F12  00B8               	movwf	nullifyBadge_segDisplayPutStr@str+1
 25664  2F13  084C               	movf	menu_display_option@data,w
 25665  2F14  0086               	movwf	6
 25666  2F15  084D               	movf	menu_display_option@data+1,w
 25667  2F16  0087               	movwf	7
 25668  2F17  0801               	movf	1,w
 25669  2F18  31B4  240D  31AE   	fcall	_nullifyBadge_segDisplayPutStr
 25670                           
 25671                           ;menu_task.c: 178: nullifyBadge_segDisplayForceUpdate(data->badge);
 25672  2F1B  0020               	movlb	0	; select bank0
 25673  2F1C  084C               	movf	menu_display_option@data,w
 25674  2F1D  0086               	movwf	6
 25675  2F1E  084D               	movf	menu_display_option@data+1,w
 25676  2F1F  0087               	movwf	7
 25677  2F20  0801               	movf	1,w
 25678  2F21  31B3  23CB         	fcall	_nullifyBadge_segDisplayForceUpdate
 25679                           
 25680                           ;menu_task.c: 179: }
 25681  2F23  0008               	return
 25682  2F24                     l8443:	
 25683                           
 25684                           ;menu_task.c: 180: else {
 25685                           ;menu_task.c: 181: marquee(menu_option[menu_option_idx], data->noholdCount);
 25686  2F24  0021               	movlb	1	; select bank1
 25687  2F25  3536               	lslf	_menu_option_idx^(0+128),w
 25688  2F26  3E2A               	addlw	(low (_menu_option| (0+512)))& (0+255)
 25689  2F27  0086               	movwf	6
 25690  2F28  3002               	movlw	2	; select bank4/5
 25691  2F29  0087               	movwf	7
 25692  2F2A  3F40               	moviw [0]fsr1
 25693  2F2B  0020               	movlb	0	; select bank0
 25694  2F2C  00BA               	movwf	marquee@string
 25695  2F2D  3F41               	moviw [1]fsr1
 25696  2F2E  00BB               	movwf	marquee@string+1
 25697  2F2F  084C               	movf	menu_display_option@data,w
 25698  2F30  0086               	movwf	6
 25699  2F31  084D               	movf	menu_display_option@data+1,w
 25700  2F32  0087               	movwf	7
 25701  2F33  314C               	addfsr 1,12
 25702  2F34  3F40               	moviw [0]fsr1
 25703  2F35  00BC               	movwf	marquee@count
 25704  2F36  3F41               	moviw [1]fsr1
 25705  2F37  00BD               	movwf	marquee@count+1
 25706  2F38  31A1  21D2         	fcall	_marquee
 25707  2F3A  0008               	return
 25708  2F3B                     __end_of_menu_display_option:	
 25709                           
 25710                           	psect	text27
 25711  2488                     __ptext27:	
 25712 ;; *************** function _matrix_secret_check *****************
 25713 ;; Defined at:
 25714 ;;		line 93 in file "matrix_task.c"
 25715 ;; Parameters:    Size  Location     Type
 25716 ;;  data            2    7[COMMON] PTR struct t_matrix_task
 25717 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 25718 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 25719 ;;  buttonPresse    1    9[COMMON] unsigned char 
 25720 ;; Auto vars:     Size  Location     Type
 25721 ;;  i               2    8[BANK0 ] unsigned int 
 25722 ;;  hit_counter     6    0        unsigned char [6]
 25723 ;;  currents_siz    2    5[BANK0 ] unsigned int 
 25724 ;;  size            2    3[BANK0 ] unsigned int 
 25725 ;;  inputs          1    7[BANK0 ] PTR unsigned char 
 25726 ;;		 -> matrix_secret_inputs.inputs(20), matrix_secret_inputs(25), 
 25727 ;; Return value:  Size  Location     Type
 25728 ;;                  1    wreg      unsigned char 
 25729 ;; Registers used:
 25730 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 25731 ;; Tracked objects:
 25732 ;;		On entry : 0/0
 25733 ;;		On exit  : 0/0
 25734 ;;		Unchanged: 0/0
 25735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25736 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25737 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25738 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25739 ;;      Totals:         3      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25740 ;;Total ram usage:       13 bytes
 25741 ;; Hardware stack levels used:    1
 25742 ;; Hardware stack levels required when called:    5
 25743 ;; This function calls:
 25744 ;;		___bmul
 25745 ;;		_strlen
 25746 ;; This function is called by:
 25747 ;;		_matrix_Main
 25748 ;; This function uses a non-reentrant model
 25749 ;;
 25750                           
 25751                           
 25752                           ;psect for function _matrix_secret_check
 25753  2488                     _matrix_secret_check:	
 25754                           
 25755                           ;matrix_task.c: 94: u8 *inputs;
 25756                           ;matrix_task.c: 95: u16 size = sizeof(matrix_secret_inputs) / sizeof(matrix_secret_input
      +                          s[0]);
 25757                           
 25758                           ;incstack = 0
 25759                           ; Regs used in _matrix_secret_check: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 25760  2488  3001               	movlw	1
 25761  2489  0020               	movlb	0	; select bank0
 25762  248A  00A3               	movwf	matrix_secret_check@size
 25763  248B  3000               	movlw	0
 25764  248C  00A4               	movwf	matrix_secret_check@size+1
 25765                           
 25766                           ;matrix_task.c: 96: u16 currents_size;
 25767                           ;matrix_task.c: 97: char hit_counter[6];
 25768                           ;matrix_task.c: 99: for (u16 i = 0; i < size; i++){
 25769  248D  01A8               	clrf	matrix_secret_check@i
 25770  248E  01A9               	clrf	matrix_secret_check@i+1
 25771  248F                     l8749:	
 25772  248F  0824               	movf	matrix_secret_check@size+1,w
 25773  2490  0229               	subwf	matrix_secret_check@i+1,w
 25774  2491  1D03               	skipz
 25775  2492  2C95               	goto	u5405
 25776  2493  0823               	movf	matrix_secret_check@size,w
 25777  2494  0228               	subwf	matrix_secret_check@i,w
 25778  2495                     u5405:	
 25779  2495  1803               	btfsc	3,0
 25780  2496  2D41               	goto	l8751
 25781                           
 25782                           ;matrix_task.c: 100: inputs = matrix_secret_inputs[i].inputs;
 25783  2497  3019               	movlw	25
 25784  2498  00A0               	movwf	??_matrix_secret_check
 25785  2499  0820               	movf	??_matrix_secret_check,w
 25786  249A  00F1               	movwf	___bmul@multiplicand
 25787  249B  0828               	movf	matrix_secret_check@i,w
 25788  249C  31B4  24F7  31A4   	fcall	___bmul
 25789  249F  3E34               	addlw	(low (_matrix_secret_inputs| (0+512)))& (0+255)
 25790  24A0  0020               	movlb	0	; select bank0
 25791  24A1  00A1               	movwf	??_matrix_secret_check+1
 25792  24A2  0821               	movf	??_matrix_secret_check+1,w
 25793  24A3  00A7               	movwf	matrix_secret_check@inputs
 25794                           
 25795                           ;matrix_task.c: 102: if (buttonPressed == inputs[matrix_secret_inputs[i].idx]){
 25796  24A4  3019               	movlw	25
 25797  24A5  00A0               	movwf	??_matrix_secret_check
 25798  24A6  0820               	movf	??_matrix_secret_check,w
 25799  24A7  00F1               	movwf	___bmul@multiplicand
 25800  24A8  0828               	movf	matrix_secret_check@i,w
 25801  24A9  31B4  24F7  31A4   	fcall	___bmul
 25802  24AC  3E14               	addlw	20
 25803  24AD  3E34               	addlw	(low (_matrix_secret_inputs| (0+512)))& (0+255)
 25804  24AE  0086               	movwf	6
 25805  24AF  3002               	movlw	2	; select bank4/5
 25806  24B0  0087               	movwf	7
 25807  24B1  0801               	movf	1,w
 25808  24B2  0020               	movlb	0	; select bank0
 25809  24B3  0727               	addwf	matrix_secret_check@inputs,w
 25810  24B4  00A1               	movwf	??_matrix_secret_check+1
 25811  24B5  0821               	movf	??_matrix_secret_check+1,w
 25812  24B6  0086               	movwf	6
 25813  24B7  3002               	movlw	2	; select bank4/5
 25814  24B8  0087               	movwf	7
 25815  24B9  0801               	movf	1,w
 25816  24BA  0679               	xorwf	matrix_secret_check@buttonPressed,w
 25817  24BB  1D03               	skipz
 25818  24BC  2D2A               	goto	l8745
 25819                           
 25820                           ;matrix_task.c: 103: currents_size = strlen((const char *)inputs);
 25821  24BD  0827               	movf	matrix_secret_check@inputs,w
 25822  24BE  00F1               	movwf	strlen@s
 25823  24BF  3002               	movlw	2
 25824  24C0  00F2               	movwf	strlen@s+1
 25825  24C1  31B6  2680  31A4   	fcall	_strlen
 25826  24C4  0872               	movf	?_strlen+1,w
 25827  24C5  0020               	movlb	0	; select bank0
 25828  24C6  00A6               	movwf	matrix_secret_check@currents_size+1
 25829  24C7  0871               	movf	?_strlen,w
 25830  24C8  00A5               	movwf	matrix_secret_check@currents_size
 25831                           
 25832                           ;matrix_task.c: 104: matrix_secret_inputs[i].idx++;
 25833  24C9  3019               	movlw	25
 25834  24CA  00A0               	movwf	??_matrix_secret_check
 25835  24CB  0820               	movf	??_matrix_secret_check,w
 25836  24CC  00F1               	movwf	___bmul@multiplicand
 25837  24CD  0828               	movf	matrix_secret_check@i,w
 25838  24CE  31B4  24F7  31A4   	fcall	___bmul
 25839  24D1  3E14               	addlw	20
 25840  24D2  3E34               	addlw	(low (_matrix_secret_inputs| (0+512)))& (0+255)
 25841  24D3  0086               	movwf	6
 25842  24D4  3002               	movlw	2	; select bank4/5
 25843  24D5  0087               	movwf	7
 25844  24D6  3001               	movlw	1
 25845  24D7  0781               	addwf	1,f
 25846  24D8  3141               	addfsr 1,1
 25847  24D9  1803               	skipnc
 25848  24DA  0A81               	incf	1,f
 25849                           
 25850                           ;matrix_task.c: 106: if (matrix_secret_inputs[i].idx == currents_size) {
 25851  24DB  3019               	movlw	25
 25852  24DC  0020               	movlb	0	; select bank0
 25853  24DD  00A0               	movwf	??_matrix_secret_check
 25854  24DE  0820               	movf	??_matrix_secret_check,w
 25855  24DF  00F1               	movwf	___bmul@multiplicand
 25856  24E0  0828               	movf	matrix_secret_check@i,w
 25857  24E1  31B4  24F7  31A4   	fcall	___bmul
 25858  24E4  3E14               	addlw	20
 25859  24E5  3E34               	addlw	(low (_matrix_secret_inputs| (0+512)))& (0+255)
 25860  24E6  0086               	movwf	6
 25861  24E7  3002               	movlw	2	; select bank4/5
 25862  24E8  0087               	movwf	7
 25863  24E9  3F40               	moviw [0]fsr1
 25864  24EA  0020               	movlb	0	; select bank0
 25865  24EB  00A1               	movwf	??_matrix_secret_check+1
 25866  24EC  3F41               	moviw [1]fsr1
 25867  24ED  00A2               	movwf	??_matrix_secret_check+2
 25868  24EE  0826               	movf	matrix_secret_check@currents_size+1,w
 25869  24EF  0622               	xorwf	??_matrix_secret_check+2,w
 25870  24F0  1D03               	skipz
 25871  24F1  2CF4               	goto	u5395
 25872  24F2  0825               	movf	matrix_secret_check@currents_size,w
 25873  24F3  0621               	xorwf	??_matrix_secret_check+1,w
 25874  24F4                     u5395:	
 25875  24F4  1D03               	skipz
 25876  24F5  2D3B               	goto	l8747
 25877                           
 25878                           ;matrix_task.c: 108: matrix_secret_inputs[i].idx = 0;
 25879  24F6  3019               	movlw	25
 25880  24F7  00A0               	movwf	??_matrix_secret_check
 25881  24F8  0820               	movf	??_matrix_secret_check,w
 25882  24F9  00F1               	movwf	___bmul@multiplicand
 25883  24FA  0828               	movf	matrix_secret_check@i,w
 25884  24FB  31B4  24F7  31A4   	fcall	___bmul
 25885  24FE  3E14               	addlw	20
 25886  24FF  3E34               	addlw	(low (_matrix_secret_inputs| (0+512)))& (0+255)
 25887  2500  0086               	movwf	6
 25888  2501  3002               	movlw	2	; select bank4/5
 25889  2502  0087               	movwf	7
 25890  2503  3000               	movlw	0
 25891  2504  3FC0               	movwi [0]fsr1
 25892  2505  3FC1               	movwi [1]fsr1
 25893                           
 25894                           ;matrix_task.c: 111: *(matrix_secret_inputs[i].variable) = (u16) matrix_secret_inputs[i]
      +                          .value;
 25895  2506  3019               	movlw	25
 25896  2507  0020               	movlb	0	; select bank0
 25897  2508  00A0               	movwf	??_matrix_secret_check
 25898  2509  0820               	movf	??_matrix_secret_check,w
 25899  250A  00F1               	movwf	___bmul@multiplicand
 25900  250B  0828               	movf	matrix_secret_check@i,w
 25901  250C  31B4  24F7  31A4   	fcall	___bmul
 25902  250F  3E17               	addlw	23
 25903  2510  3E34               	addlw	(low (_matrix_secret_inputs| (0+512)))& (0+255)
 25904  2511  0086               	movwf	6
 25905  2512  3002               	movlw	2	; select bank4/5
 25906  2513  0087               	movwf	7
 25907  2514  3019               	movlw	25
 25908  2515  0020               	movlb	0	; select bank0
 25909  2516  00A1               	movwf	??_matrix_secret_check+1
 25910  2517  0821               	movf	??_matrix_secret_check+1,w
 25911  2518  00F1               	movwf	___bmul@multiplicand
 25912  2519  0828               	movf	matrix_secret_check@i,w
 25913  251A  31B4  24F7         	fcall	___bmul
 25914  251C  3E16               	addlw	22
 25915  251D  3E34               	addlw	(low (_matrix_secret_inputs| (0+512)))& (0+255)
 25916  251E  0084               	movwf	4
 25917  251F  3002               	movlw	2	; select bank4/5
 25918  2520  0085               	movwf	5
 25919  2521  0800               	movf	0,w
 25920  2522  0084               	movwf	4
 25921  2523  0185               	clrf	5
 25922  2524  3F40               	moviw [0]fsr1
 25923  2525  3F80               	movwi [0]fsr0
 25924  2526  3F41               	moviw [1]fsr1
 25925  2527  3F81               	movwi [1]fsr0
 25926                           
 25927                           ;matrix_task.c: 113: return 1;
 25928  2528  3001               	movlw	1
 25929  2529  0008               	return
 25930  252A                     l8745:	
 25931                           ;matrix_task.c: 114: }
 25932                           ;matrix_task.c: 115: } else {
 25933                           
 25934                           
 25935                           ;matrix_task.c: 117: matrix_secret_inputs[i].idx = 0;
 25936  252A  3019               	movlw	25
 25937  252B  0020               	movlb	0	; select bank0
 25938  252C  00A0               	movwf	??_matrix_secret_check
 25939  252D  0820               	movf	??_matrix_secret_check,w
 25940  252E  00F1               	movwf	___bmul@multiplicand
 25941  252F  0828               	movf	matrix_secret_check@i,w
 25942  2530  31B4  24F7  31A4   	fcall	___bmul
 25943  2533  3E14               	addlw	20
 25944  2534  3E34               	addlw	(low (_matrix_secret_inputs| (0+512)))& (0+255)
 25945  2535  0086               	movwf	6
 25946  2536  3002               	movlw	2	; select bank4/5
 25947  2537  0087               	movwf	7
 25948  2538  3000               	movlw	0
 25949  2539  3FC0               	movwi [0]fsr1
 25950  253A  3FC1               	movwi [1]fsr1
 25951  253B                     l8747:	
 25952  253B  3001               	movlw	1
 25953  253C  0020               	movlb	0	; select bank0
 25954  253D  07A8               	addwf	matrix_secret_check@i,f
 25955  253E  3000               	movlw	0
 25956  253F  3DA9               	addwfc	matrix_secret_check@i+1,f
 25957  2540  2C8F               	goto	l8749
 25958  2541                     l8751:	
 25959                           
 25960                           ;matrix_task.c: 118: }
 25961                           ;matrix_task.c: 119: }
 25962                           ;matrix_task.c: 120: return 0;
 25963  2541  3000               	movlw	0
 25964  2542  0008               	return
 25965  2543                     __end_of_matrix_secret_check:	
 25966                           
 25967                           	psect	text28
 25968  34F7                     __ptext28:	
 25969 ;; *************** function ___bmul *****************
 25970 ;; Defined at:
 25971 ;;		line 4 in file "/Applications/microchip/xc8/v1.42/sources/common/Umul8.c"
 25972 ;; Parameters:    Size  Location     Type
 25973 ;;  multiplier      1    wreg     unsigned char 
 25974 ;;  multiplicand    1    1[COMMON] unsigned char 
 25975 ;; Auto vars:     Size  Location     Type
 25976 ;;  multiplier      1    4[COMMON] unsigned char 
 25977 ;;  product         1    3[COMMON] unsigned char 
 25978 ;; Return value:  Size  Location     Type
 25979 ;;                  1    wreg      unsigned char 
 25980 ;; Registers used:
 25981 ;;		wreg, status,2, status,0
 25982 ;; Tracked objects:
 25983 ;;		On entry : 0/0
 25984 ;;		On exit  : 0/0
 25985 ;;		Unchanged: 0/0
 25986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25987 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25988 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25989 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25990 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25991 ;;Total ram usage:        4 bytes
 25992 ;; Hardware stack levels used:    1
 25993 ;; Hardware stack levels required when called:    4
 25994 ;; This function calls:
 25995 ;;		Nothing
 25996 ;; This function is called by:
 25997 ;;		_matrix_secret_check
 25998 ;;		_secret_check
 25999 ;; This function uses a non-reentrant model
 26000 ;;
 26001                           
 26002                           
 26003                           ;psect for function ___bmul
 26004  34F7                     ___bmul:	
 26005                           
 26006                           ;incstack = 0
 26007                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 26008                           ;___bmul@multiplier stored from wreg
 26009  34F7  00F4               	movwf	___bmul@multiplier
 26010  34F8  01F3               	clrf	___bmul@product
 26011  34F9                     l8337:	
 26012  34F9  1C74               	btfss	___bmul@multiplier,0
 26013  34FA  2CFF               	goto	l8341
 26014  34FB  0871               	movf	___bmul@multiplicand,w
 26015  34FC  00F2               	movwf	??___bmul
 26016  34FD  0872               	movf	??___bmul,w
 26017  34FE  07F3               	addwf	___bmul@product,f
 26018  34FF                     l8341:	
 26019  34FF  1003               	clrc
 26020  3500  0DF1               	rlf	___bmul@multiplicand,f
 26021  3501  1003               	clrc
 26022  3502  0CF4               	rrf	___bmul@multiplier,f
 26023  3503  0874               	movf	___bmul@multiplier,w
 26024  3504  1D03               	btfss	3,2
 26025  3505  2CF9               	goto	l8337
 26026  3506  0873               	movf	___bmul@product,w
 26027  3507  0008               	return
 26028  3508                     __end_of___bmul:	
 26029                           
 26030                           	psect	text29
 26031  23E5                     __ptext29:	
 26032 ;; *************** function _matrix_display_option *****************
 26033 ;; Defined at:
 26034 ;;		line 123 in file "matrix_task.c"
 26035 ;; Parameters:    Size  Location     Type
 26036 ;;  data            2   44[BANK0 ] PTR struct t_matrix_task
 26037 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 26038 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 26039 ;; Auto vars:     Size  Location     Type
 26040 ;;		None
 26041 ;; Return value:  Size  Location     Type
 26042 ;;                  1    wreg      void 
 26043 ;; Registers used:
 26044 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 26045 ;; Tracked objects:
 26046 ;;		On entry : 0/0
 26047 ;;		On exit  : 0/0
 26048 ;;		Unchanged: 0/0
 26049 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26050 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26051 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26052 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26053 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26054 ;;Total ram usage:        4 bytes
 26055 ;; Hardware stack levels used:    1
 26056 ;; Hardware stack levels required when called:   10
 26057 ;; This function calls:
 26058 ;;		_marquee_speedy
 26059 ;; This function is called by:
 26060 ;;		_matrix_Main
 26061 ;; This function uses a non-reentrant model
 26062 ;;
 26063                           
 26064                           
 26065                           ;psect for function _matrix_display_option
 26066  23E5                     _matrix_display_option:	
 26067                           
 26068                           ;matrix_task.c: 125: if(badge_locked ==1){
 26069                           
 26070                           ;incstack = 0
 26071                           ; Regs used in _matrix_display_option: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 26072  23E5  0021               	movlb	1	; select bank1
 26073  23E6  0344               	decf	_badge_locked^(0+128),w
 26074  23E7  1D03               	btfss	3,2
 26075  23E8  2C17               	goto	l8765
 26076                           
 26077                           ;matrix_task.c: 126: marquee_speedy("YOU ARE IN TOO DEEP     TAKE THE RED PILL    ", dat
      +                          a->noholdCount, 40);
 26078  23E9  302F               	movlw	low (STR_80| (0+32768))
 26079  23EA  0020               	movlb	0	; select bank0
 26080  23EB  00BA               	movwf	marquee_speedy@string
 26081  23EC  30B8               	movlw	high (STR_80| (0+32768))
 26082  23ED  00BB               	movwf	marquee_speedy@string+1
 26083  23EE  084C               	movf	matrix_display_option@data,w
 26084  23EF  0086               	movwf	6
 26085  23F0  084D               	movf	matrix_display_option@data+1,w
 26086  23F1  0087               	movwf	7
 26087  23F2  315D               	addfsr 1,29
 26088  23F3  3F40               	moviw [0]fsr1
 26089  23F4  00BC               	movwf	marquee_speedy@count
 26090  23F5  3F41               	moviw [1]fsr1
 26091  23F6  00BD               	movwf	marquee_speedy@count+1
 26092  23F7  3028               	movlw	40
 26093  23F8  00BE               	movwf	marquee_speedy@multiplier
 26094  23F9  3000               	movlw	0
 26095  23FA  00BF               	movwf	marquee_speedy@multiplier+1
 26096  23FB  31A1  215F         	fcall	_marquee_speedy
 26097                           
 26098                           ;matrix_task.c: 127: data->display_state = MATRIX_STATE_DISPLAY;
 26099  23FD  0020               	movlb	0	; select bank0
 26100  23FE  084C               	movf	matrix_display_option@data,w
 26101  23FF  3E02               	addlw	2
 26102  2400  00CE               	movwf	??_matrix_display_option
 26103  2401  3000               	movlw	0
 26104  2402  3D4D               	addwfc	matrix_display_option@data+1,w
 26105  2403  00CF               	movwf	??_matrix_display_option+1
 26106  2404  084E               	movf	??_matrix_display_option,w
 26107  2405  0086               	movwf	6
 26108  2406  084F               	movf	??_matrix_display_option+1,w
 26109  2407  0087               	movwf	7
 26110  2408  300A               	movlw	10
 26111  2409  0081               	movwf	1
 26112                           
 26113                           ;matrix_task.c: 128: data->martix_state = STILL_IN_MATRIX;
 26114  240A  084C               	movf	matrix_display_option@data,w
 26115  240B  3E01               	addlw	1
 26116  240C  00CE               	movwf	??_matrix_display_option
 26117  240D  3000               	movlw	0
 26118  240E  3D4D               	addwfc	matrix_display_option@data+1,w
 26119  240F  00CF               	movwf	??_matrix_display_option+1
 26120  2410  084E               	movf	??_matrix_display_option,w
 26121  2411  0086               	movwf	6
 26122  2412  084F               	movf	??_matrix_display_option+1,w
 26123  2413  0087               	movwf	7
 26124  2414  3001               	movlw	1
 26125  2415  0081               	movwf	1
 26126                           
 26127                           ;matrix_task.c: 129: return;
 26128  2416  0008               	return
 26129  2417                     l8765:	
 26130                           
 26131                           ;matrix_task.c: 130: }
 26132                           ;matrix_task.c: 132: if (data->display_state == MATRIX_DONE){
 26133  2417  0020               	movlb	0	; select bank0
 26134  2418  084C               	movf	matrix_display_option@data,w
 26135  2419  0086               	movwf	6
 26136  241A  084D               	movf	matrix_display_option@data+1,w
 26137  241B  0087               	movwf	7
 26138  241C  3142               	addfsr 1,2
 26139  241D  300B               	movlw	11
 26140  241E  0601               	xorwf	1,w
 26141  241F  1D03               	btfss	3,2
 26142  2420  2C30               	goto	l8769
 26143                           
 26144                           ;matrix_task.c: 133: marquee_speedy("YOU STAY IN WONDERLAND    ", data->noholdCount, 15)
      +                          ;
 26145  2421  308D               	movlw	low (STR_81| (0+32768))
 26146  2422  00BA               	movwf	marquee_speedy@string
 26147  2423  30B9               	movlw	high (STR_81| (0+32768))
 26148  2424  00BB               	movwf	marquee_speedy@string+1
 26149  2425  084C               	movf	matrix_display_option@data,w
 26150  2426  0086               	movwf	6
 26151  2427  084D               	movf	matrix_display_option@data+1,w
 26152  2428  0087               	movwf	7
 26153  2429  315D               	addfsr 1,29
 26154  242A  3F40               	moviw [0]fsr1
 26155  242B  00BC               	movwf	marquee_speedy@count
 26156  242C  3F41               	moviw [1]fsr1
 26157  242D  00BD               	movwf	marquee_speedy@count+1
 26158  242E  300F               	movlw	15
 26159  242F  2C62               	goto	L13
 26160  2430                     l8769:	
 26161                           ;matrix_task.c: 134: }
 26162                           
 26163                           
 26164                           ;matrix_task.c: 135: else if (data->display_state != MATRIX_STATE_DISPLAY ){
 26165  2430  0020               	movlb	0	; select bank0
 26166  2431  084C               	movf	matrix_display_option@data,w
 26167  2432  0086               	movwf	6
 26168  2433  084D               	movf	matrix_display_option@data+1,w
 26169  2434  0087               	movwf	7
 26170  2435  3142               	addfsr 1,2
 26171  2436  300A               	movlw	10
 26172  2437  0601               	xorwf	1,w
 26173  2438  1903               	btfsc	3,2
 26174  2439  2C53               	goto	l8773
 26175                           
 26176                           ;matrix_task.c: 137: marquee_speedy(matrix_option[data->display_state], data->noholdCoun
      +                          t, 20);
 26177  243A  084C               	movf	matrix_display_option@data,w
 26178  243B  0086               	movwf	6
 26179  243C  084D               	movf	matrix_display_option@data+1,w
 26180  243D  0087               	movwf	7
 26181  243E  3142               	addfsr 1,2
 26182  243F  3501               	lslf	1,w
 26183  2440  3ECA               	addlw	(low (_matrix_option| (0+512)))& (0+255)
 26184  2441  0086               	movwf	6
 26185  2442  3002               	movlw	2	; select bank5/6
 26186  2443  0087               	movwf	7
 26187  2444  3F40               	moviw [0]fsr1
 26188  2445  00BA               	movwf	marquee_speedy@string
 26189  2446  3F41               	moviw [1]fsr1
 26190  2447  00BB               	movwf	marquee_speedy@string+1
 26191  2448  084C               	movf	matrix_display_option@data,w
 26192  2449  0086               	movwf	6
 26193  244A  084D               	movf	matrix_display_option@data+1,w
 26194  244B  0087               	movwf	7
 26195  244C  315D               	addfsr 1,29
 26196  244D  3F40               	moviw [0]fsr1
 26197  244E  00BC               	movwf	marquee_speedy@count
 26198  244F  3F41               	moviw [1]fsr1
 26199  2450  00BD               	movwf	marquee_speedy@count+1
 26200  2451  3014               	movlw	20
 26201  2452  2C62               	goto	L13
 26202  2453                     l8773:	
 26203                           ;matrix_task.c: 138: }
 26204                           
 26205                           
 26206                           ;matrix_task.c: 139: else{
 26207                           ;matrix_task.c: 140: marquee_speedy("THE CHOICE IS YOURS   ", data->noholdCount, 30);
 26208  2453  30DD               	movlw	low (STR_82| (0+32768))
 26209  2454  0020               	movlb	0	; select bank0
 26210  2455  00BA               	movwf	marquee_speedy@string
 26211  2456  30B9               	movlw	high (STR_82| (0+32768))
 26212  2457  00BB               	movwf	marquee_speedy@string+1
 26213  2458  084C               	movf	matrix_display_option@data,w
 26214  2459  0086               	movwf	6
 26215  245A  084D               	movf	matrix_display_option@data+1,w
 26216  245B  0087               	movwf	7
 26217  245C  315D               	addfsr 1,29
 26218  245D  3F40               	moviw [0]fsr1
 26219  245E  00BC               	movwf	marquee_speedy@count
 26220  245F  3F41               	moviw [1]fsr1
 26221  2460  00BD               	movwf	marquee_speedy@count+1
 26222  2461  301E               	movlw	30
 26223  2462                     L13:	
 26224  2462  00BE               	movwf	marquee_speedy@multiplier
 26225  2463  3000               	movlw	0
 26226  2464  00BF               	movwf	marquee_speedy@multiplier+1
 26227  2465  31A1  215F  31A3   	fcall	_marquee_speedy
 26228                           
 26229                           ;matrix_task.c: 141: }
 26230                           ;matrix_task.c: 143: if (data -> displayTickdown == 0 && data->display_state != MATRIX_D
      +                          ONE ){
 26231  2468  0020               	movlb	0	; select bank0
 26232  2469  084C               	movf	matrix_display_option@data,w
 26233  246A  0086               	movwf	6
 26234  246B  084D               	movf	matrix_display_option@data+1,w
 26235  246C  0087               	movwf	7
 26236  246D  3147               	addfsr 1,7
 26237  246E  0016               	moviw fsr1++
 26238  246F  0401               	iorwf	1,w
 26239  2470  1D03               	btfss	3,2
 26240  2471  0008               	return
 26241  2472  084C               	movf	matrix_display_option@data,w
 26242  2473  0086               	movwf	6
 26243  2474  084D               	movf	matrix_display_option@data+1,w
 26244  2475  0087               	movwf	7
 26245  2476  3142               	addfsr 1,2
 26246  2477  300B               	movlw	11
 26247  2478  0601               	xorwf	1,w
 26248  2479  1903               	btfsc	3,2
 26249  247A  0008               	return
 26250                           
 26251                           ;matrix_task.c: 144: data->display_state = MATRIX_STATE_DISPLAY;
 26252  247B  084C               	movf	matrix_display_option@data,w
 26253  247C  3E02               	addlw	2
 26254  247D  00CE               	movwf	??_matrix_display_option
 26255  247E  3000               	movlw	0
 26256  247F  3D4D               	addwfc	matrix_display_option@data+1,w
 26257  2480  00CF               	movwf	??_matrix_display_option+1
 26258  2481  084E               	movf	??_matrix_display_option,w
 26259  2482  0086               	movwf	6
 26260  2483  084F               	movf	??_matrix_display_option+1,w
 26261  2484  0087               	movwf	7
 26262  2485  300A               	movlw	10
 26263  2486  0081               	movwf	1
 26264  2487  0008               	return
 26265  2488                     __end_of_matrix_display_option:	
 26266                           
 26267                           	psect	text30
 26268  2D80                     __ptext30:	
 26269 ;; *************** function _slot_Setup *****************
 26270 ;; Defined at:
 26271 ;;		line 48 in file "slot_task.c"
 26272 ;; Parameters:    Size  Location     Type
 26273 ;;  taskData        2   15[BANK0 ] PTR void 
 26274 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 26275 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 26276 ;; Auto vars:     Size  Location     Type
 26277 ;;  data            2   20[BANK0 ] PTR struct t_slot_taskDa
 26278 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 26279 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 26280 ;; Return value:  Size  Location     Type
 26281 ;;                  1    wreg      void 
 26282 ;; Registers used:
 26283 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 26284 ;; Tracked objects:
 26285 ;;		On entry : 0/0
 26286 ;;		On exit  : 0/0
 26287 ;;		Unchanged: 0/0
 26288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26289 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26290 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26291 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26292 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26293 ;;Total ram usage:        7 bytes
 26294 ;; Hardware stack levels used:    1
 26295 ;; Hardware stack levels required when called:    6
 26296 ;; This function calls:
 26297 ;;		___lwmod
 26298 ;;		_memset
 26299 ;;		_rand
 26300 ;; This function is called by:
 26301 ;;		_menu_Main
 26302 ;;		_locked_Main
 26303 ;;		_slot_Init
 26304 ;;		_slot_Main
 26305 ;; This function uses a non-reentrant model
 26306 ;;
 26307                           
 26308                           
 26309                           ;psect for function _slot_Setup
 26310  2D80                     _slot_Setup:	
 26311                           
 26312                           ;slot_task.c: 49: struct t_slot_taskData *data = (struct t_slot_taskData *) taskData;
 26313                           
 26314                           ;incstack = 0
 26315                           ; Regs used in _slot_Setup: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 26316  2D80  0020               	movlb	0	; select bank0
 26317  2D81  0830               	movf	slot_Setup@taskData+1,w
 26318  2D82  00B5               	movwf	slot_Setup@data+1
 26319  2D83  082F               	movf	slot_Setup@taskData,w
 26320  2D84  00B4               	movwf	slot_Setup@data
 26321                           
 26322                           ;slot_task.c: 50: slot_taskData = data;
 26323  2D85  0835               	movf	slot_Setup@data+1,w
 26324  2D86  0021               	movlb	1	; select bank1
 26325  2D87  00BD               	movwf	(_slot_taskData+1)^(0+128)
 26326  2D88  0020               	movlb	0	; select bank0
 26327  2D89  0834               	movf	slot_Setup@data,w
 26328  2D8A  0021               	movlb	1	; select bank1
 26329  2D8B  00BC               	movwf	_slot_taskData^(0+128)
 26330                           
 26331                           ;slot_task.c: 51: data->displayTickCount = 0;
 26332  2D8C  0020               	movlb	0	; select bank0
 26333  2D8D  0834               	movf	slot_Setup@data,w
 26334  2D8E  0086               	movwf	6
 26335  2D8F  0835               	movf	slot_Setup@data+1,w
 26336  2D90  0087               	movwf	7
 26337  2D91  3143               	addfsr 1,3
 26338  2D92  3000               	movlw	0
 26339  2D93  3FC0               	movwi [0]fsr1
 26340  2D94  3FC1               	movwi [1]fsr1
 26341                           
 26342                           ;slot_task.c: 52: data->delayTickCount = 0;
 26343  2D95  0834               	movf	slot_Setup@data,w
 26344  2D96  0086               	movwf	6
 26345  2D97  0835               	movf	slot_Setup@data+1,w
 26346  2D98  0087               	movwf	7
 26347  2D99  3145               	addfsr 1,5
 26348  2D9A  3000               	movlw	0
 26349  2D9B  3FC0               	movwi [0]fsr1
 26350  2D9C  3FC1               	movwi [1]fsr1
 26351                           
 26352                           ;slot_task.c: 53: memset(data->slot_print_buf, 0x00, 20);
 26353  2D9D  0834               	movf	slot_Setup@data,w
 26354  2D9E  3E0B               	addlw	11
 26355  2D9F  00F1               	movwf	memset@p1
 26356  2DA0  3000               	movlw	0
 26357  2DA1  3D35               	addwfc	slot_Setup@data+1,w
 26358  2DA2  00F2               	movwf	memset@p1+1
 26359  2DA3  3000               	movlw	0
 26360  2DA4  00F3               	movwf	memset@c
 26361  2DA5  00F4               	movwf	memset@c+1
 26362  2DA6  3014               	movlw	20
 26363  2DA7  00F5               	movwf	memset@n
 26364  2DA8  3000               	movlw	0
 26365  2DA9  00F6               	movwf	memset@n+1
 26366  2DAA  31B5  25C1  31AD   	fcall	_memset
 26367                           
 26368                           ;slot_task.c: 54: if (!badge_locked) {
 26369  2DAD  0021               	movlb	1	; select bank1
 26370  2DAE  0844               	movf	_badge_locked^(0+128),w
 26371  2DAF  1D03               	btfss	3,2
 26372  2DB0  2DC9               	goto	l8429
 26373                           
 26374                           ;slot_task.c: 55: Shot_Index = (u8)rand() % (sizeof(Shot_Options)/sizeof(Shot_Options[0]
      +                          ));
 26375  2DB1  3009               	movlw	9
 26376  2DB2  0020               	movlb	0	; select bank0
 26377  2DB3  00AB               	movwf	___lwmod@divisor
 26378  2DB4  3000               	movlw	0
 26379  2DB5  00AC               	movwf	___lwmod@divisor+1
 26380  2DB6  31AB  2338  31AD   	fcall	_rand
 26381  2DB9  0020               	movlb	0	; select bank0
 26382  2DBA  0824               	movf	?_rand,w
 26383  2DBB  00B1               	movwf	??_slot_Setup
 26384  2DBC  01B2               	clrf	??_slot_Setup+1
 26385  2DBD  0831               	movf	??_slot_Setup,w
 26386  2DBE  00AD               	movwf	___lwmod@dividend
 26387  2DBF  0832               	movf	??_slot_Setup+1,w
 26388  2DC0  00AE               	movwf	___lwmod@dividend+1
 26389  2DC1  31B7  2772  31AD   	fcall	___lwmod
 26390  2DC4  0020               	movlb	0	; select bank0
 26391  2DC5  082B               	movf	?___lwmod,w
 26392  2DC6  00B3               	movwf	??_slot_Setup+2
 26393  2DC7  0833               	movf	??_slot_Setup+2,w
 26394  2DC8  2DCD               	goto	L14
 26395  2DC9                     l8429:	
 26396                           ;slot_task.c: 56: }
 26397                           
 26398                           
 26399                           ;slot_task.c: 57: else {
 26400                           ;slot_task.c: 58: Shot_Index = ((sizeof(Shot_Options)/sizeof(Shot_Options[0]))-1);
 26401  2DC9  3008               	movlw	8
 26402  2DCA  0020               	movlb	0	; select bank0
 26403  2DCB  00B1               	movwf	??_slot_Setup
 26404  2DCC  0831               	movf	??_slot_Setup,w
 26405  2DCD                     L14:	
 26406  2DCD  00FC               	movwf	_Shot_Index
 26407                           
 26408                           ;slot_task.c: 59: }
 26409                           ;slot_task.c: 61: Leds_idx = 1;
 26410  2DCE  3001               	movlw	1
 26411  2DCF  0021               	movlb	1	; select bank1
 26412  2DD0  00D7               	movwf	_Leds_idx^(0+128)
 26413  2DD1  3000               	movlw	0
 26414  2DD2  00D8               	movwf	(_Leds_idx^(0+128)+1)
 26415  2DD3  0008               	return
 26416  2DD4                     __end_of_slot_Setup:	
 26417                           
 26418                           	psect	text31
 26419  351A                     __ptext31:	
 26420 ;; *************** function _locked_unlock_leds *****************
 26421 ;; Defined at:
 26422 ;;		line 37 in file "locked_task.c"
 26423 ;; Parameters:    Size  Location     Type
 26424 ;;		None
 26425 ;; Auto vars:     Size  Location     Type
 26426 ;;		None
 26427 ;; Return value:  Size  Location     Type
 26428 ;;                  2  1237[None  ] unsigned int 
 26429 ;; Registers used:
 26430 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 26431 ;; Tracked objects:
 26432 ;;		On entry : 0/0
 26433 ;;		On exit  : 0/0
 26434 ;;		Unchanged: 0/0
 26435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26437 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26438 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26439 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26440 ;;Total ram usage:        2 bytes
 26441 ;; Hardware stack levels used:    1
 26442 ;; Hardware stack levels required when called:    4
 26443 ;; This function calls:
 26444 ;;		Nothing
 26445 ;; This function is called by:
 26446 ;;		_locked_Main
 26447 ;; This function uses a non-reentrant model
 26448 ;;
 26449                           
 26450                           
 26451                           ;psect for function _locked_unlock_leds
 26452  351A                     _locked_unlock_leds:	
 26453                           
 26454                           ;locked_task.c: 38: locked_locking_leds_idx = 0;
 26455                           
 26456                           ;incstack = 0
 26457                           ; Regs used in _locked_unlock_leds: [wreg+fsr1l+fsr1h+status,2+status,0]
 26458  351A  0021               	movlb	1	; select bank1
 26459  351B  01A4               	clrf	_locked_locking_leds_idx^(0+128)
 26460  351C  01A5               	clrf	(_locked_locking_leds_idx+1)^(0+128)
 26461                           
 26462                           ;locked_task.c: 39: locked_leds = locked_lock_base_leds | locked_locking_leds[locked_loc
      +                          king_leds_idx];
 26463  351D  3524               	lslf	_locked_locking_leds_idx^(0+128),w
 26464  351E  3EC7               	addlw	(low (_locked_locking_leds| 0))& (0+255)
 26465  351F  0086               	movwf	6
 26466  3520  0187               	clrf	7
 26467  3521  3F40               	moviw [0]fsr1
 26468  3522  00F1               	movwf	??_locked_unlock_leds
 26469  3523  3F41               	moviw [1]fsr1
 26470  3524  00F2               	movwf	??_locked_unlock_leds+1
 26471  3525  0859               	movf	_locked_lock_base_leds^(0+128),w
 26472  3526  0471               	iorwf	??_locked_unlock_leds,w
 26473  3527  00A2               	movwf	_locked_leds^(0+128)
 26474  3528  085A               	movf	(_locked_lock_base_leds+1)^(0+128),w
 26475  3529  0472               	iorwf	??_locked_unlock_leds+1,w
 26476  352A  00A3               	movwf	(_locked_leds+1)^(0+128)
 26477  352B  0008               	return
 26478  352C                     __end_of_locked_unlock_leds:	
 26479                           ;locked_task.c: 40: return locked_leds;
 26480                           ;	Return value of _locked_unlock_leds is never used
 26481                           
 26482                           
 26483                           	psect	text32
 26484  35D9                     __ptext32:	
 26485 ;; *************** function _locked_lock_leds *****************
 26486 ;; Defined at:
 26487 ;;		line 29 in file "locked_task.c"
 26488 ;; Parameters:    Size  Location     Type
 26489 ;;		None
 26490 ;; Auto vars:     Size  Location     Type
 26491 ;;  size            2    3[COMMON] unsigned int 
 26492 ;; Return value:  Size  Location     Type
 26493 ;;                  2  1234[None  ] unsigned int 
 26494 ;; Registers used:
 26495 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 26496 ;; Tracked objects:
 26497 ;;		On entry : 0/0
 26498 ;;		On exit  : 0/0
 26499 ;;		Unchanged: 0/0
 26500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26502 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26503 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26504 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26505 ;;Total ram usage:        4 bytes
 26506 ;; Hardware stack levels used:    1
 26507 ;; Hardware stack levels required when called:    4
 26508 ;; This function calls:
 26509 ;;		Nothing
 26510 ;; This function is called by:
 26511 ;;		_locked_Init
 26512 ;;		_locked_Main
 26513 ;; This function uses a non-reentrant model
 26514 ;;
 26515                           
 26516                           
 26517                           ;psect for function _locked_lock_leds
 26518  35D9                     _locked_lock_leds:	
 26519                           
 26520                           ;locked_task.c: 30: u16 size = sizeof(locked_locking_leds) / sizeof(locked_locking_leds[
      +                          0]);
 26521                           
 26522                           ;incstack = 0
 26523                           ; Regs used in _locked_lock_leds: [wreg+fsr1l+fsr1h+status,2+status,0]
 26524  35D9  3006               	movlw	6
 26525  35DA  00F3               	movwf	locked_lock_leds@size
 26526  35DB  3000               	movlw	0
 26527  35DC  00F4               	movwf	locked_lock_leds@size+1
 26528                           
 26529                           ;locked_task.c: 31: locked_locking_leds_idx = size - 1;
 26530  35DD  0873               	movf	locked_lock_leds@size,w
 26531  35DE  3EFF               	addlw	255
 26532  35DF  0021               	movlb	1	; select bank1
 26533  35E0  00A4               	movwf	_locked_locking_leds_idx^(0+128)
 26534  35E1  30FF               	movlw	255
 26535  35E2  3D74               	addwfc	locked_lock_leds@size+1,w
 26536  35E3  00A5               	movwf	(_locked_locking_leds_idx+1)^(0+128)
 26537                           
 26538                           ;locked_task.c: 32: locked_leds = locked_lock_base_leds | locked_locking_leds[locked_loc
      +                          king_leds_idx];
 26539  35E4  3524               	lslf	_locked_locking_leds_idx^(0+128),w
 26540  35E5  3EC7               	addlw	(low (_locked_locking_leds| 0))& (0+255)
 26541  35E6  0086               	movwf	6
 26542  35E7  0187               	clrf	7
 26543  35E8  3F40               	moviw [0]fsr1
 26544  35E9  00F1               	movwf	??_locked_lock_leds
 26545  35EA  3F41               	moviw [1]fsr1
 26546  35EB  00F2               	movwf	??_locked_lock_leds+1
 26547  35EC  0859               	movf	_locked_lock_base_leds^(0+128),w
 26548  35ED  0471               	iorwf	??_locked_lock_leds,w
 26549  35EE  00A2               	movwf	_locked_leds^(0+128)
 26550  35EF  085A               	movf	(_locked_lock_base_leds+1)^(0+128),w
 26551  35F0  0472               	iorwf	??_locked_lock_leds+1,w
 26552  35F1  00A3               	movwf	(_locked_leds+1)^(0+128)
 26553  35F2  0008               	return
 26554  35F3                     __end_of_locked_lock_leds:	
 26555                           ;locked_task.c: 33: return locked_leds;
 26556                           ;	Return value of _locked_lock_leds is never used
 26557                           
 26558                           
 26559                           	psect	text33
 26560  0801                     __ptext33:	
 26561 ;; *************** function _locked_get_unlock_leds *****************
 26562 ;; Defined at:
 26563 ;;		line 54 in file "locked_task.c"
 26564 ;; Parameters:    Size  Location     Type
 26565 ;;		None
 26566 ;; Auto vars:     Size  Location     Type
 26567 ;;  leds            2    3[COMMON] unsigned int 
 26568 ;; Return value:  Size  Location     Type
 26569 ;;                  2    1[COMMON] unsigned int 
 26570 ;; Registers used:
 26571 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 26572 ;; Tracked objects:
 26573 ;;		On entry : 0/0
 26574 ;;		On exit  : 0/0
 26575 ;;		Unchanged: 0/0
 26576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26577 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26578 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26579 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26580 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26581 ;;Total ram usage:        4 bytes
 26582 ;; Hardware stack levels used:    1
 26583 ;; Hardware stack levels required when called:    4
 26584 ;; This function calls:
 26585 ;;		Nothing
 26586 ;; This function is called by:
 26587 ;;		_locked_Main
 26588 ;; This function uses a non-reentrant model
 26589 ;;
 26590                           
 26591                           
 26592                           ;psect for function _locked_get_unlock_leds
 26593  0801                     _locked_get_unlock_leds:	
 26594                           
 26595                           ;locked_task.c: 55: u16 leds = locked_locking_leds[locked_locking_leds_idx];
 26596                           
 26597                           ;incstack = 0
 26598                           ; Regs used in _locked_get_unlock_leds: [wreg+fsr1l+fsr1h+status,2+status,0]
 26599  0801  0021               	movlb	1	; select bank1
 26600  0802  3524               	lslf	_locked_locking_leds_idx^(0+128),w
 26601  0803  3EC7               	addlw	(low (_locked_locking_leds| 0))& (0+255)
 26602  0804  0086               	movwf	6
 26603  0805  0187               	clrf	7
 26604  0806  3F40               	moviw [0]fsr1
 26605  0807  00F3               	movwf	locked_get_unlock_leds@leds
 26606  0808  3F41               	moviw [1]fsr1
 26607  0809  00F4               	movwf	locked_get_unlock_leds@leds+1
 26608                           
 26609                           ;locked_task.c: 58: if (locked_locking_leds_idx > 0){
 26610  080A  0824               	movf	_locked_locking_leds_idx^(0+128),w
 26611  080B  0425               	iorwf	(_locked_locking_leds_idx+1)^(0+128),w
 26612  080C  1903               	btfsc	3,2
 26613  080D  2812               	goto	l1245
 26614                           
 26615                           ;locked_task.c: 59: locked_locking_leds_idx -= 1;
 26616  080E  3001               	movlw	1
 26617  080F  02A4               	subwf	_locked_locking_leds_idx^(0+128),f
 26618  0810  3000               	movlw	0
 26619  0811  3BA5               	subwfb	(_locked_locking_leds_idx+1)^(0+128),f
 26620  0812                     l1245:	
 26621                           
 26622                           ;locked_task.c: 60: }
 26623                           ;locked_task.c: 61: return locked_lock_base_leds | leds;
 26624  0812  0873               	movf	locked_get_unlock_leds@leds,w
 26625  0813  0459               	iorwf	_locked_lock_base_leds^(0+128),w
 26626  0814  00F1               	movwf	?_locked_get_unlock_leds
 26627  0815  0874               	movf	locked_get_unlock_leds@leds+1,w
 26628  0816  045A               	iorwf	(_locked_lock_base_leds+1)^(0+128),w
 26629  0817  00F2               	movwf	?_locked_get_unlock_leds+1
 26630  0818  0008               	return
 26631  0819                     __end_of_locked_get_unlock_leds:	
 26632                           
 26633                           	psect	text34
 26634  36FE                     __ptext34:	
 26635 ;; *************** function _locked_get_lock_leds *****************
 26636 ;; Defined at:
 26637 ;;		line 43 in file "locked_task.c"
 26638 ;; Parameters:    Size  Location     Type
 26639 ;;		None
 26640 ;; Auto vars:     Size  Location     Type
 26641 ;;  leds            2    7[COMMON] unsigned int 
 26642 ;;  size            2    5[COMMON] unsigned int 
 26643 ;; Return value:  Size  Location     Type
 26644 ;;                  2    1[COMMON] unsigned int 
 26645 ;; Registers used:
 26646 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 26647 ;; Tracked objects:
 26648 ;;		On entry : 0/0
 26649 ;;		On exit  : 0/0
 26650 ;;		Unchanged: 0/0
 26651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26652 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26653 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26654 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26655 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26656 ;;Total ram usage:        8 bytes
 26657 ;; Hardware stack levels used:    1
 26658 ;; Hardware stack levels required when called:    4
 26659 ;; This function calls:
 26660 ;;		Nothing
 26661 ;; This function is called by:
 26662 ;;		_locked_Main
 26663 ;; This function uses a non-reentrant model
 26664 ;;
 26665                           
 26666                           
 26667                           ;psect for function _locked_get_lock_leds
 26668  36FE                     _locked_get_lock_leds:	
 26669                           
 26670                           ;locked_task.c: 44: u16 size = sizeof(locked_locking_leds) / sizeof(locked_locking_leds[
      +                          0]);
 26671                           
 26672                           ;incstack = 0
 26673                           ; Regs used in _locked_get_lock_leds: [wreg+fsr1l+fsr1h+status,2+status,0]
 26674  36FE  3006               	movlw	6
 26675  36FF  00F5               	movwf	locked_get_lock_leds@size
 26676  3700  3000               	movlw	0
 26677  3701  00F6               	movwf	locked_get_lock_leds@size+1
 26678                           
 26679                           ;locked_task.c: 45: u16 leds = locked_locking_leds[locked_locking_leds_idx];
 26680  3702  0021               	movlb	1	; select bank1
 26681  3703  3524               	lslf	_locked_locking_leds_idx^(0+128),w
 26682  3704  3EC7               	addlw	(low (_locked_locking_leds| 0))& (0+255)
 26683  3705  0086               	movwf	6
 26684  3706  0187               	clrf	7
 26685  3707  3F40               	moviw [0]fsr1
 26686  3708  00F7               	movwf	locked_get_lock_leds@leds
 26687  3709  3F41               	moviw [1]fsr1
 26688  370A  00F8               	movwf	locked_get_lock_leds@leds+1
 26689                           
 26690                           ;locked_task.c: 48: if (locked_locking_leds_idx < size - 1){
 26691  370B  0875               	movf	locked_get_lock_leds@size,w
 26692  370C  3EFF               	addlw	255
 26693  370D  00F3               	movwf	??_locked_get_lock_leds
 26694  370E  30FF               	movlw	255
 26695  370F  3D76               	addwfc	locked_get_lock_leds@size+1,w
 26696  3710  00F4               	movwf	??_locked_get_lock_leds+1
 26697  3711  0874               	movf	??_locked_get_lock_leds+1,w
 26698  3712  0225               	subwf	(_locked_locking_leds_idx+1)^(0+128),w
 26699  3713  1D03               	skipz
 26700  3714  2F17               	goto	u5295
 26701  3715  0873               	movf	??_locked_get_lock_leds,w
 26702  3716  0224               	subwf	_locked_locking_leds_idx^(0+128),w
 26703  3717                     u5295:	
 26704  3717  1803               	skipnc
 26705  3718  2F1D               	goto	l1241
 26706                           
 26707                           ;locked_task.c: 49: locked_locking_leds_idx += 1;
 26708  3719  3001               	movlw	1
 26709  371A  07A4               	addwf	_locked_locking_leds_idx^(0+128),f
 26710  371B  3000               	movlw	0
 26711  371C  3DA5               	addwfc	(_locked_locking_leds_idx+1)^(0+128),f
 26712  371D                     l1241:	
 26713                           
 26714                           ;locked_task.c: 50: }
 26715                           ;locked_task.c: 51: return leds;
 26716  371D  0878               	movf	locked_get_lock_leds@leds+1,w
 26717  371E  00F2               	movwf	?_locked_get_lock_leds+1
 26718  371F  0877               	movf	locked_get_lock_leds@leds,w
 26719  3720  00F1               	movwf	?_locked_get_lock_leds
 26720  3721  0008               	return
 26721  3722                     __end_of_locked_get_lock_leds:	
 26722                           
 26723                           	psect	text35
 26724  2AF6                     __ptext35:	
 26725 ;; *************** function _locked_clear *****************
 26726 ;; Defined at:
 26727 ;;		line 186 in file "locked_task.c"
 26728 ;; Parameters:    Size  Location     Type
 26729 ;;  data            2   25[BANK0 ] PTR struct t_locked_task
 26730 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 26731 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 26732 ;; Auto vars:     Size  Location     Type
 26733 ;;		None
 26734 ;; Return value:  Size  Location     Type
 26735 ;;                  1    wreg      void 
 26736 ;; Registers used:
 26737 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 26738 ;; Tracked objects:
 26739 ;;		On entry : 0/0
 26740 ;;		On exit  : 0/0
 26741 ;;		Unchanged: 0/0
 26742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26743 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26744 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26745 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26746 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26747 ;;Total ram usage:        2 bytes
 26748 ;; Hardware stack levels used:    1
 26749 ;; Hardware stack levels required when called:   10
 26750 ;; This function calls:
 26751 ;;		_nullifyBadge_segDisplayErase
 26752 ;;		_nullifyBadge_userLedsClr
 26753 ;; This function is called by:
 26754 ;;		_locked_Main
 26755 ;; This function uses a non-reentrant model
 26756 ;;
 26757                           
 26758                           
 26759                           ;psect for function _locked_clear
 26760  2AF6                     _locked_clear:	
 26761                           
 26762                           ;locked_task.c: 188: data->delayTickCount = 0;
 26763                           
 26764                           ;incstack = 0
 26765                           ; Regs used in _locked_clear: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 26766  2AF6  0020               	movlb	0	; select bank0
 26767  2AF7  0839               	movf	locked_clear@data,w
 26768  2AF8  0086               	movwf	6
 26769  2AF9  083A               	movf	locked_clear@data+1,w
 26770  2AFA  0087               	movwf	7
 26771  2AFB  3141               	addfsr 1,1
 26772  2AFC  3000               	movlw	0
 26773  2AFD  3FC0               	movwi [0]fsr1
 26774  2AFE  3FC1               	movwi [1]fsr1
 26775                           
 26776                           ;locked_task.c: 189: data->holdCountA = 0;
 26777  2AFF  0839               	movf	locked_clear@data,w
 26778  2B00  0086               	movwf	6
 26779  2B01  083A               	movf	locked_clear@data+1,w
 26780  2B02  0087               	movwf	7
 26781  2B03  3143               	addfsr 1,3
 26782  2B04  3000               	movlw	0
 26783  2B05  3FC0               	movwi [0]fsr1
 26784  2B06  3FC1               	movwi [1]fsr1
 26785                           
 26786                           ;locked_task.c: 190: data->holdCountB = 0;
 26787  2B07  0839               	movf	locked_clear@data,w
 26788  2B08  0086               	movwf	6
 26789  2B09  083A               	movf	locked_clear@data+1,w
 26790  2B0A  0087               	movwf	7
 26791  2B0B  3145               	addfsr 1,5
 26792  2B0C  3000               	movlw	0
 26793  2B0D  3FC0               	movwi [0]fsr1
 26794  2B0E  3FC1               	movwi [1]fsr1
 26795                           
 26796                           ;locked_task.c: 191: data->holdCountX = 0;
 26797  2B0F  0839               	movf	locked_clear@data,w
 26798  2B10  0086               	movwf	6
 26799  2B11  083A               	movf	locked_clear@data+1,w
 26800  2B12  0087               	movwf	7
 26801  2B13  3147               	addfsr 1,7
 26802  2B14  3000               	movlw	0
 26803  2B15  3FC0               	movwi [0]fsr1
 26804  2B16  3FC1               	movwi [1]fsr1
 26805                           
 26806                           ;locked_task.c: 192: data->holdCountY = 0;
 26807  2B17  0839               	movf	locked_clear@data,w
 26808  2B18  0086               	movwf	6
 26809  2B19  083A               	movf	locked_clear@data+1,w
 26810  2B1A  0087               	movwf	7
 26811  2B1B  3149               	addfsr 1,9
 26812  2B1C  3000               	movlw	0
 26813  2B1D  3FC0               	movwi [0]fsr1
 26814  2B1E  3FC1               	movwi [1]fsr1
 26815                           
 26816                           ;locked_task.c: 193: data->noholdCount = 0;
 26817  2B1F  0839               	movf	locked_clear@data,w
 26818  2B20  0086               	movwf	6
 26819  2B21  083A               	movf	locked_clear@data+1,w
 26820  2B22  0087               	movwf	7
 26821  2B23  314B               	addfsr 1,11
 26822  2B24  3000               	movlw	0
 26823  2B25  3FC0               	movwi [0]fsr1
 26824  2B26  3FC1               	movwi [1]fsr1
 26825                           
 26826                           ;locked_task.c: 196: nullifyBadge_userLedsClr(data->badge);
 26827  2B27  0839               	movf	locked_clear@data,w
 26828  2B28  0086               	movwf	6
 26829  2B29  083A               	movf	locked_clear@data+1,w
 26830  2B2A  0087               	movwf	7
 26831  2B2B  0801               	movf	1,w
 26832  2B2C  3187  27FA  31AA   	fcall	_nullifyBadge_userLedsClr
 26833                           
 26834                           ;locked_task.c: 197: nullifyBadge_segDisplayErase(data->badge);
 26835  2B2F  0020               	movlb	0	; select bank0
 26836  2B30  0839               	movf	locked_clear@data,w
 26837  2B31  0086               	movwf	6
 26838  2B32  083A               	movf	locked_clear@data+1,w
 26839  2B33  0087               	movwf	7
 26840  2B34  0801               	movf	1,w
 26841  2B35  31B3  23D1         	fcall	_nullifyBadge_segDisplayErase
 26842  2B37  0008               	return
 26843  2B38                     __end_of_locked_clear:	
 26844                           
 26845                           	psect	text36
 26846  07FA                     __ptext36:	
 26847 ;; *************** function _nullifyBadge_userLedsClr *****************
 26848 ;; Defined at:
 26849 ;;		line 177 in file "nullifyBadge.c"
 26850 ;; Parameters:    Size  Location     Type
 26851 ;;  badge           1    wreg     PTR struct t_nullifyBadg
 26852 ;;		 -> badge_inst(18), 
 26853 ;; Auto vars:     Size  Location     Type
 26854 ;;  badge           1   11[BANK0 ] PTR struct t_nullifyBadg
 26855 ;;		 -> badge_inst(18), 
 26856 ;; Return value:  Size  Location     Type
 26857 ;;                  1    wreg      void 
 26858 ;; Registers used:
 26859 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 26860 ;; Tracked objects:
 26861 ;;		On entry : 0/0
 26862 ;;		On exit  : 0/0
 26863 ;;		Unchanged: 0/0
 26864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26866 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26867 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26868 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26869 ;;Total ram usage:        1 bytes
 26870 ;; Hardware stack levels used:    1
 26871 ;; Hardware stack levels required when called:    8
 26872 ;; This function calls:
 26873 ;;		_displayL2_ClrUserLeds
 26874 ;; This function is called by:
 26875 ;;		_menu_Init
 26876 ;;		_menu_clear
 26877 ;;		_menu_Exit
 26878 ;;		_flashy_Init
 26879 ;;		_flashy_Exit
 26880 ;;		_locked_Init
 26881 ;;		_locked_clear
 26882 ;;		_locked_Exit
 26883 ;;		_secret_Init
 26884 ;;		_secret_Exit
 26885 ;;		_slot_Init
 26886 ;;		_slot_Exit
 26887 ;;		_matrix_Init
 26888 ;;		_matrix_Exit
 26889 ;; This function uses a non-reentrant model
 26890 ;;
 26891                           
 26892                           
 26893                           ;psect for function _nullifyBadge_userLedsClr
 26894  07FA                     _nullifyBadge_userLedsClr:	
 26895                           
 26896                           ;incstack = 0
 26897                           ; Regs used in _nullifyBadge_userLedsClr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 26898                           ;nullifyBadge_userLedsClr@badge stored from wreg
 26899  07FA  0020               	movlb	0	; select bank0
 26900  07FB  00AB               	movwf	nullifyBadge_userLedsClr@badge
 26901                           
 26902                           ;nullifyBadge.c: 178: displayL2_ClrUserLeds(&badge->display);
 26903  07FC  082B               	movf	nullifyBadge_userLedsClr@badge,w
 26904  07FD  31B4  2499         	fcall	_displayL2_ClrUserLeds
 26905  07FF  0008               	return
 26906  0800                     __end_of_nullifyBadge_userLedsClr:	
 26907                           
 26908                           	psect	text37
 26909  3499                     __ptext37:	
 26910 ;; *************** function _displayL2_ClrUserLeds *****************
 26911 ;; Defined at:
 26912 ;;		line 94 in file "nullifyBadge_displayL2.c"
 26913 ;; Parameters:    Size  Location     Type
 26914 ;;  display         1    wreg     PTR struct t_nullifyDisp
 26915 ;;		 -> badge_inst(18), 
 26916 ;; Auto vars:     Size  Location     Type
 26917 ;;  display         1   11[COMMON] PTR struct t_nullifyDisp
 26918 ;;		 -> badge_inst(18), 
 26919 ;; Return value:  Size  Location     Type
 26920 ;;                  1    wreg      void 
 26921 ;; Registers used:
 26922 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 26923 ;; Tracked objects:
 26924 ;;		On entry : 0/0
 26925 ;;		On exit  : 0/0
 26926 ;;		Unchanged: 0/0
 26927 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26928 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26929 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26930 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26931 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26932 ;;Total ram usage:        1 bytes
 26933 ;; Hardware stack levels used:    1
 26934 ;; Hardware stack levels required when called:    7
 26935 ;; This function calls:
 26936 ;;		_displayL1_SetUserLed
 26937 ;;		_displayL1_Update
 26938 ;; This function is called by:
 26939 ;;		_nullifyBadge_userLedsClr
 26940 ;; This function uses a non-reentrant model
 26941 ;;
 26942                           
 26943                           
 26944                           ;psect for function _displayL2_ClrUserLeds
 26945  3499                     _displayL2_ClrUserLeds:	
 26946                           
 26947                           ;incstack = 0
 26948                           ; Regs used in _displayL2_ClrUserLeds: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 26949                           ;displayL2_ClrUserLeds@display stored from wreg
 26950  3499  00FB               	movwf	displayL2_ClrUserLeds@display
 26951                           
 26952                           ;nullifyBadge_displayL2.c: 95: displayL1_SetUserLed(&display->display_l1, 0);
 26953  349A  3000               	movlw	0
 26954  349B  00F1               	movwf	displayL1_SetUserLed@userLedVect
 26955  349C  00F2               	movwf	displayL1_SetUserLed@userLedVect+1
 26956  349D  087B               	movf	displayL2_ClrUserLeds@display,w
 26957  349E  3E07               	addlw	7
 26958  349F  31B5  2508  31B4   	fcall	_displayL1_SetUserLed
 26959                           
 26960                           ;nullifyBadge_displayL2.c: 96: displayL1_Update(&display->display_l1);
 26961  34A2  087B               	movf	displayL2_ClrUserLeds@display,w
 26962  34A3  3E07               	addlw	7
 26963  34A4  31B4  24D5         	fcall	_displayL1_Update
 26964  34A6  0008               	return
 26965  34A7                     __end_of_displayL2_ClrUserLeds:	
 26966                           
 26967                           	psect	text38
 26968  33D1                     __ptext38:	
 26969 ;; *************** function _nullifyBadge_segDisplayErase *****************
 26970 ;; Defined at:
 26971 ;;		line 123 in file "nullifyBadge.c"
 26972 ;; Parameters:    Size  Location     Type
 26973 ;;  badge           1    wreg     PTR struct t_nullifyBadg
 26974 ;;		 -> badge_inst(18), 
 26975 ;; Auto vars:     Size  Location     Type
 26976 ;;  badge           1   24[BANK0 ] PTR struct t_nullifyBadg
 26977 ;;		 -> badge_inst(18), 
 26978 ;; Return value:  Size  Location     Type
 26979 ;;                  1    wreg      void 
 26980 ;; Registers used:
 26981 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 26982 ;; Tracked objects:
 26983 ;;		On entry : 0/0
 26984 ;;		On exit  : 0/0
 26985 ;;		Unchanged: 0/0
 26986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26987 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26988 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26989 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26990 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26991 ;;Total ram usage:        1 bytes
 26992 ;; Hardware stack levels used:    1
 26993 ;; Hardware stack levels required when called:    9
 26994 ;; This function calls:
 26995 ;;		_displayL2_EraseSegDisplay
 26996 ;; This function is called by:
 26997 ;;		_menu_Init
 26998 ;;		_menu_clear
 26999 ;;		_menu_Exit
 27000 ;;		_flashy_Init
 27001 ;;		_flashy_Exit
 27002 ;;		_locked_Init
 27003 ;;		_locked_clear
 27004 ;;		_locked_Exit
 27005 ;;		_secret_Init
 27006 ;;		_secret_Exit
 27007 ;;		_slot_Init
 27008 ;;		_slot_Exit
 27009 ;;		_matrix_Init
 27010 ;;		_matrix_Exit
 27011 ;;		_fadeDisplay_Init
 27012 ;;		_fadeDisplay_Exit
 27013 ;; This function uses a non-reentrant model
 27014 ;;
 27015                           
 27016                           
 27017                           ;psect for function _nullifyBadge_segDisplayErase
 27018  33D1                     _nullifyBadge_segDisplayErase:	
 27019                           
 27020                           ;incstack = 0
 27021                           ; Regs used in _nullifyBadge_segDisplayErase: [wreg-fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 27022                           ;nullifyBadge_segDisplayErase@badge stored from wreg
 27023  33D1  0020               	movlb	0	; select bank0
 27024  33D2  00B8               	movwf	nullifyBadge_segDisplayErase@badge
 27025                           
 27026                           ;nullifyBadge.c: 124: displayL2_EraseSegDisplay(&badge->display);
 27027  33D3  0838               	movf	nullifyBadge_segDisplayErase@badge,w
 27028  33D4  31B4  24C5         	fcall	_displayL2_EraseSegDisplay
 27029  33D6  0008               	return
 27030  33D7                     __end_of_nullifyBadge_segDisplayErase:	
 27031                           
 27032                           	psect	text39
 27033  34C5                     __ptext39:	
 27034 ;; *************** function _displayL2_EraseSegDisplay *****************
 27035 ;; Defined at:
 27036 ;;		line 83 in file "nullifyBadge_displayL2.c"
 27037 ;; Parameters:    Size  Location     Type
 27038 ;;  display         1    wreg     PTR struct t_nullifyDisp
 27039 ;;		 -> badge_inst(18), 
 27040 ;; Auto vars:     Size  Location     Type
 27041 ;;  display         1   23[BANK0 ] PTR struct t_nullifyDisp
 27042 ;;		 -> badge_inst(18), 
 27043 ;; Return value:  Size  Location     Type
 27044 ;;                  1    wreg      void 
 27045 ;; Registers used:
 27046 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 27047 ;; Tracked objects:
 27048 ;;		On entry : 0/0
 27049 ;;		On exit  : 0/0
 27050 ;;		Unchanged: 0/0
 27051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27052 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27053 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27054 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27055 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27056 ;;Total ram usage:        1 bytes
 27057 ;; Hardware stack levels used:    1
 27058 ;; Hardware stack levels required when called:    8
 27059 ;; This function calls:
 27060 ;;		_displayL1_Update
 27061 ;;		_displayL2_PutStr
 27062 ;; This function is called by:
 27063 ;;		_nullifyBadge_segDisplayErase
 27064 ;; This function uses a non-reentrant model
 27065 ;;
 27066                           
 27067                           
 27068                           ;psect for function _displayL2_EraseSegDisplay
 27069  34C5                     _displayL2_EraseSegDisplay:	
 27070                           
 27071                           ;incstack = 0
 27072                           ; Regs used in _displayL2_EraseSegDisplay: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 27073                           ;displayL2_EraseSegDisplay@display stored from wreg
 27074  34C5  0020               	movlb	0	; select bank0
 27075  34C6  00B7               	movwf	displayL2_EraseSegDisplay@display
 27076                           
 27077                           ;nullifyBadge_displayL2.c: 84: displayL2_PutStr(display, "    ");
 27078  34C7  307D               	movlw	low ((STR_34+115)| (0+32768))
 27079  34C8  00B0               	movwf	displayL2_PutStr@str
 27080  34C9  30A8               	movlw	high ((STR_34+115)| (0+32768))
 27081  34CA  00B1               	movwf	displayL2_PutStr@str+1
 27082  34CB  0837               	movf	displayL2_EraseSegDisplay@display,w
 27083  34CC  31B7  2748  31B4   	fcall	_displayL2_PutStr
 27084                           
 27085                           ;nullifyBadge_displayL2.c: 85: displayL1_Update(&display->display_l1);
 27086  34CF  0020               	movlb	0	; select bank0
 27087  34D0  0837               	movf	displayL2_EraseSegDisplay@display,w
 27088  34D1  3E07               	addlw	7
 27089  34D2  31B4  24D5         	fcall	_displayL1_Update
 27090  34D4  0008               	return
 27091  34D5                     __end_of_displayL2_EraseSegDisplay:	
 27092                           
 27093                           	psect	text40
 27094  1A5F                     __ptext40:	
 27095 ;; *************** function _sprintf *****************
 27096 ;; Defined at:
 27097 ;;		line 492 in file "/Applications/microchip/xc8/v1.42/sources/common/doprnt.c"
 27098 ;; Parameters:    Size  Location     Type
 27099 ;;  sp              2   15[BANK0 ] PTR unsigned char 
 27100 ;;		 -> flashy_Main@hit_counter(6), matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), 
 27101 ;;		 -> slot_TaskData(40), menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 27102 ;;  f               2   17[BANK0 ] PTR const unsigned char 
 27103 ;;		 -> STR_69(3), STR_68(9), STR_67(9), STR_66(9), 
 27104 ;;		 -> STR_65(9), STR_64(9), STR_41(4), 
 27105 ;; Auto vars:     Size  Location     Type
 27106 ;;  tmpval          4    0        struct .
 27107 ;;  width           2   40[BANK0 ] int 
 27108 ;;  len             2   38[BANK0 ] unsigned int 
 27109 ;;  val             2   36[BANK0 ] unsigned int 
 27110 ;;  cp              2   33[BANK0 ] PTR const unsigned char 
 27111 ;;		 -> STR_83(7), sprintf@c(1), STR_63(9), STR_62(13), 
 27112 ;;		 -> STR_61(12), STR_60(8), STR_59(11), STR_58(11), 
 27113 ;;		 -> STR_57(9), STR_56(8), STR_55(8), 
 27114 ;;  c               1   42[BANK0 ] char 
 27115 ;;  ap              1   35[BANK0 ] PTR void [1]
 27116 ;;		 -> ?_sprintf(2), 
 27117 ;;  flag            1   32[BANK0 ] unsigned char 
 27118 ;;  prec            1   31[BANK0 ] char 
 27119 ;; Return value:  Size  Location     Type
 27120 ;;                  2   15[BANK0 ] int 
 27121 ;; Registers used:
 27122 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 27123 ;; Tracked objects:
 27124 ;;		On entry : 0/0
 27125 ;;		On exit  : 0/0
 27126 ;;		Unchanged: 0/0
 27127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27128 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27129 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27130 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27131 ;;      Totals:         0      28       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27132 ;;Total ram usage:       28 bytes
 27133 ;; Hardware stack levels used:    1
 27134 ;; Hardware stack levels required when called:    5
 27135 ;; This function calls:
 27136 ;;		___lwdiv
 27137 ;;		___lwmod
 27138 ;;		___wmul
 27139 ;;		_isdigit
 27140 ;; This function is called by:
 27141 ;;		_flashy_Main
 27142 ;;		_slot_Main
 27143 ;; This function uses a non-reentrant model
 27144 ;;
 27145                           
 27146                           
 27147                           ;psect for function _sprintf
 27148  1A5F                     _sprintf:	
 27149                           
 27150                           ;doprnt.c: 494: va_list ap;
 27151                           ;doprnt.c: 499: signed char c;
 27152                           ;doprnt.c: 501: int width;
 27153                           ;doprnt.c: 506: signed char prec;
 27154                           ;doprnt.c: 508: unsigned char flag;
 27155                           ;doprnt.c: 523: union {
 27156                           ;doprnt.c: 524: unsigned long vd;
 27157                           ;doprnt.c: 525: double integ;
 27158                           ;doprnt.c: 526: } tmpval;
 27159                           ;doprnt.c: 528: unsigned int val;
 27160                           ;doprnt.c: 529: unsigned len;
 27161                           ;doprnt.c: 530: const char * cp;
 27162                           ;doprnt.c: 533: *ap = __va_start();
 27163                           
 27164                           ;incstack = 0
 27165                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 27166  1A5F  3033               	movlw	(low ((?_sprintf| 0+4)))& (0+255)
 27167  1A60  0020               	movlb	0	; select bank0
 27168  1A61  00BB               	movwf	??_sprintf
 27169  1A62  083B               	movf	??_sprintf,w
 27170  1A63  00C3               	movwf	sprintf@ap
 27171  1A64                     l8607:	
 27172                           ;doprnt.c: 536: while(c = *f++) {
 27173                           
 27174  1A64  0832               	movf	sprintf@f+1,w
 27175  1A65  00BC               	movwf	??_sprintf+1
 27176  1A66  0831               	movf	sprintf@f,w
 27177  1A67  00BB               	movwf	??_sprintf
 27178  1A68  0AB1               	incf	sprintf@f,f
 27179  1A69  1903               	skipnz
 27180  1A6A  0AB2               	incf	sprintf@f+1,f
 27181  1A6B  083B               	movf	??_sprintf,w
 27182  1A6C  0084               	movwf	4
 27183  1A6D  083C               	movf	??_sprintf+1,w
 27184  1A6E  0085               	movwf	5
 27185  1A6F  0800               	movf	0,w	;code access
 27186  1A70  00BD               	movwf	??_sprintf+2
 27187  1A71  083D               	movf	??_sprintf+2,w
 27188  1A72  00CA               	movwf	sprintf@c
 27189  1A73  084A               	movf	sprintf@c,w
 27190  1A74  1903               	btfsc	3,2
 27191  1A75  2C25               	goto	l8609
 27192                           
 27193                           ;doprnt.c: 538: if(c != '%')
 27194  1A76  3025               	movlw	37
 27195  1A77  064A               	xorwf	sprintf@c,w
 27196  1A78  1903               	btfsc	3,2
 27197  1A79  2A85               	goto	l8491
 27198                           
 27199                           ;doprnt.c: 540: {
 27200                           ;doprnt.c: 541: ((*sp++ = (c)));
 27201  1A7A  082F               	movf	sprintf@sp,w
 27202  1A7B  0086               	movwf	6
 27203  1A7C  0830               	movf	sprintf@sp+1,w
 27204  1A7D  0087               	movwf	7
 27205  1A7E  084A               	movf	sprintf@c,w
 27206  1A7F  0081               	movwf	1
 27207  1A80  3001               	movlw	1
 27208  1A81  07AF               	addwf	sprintf@sp,f
 27209  1A82  3000               	movlw	0
 27210  1A83  3DB0               	addwfc	sprintf@sp+1,f
 27211                           
 27212                           ;doprnt.c: 542: continue;
 27213  1A84  2A64               	goto	l8607
 27214  1A85                     l8491:	
 27215                           
 27216                           ;doprnt.c: 543: }
 27217                           ;doprnt.c: 546: width = 0;
 27218  1A85  01C8               	clrf	sprintf@width
 27219  1A86  01C9               	clrf	sprintf@width+1
 27220                           
 27221                           ;doprnt.c: 548: flag = 0;
 27222  1A87  01C0               	clrf	sprintf@flag
 27223                           
 27224                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 27225  1A88  0831               	movf	sprintf@f,w
 27226  1A89  0084               	movwf	4
 27227  1A8A  0832               	movf	sprintf@f+1,w
 27228  1A8B  0085               	movwf	5
 27229  1A8C  0800               	movf	0,w	;code access
 27230  1A8D  31B4  248B  319A   	fcall	_isdigit
 27231  1A90  1C03               	btfss	3,0
 27232  1A91  2B3E               	goto	l8549
 27233                           
 27234                           ;doprnt.c: 598: width = 0;
 27235  1A92  0020               	movlb	0	; select bank0
 27236  1A93  01C8               	clrf	sprintf@width
 27237  1A94  01C9               	clrf	sprintf@width+1
 27238  1A95                     l8497:	
 27239                           ;doprnt.c: 599: do {
 27240                           
 27241                           
 27242                           ;doprnt.c: 600: width *= 10;
 27243  1A95  300A               	movlw	10
 27244  1A96  00F1               	movwf	___wmul@multiplier
 27245  1A97  3000               	movlw	0
 27246  1A98  00F2               	movwf	___wmul@multiplier+1
 27247  1A99  0020               	movlb	0	; select bank0
 27248  1A9A  0849               	movf	sprintf@width+1,w
 27249  1A9B  00F4               	movwf	___wmul@multiplicand+1
 27250  1A9C  0848               	movf	sprintf@width,w
 27251  1A9D  00F3               	movwf	___wmul@multiplicand
 27252  1A9E  31B5  25F3  319A   	fcall	___wmul
 27253  1AA1  0872               	movf	?___wmul+1,w
 27254  1AA2  0020               	movlb	0	; select bank0
 27255  1AA3  00C9               	movwf	sprintf@width+1
 27256  1AA4  0871               	movf	?___wmul,w
 27257  1AA5  00C8               	movwf	sprintf@width
 27258                           
 27259                           ;doprnt.c: 601: width += *f++ - '0';
 27260  1AA6  0831               	movf	sprintf@f,w
 27261  1AA7  0084               	movwf	4
 27262  1AA8  0832               	movf	sprintf@f+1,w
 27263  1AA9  0085               	movwf	5
 27264  1AAA  0800               	movf	0,w	;code access
 27265  1AAB  3ED0               	addlw	208
 27266  1AAC  00BB               	movwf	??_sprintf
 27267  1AAD  30FF               	movlw	255
 27268  1AAE  1803               	skipnc
 27269  1AAF  3000               	movlw	0
 27270  1AB0  00BC               	movwf	??_sprintf+1
 27271  1AB1  083B               	movf	??_sprintf,w
 27272  1AB2  07C8               	addwf	sprintf@width,f
 27273  1AB3  083C               	movf	??_sprintf+1,w
 27274  1AB4  3DC9               	addwfc	sprintf@width+1,f
 27275  1AB5  3001               	movlw	1
 27276  1AB6  07B1               	addwf	sprintf@f,f
 27277  1AB7  3000               	movlw	0
 27278  1AB8  3DB2               	addwfc	sprintf@f+1,f
 27279                           
 27280                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 27281  1AB9  0831               	movf	sprintf@f,w
 27282  1ABA  0084               	movwf	4
 27283  1ABB  0832               	movf	sprintf@f+1,w
 27284  1ABC  0085               	movwf	5
 27285  1ABD  0800               	movf	0,w	;code access
 27286  1ABE  31B4  248B  319A   	fcall	_isdigit
 27287  1AC1  1C03               	btfss	3,0
 27288  1AC2  2B3E               	goto	l8549
 27289  1AC3  2A95               	goto	l8497
 27290  1AC4                     l8505:	
 27291                           ;doprnt.c: 728: case 's':
 27292                           
 27293                           ;doprnt.c: 698: case 'i':
 27294                           ;doprnt.c: 699: break;
 27295                           
 27296                           ;doprnt.c: 697: case 'd':
 27297                           
 27298                           ;doprnt.c: 638: goto alldone;
 27299                           
 27300                           ;doprnt.c: 637: case 0:
 27301                           
 27302                           ;doprnt.c: 608: }
 27303                           ;doprnt.c: 635: switch(c = *f++) {
 27304                           
 27305                           
 27306                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 27307  1AC4  0020               	movlb	0	; select bank0
 27308  1AC5  0843               	movf	sprintf@ap,w
 27309  1AC6  0086               	movwf	6
 27310  1AC7  0187               	clrf	7
 27311  1AC8  3F40               	moviw [0]fsr1
 27312  1AC9  00C1               	movwf	sprintf@cp
 27313  1ACA  3F41               	moviw [1]fsr1
 27314  1ACB  00C2               	movwf	sprintf@cp+1
 27315  1ACC  3002               	movlw	2
 27316  1ACD  00BB               	movwf	??_sprintf
 27317  1ACE  083B               	movf	??_sprintf,w
 27318  1ACF  07C3               	addwf	sprintf@ap,f
 27319                           
 27320                           ;doprnt.c: 740: if(!cp)
 27321  1AD0  0841               	movf	sprintf@cp,w
 27322  1AD1  0442               	iorwf	sprintf@cp+1,w
 27323  1AD2  1D03               	btfss	3,2
 27324  1AD3  2AD8               	goto	l8513
 27325                           
 27326                           ;doprnt.c: 741: cp = "(null)";
 27327  1AD4  306E               	movlw	low (STR_83| (0+32768))
 27328  1AD5  00C1               	movwf	sprintf@cp
 27329  1AD6  30BB               	movlw	high (STR_83| (0+32768))
 27330  1AD7  00C2               	movwf	sprintf@cp+1
 27331  1AD8                     l8513:	
 27332                           
 27333                           ;doprnt.c: 745: len = 0;
 27334  1AD8  01C6               	clrf	sprintf@len
 27335  1AD9  01C7               	clrf	sprintf@len+1
 27336  1ADA                     l8517:	
 27337                           ;doprnt.c: 746: while(cp[len])
 27338                           
 27339  1ADA  0841               	movf	sprintf@cp,w
 27340  1ADB  0746               	addwf	sprintf@len,w
 27341  1ADC  0084               	movwf	4
 27342  1ADD  0842               	movf	sprintf@cp+1,w
 27343  1ADE  3D47               	addwfc	sprintf@len+1,w
 27344  1ADF  0085               	movwf	5
 27345  1AE0  0012               	moviw fsr0++
 27346  1AE1  1903               	btfsc	3,2
 27347  1AE2  2AE8               	goto	l8519
 27348                           
 27349                           ;doprnt.c: 747: len++;
 27350  1AE3  3001               	movlw	1
 27351  1AE4  07C6               	addwf	sprintf@len,f
 27352  1AE5  3000               	movlw	0
 27353  1AE6  3DC7               	addwfc	sprintf@len+1,f
 27354  1AE7  2ADA               	goto	l8517
 27355  1AE8                     l8519:	
 27356                           ;doprnt.c: 750: dostring:
 27357                           
 27358                           
 27359                           ;doprnt.c: 757: if(width > len)
 27360  1AE8  0849               	movf	sprintf@width+1,w
 27361  1AE9  0247               	subwf	sprintf@len+1,w
 27362  1AEA  1D03               	skipz
 27363  1AEB  2AEE               	goto	u5145
 27364  1AEC  0848               	movf	sprintf@width,w
 27365  1AED  0246               	subwf	sprintf@len,w
 27366  1AEE                     u5145:	
 27367  1AEE  1803               	skipnc
 27368  1AEF  2AF5               	goto	l8523
 27369                           
 27370                           ;doprnt.c: 758: width -= len;
 27371  1AF0  0846               	movf	sprintf@len,w
 27372  1AF1  02C8               	subwf	sprintf@width,f
 27373  1AF2  0847               	movf	sprintf@len+1,w
 27374  1AF3  3BC9               	subwfb	sprintf@width+1,f
 27375  1AF4  2AF7               	goto	l8529
 27376  1AF5                     l8523:	
 27377                           
 27378                           ;doprnt.c: 759: else
 27379                           ;doprnt.c: 760: width = 0;
 27380  1AF5  01C8               	clrf	sprintf@width
 27381  1AF6  01C9               	clrf	sprintf@width+1
 27382  1AF7                     l8529:	
 27383                           ;doprnt.c: 764: while(width--)
 27384                           
 27385  1AF7  30FF               	movlw	255
 27386  1AF8  07C8               	addwf	sprintf@width,f
 27387  1AF9  30FF               	movlw	255
 27388  1AFA  3DC9               	addwfc	sprintf@width+1,f
 27389  1AFB  0A48               	incf	sprintf@width,w
 27390  1AFC  1903               	btfsc	3,2
 27391  1AFD  0A49               	incf	sprintf@width+1,w
 27392  1AFE  1903               	btfsc	3,2
 27393  1AFF  2B1F               	goto	l8537
 27394                           
 27395                           ;doprnt.c: 765: ((*sp++ = (' ')));
 27396  1B00  082F               	movf	sprintf@sp,w
 27397  1B01  0086               	movwf	6
 27398  1B02  0830               	movf	sprintf@sp+1,w
 27399  1B03  0087               	movwf	7
 27400  1B04  3020               	movlw	32
 27401  1B05  0081               	movwf	1
 27402  1B06  3001               	movlw	1
 27403  1B07  07AF               	addwf	sprintf@sp,f
 27404  1B08  3000               	movlw	0
 27405  1B09  3DB0               	addwfc	sprintf@sp+1,f
 27406  1B0A  2AF7               	goto	l8529
 27407  1B0B                     l8531:	
 27408                           ;doprnt.c: 767: while(len--)
 27409                           
 27410                           
 27411                           ;doprnt.c: 768: ((*sp++ = (*cp++)));
 27412  1B0B  0841               	movf	sprintf@cp,w
 27413  1B0C  0084               	movwf	4
 27414  1B0D  0842               	movf	sprintf@cp+1,w
 27415  1B0E  0085               	movwf	5
 27416  1B0F  0800               	movf	0,w	;code access
 27417  1B10  00BB               	movwf	??_sprintf
 27418  1B11  082F               	movf	sprintf@sp,w
 27419  1B12  0086               	movwf	6
 27420  1B13  0830               	movf	sprintf@sp+1,w
 27421  1B14  0087               	movwf	7
 27422  1B15  083B               	movf	??_sprintf,w
 27423  1B16  0081               	movwf	1
 27424  1B17  3001               	movlw	1
 27425  1B18  07C1               	addwf	sprintf@cp,f
 27426  1B19  3000               	movlw	0
 27427  1B1A  3DC2               	addwfc	sprintf@cp+1,f
 27428  1B1B  3001               	movlw	1
 27429  1B1C  07AF               	addwf	sprintf@sp,f
 27430  1B1D  3000               	movlw	0
 27431  1B1E  3DB0               	addwfc	sprintf@sp+1,f
 27432  1B1F                     l8537:	
 27433  1B1F  3001               	movlw	1
 27434  1B20  02C6               	subwf	sprintf@len,f
 27435  1B21  3000               	movlw	0
 27436  1B22  3BC7               	subwfb	sprintf@len+1,f
 27437  1B23  0A46               	incf	sprintf@len,w
 27438  1B24  1D03               	skipz
 27439  1B25  2B0B               	goto	l8531
 27440  1B26  0A47               	incf	sprintf@len+1,w
 27441  1B27  1903               	btfsc	3,2
 27442  1B28  2A64               	goto	l8607
 27443  1B29  2B0B               	goto	l8531
 27444  1B2A                     l8539:	
 27445                           ;doprnt.c: 784: case 'c':
 27446                           
 27447                           ;doprnt.c: 774: continue;
 27448                           
 27449                           
 27450                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 27451  1B2A  0843               	movf	sprintf@ap,w
 27452  1B2B  0086               	movwf	6
 27453  1B2C  0187               	clrf	7
 27454  1B2D  0801               	movf	1,w
 27455  1B2E  00BB               	movwf	??_sprintf
 27456  1B2F  083B               	movf	??_sprintf,w
 27457  1B30  00CA               	movwf	sprintf@c
 27458  1B31  3002               	movlw	2
 27459  1B32  00BB               	movwf	??_sprintf
 27460  1B33  083B               	movf	??_sprintf,w
 27461  1B34  07C3               	addwf	sprintf@ap,f
 27462  1B35                     l8543:	
 27463                           ;doprnt.c: 802: default:
 27464                           
 27465                           
 27466                           ;doprnt.c: 805: cp = (char *)&c;
 27467  1B35  304A               	movlw	low sprintf@c
 27468  1B36  00C1               	movwf	sprintf@cp
 27469  1B37  3000               	movlw	high sprintf@c
 27470  1B38  00C2               	movwf	sprintf@cp+1
 27471                           
 27472                           ;doprnt.c: 806: len = 1;
 27473  1B39  3001               	movlw	1
 27474  1B3A  00C6               	movwf	sprintf@len
 27475  1B3B  3000               	movlw	0
 27476  1B3C  00C7               	movwf	sprintf@len+1
 27477                           
 27478                           ;doprnt.c: 807: goto dostring;
 27479  1B3D  2AE8               	goto	l8519
 27480  1B3E                     l8549:	
 27481                           ;doprnt.c: 822: }
 27482                           
 27483  1B3E  0020               	movlb	0	; select bank0
 27484  1B3F  0832               	movf	sprintf@f+1,w
 27485  1B40  00BC               	movwf	??_sprintf+1
 27486  1B41  0831               	movf	sprintf@f,w
 27487  1B42  00BB               	movwf	??_sprintf
 27488  1B43  0AB1               	incf	sprintf@f,f
 27489  1B44  1903               	skipnz
 27490  1B45  0AB2               	incf	sprintf@f+1,f
 27491  1B46  083B               	movf	??_sprintf,w
 27492  1B47  0084               	movwf	4
 27493  1B48  083C               	movf	??_sprintf+1,w
 27494  1B49  0085               	movwf	5
 27495  1B4A  0800               	movf	0,w	;code access
 27496  1B4B  00CA               	movwf	sprintf@c
 27497                           
 27498                           ; Switch size 1, requested type "space"
 27499                           ; Number of cases is 5, Range of values is 0 to 115
 27500                           ; switch strategies available:
 27501                           ; Name         Instructions Cycles
 27502                           ; simple_byte           16     9 (average)
 27503                           ; direct_byte          238     6 (fixed)
 27504                           ; jumptable            260     6 (fixed)
 27505                           ;	Chosen strategy is simple_byte
 27506  1B4C  3A00               	xorlw	0	; case 0
 27507  1B4D  1903               	skipnz
 27508  1B4E  2C25               	goto	l8609
 27509  1B4F  3A63               	xorlw	99	; case 99
 27510  1B50  1903               	skipnz
 27511  1B51  2B2A               	goto	l8539
 27512  1B52  3A07               	xorlw	7	; case 100
 27513  1B53  1903               	skipnz
 27514  1B54  2B5C               	goto	l8551
 27515  1B55  3A0D               	xorlw	13	; case 105
 27516  1B56  1903               	skipnz
 27517  1B57  2B5C               	goto	l8551
 27518  1B58  3A1A               	xorlw	26	; case 115
 27519  1B59  1903               	skipnz
 27520  1B5A  2AC4               	goto	l8505
 27521  1B5B  2B35               	goto	l8543
 27522  1B5C                     l8551:	
 27523                           
 27524                           ;doprnt.c: 1253: {
 27525                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 27526  1B5C  0020               	movlb	0	; select bank0
 27527  1B5D  0843               	movf	sprintf@ap,w
 27528  1B5E  0086               	movwf	6
 27529  1B5F  0187               	clrf	7
 27530  1B60  3F40               	moviw [0]fsr1
 27531  1B61  00C4               	movwf	sprintf@val
 27532  1B62  3F41               	moviw [1]fsr1
 27533  1B63  00C5               	movwf	sprintf@val+1
 27534  1B64  3002               	movlw	2
 27535  1B65  00BB               	movwf	??_sprintf
 27536  1B66  083B               	movf	??_sprintf,w
 27537  1B67  07C3               	addwf	sprintf@ap,f
 27538                           
 27539                           ;doprnt.c: 1261: if((int)val < 0) {
 27540  1B68  1FC5               	btfss	sprintf@val+1,7
 27541  1B69  2B73               	goto	l8561
 27542                           
 27543                           ;doprnt.c: 1262: flag |= 0x03;
 27544  1B6A  3003               	movlw	3
 27545  1B6B  00BB               	movwf	??_sprintf
 27546  1B6C  083B               	movf	??_sprintf,w
 27547  1B6D  04C0               	iorwf	sprintf@flag,f
 27548                           
 27549                           ;doprnt.c: 1263: val = -val;
 27550  1B6E  09C4               	comf	sprintf@val,f
 27551  1B6F  09C5               	comf	sprintf@val+1,f
 27552  1B70  0AC4               	incf	sprintf@val,f
 27553  1B71  1903               	skipnz
 27554  1B72  0AC5               	incf	sprintf@val+1,f
 27555  1B73                     l8561:	
 27556                           
 27557                           ;doprnt.c: 1264: }
 27558                           ;doprnt.c: 1266: }
 27559                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 27560  1B73  01CA               	clrf	sprintf@c
 27561  1B74  0ACA               	incf	sprintf@c,f
 27562  1B75  3005               	movlw	5
 27563  1B76  064A               	xorwf	sprintf@c,w
 27564  1B77  1903               	btfsc	3,2
 27565  1B78  2B98               	goto	l8573
 27566  1B79                     l8567:	
 27567                           
 27568                           ;doprnt.c: 1306: if(val < dpowers[c])
 27569  1B79  084A               	movf	sprintf@c,w
 27570  1B7A  00BB               	movwf	??_sprintf
 27571  1B7B  01BC               	clrf	??_sprintf+1
 27572  1B7C  35BB               	lslf	??_sprintf,f
 27573  1B7D  0DBC               	rlf	??_sprintf+1,f
 27574  1B7E  3000               	movlw	low (_dpowers| (0+32768))
 27575  1B7F  073B               	addwf	??_sprintf,w
 27576  1B80  0084               	movwf	4
 27577  1B81  30A8               	movlw	high (_dpowers| (0+32768))
 27578  1B82  3D3C               	addwfc	??_sprintf+1,w
 27579  1B83  0085               	movwf	5
 27580  1B84  3F00               	moviw [0]fsr0
 27581  1B85  00BD               	movwf	??_sprintf+2
 27582  1B86  3F01               	moviw [1]fsr0
 27583  1B87  00BE               	movwf	??_sprintf+3
 27584  1B88  083E               	movf	??_sprintf+3,w
 27585  1B89  0245               	subwf	sprintf@val+1,w
 27586  1B8A  1D03               	skipz
 27587  1B8B  2B8E               	goto	u5195
 27588  1B8C  083D               	movf	??_sprintf+2,w
 27589  1B8D  0244               	subwf	sprintf@val,w
 27590  1B8E                     u5195:	
 27591  1B8E  1C03               	btfss	3,0
 27592  1B8F  2B98               	goto	l8573
 27593                           
 27594                           ;doprnt.c: 1307: break;
 27595  1B90  3001               	movlw	1
 27596  1B91  00BB               	movwf	??_sprintf
 27597  1B92  083B               	movf	??_sprintf,w
 27598  1B93  07CA               	addwf	sprintf@c,f
 27599  1B94  3005               	movlw	5
 27600  1B95  064A               	xorwf	sprintf@c,w
 27601  1B96  1D03               	btfss	3,2
 27602  1B97  2B79               	goto	l8567
 27603  1B98                     l8573:	
 27604                           
 27605                           ;doprnt.c: 1345: if(width && flag & 0x03)
 27606  1B98  0848               	movf	sprintf@width,w
 27607  1B99  0449               	iorwf	sprintf@width+1,w
 27608  1B9A  1903               	btfsc	3,2
 27609  1B9B  2BA4               	goto	l1587
 27610  1B9C  0840               	movf	sprintf@flag,w
 27611  1B9D  3903               	andlw	3
 27612  1B9E  1903               	btfsc	3,2
 27613  1B9F  2BA4               	goto	l1587
 27614                           
 27615                           ;doprnt.c: 1346: width--;
 27616  1BA0  30FF               	movlw	255
 27617  1BA1  07C8               	addwf	sprintf@width,f
 27618  1BA2  30FF               	movlw	255
 27619  1BA3  3DC9               	addwfc	sprintf@width+1,f
 27620  1BA4                     l1587:	
 27621                           
 27622                           ;doprnt.c: 1381: if(width > c)
 27623  1BA4  084A               	movf	sprintf@c,w
 27624  1BA5  00BB               	movwf	??_sprintf
 27625  1BA6  01BC               	clrf	??_sprintf+1
 27626  1BA7  1BBB               	btfsc	??_sprintf,7
 27627  1BA8  03BC               	decf	??_sprintf+1,f
 27628  1BA9  083C               	movf	??_sprintf+1,w
 27629  1BAA  3A80               	xorlw	128
 27630  1BAB  00BD               	movwf	??_sprintf+2
 27631  1BAC  0849               	movf	sprintf@width+1,w
 27632  1BAD  3A80               	xorlw	128
 27633  1BAE  023D               	subwf	??_sprintf+2,w
 27634  1BAF  1D03               	skipz
 27635  1BB0  2BB3               	goto	u5235
 27636  1BB1  0848               	movf	sprintf@width,w
 27637  1BB2  023B               	subwf	??_sprintf,w
 27638  1BB3                     u5235:	
 27639  1BB3  1803               	skipnc
 27640  1BB4  2BC0               	goto	l8581
 27641                           
 27642                           ;doprnt.c: 1382: width -= c;
 27643  1BB5  0020               	movlb	0	; select bank0
 27644  1BB6  084A               	movf	sprintf@c,w
 27645  1BB7  00BB               	movwf	??_sprintf
 27646  1BB8  01BC               	clrf	??_sprintf+1
 27647  1BB9  1BBB               	btfsc	??_sprintf,7
 27648  1BBA  03BC               	decf	??_sprintf+1,f
 27649  1BBB  083B               	movf	??_sprintf,w
 27650  1BBC  02C8               	subwf	sprintf@width,f
 27651  1BBD  083C               	movf	??_sprintf+1,w
 27652  1BBE  3BC9               	subwfb	sprintf@width+1,f
 27653  1BBF  2BC3               	goto	l8583
 27654  1BC0                     l8581:	
 27655                           
 27656                           ;doprnt.c: 1383: else
 27657                           ;doprnt.c: 1384: width = 0;
 27658  1BC0  0020               	movlb	0	; select bank0
 27659  1BC1  01C8               	clrf	sprintf@width
 27660  1BC2  01C9               	clrf	sprintf@width+1
 27661  1BC3                     l8583:	
 27662                           
 27663                           ;doprnt.c: 1422: {
 27664                           ;doprnt.c: 1424: if(width
 27665                           ;doprnt.c: 1428: )
 27666  1BC3  0848               	movf	sprintf@width,w
 27667  1BC4  0449               	iorwf	sprintf@width+1,w
 27668  1BC5  1903               	btfsc	3,2
 27669  1BC6  2BD9               	goto	l8591
 27670  1BC7                     l8585:	
 27671                           ;doprnt.c: 1429: do
 27672                           
 27673                           
 27674                           ;doprnt.c: 1430: ((*sp++ = (' ')));
 27675  1BC7  082F               	movf	sprintf@sp,w
 27676  1BC8  0086               	movwf	6
 27677  1BC9  0830               	movf	sprintf@sp+1,w
 27678  1BCA  0087               	movwf	7
 27679  1BCB  3020               	movlw	32
 27680  1BCC  0081               	movwf	1
 27681  1BCD  3001               	movlw	1
 27682  1BCE  07AF               	addwf	sprintf@sp,f
 27683  1BCF  3000               	movlw	0
 27684  1BD0  3DB0               	addwfc	sprintf@sp+1,f
 27685                           
 27686                           ;doprnt.c: 1431: while(--width);
 27687  1BD1  30FF               	movlw	255
 27688  1BD2  07C8               	addwf	sprintf@width,f
 27689  1BD3  30FF               	movlw	255
 27690  1BD4  3DC9               	addwfc	sprintf@width+1,f
 27691  1BD5  0848               	movf	sprintf@width,w
 27692  1BD6  0449               	iorwf	sprintf@width+1,w
 27693  1BD7  1D03               	btfss	3,2
 27694  1BD8  2BC7               	goto	l8585
 27695  1BD9                     l8591:	
 27696                           
 27697                           ;doprnt.c: 1438: if(flag & 0x03)
 27698  1BD9  0840               	movf	sprintf@flag,w
 27699  1BDA  3903               	andlw	3
 27700  1BDB  1903               	btfsc	3,2
 27701  1BDC  2BE7               	goto	l8597
 27702                           
 27703                           ;doprnt.c: 1439: ((*sp++ = ('-')));
 27704  1BDD  082F               	movf	sprintf@sp,w
 27705  1BDE  0086               	movwf	6
 27706  1BDF  0830               	movf	sprintf@sp+1,w
 27707  1BE0  0087               	movwf	7
 27708  1BE1  302D               	movlw	45
 27709  1BE2  0081               	movwf	1
 27710  1BE3  3001               	movlw	1
 27711  1BE4  07AF               	addwf	sprintf@sp,f
 27712  1BE5  3000               	movlw	0
 27713  1BE6  3DB0               	addwfc	sprintf@sp+1,f
 27714  1BE7                     l8597:	
 27715                           
 27716                           ;doprnt.c: 1469: }
 27717                           ;doprnt.c: 1472: prec = c;
 27718  1BE7  084A               	movf	sprintf@c,w
 27719  1BE8  00BB               	movwf	??_sprintf
 27720  1BE9  083B               	movf	??_sprintf,w
 27721  1BEA  00BF               	movwf	sprintf@prec
 27722  1BEB                     l8605:	
 27723                           ;doprnt.c: 1474: while(prec--) {
 27724                           
 27725  1BEB  30FF               	movlw	255
 27726  1BEC  00BB               	movwf	??_sprintf
 27727  1BED  083B               	movf	??_sprintf,w
 27728  1BEE  07BF               	addwf	sprintf@prec,f
 27729  1BEF  0A3F               	incf	sprintf@prec,w
 27730  1BF0  1903               	btfsc	3,2
 27731  1BF1  2A64               	goto	l8607
 27732                           
 27733                           ;doprnt.c: 1478: {
 27734                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 27735  1BF2  300A               	movlw	10
 27736  1BF3  00AB               	movwf	___lwmod@divisor
 27737  1BF4  3000               	movlw	0
 27738  1BF5  00AC               	movwf	___lwmod@divisor+1
 27739  1BF6  083F               	movf	sprintf@prec,w
 27740  1BF7  00BB               	movwf	??_sprintf
 27741  1BF8  01BC               	clrf	??_sprintf+1
 27742  1BF9  35BB               	lslf	??_sprintf,f
 27743  1BFA  0DBC               	rlf	??_sprintf+1,f
 27744  1BFB  3000               	movlw	low (_dpowers| (0+32768))
 27745  1BFC  073B               	addwf	??_sprintf,w
 27746  1BFD  0084               	movwf	4
 27747  1BFE  30A8               	movlw	high (_dpowers| (0+32768))
 27748  1BFF  3D3C               	addwfc	??_sprintf+1,w
 27749  1C00  0085               	movwf	5
 27750  1C01  3F00               	moviw [0]fsr0
 27751  1C02  00F1               	movwf	___lwdiv@divisor
 27752  1C03  3F01               	moviw [1]fsr0
 27753  1C04  00F2               	movwf	___lwdiv@divisor+1
 27754  1C05  0845               	movf	sprintf@val+1,w
 27755  1C06  00F4               	movwf	___lwdiv@dividend+1
 27756  1C07  0844               	movf	sprintf@val,w
 27757  1C08  00F3               	movwf	___lwdiv@dividend
 27758  1C09  31A8  20E5  319A   	fcall	___lwdiv
 27759  1C0C  0872               	movf	?___lwdiv+1,w
 27760  1C0D  0020               	movlb	0	; select bank0
 27761  1C0E  00AE               	movwf	___lwmod@dividend+1
 27762  1C0F  0871               	movf	?___lwdiv,w
 27763  1C10  00AD               	movwf	___lwmod@dividend
 27764  1C11  31B7  2772  319A   	fcall	___lwmod
 27765  1C14  0020               	movlb	0	; select bank0
 27766  1C15  082B               	movf	?___lwmod,w
 27767  1C16  3E30               	addlw	48
 27768  1C17  00BD               	movwf	??_sprintf+2
 27769  1C18  083D               	movf	??_sprintf+2,w
 27770  1C19  00CA               	movwf	sprintf@c
 27771                           
 27772                           ;doprnt.c: 1523: }
 27773                           ;doprnt.c: 1524: ((*sp++ = (c)));
 27774  1C1A  082F               	movf	sprintf@sp,w
 27775  1C1B  0086               	movwf	6
 27776  1C1C  0830               	movf	sprintf@sp+1,w
 27777  1C1D  0087               	movwf	7
 27778  1C1E  084A               	movf	sprintf@c,w
 27779  1C1F  0081               	movwf	1
 27780  1C20  3001               	movlw	1
 27781  1C21  07AF               	addwf	sprintf@sp,f
 27782  1C22  3000               	movlw	0
 27783  1C23  3DB0               	addwfc	sprintf@sp+1,f
 27784  1C24  2BEB               	goto	l8605
 27785  1C25                     l8609:	
 27786                           ;doprnt.c: 1525: }
 27787                           ;doprnt.c: 1533: }
 27788                           ;doprnt.c: 1535: alldone:
 27789                           
 27790                           
 27791                           ;doprnt.c: 1538: *sp = 0;
 27792  1C25  0020               	movlb	0	; select bank0
 27793  1C26  082F               	movf	sprintf@sp,w
 27794  1C27  0086               	movwf	6
 27795  1C28  0830               	movf	sprintf@sp+1,w
 27796  1C29  0087               	movwf	7
 27797  1C2A  0181               	clrf	1
 27798  1C2B  0008               	return
 27799  1C2C                     __end_of_sprintf:	
 27800                           ;doprnt.c: 1540: return 0;
 27801                           ;	Return value of _sprintf is never used
 27802                           
 27803                           
 27804                           	psect	text41
 27805  348B                     __ptext41:	
 27806 ;; *************** function _isdigit *****************
 27807 ;; Defined at:
 27808 ;;		line 8 in file "/Applications/microchip/xc8/v1.42/sources/common/isdigit.c"
 27809 ;; Parameters:    Size  Location     Type
 27810 ;;  c               1    wreg     unsigned char 
 27811 ;; Auto vars:     Size  Location     Type
 27812 ;;  c               1    2[COMMON] unsigned char 
 27813 ;; Return value:  Size  Location     Type
 27814 ;;		None               void
 27815 ;; Registers used:
 27816 ;;		wreg, status,2, status,0
 27817 ;; Tracked objects:
 27818 ;;		On entry : 0/0
 27819 ;;		On exit  : 0/0
 27820 ;;		Unchanged: 0/0
 27821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27822 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27823 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27824 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27825 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27826 ;;Total ram usage:        2 bytes
 27827 ;; Hardware stack levels used:    1
 27828 ;; Hardware stack levels required when called:    4
 27829 ;; This function calls:
 27830 ;;		Nothing
 27831 ;; This function is called by:
 27832 ;;		_sprintf
 27833 ;; This function uses a non-reentrant model
 27834 ;;
 27835                           
 27836                           
 27837                           ;psect for function _isdigit
 27838  348B                     _isdigit:	
 27839                           
 27840                           ;incstack = 0
 27841                           ; Regs used in _isdigit: [wreg+status,2+status,0]
 27842                           ;isdigit@c stored from wreg
 27843  348B  00F2               	movwf	isdigit@c
 27844  348C  01F1               	clrf	_isdigit$3610
 27845  348D  303A               	movlw	58
 27846  348E  0272               	subwf	isdigit@c,w
 27847  348F  1803               	skipnc
 27848  3490  2C97               	goto	l8317
 27849  3491  3030               	movlw	48
 27850  3492  0272               	subwf	isdigit@c,w
 27851  3493  1C03               	skipc
 27852  3494  2C97               	goto	l8317
 27853  3495  01F1               	clrf	_isdigit$3610
 27854  3496  0AF1               	incf	_isdigit$3610,f
 27855  3497                     l8317:	
 27856  3497  0C71               	rrf	_isdigit$3610,w
 27857  3498  0008               	return
 27858  3499                     __end_of_isdigit:	
 27859                           
 27860                           	psect	text42
 27861  35F3                     __ptext42:	
 27862 ;; *************** function ___wmul *****************
 27863 ;; Defined at:
 27864 ;;		line 15 in file "/Applications/microchip/xc8/v1.42/sources/common/Umul16.c"
 27865 ;; Parameters:    Size  Location     Type
 27866 ;;  multiplier      2    1[COMMON] unsigned int 
 27867 ;;  multiplicand    2    3[COMMON] unsigned int 
 27868 ;; Auto vars:     Size  Location     Type
 27869 ;;  product         2    5[COMMON] unsigned int 
 27870 ;; Return value:  Size  Location     Type
 27871 ;;                  2    1[COMMON] unsigned int 
 27872 ;; Registers used:
 27873 ;;		wreg, status,2, status,0
 27874 ;; Tracked objects:
 27875 ;;		On entry : 0/0
 27876 ;;		On exit  : 0/0
 27877 ;;		Unchanged: 0/0
 27878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27879 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27880 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27881 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27882 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27883 ;;Total ram usage:        6 bytes
 27884 ;; Hardware stack levels used:    1
 27885 ;; Hardware stack levels required when called:    4
 27886 ;; This function calls:
 27887 ;;		Nothing
 27888 ;; This function is called by:
 27889 ;;		_secret_check
 27890 ;;		_matrix_secret_check
 27891 ;;		_sprintf
 27892 ;; This function uses a non-reentrant model
 27893 ;;
 27894                           
 27895                           
 27896                           ;psect for function ___wmul
 27897  35F3                     ___wmul:	
 27898                           
 27899                           ;incstack = 0
 27900                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 27901  35F3  01F5               	clrf	___wmul@product
 27902  35F4  01F6               	clrf	___wmul@product+1
 27903  35F5                     l8323:	
 27904  35F5  1C71               	btfss	___wmul@multiplier,0
 27905  35F6  2DFB               	goto	l1680
 27906  35F7  0873               	movf	___wmul@multiplicand,w
 27907  35F8  07F5               	addwf	___wmul@product,f
 27908  35F9  0874               	movf	___wmul@multiplicand+1,w
 27909  35FA  3DF6               	addwfc	___wmul@product+1,f
 27910  35FB                     l1680:	
 27911  35FB  3001               	movlw	1
 27912  35FC                     u4945:	
 27913  35FC  35F3               	lslf	___wmul@multiplicand,f
 27914  35FD  0DF4               	rlf	___wmul@multiplicand+1,f
 27915  35FE  0B89               	decfsz	9,f
 27916  35FF  2DFC               	goto	u4945
 27917  3600  3001               	movlw	1
 27918  3601                     u4955:	
 27919  3601  36F2               	lsrf	___wmul@multiplier+1,f
 27920  3602  0CF1               	rrf	___wmul@multiplier,f
 27921  3603  0B89               	decfsz	9,f
 27922  3604  2E01               	goto	u4955
 27923  3605  0871               	movf	___wmul@multiplier,w
 27924  3606  0472               	iorwf	___wmul@multiplier+1,w
 27925  3607  1D03               	btfss	3,2
 27926  3608  2DF5               	goto	l8323
 27927  3609  0876               	movf	___wmul@product+1,w
 27928  360A  00F2               	movwf	?___wmul+1
 27929  360B  0875               	movf	___wmul@product,w
 27930  360C  00F1               	movwf	?___wmul
 27931  360D  0008               	return
 27932  360E                     __end_of___wmul:	
 27933                           
 27934                           	psect	text43
 27935  33B3                     __ptext43:	
 27936 ;; *************** function _nullifyBadge_irTxSet *****************
 27937 ;; Defined at:
 27938 ;;		line 264 in file "nullifyBadge.c"
 27939 ;; Parameters:    Size  Location     Type
 27940 ;;		None
 27941 ;; Auto vars:     Size  Location     Type
 27942 ;;		None
 27943 ;; Return value:  Size  Location     Type
 27944 ;;                  1    wreg      void 
 27945 ;; Registers used:
 27946 ;;		None
 27947 ;; Tracked objects:
 27948 ;;		On entry : 0/0
 27949 ;;		On exit  : 0/0
 27950 ;;		Unchanged: 0/0
 27951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27952 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27953 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27954 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27955 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27956 ;;Total ram usage:        0 bytes
 27957 ;; Hardware stack levels used:    1
 27958 ;; Hardware stack levels required when called:    4
 27959 ;; This function calls:
 27960 ;;		Nothing
 27961 ;; This function is called by:
 27962 ;;		_flashy_Main
 27963 ;; This function uses a non-reentrant model
 27964 ;;
 27965                           
 27966                           
 27967                           ;psect for function _nullifyBadge_irTxSet
 27968  33B3                     _nullifyBadge_irTxSet:	
 27969                           
 27970                           ;incstack = 0
 27971                           ; Regs used in _nullifyBadge_irTxSet: []
 27972                           ;nullifyBadge.c: 266: do { LATBbits.LATB7 = 0; } while(0);
 27973  33B3  0022               	movlb	2	; select bank2
 27974  33B4  138D               	bcf	13,7	;volatile
 27975  33B5  0008               	return
 27976  33B6                     __end_of_nullifyBadge_irTxSet:	
 27977                           
 27978                           	psect	text44
 27979  3443                     __ptext44:	
 27980 ;; *************** function _nullifyBadge_irTxRelease *****************
 27981 ;; Defined at:
 27982 ;;		line 254 in file "nullifyBadge.c"
 27983 ;; Parameters:    Size  Location     Type
 27984 ;;  badge           1    wreg     PTR struct t_nullifyBadg
 27985 ;;		 -> badge_inst(18), 
 27986 ;; Auto vars:     Size  Location     Type
 27987 ;;  badge           1    2[COMMON] PTR struct t_nullifyBadg
 27988 ;;		 -> badge_inst(18), 
 27989 ;; Return value:  Size  Location     Type
 27990 ;;                  1    wreg      void 
 27991 ;; Registers used:
 27992 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 27993 ;; Tracked objects:
 27994 ;;		On entry : 0/0
 27995 ;;		On exit  : 0/0
 27996 ;;		Unchanged: 0/0
 27997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27998 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27999 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28000 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28001 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28002 ;;Total ram usage:        2 bytes
 28003 ;; Hardware stack levels used:    1
 28004 ;; Hardware stack levels required when called:    4
 28005 ;; This function calls:
 28006 ;;		Nothing
 28007 ;; This function is called by:
 28008 ;;		_flashy_Main
 28009 ;; This function uses a non-reentrant model
 28010 ;;
 28011                           
 28012                           
 28013                           ;psect for function _nullifyBadge_irTxRelease
 28014  3443                     _nullifyBadge_irTxRelease:	
 28015                           
 28016                           ;incstack = 0
 28017                           ; Regs used in _nullifyBadge_irTxRelease: [wreg+fsr1l+fsr1h+status,2+status,0]
 28018                           ;nullifyBadge_irTxRelease@badge stored from wreg
 28019  3443  00F2               	movwf	nullifyBadge_irTxRelease@badge
 28020                           
 28021                           ;nullifyBadge.c: 255: badge->registeredHw &= ~(1 << HW_IR_TX);
 28022  3444  30FB               	movlw	251
 28023  3445  00F1               	movwf	??_nullifyBadge_irTxRelease
 28024  3446  0872               	movf	nullifyBadge_irTxRelease@badge,w
 28025  3447  3E11               	addlw	17
 28026  3448  0086               	movwf	6
 28027  3449  3001               	movlw	1	; select bank2/3
 28028  344A  0087               	movwf	7
 28029  344B  0871               	movf	??_nullifyBadge_irTxRelease,w
 28030  344C  0581               	andwf	1,f
 28031  344D  0008               	return
 28032  344E                     __end_of_nullifyBadge_irTxRelease:	
 28033                           
 28034                           	psect	text45
 28035  34A7                     __ptext45:	
 28036 ;; *************** function _nullifyBadge_irTxRegister *****************
 28037 ;; Defined at:
 28038 ;;		line 242 in file "nullifyBadge.c"
 28039 ;; Parameters:    Size  Location     Type
 28040 ;;  badge           1    wreg     PTR struct t_nullifyBadg
 28041 ;;		 -> badge_inst(18), 
 28042 ;; Auto vars:     Size  Location     Type
 28043 ;;  badge           1    1[COMMON] PTR struct t_nullifyBadg
 28044 ;;		 -> badge_inst(18), 
 28045 ;; Return value:  Size  Location     Type
 28046 ;;                  1    wreg      char 
 28047 ;; Registers used:
 28048 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 28049 ;; Tracked objects:
 28050 ;;		On entry : 0/0
 28051 ;;		On exit  : 0/0
 28052 ;;		Unchanged: 0/0
 28053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28054 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28055 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28056 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28057 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28058 ;;Total ram usage:        1 bytes
 28059 ;; Hardware stack levels used:    1
 28060 ;; Hardware stack levels required when called:    4
 28061 ;; This function calls:
 28062 ;;		Nothing
 28063 ;; This function is called by:
 28064 ;;		_flashy_Main
 28065 ;; This function uses a non-reentrant model
 28066 ;;
 28067                           
 28068                           
 28069                           ;psect for function _nullifyBadge_irTxRegister
 28070  34A7                     _nullifyBadge_irTxRegister:	
 28071                           
 28072                           ;incstack = 0
 28073                           ; Regs used in _nullifyBadge_irTxRegister: [wreg+fsr1l+fsr1h+status,2+status,0]
 28074                           ;nullifyBadge_irTxRegister@badge stored from wreg
 28075  34A7  00F1               	movwf	nullifyBadge_irTxRegister@badge
 28076                           
 28077                           ;nullifyBadge.c: 243: if (badge->registeredHw & HW_IR_TX) {
 28078  34A8  0871               	movf	nullifyBadge_irTxRegister@badge,w
 28079  34A9  3E11               	addlw	17
 28080  34AA  0086               	movwf	6
 28081  34AB  3001               	movlw	1	; select bank2/3
 28082  34AC  0087               	movwf	7
 28083  34AD  1881               	btfsc	1,1
 28084  34AE  0008               	return
 28085                           
 28086                           ;nullifyBadge.c: 246: else {
 28087                           ;nullifyBadge.c: 247: badge->registeredHw |= (1 << HW_IR_TX);
 28088                           
 28089                           ;nullifyBadge.c: 245: }
 28090                           
 28091                           ;nullifyBadge.c: 244: return -1;
 28092                           ;	Return value of _nullifyBadge_irTxRegister is never used
 28093  34AF  0871               	movf	nullifyBadge_irTxRegister@badge,w
 28094  34B0  3E11               	addlw	17
 28095  34B1  0086               	movwf	6
 28096  34B2  3001               	movlw	1	; select bank2/3
 28097  34B3  0087               	movwf	7
 28098  34B4  1501               	bsf	1,2
 28099                           
 28100                           ;nullifyBadge.c: 248: return 0;
 28101                           ;	Return value of _nullifyBadge_irTxRegister is never used
 28102  34B5  0008               	return
 28103  34B6                     __end_of_nullifyBadge_irTxRegister:	
 28104                           
 28105                           	psect	text46
 28106  33B0                     __ptext46:	
 28107 ;; *************** function _nullifyBadge_irTxClr *****************
 28108 ;; Defined at:
 28109 ;;		line 270 in file "nullifyBadge.c"
 28110 ;; Parameters:    Size  Location     Type
 28111 ;;		None
 28112 ;; Auto vars:     Size  Location     Type
 28113 ;;		None
 28114 ;; Return value:  Size  Location     Type
 28115 ;;                  1    wreg      void 
 28116 ;; Registers used:
 28117 ;;		None
 28118 ;; Tracked objects:
 28119 ;;		On entry : 0/0
 28120 ;;		On exit  : 0/0
 28121 ;;		Unchanged: 0/0
 28122 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28123 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28124 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28125 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28126 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28127 ;;Total ram usage:        0 bytes
 28128 ;; Hardware stack levels used:    1
 28129 ;; Hardware stack levels required when called:    4
 28130 ;; This function calls:
 28131 ;;		Nothing
 28132 ;; This function is called by:
 28133 ;;		_flashy_Main
 28134 ;; This function uses a non-reentrant model
 28135 ;;
 28136                           
 28137                           
 28138                           ;psect for function _nullifyBadge_irTxClr
 28139  33B0                     _nullifyBadge_irTxClr:	
 28140                           
 28141                           ;incstack = 0
 28142                           ; Regs used in _nullifyBadge_irTxClr: []
 28143                           ;nullifyBadge.c: 272: do { LATBbits.LATB7 = 1; } while(0);
 28144  33B0  0022               	movlb	2	; select bank2
 28145  33B1  178D               	bsf	13,7	;volatile
 28146  33B2  0008               	return
 28147  33B3                     __end_of_nullifyBadge_irTxClr:	
 28148                           
 28149                           	psect	text47
 28150  33BA                     __ptext47:	
 28151 ;; *************** function _nullifyBadge_irGet *****************
 28152 ;; Defined at:
 28153 ;;		line 232 in file "nullifyBadge.c"
 28154 ;; Parameters:    Size  Location     Type
 28155 ;;		None
 28156 ;; Auto vars:     Size  Location     Type
 28157 ;;		None
 28158 ;; Return value:  Size  Location     Type
 28159 ;;                  1    wreg      unsigned char 
 28160 ;; Registers used:
 28161 ;;		wreg, status,2, status,0
 28162 ;; Tracked objects:
 28163 ;;		On entry : 0/0
 28164 ;;		On exit  : 0/0
 28165 ;;		Unchanged: 0/0
 28166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28167 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28168 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28169 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28170 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28171 ;;Total ram usage:        0 bytes
 28172 ;; Hardware stack levels used:    1
 28173 ;; Hardware stack levels required when called:    4
 28174 ;; This function calls:
 28175 ;;		Nothing
 28176 ;; This function is called by:
 28177 ;;		_flashy_Main
 28178 ;; This function uses a non-reentrant model
 28179 ;;
 28180                           
 28181                           
 28182                           ;psect for function _nullifyBadge_irGet
 28183  33BA                     _nullifyBadge_irGet:	
 28184                           
 28185                           ;nullifyBadge.c: 233: return PORTBbits.RB5;
 28186                           
 28187                           ;incstack = 0
 28188                           ; Regs used in _nullifyBadge_irGet: [wreg+status,2+status,0]
 28189  33BA  0020               	movlb	0	; select bank0
 28190  33BB  0E0D               	swapf	13,w	;volatile
 28191  33BC  0C89               	rrf	9,f
 28192  33BD  3901               	andlw	1
 28193  33BE  0008               	return
 28194  33BF                     __end_of_nullifyBadge_irGet:	
 28195                           
 28196                           	psect	text48
 28197  2882                     __ptext48:	
 28198 ;; *************** function _nullifyBadge_buttonsGet *****************
 28199 ;; Defined at:
 28200 ;;		line 187 in file "nullifyBadge.c"
 28201 ;; Parameters:    Size  Location     Type
 28202 ;;		None
 28203 ;; Auto vars:     Size  Location     Type
 28204 ;;  retVal          1    3[COMMON] unsigned char 
 28205 ;; Return value:  Size  Location     Type
 28206 ;;                  1    wreg      unsigned char 
 28207 ;; Registers used:
 28208 ;;		wreg, status,2, status,0
 28209 ;; Tracked objects:
 28210 ;;		On entry : 0/0
 28211 ;;		On exit  : 0/0
 28212 ;;		Unchanged: 0/0
 28213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28214 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28215 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28216 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28217 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28218 ;;Total ram usage:        3 bytes
 28219 ;; Hardware stack levels used:    1
 28220 ;; Hardware stack levels required when called:    4
 28221 ;; This function calls:
 28222 ;;		Nothing
 28223 ;; This function is called by:
 28224 ;;		_menu_Main
 28225 ;;		_flashy_Main
 28226 ;;		_locked_Main
 28227 ;;		_secret_Main
 28228 ;;		_slot_Main
 28229 ;;		_matrix_Main
 28230 ;; This function uses a non-reentrant model
 28231 ;;
 28232                           
 28233                           
 28234                           ;psect for function _nullifyBadge_buttonsGet
 28235  2882                     _nullifyBadge_buttonsGet:	
 28236                           
 28237                           ;nullifyBadge.c: 188: u8 retVal = 0x0F;
 28238                           
 28239                           ;incstack = 0
 28240                           ; Regs used in _nullifyBadge_buttonsGet: [wreg+status,2+status,0]
 28241  2882  300F               	movlw	15
 28242  2883  00F1               	movwf	??_nullifyBadge_buttonsGet
 28243  2884  0871               	movf	??_nullifyBadge_buttonsGet,w
 28244  2885  00F3               	movwf	nullifyBadge_buttonsGet@retVal
 28245                           
 28246                           ;nullifyBadge.c: 190: retVal &= ~(PORTCbits.RC5 << 0);
 28247  2886  0020               	movlb	0	; select bank0
 28248  2887  0E0E               	swapf	14,w	;volatile
 28249  2888  0C89               	rrf	9,f
 28250  2889  3901               	andlw	1
 28251  288A  3AFF               	xorlw	255
 28252  288B  00F1               	movwf	??_nullifyBadge_buttonsGet
 28253  288C  0871               	movf	??_nullifyBadge_buttonsGet,w
 28254  288D  05F3               	andwf	nullifyBadge_buttonsGet@retVal,f
 28255                           
 28256                           ;nullifyBadge.c: 191: retVal &= ~(PORTAbits.RA2 << 1);
 28257  288E  0C0C               	rrf	12,w	;volatile
 28258  288F  0C89               	rrf	9,f
 28259  2890  3901               	andlw	1
 28260  2891  0709               	addwf	9,w
 28261  2892  3AFF               	xorlw	255
 28262  2893  00F1               	movwf	??_nullifyBadge_buttonsGet
 28263  2894  0871               	movf	??_nullifyBadge_buttonsGet,w
 28264  2895  05F3               	andwf	nullifyBadge_buttonsGet@retVal,f
 28265                           
 28266                           ;nullifyBadge.c: 192: retVal &= ~(PORTAbits.RA4 << 2);
 28267  2896  0E0C               	swapf	12,w	;volatile
 28268  2897  3901               	andlw	1
 28269  2898  00F1               	movwf	??_nullifyBadge_buttonsGet
 28270  2899  3001               	movlw	1
 28271  289A                     u5025:	
 28272  289A  35F1               	lslf	??_nullifyBadge_buttonsGet,f
 28273  289B  3EFF               	addlw	-1
 28274  289C  1D03               	skipz
 28275  289D  289A               	goto	u5025
 28276  289E  3571               	lslf	??_nullifyBadge_buttonsGet,w
 28277  289F  3AFF               	xorlw	255
 28278  28A0  00F2               	movwf	??_nullifyBadge_buttonsGet+1
 28279  28A1  0872               	movf	??_nullifyBadge_buttonsGet+1,w
 28280  28A2  05F3               	andwf	nullifyBadge_buttonsGet@retVal,f
 28281                           
 28282                           ;nullifyBadge.c: 193: retVal &= ~(PORTAbits.RA5 << 3);
 28283  28A3  0E0C               	swapf	12,w	;volatile
 28284  28A4  0C89               	rrf	9,f
 28285  28A5  3901               	andlw	1
 28286  28A6  00F1               	movwf	??_nullifyBadge_buttonsGet
 28287  28A7  3002               	movlw	2
 28288  28A8                     u5035:	
 28289  28A8  35F1               	lslf	??_nullifyBadge_buttonsGet,f
 28290  28A9  3EFF               	addlw	-1
 28291  28AA  1D03               	skipz
 28292  28AB  28A8               	goto	u5035
 28293  28AC  3571               	lslf	??_nullifyBadge_buttonsGet,w
 28294  28AD  3AFF               	xorlw	255
 28295  28AE  00F2               	movwf	??_nullifyBadge_buttonsGet+1
 28296  28AF  0872               	movf	??_nullifyBadge_buttonsGet+1,w
 28297  28B0  05F3               	andwf	nullifyBadge_buttonsGet@retVal,f
 28298                           
 28299                           ;nullifyBadge.c: 195: return retVal;
 28300  28B1  0873               	movf	nullifyBadge_buttonsGet@retVal,w
 28301  28B2  0008               	return
 28302  28B3                     __end_of_nullifyBadge_buttonsGet:	
 28303                           
 28304                           	psect	text49
 28305  353F                     __ptext49:	
 28306 ;; *************** function _let_alternate *****************
 28307 ;; Defined at:
 28308 ;;		line 194 in file "main.c"
 28309 ;; Parameters:    Size  Location     Type
 28310 ;;  count           2   16[BANK0 ] unsigned int 
 28311 ;; Auto vars:     Size  Location     Type
 28312 ;;		None
 28313 ;; Return value:  Size  Location     Type
 28314 ;;                  1    wreg      void 
 28315 ;; Registers used:
 28316 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 28317 ;; Tracked objects:
 28318 ;;		On entry : 0/0
 28319 ;;		On exit  : 0/0
 28320 ;;		Unchanged: 0/0
 28321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28322 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28323 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28325 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28326 ;;Total ram usage:        2 bytes
 28327 ;; Hardware stack levels used:    1
 28328 ;; Hardware stack levels required when called:    9
 28329 ;; This function calls:
 28330 ;;		_nullifyBadge_userLedsSet
 28331 ;; This function is called by:
 28332 ;;		_flashy_Main
 28333 ;; This function uses a non-reentrant model
 28334 ;;
 28335                           
 28336                           
 28337                           ;psect for function _let_alternate
 28338  353F                     _let_alternate:	
 28339                           
 28340                           ;main.c: 195: if(count %2 == 1){
 28341                           
 28342                           ;incstack = 0
 28343                           ; Regs used in _let_alternate: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 28344  353F  0020               	movlb	0	; select bank0
 28345  3540  1C30               	btfss	let_alternate@count,0
 28346  3541  2D4A               	goto	l8373
 28347                           
 28348                           ;main.c: 196: nullifyBadge_userLedsSet(&badge_inst,43349);
 28349  3542  3055               	movlw	85
 28350  3543  00AD               	movwf	nullifyBadge_userLedsSet@userLedData
 28351  3544  30A9               	movlw	169
 28352  3545  00AE               	movwf	nullifyBadge_userLedsSet@userLedData+1
 28353  3546  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 28354  3547  31B4  24E6         	fcall	_nullifyBadge_userLedsSet
 28355                           
 28356                           ;main.c: 197: }
 28357  3549  0008               	return
 28358  354A                     l8373:	
 28359                           
 28360                           ;main.c: 198: else{
 28361                           ;main.c: 199: nullifyBadge_userLedsSet(&badge_inst,21162);
 28362  354A  30AA               	movlw	170
 28363  354B  0020               	movlb	0	; select bank0
 28364  354C  00AD               	movwf	nullifyBadge_userLedsSet@userLedData
 28365  354D  3052               	movlw	82
 28366  354E  00AE               	movwf	nullifyBadge_userLedsSet@userLedData+1
 28367  354F  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 28368  3550  31B4  24E6         	fcall	_nullifyBadge_userLedsSet
 28369  3552  0008               	return
 28370  3553                     __end_of_let_alternate:	
 28371                           
 28372                           	psect	text50
 28373  2AB5                     __ptext50:	
 28374 ;; *************** function _led_roundabout *****************
 28375 ;; Defined at:
 28376 ;;		line 159 in file "main.c"
 28377 ;; Parameters:    Size  Location     Type
 28378 ;;  counter         2   16[BANK0 ] unsigned int 
 28379 ;; Auto vars:     Size  Location     Type
 28380 ;;  size            2   22[BANK0 ] unsigned int 
 28381 ;;  leds            2   20[BANK0 ] unsigned int 
 28382 ;; Return value:  Size  Location     Type
 28383 ;;                  1    wreg      void 
 28384 ;; Registers used:
 28385 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 28386 ;; Tracked objects:
 28387 ;;		On entry : 0/0
 28388 ;;		On exit  : 0/0
 28389 ;;		Unchanged: 0/0
 28390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28391 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28392 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28393 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28394 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28395 ;;Total ram usage:        8 bytes
 28396 ;; Hardware stack levels used:    1
 28397 ;; Hardware stack levels required when called:    9
 28398 ;; This function calls:
 28399 ;;		___lwmod
 28400 ;;		_nullifyBadge_userLedsSet
 28401 ;; This function is called by:
 28402 ;;		_flashy_Main
 28403 ;; This function uses a non-reentrant model
 28404 ;;
 28405                           
 28406                           
 28407                           ;psect for function _led_roundabout
 28408  2AB5                     _led_roundabout:	
 28409                           
 28410                           ;main.c: 160: u16 size = sizeof(roundabout_leds) / sizeof(roundabout_leds[0]);
 28411                           
 28412                           ;incstack = 0
 28413                           ; Regs used in _led_roundabout: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 28414  2AB5  300E               	movlw	14
 28415  2AB6  0020               	movlb	0	; select bank0
 28416  2AB7  00B6               	movwf	led_roundabout@size
 28417  2AB8  3000               	movlw	0
 28418  2AB9  00B7               	movwf	led_roundabout@size+1
 28419                           
 28420                           ;main.c: 161: u16 leds = roundabout_leds[counter % size];
 28421  2ABA  0837               	movf	led_roundabout@size+1,w
 28422  2ABB  00AC               	movwf	___lwmod@divisor+1
 28423  2ABC  0836               	movf	led_roundabout@size,w
 28424  2ABD  00AB               	movwf	___lwmod@divisor
 28425  2ABE  0831               	movf	led_roundabout@counter+1,w
 28426  2ABF  00AE               	movwf	___lwmod@dividend+1
 28427  2AC0  0830               	movf	led_roundabout@counter,w
 28428  2AC1  00AD               	movwf	___lwmod@dividend
 28429  2AC2  31B7  2772  31AA   	fcall	___lwmod
 28430  2AC5  0020               	movlb	0	; select bank0
 28431  2AC6  082B               	movf	?___lwmod,w
 28432  2AC7  0709               	addwf	9,w
 28433  2AC8  3EBC               	addlw	(low (_roundabout_leds| (0+768)))& (0+255)
 28434  2AC9  0086               	movwf	6
 28435  2ACA  3003               	movlw	3	; select bank7/8
 28436  2ACB  0087               	movwf	7
 28437  2ACC  3F40               	moviw [0]fsr1
 28438  2ACD  00B4               	movwf	led_roundabout@leds
 28439  2ACE  3F41               	moviw [1]fsr1
 28440  2ACF  00B5               	movwf	led_roundabout@leds+1
 28441                           
 28442                           ;main.c: 163: size = sizeof(roundabout_leds_inverse) / sizeof(roundabout_leds_inverse[0]
      +                          );
 28443  2AD0  300E               	movlw	14
 28444  2AD1  00B6               	movwf	led_roundabout@size
 28445  2AD2  3000               	movlw	0
 28446  2AD3  00B7               	movwf	led_roundabout@size+1
 28447                           
 28448                           ;main.c: 164: leds |= roundabout_leds_inverse[counter % size];
 28449  2AD4  0837               	movf	led_roundabout@size+1,w
 28450  2AD5  00AC               	movwf	___lwmod@divisor+1
 28451  2AD6  0836               	movf	led_roundabout@size,w
 28452  2AD7  00AB               	movwf	___lwmod@divisor
 28453  2AD8  0831               	movf	led_roundabout@counter+1,w
 28454  2AD9  00AE               	movwf	___lwmod@dividend+1
 28455  2ADA  0830               	movf	led_roundabout@counter,w
 28456  2ADB  00AD               	movwf	___lwmod@dividend
 28457  2ADC  31B7  2772  31AA   	fcall	___lwmod
 28458  2ADF  0020               	movlb	0	; select bank0
 28459  2AE0  082B               	movf	?___lwmod,w
 28460  2AE1  0709               	addwf	9,w
 28461  2AE2  3EA0               	addlw	(low (_roundabout_leds_inverse| (0+768)))& (0+255)
 28462  2AE3  0086               	movwf	6
 28463  2AE4  3003               	movlw	3	; select bank7/8
 28464  2AE5  0087               	movwf	7
 28465  2AE6  3F40               	moviw [0]fsr1
 28466  2AE7  00B2               	movwf	??_led_roundabout
 28467  2AE8  3F41               	moviw [1]fsr1
 28468  2AE9  00B3               	movwf	??_led_roundabout+1
 28469  2AEA  0832               	movf	??_led_roundabout,w
 28470  2AEB  04B4               	iorwf	led_roundabout@leds,f
 28471  2AEC  0833               	movf	??_led_roundabout+1,w
 28472  2AED  04B5               	iorwf	led_roundabout@leds+1,f
 28473                           
 28474                           ;main.c: 166: nullifyBadge_userLedsSet(&badge_inst, leds);
 28475  2AEE  0835               	movf	led_roundabout@leds+1,w
 28476  2AEF  00AE               	movwf	nullifyBadge_userLedsSet@userLedData+1
 28477  2AF0  0834               	movf	led_roundabout@leds,w
 28478  2AF1  00AD               	movwf	nullifyBadge_userLedsSet@userLedData
 28479  2AF2  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 28480  2AF3  31B4  24E6         	fcall	_nullifyBadge_userLedsSet
 28481  2AF5  0008               	return
 28482  2AF6                     __end_of_led_roundabout:	
 28483                           
 28484                           	psect	text51
 28485  2C4E                     __ptext51:	
 28486 ;; *************** function _led_rand *****************
 28487 ;; Defined at:
 28488 ;;		line 179 in file "main.c"
 28489 ;; Parameters:    Size  Location     Type
 28490 ;;		None
 28491 ;; Auto vars:     Size  Location     Type
 28492 ;;  spark           2   27[BANK0 ] unsigned int 
 28493 ;; Return value:  Size  Location     Type
 28494 ;;                  1    wreg      void 
 28495 ;; Registers used:
 28496 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 28497 ;; Tracked objects:
 28498 ;;		On entry : 0/0
 28499 ;;		On exit  : 0/0
 28500 ;;		Unchanged: 0/0
 28501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28502 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28503 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28504 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28505 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28506 ;;Total ram usage:       10 bytes
 28507 ;; Hardware stack levels used:    1
 28508 ;; Hardware stack levels required when called:    9
 28509 ;; This function calls:
 28510 ;;		___almod
 28511 ;;		_nullifyBadge_userLedsSet
 28512 ;;		_rand
 28513 ;; This function is called by:
 28514 ;;		_flashy_Main
 28515 ;;		_slot_Finished_Animation
 28516 ;; This function uses a non-reentrant model
 28517 ;;
 28518                           
 28519                           
 28520                           ;psect for function _led_rand
 28521  2C4E                     _led_rand:	
 28522                           
 28523                           ;main.c: 181: u16 spark = rand() % 65535;
 28524                           
 28525                           ;incstack = 0
 28526                           ; Regs used in _led_rand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 28527  2C4E  3000               	movlw	0
 28528  2C4F  0020               	movlb	0	; select bank0
 28529  2C50  00AE               	movwf	___almod@divisor+3
 28530  2C51  3000               	movlw	0
 28531  2C52  00AD               	movwf	___almod@divisor+2
 28532  2C53  30FF               	movlw	255
 28533  2C54  00AC               	movwf	___almod@divisor+1
 28534  2C55  30FF               	movlw	255
 28535  2C56  00AB               	movwf	___almod@divisor
 28536  2C57  31AB  2338  31AC   	fcall	_rand
 28537  2C5A  0020               	movlb	0	; select bank0
 28538  2C5B  0824               	movf	?_rand,w
 28539  2C5C  00AF               	movwf	___almod@dividend
 28540  2C5D  0825               	movf	?_rand+1,w
 28541  2C5E  00B0               	movwf	___almod@dividend+1
 28542  2C5F  0D89               	rlf	9,f
 28543  2C60  3B89               	subwfb	9,f
 28544  2C61  0989               	comf	9,f
 28545  2C62  00B1               	movwf	___almod@dividend+2
 28546  2C63  00B2               	movwf	___almod@dividend+3
 28547  2C64  31A0  20F1  31AC   	fcall	___almod
 28548  2C67  0020               	movlb	0	; select bank0
 28549  2C68  082C               	movf	?___almod+1,w
 28550  2C69  00BC               	movwf	led_rand@spark+1
 28551  2C6A  082B               	movf	?___almod,w
 28552  2C6B  00BB               	movwf	led_rand@spark
 28553                           
 28554                           ;main.c: 182: if ( (spark | 64511) == 65535 ){
 28555  2C6C  30FF               	movlw	255
 28556  2C6D  00B3               	movwf	??_led_rand
 28557  2C6E  30FB               	movlw	251
 28558  2C6F  00B4               	movwf	??_led_rand+1
 28559  2C70  3000               	movlw	0
 28560  2C71  00B5               	movwf	??_led_rand+2
 28561  2C72  3000               	movlw	0
 28562  2C73  00B6               	movwf	??_led_rand+3
 28563  2C74  083B               	movf	led_rand@spark,w
 28564  2C75  00B7               	movwf	??_led_rand+4
 28565  2C76  083C               	movf	led_rand@spark+1,w
 28566  2C77  00B8               	movwf	??_led_rand+5
 28567  2C78  01B9               	clrf	??_led_rand+6
 28568  2C79  01BA               	clrf	??_led_rand+7
 28569  2C7A  0837               	movf	??_led_rand+4,w
 28570  2C7B  04B3               	iorwf	??_led_rand,f
 28571  2C7C  0838               	movf	??_led_rand+5,w
 28572  2C7D  04B4               	iorwf	??_led_rand+1,f
 28573  2C7E  0839               	movf	??_led_rand+6,w
 28574  2C7F  04B5               	iorwf	??_led_rand+2,f
 28575  2C80  083A               	movf	??_led_rand+7,w
 28576  2C81  04B6               	iorwf	??_led_rand+3,f
 28577  2C82  0A33               	incf	??_led_rand,w
 28578  2C83  1D03               	skipz
 28579  2C84  2C8E               	goto	l8279
 28580  2C85  0A34               	incf	??_led_rand+1,w
 28581  2C86  0435               	iorwf	??_led_rand+2,w
 28582  2C87  0436               	iorwf	??_led_rand+3,w
 28583  2C88  1D03               	btfss	3,2
 28584  2C89  2C8E               	goto	l8279
 28585                           
 28586                           ;main.c: 183: spark ^= 1024 ;
 28587  2C8A  3000               	movlw	0
 28588  2C8B  06BB               	xorwf	led_rand@spark,f
 28589  2C8C  3004               	movlw	4
 28590  2C8D  06BC               	xorwf	led_rand@spark+1,f
 28591  2C8E                     l8279:	
 28592                           
 28593                           ;main.c: 184: }
 28594                           ;main.c: 185: nullifyBadge_userLedsSet(&badge_inst,spark);
 28595  2C8E  083C               	movf	led_rand@spark+1,w
 28596  2C8F  00AE               	movwf	nullifyBadge_userLedsSet@userLedData+1
 28597  2C90  083B               	movf	led_rand@spark,w
 28598  2C91  00AD               	movwf	nullifyBadge_userLedsSet@userLedData
 28599  2C92  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 28600  2C93  31B4  24E6         	fcall	_nullifyBadge_userLedsSet
 28601  2C95  0008               	return
 28602  2C96                     __end_of_led_rand:	
 28603                           
 28604                           	psect	text52
 28605  2B38                     __ptext52:	
 28606 ;; *************** function _rand *****************
 28607 ;; Defined at:
 28608 ;;		line 12 in file "/Applications/microchip/xc8/v1.42/sources/common/rand.c"
 28609 ;; Parameters:    Size  Location     Type
 28610 ;;		None
 28611 ;; Auto vars:     Size  Location     Type
 28612 ;;		None
 28613 ;; Return value:  Size  Location     Type
 28614 ;;                  2    4[BANK0 ] int 
 28615 ;; Registers used:
 28616 ;;		wreg, status,2, status,0, pclath, cstack
 28617 ;; Tracked objects:
 28618 ;;		On entry : 0/0
 28619 ;;		On exit  : 0/0
 28620 ;;		Unchanged: 0/0
 28621 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28622 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28623 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28624 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28625 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28626 ;;Total ram usage:        7 bytes
 28627 ;; Hardware stack levels used:    1
 28628 ;; Hardware stack levels required when called:    5
 28629 ;; This function calls:
 28630 ;;		___lmul
 28631 ;; This function is called by:
 28632 ;;		_led_rand
 28633 ;;		_slot_Setup
 28634 ;;		_slot_Main
 28635 ;; This function uses a non-reentrant model
 28636 ;;
 28637                           
 28638                           
 28639                           ;psect for function _rand
 28640  2B38                     _rand:	
 28641                           
 28642                           ;incstack = 0
 28643                           ; Regs used in _rand: [wreg+status,2+status,0+pclath+cstack]
 28644  2B38  0021               	movlb	1	; select bank1
 28645  2B39  0856               	movf	(_randx+3)^(0+128),w
 28646  2B3A  00F4               	movwf	___lmul@multiplier+3
 28647  2B3B  0855               	movf	(_randx+2)^(0+128),w
 28648  2B3C  00F3               	movwf	___lmul@multiplier+2
 28649  2B3D  0854               	movf	(_randx+1)^(0+128),w
 28650  2B3E  00F2               	movwf	___lmul@multiplier+1
 28651  2B3F  0853               	movf	_randx^(0+128),w
 28652  2B40  00F1               	movwf	___lmul@multiplier
 28653  2B41  3041               	movlw	65
 28654  2B42  00F8               	movwf	___lmul@multiplicand+3
 28655  2B43  30C6               	movlw	198
 28656  2B44  00F7               	movwf	___lmul@multiplicand+2
 28657  2B45  304E               	movlw	78
 28658  2B46  00F6               	movwf	___lmul@multiplicand+1
 28659  2B47  306D               	movlw	109
 28660  2B48  00F5               	movwf	___lmul@multiplicand
 28661  2B49  31B7  27CE  31AB   	fcall	___lmul
 28662  2B4C  0874               	movf	?___lmul+3,w
 28663  2B4D  0021               	movlb	1	; select bank1
 28664  2B4E  00D6               	movwf	(_randx+3)^(0+128)
 28665  2B4F  0873               	movf	?___lmul+2,w
 28666  2B50  00D5               	movwf	(_randx+2)^(0+128)
 28667  2B51  0872               	movf	?___lmul+1,w
 28668  2B52  00D4               	movwf	(_randx+1)^(0+128)
 28669  2B53  0871               	movf	?___lmul,w
 28670  2B54  00D3               	movwf	_randx^(0+128)
 28671  2B55  3039               	movlw	57
 28672  2B56  07D3               	addwf	_randx^(0+128),f
 28673  2B57  3030               	movlw	48
 28674  2B58  3DD4               	addwfc	(_randx+1)^(0+128),f
 28675  2B59  3000               	movlw	0
 28676  2B5A  3DD5               	addwfc	(_randx+2)^(0+128),f
 28677  2B5B  3000               	movlw	0
 28678  2B5C  3DD6               	addwfc	(_randx+3)^(0+128),f
 28679  2B5D  0853               	movf	_randx^(0+128),w
 28680  2B5E  0020               	movlb	0	; select bank0
 28681  2B5F  00A6               	movwf	??_rand
 28682  2B60  0021               	movlb	1	; select bank1
 28683  2B61  0854               	movf	(_randx+1)^(0+128),w
 28684  2B62  0020               	movlb	0	; select bank0
 28685  2B63  00A7               	movwf	??_rand+1
 28686  2B64  0021               	movlb	1	; select bank1
 28687  2B65  0855               	movf	(_randx+2)^(0+128),w
 28688  2B66  0020               	movlb	0	; select bank0
 28689  2B67  00A8               	movwf	??_rand+2
 28690  2B68  0021               	movlb	1	; select bank1
 28691  2B69  0856               	movf	(_randx+3)^(0+128),w
 28692  2B6A  0020               	movlb	0	; select bank0
 28693  2B6B  00A9               	movwf	??_rand+3
 28694  2B6C  3010               	movlw	16
 28695  2B6D  00AA               	movwf	??_rand+4
 28696  2B6E                     u4605:	
 28697  2B6E  37A9               	asrf	??_rand+3,f
 28698  2B6F  0CA8               	rrf	??_rand+2,f
 28699  2B70  0CA7               	rrf	??_rand+1,f
 28700  2B71  0CA6               	rrf	??_rand,f
 28701  2B72  0BAA               	decfsz	??_rand+4,f
 28702  2B73  2B6E               	goto	u4605
 28703  2B74  30FF               	movlw	255
 28704  2B75  0526               	andwf	??_rand,w
 28705  2B76  00A4               	movwf	?_rand
 28706  2B77  307F               	movlw	127
 28707  2B78  0527               	andwf	??_rand+1,w
 28708  2B79  00A5               	movwf	?_rand+1
 28709  2B7A  0008               	return
 28710  2B7B                     __end_of_rand:	
 28711                           
 28712                           	psect	text53
 28713  37CE                     __ptext53:	
 28714 ;; *************** function ___lmul *****************
 28715 ;; Defined at:
 28716 ;;		line 15 in file "/Applications/microchip/xc8/v1.42/sources/common/Umul32.c"
 28717 ;; Parameters:    Size  Location     Type
 28718 ;;  multiplier      4    1[COMMON] unsigned long 
 28719 ;;  multiplicand    4    5[COMMON] unsigned long 
 28720 ;; Auto vars:     Size  Location     Type
 28721 ;;  product         4    0[BANK0 ] unsigned long 
 28722 ;; Return value:  Size  Location     Type
 28723 ;;                  4    1[COMMON] unsigned long 
 28724 ;; Registers used:
 28725 ;;		wreg, status,2, status,0
 28726 ;; Tracked objects:
 28727 ;;		On entry : 0/0
 28728 ;;		On exit  : 0/0
 28729 ;;		Unchanged: 0/0
 28730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28731 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28732 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28733 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28734 ;;      Totals:         8       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28735 ;;Total ram usage:       12 bytes
 28736 ;; Hardware stack levels used:    1
 28737 ;; Hardware stack levels required when called:    4
 28738 ;; This function calls:
 28739 ;;		Nothing
 28740 ;; This function is called by:
 28741 ;;		_rand
 28742 ;; This function uses a non-reentrant model
 28743 ;;
 28744                           
 28745                           
 28746                           ;psect for function ___lmul
 28747  37CE                     ___lmul:	
 28748                           
 28749                           ;incstack = 0
 28750                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 28751  37CE  3000               	movlw	0
 28752  37CF  0020               	movlb	0	; select bank0
 28753  37D0  00A3               	movwf	___lmul@product+3
 28754  37D1  3000               	movlw	0
 28755  37D2  00A2               	movwf	___lmul@product+2
 28756  37D3  3000               	movlw	0
 28757  37D4  00A1               	movwf	___lmul@product+1
 28758  37D5  3000               	movlw	0
 28759  37D6  00A0               	movwf	___lmul@product
 28760  37D7                     l8103:	
 28761  37D7  1C71               	btfss	___lmul@multiplier,0
 28762  37D8  2FE2               	goto	l8107
 28763  37D9  0875               	movf	___lmul@multiplicand,w
 28764  37DA  0020               	movlb	0	; select bank0
 28765  37DB  07A0               	addwf	___lmul@product,f
 28766  37DC  0876               	movf	___lmul@multiplicand+1,w
 28767  37DD  3DA1               	addwfc	___lmul@product+1,f
 28768  37DE  0877               	movf	___lmul@multiplicand+2,w
 28769  37DF  3DA2               	addwfc	___lmul@product+2,f
 28770  37E0  0878               	movf	___lmul@multiplicand+3,w
 28771  37E1  3DA3               	addwfc	___lmul@product+3,f
 28772  37E2                     l8107:	
 28773  37E2  3001               	movlw	1
 28774  37E3                     u4555:	
 28775  37E3  35F5               	lslf	___lmul@multiplicand,f
 28776  37E4  0DF6               	rlf	___lmul@multiplicand+1,f
 28777  37E5  0DF7               	rlf	___lmul@multiplicand+2,f
 28778  37E6  0DF8               	rlf	___lmul@multiplicand+3,f
 28779  37E7  0B89               	decfsz	9,f
 28780  37E8  2FE3               	goto	u4555
 28781  37E9  3001               	movlw	1
 28782  37EA                     u4565:	
 28783  37EA  36F4               	lsrf	___lmul@multiplier+3,f
 28784  37EB  0CF3               	rrf	___lmul@multiplier+2,f
 28785  37EC  0CF2               	rrf	___lmul@multiplier+1,f
 28786  37ED  0CF1               	rrf	___lmul@multiplier,f
 28787  37EE  0B89               	decfsz	9,f
 28788  37EF  2FEA               	goto	u4565
 28789  37F0  0874               	movf	___lmul@multiplier+3,w
 28790  37F1  0473               	iorwf	___lmul@multiplier+2,w
 28791  37F2  0472               	iorwf	___lmul@multiplier+1,w
 28792  37F3  0471               	iorwf	___lmul@multiplier,w
 28793  37F4  1D03               	skipz
 28794  37F5  2FD7               	goto	l8103
 28795  37F6  0020               	movlb	0	; select bank0
 28796  37F7  0823               	movf	___lmul@product+3,w
 28797  37F8  00F4               	movwf	?___lmul+3
 28798  37F9  0822               	movf	___lmul@product+2,w
 28799  37FA  00F3               	movwf	?___lmul+2
 28800  37FB  0821               	movf	___lmul@product+1,w
 28801  37FC  00F2               	movwf	?___lmul+1
 28802  37FD  0820               	movf	___lmul@product,w
 28803  37FE  00F1               	movwf	?___lmul
 28804  37FF  0008               	return
 28805  3800                     __end_of___lmul:	
 28806                           
 28807                           	psect	text54
 28808  20F1                     __ptext54:	
 28809 ;; *************** function ___almod *****************
 28810 ;; Defined at:
 28811 ;;		line 5 in file "/Applications/microchip/xc8/v1.42/sources/common/almod.c"
 28812 ;; Parameters:    Size  Location     Type
 28813 ;;  divisor         4   11[BANK0 ] long 
 28814 ;;  dividend        4   15[BANK0 ] long 
 28815 ;; Auto vars:     Size  Location     Type
 28816 ;;  sign            1   11[COMMON] unsigned char 
 28817 ;;  counter         1   10[COMMON] unsigned char 
 28818 ;; Return value:  Size  Location     Type
 28819 ;;                  4   11[BANK0 ] long 
 28820 ;; Registers used:
 28821 ;;		wreg, status,2, status,0
 28822 ;; Tracked objects:
 28823 ;;		On entry : 0/0
 28824 ;;		On exit  : 0/0
 28825 ;;		Unchanged: 0/0
 28826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28827 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28828 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28829 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28830 ;;      Totals:         3       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28831 ;;Total ram usage:       11 bytes
 28832 ;; Hardware stack levels used:    1
 28833 ;; Hardware stack levels required when called:    4
 28834 ;; This function calls:
 28835 ;;		Nothing
 28836 ;; This function is called by:
 28837 ;;		_led_rand
 28838 ;; This function uses a non-reentrant model
 28839 ;;
 28840                           
 28841                           
 28842                           ;psect for function ___almod
 28843  20F1                     ___almod:	
 28844                           
 28845                           ;incstack = 0
 28846                           ; Regs used in ___almod: [wreg+status,2+status,0]
 28847  20F1  01FB               	clrf	___almod@sign
 28848  20F2  0020               	movlb	0	; select bank0
 28849  20F3  1FB2               	btfss	___almod@dividend+3,7
 28850  20F4  2902               	goto	l1748
 28851  20F5  09AF               	comf	___almod@dividend,f
 28852  20F6  09B0               	comf	___almod@dividend+1,f
 28853  20F7  09B1               	comf	___almod@dividend+2,f
 28854  20F8  09B2               	comf	___almod@dividend+3,f
 28855  20F9  0AAF               	incf	___almod@dividend,f
 28856  20FA  1903               	skipnz
 28857  20FB  0AB0               	incf	___almod@dividend+1,f
 28858  20FC  1903               	skipnz
 28859  20FD  0AB1               	incf	___almod@dividend+2,f
 28860  20FE  1903               	skipnz
 28861  20FF  0AB2               	incf	___almod@dividend+3,f
 28862  2100  01FB               	clrf	___almod@sign
 28863  2101  0AFB               	incf	___almod@sign,f
 28864  2102                     l1748:	
 28865  2102  1FAE               	btfss	___almod@divisor+3,7
 28866  2103  290F               	goto	l8155
 28867  2104  09AB               	comf	___almod@divisor,f
 28868  2105  09AC               	comf	___almod@divisor+1,f
 28869  2106  09AD               	comf	___almod@divisor+2,f
 28870  2107  09AE               	comf	___almod@divisor+3,f
 28871  2108  0AAB               	incf	___almod@divisor,f
 28872  2109  1903               	skipnz
 28873  210A  0AAC               	incf	___almod@divisor+1,f
 28874  210B  1903               	skipnz
 28875  210C  0AAD               	incf	___almod@divisor+2,f
 28876  210D  1903               	skipnz
 28877  210E  0AAE               	incf	___almod@divisor+3,f
 28878  210F                     l8155:	
 28879  210F  082E               	movf	___almod@divisor+3,w
 28880  2110  042D               	iorwf	___almod@divisor+2,w
 28881  2111  042C               	iorwf	___almod@divisor+1,w
 28882  2112  042B               	iorwf	___almod@divisor,w
 28883  2113  1903               	skipnz
 28884  2114  2948               	goto	l8171
 28885  2115  01FA               	clrf	___almod@counter
 28886  2116  0AFA               	incf	___almod@counter,f
 28887  2117                     l8161:	
 28888  2117  1BAE               	btfsc	___almod@divisor+3,7
 28889  2118  2925               	goto	l8163
 28890  2119  3001               	movlw	1
 28891  211A                     u4645:	
 28892  211A  35AB               	lslf	___almod@divisor,f
 28893  211B  0DAC               	rlf	___almod@divisor+1,f
 28894  211C  0DAD               	rlf	___almod@divisor+2,f
 28895  211D  0DAE               	rlf	___almod@divisor+3,f
 28896  211E  0B89               	decfsz	9,f
 28897  211F  291A               	goto	u4645
 28898  2120  3001               	movlw	1
 28899  2121  00F9               	movwf	??___almod
 28900  2122  0879               	movf	??___almod,w
 28901  2123  07FA               	addwf	___almod@counter,f
 28902  2124  2917               	goto	l8161
 28903  2125                     l8163:	
 28904  2125  082E               	movf	___almod@divisor+3,w
 28905  2126  0232               	subwf	___almod@dividend+3,w
 28906  2127  1D03               	skipz
 28907  2128  2933               	goto	u4665
 28908  2129  082D               	movf	___almod@divisor+2,w
 28909  212A  0231               	subwf	___almod@dividend+2,w
 28910  212B  1D03               	skipz
 28911  212C  2933               	goto	u4665
 28912  212D  082C               	movf	___almod@divisor+1,w
 28913  212E  0230               	subwf	___almod@dividend+1,w
 28914  212F  1D03               	skipz
 28915  2130  2933               	goto	u4665
 28916  2131  082B               	movf	___almod@divisor,w
 28917  2132  022F               	subwf	___almod@dividend,w
 28918  2133                     u4665:	
 28919  2133  1C03               	skipc
 28920  2134  293D               	goto	l8167
 28921  2135  082B               	movf	___almod@divisor,w
 28922  2136  02AF               	subwf	___almod@dividend,f
 28923  2137  082C               	movf	___almod@divisor+1,w
 28924  2138  3BB0               	subwfb	___almod@dividend+1,f
 28925  2139  082D               	movf	___almod@divisor+2,w
 28926  213A  3BB1               	subwfb	___almod@dividend+2,f
 28927  213B  082E               	movf	___almod@divisor+3,w
 28928  213C  3BB2               	subwfb	___almod@dividend+3,f
 28929  213D                     l8167:	
 28930  213D  3001               	movlw	1
 28931  213E                     u4675:	
 28932  213E  36AE               	lsrf	___almod@divisor+3,f
 28933  213F  0CAD               	rrf	___almod@divisor+2,f
 28934  2140  0CAC               	rrf	___almod@divisor+1,f
 28935  2141  0CAB               	rrf	___almod@divisor,f
 28936  2142  0B89               	decfsz	9,f
 28937  2143  293E               	goto	u4675
 28938  2144  3001               	movlw	1
 28939  2145  02FA               	subwf	___almod@counter,f
 28940  2146  1D03               	btfss	3,2
 28941  2147  2925               	goto	l8163
 28942  2148                     l8171:	
 28943  2148  087B               	movf	___almod@sign,w
 28944  2149  1903               	btfsc	3,2
 28945  214A  2956               	goto	l8175
 28946  214B  09AF               	comf	___almod@dividend,f
 28947  214C  09B0               	comf	___almod@dividend+1,f
 28948  214D  09B1               	comf	___almod@dividend+2,f
 28949  214E  09B2               	comf	___almod@dividend+3,f
 28950  214F  0AAF               	incf	___almod@dividend,f
 28951  2150  1903               	skipnz
 28952  2151  0AB0               	incf	___almod@dividend+1,f
 28953  2152  1903               	skipnz
 28954  2153  0AB1               	incf	___almod@dividend+2,f
 28955  2154  1903               	skipnz
 28956  2155  0AB2               	incf	___almod@dividend+3,f
 28957  2156                     l8175:	
 28958  2156  0832               	movf	___almod@dividend+3,w
 28959  2157  00AE               	movwf	?___almod+3
 28960  2158  0831               	movf	___almod@dividend+2,w
 28961  2159  00AD               	movwf	?___almod+2
 28962  215A  0830               	movf	___almod@dividend+1,w
 28963  215B  00AC               	movwf	?___almod+1
 28964  215C  082F               	movf	___almod@dividend,w
 28965  215D  00AB               	movwf	?___almod
 28966  215E  0008               	return
 28967  215F                     __end_of___almod:	
 28968                           
 28969                           	psect	text55
 28970  2A74                     __ptext55:	
 28971 ;; *************** function _led_curtain *****************
 28972 ;; Defined at:
 28973 ;;		line 169 in file "main.c"
 28974 ;; Parameters:    Size  Location     Type
 28975 ;;  counter         2   16[BANK0 ] unsigned int 
 28976 ;; Auto vars:     Size  Location     Type
 28977 ;;  size            2   22[BANK0 ] unsigned int 
 28978 ;;  leds            2   20[BANK0 ] unsigned int 
 28979 ;; Return value:  Size  Location     Type
 28980 ;;                  1    wreg      void 
 28981 ;; Registers used:
 28982 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 28983 ;; Tracked objects:
 28984 ;;		On entry : 0/0
 28985 ;;		On exit  : 0/0
 28986 ;;		Unchanged: 0/0
 28987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28988 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28989 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28990 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28991 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28992 ;;Total ram usage:        8 bytes
 28993 ;; Hardware stack levels used:    1
 28994 ;; Hardware stack levels required when called:    9
 28995 ;; This function calls:
 28996 ;;		___lwmod
 28997 ;;		_nullifyBadge_userLedsSet
 28998 ;; This function is called by:
 28999 ;;		_flashy_Main
 29000 ;;		_matrix_Main
 29001 ;; This function uses a non-reentrant model
 29002 ;;
 29003                           
 29004                           
 29005                           ;psect for function _led_curtain
 29006  2A74                     _led_curtain:	
 29007                           
 29008                           ;main.c: 170: u16 size = sizeof(curtain_leds) / sizeof(curtain_leds[0]);
 29009                           
 29010                           ;incstack = 0
 29011                           ; Regs used in _led_curtain: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 29012  2A74  300E               	movlw	14
 29013  2A75  0020               	movlb	0	; select bank0
 29014  2A76  00B6               	movwf	led_curtain@size
 29015  2A77  3000               	movlw	0
 29016  2A78  00B7               	movwf	led_curtain@size+1
 29017                           
 29018                           ;main.c: 171: u16 leds = curtain_leds[counter % size];
 29019  2A79  0837               	movf	led_curtain@size+1,w
 29020  2A7A  00AC               	movwf	___lwmod@divisor+1
 29021  2A7B  0836               	movf	led_curtain@size,w
 29022  2A7C  00AB               	movwf	___lwmod@divisor
 29023  2A7D  0831               	movf	led_curtain@counter+1,w
 29024  2A7E  00AE               	movwf	___lwmod@dividend+1
 29025  2A7F  0830               	movf	led_curtain@counter,w
 29026  2A80  00AD               	movwf	___lwmod@dividend
 29027  2A81  31B7  2772  31AA   	fcall	___lwmod
 29028  2A84  0020               	movlb	0	; select bank0
 29029  2A85  082B               	movf	?___lwmod,w
 29030  2A86  0709               	addwf	9,w
 29031  2A87  3E3C               	addlw	(low (_curtain_leds| (0+1024)))& (0+255)
 29032  2A88  0086               	movwf	6
 29033  2A89  3004               	movlw	4	; select bank8/9
 29034  2A8A  0087               	movwf	7
 29035  2A8B  3F40               	moviw [0]fsr1
 29036  2A8C  00B4               	movwf	led_curtain@leds
 29037  2A8D  3F41               	moviw [1]fsr1
 29038  2A8E  00B5               	movwf	led_curtain@leds+1
 29039                           
 29040                           ;main.c: 173: size = sizeof(curtain_leds_inverse) / sizeof(curtain_leds_inverse[0]);
 29041  2A8F  300E               	movlw	14
 29042  2A90  00B6               	movwf	led_curtain@size
 29043  2A91  3000               	movlw	0
 29044  2A92  00B7               	movwf	led_curtain@size+1
 29045                           
 29046                           ;main.c: 174: leds |= curtain_leds_inverse[counter % size];
 29047  2A93  0837               	movf	led_curtain@size+1,w
 29048  2A94  00AC               	movwf	___lwmod@divisor+1
 29049  2A95  0836               	movf	led_curtain@size,w
 29050  2A96  00AB               	movwf	___lwmod@divisor
 29051  2A97  0831               	movf	led_curtain@counter+1,w
 29052  2A98  00AE               	movwf	___lwmod@dividend+1
 29053  2A99  0830               	movf	led_curtain@counter,w
 29054  2A9A  00AD               	movwf	___lwmod@dividend
 29055  2A9B  31B7  2772  31AA   	fcall	___lwmod
 29056  2A9E  0020               	movlb	0	; select bank0
 29057  2A9F  082B               	movf	?___lwmod,w
 29058  2AA0  0709               	addwf	9,w
 29059  2AA1  3E20               	addlw	(low (_curtain_leds_inverse| (0+1024)))& (0+255)
 29060  2AA2  0086               	movwf	6
 29061  2AA3  3004               	movlw	4	; select bank8/9
 29062  2AA4  0087               	movwf	7
 29063  2AA5  3F40               	moviw [0]fsr1
 29064  2AA6  00B2               	movwf	??_led_curtain
 29065  2AA7  3F41               	moviw [1]fsr1
 29066  2AA8  00B3               	movwf	??_led_curtain+1
 29067  2AA9  0832               	movf	??_led_curtain,w
 29068  2AAA  04B4               	iorwf	led_curtain@leds,f
 29069  2AAB  0833               	movf	??_led_curtain+1,w
 29070  2AAC  04B5               	iorwf	led_curtain@leds+1,f
 29071                           
 29072                           ;main.c: 176: nullifyBadge_userLedsSet(&badge_inst, leds);
 29073  2AAD  0835               	movf	led_curtain@leds+1,w
 29074  2AAE  00AE               	movwf	nullifyBadge_userLedsSet@userLedData+1
 29075  2AAF  0834               	movf	led_curtain@leds,w
 29076  2AB0  00AD               	movwf	nullifyBadge_userLedsSet@userLedData
 29077  2AB1  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 29078  2AB2  31B4  24E6         	fcall	_nullifyBadge_userLedsSet
 29079  2AB4  0008               	return
 29080  2AB5                     __end_of_led_curtain:	
 29081                           
 29082                           	psect	text56
 29083  33F0                     __ptext56:	
 29084 ;; *************** function _led_circle *****************
 29085 ;; Defined at:
 29086 ;;		line 188 in file "main.c"
 29087 ;; Parameters:    Size  Location     Type
 29088 ;;  count           2   16[BANK0 ] unsigned int 
 29089 ;; Auto vars:     Size  Location     Type
 29090 ;;		None
 29091 ;; Return value:  Size  Location     Type
 29092 ;;                  1    wreg      void 
 29093 ;; Registers used:
 29094 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 29095 ;; Tracked objects:
 29096 ;;		On entry : 0/0
 29097 ;;		On exit  : 0/0
 29098 ;;		Unchanged: 0/0
 29099 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 29100 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29101 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29102 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29103 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29104 ;;Total ram usage:        2 bytes
 29105 ;; Hardware stack levels used:    1
 29106 ;; Hardware stack levels required when called:    9
 29107 ;; This function calls:
 29108 ;;		_nullifyBadge_userLedsSet
 29109 ;; This function is called by:
 29110 ;;		_flashy_Main
 29111 ;;		_slot_Running_Animation
 29112 ;; This function uses a non-reentrant model
 29113 ;;
 29114                           
 29115                           
 29116                           ;psect for function _led_circle
 29117  33F0                     _led_circle:	
 29118                           
 29119                           ;main.c: 190: nullifyBadge_userLedsSet(&badge_inst,count);
 29120                           
 29121                           ;incstack = 0
 29122                           ; Regs used in _led_circle: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 29123  33F0  0020               	movlb	0	; select bank0
 29124  33F1  0831               	movf	led_circle@count+1,w
 29125  33F2  00AE               	movwf	nullifyBadge_userLedsSet@userLedData+1
 29126  33F3  0830               	movf	led_circle@count,w
 29127  33F4  00AD               	movwf	nullifyBadge_userLedsSet@userLedData
 29128  33F5  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 29129  33F6  31B4  24E6         	fcall	_nullifyBadge_userLedsSet
 29130  33F8  0008               	return
 29131  33F9                     __end_of_led_circle:	
 29132                           
 29133                           	psect	text57
 29134  208C                     __ptext57:	
 29135 ;; *************** function _led_Parody *****************
 29136 ;; Defined at:
 29137 ;;		line 203 in file "main.c"
 29138 ;; Parameters:    Size  Location     Type
 29139 ;;  count           2   16[BANK0 ] unsigned int 
 29140 ;; Auto vars:     Size  Location     Type
 29141 ;;  size            2   22[BANK0 ] unsigned int 
 29142 ;;  leds            2   20[BANK0 ] unsigned int 
 29143 ;; Return value:  Size  Location     Type
 29144 ;;                  1    wreg      void 
 29145 ;; Registers used:
 29146 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 29147 ;; Tracked objects:
 29148 ;;		On entry : 0/0
 29149 ;;		On exit  : 0/0
 29150 ;;		Unchanged: 0/0
 29151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 29152 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29153 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29154 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29155 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29156 ;;Total ram usage:        8 bytes
 29157 ;; Hardware stack levels used:    1
 29158 ;; Hardware stack levels required when called:    9
 29159 ;; This function calls:
 29160 ;;		___lwmod
 29161 ;;		_nullifyBadge_userLedsSet
 29162 ;; This function is called by:
 29163 ;;		_flashy_Main
 29164 ;;		_matrix_Main
 29165 ;; This function uses a non-reentrant model
 29166 ;;
 29167                           
 29168                           
 29169                           ;psect for function _led_Parody
 29170  208C                     _led_Parody:	
 29171                           
 29172                           ;main.c: 204: u16 size;
 29173                           ;main.c: 205: u16 leds;
 29174                           ;main.c: 207: if (count % 30 == 0){
 29175                           
 29176                           ;incstack = 0
 29177                           ; Regs used in _led_Parody: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 29178  208C  301E               	movlw	30
 29179  208D  0020               	movlb	0	; select bank0
 29180  208E  00AB               	movwf	___lwmod@divisor
 29181  208F  3000               	movlw	0
 29182  2090  00AC               	movwf	___lwmod@divisor+1
 29183  2091  0831               	movf	led_Parody@count+1,w
 29184  2092  00AE               	movwf	___lwmod@dividend+1
 29185  2093  0830               	movf	led_Parody@count,w
 29186  2094  00AD               	movwf	___lwmod@dividend
 29187  2095  31B7  2772  31A0   	fcall	___lwmod
 29188  2098  0020               	movlb	0	; select bank0
 29189  2099  082B               	movf	?___lwmod,w
 29190  209A  042C               	iorwf	?___lwmod+1,w
 29191  209B  1D03               	btfss	3,2
 29192  209C  28A2               	goto	l625
 29193                           
 29194                           ;main.c: 208: oddeven ^= 1 ;
 29195  209D  3001               	movlw	1
 29196  209E  0021               	movlb	1	; select bank1
 29197  209F  06B8               	xorwf	_oddeven^(0+128),f
 29198  20A0  3000               	movlw	0
 29199  20A1  06B9               	xorwf	(_oddeven+1)^(0+128),f
 29200  20A2                     l625:	
 29201                           
 29202                           ;main.c: 209: }
 29203                           ;main.c: 211: if(count %2 == oddeven){
 29204  20A2  3001               	movlw	1
 29205  20A3  0020               	movlb	0	; select bank0
 29206  20A4  0530               	andwf	led_Parody@count,w
 29207  20A5  00B2               	movwf	??_led_Parody
 29208  20A6  3000               	movlw	0
 29209  20A7  0531               	andwf	led_Parody@count+1,w
 29210  20A8  00B3               	movwf	??_led_Parody+1
 29211  20A9  0021               	movlb	1	; select bank1
 29212  20AA  0839               	movf	(_oddeven+1)^(0+128),w
 29213  20AB  0020               	movlb	0	; select bank0
 29214  20AC  0633               	xorwf	??_led_Parody+1,w
 29215  20AD  1D03               	skipz
 29216  20AE  28B3               	goto	u5015
 29217  20AF  0021               	movlb	1	; select bank1
 29218  20B0  0838               	movf	_oddeven^(0+128),w
 29219  20B1  0020               	movlb	0	; select bank0
 29220  20B2  0632               	xorwf	??_led_Parody,w
 29221  20B3                     u5015:	
 29222  20B3  1D03               	skipz
 29223  20B4  28CF               	goto	l8383
 29224                           
 29225                           ;main.c: 213: size = sizeof(roundabout_leds) / sizeof(roundabout_leds[0]);
 29226  20B5  300E               	movlw	14
 29227  20B6  00B6               	movwf	led_Parody@size
 29228  20B7  3000               	movlw	0
 29229  20B8  00B7               	movwf	led_Parody@size+1
 29230                           
 29231                           ;main.c: 214: leds = roundabout_leds[count % size];
 29232  20B9  0837               	movf	led_Parody@size+1,w
 29233  20BA  00AC               	movwf	___lwmod@divisor+1
 29234  20BB  0836               	movf	led_Parody@size,w
 29235  20BC  00AB               	movwf	___lwmod@divisor
 29236  20BD  0831               	movf	led_Parody@count+1,w
 29237  20BE  00AE               	movwf	___lwmod@dividend+1
 29238  20BF  0830               	movf	led_Parody@count,w
 29239  20C0  00AD               	movwf	___lwmod@dividend
 29240  20C1  31B7  2772  31A0   	fcall	___lwmod
 29241  20C4  0020               	movlb	0	; select bank0
 29242  20C5  082B               	movf	?___lwmod,w
 29243  20C6  0709               	addwf	9,w
 29244  20C7  3EBC               	addlw	(low (_roundabout_leds| (0+768)))& (0+255)
 29245  20C8  0086               	movwf	6
 29246  20C9  3003               	movlw	3	; select bank7/8
 29247  20CA  0087               	movwf	7
 29248  20CB  3F40               	moviw [0]fsr1
 29249  20CC  00B4               	movwf	led_Parody@leds
 29250  20CD  3F41               	moviw [1]fsr1
 29251  20CE  28E8               	goto	L15
 29252  20CF                     l8383:	
 29253                           ;main.c: 215: }
 29254                           
 29255                           
 29256                           ;main.c: 216: else{
 29257                           ;main.c: 217: size = sizeof(roundabout_leds_inverse) / sizeof(roundabout_leds_inverse[0]
      +                          );
 29258  20CF  300E               	movlw	14
 29259  20D0  00B6               	movwf	led_Parody@size
 29260  20D1  3000               	movlw	0
 29261  20D2  00B7               	movwf	led_Parody@size+1
 29262                           
 29263                           ;main.c: 218: leds = roundabout_leds_inverse[count % size];
 29264  20D3  0837               	movf	led_Parody@size+1,w
 29265  20D4  00AC               	movwf	___lwmod@divisor+1
 29266  20D5  0836               	movf	led_Parody@size,w
 29267  20D6  00AB               	movwf	___lwmod@divisor
 29268  20D7  0831               	movf	led_Parody@count+1,w
 29269  20D8  00AE               	movwf	___lwmod@dividend+1
 29270  20D9  0830               	movf	led_Parody@count,w
 29271  20DA  00AD               	movwf	___lwmod@dividend
 29272  20DB  31B7  2772  31A0   	fcall	___lwmod
 29273  20DE  0020               	movlb	0	; select bank0
 29274  20DF  082B               	movf	?___lwmod,w
 29275  20E0  0709               	addwf	9,w
 29276  20E1  3EA0               	addlw	(low (_roundabout_leds_inverse| (0+768)))& (0+255)
 29277  20E2  0086               	movwf	6
 29278  20E3  3003               	movlw	3	; select bank7/8
 29279  20E4  0087               	movwf	7
 29280  20E5  3F40               	moviw [0]fsr1
 29281  20E6  00B4               	movwf	led_Parody@leds
 29282  20E7  3F41               	moviw [1]fsr1
 29283  20E8                     L15:	
 29284  20E8  00B5               	movwf	led_Parody@leds+1
 29285                           
 29286                           ;main.c: 219: }
 29287                           ;main.c: 220: nullifyBadge_userLedsSet(&badge_inst, leds);
 29288  20E9  0835               	movf	led_Parody@leds+1,w
 29289  20EA  00AE               	movwf	nullifyBadge_userLedsSet@userLedData+1
 29290  20EB  0834               	movf	led_Parody@leds,w
 29291  20EC  00AD               	movwf	nullifyBadge_userLedsSet@userLedData
 29292  20ED  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 29293  20EE  31B4  24E6         	fcall	_nullifyBadge_userLedsSet
 29294  20F0  0008               	return
 29295  20F1                     __end_of_led_Parody:	
 29296                           
 29297                           	psect	text58
 29298  34E6                     __ptext58:	
 29299 ;; *************** function _nullifyBadge_userLedsSet *****************
 29300 ;; Defined at:
 29301 ;;		line 164 in file "nullifyBadge.c"
 29302 ;; Parameters:    Size  Location     Type
 29303 ;;  badge           1    wreg     PTR struct t_nullifyBadg
 29304 ;;		 -> badge_inst(18), 
 29305 ;;  userLedData     2   13[BANK0 ] unsigned int 
 29306 ;; Auto vars:     Size  Location     Type
 29307 ;;  badge           1   15[BANK0 ] PTR struct t_nullifyBadg
 29308 ;;		 -> badge_inst(18), 
 29309 ;; Return value:  Size  Location     Type
 29310 ;;                  1    wreg      void 
 29311 ;; Registers used:
 29312 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 29313 ;; Tracked objects:
 29314 ;;		On entry : 0/0
 29315 ;;		On exit  : 0/0
 29316 ;;		Unchanged: 0/0
 29317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 29318 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29319 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29320 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29321 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29322 ;;Total ram usage:        3 bytes
 29323 ;; Hardware stack levels used:    1
 29324 ;; Hardware stack levels required when called:    8
 29325 ;; This function calls:
 29326 ;;		_displayL2_SetUserLeds
 29327 ;; This function is called by:
 29328 ;;		_led_roundabout
 29329 ;;		_led_curtain
 29330 ;;		_led_rand
 29331 ;;		_led_circle
 29332 ;;		_let_alternate
 29333 ;;		_led_Parody
 29334 ;;		_menu_display_option
 29335 ;;		_flashy_Main
 29336 ;;		_locked_Main
 29337 ;; This function uses a non-reentrant model
 29338 ;;
 29339                           
 29340                           
 29341                           ;psect for function _nullifyBadge_userLedsSet
 29342  34E6                     _nullifyBadge_userLedsSet:	
 29343                           
 29344                           ;incstack = 0
 29345                           ; Regs used in _nullifyBadge_userLedsSet: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 29346                           ;nullifyBadge_userLedsSet@badge stored from wreg
 29347  34E6  0020               	movlb	0	; select bank0
 29348  34E7  00AF               	movwf	nullifyBadge_userLedsSet@badge
 29349                           
 29350                           ;nullifyBadge.c: 165: if (badge_locked) {
 29351  34E8  0021               	movlb	1	; select bank1
 29352  34E9  0844               	movf	_badge_locked^(0+128),w
 29353  34EA  1903               	btfsc	3,2
 29354  34EB  2CEE               	goto	l8135
 29355                           
 29356                           ;nullifyBadge.c: 166: userLedData |= 1024;
 29357  34EC  0020               	movlb	0	; select bank0
 29358  34ED  152E               	bsf	nullifyBadge_userLedsSet@userLedData+1,2
 29359  34EE                     l8135:	
 29360                           
 29361                           ;nullifyBadge.c: 167: }
 29362                           ;nullifyBadge.c: 168: displayL2_SetUserLeds(&badge->display, userLedData);
 29363  34EE  0020               	movlb	0	; select bank0
 29364  34EF  082E               	movf	nullifyBadge_userLedsSet@userLedData+1,w
 29365  34F0  00AC               	movwf	displayL2_SetUserLeds@userLedData+1
 29366  34F1  082D               	movf	nullifyBadge_userLedsSet@userLedData,w
 29367  34F2  00AB               	movwf	displayL2_SetUserLeds@userLedData
 29368  34F3  082F               	movf	nullifyBadge_userLedsSet@badge,w
 29369  34F4  31B6  269E         	fcall	_displayL2_SetUserLeds
 29370  34F6  0008               	return
 29371  34F7                     __end_of_nullifyBadge_userLedsSet:	
 29372                           
 29373                           	psect	text59
 29374  369E                     __ptext59:	
 29375 ;; *************** function _displayL2_SetUserLeds *****************
 29376 ;; Defined at:
 29377 ;;		line 88 in file "nullifyBadge_displayL2.c"
 29378 ;; Parameters:    Size  Location     Type
 29379 ;;  display         1    wreg     PTR struct t_nullifyDisp
 29380 ;;		 -> badge_inst(18), 
 29381 ;;  userLedData     2   11[BANK0 ] unsigned int 
 29382 ;; Auto vars:     Size  Location     Type
 29383 ;;  display         1   11[COMMON] PTR struct t_nullifyDisp
 29384 ;;		 -> badge_inst(18), 
 29385 ;; Return value:  Size  Location     Type
 29386 ;;                  1    wreg      void 
 29387 ;; Registers used:
 29388 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 29389 ;; Tracked objects:
 29390 ;;		On entry : 0/0
 29391 ;;		On exit  : 0/0
 29392 ;;		Unchanged: 0/0
 29393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 29394 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29395 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29396 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29397 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29398 ;;Total ram usage:        3 bytes
 29399 ;; Hardware stack levels used:    1
 29400 ;; Hardware stack levels required when called:    7
 29401 ;; This function calls:
 29402 ;;		_displayL1_SetUserLed
 29403 ;;		_displayL1_Update
 29404 ;; This function is called by:
 29405 ;;		_nullifyBadge_userLedsSet
 29406 ;;		_nullifyBadge_userLedsSetForce
 29407 ;; This function uses a non-reentrant model
 29408 ;;
 29409                           
 29410                           
 29411                           ;psect for function _displayL2_SetUserLeds
 29412  369E                     _displayL2_SetUserLeds:	
 29413                           
 29414                           ;incstack = 0
 29415                           ; Regs used in _displayL2_SetUserLeds: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 29416                           ;displayL2_SetUserLeds@display stored from wreg
 29417  369E  00FB               	movwf	displayL2_SetUserLeds@display
 29418                           
 29419                           ;nullifyBadge_displayL2.c: 89: display->ledVect = userLedData;
 29420  369F  087B               	movf	displayL2_SetUserLeds@display,w
 29421  36A0  3E05               	addlw	5
 29422  36A1  0086               	movwf	6
 29423  36A2  3001               	movlw	1	; select bank2/3
 29424  36A3  0087               	movwf	7
 29425  36A4  0020               	movlb	0	; select bank0
 29426  36A5  082B               	movf	displayL2_SetUserLeds@userLedData,w
 29427  36A6  3FC0               	movwi [0]fsr1
 29428  36A7  082C               	movf	displayL2_SetUserLeds@userLedData+1,w
 29429  36A8  3FC1               	movwi [1]fsr1
 29430                           
 29431                           ;nullifyBadge_displayL2.c: 90: displayL1_SetUserLed(&display->display_l1, display->ledVe
      +                          ct);
 29432  36A9  087B               	movf	displayL2_SetUserLeds@display,w
 29433  36AA  3E05               	addlw	5
 29434  36AB  0086               	movwf	6
 29435  36AC  3001               	movlw	1	; select bank2/3
 29436  36AD  0087               	movwf	7
 29437  36AE  3F40               	moviw [0]fsr1
 29438  36AF  00F1               	movwf	displayL1_SetUserLed@userLedVect
 29439  36B0  3F41               	moviw [1]fsr1
 29440  36B1  00F2               	movwf	displayL1_SetUserLed@userLedVect+1
 29441  36B2  087B               	movf	displayL2_SetUserLeds@display,w
 29442  36B3  3E07               	addlw	7
 29443  36B4  31B5  2508  31B6   	fcall	_displayL1_SetUserLed
 29444                           
 29445                           ;nullifyBadge_displayL2.c: 91: displayL1_Update(&display->display_l1);
 29446  36B7  087B               	movf	displayL2_SetUserLeds@display,w
 29447  36B8  3E07               	addlw	7
 29448  36B9  31B4  24D5         	fcall	_displayL1_Update
 29449  36BB  0008               	return
 29450  36BC                     __end_of_displayL2_SetUserLeds:	
 29451                           
 29452                           	psect	text60
 29453  3508                     __ptext60:	
 29454 ;; *************** function _displayL1_SetUserLed *****************
 29455 ;; Defined at:
 29456 ;;		line 71 in file "nullifyBadge_displayL1.c"
 29457 ;; Parameters:    Size  Location     Type
 29458 ;;  display         1    wreg     PTR struct t_nullifyDisp
 29459 ;;		 -> badge_inst(18), 
 29460 ;;  userLedVect     2    1[COMMON] unsigned int 
 29461 ;; Auto vars:     Size  Location     Type
 29462 ;;  display         1    4[COMMON] PTR struct t_nullifyDisp
 29463 ;;		 -> badge_inst(18), 
 29464 ;; Return value:  Size  Location     Type
 29465 ;;                  1    wreg      void 
 29466 ;; Registers used:
 29467 ;;		wreg, fsr1l, fsr1h, status,2
 29468 ;; Tracked objects:
 29469 ;;		On entry : 0/0
 29470 ;;		On exit  : 0/0
 29471 ;;		Unchanged: 0/0
 29472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 29473 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29474 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29475 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29476 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29477 ;;Total ram usage:        4 bytes
 29478 ;; Hardware stack levels used:    1
 29479 ;; Hardware stack levels required when called:    4
 29480 ;; This function calls:
 29481 ;;		Nothing
 29482 ;; This function is called by:
 29483 ;;		_displayL2_SetUserLeds
 29484 ;;		_displayL2_ClrUserLeds
 29485 ;; This function uses a non-reentrant model
 29486 ;;
 29487                           
 29488                           
 29489                           ;psect for function _displayL1_SetUserLed
 29490  3508                     _displayL1_SetUserLed:	
 29491                           
 29492                           ;incstack = 0
 29493                           ; Regs used in _displayL1_SetUserLed: [wreg+fsr1l+fsr1h+status,2]
 29494                           ;displayL1_SetUserLed@display stored from wreg
 29495  3508  00F4               	movwf	displayL1_SetUserLed@display
 29496                           
 29497                           ;nullifyBadge_displayL1.c: 73: display->displayVect[0] = (u8) (userLedVect >> 8);
 29498  3509  0872               	movf	displayL1_SetUserLed@userLedVect+1,w
 29499  350A  00F3               	movwf	??_displayL1_SetUserLed
 29500  350B  0874               	movf	displayL1_SetUserLed@display,w
 29501  350C  0086               	movwf	6
 29502  350D  3001               	movlw	1	; select bank2/3
 29503  350E  0087               	movwf	7
 29504  350F  0873               	movf	??_displayL1_SetUserLed,w
 29505  3510  0081               	movwf	1
 29506                           
 29507                           ;nullifyBadge_displayL1.c: 74: display->displayVect[1] = (u8) (userLedVect & 0xFF);
 29508  3511  0871               	movf	displayL1_SetUserLed@userLedVect,w
 29509  3512  00F3               	movwf	??_displayL1_SetUserLed
 29510  3513  0A74               	incf	displayL1_SetUserLed@display,w
 29511  3514  0086               	movwf	6
 29512  3515  3001               	movlw	1	; select bank2/3
 29513  3516  0087               	movwf	7
 29514  3517  0873               	movf	??_displayL1_SetUserLed,w
 29515  3518  0081               	movwf	1
 29516  3519  0008               	return
 29517  351A                     __end_of_displayL1_SetUserLed:	
 29518                           
 29519                           	psect	text61
 29520  1A00                     __ptext61:	
 29521 ;; *************** function _flashy_display_option *****************
 29522 ;; Defined at:
 29523 ;;		line 105 in file "flashy_task.c"
 29524 ;; Parameters:    Size  Location     Type
 29525 ;;  data            2   44[BANK0 ] PTR struct t_flashy_task
 29526 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 29527 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 29528 ;; Auto vars:     Size  Location     Type
 29529 ;;		None
 29530 ;; Return value:  Size  Location     Type
 29531 ;;                  1    wreg      void 
 29532 ;; Registers used:
 29533 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 29534 ;; Tracked objects:
 29535 ;;		On entry : 0/0
 29536 ;;		On exit  : 0/0
 29537 ;;		Unchanged: 0/0
 29538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 29539 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29540 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29541 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29542 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29543 ;;Total ram usage:        2 bytes
 29544 ;; Hardware stack levels used:    1
 29545 ;; Hardware stack levels required when called:   10
 29546 ;; This function calls:
 29547 ;;		_marquee
 29548 ;;		_marquee_speedy
 29549 ;;		_nullifyBadge_segDisplayForceUpdate
 29550 ;;		_nullifyBadge_segDisplayPutStr
 29551 ;; This function is called by:
 29552 ;;		_flashy_Main
 29553 ;; This function uses a non-reentrant model
 29554 ;;
 29555                           
 29556                           
 29557                           ;psect for function _flashy_display_option
 29558  1A00                     _flashy_display_option:	
 29559                           
 29560                           ;flashy_task.c: 106: if (flashy_option_idx == 0){
 29561                           
 29562                           ;incstack = 0
 29563                           ; Regs used in _flashy_display_option: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 29564  1A00  0021               	movlb	1	; select bank1
 29565  1A01  0828               	movf	_flashy_option_idx^(0+128),w
 29566  1A02  0429               	iorwf	(_flashy_option_idx+1)^(0+128),w
 29567  1A03  1D03               	btfss	3,2
 29568  1A04  2A20               	goto	l8477
 29569                           
 29570                           ;flashy_task.c: 107: nullifyBadge_segDisplayPutStr(data->badge, flashy_option[flashy_opt
      +                          ion_idx]);
 29571  1A05  3528               	lslf	_flashy_option_idx^(0+128),w
 29572  1A06  3E20               	addlw	(low (_flashy_option| (0+1280)))& (0+255)
 29573  1A07  0086               	movwf	6
 29574  1A08  3005               	movlw	5	; select bank10/11
 29575  1A09  0087               	movwf	7
 29576  1A0A  3F40               	moviw [0]fsr1
 29577  1A0B  0020               	movlb	0	; select bank0
 29578  1A0C  00B7               	movwf	nullifyBadge_segDisplayPutStr@str
 29579  1A0D  3F41               	moviw [1]fsr1
 29580  1A0E  00B8               	movwf	nullifyBadge_segDisplayPutStr@str+1
 29581  1A0F  084C               	movf	flashy_display_option@data,w
 29582  1A10  0086               	movwf	6
 29583  1A11  084D               	movf	flashy_display_option@data+1,w
 29584  1A12  0087               	movwf	7
 29585  1A13  0801               	movf	1,w
 29586  1A14  31B4  240D  319A   	fcall	_nullifyBadge_segDisplayPutStr
 29587                           
 29588                           ;flashy_task.c: 108: nullifyBadge_segDisplayForceUpdate(data->badge);
 29589  1A17  0020               	movlb	0	; select bank0
 29590  1A18  084C               	movf	flashy_display_option@data,w
 29591  1A19  0086               	movwf	6
 29592  1A1A  084D               	movf	flashy_display_option@data+1,w
 29593  1A1B  0087               	movwf	7
 29594  1A1C  0801               	movf	1,w
 29595  1A1D  31B3  23CB         	fcall	_nullifyBadge_segDisplayForceUpdate
 29596                           
 29597                           ;flashy_task.c: 109: }
 29598  1A1F  0008               	return
 29599  1A20                     l8477:	
 29600                           
 29601                           ;flashy_task.c: 110: else {
 29602                           ;flashy_task.c: 111: if (data->display_state==FLASHY_STATE_DISPLAY ){
 29603  1A20  0020               	movlb	0	; select bank0
 29604  1A21  084C               	movf	flashy_display_option@data,w
 29605  1A22  0086               	movwf	6
 29606  1A23  084D               	movf	flashy_display_option@data+1,w
 29607  1A24  0087               	movwf	7
 29608  1A25  3146               	addfsr 1,6
 29609  1A26  0801               	movf	1,w
 29610  1A27  1D03               	btfss	3,2
 29611  1A28  2A48               	goto	l8481
 29612                           
 29613                           ;flashy_task.c: 113: marquee_speedy(flashy_option[flashy_option_idx], data->noholdCount,
      +                           flashy_scroll_rate);
 29614  1A29  0021               	movlb	1	; select bank1
 29615  1A2A  3528               	lslf	_flashy_option_idx^(0+128),w
 29616  1A2B  3E20               	addlw	(low (_flashy_option| (0+1280)))& (0+255)
 29617  1A2C  0086               	movwf	6
 29618  1A2D  3005               	movlw	5	; select bank10/11
 29619  1A2E  0087               	movwf	7
 29620  1A2F  3F40               	moviw [0]fsr1
 29621  1A30  0020               	movlb	0	; select bank0
 29622  1A31  00BA               	movwf	marquee_speedy@string
 29623  1A32  3F41               	moviw [1]fsr1
 29624  1A33  00BB               	movwf	marquee_speedy@string+1
 29625  1A34  084C               	movf	flashy_display_option@data,w
 29626  1A35  0086               	movwf	6
 29627  1A36  084D               	movf	flashy_display_option@data+1,w
 29628  1A37  0087               	movwf	7
 29629  1A38  315C               	addfsr 1,28
 29630  1A39  3F40               	moviw [0]fsr1
 29631  1A3A  00BC               	movwf	marquee_speedy@count
 29632  1A3B  3F41               	moviw [1]fsr1
 29633  1A3C  00BD               	movwf	marquee_speedy@count+1
 29634  1A3D  0021               	movlb	1	; select bank1
 29635  1A3E  082D               	movf	(_flashy_scroll_rate+1)^(0+128),w
 29636  1A3F  0020               	movlb	0	; select bank0
 29637  1A40  00BF               	movwf	marquee_speedy@multiplier+1
 29638  1A41  0021               	movlb	1	; select bank1
 29639  1A42  082C               	movf	_flashy_scroll_rate^(0+128),w
 29640  1A43  0020               	movlb	0	; select bank0
 29641  1A44  00BE               	movwf	marquee_speedy@multiplier
 29642  1A45  31A1  215F         	fcall	_marquee_speedy
 29643                           
 29644                           ;flashy_task.c: 114: }
 29645  1A47  0008               	return
 29646  1A48                     l8481:	
 29647                           
 29648                           ;flashy_task.c: 115: else{
 29649                           ;flashy_task.c: 116: marquee(flashy_option[flashy_option_idx], data->noholdCount);
 29650  1A48  0021               	movlb	1	; select bank1
 29651  1A49  3528               	lslf	_flashy_option_idx^(0+128),w
 29652  1A4A  3E20               	addlw	(low (_flashy_option| (0+1280)))& (0+255)
 29653  1A4B  0086               	movwf	6
 29654  1A4C  3005               	movlw	5	; select bank10/11
 29655  1A4D  0087               	movwf	7
 29656  1A4E  3F40               	moviw [0]fsr1
 29657  1A4F  0020               	movlb	0	; select bank0
 29658  1A50  00BA               	movwf	marquee@string
 29659  1A51  3F41               	moviw [1]fsr1
 29660  1A52  00BB               	movwf	marquee@string+1
 29661  1A53  084C               	movf	flashy_display_option@data,w
 29662  1A54  0086               	movwf	6
 29663  1A55  084D               	movf	flashy_display_option@data+1,w
 29664  1A56  0087               	movwf	7
 29665  1A57  315C               	addfsr 1,28
 29666  1A58  3F40               	moviw [0]fsr1
 29667  1A59  00BC               	movwf	marquee@count
 29668  1A5A  3F41               	moviw [1]fsr1
 29669  1A5B  00BD               	movwf	marquee@count+1
 29670  1A5C  31A1  21D2         	fcall	_marquee
 29671  1A5E  0008               	return
 29672  1A5F                     __end_of_flashy_display_option:	
 29673                           
 29674                           	psect	text62
 29675  215F                     __ptext62:	
 29676 ;; *************** function _marquee_speedy *****************
 29677 ;; Defined at:
 29678 ;;		line 133 in file "main.c"
 29679 ;; Parameters:    Size  Location     Type
 29680 ;;  string          2   26[BANK0 ] PTR unsigned char 
 29681 ;;		 -> STR_82(23), STR_81(27), STR_80(46), STR_79(8), 
 29682 ;;		 -> STR_78(7), STR_77(8), STR_76(6), STR_75(10), 
 29683 ;;		 -> STR_74(5), STR_73(7), STR_72(9), STR_71(7), 
 29684 ;;		 -> STR_70(7), STR_39(5), STR_38(43), STR_37(13), 
 29685 ;;		 -> STR_36(47), STR_35(17), STR_34(120), STR_33(34), 
 29686 ;;		 -> STR_32(16), STR_31(35), STR_30(15), STR_29(12), 
 29687 ;;		 -> STR_28(29), STR_27(19), STR_26(17), STR_25(40), 
 29688 ;;		 -> STR_24(27), STR_23(29), STR_22(30), STR_21(36), 
 29689 ;;		 -> STR_20(28), STR_19(22), STR_18(8), STR_17(26), 
 29690 ;;		 -> STR_16(21), STR_15(19), STR_14(6), STR_13(8), 
 29691 ;;		 -> STR_12(9), STR_11(5), matrix_TaskData(31), secret_TaskData(14), 
 29692 ;;		 -> locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), flashy_TaskData(30), 
 29693 ;;		 -> NULL(0), 
 29694 ;;  count           2   28[BANK0 ] unsigned int 
 29695 ;;  multiplier      2   30[BANK0 ] unsigned int 
 29696 ;; Auto vars:     Size  Location     Type
 29697 ;;  j               2   42[BANK0 ] unsigned int 
 29698 ;;  display_stri    5   33[BANK0 ] unsigned char [5]
 29699 ;;  string_lengt    2   40[BANK0 ] unsigned int 
 29700 ;;  i               2   38[BANK0 ] unsigned int 
 29701 ;; Return value:  Size  Location     Type
 29702 ;;                  1    wreg      void 
 29703 ;; Registers used:
 29704 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 29705 ;; Tracked objects:
 29706 ;;		On entry : 0/0
 29707 ;;		On exit  : 0/0
 29708 ;;		Unchanged: 0/0
 29709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 29710 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29711 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29712 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29713 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29714 ;;Total ram usage:       18 bytes
 29715 ;; Hardware stack levels used:    1
 29716 ;; Hardware stack levels required when called:    9
 29717 ;; This function calls:
 29718 ;;		___lwdiv
 29719 ;;		___lwmod
 29720 ;;		_nullifyBadge_segDisplayForceUpdate
 29721 ;;		_nullifyBadge_segDisplayPutStr
 29722 ;;		_strlen
 29723 ;; This function is called by:
 29724 ;;		_flashy_display_option
 29725 ;;		_slot_Main
 29726 ;;		_matrix_display_option
 29727 ;; This function uses a non-reentrant model
 29728 ;;
 29729                           
 29730                           
 29731                           ;psect for function _marquee_speedy
 29732  215F                     _marquee_speedy:	
 29733                           
 29734                           ;main.c: 134: u16 string_length = strlen((const char *) string);
 29735                           
 29736                           ;incstack = 0
 29737                           ; Regs used in _marquee_speedy: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 29738  215F  0020               	movlb	0	; select bank0
 29739  2160  083B               	movf	marquee_speedy@string+1,w
 29740  2161  00F2               	movwf	strlen@s+1
 29741  2162  083A               	movf	marquee_speedy@string,w
 29742  2163  00F1               	movwf	strlen@s
 29743  2164  31B6  2680  31A1   	fcall	_strlen
 29744  2167  0872               	movf	?_strlen+1,w
 29745  2168  0020               	movlb	0	; select bank0
 29746  2169  00C9               	movwf	marquee_speedy@string_length+1
 29747  216A  0871               	movf	?_strlen,w
 29748  216B  00C8               	movwf	marquee_speedy@string_length
 29749                           
 29750                           ;main.c: 135: char display_string[] = { ' ', ' ', ' ', ' ', '\0' };
 29751  216C  30E8               	movlw	low marquee_speedy@F14090
 29752  216D  0086               	movwf	6
 29753  216E  3001               	movlw	high marquee_speedy@F14090
 29754  216F  0087               	movwf	7
 29755  2170  3041               	movlw	low marquee_speedy@display_string
 29756  2171  0084               	movwf	4
 29757  2172  3000               	movlw	high marquee_speedy@display_string
 29758  2173  0085               	movwf	5
 29759  2174  3005               	movlw	5
 29760  2175  00C0               	movwf	??_marquee_speedy
 29761  2176                     u4830:	
 29762  2176  0016               	moviw fsr1++
 29763  2177  001A               	movwi fsr0++
 29764  2178  0BC0               	decfsz	??_marquee_speedy,f
 29765  2179  2976               	goto	u4830
 29766                           
 29767                           ;main.c: 136: u16 i = (count / multiplier) % string_length;
 29768  217A  0849               	movf	marquee_speedy@string_length+1,w
 29769  217B  00AC               	movwf	___lwmod@divisor+1
 29770  217C  0848               	movf	marquee_speedy@string_length,w
 29771  217D  00AB               	movwf	___lwmod@divisor
 29772  217E  083F               	movf	marquee_speedy@multiplier+1,w
 29773  217F  00F2               	movwf	___lwdiv@divisor+1
 29774  2180  083E               	movf	marquee_speedy@multiplier,w
 29775  2181  00F1               	movwf	___lwdiv@divisor
 29776  2182  083D               	movf	marquee_speedy@count+1,w
 29777  2183  00F4               	movwf	___lwdiv@dividend+1
 29778  2184  083C               	movf	marquee_speedy@count,w
 29779  2185  00F3               	movwf	___lwdiv@dividend
 29780  2186  31A8  20E5  31A1   	fcall	___lwdiv
 29781  2189  0872               	movf	?___lwdiv+1,w
 29782  218A  0020               	movlb	0	; select bank0
 29783  218B  00AE               	movwf	___lwmod@dividend+1
 29784  218C  0871               	movf	?___lwdiv,w
 29785  218D  00AD               	movwf	___lwmod@dividend
 29786  218E  31B7  2772  31A1   	fcall	___lwmod
 29787  2191  0020               	movlb	0	; select bank0
 29788  2192  082C               	movf	?___lwmod+1,w
 29789  2193  00C7               	movwf	marquee_speedy@i+1
 29790  2194  082B               	movf	?___lwmod,w
 29791  2195  00C6               	movwf	marquee_speedy@i
 29792                           
 29793                           ;main.c: 138: for (u16 j=0; j < 4; j++){
 29794  2196  01CA               	clrf	marquee_speedy@j
 29795  2197  01CB               	clrf	marquee_speedy@j+1
 29796  2198  3000               	movlw	0
 29797  2199  024B               	subwf	marquee_speedy@j+1,w
 29798  219A  3004               	movlw	4
 29799  219B  1903               	skipnz
 29800  219C  024A               	subwf	marquee_speedy@j,w
 29801  219D  1803               	btfsc	3,0
 29802  219E  29C6               	goto	l8245
 29803  219F                     l8239:	
 29804                           
 29805                           ;main.c: 139: display_string[j] = string[(i + j) % string_length];
 29806  219F  0849               	movf	marquee_speedy@string_length+1,w
 29807  21A0  00AC               	movwf	___lwmod@divisor+1
 29808  21A1  0848               	movf	marquee_speedy@string_length,w
 29809  21A2  00AB               	movwf	___lwmod@divisor
 29810  21A3  084A               	movf	marquee_speedy@j,w
 29811  21A4  0746               	addwf	marquee_speedy@i,w
 29812  21A5  00AD               	movwf	___lwmod@dividend
 29813  21A6  084B               	movf	marquee_speedy@j+1,w
 29814  21A7  3D47               	addwfc	marquee_speedy@i+1,w
 29815  21A8  00AE               	movwf	___lwmod@dividend+1
 29816  21A9  31B7  2772  31A1   	fcall	___lwmod
 29817  21AC  0020               	movlb	0	; select bank0
 29818  21AD  083A               	movf	marquee_speedy@string,w
 29819  21AE  072B               	addwf	?___lwmod,w
 29820  21AF  0084               	movwf	4
 29821  21B0  083B               	movf	marquee_speedy@string+1,w
 29822  21B1  3D2C               	addwfc	?___lwmod+1,w
 29823  21B2  0085               	movwf	5
 29824  21B3  0800               	movf	0,w	;code access
 29825  21B4  00C0               	movwf	??_marquee_speedy
 29826  21B5  084A               	movf	marquee_speedy@j,w
 29827  21B6  3E41               	addlw	(low (marquee_speedy@display_string| 0))& (0+255)
 29828  21B7  0086               	movwf	6
 29829  21B8  0187               	clrf	7
 29830  21B9  0840               	movf	??_marquee_speedy,w
 29831  21BA  0081               	movwf	1
 29832  21BB  3001               	movlw	1
 29833  21BC  07CA               	addwf	marquee_speedy@j,f
 29834  21BD  3000               	movlw	0
 29835  21BE  3DCB               	addwfc	marquee_speedy@j+1,f
 29836  21BF  3000               	movlw	0
 29837  21C0  024B               	subwf	marquee_speedy@j+1,w
 29838  21C1  3004               	movlw	4
 29839  21C2  1903               	skipnz
 29840  21C3  024A               	subwf	marquee_speedy@j,w
 29841  21C4  1C03               	skipc
 29842  21C5  299F               	goto	l8239
 29843  21C6                     l8245:	
 29844                           
 29845                           ;main.c: 140: }
 29846                           ;main.c: 141: nullifyBadge_segDisplayPutStr(&badge_inst, display_string);
 29847  21C6  3041               	movlw	low marquee_speedy@display_string
 29848  21C7  00B7               	movwf	nullifyBadge_segDisplayPutStr@str
 29849  21C8  3000               	movlw	high marquee_speedy@display_string
 29850  21C9  00B8               	movwf	nullifyBadge_segDisplayPutStr@str+1
 29851  21CA  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 29852  21CB  31B4  240D  31A1   	fcall	_nullifyBadge_segDisplayPutStr
 29853                           
 29854                           ;main.c: 142: nullifyBadge_segDisplayForceUpdate(&badge_inst);
 29855  21CE  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 29856  21CF  31B3  23CB         	fcall	_nullifyBadge_segDisplayForceUpdate
 29857  21D1  0008               	return
 29858  21D2                     __end_of_marquee_speedy:	
 29859                           
 29860                           	psect	text63
 29861  21D2                     __ptext63:	
 29862 ;; *************** function _marquee *****************
 29863 ;; Defined at:
 29864 ;;		line 146 in file "main.c"
 29865 ;; Parameters:    Size  Location     Type
 29866 ;;  string          2   26[BANK0 ] PTR unsigned char 
 29867 ;;		 -> STR_45(5), STR_44(5), STR_43(11), STR_42(13), 
 29868 ;;		 -> STR_39(5), STR_38(43), STR_37(13), STR_36(47), 
 29869 ;;		 -> STR_35(17), STR_34(120), STR_33(34), STR_32(16), 
 29870 ;;		 -> STR_31(35), STR_30(15), STR_29(12), STR_28(29), 
 29871 ;;		 -> STR_27(19), STR_26(17), STR_25(40), STR_24(27), 
 29872 ;;		 -> STR_23(29), STR_22(30), STR_21(36), STR_20(28), 
 29873 ;;		 -> STR_19(22), STR_18(8), STR_17(26), STR_16(21), 
 29874 ;;		 -> STR_15(19), STR_14(6), STR_13(8), STR_12(9), 
 29875 ;;		 -> STR_11(5), STR_10(18), STR_8(6), STR_7(8), 
 29876 ;;		 -> STR_6(10), STR_5(6), STR_4(5), matrix_TaskData(31), 
 29877 ;;		 -> secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), 
 29878 ;;		 -> flashy_TaskData(30), NULL(0), 
 29879 ;;  count           2   28[BANK0 ] unsigned int 
 29880 ;; Auto vars:     Size  Location     Type
 29881 ;;  j               2   42[BANK0 ] unsigned int 
 29882 ;;  display_stri    5   31[BANK0 ] unsigned char [5]
 29883 ;;  string_lengt    2   40[BANK0 ] unsigned int 
 29884 ;;  i               2   38[BANK0 ] unsigned int 
 29885 ;;  multiplier      2   36[BANK0 ] unsigned int 
 29886 ;; Return value:  Size  Location     Type
 29887 ;;                  1    wreg      void 
 29888 ;; Registers used:
 29889 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 29890 ;; Tracked objects:
 29891 ;;		On entry : 0/0
 29892 ;;		On exit  : 0/0
 29893 ;;		Unchanged: 0/0
 29894 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 29895 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29896 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29897 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29898 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29899 ;;Total ram usage:       18 bytes
 29900 ;; Hardware stack levels used:    1
 29901 ;; Hardware stack levels required when called:    9
 29902 ;; This function calls:
 29903 ;;		___lwdiv
 29904 ;;		___lwmod
 29905 ;;		_nullifyBadge_segDisplayForceUpdate
 29906 ;;		_nullifyBadge_segDisplayPutStr
 29907 ;;		_strlen
 29908 ;; This function is called by:
 29909 ;;		_menu_display_option
 29910 ;;		_flashy_display_option
 29911 ;;		_flashy_Main
 29912 ;;		_locked_Main
 29913 ;;		_slot_Main
 29914 ;; This function uses a non-reentrant model
 29915 ;;
 29916                           
 29917                           
 29918                           ;psect for function _marquee
 29919  21D2                     _marquee:	
 29920                           
 29921                           ;main.c: 147: u16 multiplier = 50;
 29922                           
 29923                           ;incstack = 0
 29924                           ; Regs used in _marquee: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 29925  21D2  3032               	movlw	50
 29926  21D3  0020               	movlb	0	; select bank0
 29927  21D4  00C4               	movwf	marquee@multiplier
 29928  21D5  3000               	movlw	0
 29929  21D6  00C5               	movwf	marquee@multiplier+1
 29930                           
 29931                           ;main.c: 148: u16 string_length = strlen((const char *) string);
 29932  21D7  083B               	movf	marquee@string+1,w
 29933  21D8  00F2               	movwf	strlen@s+1
 29934  21D9  083A               	movf	marquee@string,w
 29935  21DA  00F1               	movwf	strlen@s
 29936  21DB  31B6  2680  31A1   	fcall	_strlen
 29937  21DE  0872               	movf	?_strlen+1,w
 29938  21DF  0020               	movlb	0	; select bank0
 29939  21E0  00C9               	movwf	marquee@string_length+1
 29940  21E1  0871               	movf	?_strlen,w
 29941  21E2  00C8               	movwf	marquee@string_length
 29942                           
 29943                           ;main.c: 149: char display_string[] = { ' ', ' ', ' ', ' ', '\0' };
 29944  21E3  30E3               	movlw	low marquee@F14099
 29945  21E4  0086               	movwf	6
 29946  21E5  3001               	movlw	high marquee@F14099
 29947  21E6  0087               	movwf	7
 29948  21E7  303F               	movlw	low marquee@display_string
 29949  21E8  0084               	movwf	4
 29950  21E9  3000               	movlw	high marquee@display_string
 29951  21EA  0085               	movwf	5
 29952  21EB  3005               	movlw	5
 29953  21EC  00BE               	movwf	??_marquee
 29954  21ED                     u4860:	
 29955  21ED  0016               	moviw fsr1++
 29956  21EE  001A               	movwi fsr0++
 29957  21EF  0BBE               	decfsz	??_marquee,f
 29958  21F0  29ED               	goto	u4860
 29959                           
 29960                           ;main.c: 150: u16 i = (count / multiplier) % string_length;
 29961  21F1  0849               	movf	marquee@string_length+1,w
 29962  21F2  00AC               	movwf	___lwmod@divisor+1
 29963  21F3  0848               	movf	marquee@string_length,w
 29964  21F4  00AB               	movwf	___lwmod@divisor
 29965  21F5  0845               	movf	marquee@multiplier+1,w
 29966  21F6  00F2               	movwf	___lwdiv@divisor+1
 29967  21F7  0844               	movf	marquee@multiplier,w
 29968  21F8  00F1               	movwf	___lwdiv@divisor
 29969  21F9  083D               	movf	marquee@count+1,w
 29970  21FA  00F4               	movwf	___lwdiv@dividend+1
 29971  21FB  083C               	movf	marquee@count,w
 29972  21FC  00F3               	movwf	___lwdiv@dividend
 29973  21FD  31A8  20E5  31A1   	fcall	___lwdiv
 29974  2200  0872               	movf	?___lwdiv+1,w
 29975  2201  0020               	movlb	0	; select bank0
 29976  2202  00AE               	movwf	___lwmod@dividend+1
 29977  2203  0871               	movf	?___lwdiv,w
 29978  2204  00AD               	movwf	___lwmod@dividend
 29979  2205  31B7  2772  31A1   	fcall	___lwmod
 29980  2208  0020               	movlb	0	; select bank0
 29981  2209  082C               	movf	?___lwmod+1,w
 29982  220A  00C7               	movwf	marquee@i+1
 29983  220B  082B               	movf	?___lwmod,w
 29984  220C  00C6               	movwf	marquee@i
 29985                           
 29986                           ;main.c: 152: for (u16 j=0; j < 4; j++){
 29987  220D  01CA               	clrf	marquee@j
 29988  220E  01CB               	clrf	marquee@j+1
 29989  220F  3000               	movlw	0
 29990  2210  024B               	subwf	marquee@j+1,w
 29991  2211  3004               	movlw	4
 29992  2212  1903               	skipnz
 29993  2213  024A               	subwf	marquee@j,w
 29994  2214  1803               	btfsc	3,0
 29995  2215  2A3D               	goto	l8269
 29996  2216                     l8263:	
 29997                           
 29998                           ;main.c: 153: display_string[j] = string[(i + j) % string_length];
 29999  2216  0849               	movf	marquee@string_length+1,w
 30000  2217  00AC               	movwf	___lwmod@divisor+1
 30001  2218  0848               	movf	marquee@string_length,w
 30002  2219  00AB               	movwf	___lwmod@divisor
 30003  221A  084A               	movf	marquee@j,w
 30004  221B  0746               	addwf	marquee@i,w
 30005  221C  00AD               	movwf	___lwmod@dividend
 30006  221D  084B               	movf	marquee@j+1,w
 30007  221E  3D47               	addwfc	marquee@i+1,w
 30008  221F  00AE               	movwf	___lwmod@dividend+1
 30009  2220  31B7  2772  31A1   	fcall	___lwmod
 30010  2223  0020               	movlb	0	; select bank0
 30011  2224  083A               	movf	marquee@string,w
 30012  2225  072B               	addwf	?___lwmod,w
 30013  2226  0084               	movwf	4
 30014  2227  083B               	movf	marquee@string+1,w
 30015  2228  3D2C               	addwfc	?___lwmod+1,w
 30016  2229  0085               	movwf	5
 30017  222A  0800               	movf	0,w	;code access
 30018  222B  00BE               	movwf	??_marquee
 30019  222C  084A               	movf	marquee@j,w
 30020  222D  3E3F               	addlw	(low (marquee@display_string| 0))& (0+255)
 30021  222E  0086               	movwf	6
 30022  222F  0187               	clrf	7
 30023  2230  083E               	movf	??_marquee,w
 30024  2231  0081               	movwf	1
 30025  2232  3001               	movlw	1
 30026  2233  07CA               	addwf	marquee@j,f
 30027  2234  3000               	movlw	0
 30028  2235  3DCB               	addwfc	marquee@j+1,f
 30029  2236  3000               	movlw	0
 30030  2237  024B               	subwf	marquee@j+1,w
 30031  2238  3004               	movlw	4
 30032  2239  1903               	skipnz
 30033  223A  024A               	subwf	marquee@j,w
 30034  223B  1C03               	skipc
 30035  223C  2A16               	goto	l8263
 30036  223D                     l8269:	
 30037                           
 30038                           ;main.c: 154: }
 30039                           ;main.c: 155: nullifyBadge_segDisplayPutStr(&badge_inst, display_string);
 30040  223D  303F               	movlw	low marquee@display_string
 30041  223E  00B7               	movwf	nullifyBadge_segDisplayPutStr@str
 30042  223F  3000               	movlw	high marquee@display_string
 30043  2240  00B8               	movwf	nullifyBadge_segDisplayPutStr@str+1
 30044  2241  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 30045  2242  31B4  240D  31A1   	fcall	_nullifyBadge_segDisplayPutStr
 30046                           
 30047                           ;main.c: 156: nullifyBadge_segDisplayForceUpdate(&badge_inst);
 30048  2245  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 30049  2246  31B3  23CB         	fcall	_nullifyBadge_segDisplayForceUpdate
 30050  2248  0008               	return
 30051  2249                     __end_of_marquee:	
 30052                           
 30053                           	psect	text64
 30054  3680                     __ptext64:	
 30055 ;; *************** function _strlen *****************
 30056 ;; Defined at:
 30057 ;;		line 4 in file "/Applications/microchip/xc8/v1.42/sources/common/strlen.c"
 30058 ;; Parameters:    Size  Location     Type
 30059 ;;  s               2    1[COMMON] PTR const unsigned char 
 30060 ;;		 -> STR_82(23), STR_81(27), STR_80(46), matrix_secret_inputs.inputs(20), 
 30061 ;;		 -> matrix_secret_inputs(25), STR_79(8), STR_78(7), STR_77(8), 
 30062 ;;		 -> STR_76(6), STR_75(10), STR_74(5), STR_73(7), 
 30063 ;;		 -> STR_72(9), STR_71(7), STR_70(7), Slot_Wheel(55), 
 30064 ;;		 -> secret_inputs.inputs(20), secret_inputs(25), STR_45(5), STR_44(5), 
 30065 ;;		 -> STR_43(11), STR_42(13), STR_39(5), STR_38(43), 
 30066 ;;		 -> STR_37(13), STR_36(47), STR_35(17), STR_34(120), 
 30067 ;;		 -> STR_33(34), STR_32(16), STR_31(35), STR_30(15), 
 30068 ;;		 -> STR_29(12), STR_28(29), STR_27(19), STR_26(17), 
 30069 ;;		 -> STR_25(40), STR_24(27), STR_23(29), STR_22(30), 
 30070 ;;		 -> STR_21(36), STR_20(28), STR_19(22), STR_18(8), 
 30071 ;;		 -> STR_17(26), STR_16(21), STR_15(19), STR_14(6), 
 30072 ;;		 -> STR_13(8), STR_12(9), STR_11(5), STR_10(18), 
 30073 ;;		 -> STR_8(6), STR_7(8), STR_6(10), STR_5(6), 
 30074 ;;		 -> STR_4(5), matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), 
 30075 ;;		 -> slot_TaskData(40), menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 30076 ;; Auto vars:     Size  Location     Type
 30077 ;;  cp              2    5[COMMON] PTR const unsigned char 
 30078 ;;		 -> STR_82(23), STR_81(27), STR_80(46), matrix_secret_inputs.inputs(20), 
 30079 ;;		 -> matrix_secret_inputs(25), STR_79(8), STR_78(7), STR_77(8), 
 30080 ;;		 -> STR_76(6), STR_75(10), STR_74(5), STR_73(7), 
 30081 ;;		 -> STR_72(9), STR_71(7), STR_70(7), Slot_Wheel(55), 
 30082 ;;		 -> secret_inputs.inputs(20), secret_inputs(25), STR_45(5), STR_44(5), 
 30083 ;;		 -> STR_43(11), STR_42(13), STR_39(5), STR_38(43), 
 30084 ;;		 -> STR_37(13), STR_36(47), STR_35(17), STR_34(120), 
 30085 ;;		 -> STR_33(34), STR_32(16), STR_31(35), STR_30(15), 
 30086 ;;		 -> STR_29(12), STR_28(29), STR_27(19), STR_26(17), 
 30087 ;;		 -> STR_25(40), STR_24(27), STR_23(29), STR_22(30), 
 30088 ;;		 -> STR_21(36), STR_20(28), STR_19(22), STR_18(8), 
 30089 ;;		 -> STR_17(26), STR_16(21), STR_15(19), STR_14(6), 
 30090 ;;		 -> STR_13(8), STR_12(9), STR_11(5), STR_10(18), 
 30091 ;;		 -> STR_8(6), STR_7(8), STR_6(10), STR_5(6), 
 30092 ;;		 -> STR_4(5), matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), 
 30093 ;;		 -> slot_TaskData(40), menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 30094 ;; Return value:  Size  Location     Type
 30095 ;;                  2    1[COMMON] unsigned int 
 30096 ;; Registers used:
 30097 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 30098 ;; Tracked objects:
 30099 ;;		On entry : 0/0
 30100 ;;		On exit  : 0/0
 30101 ;;		Unchanged: 0/0
 30102 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 30103 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30104 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30105 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30106 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30107 ;;Total ram usage:        6 bytes
 30108 ;; Hardware stack levels used:    1
 30109 ;; Hardware stack levels required when called:    4
 30110 ;; This function calls:
 30111 ;;		Nothing
 30112 ;; This function is called by:
 30113 ;;		_marquee_speedy
 30114 ;;		_marquee
 30115 ;;		_secret_check
 30116 ;;		_slot_Main
 30117 ;;		_matrix_secret_check
 30118 ;; This function uses a non-reentrant model
 30119 ;;
 30120                           
 30121                           
 30122                           ;psect for function _strlen
 30123  3680                     _strlen:	
 30124                           
 30125                           ;incstack = 0
 30126                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0]
 30127  3680  0872               	movf	strlen@s+1,w
 30128  3681  00F6               	movwf	strlen@cp+1
 30129  3682  0871               	movf	strlen@s,w
 30130  3683  00F5               	movwf	strlen@cp
 30131  3684                     l8121:	
 30132  3684  0875               	movf	strlen@cp,w
 30133  3685  0084               	movwf	4
 30134  3686  0876               	movf	strlen@cp+1,w
 30135  3687  0085               	movwf	5
 30136  3688  0012               	moviw fsr0++
 30137  3689  1903               	btfsc	3,2
 30138  368A  2E90               	goto	l8123
 30139  368B  3001               	movlw	1
 30140  368C  07F5               	addwf	strlen@cp,f
 30141  368D  3000               	movlw	0
 30142  368E  3DF6               	addwfc	strlen@cp+1,f
 30143  368F  2E84               	goto	l8121
 30144  3690                     l8123:	
 30145  3690  0971               	comf	strlen@s,w
 30146  3691  00F3               	movwf	??_strlen
 30147  3692  0972               	comf	strlen@s+1,w
 30148  3693  00F4               	movwf	??_strlen+1
 30149  3694  0AF3               	incf	??_strlen,f
 30150  3695  1903               	skipnz
 30151  3696  0AF4               	incf	??_strlen+1,f
 30152  3697  0875               	movf	strlen@cp,w
 30153  3698  0773               	addwf	??_strlen,w
 30154  3699  00F1               	movwf	?_strlen
 30155  369A  0876               	movf	strlen@cp+1,w
 30156  369B  3D74               	addwfc	??_strlen+1,w
 30157  369C  00F2               	movwf	?_strlen+1
 30158  369D  0008               	return
 30159  369E                     __end_of_strlen:	
 30160                           
 30161                           	psect	text65
 30162  340D                     __ptext65:	
 30163 ;; *************** function _nullifyBadge_segDisplayPutStr *****************
 30164 ;; Defined at:
 30165 ;;		line 113 in file "nullifyBadge.c"
 30166 ;; Parameters:    Size  Location     Type
 30167 ;;  badge           1    wreg     PTR struct t_nullifyBadg
 30168 ;;		 -> badge_inst(18), 
 30169 ;;  str             2   23[BANK0 ] PTR unsigned char 
 30170 ;;		 -> flashy_Main@hit_counter(6), STR_40(5), STR_39(5), STR_38(43), 
 30171 ;;		 -> STR_37(13), STR_36(47), STR_35(17), STR_34(120), 
 30172 ;;		 -> STR_33(34), STR_32(16), STR_31(35), STR_30(15), 
 30173 ;;		 -> STR_29(12), STR_28(29), STR_27(19), STR_26(17), 
 30174 ;;		 -> STR_25(40), STR_24(27), STR_23(29), STR_22(30), 
 30175 ;;		 -> STR_21(36), STR_20(28), STR_19(22), STR_18(8), 
 30176 ;;		 -> STR_17(26), STR_16(21), STR_15(19), STR_14(6), 
 30177 ;;		 -> STR_13(8), STR_12(9), STR_11(5), STR_8(6), 
 30178 ;;		 -> STR_7(8), STR_6(10), STR_5(6), STR_4(5), 
 30179 ;;		 -> marquee@display_string(5), marquee_speedy@display_string(5), 
 30180 ;; Auto vars:     Size  Location     Type
 30181 ;;  badge           1   25[BANK0 ] PTR struct t_nullifyBadg
 30182 ;;		 -> badge_inst(18), 
 30183 ;; Return value:  Size  Location     Type
 30184 ;;                  1    wreg      void 
 30185 ;; Registers used:
 30186 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 30187 ;; Tracked objects:
 30188 ;;		On entry : 0/0
 30189 ;;		On exit  : 0/0
 30190 ;;		Unchanged: 0/0
 30191 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 30192 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30193 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30194 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30195 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30196 ;;Total ram usage:        3 bytes
 30197 ;; Hardware stack levels used:    1
 30198 ;; Hardware stack levels required when called:    8
 30199 ;; This function calls:
 30200 ;;		_displayL2_PutStr
 30201 ;; This function is called by:
 30202 ;;		_marquee_speedy
 30203 ;;		_marquee
 30204 ;;		_menu_display_option
 30205 ;;		_flashy_display_option
 30206 ;;		_flashy_Main
 30207 ;; This function uses a non-reentrant model
 30208 ;;
 30209                           
 30210                           
 30211                           ;psect for function _nullifyBadge_segDisplayPutStr
 30212  340D                     _nullifyBadge_segDisplayPutStr:	
 30213                           
 30214                           ;incstack = 0
 30215                           ; Regs used in _nullifyBadge_segDisplayPutStr: [wreg-fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 30216                           ;nullifyBadge_segDisplayPutStr@badge stored from wreg
 30217  340D  0020               	movlb	0	; select bank0
 30218  340E  00B9               	movwf	nullifyBadge_segDisplayPutStr@badge
 30219                           
 30220                           ;nullifyBadge.c: 114: displayL2_PutStr(&badge->display, str);
 30221  340F  0838               	movf	nullifyBadge_segDisplayPutStr@str+1,w
 30222  3410  00B1               	movwf	displayL2_PutStr@str+1
 30223  3411  0837               	movf	nullifyBadge_segDisplayPutStr@str,w
 30224  3412  00B0               	movwf	displayL2_PutStr@str
 30225  3413  0839               	movf	nullifyBadge_segDisplayPutStr@badge,w
 30226  3414  31B7  2748         	fcall	_displayL2_PutStr
 30227  3416  0008               	return
 30228  3417                     __end_of_nullifyBadge_segDisplayPutStr:	
 30229                           
 30230                           	psect	text66
 30231  3748                     __ptext66:	
 30232 ;; *************** function _displayL2_PutStr *****************
 30233 ;; Defined at:
 30234 ;;		line 55 in file "nullifyBadge_displayL2.c"
 30235 ;; Parameters:    Size  Location     Type
 30236 ;;  display         1    wreg     PTR struct t_nullifyDisp
 30237 ;;		 -> badge_inst(18), 
 30238 ;;  str             2   16[BANK0 ] PTR unsigned char 
 30239 ;;		 -> flashy_Main@hit_counter(6), STR_40(5), STR_39(5), STR_38(43), 
 30240 ;;		 -> STR_37(13), STR_36(47), STR_35(17), STR_34(120), 
 30241 ;;		 -> STR_33(34), STR_32(16), STR_31(35), STR_30(15), 
 30242 ;;		 -> STR_29(12), STR_28(29), STR_27(19), STR_26(17), 
 30243 ;;		 -> STR_25(40), STR_24(27), STR_23(29), STR_22(30), 
 30244 ;;		 -> STR_21(36), STR_20(28), STR_19(22), STR_18(8), 
 30245 ;;		 -> STR_17(26), STR_16(21), STR_15(19), STR_14(6), 
 30246 ;;		 -> STR_13(8), STR_12(9), STR_11(5), STR_8(6), 
 30247 ;;		 -> STR_7(8), STR_6(10), STR_5(6), STR_4(5), 
 30248 ;;		 -> STR_3(5), marquee@display_string(5), marquee_speedy@display_string(5), 
 30249 ;; Auto vars:     Size  Location     Type
 30250 ;;  display         1   21[BANK0 ] PTR struct t_nullifyDisp
 30251 ;;		 -> badge_inst(18), 
 30252 ;;  k               1   22[BANK0 ] unsigned char 
 30253 ;; Return value:  Size  Location     Type
 30254 ;;                  1    wreg      void 
 30255 ;; Registers used:
 30256 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 30257 ;; Tracked objects:
 30258 ;;		On entry : 0/0
 30259 ;;		On exit  : 0/0
 30260 ;;		Unchanged: 0/0
 30261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 30262 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30263 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30264 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30265 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30266 ;;Total ram usage:        7 bytes
 30267 ;; Hardware stack levels used:    1
 30268 ;; Hardware stack levels required when called:    7
 30269 ;; This function calls:
 30270 ;;		_displayL2_PutChar
 30271 ;; This function is called by:
 30272 ;;		_nullifyBadge_segDisplayPutStr
 30273 ;;		_displayL2_EraseSegDisplay
 30274 ;; This function uses a non-reentrant model
 30275 ;;
 30276                           
 30277                           
 30278                           ;psect for function _displayL2_PutStr
 30279  3748                     _displayL2_PutStr:	
 30280                           
 30281                           ;incstack = 0
 30282                           ; Regs used in _displayL2_PutStr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 30283                           ;displayL2_PutStr@display stored from wreg
 30284  3748  0020               	movlb	0	; select bank0
 30285  3749  00B5               	movwf	displayL2_PutStr@display
 30286                           
 30287                           ;nullifyBadge_displayL2.c: 57: u8 k = 0;
 30288  374A  01B6               	clrf	displayL2_PutStr@k
 30289  374B                     l8075:	
 30290                           ;nullifyBadge_displayL2.c: 59: while (str[k] != '\0') {
 30291                           
 30292  374B  0831               	movf	displayL2_PutStr@str+1,w
 30293  374C  00B3               	movwf	??_displayL2_PutStr+1
 30294  374D  0830               	movf	displayL2_PutStr@str,w
 30295  374E  00B2               	movwf	??_displayL2_PutStr
 30296  374F  0836               	movf	displayL2_PutStr@k,w
 30297  3750  0732               	addwf	??_displayL2_PutStr,w
 30298  3751  0084               	movwf	4
 30299  3752  0833               	movf	??_displayL2_PutStr+1,w
 30300  3753  1803               	skipnc
 30301  3754  0A33               	incf	??_displayL2_PutStr+1,w
 30302  3755  0085               	movwf	5
 30303  3756  0012               	moviw fsr0++
 30304  3757  1903               	btfsc	3,2
 30305  3758  0008               	return
 30306                           
 30307                           ;nullifyBadge_displayL2.c: 60: displayL2_PutChar(display, str[k]);
 30308  3759  0831               	movf	displayL2_PutStr@str+1,w
 30309  375A  00B3               	movwf	??_displayL2_PutStr+1
 30310  375B  0830               	movf	displayL2_PutStr@str,w
 30311  375C  00B2               	movwf	??_displayL2_PutStr
 30312  375D  0836               	movf	displayL2_PutStr@k,w
 30313  375E  0732               	addwf	??_displayL2_PutStr,w
 30314  375F  0084               	movwf	4
 30315  3760  0833               	movf	??_displayL2_PutStr+1,w
 30316  3761  1803               	skipnc
 30317  3762  0A33               	incf	??_displayL2_PutStr+1,w
 30318  3763  0085               	movwf	5
 30319  3764  0800               	movf	0,w	;code access
 30320  3765  00B4               	movwf	??_displayL2_PutStr+2
 30321  3766  0834               	movf	??_displayL2_PutStr+2,w
 30322  3767  00AA               	movwf	displayL2_PutChar@c
 30323  3768  0835               	movf	displayL2_PutStr@display,w
 30324  3769  31AD  252E  31B7   	fcall	_displayL2_PutChar
 30325                           
 30326                           ;nullifyBadge_displayL2.c: 61: k++;
 30327  376C  3001               	movlw	1
 30328  376D  0020               	movlb	0	; select bank0
 30329  376E  00B2               	movwf	??_displayL2_PutStr
 30330  376F  0832               	movf	??_displayL2_PutStr,w
 30331  3770  07B6               	addwf	displayL2_PutStr@k,f
 30332  3771  2F4B               	goto	l8075
 30333  3772                     __end_of_displayL2_PutStr:	
 30334                           
 30335                           	psect	text67
 30336  2D2E                     __ptext67:	
 30337 ;; *************** function _displayL2_PutChar *****************
 30338 ;; Defined at:
 30339 ;;		line 38 in file "nullifyBadge_displayL2.c"
 30340 ;; Parameters:    Size  Location     Type
 30341 ;;  display         1    wreg     PTR struct t_nullifyDisp
 30342 ;;		 -> badge_inst(18), 
 30343 ;;  c               1   10[BANK0 ] unsigned char 
 30344 ;; Auto vars:     Size  Location     Type
 30345 ;;  display         1   15[BANK0 ] PTR struct t_nullifyDisp
 30346 ;;		 -> badge_inst(18), 
 30347 ;;  k               1   14[BANK0 ] unsigned char 
 30348 ;; Return value:  Size  Location     Type
 30349 ;;                  1    wreg      void 
 30350 ;; Registers used:
 30351 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 30352 ;; Tracked objects:
 30353 ;;		On entry : 0/0
 30354 ;;		On exit  : 0/0
 30355 ;;		Unchanged: 0/0
 30356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 30357 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30358 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30359 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30360 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30361 ;;Total ram usage:        6 bytes
 30362 ;; Hardware stack levels used:    1
 30363 ;; Hardware stack levels required when called:    6
 30364 ;; This function calls:
 30365 ;;		_displayL1_SetSegChar
 30366 ;; This function is called by:
 30367 ;;		_displayL2_PutStr
 30368 ;;		_nullifyBadge_segDisplayPutChar
 30369 ;; This function uses a non-reentrant model
 30370 ;;
 30371                           
 30372                           
 30373                           ;psect for function _displayL2_PutChar
 30374  2D2E                     _displayL2_PutChar:	
 30375                           
 30376                           ;incstack = 0
 30377                           ; Regs used in _displayL2_PutChar: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 30378                           ;displayL2_PutChar@display stored from wreg
 30379  2D2E  0020               	movlb	0	; select bank0
 30380  2D2F  00AF               	movwf	displayL2_PutChar@display
 30381                           
 30382                           ;nullifyBadge_displayL2.c: 40: display->charVect[0] = display->charVect[1];
 30383  2D30  0A2F               	incf	displayL2_PutChar@display,w
 30384  2D31  0086               	movwf	6
 30385  2D32  3001               	movlw	1	; select bank2/3
 30386  2D33  0087               	movwf	7
 30387  2D34  0801               	movf	1,w
 30388  2D35  00AB               	movwf	??_displayL2_PutChar
 30389  2D36  082F               	movf	displayL2_PutChar@display,w
 30390  2D37  0086               	movwf	6
 30391  2D38  3001               	movlw	1	; select bank2/3
 30392  2D39  0087               	movwf	7
 30393  2D3A  082B               	movf	??_displayL2_PutChar,w
 30394  2D3B  0081               	movwf	1
 30395                           
 30396                           ;nullifyBadge_displayL2.c: 41: display->charVect[1] = display->charVect[2];
 30397  2D3C  082F               	movf	displayL2_PutChar@display,w
 30398  2D3D  3E02               	addlw	2
 30399  2D3E  0086               	movwf	6
 30400  2D3F  3001               	movlw	1	; select bank2/3
 30401  2D40  0087               	movwf	7
 30402  2D41  0801               	movf	1,w
 30403  2D42  00AB               	movwf	??_displayL2_PutChar
 30404  2D43  0A2F               	incf	displayL2_PutChar@display,w
 30405  2D44  0086               	movwf	6
 30406  2D45  3001               	movlw	1	; select bank2/3
 30407  2D46  0087               	movwf	7
 30408  2D47  082B               	movf	??_displayL2_PutChar,w
 30409  2D48  0081               	movwf	1
 30410                           
 30411                           ;nullifyBadge_displayL2.c: 42: display->charVect[2] = display->charVect[3];
 30412  2D49  082F               	movf	displayL2_PutChar@display,w
 30413  2D4A  3E03               	addlw	3
 30414  2D4B  0086               	movwf	6
 30415  2D4C  3001               	movlw	1	; select bank2/3
 30416  2D4D  0087               	movwf	7
 30417  2D4E  0801               	movf	1,w
 30418  2D4F  00AB               	movwf	??_displayL2_PutChar
 30419  2D50  082F               	movf	displayL2_PutChar@display,w
 30420  2D51  3E02               	addlw	2
 30421  2D52  0086               	movwf	6
 30422  2D53  3001               	movlw	1	; select bank2/3
 30423  2D54  0087               	movwf	7
 30424  2D55  082B               	movf	??_displayL2_PutChar,w
 30425  2D56  0081               	movwf	1
 30426                           
 30427                           ;nullifyBadge_displayL2.c: 45: display->charVect[3] = c;
 30428  2D57  082A               	movf	displayL2_PutChar@c,w
 30429  2D58  00AB               	movwf	??_displayL2_PutChar
 30430  2D59  082F               	movf	displayL2_PutChar@display,w
 30431  2D5A  3E03               	addlw	3
 30432  2D5B  0086               	movwf	6
 30433  2D5C  3001               	movlw	1	; select bank2/3
 30434  2D5D  0087               	movwf	7
 30435  2D5E  082B               	movf	??_displayL2_PutChar,w
 30436  2D5F  0081               	movwf	1
 30437                           
 30438                           ;nullifyBadge_displayL2.c: 48: u8 k = 0;
 30439  2D60  01AE               	clrf	displayL2_PutChar@k
 30440                           
 30441                           ;nullifyBadge_displayL2.c: 49: for (k = 0; k < 4; k++) {
 30442  2D61  01AE               	clrf	displayL2_PutChar@k
 30443  2D62                     L16:	
 30444  2D62  3004               	movlw	4
 30445  2D63  022E               	subwf	displayL2_PutChar@k,w
 30446  2D64  1803               	btfsc	3,0
 30447  2D65  0008               	return
 30448                           
 30449                           ;nullifyBadge_displayL2.c: 50: displayL1_SetSegChar(&display->display_l1, display->charV
      +                          ect[k], k);
 30450  2D66  082E               	movf	displayL2_PutChar@k,w
 30451  2D67  072F               	addwf	displayL2_PutChar@display,w
 30452  2D68  00AB               	movwf	??_displayL2_PutChar
 30453  2D69  082B               	movf	??_displayL2_PutChar,w
 30454  2D6A  0086               	movwf	6
 30455  2D6B  3001               	movlw	1	; select bank2/3
 30456  2D6C  0087               	movwf	7
 30457  2D6D  0801               	movf	1,w
 30458  2D6E  00AC               	movwf	??_displayL2_PutChar+1
 30459  2D6F  082C               	movf	??_displayL2_PutChar+1,w
 30460  2D70  00A0               	movwf	displayL1_SetSegChar@c
 30461  2D71  082E               	movf	displayL2_PutChar@k,w
 30462  2D72  00AD               	movwf	??_displayL2_PutChar+2
 30463  2D73  082D               	movf	??_displayL2_PutChar+2,w
 30464  2D74  00A1               	movwf	displayL1_SetSegChar@charPos
 30465  2D75  082F               	movf	displayL2_PutChar@display,w
 30466  2D76  3E07               	addlw	7
 30467  2D77  31AA  2233  31AD   	fcall	_displayL1_SetSegChar
 30468  2D7A  3001               	movlw	1
 30469  2D7B  0020               	movlb	0	; select bank0
 30470  2D7C  00AB               	movwf	??_displayL2_PutChar
 30471  2D7D  082B               	movf	??_displayL2_PutChar,w
 30472  2D7E  07AE               	addwf	displayL2_PutChar@k,f
 30473  2D7F  2D62               	goto	L16
 30474  2D80                     __end_of_displayL2_PutChar:	
 30475                           
 30476                           	psect	text68
 30477  2A33                     __ptext68:	
 30478 ;; *************** function _displayL1_SetSegChar *****************
 30479 ;; Defined at:
 30480 ;;		line 18 in file "nullifyBadge_displayL1.c"
 30481 ;; Parameters:    Size  Location     Type
 30482 ;;  display         1    wreg     PTR struct t_nullifyDisp
 30483 ;;		 -> badge_inst(18), 
 30484 ;;  c               1    0[BANK0 ] unsigned char 
 30485 ;;  charPos         1    1[BANK0 ] unsigned char 
 30486 ;; Auto vars:     Size  Location     Type
 30487 ;;  display         1    7[BANK0 ] PTR struct t_nullifyDisp
 30488 ;;		 -> badge_inst(18), 
 30489 ;;  charData        2    8[BANK0 ] unsigned int 
 30490 ;;  dispDataVect    1    6[BANK0 ] unsigned char 
 30491 ;; Return value:  Size  Location     Type
 30492 ;;                  1    wreg      void 
 30493 ;; Registers used:
 30494 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 30495 ;; Tracked objects:
 30496 ;;		On entry : 0/0
 30497 ;;		On exit  : 0/0
 30498 ;;		Unchanged: 0/0
 30499 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 30500 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30501 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30502 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30503 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30504 ;;Total ram usage:       10 bytes
 30505 ;; Hardware stack levels used:    1
 30506 ;; Hardware stack levels required when called:    5
 30507 ;; This function calls:
 30508 ;;		_displayCharReverse
 30509 ;; This function is called by:
 30510 ;;		_displayL2_PutChar
 30511 ;;		_nullifyBadge_segDisplayPutCharPos
 30512 ;;		_displayL2_PrintChar
 30513 ;; This function uses a non-reentrant model
 30514 ;;
 30515                           
 30516                           
 30517                           ;psect for function _displayL1_SetSegChar
 30518  2A33                     _displayL1_SetSegChar:	
 30519                           
 30520                           ;incstack = 0
 30521                           ; Regs used in _displayL1_SetSegChar: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 30522                           ;displayL1_SetSegChar@display stored from wreg
 30523  2A33  0020               	movlb	0	; select bank0
 30524  2A34  00A7               	movwf	displayL1_SetSegChar@display
 30525                           
 30526                           ;nullifyBadge_displayL1.c: 23: u16 charData = asciiCharTableLookup[(u8) c];
 30527  2A35  0820               	movf	displayL1_SetSegChar@c,w
 30528  2A36  00A2               	movwf	??_displayL1_SetSegChar
 30529  2A37  01A3               	clrf	??_displayL1_SetSegChar+1
 30530  2A38  35A2               	lslf	??_displayL1_SetSegChar,f
 30531  2A39  0DA3               	rlf	??_displayL1_SetSegChar+1,f
 30532  2A3A  30F0               	movlw	240
 30533  2A3B  00A4               	movwf	??_displayL1_SetSegChar+2
 30534  2A3C  3026               	movlw	38
 30535  2A3D  00A5               	movwf	??_displayL1_SetSegChar+3
 30536  2A3E  0822               	movf	??_displayL1_SetSegChar,w
 30537  2A3F  0724               	addwf	??_displayL1_SetSegChar+2,w
 30538  2A40  0086               	movwf	6
 30539  2A41  0823               	movf	??_displayL1_SetSegChar+1,w
 30540  2A42  3D25               	addwfc	??_displayL1_SetSegChar+3,w
 30541  2A43  0087               	movwf	7
 30542  2A44  3F40               	moviw [0]fsr1
 30543  2A45  00A8               	movwf	displayL1_SetSegChar@charData
 30544  2A46  3F41               	moviw [1]fsr1
 30545  2A47  00A9               	movwf	displayL1_SetSegChar@charData+1
 30546                           
 30547                           ;nullifyBadge_displayL1.c: 29: if (charPos & 0x1) {
 30548  2A48  1C21               	btfss	displayL1_SetSegChar@charPos,0
 30549  2A49  2A55               	goto	l8013
 30550                           
 30551                           ;nullifyBadge_displayL1.c: 30: charData = displayCharReverse(charData);
 30552  2A4A  0829               	movf	displayL1_SetSegChar@charData+1,w
 30553  2A4B  00F2               	movwf	displayCharReverse@cVal+1
 30554  2A4C  0828               	movf	displayL1_SetSegChar@charData,w
 30555  2A4D  00F1               	movwf	displayCharReverse@cVal
 30556  2A4E  31B7  279F         	fcall	_displayCharReverse
 30557  2A50  0872               	movf	?_displayCharReverse+1,w
 30558  2A51  0020               	movlb	0	; select bank0
 30559  2A52  00A9               	movwf	displayL1_SetSegChar@charData+1
 30560  2A53  0871               	movf	?_displayCharReverse,w
 30561  2A54  00A8               	movwf	displayL1_SetSegChar@charData
 30562  2A55                     l8013:	
 30563                           
 30564                           ;nullifyBadge_displayL1.c: 31: }
 30565                           ;nullifyBadge_displayL1.c: 61: u8 dispDataVectBaseIdx = 8 - ( charPos << 1 );
 30566  2A55  3521               	lslf	displayL1_SetSegChar@charPos,w
 30567  2A56  3AFF               	xorlw	255
 30568  2A57  3E01               	addlw	1
 30569  2A58  3E08               	addlw	8
 30570  2A59  00A2               	movwf	??_displayL1_SetSegChar
 30571  2A5A  0822               	movf	??_displayL1_SetSegChar,w
 30572  2A5B  00A6               	movwf	displayL1_SetSegChar@dispDataVectBaseIdx
 30573                           
 30574                           ;nullifyBadge_displayL1.c: 64: display->displayVect[dispDataVectBaseIdx] = (u8) (charDat
      +                          a >> 8);
 30575  2A5C  0829               	movf	displayL1_SetSegChar@charData+1,w
 30576  2A5D  00A2               	movwf	??_displayL1_SetSegChar
 30577  2A5E  0826               	movf	displayL1_SetSegChar@dispDataVectBaseIdx,w
 30578  2A5F  0727               	addwf	displayL1_SetSegChar@display,w
 30579  2A60  00A3               	movwf	??_displayL1_SetSegChar+1
 30580  2A61  0823               	movf	??_displayL1_SetSegChar+1,w
 30581  2A62  0086               	movwf	6
 30582  2A63  3001               	movlw	1	; select bank2/3
 30583  2A64  0087               	movwf	7
 30584  2A65  0822               	movf	??_displayL1_SetSegChar,w
 30585  2A66  0081               	movwf	1
 30586                           
 30587                           ;nullifyBadge_displayL1.c: 67: display->displayVect[dispDataVectBaseIdx+1] = (u8) (charD
      +                          ata & 0xFF);
 30588  2A67  0828               	movf	displayL1_SetSegChar@charData,w
 30589  2A68  00A2               	movwf	??_displayL1_SetSegChar
 30590  2A69  0826               	movf	displayL1_SetSegChar@dispDataVectBaseIdx,w
 30591  2A6A  3E01               	addlw	1
 30592  2A6B  0727               	addwf	displayL1_SetSegChar@display,w
 30593  2A6C  00A3               	movwf	??_displayL1_SetSegChar+1
 30594  2A6D  0823               	movf	??_displayL1_SetSegChar+1,w
 30595  2A6E  0086               	movwf	6
 30596  2A6F  3001               	movlw	1	; select bank2/3
 30597  2A70  0087               	movwf	7
 30598  2A71  0822               	movf	??_displayL1_SetSegChar,w
 30599  2A72  0081               	movwf	1
 30600  2A73  0008               	return
 30601  2A74                     __end_of_displayL1_SetSegChar:	
 30602                           
 30603                           	psect	text69
 30604  379F                     __ptext69:	
 30605 ;; *************** function _displayCharReverse *****************
 30606 ;; Defined at:
 30607 ;;		line 105 in file "nullifyBadge_displayL1.c"
 30608 ;; Parameters:    Size  Location     Type
 30609 ;;  cVal            2    1[COMMON] unsigned int 
 30610 ;; Auto vars:     Size  Location     Type
 30611 ;;  k               1   11[COMMON] unsigned char 
 30612 ;;  retValUpperR    1   10[COMMON] unsigned char 
 30613 ;;  retValUpper     1    9[COMMON] unsigned char 
 30614 ;;  retValLower     1    8[COMMON] unsigned char 
 30615 ;; Return value:  Size  Location     Type
 30616 ;;                  2    1[COMMON] unsigned int 
 30617 ;; Registers used:
 30618 ;;		wreg, status,2, status,0
 30619 ;; Tracked objects:
 30620 ;;		On entry : 0/0
 30621 ;;		On exit  : 0/0
 30622 ;;		Unchanged: 0/0
 30623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 30624 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30625 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30626 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30627 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30628 ;;Total ram usage:       11 bytes
 30629 ;; Hardware stack levels used:    1
 30630 ;; Hardware stack levels required when called:    4
 30631 ;; This function calls:
 30632 ;;		Nothing
 30633 ;; This function is called by:
 30634 ;;		_displayL1_SetSegChar
 30635 ;; This function uses a non-reentrant model
 30636 ;;
 30637                           
 30638                           
 30639                           ;psect for function _displayCharReverse
 30640  379F                     _displayCharReverse:	
 30641                           
 30642                           ;nullifyBadge_displayL1.c: 106: u8 retValUpper, retValLower, retValUpperRev;
 30643                           ;nullifyBadge_displayL1.c: 108: u8 k;
 30644                           ;nullifyBadge_displayL1.c: 111: retValUpper = cVal >> 8;
 30645                           
 30646                           ;incstack = 0
 30647                           ; Regs used in _displayCharReverse: [wreg+status,2+status,0]
 30648  379F  0872               	movf	displayCharReverse@cVal+1,w
 30649  37A0  00F3               	movwf	??_displayCharReverse
 30650  37A1  0873               	movf	??_displayCharReverse,w
 30651  37A2  00F9               	movwf	displayCharReverse@retValUpper
 30652                           
 30653                           ;nullifyBadge_displayL1.c: 112: retValLower = cVal & 0xFF;
 30654  37A3  0871               	movf	displayCharReverse@cVal,w
 30655  37A4  00F3               	movwf	??_displayCharReverse
 30656  37A5  0873               	movf	??_displayCharReverse,w
 30657  37A6  00F8               	movwf	displayCharReverse@retValLower
 30658                           
 30659                           ;nullifyBadge_displayL1.c: 115: retValUpperRev = 0;
 30660  37A7  01FA               	clrf	displayCharReverse@retValUpperRev
 30661                           
 30662                           ;nullifyBadge_displayL1.c: 117: for (k = 0; k < 7; k++) {
 30663  37A8  01FB               	clrf	displayCharReverse@k
 30664  37A9  3007               	movlw	7
 30665  37AA  027B               	subwf	displayCharReverse@k,w
 30666  37AB  1803               	btfsc	3,0
 30667  37AC  2FBE               	goto	l7995
 30668  37AD                     l7987:	
 30669                           
 30670                           ;nullifyBadge_displayL1.c: 118: retValUpperRev |= (retValUpper & 0x1);
 30671  37AD  0879               	movf	displayCharReverse@retValUpper,w
 30672  37AE  3901               	andlw	1
 30673  37AF  00F3               	movwf	??_displayCharReverse
 30674  37B0  0873               	movf	??_displayCharReverse,w
 30675  37B1  04FA               	iorwf	displayCharReverse@retValUpperRev,f
 30676                           
 30677                           ;nullifyBadge_displayL1.c: 119: retValUpper >>= 1;
 30678  37B2  1003               	clrc
 30679  37B3  0CF9               	rrf	displayCharReverse@retValUpper,f
 30680                           
 30681                           ;nullifyBadge_displayL1.c: 120: retValUpperRev <<= 1;
 30682  37B4  1003               	clrc
 30683  37B5  0DFA               	rlf	displayCharReverse@retValUpperRev,f
 30684  37B6  3001               	movlw	1
 30685  37B7  00F3               	movwf	??_displayCharReverse
 30686  37B8  0873               	movf	??_displayCharReverse,w
 30687  37B9  07FB               	addwf	displayCharReverse@k,f
 30688  37BA  3007               	movlw	7
 30689  37BB  027B               	subwf	displayCharReverse@k,w
 30690  37BC  1C03               	skipc
 30691  37BD  2FAD               	goto	l7987
 30692  37BE                     l7995:	
 30693                           
 30694                           ;nullifyBadge_displayL1.c: 121: }
 30695                           ;nullifyBadge_displayL1.c: 123: return (retValLower << 8) | (retValUpperRev);
 30696  37BE  087A               	movf	displayCharReverse@retValUpperRev,w
 30697  37BF  00F3               	movwf	??_displayCharReverse
 30698  37C0  01F4               	clrf	??_displayCharReverse+1
 30699  37C1  0878               	movf	displayCharReverse@retValLower,w
 30700  37C2  00F5               	movwf	??_displayCharReverse+2
 30701  37C3  01F6               	clrf	??_displayCharReverse+3
 30702  37C4  0875               	movf	??_displayCharReverse+2,w
 30703  37C5  00F6               	movwf	??_displayCharReverse+3
 30704  37C6  01F5               	clrf	??_displayCharReverse+2
 30705  37C7  0873               	movf	??_displayCharReverse,w
 30706  37C8  0475               	iorwf	??_displayCharReverse+2,w
 30707  37C9  00F1               	movwf	?_displayCharReverse
 30708  37CA  0874               	movf	??_displayCharReverse+1,w
 30709  37CB  0476               	iorwf	??_displayCharReverse+3,w
 30710  37CC  00F2               	movwf	?_displayCharReverse+1
 30711  37CD  0008               	return
 30712  37CE                     __end_of_displayCharReverse:	
 30713                           
 30714                           	psect	text70
 30715  33CB                     __ptext70:	
 30716 ;; *************** function _nullifyBadge_segDisplayForceUpdate *****************
 30717 ;; Defined at:
 30718 ;;		line 108 in file "nullifyBadge.c"
 30719 ;; Parameters:    Size  Location     Type
 30720 ;;  badge           1    wreg     PTR struct t_nullifyBadg
 30721 ;;		 -> badge_inst(18), 
 30722 ;; Auto vars:     Size  Location     Type
 30723 ;;  badge           1   11[BANK0 ] PTR struct t_nullifyBadg
 30724 ;;		 -> badge_inst(18), 
 30725 ;; Return value:  Size  Location     Type
 30726 ;;                  1    wreg      void 
 30727 ;; Registers used:
 30728 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 30729 ;; Tracked objects:
 30730 ;;		On entry : 0/0
 30731 ;;		On exit  : 0/0
 30732 ;;		Unchanged: 0/0
 30733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 30734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30735 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30736 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30737 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30738 ;;Total ram usage:        1 bytes
 30739 ;; Hardware stack levels used:    1
 30740 ;; Hardware stack levels required when called:    8
 30741 ;; This function calls:
 30742 ;;		_displayL2_ForceUpdate
 30743 ;; This function is called by:
 30744 ;;		_marquee_speedy
 30745 ;;		_marquee
 30746 ;;		_menu_display_option
 30747 ;;		_flashy_display_option
 30748 ;;		_flashy_Main
 30749 ;; This function uses a non-reentrant model
 30750 ;;
 30751                           
 30752                           
 30753                           ;psect for function _nullifyBadge_segDisplayForceUpdate
 30754  33CB                     _nullifyBadge_segDisplayForceUpdate:	
 30755                           
 30756                           ;incstack = 0
 30757                           ; Regs used in _nullifyBadge_segDisplayForceUpdate: [wreg+fsr1l+fsr1h+status,2+status,0+
      +                          pclath+cstack]
 30758                           ;nullifyBadge_segDisplayForceUpdate@badge stored from wreg
 30759  33CB  0020               	movlb	0	; select bank0
 30760  33CC  00AB               	movwf	nullifyBadge_segDisplayForceUpdate@badge
 30761                           
 30762                           ;nullifyBadge.c: 109: displayL2_ForceUpdate(&badge->display);
 30763  33CD  082B               	movf	nullifyBadge_segDisplayForceUpdate@badge,w
 30764  33CE  31B3  23C5         	fcall	_displayL2_ForceUpdate
 30765  33D0  0008               	return
 30766  33D1                     __end_of_nullifyBadge_segDisplayForceUpdate:	
 30767                           
 30768                           	psect	text71
 30769  33C5                     __ptext71:	
 30770 ;; *************** function _displayL2_ForceUpdate *****************
 30771 ;; Defined at:
 30772 ;;		line 79 in file "nullifyBadge_displayL2.c"
 30773 ;; Parameters:    Size  Location     Type
 30774 ;;  display         1    wreg     PTR struct t_nullifyDisp
 30775 ;;		 -> badge_inst(18), 
 30776 ;; Auto vars:     Size  Location     Type
 30777 ;;  display         1   11[COMMON] PTR struct t_nullifyDisp
 30778 ;;		 -> badge_inst(18), 
 30779 ;; Return value:  Size  Location     Type
 30780 ;;                  1    wreg      void 
 30781 ;; Registers used:
 30782 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 30783 ;; Tracked objects:
 30784 ;;		On entry : 0/0
 30785 ;;		On exit  : 0/0
 30786 ;;		Unchanged: 0/0
 30787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 30788 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30789 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30790 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30791 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30792 ;;Total ram usage:        1 bytes
 30793 ;; Hardware stack levels used:    1
 30794 ;; Hardware stack levels required when called:    7
 30795 ;; This function calls:
 30796 ;;		_displayL1_Update
 30797 ;; This function is called by:
 30798 ;;		_nullifyBadge_segDisplayForceUpdate
 30799 ;; This function uses a non-reentrant model
 30800 ;;
 30801                           
 30802                           
 30803                           ;psect for function _displayL2_ForceUpdate
 30804  33C5                     _displayL2_ForceUpdate:	
 30805                           
 30806                           ;incstack = 0
 30807                           ; Regs used in _displayL2_ForceUpdate: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 30808                           ;displayL2_ForceUpdate@display stored from wreg
 30809  33C5  00FB               	movwf	displayL2_ForceUpdate@display
 30810                           
 30811                           ;nullifyBadge_displayL2.c: 80: displayL1_Update(&display->display_l1);
 30812  33C6  087B               	movf	displayL2_ForceUpdate@display,w
 30813  33C7  3E07               	addlw	7
 30814  33C8  31B4  24D5         	fcall	_displayL1_Update
 30815  33CA  0008               	return
 30816  33CB                     __end_of_displayL2_ForceUpdate:	
 30817                           
 30818                           	psect	text72
 30819  3772                     __ptext72:	
 30820 ;; *************** function ___lwmod *****************
 30821 ;; Defined at:
 30822 ;;		line 6 in file "/Applications/microchip/xc8/v1.42/sources/common/lwmod.c"
 30823 ;; Parameters:    Size  Location     Type
 30824 ;;  divisor         2   11[BANK0 ] unsigned int 
 30825 ;;  dividend        2   13[BANK0 ] unsigned int 
 30826 ;; Auto vars:     Size  Location     Type
 30827 ;;  counter         1   10[COMMON] unsigned char 
 30828 ;; Return value:  Size  Location     Type
 30829 ;;                  2   11[BANK0 ] unsigned int 
 30830 ;; Registers used:
 30831 ;;		wreg, status,2, status,0
 30832 ;; Tracked objects:
 30833 ;;		On entry : 0/0
 30834 ;;		On exit  : 0/0
 30835 ;;		Unchanged: 0/0
 30836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 30837 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30838 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30839 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30840 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30841 ;;Total ram usage:        6 bytes
 30842 ;; Hardware stack levels used:    1
 30843 ;; Hardware stack levels required when called:    4
 30844 ;; This function calls:
 30845 ;;		Nothing
 30846 ;; This function is called by:
 30847 ;;		_marquee_speedy
 30848 ;;		_marquee
 30849 ;;		_led_roundabout
 30850 ;;		_led_curtain
 30851 ;;		_led_Parody
 30852 ;;		_menu_display_option
 30853 ;;		_locked_Main
 30854 ;;		_slot_Setup
 30855 ;;		_slot_Main
 30856 ;;		_sprintf
 30857 ;; This function uses a non-reentrant model
 30858 ;;
 30859                           
 30860                           
 30861                           ;psect for function ___lwmod
 30862  3772                     ___lwmod:	
 30863                           
 30864                           ;incstack = 0
 30865                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
 30866  3772  0020               	movlb	0	; select bank0
 30867  3773  082B               	movf	___lwmod@divisor,w
 30868  3774  042C               	iorwf	___lwmod@divisor+1,w
 30869  3775  1903               	btfsc	3,2
 30870  3776  2F9A               	goto	l8223
 30871  3777  01FA               	clrf	___lwmod@counter
 30872  3778  0AFA               	incf	___lwmod@counter,f
 30873  3779                     l8213:	
 30874  3779  1BAC               	btfsc	___lwmod@divisor+1,7
 30875  377A  2F85               	goto	l8215
 30876  377B  3001               	movlw	1
 30877  377C                     u4785:	
 30878  377C  35AB               	lslf	___lwmod@divisor,f
 30879  377D  0DAC               	rlf	___lwmod@divisor+1,f
 30880  377E  0B89               	decfsz	9,f
 30881  377F  2F7C               	goto	u4785
 30882  3780  3001               	movlw	1
 30883  3781  00F9               	movwf	??___lwmod
 30884  3782  0879               	movf	??___lwmod,w
 30885  3783  07FA               	addwf	___lwmod@counter,f
 30886  3784  2F79               	goto	l8213
 30887  3785                     l8215:	
 30888  3785  082C               	movf	___lwmod@divisor+1,w
 30889  3786  022E               	subwf	___lwmod@dividend+1,w
 30890  3787  1D03               	skipz
 30891  3788  2F8B               	goto	u4805
 30892  3789  082B               	movf	___lwmod@divisor,w
 30893  378A  022D               	subwf	___lwmod@dividend,w
 30894  378B                     u4805:	
 30895  378B  1C03               	skipc
 30896  378C  2F91               	goto	l8219
 30897  378D  082B               	movf	___lwmod@divisor,w
 30898  378E  02AD               	subwf	___lwmod@dividend,f
 30899  378F  082C               	movf	___lwmod@divisor+1,w
 30900  3790  3BAE               	subwfb	___lwmod@dividend+1,f
 30901  3791                     l8219:	
 30902  3791  3001               	movlw	1
 30903  3792                     u4815:	
 30904  3792  36AC               	lsrf	___lwmod@divisor+1,f
 30905  3793  0CAB               	rrf	___lwmod@divisor,f
 30906  3794  0B89               	decfsz	9,f
 30907  3795  2F92               	goto	u4815
 30908  3796  3001               	movlw	1
 30909  3797  02FA               	subwf	___lwmod@counter,f
 30910  3798  1D03               	btfss	3,2
 30911  3799  2F85               	goto	l8215
 30912  379A                     l8223:	
 30913  379A  082E               	movf	___lwmod@dividend+1,w
 30914  379B  00AC               	movwf	?___lwmod+1
 30915  379C  082D               	movf	___lwmod@dividend,w
 30916  379D  00AB               	movwf	?___lwmod
 30917  379E  0008               	return
 30918  379F                     __end_of___lwmod:	
 30919                           
 30920                           	psect	text73
 30921  28E5                     __ptext73:	
 30922 ;; *************** function ___lwdiv *****************
 30923 ;; Defined at:
 30924 ;;		line 6 in file "/Applications/microchip/xc8/v1.42/sources/common/lwdiv.c"
 30925 ;; Parameters:    Size  Location     Type
 30926 ;;  divisor         2    1[COMMON] unsigned int 
 30927 ;;  dividend        2    3[COMMON] unsigned int 
 30928 ;; Auto vars:     Size  Location     Type
 30929 ;;  quotient        2    7[COMMON] unsigned int 
 30930 ;;  counter         1    6[COMMON] unsigned char 
 30931 ;; Return value:  Size  Location     Type
 30932 ;;                  2    1[COMMON] unsigned int 
 30933 ;; Registers used:
 30934 ;;		wreg, status,2, status,0
 30935 ;; Tracked objects:
 30936 ;;		On entry : 0/0
 30937 ;;		On exit  : 0/0
 30938 ;;		Unchanged: 0/0
 30939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 30940 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30941 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30942 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30943 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30944 ;;Total ram usage:        8 bytes
 30945 ;; Hardware stack levels used:    1
 30946 ;; Hardware stack levels required when called:    4
 30947 ;; This function calls:
 30948 ;;		Nothing
 30949 ;; This function is called by:
 30950 ;;		_marquee_speedy
 30951 ;;		_marquee
 30952 ;;		_sprintf
 30953 ;; This function uses a non-reentrant model
 30954 ;;
 30955                           
 30956                           
 30957                           ;psect for function ___lwdiv
 30958  28E5                     ___lwdiv:	
 30959                           
 30960                           ;incstack = 0
 30961                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 30962  28E5  01F7               	clrf	___lwdiv@quotient
 30963  28E6  01F8               	clrf	___lwdiv@quotient+1
 30964  28E7  0871               	movf	___lwdiv@divisor,w
 30965  28E8  0472               	iorwf	___lwdiv@divisor+1,w
 30966  28E9  1903               	btfsc	3,2
 30967  28EA  2914               	goto	l8201
 30968  28EB  01F6               	clrf	___lwdiv@counter
 30969  28EC  0AF6               	incf	___lwdiv@counter,f
 30970  28ED                     l8189:	
 30971  28ED  1BF2               	btfsc	___lwdiv@divisor+1,7
 30972  28EE  28F9               	goto	l8191
 30973  28EF  3001               	movlw	1
 30974  28F0                     u4715:	
 30975  28F0  35F1               	lslf	___lwdiv@divisor,f
 30976  28F1  0DF2               	rlf	___lwdiv@divisor+1,f
 30977  28F2  0B89               	decfsz	9,f
 30978  28F3  28F0               	goto	u4715
 30979  28F4  3001               	movlw	1
 30980  28F5  00F5               	movwf	??___lwdiv
 30981  28F6  0875               	movf	??___lwdiv,w
 30982  28F7  07F6               	addwf	___lwdiv@counter,f
 30983  28F8  28ED               	goto	l8189
 30984  28F9                     l8191:	
 30985  28F9  3001               	movlw	1
 30986  28FA                     u4735:	
 30987  28FA  35F7               	lslf	___lwdiv@quotient,f
 30988  28FB  0DF8               	rlf	___lwdiv@quotient+1,f
 30989  28FC  0B89               	decfsz	9,f
 30990  28FD  28FA               	goto	u4735
 30991  28FE  0872               	movf	___lwdiv@divisor+1,w
 30992  28FF  0274               	subwf	___lwdiv@dividend+1,w
 30993  2900  1D03               	skipz
 30994  2901  2904               	goto	u4745
 30995  2902  0871               	movf	___lwdiv@divisor,w
 30996  2903  0273               	subwf	___lwdiv@dividend,w
 30997  2904                     u4745:	
 30998  2904  1C03               	skipc
 30999  2905  290B               	goto	l8197
 31000  2906  0871               	movf	___lwdiv@divisor,w
 31001  2907  02F3               	subwf	___lwdiv@dividend,f
 31002  2908  0872               	movf	___lwdiv@divisor+1,w
 31003  2909  3BF4               	subwfb	___lwdiv@dividend+1,f
 31004  290A  1477               	bsf	___lwdiv@quotient,0
 31005  290B                     l8197:	
 31006  290B  3001               	movlw	1
 31007  290C                     u4755:	
 31008  290C  36F2               	lsrf	___lwdiv@divisor+1,f
 31009  290D  0CF1               	rrf	___lwdiv@divisor,f
 31010  290E  0B89               	decfsz	9,f
 31011  290F  290C               	goto	u4755
 31012  2910  3001               	movlw	1
 31013  2911  02F6               	subwf	___lwdiv@counter,f
 31014  2912  1D03               	btfss	3,2
 31015  2913  28F9               	goto	l8191
 31016  2914                     l8201:	
 31017  2914  0878               	movf	___lwdiv@quotient+1,w
 31018  2915  00F2               	movwf	?___lwdiv+1
 31019  2916  0877               	movf	___lwdiv@quotient,w
 31020  2917  00F1               	movwf	?___lwdiv
 31021  2918  0008               	return
 31022  2919                     __end_of___lwdiv:	
 31023                           
 31024                           	psect	text74
 31025  3645                     __ptext74:	
 31026 ;; *************** function _TMR0_Read16bitTimer *****************
 31027 ;; Defined at:
 31028 ;;		line 109 in file "mcc_generated_files/tmr0.c"
 31029 ;; Parameters:    Size  Location     Type
 31030 ;;		None
 31031 ;; Auto vars:     Size  Location     Type
 31032 ;;  readVal         2    8[COMMON] unsigned int 
 31033 ;;  readValHigh     1   11[COMMON] unsigned char 
 31034 ;;  readValLow      1   10[COMMON] unsigned char 
 31035 ;; Return value:  Size  Location     Type
 31036 ;;                  2    1[COMMON] unsigned int 
 31037 ;; Registers used:
 31038 ;;		wreg, status,2, status,0
 31039 ;; Tracked objects:
 31040 ;;		On entry : 0/0
 31041 ;;		On exit  : 0/0
 31042 ;;		Unchanged: 0/0
 31043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 31044 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31045 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31046 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31047 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31048 ;;Total ram usage:       11 bytes
 31049 ;; Hardware stack levels used:    1
 31050 ;; Hardware stack levels required when called:    4
 31051 ;; This function calls:
 31052 ;;		Nothing
 31053 ;; This function is called by:
 31054 ;;		_scheduler_TaskRun
 31055 ;;		_schedulerExecute
 31056 ;; This function uses a non-reentrant model
 31057 ;;
 31058                           
 31059                           
 31060                           ;psect for function _TMR0_Read16bitTimer
 31061  3645                     _TMR0_Read16bitTimer:	
 31062                           
 31063                           ;tmr0.c: 111: uint16_t readVal;
 31064                           ;tmr0.c: 112: uint8_t readValLow;
 31065                           ;tmr0.c: 113: uint8_t readValHigh;
 31066                           ;tmr0.c: 115: readValLow = TMR0L;
 31067                           
 31068                           ;incstack = 0
 31069                           ; Regs used in _TMR0_Read16bitTimer: [wreg+status,2+status,0]
 31070  3645  0020               	movlb	0	; select bank0
 31071  3646  0815               	movf	21,w	;volatile
 31072  3647  00F3               	movwf	??_TMR0_Read16bitTimer
 31073  3648  0873               	movf	??_TMR0_Read16bitTimer,w
 31074  3649  00FA               	movwf	TMR0_Read16bitTimer@readValLow
 31075                           
 31076                           ;tmr0.c: 116: readValHigh = TMR0H;
 31077  364A  0816               	movf	22,w	;volatile
 31078  364B  00F3               	movwf	??_TMR0_Read16bitTimer
 31079  364C  0873               	movf	??_TMR0_Read16bitTimer,w
 31080  364D  00FB               	movwf	TMR0_Read16bitTimer@readValHigh
 31081                           
 31082                           ;tmr0.c: 117: readVal = ((uint16_t)readValHigh << 8) + readValLow;
 31083  364E  087A               	movf	TMR0_Read16bitTimer@readValLow,w
 31084  364F  00F3               	movwf	??_TMR0_Read16bitTimer
 31085  3650  01F4               	clrf	??_TMR0_Read16bitTimer+1
 31086  3651  087B               	movf	TMR0_Read16bitTimer@readValHigh,w
 31087  3652  00F5               	movwf	??_TMR0_Read16bitTimer+2
 31088  3653  01F6               	clrf	??_TMR0_Read16bitTimer+3
 31089  3654  0875               	movf	??_TMR0_Read16bitTimer+2,w
 31090  3655  00F6               	movwf	??_TMR0_Read16bitTimer+3
 31091  3656  01F5               	clrf	??_TMR0_Read16bitTimer+2
 31092  3657  0873               	movf	??_TMR0_Read16bitTimer,w
 31093  3658  0775               	addwf	??_TMR0_Read16bitTimer+2,w
 31094  3659  00F8               	movwf	TMR0_Read16bitTimer@readVal
 31095  365A  0874               	movf	??_TMR0_Read16bitTimer+1,w
 31096  365B  3D76               	addwfc	??_TMR0_Read16bitTimer+3,w
 31097  365C  00F9               	movwf	TMR0_Read16bitTimer@readVal+1
 31098                           
 31099                           ;tmr0.c: 119: return readVal;
 31100  365D  0879               	movf	TMR0_Read16bitTimer@readVal+1,w
 31101  365E  00F2               	movwf	?_TMR0_Read16bitTimer+1
 31102  365F  0878               	movf	TMR0_Read16bitTimer@readVal,w
 31103  3660  00F1               	movwf	?_TMR0_Read16bitTimer
 31104  3661  0008               	return
 31105  3662                     __end_of_TMR0_Read16bitTimer:	
 31106                           
 31107                           	psect	text75
 31108  2E29                     __ptext75:	
 31109 ;; *************** function _nullifyBadge_platformInit *****************
 31110 ;; Defined at:
 31111 ;;		line 13 in file "nullifyBadge.c"
 31112 ;; Parameters:    Size  Location     Type
 31113 ;;  badge           1    wreg     PTR struct t_nullifyBadg
 31114 ;;		 -> badge_inst(18), 
 31115 ;; Auto vars:     Size  Location     Type
 31116 ;;  badge           1   12[BANK0 ] PTR struct t_nullifyBadg
 31117 ;;		 -> badge_inst(18), 
 31118 ;; Return value:  Size  Location     Type
 31119 ;;                  1    wreg      void 
 31120 ;; Registers used:
 31121 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 31122 ;; Tracked objects:
 31123 ;;		On entry : 0/0
 31124 ;;		On exit  : 0/0
 31125 ;;		Unchanged: 0/0
 31126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 31127 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31128 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31129 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31130 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31131 ;;Total ram usage:        1 bytes
 31132 ;; Hardware stack levels used:    1
 31133 ;; Hardware stack levels required when called:    9
 31134 ;; This function calls:
 31135 ;;		_OSCILLATOR_Initialize
 31136 ;;		_PIN_MANAGER_Initialize
 31137 ;;		_PWM1_Initialize
 31138 ;;		_PWM1_LoadDutyValue
 31139 ;;		_PWM2_Initialize
 31140 ;;		_PWM2_LoadDutyValue
 31141 ;;		_PWM5_Initialize
 31142 ;;		_PWM5_LoadDutyValue
 31143 ;;		_PWM6_Initialize
 31144 ;;		_PWM6_LoadDutyValue
 31145 ;;		_SPI1_Initialize
 31146 ;;		_SYSTEM_Initialize
 31147 ;;		_TMR0_Initialize
 31148 ;;		_TMR2_Initialize
 31149 ;;		_TMR4_Initialize
 31150 ;;		_displayL2_Initialize
 31151 ;; This function is called by:
 31152 ;;		_main
 31153 ;; This function uses a non-reentrant model
 31154 ;;
 31155                           
 31156                           
 31157                           ;psect for function _nullifyBadge_platformInit
 31158  2E29                     _nullifyBadge_platformInit:	
 31159                           
 31160                           ;incstack = 0
 31161                           ; Regs used in _nullifyBadge_platformInit: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 31162                           ;nullifyBadge_platformInit@badge stored from wreg
 31163  2E29  0020               	movlb	0	; select bank0
 31164  2E2A  00AC               	movwf	nullifyBadge_platformInit@badge
 31165                           
 31166                           ;nullifyBadge.c: 15: SYSTEM_Initialize();
 31167  2E2B  31B6  26BC  31AE   	fcall	_SYSTEM_Initialize
 31168                           
 31169                           ;nullifyBadge.c: 16: OSCILLATOR_Initialize();
 31170  2E2E  31B3  23F9  31AE   	fcall	_OSCILLATOR_Initialize
 31171                           
 31172                           ;nullifyBadge.c: 19: TMR0_Initialize();
 31173  2E31  31B6  2662  31AE   	fcall	_TMR0_Initialize
 31174                           
 31175                           ;nullifyBadge.c: 20: TMR2_Initialize();
 31176  2E34  31B4  2403  31AE   	fcall	_TMR2_Initialize
 31177                           
 31178                           ;nullifyBadge.c: 21: TMR4_Initialize();
 31179  2E37  31B4  2438  31AE   	fcall	_TMR4_Initialize
 31180                           
 31181                           ;nullifyBadge.c: 23: PIN_MANAGER_Initialize();
 31182  2E3A  31AD  25D4  31AE   	fcall	_PIN_MANAGER_Initialize
 31183                           
 31184                           ;nullifyBadge.c: 24: PWM1_Initialize();
 31185  2E3D  31B4  2422  31AE   	fcall	_PWM1_Initialize
 31186                           
 31187                           ;nullifyBadge.c: 26: PWM2_Initialize();
 31188  2E40  31B4  242D  31AE   	fcall	_PWM2_Initialize
 31189                           
 31190                           ;nullifyBadge.c: 27: PWM5_Initialize();
 31191  2E43  31B4  244E  31AE   	fcall	_PWM5_Initialize
 31192                           
 31193                           ;nullifyBadge.c: 28: PWM6_Initialize();
 31194  2E46  31B4  245A  31AE   	fcall	_PWM6_Initialize
 31195                           
 31196                           ;nullifyBadge.c: 29: SPI1_Initialize();
 31197  2E49  31B3  23D7  31AE   	fcall	_SPI1_Initialize
 31198                           
 31199                           ;nullifyBadge.c: 32: PWM1_LoadDutyValue(128);
 31200  2E4C  3080               	movlw	128
 31201  2E4D  00F1               	movwf	PWM1_LoadDutyValue@dutyValue
 31202  2E4E  3000               	movlw	0
 31203  2E4F  00F2               	movwf	PWM1_LoadDutyValue@dutyValue+1
 31204  2E50  31B5  2553  31AE   	fcall	_PWM1_LoadDutyValue
 31205                           
 31206                           ;nullifyBadge.c: 44: do { LATBbits.LATB7 = 1; } while(0);
 31207  2E53  0022               	movlb	2	; select bank2
 31208  2E54  178D               	bsf	13,7	;volatile
 31209                           
 31210                           ;nullifyBadge.c: 45: PWM2_LoadDutyValue(192);
 31211  2E55  30C0               	movlw	192
 31212  2E56  00F1               	movwf	PWM2_LoadDutyValue@dutyValue
 31213  2E57  3000               	movlw	0
 31214  2E58  00F2               	movwf	PWM2_LoadDutyValue@dutyValue+1
 31215  2E59  31B5  2569  31AE   	fcall	_PWM2_LoadDutyValue
 31216                           
 31217                           ;nullifyBadge.c: 50: PWM5_LoadDutyValue(gamma_table_256x1k[128]);
 31218  2E5C  3000               	movlw	low ((_gamma_table_256x1k+256)| (0+32768))
 31219  2E5D  0084               	movwf	4
 31220  2E5E  3099               	movlw	high ((_gamma_table_256x1k+256)| (0+32768))
 31221  2E5F  0085               	movwf	5
 31222  2E60  3F00               	moviw [0]fsr0
 31223  2E61  00F1               	movwf	PWM5_LoadDutyValue@dutyValue
 31224  2E62  3F01               	moviw [1]fsr0
 31225  2E63  00F2               	movwf	PWM5_LoadDutyValue@dutyValue+1
 31226  2E64  31B5  257F  31AE   	fcall	_PWM5_LoadDutyValue
 31227                           
 31228                           ;nullifyBadge.c: 51: PWM6_LoadDutyValue(gamma_table_256x1k[128]);
 31229  2E67  3000               	movlw	low ((_gamma_table_256x1k+256)| (0+32768))
 31230  2E68  0084               	movwf	4
 31231  2E69  3099               	movlw	high ((_gamma_table_256x1k+256)| (0+32768))
 31232  2E6A  0085               	movwf	5
 31233  2E6B  3F00               	moviw [0]fsr0
 31234  2E6C  00F1               	movwf	PWM6_LoadDutyValue@dutyValue
 31235  2E6D  3F01               	moviw [1]fsr0
 31236  2E6E  00F2               	movwf	PWM6_LoadDutyValue@dutyValue+1
 31237  2E6F  31B5  2595  31AE   	fcall	_PWM6_LoadDutyValue
 31238                           
 31239                           ;nullifyBadge.c: 54: displayL2_Initialize(&badge->display);
 31240  2E72  0020               	movlb	0	; select bank0
 31241  2E73  082C               	movf	nullifyBadge_platformInit@badge,w
 31242  2E74  31B7  2722         	fcall	_displayL2_Initialize
 31243                           
 31244                           ;nullifyBadge.c: 57: badge->registeredHw = 0x0;
 31245  2E76  0020               	movlb	0	; select bank0
 31246  2E77  082C               	movf	nullifyBadge_platformInit@badge,w
 31247  2E78  3E11               	addlw	17
 31248  2E79  0086               	movwf	6
 31249  2E7A  3001               	movlw	1	; select bank2/3
 31250  2E7B  0087               	movwf	7
 31251  2E7C  0181               	clrf	1
 31252  2E7D  0008               	return
 31253  2E7E                     __end_of_nullifyBadge_platformInit:	
 31254                           
 31255                           	psect	text76
 31256  3722                     __ptext76:	
 31257 ;; *************** function _displayL2_Initialize *****************
 31258 ;; Defined at:
 31259 ;;		line 12 in file "nullifyBadge_displayL2.c"
 31260 ;; Parameters:    Size  Location     Type
 31261 ;;  display         1    wreg     PTR struct t_nullifyDisp
 31262 ;;		 -> badge_inst(18), 
 31263 ;; Auto vars:     Size  Location     Type
 31264 ;;  display         1   11[BANK0 ] PTR struct t_nullifyDisp
 31265 ;;		 -> badge_inst(18), 
 31266 ;; Return value:  Size  Location     Type
 31267 ;;                  1    wreg      void 
 31268 ;; Registers used:
 31269 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 31270 ;; Tracked objects:
 31271 ;;		On entry : 0/0
 31272 ;;		On exit  : 0/0
 31273 ;;		Unchanged: 0/0
 31274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 31275 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31276 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31277 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31278 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31279 ;;Total ram usage:        1 bytes
 31280 ;; Hardware stack levels used:    1
 31281 ;; Hardware stack levels required when called:    8
 31282 ;; This function calls:
 31283 ;;		_displayL1_Initialize
 31284 ;;		_memset
 31285 ;; This function is called by:
 31286 ;;		_nullifyBadge_platformInit
 31287 ;; This function uses a non-reentrant model
 31288 ;;
 31289                           
 31290                           
 31291                           ;psect for function _displayL2_Initialize
 31292  3722                     _displayL2_Initialize:	
 31293                           
 31294                           ;incstack = 0
 31295                           ; Regs used in _displayL2_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 31296                           ;displayL2_Initialize@display stored from wreg
 31297  3722  0020               	movlb	0	; select bank0
 31298  3723  00AB               	movwf	displayL2_Initialize@display
 31299                           
 31300                           ;nullifyBadge_displayL2.c: 13: displayL1_Initialize(&display->display_l1);
 31301  3724  082B               	movf	displayL2_Initialize@display,w
 31302  3725  3E07               	addlw	7
 31303  3726  31B5  252C  31B7   	fcall	_displayL1_Initialize
 31304                           
 31305                           ;nullifyBadge_displayL2.c: 14: memset(display->charVect, ' ', sizeof(display->charVect))
      +                          ;
 31306  3729  0020               	movlb	0	; select bank0
 31307  372A  082B               	movf	displayL2_Initialize@display,w
 31308  372B  00F1               	movwf	memset@p1
 31309  372C  3001               	movlw	1
 31310  372D  00F2               	movwf	memset@p1+1
 31311  372E  3020               	movlw	32
 31312  372F  00F3               	movwf	memset@c
 31313  3730  3000               	movlw	0
 31314  3731  00F4               	movwf	memset@c+1
 31315  3732  3004               	movlw	4
 31316  3733  00F5               	movwf	memset@n
 31317  3734  3000               	movlw	0
 31318  3735  00F6               	movwf	memset@n+1
 31319  3736  31B5  25C1         	fcall	_memset
 31320                           
 31321                           ;nullifyBadge_displayL2.c: 15: display->dpVect = 0;
 31322  3738  0020               	movlb	0	; select bank0
 31323  3739  082B               	movf	displayL2_Initialize@display,w
 31324  373A  3E04               	addlw	4
 31325  373B  0086               	movwf	6
 31326  373C  3001               	movlw	1	; select bank2/3
 31327  373D  0087               	movwf	7
 31328  373E  0181               	clrf	1
 31329                           
 31330                           ;nullifyBadge_displayL2.c: 16: display->ledVect = 0;
 31331  373F  082B               	movf	displayL2_Initialize@display,w
 31332  3740  3E05               	addlw	5
 31333  3741  0086               	movwf	6
 31334  3742  3001               	movlw	1	; select bank2/3
 31335  3743  0087               	movwf	7
 31336  3744  3000               	movlw	0
 31337  3745  3FC0               	movwi [0]fsr1
 31338  3746  3FC1               	movwi [1]fsr1
 31339  3747  0008               	return
 31340  3748                     __end_of_displayL2_Initialize:	
 31341                           
 31342                           	psect	text77
 31343  352C                     __ptext77:	
 31344 ;; *************** function _displayL1_Initialize *****************
 31345 ;; Defined at:
 31346 ;;		line 13 in file "nullifyBadge_displayL1.c"
 31347 ;; Parameters:    Size  Location     Type
 31348 ;;  display         1    wreg     PTR struct t_nullifyDisp
 31349 ;;		 -> badge_inst(18), 
 31350 ;; Auto vars:     Size  Location     Type
 31351 ;;  display         1   11[COMMON] PTR struct t_nullifyDisp
 31352 ;;		 -> badge_inst(18), 
 31353 ;; Return value:  Size  Location     Type
 31354 ;;                  1    wreg      void 
 31355 ;; Registers used:
 31356 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 31357 ;; Tracked objects:
 31358 ;;		On entry : 0/0
 31359 ;;		On exit  : 0/0
 31360 ;;		Unchanged: 0/0
 31361 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 31362 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31363 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31364 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31365 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31366 ;;Total ram usage:        1 bytes
 31367 ;; Hardware stack levels used:    1
 31368 ;; Hardware stack levels required when called:    7
 31369 ;; This function calls:
 31370 ;;		_displayL1_Update
 31371 ;;		_memset
 31372 ;; This function is called by:
 31373 ;;		_displayL2_Initialize
 31374 ;; This function uses a non-reentrant model
 31375 ;;
 31376                           
 31377                           
 31378                           ;psect for function _displayL1_Initialize
 31379  352C                     _displayL1_Initialize:	
 31380                           
 31381                           ;incstack = 0
 31382                           ; Regs used in _displayL1_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 31383                           ;displayL1_Initialize@display stored from wreg
 31384  352C  00FB               	movwf	displayL1_Initialize@display
 31385                           
 31386                           ;nullifyBadge_displayL1.c: 14: memset(display->displayVect, 0, sizeof(struct t_nullifyDi
      +                          splay_l1));
 31387  352D  087B               	movf	displayL1_Initialize@display,w
 31388  352E  00F1               	movwf	memset@p1
 31389  352F  3001               	movlw	1
 31390  3530  00F2               	movwf	memset@p1+1
 31391  3531  3000               	movlw	0
 31392  3532  00F3               	movwf	memset@c
 31393  3533  00F4               	movwf	memset@c+1
 31394  3534  300A               	movlw	10
 31395  3535  00F5               	movwf	memset@n
 31396  3536  3000               	movlw	0
 31397  3537  00F6               	movwf	memset@n+1
 31398  3538  31B5  25C1  31B5   	fcall	_memset
 31399                           
 31400                           ;nullifyBadge_displayL1.c: 15: displayL1_Update(display);
 31401  353B  087B               	movf	displayL1_Initialize@display,w
 31402  353C  31B4  24D5         	fcall	_displayL1_Update
 31403  353E  0008               	return
 31404  353F                     __end_of_displayL1_Initialize:	
 31405                           
 31406                           	psect	text78
 31407  35C1                     __ptext78:	
 31408 ;; *************** function _memset *****************
 31409 ;; Defined at:
 31410 ;;		line 8 in file "/Applications/microchip/xc8/v1.42/sources/common/memset.c"
 31411 ;; Parameters:    Size  Location     Type
 31412 ;;  p1              2    1[COMMON] PTR void 
 31413 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 31414 ;;		 -> menu_TaskData(14), flashy_TaskData(30), badge_inst(18), NULL(0), 
 31415 ;;  c               2    3[COMMON] int 
 31416 ;;  n               2    5[COMMON] unsigned int 
 31417 ;; Auto vars:     Size  Location     Type
 31418 ;;  p               2    7[COMMON] PTR unsigned char 
 31419 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 31420 ;;		 -> menu_TaskData(14), flashy_TaskData(30), badge_inst(18), NULL(0), 
 31421 ;; Return value:  Size  Location     Type
 31422 ;;                  2    1[COMMON] PTR void 
 31423 ;; Registers used:
 31424 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 31425 ;; Tracked objects:
 31426 ;;		On entry : 0/0
 31427 ;;		On exit  : 0/0
 31428 ;;		Unchanged: 0/0
 31429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 31430 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31431 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31432 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31433 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31434 ;;Total ram usage:        8 bytes
 31435 ;; Hardware stack levels used:    1
 31436 ;; Hardware stack levels required when called:    4
 31437 ;; This function calls:
 31438 ;;		Nothing
 31439 ;; This function is called by:
 31440 ;;		_displayL1_Initialize
 31441 ;;		_displayL2_Initialize
 31442 ;;		_slot_Setup
 31443 ;;		_slot_Main
 31444 ;; This function uses a non-reentrant model
 31445 ;;
 31446                           
 31447                           
 31448                           ;psect for function _memset
 31449  35C1                     _memset:	
 31450                           
 31451                           ;incstack = 0
 31452                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
 31453  35C1  0872               	movf	memset@p1+1,w
 31454  35C2  00F8               	movwf	memset@p+1
 31455  35C3  0871               	movf	memset@p1,w
 31456  35C4  00F7               	movwf	memset@p
 31457  35C5                     l8289:	
 31458  35C5  3001               	movlw	1
 31459  35C6  02F5               	subwf	memset@n,f
 31460  35C7  3000               	movlw	0
 31461  35C8  3BF6               	subwfb	memset@n+1,f
 31462  35C9  0A75               	incf	memset@n,w
 31463  35CA  1903               	btfsc	3,2
 31464  35CB  0A76               	incf	memset@n+1,w
 31465  35CC  1903               	btfsc	3,2
 31466  35CD  0008               	return
 31467  35CE  0877               	movf	memset@p,w
 31468  35CF  0086               	movwf	6
 31469  35D0  0878               	movf	memset@p+1,w
 31470  35D1  0087               	movwf	7
 31471  35D2  0873               	movf	memset@c,w
 31472  35D3  0081               	movwf	1
 31473  35D4  3001               	movlw	1
 31474  35D5  07F7               	addwf	memset@p,f
 31475  35D6  3000               	movlw	0
 31476  35D7  3DF8               	addwfc	memset@p+1,f
 31477  35D8  2DC5               	goto	l8289
 31478  35D9                     __end_of_memset:	
 31479                           ;	Return value of _memset is never used
 31480                           
 31481                           
 31482                           	psect	text79
 31483  34D5                     __ptext79:	
 31484 ;; *************** function _displayL1_Update *****************
 31485 ;; Defined at:
 31486 ;;		line 97 in file "nullifyBadge_displayL1.c"
 31487 ;; Parameters:    Size  Location     Type
 31488 ;;  display         1    wreg     PTR struct t_nullifyDisp
 31489 ;;		 -> badge_inst(18), 
 31490 ;; Auto vars:     Size  Location     Type
 31491 ;;  display         1   10[BANK0 ] PTR struct t_nullifyDisp
 31492 ;;		 -> badge_inst(18), 
 31493 ;;  tmpRxBuf       10    0[BANK0 ] unsigned char [10]
 31494 ;; Return value:  Size  Location     Type
 31495 ;;                  1    wreg      void 
 31496 ;; Registers used:
 31497 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 31498 ;; Tracked objects:
 31499 ;;		On entry : 0/0
 31500 ;;		On exit  : 0/0
 31501 ;;		Unchanged: 0/0
 31502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 31503 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31504 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31505 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31506 ;;      Totals:         2      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31507 ;;Total ram usage:       13 bytes
 31508 ;; Hardware stack levels used:    1
 31509 ;; Hardware stack levels required when called:    6
 31510 ;; This function calls:
 31511 ;;		_SPI1_Exchange8bitBuffer
 31512 ;; This function is called by:
 31513 ;;		_displayL1_Initialize
 31514 ;;		_displayL2_ForceUpdate
 31515 ;;		_displayL2_EraseSegDisplay
 31516 ;;		_displayL2_SetUserLeds
 31517 ;;		_displayL2_ClrUserLeds
 31518 ;;		_displayL2_PrintChar
 31519 ;;		_displayL2_PrintStr
 31520 ;; This function uses a non-reentrant model
 31521 ;;
 31522                           
 31523                           
 31524                           ;psect for function _displayL1_Update
 31525  34D5                     _displayL1_Update:	
 31526                           
 31527                           ;incstack = 0
 31528                           ; Regs used in _displayL1_Update: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 31529                           ;displayL1_Update@display stored from wreg
 31530  34D5  0020               	movlb	0	; select bank0
 31531  34D6  00AA               	movwf	displayL1_Update@display
 31532                           
 31533                           ;nullifyBadge_displayL1.c: 98: u8 tmpRxBuf[10];
 31534                           ;nullifyBadge_displayL1.c: 100: SPI1_Exchange8bitBuffer(display->displayVect, 10, tmpRxB
      +                          uf);
 31535  34D7  300A               	movlw	10
 31536  34D8  00F9               	movwf	??_displayL1_Update
 31537  34D9  0879               	movf	??_displayL1_Update,w
 31538  34DA  00F2               	movwf	SPI1_Exchange8bitBuffer@bufLen
 31539  34DB  3020               	movlw	(low (displayL1_Update@tmpRxBuf| 0))& (0+255)
 31540  34DC  00FA               	movwf	??_displayL1_Update+1
 31541  34DD  087A               	movf	??_displayL1_Update+1,w
 31542  34DE  00F3               	movwf	SPI1_Exchange8bitBuffer@dataOut
 31543  34DF  082A               	movf	displayL1_Update@display,w
 31544  34E0  31AC  24E0         	fcall	_SPI1_Exchange8bitBuffer
 31545                           
 31546                           ;nullifyBadge_displayL1.c: 101: do { LATCbits.LATC7 = 1; } while(0);
 31547  34E2  0022               	movlb	2	; select bank2
 31548  34E3  178E               	bsf	14,7	;volatile
 31549                           
 31550                           ;nullifyBadge_displayL1.c: 102: do { LATCbits.LATC7 = 0; } while(0);
 31551  34E4  138E               	bcf	14,7	;volatile
 31552  34E5  0008               	return
 31553  34E6                     __end_of_displayL1_Update:	
 31554                           
 31555                           	psect	text80
 31556  2CE0                     __ptext80:	
 31557 ;; *************** function _SPI1_Exchange8bitBuffer *****************
 31558 ;; Defined at:
 31559 ;;		line 91 in file "mcc_generated_files/spi1.c"
 31560 ;; Parameters:    Size  Location     Type
 31561 ;;  dataIn          1    wreg     PTR unsigned char 
 31562 ;;		 -> badge_inst(18), 
 31563 ;;  bufLen          1    2[COMMON] unsigned char 
 31564 ;;  dataOut         1    3[COMMON] PTR unsigned char 
 31565 ;;		 -> displayL1_Update@tmpRxBuf(10), 
 31566 ;; Auto vars:     Size  Location     Type
 31567 ;;  dataIn          1    7[COMMON] PTR unsigned char 
 31568 ;;		 -> badge_inst(18), 
 31569 ;;  bytesWritten    1    8[COMMON] unsigned char 
 31570 ;; Return value:  Size  Location     Type
 31571 ;;                  1    wreg      unsigned char 
 31572 ;; Registers used:
 31573 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 31574 ;; Tracked objects:
 31575 ;;		On entry : 0/0
 31576 ;;		On exit  : 0/0
 31577 ;;		Unchanged: 0/0
 31578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 31579 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31580 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31581 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31582 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31583 ;;Total ram usage:        7 bytes
 31584 ;; Hardware stack levels used:    1
 31585 ;; Hardware stack levels required when called:    5
 31586 ;; This function calls:
 31587 ;;		_SPI1_Exchange8bit
 31588 ;; This function is called by:
 31589 ;;		_displayL1_Update
 31590 ;; This function uses a non-reentrant model
 31591 ;;
 31592                           
 31593                           
 31594                           ;psect for function _SPI1_Exchange8bitBuffer
 31595  2CE0                     _SPI1_Exchange8bitBuffer:	
 31596                           
 31597                           ;incstack = 0
 31598                           ; Regs used in _SPI1_Exchange8bitBuffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 31599                           ;SPI1_Exchange8bitBuffer@dataIn stored from wreg
 31600  2CE0  00F7               	movwf	SPI1_Exchange8bitBuffer@dataIn
 31601                           
 31602                           ;spi1.c: 93: uint8_t bytesWritten = 0;
 31603  2CE1  01F8               	clrf	SPI1_Exchange8bitBuffer@bytesWritten
 31604                           
 31605                           ;spi1.c: 95: if(bufLen != 0)
 31606  2CE2  0872               	movf	SPI1_Exchange8bitBuffer@bufLen,w
 31607  2CE3  1903               	btfsc	3,2
 31608  2CE4  0008               	return
 31609                           
 31610                           ;spi1.c: 96: {
 31611                           ;spi1.c: 97: if(dataIn != (0))
 31612  2CE5  0877               	movf	SPI1_Exchange8bitBuffer@dataIn,w
 31613  2CE6  1D03               	btfss	3,2
 31614  2CE7  2D10               	goto	l8035
 31615  2CE8  2D15               	goto	l8037
 31616  2CE9                     l8027:	
 31617                           ;spi1.c: 98: {
 31618                           ;spi1.c: 99: while(bytesWritten < bufLen)
 31619                           
 31620                           
 31621                           ;spi1.c: 100: {
 31622                           ;spi1.c: 101: if(dataOut == (0))
 31623  2CE9  0873               	movf	SPI1_Exchange8bitBuffer@dataOut,w
 31624  2CEA  1D03               	btfss	3,2
 31625  2CEB  2CF8               	goto	l8031
 31626                           
 31627                           ;spi1.c: 102: {
 31628                           ;spi1.c: 103: SPI1_Exchange8bit(dataIn[bytesWritten]);
 31629  2CEC  0878               	movf	SPI1_Exchange8bitBuffer@bytesWritten,w
 31630  2CED  0777               	addwf	SPI1_Exchange8bitBuffer@dataIn,w
 31631  2CEE  00F4               	movwf	??_SPI1_Exchange8bitBuffer
 31632  2CEF  0874               	movf	??_SPI1_Exchange8bitBuffer,w
 31633  2CF0  0086               	movwf	6
 31634  2CF1  3001               	movlw	1	; select bank2/3
 31635  2CF2  0087               	movwf	7
 31636  2CF3  0801               	movf	1,w
 31637  2CF4  31B3  23E7  31AC   	fcall	_SPI1_Exchange8bit
 31638                           
 31639                           ;spi1.c: 104: }
 31640  2CF7  2D0C               	goto	l8033
 31641  2CF8                     l8031:	
 31642                           
 31643                           ;spi1.c: 105: else
 31644                           ;spi1.c: 106: {
 31645                           ;spi1.c: 107: dataOut[bytesWritten] = SPI1_Exchange8bit(dataIn[bytesWritten]);
 31646  2CF8  0878               	movf	SPI1_Exchange8bitBuffer@bytesWritten,w
 31647  2CF9  0777               	addwf	SPI1_Exchange8bitBuffer@dataIn,w
 31648  2CFA  00F4               	movwf	??_SPI1_Exchange8bitBuffer
 31649  2CFB  0874               	movf	??_SPI1_Exchange8bitBuffer,w
 31650  2CFC  0086               	movwf	6
 31651  2CFD  3001               	movlw	1	; select bank2/3
 31652  2CFE  0087               	movwf	7
 31653  2CFF  0801               	movf	1,w
 31654  2D00  31B3  23E7  31AC   	fcall	_SPI1_Exchange8bit
 31655  2D03  00F5               	movwf	??_SPI1_Exchange8bitBuffer+1
 31656  2D04  0878               	movf	SPI1_Exchange8bitBuffer@bytesWritten,w
 31657  2D05  0773               	addwf	SPI1_Exchange8bitBuffer@dataOut,w
 31658  2D06  00F6               	movwf	??_SPI1_Exchange8bitBuffer+2
 31659  2D07  0876               	movf	??_SPI1_Exchange8bitBuffer+2,w
 31660  2D08  0086               	movwf	6
 31661  2D09  0187               	clrf	7
 31662  2D0A  0875               	movf	??_SPI1_Exchange8bitBuffer+1,w
 31663  2D0B  0081               	movwf	1
 31664  2D0C                     l8033:	
 31665                           
 31666                           ;spi1.c: 108: }
 31667                           ;spi1.c: 110: bytesWritten++;
 31668  2D0C  3001               	movlw	1
 31669  2D0D  00F4               	movwf	??_SPI1_Exchange8bitBuffer
 31670  2D0E  0874               	movf	??_SPI1_Exchange8bitBuffer,w
 31671  2D0F  07F8               	addwf	SPI1_Exchange8bitBuffer@bytesWritten,f
 31672  2D10                     l8035:	
 31673  2D10  0872               	movf	SPI1_Exchange8bitBuffer@bufLen,w
 31674  2D11  0278               	subwf	SPI1_Exchange8bitBuffer@bytesWritten,w
 31675  2D12  1803               	btfsc	3,0
 31676  2D13  0008               	return
 31677  2D14  2CE9               	goto	l8027
 31678  2D15                     l8037:	
 31679                           ;spi1.c: 111: }
 31680                           ;spi1.c: 112: }
 31681                           
 31682                           
 31683                           ;spi1.c: 113: else
 31684                           ;spi1.c: 114: {
 31685                           ;spi1.c: 115: if(dataOut != (0))
 31686  2D15  0873               	movf	SPI1_Exchange8bitBuffer@dataOut,w
 31687  2D16  1903               	btfsc	3,2
 31688  2D17  0008               	return
 31689  2D18                     l8045:	
 31690  2D18  0872               	movf	SPI1_Exchange8bitBuffer@bufLen,w
 31691  2D19  0278               	subwf	SPI1_Exchange8bitBuffer@bytesWritten,w
 31692  2D1A  1803               	btfsc	3,0
 31693  2D1B  0008               	return
 31694                           
 31695                           ;spi1.c: 118: {
 31696                           ;spi1.c: 119: dataOut[bytesWritten] = SPI1_Exchange8bit(0x0);
 31697                           
 31698                           ;spi1.c: 116: {
 31699                           ;spi1.c: 117: while(bytesWritten < bufLen )
 31700  2D1C  3000               	movlw	0
 31701  2D1D  31B3  23E7  31AC   	fcall	_SPI1_Exchange8bit
 31702  2D20  00F4               	movwf	??_SPI1_Exchange8bitBuffer
 31703  2D21  0878               	movf	SPI1_Exchange8bitBuffer@bytesWritten,w
 31704  2D22  0773               	addwf	SPI1_Exchange8bitBuffer@dataOut,w
 31705  2D23  00F5               	movwf	??_SPI1_Exchange8bitBuffer+1
 31706  2D24  0875               	movf	??_SPI1_Exchange8bitBuffer+1,w
 31707  2D25  0086               	movwf	6
 31708  2D26  0187               	clrf	7
 31709  2D27  0874               	movf	??_SPI1_Exchange8bitBuffer,w
 31710  2D28  0081               	movwf	1
 31711                           
 31712                           ;spi1.c: 121: bytesWritten++;
 31713  2D29  3001               	movlw	1
 31714  2D2A  00F4               	movwf	??_SPI1_Exchange8bitBuffer
 31715  2D2B  0874               	movf	??_SPI1_Exchange8bitBuffer,w
 31716  2D2C  07F8               	addwf	SPI1_Exchange8bitBuffer@bytesWritten,f
 31717  2D2D  2D18               	goto	l8045
 31718  2D2E                     __end_of_SPI1_Exchange8bitBuffer:	
 31719                           ;spi1.c: 122: }
 31720                           ;spi1.c: 123: }
 31721                           ;spi1.c: 124: }
 31722                           ;spi1.c: 125: }
 31723                           ;spi1.c: 127: return bytesWritten;
 31724                           ;	Return value of _SPI1_Exchange8bitBuffer is never used
 31725                           
 31726                           
 31727                           	psect	text81
 31728  33E7                     __ptext81:	
 31729 ;; *************** function _SPI1_Exchange8bit *****************
 31730 ;; Defined at:
 31731 ;;		line 77 in file "mcc_generated_files/spi1.c"
 31732 ;; Parameters:    Size  Location     Type
 31733 ;;  data            1    wreg     unsigned char 
 31734 ;; Auto vars:     Size  Location     Type
 31735 ;;  data            1    1[COMMON] unsigned char 
 31736 ;; Return value:  Size  Location     Type
 31737 ;;                  1    wreg      unsigned char 
 31738 ;; Registers used:
 31739 ;;		wreg
 31740 ;; Tracked objects:
 31741 ;;		On entry : 0/0
 31742 ;;		On exit  : 0/0
 31743 ;;		Unchanged: 0/0
 31744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 31745 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31746 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31747 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31748 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31749 ;;Total ram usage:        1 bytes
 31750 ;; Hardware stack levels used:    1
 31751 ;; Hardware stack levels required when called:    4
 31752 ;; This function calls:
 31753 ;;		Nothing
 31754 ;; This function is called by:
 31755 ;;		_SPI1_Exchange8bitBuffer
 31756 ;; This function uses a non-reentrant model
 31757 ;;
 31758                           
 31759                           
 31760                           ;psect for function _SPI1_Exchange8bit
 31761  33E7                     _SPI1_Exchange8bit:	
 31762                           
 31763                           ;incstack = 0
 31764                           ; Regs used in _SPI1_Exchange8bit: [wreg]
 31765                           ;SPI1_Exchange8bit@data stored from wreg
 31766  33E7  00F1               	movwf	SPI1_Exchange8bit@data
 31767                           
 31768                           ;spi1.c: 80: SSP1CON1bits.WCOL = 0;
 31769  33E8  0024               	movlb	4	; select bank4
 31770  33E9  1395               	bcf	21,7	;volatile
 31771                           
 31772                           ;spi1.c: 82: SSP1BUF = data;
 31773  33EA  0871               	movf	SPI1_Exchange8bit@data,w
 31774  33EB  0091               	movwf	17	;volatile
 31775  33EC                     l18:	
 31776                           ;spi1.c: 85: {
 31777                           
 31778                           ;spi1.c: 84: while(SSP1STATbits.BF == 0x0)
 31779                           
 31780  33EC  1C14               	btfss	20,0	;volatile
 31781  33ED  2BEC               	goto	l18
 31782                           
 31783                           ;spi1.c: 86: }
 31784                           ;spi1.c: 88: return (SSP1BUF);
 31785  33EE  0811               	movf	17,w	;volatile
 31786  33EF  0008               	return
 31787  33F0                     __end_of_SPI1_Exchange8bit:	
 31788                           
 31789                           	psect	text82
 31790  36BC                     __ptext82:	
 31791 ;; *************** function _SYSTEM_Initialize *****************
 31792 ;; Defined at:
 31793 ;;		line 76 in file "mcc_generated_files/mcc.c"
 31794 ;; Parameters:    Size  Location     Type
 31795 ;;		None
 31796 ;; Auto vars:     Size  Location     Type
 31797 ;;		None
 31798 ;; Return value:  Size  Location     Type
 31799 ;;                  1    wreg      void 
 31800 ;; Registers used:
 31801 ;;		wreg, status,2, status,0, pclath, cstack
 31802 ;; Tracked objects:
 31803 ;;		On entry : 0/0
 31804 ;;		On exit  : 0/0
 31805 ;;		Unchanged: 0/0
 31806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 31807 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31808 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31809 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31810 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31811 ;;Total ram usage:        0 bytes
 31812 ;; Hardware stack levels used:    1
 31813 ;; Hardware stack levels required when called:    6
 31814 ;; This function calls:
 31815 ;;		_OSCILLATOR_Initialize
 31816 ;;		_PIN_MANAGER_Initialize
 31817 ;;		_PWM1_Initialize
 31818 ;;		_PWM2_Initialize
 31819 ;;		_PWM5_Initialize
 31820 ;;		_PWM6_Initialize
 31821 ;;		_SPI1_Initialize
 31822 ;;		_TMR0_Initialize
 31823 ;;		_TMR2_Initialize
 31824 ;;		_TMR4_Initialize
 31825 ;;		_WDT_Initialize
 31826 ;; This function is called by:
 31827 ;;		_nullifyBadge_platformInit
 31828 ;; This function uses a non-reentrant model
 31829 ;;
 31830                           
 31831                           
 31832                           ;psect for function _SYSTEM_Initialize
 31833  36BC                     _SYSTEM_Initialize:	
 31834                           
 31835                           ;mcc.c: 79: PIN_MANAGER_Initialize();
 31836                           
 31837                           ;incstack = 0
 31838                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
 31839  36BC  31AD  25D4  31B6   	fcall	_PIN_MANAGER_Initialize
 31840                           
 31841                           ;mcc.c: 80: OSCILLATOR_Initialize();
 31842  36BF  31B3  23F9  31B6   	fcall	_OSCILLATOR_Initialize
 31843                           
 31844                           ;mcc.c: 81: WDT_Initialize();
 31845  36C2  31B3  23B6  31B6   	fcall	_WDT_Initialize
 31846                           
 31847                           ;mcc.c: 82: SPI1_Initialize();
 31848  36C5  31B3  23D7  31B6   	fcall	_SPI1_Initialize
 31849                           
 31850                           ;mcc.c: 83: PWM6_Initialize();
 31851  36C8  31B4  245A  31B6   	fcall	_PWM6_Initialize
 31852                           
 31853                           ;mcc.c: 84: PWM1_Initialize();
 31854  36CB  31B4  2422  31B6   	fcall	_PWM1_Initialize
 31855                           
 31856                           ;mcc.c: 85: PWM2_Initialize();
 31857  36CE  31B4  242D  31B6   	fcall	_PWM2_Initialize
 31858                           
 31859                           ;mcc.c: 86: TMR4_Initialize();
 31860  36D1  31B4  2438  31B6   	fcall	_TMR4_Initialize
 31861                           
 31862                           ;mcc.c: 87: TMR2_Initialize();
 31863  36D4  31B4  2403  31B6   	fcall	_TMR2_Initialize
 31864                           
 31865                           ;mcc.c: 88: PWM5_Initialize();
 31866  36D7  31B4  244E  31B6   	fcall	_PWM5_Initialize
 31867                           
 31868                           ;mcc.c: 89: TMR0_Initialize();
 31869  36DA  31B6  2662         	fcall	_TMR0_Initialize
 31870  36DC  0008               	return
 31871  36DD                     __end_of_SYSTEM_Initialize:	
 31872                           
 31873                           	psect	text83
 31874  33B6                     __ptext83:	
 31875 ;; *************** function _WDT_Initialize *****************
 31876 ;; Defined at:
 31877 ;;		line 110 in file "mcc_generated_files/mcc.c"
 31878 ;; Parameters:    Size  Location     Type
 31879 ;;		None
 31880 ;; Auto vars:     Size  Location     Type
 31881 ;;		None
 31882 ;; Return value:  Size  Location     Type
 31883 ;;                  1    wreg      void 
 31884 ;; Registers used:
 31885 ;;		wreg
 31886 ;; Tracked objects:
 31887 ;;		On entry : 0/0
 31888 ;;		On exit  : 0/0
 31889 ;;		Unchanged: 0/0
 31890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 31891 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31892 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31893 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31894 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31895 ;;Total ram usage:        0 bytes
 31896 ;; Hardware stack levels used:    1
 31897 ;; Hardware stack levels required when called:    4
 31898 ;; This function calls:
 31899 ;;		Nothing
 31900 ;; This function is called by:
 31901 ;;		_SYSTEM_Initialize
 31902 ;; This function uses a non-reentrant model
 31903 ;;
 31904                           
 31905                           
 31906                           ;psect for function _WDT_Initialize
 31907  33B6                     _WDT_Initialize:	
 31908                           
 31909                           ;mcc.c: 113: WDTCON = 0x16;
 31910                           
 31911                           ;incstack = 0
 31912                           ; Regs used in _WDT_Initialize: [wreg]
 31913  33B6  3016               	movlw	22
 31914  33B7  0021               	movlb	1	; select bank1
 31915  33B8  0097               	movwf	23	;volatile
 31916  33B9  0008               	return
 31917  33BA                     __end_of_WDT_Initialize:	
 31918                           
 31919                           	psect	text84
 31920  3438                     __ptext84:	
 31921 ;; *************** function _TMR4_Initialize *****************
 31922 ;; Defined at:
 31923 ;;		line 63 in file "mcc_generated_files/tmr4.c"
 31924 ;; Parameters:    Size  Location     Type
 31925 ;;		None
 31926 ;; Auto vars:     Size  Location     Type
 31927 ;;		None
 31928 ;; Return value:  Size  Location     Type
 31929 ;;                  1    wreg      void 
 31930 ;; Registers used:
 31931 ;;		wreg, status,2, status,0, pclath, cstack
 31932 ;; Tracked objects:
 31933 ;;		On entry : 0/0
 31934 ;;		On exit  : 0/0
 31935 ;;		Unchanged: 0/0
 31936 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 31937 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31938 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31939 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31940 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31941 ;;Total ram usage:        0 bytes
 31942 ;; Hardware stack levels used:    1
 31943 ;; Hardware stack levels required when called:    5
 31944 ;; This function calls:
 31945 ;;		_TMR4_StartTimer
 31946 ;; This function is called by:
 31947 ;;		_SYSTEM_Initialize
 31948 ;;		_nullifyBadge_platformInit
 31949 ;; This function uses a non-reentrant model
 31950 ;;
 31951                           
 31952                           
 31953                           ;psect for function _TMR4_Initialize
 31954  3438                     _TMR4_Initialize:	
 31955                           
 31956                           ;tmr4.c: 68: T4CON = 0x7B;
 31957                           
 31958                           ;incstack = 0
 31959                           ; Regs used in _TMR4_Initialize: [wreg+status,2+status,0+pclath+cstack]
 31960  3438  307B               	movlw	123
 31961  3439  0028               	movlb	8	; select bank8
 31962  343A  0097               	movwf	23	;volatile
 31963                           
 31964                           ;tmr4.c: 71: PR4 = 0xFF;
 31965  343B  30FF               	movlw	255
 31966  343C  0096               	movwf	22	;volatile
 31967                           
 31968                           ;tmr4.c: 74: TMR4 = 0x00;
 31969  343D  0195               	clrf	21	;volatile
 31970                           
 31971                           ;tmr4.c: 77: PIR2bits.TMR4IF = 0;
 31972  343E  0020               	movlb	0	; select bank0
 31973  343F  1092               	bcf	18,1	;volatile
 31974                           
 31975                           ;tmr4.c: 80: TMR4_StartTimer();
 31976  3440  31B3  23AD         	fcall	_TMR4_StartTimer
 31977  3442  0008               	return
 31978  3443                     __end_of_TMR4_Initialize:	
 31979                           
 31980                           	psect	text85
 31981  33AD                     __ptext85:	
 31982 ;; *************** function _TMR4_StartTimer *****************
 31983 ;; Defined at:
 31984 ;;		line 83 in file "mcc_generated_files/tmr4.c"
 31985 ;; Parameters:    Size  Location     Type
 31986 ;;		None
 31987 ;; Auto vars:     Size  Location     Type
 31988 ;;		None
 31989 ;; Return value:  Size  Location     Type
 31990 ;;                  1    wreg      void 
 31991 ;; Registers used:
 31992 ;;		None
 31993 ;; Tracked objects:
 31994 ;;		On entry : 0/0
 31995 ;;		On exit  : 0/0
 31996 ;;		Unchanged: 0/0
 31997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 31998 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31999 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32000 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32001 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32002 ;;Total ram usage:        0 bytes
 32003 ;; Hardware stack levels used:    1
 32004 ;; Hardware stack levels required when called:    4
 32005 ;; This function calls:
 32006 ;;		Nothing
 32007 ;; This function is called by:
 32008 ;;		_TMR4_Initialize
 32009 ;; This function uses a non-reentrant model
 32010 ;;
 32011                           
 32012                           
 32013                           ;psect for function _TMR4_StartTimer
 32014  33AD                     _TMR4_StartTimer:	
 32015                           
 32016                           ;tmr4.c: 86: T4CONbits.TMR4ON = 1;
 32017                           
 32018                           ;incstack = 0
 32019                           ; Regs used in _TMR4_StartTimer: []
 32020  33AD  0028               	movlb	8	; select bank8
 32021  33AE  1517               	bsf	23,2	;volatile
 32022  33AF  0008               	return
 32023  33B0                     __end_of_TMR4_StartTimer:	
 32024                           
 32025                           	psect	text86
 32026  3403                     __ptext86:	
 32027 ;; *************** function _TMR2_Initialize *****************
 32028 ;; Defined at:
 32029 ;;		line 63 in file "mcc_generated_files/tmr2.c"
 32030 ;; Parameters:    Size  Location     Type
 32031 ;;		None
 32032 ;; Auto vars:     Size  Location     Type
 32033 ;;		None
 32034 ;; Return value:  Size  Location     Type
 32035 ;;                  1    wreg      void 
 32036 ;; Registers used:
 32037 ;;		wreg, status,2, status,0, pclath, cstack
 32038 ;; Tracked objects:
 32039 ;;		On entry : 0/0
 32040 ;;		On exit  : 0/0
 32041 ;;		Unchanged: 0/0
 32042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32043 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32044 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32045 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32046 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32047 ;;Total ram usage:        0 bytes
 32048 ;; Hardware stack levels used:    1
 32049 ;; Hardware stack levels required when called:    5
 32050 ;; This function calls:
 32051 ;;		_TMR2_StartTimer
 32052 ;; This function is called by:
 32053 ;;		_SYSTEM_Initialize
 32054 ;;		_nullifyBadge_platformInit
 32055 ;; This function uses a non-reentrant model
 32056 ;;
 32057                           
 32058                           
 32059                           ;psect for function _TMR2_Initialize
 32060  3403                     _TMR2_Initialize:	
 32061                           
 32062                           ;tmr2.c: 68: T2CON = 0x01;
 32063                           
 32064                           ;incstack = 0
 32065                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
 32066  3403  3001               	movlw	1
 32067  3404  0020               	movlb	0	; select bank0
 32068  3405  009F               	movwf	31	;volatile
 32069                           
 32070                           ;tmr2.c: 71: PR2 = 0x4A;
 32071  3406  304A               	movlw	74
 32072  3407  009E               	movwf	30	;volatile
 32073                           
 32074                           ;tmr2.c: 74: TMR2 = 0x00;
 32075  3408  019D               	clrf	29	;volatile
 32076                           
 32077                           ;tmr2.c: 77: PIR1bits.TMR2IF = 0;
 32078  3409  1091               	bcf	17,1	;volatile
 32079                           
 32080                           ;tmr2.c: 80: TMR2_StartTimer();
 32081  340A  31B3  23AA         	fcall	_TMR2_StartTimer
 32082  340C  0008               	return
 32083  340D                     __end_of_TMR2_Initialize:	
 32084                           
 32085                           	psect	text87
 32086  33AA                     __ptext87:	
 32087 ;; *************** function _TMR2_StartTimer *****************
 32088 ;; Defined at:
 32089 ;;		line 83 in file "mcc_generated_files/tmr2.c"
 32090 ;; Parameters:    Size  Location     Type
 32091 ;;		None
 32092 ;; Auto vars:     Size  Location     Type
 32093 ;;		None
 32094 ;; Return value:  Size  Location     Type
 32095 ;;                  1    wreg      void 
 32096 ;; Registers used:
 32097 ;;		None
 32098 ;; Tracked objects:
 32099 ;;		On entry : 0/0
 32100 ;;		On exit  : 0/0
 32101 ;;		Unchanged: 0/0
 32102 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32103 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32104 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32105 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32106 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32107 ;;Total ram usage:        0 bytes
 32108 ;; Hardware stack levels used:    1
 32109 ;; Hardware stack levels required when called:    4
 32110 ;; This function calls:
 32111 ;;		Nothing
 32112 ;; This function is called by:
 32113 ;;		_TMR2_Initialize
 32114 ;; This function uses a non-reentrant model
 32115 ;;
 32116                           
 32117                           
 32118                           ;psect for function _TMR2_StartTimer
 32119  33AA                     _TMR2_StartTimer:	
 32120                           
 32121                           ;tmr2.c: 86: T2CONbits.TMR2ON = 1;
 32122                           
 32123                           ;incstack = 0
 32124                           ; Regs used in _TMR2_StartTimer: []
 32125  33AA  0020               	movlb	0	; select bank0
 32126  33AB  151F               	bsf	31,2	;volatile
 32127  33AC  0008               	return
 32128  33AD                     __end_of_TMR2_StartTimer:	
 32129                           
 32130                           	psect	text88
 32131  3662                     __ptext88:	
 32132 ;; *************** function _TMR0_Initialize *****************
 32133 ;; Defined at:
 32134 ;;		line 65 in file "mcc_generated_files/tmr0.c"
 32135 ;; Parameters:    Size  Location     Type
 32136 ;;		None
 32137 ;; Auto vars:     Size  Location     Type
 32138 ;;		None
 32139 ;; Return value:  Size  Location     Type
 32140 ;;                  1    wreg      void 
 32141 ;; Registers used:
 32142 ;;		wreg, status,2, status,0, pclath, cstack
 32143 ;; Tracked objects:
 32144 ;;		On entry : 0/0
 32145 ;;		On exit  : 0/0
 32146 ;;		Unchanged: 0/0
 32147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32148 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32149 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32150 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32151 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32152 ;;Total ram usage:        0 bytes
 32153 ;; Hardware stack levels used:    1
 32154 ;; Hardware stack levels required when called:    5
 32155 ;; This function calls:
 32156 ;;		_TMR0_SetInterruptHandler
 32157 ;;		_TMR0_StartTimer
 32158 ;; This function is called by:
 32159 ;;		_SYSTEM_Initialize
 32160 ;;		_nullifyBadge_platformInit
 32161 ;; This function uses a non-reentrant model
 32162 ;;
 32163                           
 32164                           
 32165                           ;psect for function _TMR0_Initialize
 32166  3662                     _TMR0_Initialize:	
 32167                           
 32168                           ;tmr0.c: 70: T0CON0 = 0x10;
 32169                           
 32170                           ;incstack = 0
 32171                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
 32172  3662  3010               	movlw	16
 32173  3663  0020               	movlb	0	; select bank0
 32174  3664  0097               	movwf	23	;volatile
 32175                           
 32176                           ;tmr0.c: 73: T0CON1 = 0x4D;
 32177  3665  304D               	movlw	77
 32178  3666  0098               	movwf	24	;volatile
 32179                           
 32180                           ;tmr0.c: 76: TMR0H = 0xFF;
 32181  3667  30FF               	movlw	255
 32182  3668  0096               	movwf	22	;volatile
 32183                           
 32184                           ;tmr0.c: 79: TMR0L = 0xFF;
 32185  3669  30FF               	movlw	255
 32186  366A  0095               	movwf	21	;volatile
 32187                           
 32188                           ;tmr0.c: 82: timer0ReloadVal16bit = (TMR0H << 8) | TMR0L;
 32189  366B  0816               	movf	22,w	;volatile
 32190  366C  0021               	movlb	1	; select bank1
 32191  366D  00C1               	movwf	(_timer0ReloadVal16bit+1)^(0+128)	;volatile
 32192  366E  0020               	movlb	0	; select bank0
 32193  366F  0815               	movf	21,w	;volatile
 32194  3670  0021               	movlb	1	; select bank1
 32195  3671  00C0               	movwf	_timer0ReloadVal16bit^(0+128)	;volatile
 32196                           
 32197                           ;tmr0.c: 85: PIR0bits.TMR0IF = 0;
 32198  3672  0020               	movlb	0	; select bank0
 32199  3673  1290               	bcf	16,5	;volatile
 32200                           
 32201                           ;tmr0.c: 88: PIE0bits.TMR0IE = 1;
 32202  3674  0021               	movlb	1	; select bank1
 32203  3675  1690               	bsf	16,5	;volatile
 32204                           
 32205                           ;tmr0.c: 91: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
 32206  3676  3000               	movlw	low _TMR0_DefaultInterruptHandler
 32207  3677  00F1               	movwf	TMR0_SetInterruptHandler@InterruptHandler
 32208  3678  3008               	movlw	high _TMR0_DefaultInterruptHandler
 32209  3679  00F2               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
 32210  367A  31B3  23BF  31B6   	fcall	_TMR0_SetInterruptHandler
 32211                           
 32212                           ;tmr0.c: 94: TMR0_StartTimer();
 32213  367D  31B3  23A7         	fcall	_TMR0_StartTimer
 32214  367F  0008               	return
 32215  3680                     __end_of_TMR0_Initialize:	
 32216                           
 32217                           	psect	text89
 32218  33A7                     __ptext89:	
 32219 ;; *************** function _TMR0_StartTimer *****************
 32220 ;; Defined at:
 32221 ;;		line 97 in file "mcc_generated_files/tmr0.c"
 32222 ;; Parameters:    Size  Location     Type
 32223 ;;		None
 32224 ;; Auto vars:     Size  Location     Type
 32225 ;;		None
 32226 ;; Return value:  Size  Location     Type
 32227 ;;                  1    wreg      void 
 32228 ;; Registers used:
 32229 ;;		None
 32230 ;; Tracked objects:
 32231 ;;		On entry : 0/0
 32232 ;;		On exit  : 0/0
 32233 ;;		Unchanged: 0/0
 32234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32235 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32236 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32237 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32238 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32239 ;;Total ram usage:        0 bytes
 32240 ;; Hardware stack levels used:    1
 32241 ;; Hardware stack levels required when called:    4
 32242 ;; This function calls:
 32243 ;;		Nothing
 32244 ;; This function is called by:
 32245 ;;		_TMR0_Initialize
 32246 ;; This function uses a non-reentrant model
 32247 ;;
 32248                           
 32249                           
 32250                           ;psect for function _TMR0_StartTimer
 32251  33A7                     _TMR0_StartTimer:	
 32252                           
 32253                           ;tmr0.c: 100: T0CON0bits.T0EN = 1;
 32254                           
 32255                           ;incstack = 0
 32256                           ; Regs used in _TMR0_StartTimer: []
 32257  33A7  0020               	movlb	0	; select bank0
 32258  33A8  1797               	bsf	23,7	;volatile
 32259  33A9  0008               	return
 32260  33AA                     __end_of_TMR0_StartTimer:	
 32261                           
 32262                           	psect	text90
 32263  33BF                     __ptext90:	
 32264 ;; *************** function _TMR0_SetInterruptHandler *****************
 32265 ;; Defined at:
 32266 ;;		line 161 in file "mcc_generated_files/tmr0.c"
 32267 ;; Parameters:    Size  Location     Type
 32268 ;;  InterruptHan    2    1[COMMON] PTR void 
 32269 ;;		 -> TMR0_DefaultInterruptHandler(1), 
 32270 ;; Auto vars:     Size  Location     Type
 32271 ;;		None
 32272 ;; Return value:  Size  Location     Type
 32273 ;;                  1    wreg      void 
 32274 ;; Registers used:
 32275 ;;		wreg
 32276 ;; Tracked objects:
 32277 ;;		On entry : 0/0
 32278 ;;		On exit  : 0/0
 32279 ;;		Unchanged: 0/0
 32280 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32281 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32282 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32283 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32284 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32285 ;;Total ram usage:        2 bytes
 32286 ;; Hardware stack levels used:    1
 32287 ;; Hardware stack levels required when called:    4
 32288 ;; This function calls:
 32289 ;;		Nothing
 32290 ;; This function is called by:
 32291 ;;		_TMR0_Initialize
 32292 ;; This function uses a non-reentrant model
 32293 ;;
 32294                           
 32295                           
 32296                           ;psect for function _TMR0_SetInterruptHandler
 32297  33BF                     _TMR0_SetInterruptHandler:	
 32298                           
 32299                           ;tmr0.c: 162: TMR0_InterruptHandler = InterruptHandler;
 32300                           
 32301                           ;incstack = 0
 32302                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
 32303  33BF  0872               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
 32304  33C0  0021               	movlb	1	; select bank1
 32305  33C1  00BF               	movwf	(_TMR0_InterruptHandler+1)^(0+128)
 32306  33C2  0871               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
 32307  33C3  00BE               	movwf	_TMR0_InterruptHandler^(0+128)
 32308  33C4  0008               	return
 32309  33C5                     __end_of_TMR0_SetInterruptHandler:	
 32310                           
 32311                           	psect	text91
 32312  33D7                     __ptext91:	
 32313 ;; *************** function _SPI1_Initialize *****************
 32314 ;; Defined at:
 32315 ;;		line 63 in file "mcc_generated_files/spi1.c"
 32316 ;; Parameters:    Size  Location     Type
 32317 ;;		None
 32318 ;; Auto vars:     Size  Location     Type
 32319 ;;		None
 32320 ;; Return value:  Size  Location     Type
 32321 ;;                  1    wreg      void 
 32322 ;; Registers used:
 32323 ;;		wreg
 32324 ;; Tracked objects:
 32325 ;;		On entry : 0/0
 32326 ;;		On exit  : 0/0
 32327 ;;		Unchanged: 0/0
 32328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32329 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32330 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32331 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32332 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32333 ;;Total ram usage:        0 bytes
 32334 ;; Hardware stack levels used:    1
 32335 ;; Hardware stack levels required when called:    4
 32336 ;; This function calls:
 32337 ;;		Nothing
 32338 ;; This function is called by:
 32339 ;;		_SYSTEM_Initialize
 32340 ;;		_nullifyBadge_platformInit
 32341 ;; This function uses a non-reentrant model
 32342 ;;
 32343                           
 32344                           
 32345                           ;psect for function _SPI1_Initialize
 32346  33D7                     _SPI1_Initialize:	
 32347                           
 32348                           ;spi1.c: 68: SSP1STAT = 0x40;
 32349                           
 32350                           ;incstack = 0
 32351                           ; Regs used in _SPI1_Initialize: [wreg]
 32352  33D7  3040               	movlw	64
 32353  33D8  0024               	movlb	4	; select bank4
 32354  33D9  0094               	movwf	20	;volatile
 32355                           
 32356                           ;spi1.c: 71: SSP1CON1 = 0x22;
 32357  33DA  3022               	movlw	34
 32358  33DB  0095               	movwf	21	;volatile
 32359                           
 32360                           ;spi1.c: 74: SSP1ADD = 0x01;
 32361  33DC  3001               	movlw	1
 32362  33DD  0092               	movwf	18	;volatile
 32363  33DE  0008               	return
 32364  33DF                     __end_of_SPI1_Initialize:	
 32365                           
 32366                           	psect	text92
 32367  345A                     __ptext92:	
 32368 ;; *************** function _PWM6_Initialize *****************
 32369 ;; Defined at:
 32370 ;;		line 57 in file "mcc_generated_files/pwm6.c"
 32371 ;; Parameters:    Size  Location     Type
 32372 ;;		None
 32373 ;; Auto vars:     Size  Location     Type
 32374 ;;		None
 32375 ;; Return value:  Size  Location     Type
 32376 ;;                  1    wreg      void 
 32377 ;; Registers used:
 32378 ;;		wreg, status,2, status,0
 32379 ;; Tracked objects:
 32380 ;;		On entry : 0/0
 32381 ;;		On exit  : 0/0
 32382 ;;		Unchanged: 0/0
 32383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32384 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32385 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32386 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32387 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32388 ;;Total ram usage:        0 bytes
 32389 ;; Hardware stack levels used:    1
 32390 ;; Hardware stack levels required when called:    4
 32391 ;; This function calls:
 32392 ;;		Nothing
 32393 ;; This function is called by:
 32394 ;;		_SYSTEM_Initialize
 32395 ;;		_nullifyBadge_platformInit
 32396 ;; This function uses a non-reentrant model
 32397 ;;
 32398                           
 32399                           
 32400                           ;psect for function _PWM6_Initialize
 32401  345A                     _PWM6_Initialize:	
 32402                           
 32403                           ;pwm6.c: 61: PWM6CON = 0x90;
 32404                           
 32405                           ;incstack = 0
 32406                           ; Regs used in _PWM6_Initialize: [wreg+status,2+status,0]
 32407  345A  3090               	movlw	144
 32408  345B  002C               	movlb	12	; select bank12
 32409  345C  009C               	movwf	28	;volatile
 32410                           
 32411                           ;pwm6.c: 64: PWM6DCH = 0x7F;
 32412  345D  307F               	movlw	127
 32413  345E  009B               	movwf	27	;volatile
 32414                           
 32415                           ;pwm6.c: 67: PWM6DCL = 0xC0;
 32416  345F  30C0               	movlw	192
 32417  3460  009A               	movwf	26	;volatile
 32418                           
 32419                           ;pwm6.c: 71: PWMTMRSbits.P6TSEL = 0x2;
 32420  3461  081F               	movf	31,w	;volatile
 32421  3462  39F3               	andlw	-13
 32422  3463  3808               	iorlw	8
 32423  3464  009F               	movwf	31	;volatile
 32424  3465  0008               	return
 32425  3466                     __end_of_PWM6_Initialize:	
 32426                           
 32427                           	psect	text93
 32428  344E                     __ptext93:	
 32429 ;; *************** function _PWM5_Initialize *****************
 32430 ;; Defined at:
 32431 ;;		line 57 in file "mcc_generated_files/pwm5.c"
 32432 ;; Parameters:    Size  Location     Type
 32433 ;;		None
 32434 ;; Auto vars:     Size  Location     Type
 32435 ;;		None
 32436 ;; Return value:  Size  Location     Type
 32437 ;;                  1    wreg      void 
 32438 ;; Registers used:
 32439 ;;		wreg, status,2, status,0
 32440 ;; Tracked objects:
 32441 ;;		On entry : 0/0
 32442 ;;		On exit  : 0/0
 32443 ;;		Unchanged: 0/0
 32444 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32445 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32446 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32447 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32448 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32449 ;;Total ram usage:        0 bytes
 32450 ;; Hardware stack levels used:    1
 32451 ;; Hardware stack levels required when called:    4
 32452 ;; This function calls:
 32453 ;;		Nothing
 32454 ;; This function is called by:
 32455 ;;		_SYSTEM_Initialize
 32456 ;;		_nullifyBadge_platformInit
 32457 ;; This function uses a non-reentrant model
 32458 ;;
 32459                           
 32460                           
 32461                           ;psect for function _PWM5_Initialize
 32462  344E                     _PWM5_Initialize:	
 32463                           
 32464                           ;pwm5.c: 61: PWM5CON = 0x90;
 32465                           
 32466                           ;incstack = 0
 32467                           ; Regs used in _PWM5_Initialize: [wreg+status,2+status,0]
 32468  344E  3090               	movlw	144
 32469  344F  002C               	movlb	12	; select bank12
 32470  3450  0099               	movwf	25	;volatile
 32471                           
 32472                           ;pwm5.c: 64: PWM5DCH = 0x7F;
 32473  3451  307F               	movlw	127
 32474  3452  0098               	movwf	24	;volatile
 32475                           
 32476                           ;pwm5.c: 67: PWM5DCL = 0xC0;
 32477  3453  30C0               	movlw	192
 32478  3454  0097               	movwf	23	;volatile
 32479                           
 32480                           ;pwm5.c: 71: PWMTMRSbits.P5TSEL = 0x2;
 32481  3455  081F               	movf	31,w	;volatile
 32482  3456  39FC               	andlw	-4
 32483  3457  3802               	iorlw	2
 32484  3458  009F               	movwf	31	;volatile
 32485  3459  0008               	return
 32486  345A                     __end_of_PWM5_Initialize:	
 32487                           
 32488                           	psect	text94
 32489  342D                     __ptext94:	
 32490 ;; *************** function _PWM2_Initialize *****************
 32491 ;; Defined at:
 32492 ;;		line 63 in file "mcc_generated_files/pwm2.c"
 32493 ;; Parameters:    Size  Location     Type
 32494 ;;		None
 32495 ;; Auto vars:     Size  Location     Type
 32496 ;;		None
 32497 ;; Return value:  Size  Location     Type
 32498 ;;                  1    wreg      void 
 32499 ;; Registers used:
 32500 ;;		wreg, status,2, status,0
 32501 ;; Tracked objects:
 32502 ;;		On entry : 0/0
 32503 ;;		On exit  : 0/0
 32504 ;;		Unchanged: 0/0
 32505 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32506 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32507 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32508 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32509 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32510 ;;Total ram usage:        0 bytes
 32511 ;; Hardware stack levels used:    1
 32512 ;; Hardware stack levels required when called:    4
 32513 ;; This function calls:
 32514 ;;		Nothing
 32515 ;; This function is called by:
 32516 ;;		_SYSTEM_Initialize
 32517 ;;		_nullifyBadge_platformInit
 32518 ;; This function uses a non-reentrant model
 32519 ;;
 32520                           
 32521                           
 32522                           ;psect for function _PWM2_Initialize
 32523  342D                     _PWM2_Initialize:	
 32524                           
 32525                           ;pwm2.c: 68: CCP2CON = 0x8F;
 32526                           
 32527                           ;incstack = 0
 32528                           ; Regs used in _PWM2_Initialize: [wreg+status,2+status,0]
 32529  342D  308F               	movlw	143
 32530  342E  0025               	movlb	5	; select bank5
 32531  342F  0097               	movwf	23	;volatile
 32532                           
 32533                           ;pwm2.c: 71: CCPR2H = 0x00;
 32534  3430  0196               	clrf	22	;volatile
 32535                           
 32536                           ;pwm2.c: 74: CCPR2L = 0xE0;
 32537  3431  30E0               	movlw	224
 32538  3432  0095               	movwf	21	;volatile
 32539                           
 32540                           ;pwm2.c: 77: CCPTMRSbits.C2TSEL = 0x1;
 32541  3433  081F               	movf	31,w	;volatile
 32542  3434  39F3               	andlw	-13
 32543  3435  3804               	iorlw	4
 32544  3436  009F               	movwf	31	;volatile
 32545  3437  0008               	return
 32546  3438                     __end_of_PWM2_Initialize:	
 32547                           
 32548                           	psect	text95
 32549  3422                     __ptext95:	
 32550 ;; *************** function _PWM1_Initialize *****************
 32551 ;; Defined at:
 32552 ;;		line 63 in file "mcc_generated_files/pwm1.c"
 32553 ;; Parameters:    Size  Location     Type
 32554 ;;		None
 32555 ;; Auto vars:     Size  Location     Type
 32556 ;;		None
 32557 ;; Return value:  Size  Location     Type
 32558 ;;                  1    wreg      void 
 32559 ;; Registers used:
 32560 ;;		wreg, status,2, status,0
 32561 ;; Tracked objects:
 32562 ;;		On entry : 0/0
 32563 ;;		On exit  : 0/0
 32564 ;;		Unchanged: 0/0
 32565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32566 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32567 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32568 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32569 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32570 ;;Total ram usage:        0 bytes
 32571 ;; Hardware stack levels used:    1
 32572 ;; Hardware stack levels required when called:    4
 32573 ;; This function calls:
 32574 ;;		Nothing
 32575 ;; This function is called by:
 32576 ;;		_SYSTEM_Initialize
 32577 ;;		_nullifyBadge_platformInit
 32578 ;; This function uses a non-reentrant model
 32579 ;;
 32580                           
 32581                           
 32582                           ;psect for function _PWM1_Initialize
 32583  3422                     _PWM1_Initialize:	
 32584                           
 32585                           ;pwm1.c: 68: CCP1CON = 0x8F;
 32586                           
 32587                           ;incstack = 0
 32588                           ; Regs used in _PWM1_Initialize: [wreg+status,2+status,0]
 32589  3422  308F               	movlw	143
 32590  3423  0025               	movlb	5	; select bank5
 32591  3424  0093               	movwf	19	;volatile
 32592                           
 32593                           ;pwm1.c: 71: CCPR1H = 0x00;
 32594  3425  0192               	clrf	18	;volatile
 32595                           
 32596                           ;pwm1.c: 74: CCPR1L = 0x95;
 32597  3426  3095               	movlw	149
 32598  3427  0091               	movwf	17	;volatile
 32599                           
 32600                           ;pwm1.c: 77: CCPTMRSbits.C1TSEL = 0x1;
 32601  3428  081F               	movf	31,w	;volatile
 32602  3429  39FC               	andlw	-4
 32603  342A  3801               	iorlw	1
 32604  342B  009F               	movwf	31	;volatile
 32605  342C  0008               	return
 32606  342D                     __end_of_PWM1_Initialize:	
 32607                           
 32608                           	psect	text96
 32609  2DD4                     __ptext96:	
 32610 ;; *************** function _PIN_MANAGER_Initialize *****************
 32611 ;; Defined at:
 32612 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
 32613 ;; Parameters:    Size  Location     Type
 32614 ;;		None
 32615 ;; Auto vars:     Size  Location     Type
 32616 ;;  state           1    1[COMMON] unsigned char 
 32617 ;; Return value:  Size  Location     Type
 32618 ;;                  1    wreg      void 
 32619 ;; Registers used:
 32620 ;;		wreg, status,2, status,0
 32621 ;; Tracked objects:
 32622 ;;		On entry : 0/0
 32623 ;;		On exit  : 0/0
 32624 ;;		Unchanged: 0/0
 32625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32626 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32627 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32628 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32629 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32630 ;;Total ram usage:        1 bytes
 32631 ;; Hardware stack levels used:    1
 32632 ;; Hardware stack levels required when called:    4
 32633 ;; This function calls:
 32634 ;;		Nothing
 32635 ;; This function is called by:
 32636 ;;		_SYSTEM_Initialize
 32637 ;;		_nullifyBadge_platformInit
 32638 ;; This function uses a non-reentrant model
 32639 ;;
 32640                           
 32641                           
 32642                           ;psect for function _PIN_MANAGER_Initialize
 32643  2DD4                     _PIN_MANAGER_Initialize:	
 32644                           
 32645                           ;pin_manager.c: 56: LATA = 0x00;
 32646                           
 32647                           ;incstack = 0
 32648                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0]
 32649  2DD4  0022               	movlb	2	; select bank2
 32650  2DD5  018C               	clrf	12	;volatile
 32651                           
 32652                           ;pin_manager.c: 57: LATB = 0x80;
 32653  2DD6  3080               	movlw	128
 32654  2DD7  008D               	movwf	13	;volatile
 32655                           
 32656                           ;pin_manager.c: 58: LATC = 0x1A;
 32657  2DD8  301A               	movlw	26
 32658  2DD9  008E               	movwf	14	;volatile
 32659                           
 32660                           ;pin_manager.c: 63: TRISA = 0x37;
 32661  2DDA  3037               	movlw	55
 32662  2DDB  0021               	movlb	1	; select bank1
 32663  2DDC  008C               	movwf	12	;volatile
 32664                           
 32665                           ;pin_manager.c: 64: TRISB = 0x30;
 32666  2DDD  3030               	movlw	48
 32667  2DDE  008D               	movwf	13	;volatile
 32668                           
 32669                           ;pin_manager.c: 65: TRISC = 0x60;
 32670  2DDF  3060               	movlw	96
 32671  2DE0  008E               	movwf	14	;volatile
 32672                           
 32673                           ;pin_manager.c: 70: ANSELC = 0x40;
 32674  2DE1  3040               	movlw	64
 32675  2DE2  0023               	movlb	3	; select bank3
 32676  2DE3  008E               	movwf	14	;volatile
 32677                           
 32678                           ;pin_manager.c: 71: ANSELB = 0x00;
 32679  2DE4  018D               	clrf	13	;volatile
 32680                           
 32681                           ;pin_manager.c: 72: ANSELA = 0x03;
 32682  2DE5  3003               	movlw	3
 32683  2DE6  008C               	movwf	12	;volatile
 32684                           
 32685                           ;pin_manager.c: 77: WPUB = 0x00;
 32686  2DE7  0024               	movlb	4	; select bank4
 32687  2DE8  018D               	clrf	13	;volatile
 32688                           
 32689                           ;pin_manager.c: 78: WPUA = 0x00;
 32690  2DE9  018C               	clrf	12	;volatile
 32691                           
 32692                           ;pin_manager.c: 79: WPUC = 0x00;
 32693  2DEA  018E               	clrf	14	;volatile
 32694                           
 32695                           ;pin_manager.c: 84: ODCONA = 0x00;
 32696  2DEB  0025               	movlb	5	; select bank5
 32697  2DEC  018C               	clrf	12	;volatile
 32698                           
 32699                           ;pin_manager.c: 85: ODCONB = 0x00;
 32700  2DED  018D               	clrf	13	;volatile
 32701                           
 32702                           ;pin_manager.c: 86: ODCONC = 0x00;
 32703  2DEE  018E               	clrf	14	;volatile
 32704                           
 32705                           ;pin_manager.c: 93: bool state = GIE;
 32706  2DEF  3000               	movlw	0
 32707  2DF0  1B8B               	btfsc	11,7	;volatile
 32708  2DF1  3001               	movlw	1
 32709  2DF2  00F1               	movwf	PIN_MANAGER_Initialize@state
 32710                           
 32711                           ;pin_manager.c: 94: GIE = 0;
 32712  2DF3  138B               	bcf	11,7	;volatile
 32713                           
 32714                           ;pin_manager.c: 95: PPSLOCK = 0x55;
 32715  2DF4  3055               	movlw	85
 32716  2DF5  003C               	movlb	28	; select bank28
 32717  2DF6  008F               	movwf	15	;volatile
 32718                           
 32719                           ;pin_manager.c: 96: PPSLOCK = 0xAA;
 32720  2DF7  30AA               	movlw	170
 32721  2DF8  008F               	movwf	15	;volatile
 32722                           
 32723                           ;pin_manager.c: 97: PPSLOCKbits.PPSLOCKED = 0x00;
 32724  2DF9  100F               	bcf	15,0	;volatile
 32725                           
 32726                           ;pin_manager.c: 99: RC1PPSbits.RC1PPS = 0x0D;
 32727  2DFA  003D               	movlb	29	; select bank29
 32728  2DFB  0821               	movf	33,w	;volatile
 32729  2DFC  39E0               	andlw	-32
 32730  2DFD  380D               	iorlw	13
 32731  2DFE  00A1               	movwf	33	;volatile
 32732                           
 32733                           ;pin_manager.c: 100: SSP1DATPPSbits.SSP1DATPPS = 0x0C;
 32734  2DFF  003C               	movlb	28	; select bank28
 32735  2E00  0821               	movf	33,w	;volatile
 32736  2E01  39E0               	andlw	-32
 32737  2E02  380C               	iorlw	12
 32738  2E03  00A1               	movwf	33	;volatile
 32739                           
 32740                           ;pin_manager.c: 101: SSP1CLKPPSbits.SSP1CLKPPS = 0x0E;
 32741  2E04  0820               	movf	32,w	;volatile
 32742  2E05  39E0               	andlw	-32
 32743  2E06  380E               	iorlw	14
 32744  2E07  00A0               	movwf	32	;volatile
 32745                           
 32746                           ;pin_manager.c: 102: RC4PPSbits.RC4PPS = 0x02;
 32747  2E08  003D               	movlb	29	; select bank29
 32748  2E09  0824               	movf	36,w	;volatile
 32749  2E0A  39E0               	andlw	-32
 32750  2E0B  3802               	iorlw	2
 32751  2E0C  00A4               	movwf	36	;volatile
 32752                           
 32753                           ;pin_manager.c: 103: RC0PPSbits.RC0PPS = 0x0C;
 32754  2E0D  0820               	movf	32,w	;volatile
 32755  2E0E  39E0               	andlw	-32
 32756  2E0F  380C               	iorlw	12
 32757  2E10  00A0               	movwf	32	;volatile
 32758                           
 32759                           ;pin_manager.c: 104: RC3PPSbits.RC3PPS = 0x03;
 32760  2E11  0823               	movf	35,w	;volatile
 32761  2E12  39E0               	andlw	-32
 32762  2E13  3803               	iorlw	3
 32763  2E14  00A3               	movwf	35	;volatile
 32764                           
 32765                           ;pin_manager.c: 105: RB6PPSbits.RB6PPS = 0x18;
 32766  2E15  081E               	movf	30,w	;volatile
 32767  2E16  39E0               	andlw	-32
 32768  2E17  3818               	iorlw	24
 32769  2E18  009E               	movwf	30	;volatile
 32770                           
 32771                           ;pin_manager.c: 106: RC2PPSbits.RC2PPS = 0x19;
 32772  2E19  0822               	movf	34,w	;volatile
 32773  2E1A  39E0               	andlw	-32
 32774  2E1B  3819               	iorlw	25
 32775  2E1C  00A2               	movwf	34	;volatile
 32776                           
 32777                           ;pin_manager.c: 108: PPSLOCK = 0x55;
 32778  2E1D  3055               	movlw	85
 32779  2E1E  003C               	movlb	28	; select bank28
 32780  2E1F  008F               	movwf	15	;volatile
 32781                           
 32782                           ;pin_manager.c: 109: PPSLOCK = 0xAA;
 32783  2E20  30AA               	movlw	170
 32784  2E21  008F               	movwf	15	;volatile
 32785                           
 32786                           ;pin_manager.c: 110: PPSLOCKbits.PPSLOCKED = 0x01;
 32787  2E22  140F               	bsf	15,0	;volatile
 32788                           
 32789                           ;pin_manager.c: 112: GIE = state;
 32790  2E23  1C71               	btfss	PIN_MANAGER_Initialize@state,0
 32791  2E24  2E27               	goto	u5460
 32792  2E25  178B               	bsf	11,7	;volatile
 32793  2E26  0008               	return
 32794  2E27                     u5460:	
 32795  2E27  138B               	bcf	11,7	;volatile
 32796  2E28  0008               	return
 32797  2E29                     __end_of_PIN_MANAGER_Initialize:	
 32798                           
 32799                           	psect	text97
 32800  33F9                     __ptext97:	
 32801 ;; *************** function _OSCILLATOR_Initialize *****************
 32802 ;; Defined at:
 32803 ;;		line 92 in file "mcc_generated_files/mcc.c"
 32804 ;; Parameters:    Size  Location     Type
 32805 ;;		None
 32806 ;; Auto vars:     Size  Location     Type
 32807 ;;		None
 32808 ;; Return value:  Size  Location     Type
 32809 ;;                  1    wreg      void 
 32810 ;; Registers used:
 32811 ;;		wreg, status,2
 32812 ;; Tracked objects:
 32813 ;;		On entry : 0/0
 32814 ;;		On exit  : 0/0
 32815 ;;		Unchanged: 0/0
 32816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32818 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32819 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32820 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32821 ;;Total ram usage:        0 bytes
 32822 ;; Hardware stack levels used:    1
 32823 ;; Hardware stack levels required when called:    4
 32824 ;; This function calls:
 32825 ;;		Nothing
 32826 ;; This function is called by:
 32827 ;;		_SYSTEM_Initialize
 32828 ;;		_nullifyBadge_platformInit
 32829 ;; This function uses a non-reentrant model
 32830 ;;
 32831                           
 32832                           
 32833                           ;psect for function _OSCILLATOR_Initialize
 32834  33F9                     _OSCILLATOR_Initialize:	
 32835                           
 32836                           ;mcc.c: 95: OSCCON1 = 0x00;
 32837                           
 32838                           ;incstack = 0
 32839                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 32840  33F9  0032               	movlb	18	; select bank18
 32841  33FA  0199               	clrf	25	;volatile
 32842                           
 32843                           ;mcc.c: 97: OSCCON3 = 0x00;
 32844  33FB  019B               	clrf	27	;volatile
 32845                           
 32846                           ;mcc.c: 99: OSCEN = 0x00;
 32847  33FC  019D               	clrf	29	;volatile
 32848                           
 32849                           ;mcc.c: 101: OSCFRQ = 0x06;
 32850  33FD  3006               	movlw	6
 32851  33FE  009F               	movwf	31	;volatile
 32852                           
 32853                           ;mcc.c: 103: OSCTUNE = 0x00;
 32854  33FF  019E               	clrf	30	;volatile
 32855  3400                     l208:	
 32856                           ;mcc.c: 106: {
 32857                           
 32858                           ;mcc.c: 105: while(PLLR == 0)
 32859                           
 32860  3400  181C               	btfsc	28,0	;volatile
 32861  3401  0008               	return
 32862  3402  2C00               	goto	l208
 32863  3403                     __end_of_OSCILLATOR_Initialize:	
 32864                           
 32865                           	psect	text98
 32866  3595                     __ptext98:	
 32867 ;; *************** function _PWM6_LoadDutyValue *****************
 32868 ;; Defined at:
 32869 ;;		line 74 in file "mcc_generated_files/pwm6.c"
 32870 ;; Parameters:    Size  Location     Type
 32871 ;;  dutyValue       2    1[COMMON] unsigned int 
 32872 ;; Auto vars:     Size  Location     Type
 32873 ;;		None
 32874 ;; Return value:  Size  Location     Type
 32875 ;;                  1    wreg      void 
 32876 ;; Registers used:
 32877 ;;		wreg, status,2, status,0
 32878 ;; Tracked objects:
 32879 ;;		On entry : 0/0
 32880 ;;		On exit  : 0/0
 32881 ;;		Unchanged: 0/0
 32882 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32883 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32884 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32885 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32886 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32887 ;;Total ram usage:        4 bytes
 32888 ;; Hardware stack levels used:    1
 32889 ;; Hardware stack levels required when called:    4
 32890 ;; This function calls:
 32891 ;;		Nothing
 32892 ;; This function is called by:
 32893 ;;		_nullifyBadge_platformInit
 32894 ;;		_nullifyBadge_userLedsSetBrightness
 32895 ;; This function uses a non-reentrant model
 32896 ;;
 32897                           
 32898                           
 32899                           ;psect for function _PWM6_LoadDutyValue
 32900  3595                     _PWM6_LoadDutyValue:	
 32901                           
 32902                           ;pwm6.c: 77: PWM6DCH = (dutyValue & 0x03FC)>>2;
 32903                           
 32904                           ;incstack = 0
 32905                           ; Regs used in _PWM6_LoadDutyValue: [wreg+status,2+status,0]
 32906  3595  0872               	movf	PWM6_LoadDutyValue@dutyValue+1,w
 32907  3596  00F4               	movwf	??_PWM6_LoadDutyValue+1
 32908  3597  0871               	movf	PWM6_LoadDutyValue@dutyValue,w
 32909  3598  00F3               	movwf	??_PWM6_LoadDutyValue
 32910  3599  36F4               	lsrf	??_PWM6_LoadDutyValue+1,f
 32911  359A  0CF3               	rrf	??_PWM6_LoadDutyValue,f
 32912  359B  36F4               	lsrf	??_PWM6_LoadDutyValue+1,f
 32913  359C  0CF3               	rrf	??_PWM6_LoadDutyValue,f
 32914  359D  0873               	movf	??_PWM6_LoadDutyValue,w
 32915  359E  002C               	movlb	12	; select bank12
 32916  359F  009B               	movwf	27	;volatile
 32917                           
 32918                           ;pwm6.c: 80: PWM6DCL = (dutyValue & 0x0003)<<6;
 32919  35A0  0871               	movf	PWM6_LoadDutyValue@dutyValue,w
 32920  35A1  3903               	andlw	3
 32921  35A2  00F3               	movwf	??_PWM6_LoadDutyValue
 32922  35A3  3005               	movlw	5
 32923  35A4                     u6345:	
 32924  35A4  35F3               	lslf	??_PWM6_LoadDutyValue,f
 32925  35A5  3EFF               	addlw	-1
 32926  35A6  1D03               	skipz
 32927  35A7  2DA4               	goto	u6345
 32928  35A8  3573               	lslf	??_PWM6_LoadDutyValue,w
 32929  35A9  009A               	movwf	26	;volatile
 32930  35AA  0008               	return
 32931  35AB                     __end_of_PWM6_LoadDutyValue:	
 32932                           
 32933                           	psect	text99
 32934  357F                     __ptext99:	
 32935 ;; *************** function _PWM5_LoadDutyValue *****************
 32936 ;; Defined at:
 32937 ;;		line 74 in file "mcc_generated_files/pwm5.c"
 32938 ;; Parameters:    Size  Location     Type
 32939 ;;  dutyValue       2    1[COMMON] unsigned int 
 32940 ;; Auto vars:     Size  Location     Type
 32941 ;;		None
 32942 ;; Return value:  Size  Location     Type
 32943 ;;                  1    wreg      void 
 32944 ;; Registers used:
 32945 ;;		wreg, status,2, status,0
 32946 ;; Tracked objects:
 32947 ;;		On entry : 0/0
 32948 ;;		On exit  : 0/0
 32949 ;;		Unchanged: 0/0
 32950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32951 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32952 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32953 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32954 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32955 ;;Total ram usage:        4 bytes
 32956 ;; Hardware stack levels used:    1
 32957 ;; Hardware stack levels required when called:    4
 32958 ;; This function calls:
 32959 ;;		Nothing
 32960 ;; This function is called by:
 32961 ;;		_nullifyBadge_platformInit
 32962 ;;		_fadeDisplay_Init
 32963 ;;		_nullifyBadge_segDisplaySetBrightness
 32964 ;; This function uses a non-reentrant model
 32965 ;;
 32966                           
 32967                           
 32968                           ;psect for function _PWM5_LoadDutyValue
 32969  357F                     _PWM5_LoadDutyValue:	
 32970                           
 32971                           ;pwm5.c: 77: PWM5DCH = (dutyValue & 0x03FC)>>2;
 32972                           
 32973                           ;incstack = 0
 32974                           ; Regs used in _PWM5_LoadDutyValue: [wreg+status,2+status,0]
 32975  357F  0872               	movf	PWM5_LoadDutyValue@dutyValue+1,w
 32976  3580  00F4               	movwf	??_PWM5_LoadDutyValue+1
 32977  3581  0871               	movf	PWM5_LoadDutyValue@dutyValue,w
 32978  3582  00F3               	movwf	??_PWM5_LoadDutyValue
 32979  3583  36F4               	lsrf	??_PWM5_LoadDutyValue+1,f
 32980  3584  0CF3               	rrf	??_PWM5_LoadDutyValue,f
 32981  3585  36F4               	lsrf	??_PWM5_LoadDutyValue+1,f
 32982  3586  0CF3               	rrf	??_PWM5_LoadDutyValue,f
 32983  3587  0873               	movf	??_PWM5_LoadDutyValue,w
 32984  3588  002C               	movlb	12	; select bank12
 32985  3589  0098               	movwf	24	;volatile
 32986                           
 32987                           ;pwm5.c: 80: PWM5DCL = (dutyValue & 0x0003)<<6;
 32988  358A  0871               	movf	PWM5_LoadDutyValue@dutyValue,w
 32989  358B  3903               	andlw	3
 32990  358C  00F3               	movwf	??_PWM5_LoadDutyValue
 32991  358D  3005               	movlw	5
 32992  358E                     u6335:	
 32993  358E  35F3               	lslf	??_PWM5_LoadDutyValue,f
 32994  358F  3EFF               	addlw	-1
 32995  3590  1D03               	skipz
 32996  3591  2D8E               	goto	u6335
 32997  3592  3573               	lslf	??_PWM5_LoadDutyValue,w
 32998  3593  0097               	movwf	23	;volatile
 32999  3594  0008               	return
 33000  3595                     __end_of_PWM5_LoadDutyValue:	
 33001                           
 33002                           	psect	text100
 33003  3569                     __ptext100:	
 33004 ;; *************** function _PWM2_LoadDutyValue *****************
 33005 ;; Defined at:
 33006 ;;		line 80 in file "mcc_generated_files/pwm2.c"
 33007 ;; Parameters:    Size  Location     Type
 33008 ;;  dutyValue       2    1[COMMON] unsigned int 
 33009 ;; Auto vars:     Size  Location     Type
 33010 ;;		None
 33011 ;; Return value:  Size  Location     Type
 33012 ;;                  1    wreg      void 
 33013 ;; Registers used:
 33014 ;;		wreg, status,2
 33015 ;; Tracked objects:
 33016 ;;		On entry : 0/0
 33017 ;;		On exit  : 0/0
 33018 ;;		Unchanged: 0/0
 33019 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 33020 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33021 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33022 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33023 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33024 ;;Total ram usage:        2 bytes
 33025 ;; Hardware stack levels used:    1
 33026 ;; Hardware stack levels required when called:    4
 33027 ;; This function calls:
 33028 ;;		Nothing
 33029 ;; This function is called by:
 33030 ;;		_nullifyBadge_platformInit
 33031 ;; This function uses a non-reentrant model
 33032 ;;
 33033                           
 33034                           
 33035                           ;psect for function _PWM2_LoadDutyValue
 33036  3569                     _PWM2_LoadDutyValue:	
 33037                           
 33038                           ;pwm2.c: 82: dutyValue &= 0x03FF;
 33039                           
 33040                           ;incstack = 0
 33041                           ; Regs used in _PWM2_LoadDutyValue: [wreg+status,2]
 33042  3569  30FF               	movlw	255
 33043  356A  05F1               	andwf	PWM2_LoadDutyValue@dutyValue,f
 33044  356B  3003               	movlw	3
 33045  356C  05F2               	andwf	PWM2_LoadDutyValue@dutyValue+1,f
 33046                           
 33047                           ;pwm2.c: 85: if(CCP2CONbits.CCP2FMT)
 33048  356D  0025               	movlb	5	; select bank5
 33049  356E  1E17               	btfss	23,4	;volatile
 33050  356F  2D7A               	goto	l10193
 33051                           
 33052                           ;pwm2.c: 86: {
 33053                           ;pwm2.c: 87: dutyValue <<= 6;
 33054  3570  3006               	movlw	6
 33055  3571                     u6385:	
 33056  3571  35F1               	lslf	PWM2_LoadDutyValue@dutyValue,f
 33057  3572  0DF2               	rlf	PWM2_LoadDutyValue@dutyValue+1,f
 33058  3573  0B89               	decfsz	9,f
 33059  3574  2D71               	goto	u6385
 33060                           
 33061                           ;pwm2.c: 88: CCPR2H = dutyValue >> 8;
 33062  3575  0872               	movf	PWM2_LoadDutyValue@dutyValue+1,w
 33063  3576  0096               	movwf	22	;volatile
 33064                           
 33065                           ;pwm2.c: 89: CCPR2L = dutyValue;
 33066  3577  0871               	movf	PWM2_LoadDutyValue@dutyValue,w
 33067  3578  0095               	movwf	21	;volatile
 33068                           
 33069                           ;pwm2.c: 90: }
 33070  3579  0008               	return
 33071  357A                     l10193:	
 33072                           
 33073                           ;pwm2.c: 91: else
 33074                           ;pwm2.c: 92: {
 33075                           ;pwm2.c: 93: CCPR2H = dutyValue >> 8;
 33076  357A  0872               	movf	PWM2_LoadDutyValue@dutyValue+1,w
 33077  357B  0096               	movwf	22	;volatile
 33078                           
 33079                           ;pwm2.c: 94: CCPR2L = dutyValue;
 33080  357C  0871               	movf	PWM2_LoadDutyValue@dutyValue,w
 33081  357D  0095               	movwf	21	;volatile
 33082  357E  0008               	return
 33083  357F                     __end_of_PWM2_LoadDutyValue:	
 33084                           
 33085                           	psect	text101
 33086  3553                     __ptext101:	
 33087 ;; *************** function _PWM1_LoadDutyValue *****************
 33088 ;; Defined at:
 33089 ;;		line 80 in file "mcc_generated_files/pwm1.c"
 33090 ;; Parameters:    Size  Location     Type
 33091 ;;  dutyValue       2    1[COMMON] unsigned int 
 33092 ;; Auto vars:     Size  Location     Type
 33093 ;;		None
 33094 ;; Return value:  Size  Location     Type
 33095 ;;                  1    wreg      void 
 33096 ;; Registers used:
 33097 ;;		wreg, status,2
 33098 ;; Tracked objects:
 33099 ;;		On entry : 0/0
 33100 ;;		On exit  : 0/0
 33101 ;;		Unchanged: 0/0
 33102 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 33103 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33104 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33105 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33106 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33107 ;;Total ram usage:        2 bytes
 33108 ;; Hardware stack levels used:    1
 33109 ;; Hardware stack levels required when called:    4
 33110 ;; This function calls:
 33111 ;;		Nothing
 33112 ;; This function is called by:
 33113 ;;		_nullifyBadge_platformInit
 33114 ;; This function uses a non-reentrant model
 33115 ;;
 33116                           
 33117                           
 33118                           ;psect for function _PWM1_LoadDutyValue
 33119  3553                     _PWM1_LoadDutyValue:	
 33120                           
 33121                           ;pwm1.c: 82: dutyValue &= 0x03FF;
 33122                           
 33123                           ;incstack = 0
 33124                           ; Regs used in _PWM1_LoadDutyValue: [wreg+status,2]
 33125  3553  30FF               	movlw	255
 33126  3554  05F1               	andwf	PWM1_LoadDutyValue@dutyValue,f
 33127  3555  3003               	movlw	3
 33128  3556  05F2               	andwf	PWM1_LoadDutyValue@dutyValue+1,f
 33129                           
 33130                           ;pwm1.c: 85: if(CCP1CONbits.CCP1FMT)
 33131  3557  0025               	movlb	5	; select bank5
 33132  3558  1E13               	btfss	19,4	;volatile
 33133  3559  2D64               	goto	l10177
 33134                           
 33135                           ;pwm1.c: 86: {
 33136                           ;pwm1.c: 87: dutyValue <<= 6;
 33137  355A  3006               	movlw	6
 33138  355B                     u6365:	
 33139  355B  35F1               	lslf	PWM1_LoadDutyValue@dutyValue,f
 33140  355C  0DF2               	rlf	PWM1_LoadDutyValue@dutyValue+1,f
 33141  355D  0B89               	decfsz	9,f
 33142  355E  2D5B               	goto	u6365
 33143                           
 33144                           ;pwm1.c: 88: CCPR1H = dutyValue >> 8;
 33145  355F  0872               	movf	PWM1_LoadDutyValue@dutyValue+1,w
 33146  3560  0092               	movwf	18	;volatile
 33147                           
 33148                           ;pwm1.c: 89: CCPR1L = dutyValue;
 33149  3561  0871               	movf	PWM1_LoadDutyValue@dutyValue,w
 33150  3562  0091               	movwf	17	;volatile
 33151                           
 33152                           ;pwm1.c: 90: }
 33153  3563  0008               	return
 33154  3564                     l10177:	
 33155                           
 33156                           ;pwm1.c: 91: else
 33157                           ;pwm1.c: 92: {
 33158                           ;pwm1.c: 93: CCPR1H = dutyValue >> 8;
 33159  3564  0872               	movf	PWM1_LoadDutyValue@dutyValue+1,w
 33160  3565  0092               	movwf	18	;volatile
 33161                           
 33162                           ;pwm1.c: 94: CCPR1L = dutyValue;
 33163  3566  0871               	movf	PWM1_LoadDutyValue@dutyValue,w
 33164  3567  0091               	movwf	17	;volatile
 33165  3568  0008               	return
 33166  3569                     __end_of_PWM1_LoadDutyValue:	
 33167                           
 33168                           	psect	intentry
 33169  0004                     __pintentry:	
 33170 ;; *************** function _INTERRUPT_InterruptManager *****************
 33171 ;; Defined at:
 33172 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
 33173 ;; Parameters:    Size  Location     Type
 33174 ;;		None
 33175 ;; Auto vars:     Size  Location     Type
 33176 ;;		None
 33177 ;; Return value:  Size  Location     Type
 33178 ;;                  1    wreg      void 
 33179 ;; Registers used:
 33180 ;;		wreg, status,2, status,0, pclath, cstack
 33181 ;; Tracked objects:
 33182 ;;		On entry : 0/0
 33183 ;;		On exit  : 0/0
 33184 ;;		Unchanged: 0/0
 33185 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 33186 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33187 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33188 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33189 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33190 ;;Total ram usage:        1 bytes
 33191 ;; Hardware stack levels used:    1
 33192 ;; Hardware stack levels required when called:    3
 33193 ;; This function calls:
 33194 ;;		_TMR0_ISR
 33195 ;; This function is called by:
 33196 ;;		Interrupt level 1
 33197 ;; This function uses a non-reentrant model
 33198 ;;
 33199                           
 33200  0004                     _INTERRUPT_InterruptManager:	
 33201                           
 33202                           ;incstack = 0
 33203  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 33204                           
 33205                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+status,2+status,0+pclath+cstack]
 33206  0005  3180               	pagesel	$
 33207  0006  0020               	movlb	0	; select bank0
 33208  0007  087F               	movf	127,w
 33209  0008  00F0               	movwf	??_INTERRUPT_InterruptManager
 33210                           
 33211                           ;interrupt_manager.c: 54: if(PIE0bits.TMR0IE == 1 && PIR0bits.TMR0IF == 1)
 33212  0009  0021               	movlb	1	; select bank1
 33213  000A  1E90               	btfss	16,5	;volatile
 33214  000B  2811               	goto	i1l363
 33215  000C  0020               	movlb	0	; select bank0
 33216  000D  1E90               	btfss	16,5	;volatile
 33217  000E  2811               	goto	i1l363
 33218                           
 33219                           ;interrupt_manager.c: 55: {
 33220                           ;interrupt_manager.c: 56: TMR0_ISR();
 33221  000F  31B4  247E         	fcall	_TMR0_ISR
 33222  0011                     i1l363:	
 33223                           ;interrupt_manager.c: 58: else
 33224                           ;interrupt_manager.c: 59: {
 33225                           
 33226                           ;interrupt_manager.c: 57: }
 33227                           
 33228  0011  0870               	movf	??_INTERRUPT_InterruptManager,w
 33229  0012  0020               	movlb	0	; select bank0
 33230  0013  00FF               	movwf	127
 33231  0014  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 33232  0015  0009               	retfie
 33233  0016                     __end_of_INTERRUPT_InterruptManager:	
 33234                           
 33235                           	psect	text103
 33236  347E                     __ptext103:	
 33237 ;; *************** function _TMR0_ISR *****************
 33238 ;; Defined at:
 33239 ;;		line 136 in file "mcc_generated_files/tmr0.c"
 33240 ;; Parameters:    Size  Location     Type
 33241 ;;		None
 33242 ;; Auto vars:     Size  Location     Type
 33243 ;;		None
 33244 ;; Return value:  Size  Location     Type
 33245 ;;                  1    wreg      void 
 33246 ;; Registers used:
 33247 ;;		wreg, status,2, status,0, pclath, cstack
 33248 ;; Tracked objects:
 33249 ;;		On entry : 0/0
 33250 ;;		On exit  : 0/0
 33251 ;;		Unchanged: 0/0
 33252 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 33253 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33254 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33255 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33256 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33257 ;;Total ram usage:        0 bytes
 33258 ;; Hardware stack levels used:    1
 33259 ;; Hardware stack levels required when called:    2
 33260 ;; This function calls:
 33261 ;;		_TMR0_CallBack
 33262 ;; This function is called by:
 33263 ;;		_INTERRUPT_InterruptManager
 33264 ;; This function uses a non-reentrant model
 33265 ;;
 33266                           
 33267                           
 33268                           ;psect for function _TMR0_ISR
 33269  347E                     _TMR0_ISR:	
 33270                           
 33271                           ;tmr0.c: 139: PIR0bits.TMR0IF = 0;
 33272                           
 33273                           ;incstack = 0
 33274                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
 33275  347E  0020               	movlb	0	; select bank0
 33276  347F  1290               	bcf	16,5	;volatile
 33277                           
 33278                           ;tmr0.c: 141: TMR0H = timer0ReloadVal16bit >> 8;
 33279  3480  0021               	movlb	1	; select bank1
 33280  3481  0841               	movf	(_timer0ReloadVal16bit+1)^(0+128),w	;volatile
 33281  3482  0020               	movlb	0	; select bank0
 33282  3483  0096               	movwf	22	;volatile
 33283                           
 33284                           ;tmr0.c: 142: TMR0L = (uint8_t) timer0ReloadVal16bit;
 33285  3484  0021               	movlb	1	; select bank1
 33286  3485  0840               	movf	_timer0ReloadVal16bit^(0+128),w	;volatile
 33287  3486  0020               	movlb	0	; select bank0
 33288  3487  0095               	movwf	21	;volatile
 33289                           
 33290                           ;tmr0.c: 146: TMR0_CallBack();
 33291  3488  31B4  2417         	fcall	_TMR0_CallBack
 33292  348A  0008               	return
 33293  348B                     __end_of_TMR0_ISR:	
 33294                           
 33295                           	psect	text104
 33296  3417                     __ptext104:	
 33297 ;; *************** function _TMR0_CallBack *****************
 33298 ;; Defined at:
 33299 ;;		line 151 in file "mcc_generated_files/tmr0.c"
 33300 ;; Parameters:    Size  Location     Type
 33301 ;;		None
 33302 ;; Auto vars:     Size  Location     Type
 33303 ;;		None
 33304 ;; Return value:  Size  Location     Type
 33305 ;;                  1    wreg      void 
 33306 ;; Registers used:
 33307 ;;		wreg, status,2, status,0, pclath, cstack
 33308 ;; Tracked objects:
 33309 ;;		On entry : 0/0
 33310 ;;		On exit  : 0/0
 33311 ;;		Unchanged: 0/0
 33312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 33313 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33314 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33315 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33316 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33317 ;;Total ram usage:        0 bytes
 33318 ;; Hardware stack levels used:    1
 33319 ;; Hardware stack levels required when called:    1
 33320 ;; This function calls:
 33321 ;;		Absolute function
 33322 ;;		_TMR0_DefaultInterruptHandler
 33323 ;; This function is called by:
 33324 ;;		_TMR0_ISR
 33325 ;; This function uses a non-reentrant model
 33326 ;;
 33327                           
 33328                           
 33329                           ;psect for function _TMR0_CallBack
 33330  3417                     _TMR0_CallBack:	
 33331                           
 33332                           ;tmr0.c: 155: if(TMR0_InterruptHandler)
 33333                           
 33334                           ;incstack = 0
 33335                           ; Regs used in _TMR0_CallBack: [wreg+status,2+status,0+pclath+cstack]
 33336  3417  0021               	movlb	1	; select bank1
 33337  3418  083E               	movf	_TMR0_InterruptHandler^(0+128),w
 33338  3419  043F               	iorwf	(_TMR0_InterruptHandler+1)^(0+128),w
 33339  341A  1903               	btfsc	3,2
 33340  341B  0008               	return
 33341                           
 33342                           ;tmr0.c: 156: {
 33343                           ;tmr0.c: 157: TMR0_InterruptHandler();
 33344  341C  083F               	movf	(_TMR0_InterruptHandler+1)^(0+128),w
 33345  341D  008A               	movwf	10
 33346  341E  083E               	movf	_TMR0_InterruptHandler^(0+128),w
 33347  341F  000A               	callw
 33348  3420  31B4               	pagesel	$
 33349  3421  0008               	return
 33350  3422                     __end_of_TMR0_CallBack:	
 33351                           
 33352                           	psect	text105
 33353  0800                     __ptext105:	
 33354 ;; *************** function _TMR0_DefaultInterruptHandler *****************
 33355 ;; Defined at:
 33356 ;;		line 165 in file "mcc_generated_files/tmr0.c"
 33357 ;; Parameters:    Size  Location     Type
 33358 ;;		None
 33359 ;; Auto vars:     Size  Location     Type
 33360 ;;		None
 33361 ;; Return value:  Size  Location     Type
 33362 ;;                  1    wreg      void 
 33363 ;; Registers used:
 33364 ;;		None
 33365 ;; Tracked objects:
 33366 ;;		On entry : 0/0
 33367 ;;		On exit  : 0/0
 33368 ;;		Unchanged: 0/0
 33369 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 33370 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33371 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33372 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33373 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33374 ;;Total ram usage:        0 bytes
 33375 ;; Hardware stack levels used:    1
 33376 ;; This function calls:
 33377 ;;		Nothing
 33378 ;; This function is called by:
 33379 ;;		_TMR0_Initialize
 33380 ;;		_TMR0_CallBack
 33381 ;; This function uses a non-reentrant model
 33382 ;;
 33383                           
 33384                           
 33385                           ;psect for function _TMR0_DefaultInterruptHandler
 33386  0800                     _TMR0_DefaultInterruptHandler:	
 33387                           
 33388                           ;incstack = 0
 33389                           ; Regs used in _TMR0_DefaultInterruptHandler: []
 33390  0800  0008               	return
 33391  0801                     __end_of_TMR0_DefaultInterruptHandler:	
 33392  007E                     btemp	set	126	;btemp
 33393  007E                     int$flags	set	126
 33394  007E                     wtemp0	set	126


Data Sizes:
    Strings     1149
    Constant    522
    Data        641
    BSS         303
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80     79      79
    BANK1            80      8      69
    BANK2            80      0      73
    BANK3            80      0      77
    BANK4            80      0      70
    BANK5            80      0      80
    BANK6            80      0      55
    BANK7            80      0      56
    BANK8            80      0      56
    BANK9            80      0      61
    BANK10           80      0      58
    BANK11           80      0      40
    BANK12           80      0       0
    BANK13           80      0       0
    BANK14           80      0       0
    BANK15           80      0       0
    BANK16           80      0       0
    BANK17           80      0       0
    BANK18           80      0       0
    BANK19           80      0       0
    BANK20           80      0       0
    BANK21           80      0       0
    BANK22           16      0       0
    BANK23            0      0       0
    BANK24            0      0       0
    BANK25            0      0       0

Pointer List with Targets:

    menu_run_option@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    flashy_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    menu_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    slot_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    locked_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    secret_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    flashy_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    menu_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    slot_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    locked_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    secret_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    matrix_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    flashy_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    menu_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    slot_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    locked_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    matrix_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    flashy_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    menu_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    slot_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    secret_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    matrix_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    menu_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    slot_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    locked_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    secret_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    matrix_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    flashy_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    slot_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    locked_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    secret_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    matrix_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    schedulerInst.tasks.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 0
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    schedulerInst.tasks.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 0
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    schedulerInst.tasks.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 0
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    schedulerInst.tasks.taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    schedulerExecute$4072	PTR struct t_schedulerTask size(1) Largest target is 13
		 -> matrix_task(BANK3[13]), secret_task(BANK2[13]), locked_task(BANK2[13]), slot_task(BANK2[13]), 
		 -> menu_task(BANK2[13]), flashy_task(BANK2[13]), NULL(NULL[0]), 

    matrix_secret_check@data	PTR struct t_matrix_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    secret_check@data	PTR struct t_secret_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    S902$3$0	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    S902$2$0	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    S902$4$0	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    TMR4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 120
		 -> STR_82(CODE[23]), STR_81(CODE[27]), STR_80(CODE[46]), matrix_secret_inputs.inputs(BANK4[20]), 
		 -> matrix_secret_inputs(BANK4[25]), STR_79(CODE[8]), STR_78(CODE[7]), STR_77(CODE[8]), 
		 -> STR_76(CODE[6]), STR_75(CODE[10]), STR_74(CODE[5]), STR_73(CODE[7]), 
		 -> STR_72(CODE[9]), STR_71(CODE[7]), STR_70(CODE[7]), Slot_Wheel(BANK6[55]), 
		 -> secret_inputs.inputs(BANK4[20]), secret_inputs(BANK4[25]), STR_45(CODE[5]), STR_44(CODE[5]), 
		 -> STR_43(CODE[11]), STR_42(CODE[13]), STR_39(CODE[5]), STR_38(CODE[43]), 
		 -> STR_37(CODE[13]), STR_36(CODE[47]), STR_35(CODE[17]), STR_34(CODE[120]), 
		 -> STR_33(CODE[34]), STR_32(CODE[16]), STR_31(CODE[35]), STR_30(CODE[15]), 
		 -> STR_29(CODE[12]), STR_28(CODE[29]), STR_27(CODE[19]), STR_26(CODE[17]), 
		 -> STR_25(CODE[40]), STR_24(CODE[27]), STR_23(CODE[29]), STR_22(CODE[30]), 
		 -> STR_21(CODE[36]), STR_20(CODE[28]), STR_19(CODE[22]), STR_18(CODE[8]), 
		 -> STR_17(CODE[26]), STR_16(CODE[21]), STR_15(CODE[19]), STR_14(CODE[6]), 
		 -> STR_13(CODE[8]), STR_12(CODE[9]), STR_11(CODE[5]), STR_10(CODE[18]), 
		 -> STR_8(CODE[6]), STR_7(CODE[8]), STR_6(CODE[10]), STR_5(CODE[6]), 
		 -> STR_4(CODE[5]), matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), 
		 -> slot_TaskData(BANK11[40]), menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 120
		 -> STR_82(CODE[23]), STR_81(CODE[27]), STR_80(CODE[46]), matrix_secret_inputs.inputs(BANK4[20]), 
		 -> matrix_secret_inputs(BANK4[25]), STR_79(CODE[8]), STR_78(CODE[7]), STR_77(CODE[8]), 
		 -> STR_76(CODE[6]), STR_75(CODE[10]), STR_74(CODE[5]), STR_73(CODE[7]), 
		 -> STR_72(CODE[9]), STR_71(CODE[7]), STR_70(CODE[7]), Slot_Wheel(BANK6[55]), 
		 -> secret_inputs.inputs(BANK4[20]), secret_inputs(BANK4[25]), STR_45(CODE[5]), STR_44(CODE[5]), 
		 -> STR_43(CODE[11]), STR_42(CODE[13]), STR_39(CODE[5]), STR_38(CODE[43]), 
		 -> STR_37(CODE[13]), STR_36(CODE[47]), STR_35(CODE[17]), STR_34(CODE[120]), 
		 -> STR_33(CODE[34]), STR_32(CODE[16]), STR_31(CODE[35]), STR_30(CODE[15]), 
		 -> STR_29(CODE[12]), STR_28(CODE[29]), STR_27(CODE[19]), STR_26(CODE[17]), 
		 -> STR_25(CODE[40]), STR_24(CODE[27]), STR_23(CODE[29]), STR_22(CODE[30]), 
		 -> STR_21(CODE[36]), STR_20(CODE[28]), STR_19(CODE[22]), STR_18(CODE[8]), 
		 -> STR_17(CODE[26]), STR_16(CODE[21]), STR_15(CODE[19]), STR_14(CODE[6]), 
		 -> STR_13(CODE[8]), STR_12(CODE[9]), STR_11(CODE[5]), STR_10(CODE[18]), 
		 -> STR_8(CODE[6]), STR_7(CODE[8]), STR_6(CODE[10]), STR_5(CODE[6]), 
		 -> STR_4(CODE[5]), matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), 
		 -> slot_TaskData(BANK11[40]), menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    memset@p1	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), badge_inst(BANK3[18]), NULL(NULL[0]), 

    memset@p	PTR unsigned char  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), badge_inst(BANK3[18]), NULL(NULL[0]), 

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_83(CODE[7]), sprintf@c(BANK0[1]), STR_63(CODE[9]), STR_62(CODE[13]), 
		 -> STR_61(CODE[12]), STR_60(CODE[8]), STR_59(CODE[11]), STR_58(CODE[11]), 
		 -> STR_57(CODE[9]), STR_56(CODE[8]), STR_55(CODE[8]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_69(CODE[3]), STR_68(CODE[9]), STR_67(CODE[9]), STR_66(CODE[9]), 
		 -> STR_65(CODE[9]), STR_64(CODE[9]), STR_41(CODE[4]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 41
		 -> flashy_Main@hit_counter(BANK0[6]), matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), 
		 -> slot_TaskData(BANK11[40]), menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    matrix_Exit@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    matrix_secret_clear@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    matrix_Main@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    matrix_Main@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    matrix_Main@data	PTR struct t_matrix_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    matrix_display_option@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    matrix_display_option@data	PTR struct t_matrix_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    matrix_secret_check@inputs	PTR unsigned char  size(1) Largest target is 26
		 -> matrix_secret_inputs.inputs(BANK4[20]), matrix_secret_inputs(BANK4[25]), 

    matrix_Init@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    matrix_Init@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    matrix_Init@data	PTR struct t_matrix_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    S3138matrix_secret_input$variable	PTR unsigned int  size(1) Largest target is 2
		 -> secret_value(BANK1[2]), 

    matrix_secret_inputs.variable	PTR unsigned int  size(1) Largest target is 2
		 -> secret_value(BANK1[2]), 

    matrix_option	PTR unsigned char [10] size(2) Largest target is 10
		 -> STR_79(CODE[8]), STR_78(CODE[7]), STR_77(CODE[8]), STR_76(CODE[6]), 
		 -> STR_75(CODE[10]), STR_74(CODE[5]), STR_73(CODE[7]), STR_72(CODE[9]), 
		 -> STR_71(CODE[7]), STR_70(CODE[7]), 

    slot_Exit@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    slot_Main@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    slot_Main@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    slot_Main@data	PTR struct t_slot_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    slot_Finished_Animation@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    slot_Finished_Animation@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    slot_Finished_Animation@data	PTR struct t_slot_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    slot_Running_Animation@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    slot_Running_Animation@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    slot_Running_Animation@data	PTR struct t_slot_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    slot_Setup@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    slot_taskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    slot_Setup@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    slot_Setup@data	PTR struct t_slot_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    S2371t_slot_taskData$badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    slot_Init@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    slot_Init@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    slot_Init@data	PTR struct t_slot_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    Shot_Options_Long	PTR unsigned char [9] size(2) Largest target is 13
		 -> STR_63(CODE[9]), STR_62(CODE[13]), STR_61(CODE[12]), STR_60(CODE[8]), 
		 -> STR_59(CODE[11]), STR_58(CODE[11]), STR_57(CODE[9]), STR_56(CODE[8]), 
		 -> STR_55(CODE[8]), 

    Shot_Options	PTR unsigned char [9] size(2) Largest target is 5
		 -> STR_54(CODE[5]), STR_53(CODE[5]), STR_52(CODE[5]), STR_51(CODE[5]), 
		 -> STR_50(CODE[5]), STR_49(CODE[5]), STR_48(CODE[5]), STR_47(CODE[5]), 
		 -> STR_46(CODE[5]), 

    secret_Exit@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    secret_clear@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    secret_clear@data	PTR struct t_secret_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    secret_Main@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    secret_Main@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    secret_Main@data	PTR struct t_secret_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    secret_check@inputs	PTR unsigned char  size(1) Largest target is 26
		 -> secret_inputs.inputs(BANK4[20]), secret_inputs(BANK4[25]), 

    secret_Init@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    secret_Init@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    secret_Init@data	PTR struct t_secret_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    S2847secret_input$variable	PTR unsigned int  size(1) Largest target is 2
		 -> secret_value(BANK1[2]), 

    secret_inputs.variable	PTR unsigned int  size(1) Largest target is 2
		 -> secret_value(BANK1[2]), 

    locked_Exit@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    locked_clear@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    locked_clear@data	PTR struct t_locked_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    locked_Main@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    locked_Main@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    locked_Main@data	PTR struct t_locked_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    locked_Init@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    locked_Init@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    locked_Init@data	PTR struct t_locked_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    flashy_Exit@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    flashy_Main@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    flashy_Main@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    flashy_Main@data	PTR struct t_flashy_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    flashy_display_option@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    flashy_display_option@data	PTR struct t_flashy_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    flashy_Init@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    flashy_Init@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    flashy_Init@data	PTR struct t_flashy_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    flashy_option	PTR unsigned char [29] size(2) Largest target is 120
		 -> STR_39(CODE[5]), STR_38(CODE[43]), STR_37(CODE[13]), STR_36(CODE[47]), 
		 -> STR_35(CODE[17]), STR_34(CODE[120]), STR_33(CODE[34]), STR_32(CODE[16]), 
		 -> STR_31(CODE[35]), STR_30(CODE[15]), STR_29(CODE[12]), STR_28(CODE[29]), 
		 -> STR_27(CODE[19]), STR_26(CODE[17]), STR_25(CODE[40]), STR_24(CODE[27]), 
		 -> STR_23(CODE[29]), STR_22(CODE[30]), STR_21(CODE[36]), STR_20(CODE[28]), 
		 -> STR_19(CODE[22]), STR_18(CODE[8]), STR_17(CODE[26]), STR_16(CODE[21]), 
		 -> STR_15(CODE[19]), STR_14(CODE[6]), STR_13(CODE[8]), STR_12(CODE[9]), 
		 -> STR_11(CODE[5]), 

    FLASHY_TEXT_SECRET_TEST	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_10(CODE[18]), 

    FLASHY_TEXT	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_9(CODE[5]), 

    menu_Exit@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    menu_clear@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    menu_clear@data	PTR struct t_menu_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    menu_run_option@data	PTR struct t_menu_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    menu_display_option@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    menu_display_option@data	PTR struct t_menu_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    menu_Main@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    slot_taskData	PTR struct t_slot_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    menu_Main@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    menu_Main@data	PTR struct t_menu_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    menu_Init@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    menu_Init@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    menu_Init@data	PTR struct t_menu_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    menu_option	PTR unsigned char [5] size(2) Largest target is 10
		 -> STR_8(CODE[6]), STR_7(CODE[8]), STR_6(CODE[10]), STR_5(CODE[6]), 
		 -> STR_4(CODE[5]), 

    displayL2_ClrUserLeds@display	PTR struct t_nullifyDisplay_l2 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    displayL2_SetUserLeds@display	PTR struct t_nullifyDisplay_l2 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    displayL2_EraseSegDisplay@display	PTR struct t_nullifyDisplay_l2 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    displayL2_ForceUpdate@display	PTR struct t_nullifyDisplay_l2 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    displayL2_PutStr@str	PTR unsigned char  size(2) Largest target is 120
		 -> flashy_Main@hit_counter(BANK0[6]), STR_40(CODE[5]), STR_39(CODE[5]), STR_38(CODE[43]), 
		 -> STR_37(CODE[13]), STR_36(CODE[47]), STR_35(CODE[17]), STR_34(CODE[120]), 
		 -> STR_33(CODE[34]), STR_32(CODE[16]), STR_31(CODE[35]), STR_30(CODE[15]), 
		 -> STR_29(CODE[12]), STR_28(CODE[29]), STR_27(CODE[19]), STR_26(CODE[17]), 
		 -> STR_25(CODE[40]), STR_24(CODE[27]), STR_23(CODE[29]), STR_22(CODE[30]), 
		 -> STR_21(CODE[36]), STR_20(CODE[28]), STR_19(CODE[22]), STR_18(CODE[8]), 
		 -> STR_17(CODE[26]), STR_16(CODE[21]), STR_15(CODE[19]), STR_14(CODE[6]), 
		 -> STR_13(CODE[8]), STR_12(CODE[9]), STR_11(CODE[5]), STR_8(CODE[6]), 
		 -> STR_7(CODE[8]), STR_6(CODE[10]), STR_5(CODE[6]), STR_4(CODE[5]), 
		 -> STR_3(CODE[5]), marquee@display_string(BANK0[5]), marquee_speedy@display_string(BANK0[5]), 

    displayL2_PutStr@display	PTR struct t_nullifyDisplay_l2 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    displayL2_PutChar@display	PTR struct t_nullifyDisplay_l2 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    displayL2_Initialize@display	PTR struct t_nullifyDisplay_l2 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    displayL1_Update@display	PTR struct t_nullifyDisplay_l1 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    displayL1_SetUserLed@display	PTR struct t_nullifyDisplay_l1 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    displayL1_SetSegChar@display	PTR struct t_nullifyDisplay_l1 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    sp__memset	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), badge_inst(BANK3[18]), NULL(NULL[0]), 

    displayL1_Initialize@display	PTR struct t_nullifyDisplay_l1 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    nullifyBadge_irTxRelease@badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    nullifyBadge_irTxRegister@badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    nullifyBadge_userLedsClr@badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    nullifyBadge_userLedsSet@badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    nullifyBadge_userLedsRegister@badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    nullifyBadge_segDisplayErase@badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    nullifyBadge_segDisplayPutStr@str	PTR unsigned char  size(2) Largest target is 120
		 -> flashy_Main@hit_counter(BANK0[6]), STR_40(CODE[5]), STR_39(CODE[5]), STR_38(CODE[43]), 
		 -> STR_37(CODE[13]), STR_36(CODE[47]), STR_35(CODE[17]), STR_34(CODE[120]), 
		 -> STR_33(CODE[34]), STR_32(CODE[16]), STR_31(CODE[35]), STR_30(CODE[15]), 
		 -> STR_29(CODE[12]), STR_28(CODE[29]), STR_27(CODE[19]), STR_26(CODE[17]), 
		 -> STR_25(CODE[40]), STR_24(CODE[27]), STR_23(CODE[29]), STR_22(CODE[30]), 
		 -> STR_21(CODE[36]), STR_20(CODE[28]), STR_19(CODE[22]), STR_18(CODE[8]), 
		 -> STR_17(CODE[26]), STR_16(CODE[21]), STR_15(CODE[19]), STR_14(CODE[6]), 
		 -> STR_13(CODE[8]), STR_12(CODE[9]), STR_11(CODE[5]), STR_8(CODE[6]), 
		 -> STR_7(CODE[8]), STR_6(CODE[10]), STR_5(CODE[6]), STR_4(CODE[5]), 
		 -> marquee@display_string(BANK0[5]), marquee_speedy@display_string(BANK0[5]), 

    nullifyBadge_segDisplayPutStr@badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    nullifyBadge_segDisplayForceUpdate@badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    nullifyBadge_segDisplayRegister@badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    nullifyBadge_platformInit@badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    matrix_task.taskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    secret_task.taskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    locked_task.taskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    slot_task.taskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    menu_task.taskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    flashy_task.taskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    marquee@string	PTR unsigned char  size(2) Largest target is 120
		 -> STR_45(CODE[5]), STR_44(CODE[5]), STR_43(CODE[11]), STR_42(CODE[13]), 
		 -> STR_39(CODE[5]), STR_38(CODE[43]), STR_37(CODE[13]), STR_36(CODE[47]), 
		 -> STR_35(CODE[17]), STR_34(CODE[120]), STR_33(CODE[34]), STR_32(CODE[16]), 
		 -> STR_31(CODE[35]), STR_30(CODE[15]), STR_29(CODE[12]), STR_28(CODE[29]), 
		 -> STR_27(CODE[19]), STR_26(CODE[17]), STR_25(CODE[40]), STR_24(CODE[27]), 
		 -> STR_23(CODE[29]), STR_22(CODE[30]), STR_21(CODE[36]), STR_20(CODE[28]), 
		 -> STR_19(CODE[22]), STR_18(CODE[8]), STR_17(CODE[26]), STR_16(CODE[21]), 
		 -> STR_15(CODE[19]), STR_14(CODE[6]), STR_13(CODE[8]), STR_12(CODE[9]), 
		 -> STR_11(CODE[5]), STR_10(CODE[18]), STR_8(CODE[6]), STR_7(CODE[8]), 
		 -> STR_6(CODE[10]), STR_5(CODE[6]), STR_4(CODE[5]), matrix_TaskData(BANK9[31]), 
		 -> secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), menu_TaskData(BANK5[14]), 
		 -> flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    marquee_speedy@string	PTR unsigned char  size(2) Largest target is 120
		 -> STR_82(CODE[23]), STR_81(CODE[27]), STR_80(CODE[46]), STR_79(CODE[8]), 
		 -> STR_78(CODE[7]), STR_77(CODE[8]), STR_76(CODE[6]), STR_75(CODE[10]), 
		 -> STR_74(CODE[5]), STR_73(CODE[7]), STR_72(CODE[9]), STR_71(CODE[7]), 
		 -> STR_70(CODE[7]), STR_39(CODE[5]), STR_38(CODE[43]), STR_37(CODE[13]), 
		 -> STR_36(CODE[47]), STR_35(CODE[17]), STR_34(CODE[120]), STR_33(CODE[34]), 
		 -> STR_32(CODE[16]), STR_31(CODE[35]), STR_30(CODE[15]), STR_29(CODE[12]), 
		 -> STR_28(CODE[29]), STR_27(CODE[19]), STR_26(CODE[17]), STR_25(CODE[40]), 
		 -> STR_24(CODE[27]), STR_23(CODE[29]), STR_22(CODE[30]), STR_21(CODE[36]), 
		 -> STR_20(CODE[28]), STR_19(CODE[22]), STR_18(CODE[8]), STR_17(CODE[26]), 
		 -> STR_16(CODE[21]), STR_15(CODE[19]), STR_14(CODE[6]), STR_13(CODE[8]), 
		 -> STR_12(CODE[9]), STR_11(CODE[5]), matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), 
		 -> locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), 
		 -> NULL(NULL[0]), 

    schedulerInst.tasks	PTR struct t_schedulerTask[16] size(1) Largest target is 13
		 -> matrix_task(BANK3[13]), secret_task(BANK2[13]), locked_task(BANK2[13]), slot_task(BANK2[13]), 
		 -> menu_task(BANK2[13]), flashy_task(BANK2[13]), NULL(NULL[0]), 

    S1195t_matrix_taskData$badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    matrix_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    S1170t_secret_taskData$badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    secret_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    S1161t_locked_taskData$badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    locked_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    S1067t_slot_taskData$badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    slot_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    S1136t_menu_taskData$badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    menu_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    S1118t_flashy_taskData$badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    flashy_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    matrix_task.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    matrix_task.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    matrix_task.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    matrix_task.taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    secret_task.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    secret_task.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    secret_task.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    secret_task.taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    locked_task.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    locked_task.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    locked_task.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    locked_task.taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    slot_task.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    slot_task.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    slot_task.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    slot_task.taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    menu_task.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    menu_task.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    menu_task.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    menu_task.taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    flashy_task.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    flashy_task.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    flashy_task.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    flashy_task.taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    fadeDisplay_Exit@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    fadeDisplay_Main@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    S1013t_fadeDisplay_taskData$badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    fadeDisplay_Init@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    schedulerExecute@scheduler.tasks.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    schedulerExecute@scheduler.tasks.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    schedulerExecute@scheduler.tasks.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    schedulerExecute@scheduler.tasks.taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    schedulerExecute@scheduler.tasks	PTR struct t_schedulerTask[16] size(1) Largest target is 13
		 -> matrix_task(BANK3[13]), secret_task(BANK2[13]), locked_task(BANK2[13]), slot_task(BANK2[13]), 
		 -> menu_task(BANK2[13]), flashy_task(BANK2[13]), NULL(NULL[0]), 

    schedulerExecute@scheduler	PTR struct t_scheduler size(1) Largest target is 34
		 -> schedulerInst(BANK3[18]), 

    scheduler_TaskRemove@task.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    scheduler_TaskRemove@task.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    scheduler_TaskRemove@task.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    scheduler_TaskRemove@task.taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    scheduler_TaskRemove@scheduler.tasks	PTR struct t_schedulerTask[16] size(1) Largest target is 13
		 -> matrix_task(BANK3[13]), secret_task(BANK2[13]), locked_task(BANK2[13]), slot_task(BANK2[13]), 
		 -> menu_task(BANK2[13]), flashy_task(BANK2[13]), NULL(NULL[0]), 

    scheduler_TaskAdd@task.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    scheduler_TaskAdd@task.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    scheduler_TaskAdd@task.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    scheduler_TaskAdd@task.taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    scheduler_TaskAdd@scheduler.tasks.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    scheduler_TaskAdd@scheduler.tasks.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    scheduler_TaskAdd@scheduler.tasks.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    scheduler_TaskAdd@scheduler.tasks.taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    scheduler_TaskAdd@task	PTR struct t_schedulerTask size(1) Largest target is 13
		 -> matrix_task(BANK3[13]), secret_task(BANK2[13]), locked_task(BANK2[13]), slot_task(BANK2[13]), 
		 -> menu_task(BANK2[13]), flashy_task(BANK2[13]), 

    scheduler_TaskAdd@scheduler.tasks	PTR struct t_schedulerTask[16] size(1) Largest target is 13
		 -> matrix_task(BANK3[13]), secret_task(BANK2[13]), locked_task(BANK2[13]), slot_task(BANK2[13]), 
		 -> menu_task(BANK2[13]), flashy_task(BANK2[13]), NULL(NULL[0]), 

    scheduler_TaskAdd@scheduler	PTR struct t_scheduler size(1) Largest target is 34
		 -> schedulerInst(BANK3[18]), 

    scheduler_TaskInit@task.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    scheduler_TaskInit@task.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    scheduler_TaskInit@task.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    scheduler_TaskInit@task.taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    scheduler_TaskInit@task	PTR struct t_schedulerTask size(1) Largest target is 13
		 -> matrix_task(BANK3[13]), secret_task(BANK2[13]), locked_task(BANK2[13]), slot_task(BANK2[13]), 
		 -> menu_task(BANK2[13]), flashy_task(BANK2[13]), 

    S923t_scheduler$tasks	PTR struct t_schedulerTask[16] size(1) Largest target is 13
		 -> matrix_task(BANK3[13]), secret_task(BANK2[13]), locked_task(BANK2[13]), slot_task(BANK2[13]), 
		 -> menu_task(BANK2[13]), flashy_task(BANK2[13]), NULL(NULL[0]), 

    scheduler_Init@scheduler.tasks	PTR struct t_schedulerTask[16] size(1) Largest target is 13
		 -> matrix_task(BANK3[13]), secret_task(BANK2[13]), locked_task(BANK2[13]), slot_task(BANK2[13]), 
		 -> menu_task(BANK2[13]), flashy_task(BANK2[13]), NULL(NULL[0]), 

    scheduler_Init@scheduler	PTR struct t_scheduler size(1) Largest target is 34
		 -> schedulerInst(BANK3[18]), 

    S902t_schedulerTask$taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    scheduler_TaskRun@task.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    S902t_schedulerTask$taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    scheduler_TaskRun@task.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    S902t_schedulerTask$taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    scheduler_TaskRun@task.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    S902t_schedulerTask$taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    scheduler_TaskRun@task.taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    scheduler_TaskRun@task	PTR struct t_schedulerTask size(1) Largest target is 13
		 -> matrix_task(BANK3[13]), secret_task(BANK2[13]), locked_task(BANK2[13]), slot_task(BANK2[13]), 
		 -> menu_task(BANK2[13]), flashy_task(BANK2[13]), NULL(NULL[0]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR0_DefaultInterruptHandler(), 

    SPI1_Exchange8bitBuffer@dataOut	PTR unsigned char  size(1) Largest target is 10
		 -> displayL1_Update@tmpRxBuf(BANK0[10]), 

    SPI1_Exchange8bitBuffer@dataIn	PTR unsigned char  size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 


Critical Paths under _main in COMMON

    _schedulerExecute->_TMR0_Read16bitTimer
    _scheduler_TaskRun->_TMR0_Read16bitTimer
    _secret_check->_strlen
    _matrix_secret_check->_strlen
    _slot_Setup->___lwmod
    _nullifyBadge_userLedsClr->_displayL2_ClrUserLeds
    _displayL2_ClrUserLeds->_displayL1_Update
    _sprintf->___lwmod
    _led_rand->___almod
    _rand->___lmul
    _nullifyBadge_userLedsSet->_displayL2_SetUserLeds
    _displayL2_SetUserLeds->_displayL1_Update
    _displayL1_SetSegChar->_displayCharReverse
    _nullifyBadge_segDisplayForceUpdate->_displayL2_ForceUpdate
    _displayL2_ForceUpdate->_displayL1_Update
    ___lwmod->___lwdiv
    _displayL2_Initialize->_displayL1_Initialize
    _displayL1_Initialize->_displayL1_Update
    _displayL1_Update->_SPI1_Exchange8bitBuffer
    _SPI1_Exchange8bitBuffer->_SPI1_Exchange8bit
    _TMR0_Initialize->_TMR0_SetInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_schedulerExecute
    _scheduler_TaskAdd->_matrix_Init
    _slot_Init->_nullifyBadge_segDisplayErase
    _secret_Init->_nullifyBadge_segDisplayErase
    _menu_Init->_nullifyBadge_segDisplayErase
    _matrix_Init->_nullifyBadge_segDisplayErase
    _locked_Init->_nullifyBadge_segDisplayErase
    _flashy_Init->_nullifyBadge_segDisplayErase
    _schedulerExecute->_scheduler_TaskRun
    _scheduler_TaskRun->_slot_Main
    _slot_Running_Animation->_led_circle
    _slot_Finished_Animation->_led_rand
    _menu_Main->_menu_display_option
    _menu_run_option->_menu_clear
    _menu_clear->_nullifyBadge_segDisplayErase
    _menu_display_option->_marquee
    _matrix_display_option->_marquee_speedy
    _slot_Setup->___lwmod
    _locked_clear->_nullifyBadge_segDisplayErase
    _displayL2_ClrUserLeds->_displayL1_Update
    _nullifyBadge_segDisplayErase->_displayL2_EraseSegDisplay
    _displayL2_EraseSegDisplay->_displayL2_PutStr
    _sprintf->___lwmod
    _let_alternate->_nullifyBadge_userLedsSet
    _led_roundabout->_nullifyBadge_userLedsSet
    _led_rand->___almod
    _rand->___lmul
    ___almod->_rand
    _led_curtain->_nullifyBadge_userLedsSet
    _led_circle->_nullifyBadge_userLedsSet
    _led_Parody->_nullifyBadge_userLedsSet
    _nullifyBadge_userLedsSet->_displayL2_SetUserLeds
    _displayL2_SetUserLeds->_displayL1_Update
    _flashy_display_option->_marquee
    _flashy_display_option->_marquee_speedy
    _marquee_speedy->_nullifyBadge_segDisplayPutStr
    _marquee->_nullifyBadge_segDisplayPutStr
    _nullifyBadge_segDisplayPutStr->_displayL2_PutStr
    _displayL2_PutStr->_displayL2_PutChar
    _displayL2_PutChar->_displayL1_SetSegChar
    _displayL2_ForceUpdate->_displayL1_Update
    ___lwmod->_rand
    _nullifyBadge_platformInit->_displayL2_Initialize
    _displayL1_Initialize->_displayL1_Update

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_schedulerExecute

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK15

    None.

Critical Paths under _main in BANK16

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK16

    None.

Critical Paths under _main in BANK17

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK17

    None.

Critical Paths under _main in BANK18

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK18

    None.

Critical Paths under _main in BANK19

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK19

    None.

Critical Paths under _main in BANK20

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK20

    None.

Critical Paths under _main in BANK21

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK21

    None.

Critical Paths under _main in BANK22

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK22

    None.

Critical Paths under _main in BANK23

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK23

    None.

Critical Paths under _main in BANK24

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK24

    None.

Critical Paths under _main in BANK25

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK25

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0  383384
                                             78 BANK0      1     1      0
          _nullifyBadge_platformInit
                   _schedulerExecute
                     _scheduler_Init
                  _scheduler_TaskAdd
                 _scheduler_TaskInit
 ---------------------------------------------------------------------------------
 (1) _scheduler_TaskInit                                   1     1      0     433
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _scheduler_TaskAdd                                    9     8      1   52340
                                             31 BANK0      9     8      1
                   Absolute function *
                        _flashy_Init *
                        _locked_Init *
                        _matrix_Init *
                          _menu_Init *
                        _secret_Init *
                          _slot_Init *
 ---------------------------------------------------------------------------------
 (2) _slot_Init                                            4     2      2   14629
                                             25 BANK0      4     2      2
       _nullifyBadge_segDisplayErase
    _nullifyBadge_segDisplayRegister
           _nullifyBadge_userLedsClr
      _nullifyBadge_userLedsRegister
                         _slot_Setup
 ---------------------------------------------------------------------------------
 (2) _secret_Init                                          4     2      2    7195
                                             25 BANK0      4     2      2
       _nullifyBadge_segDisplayErase
    _nullifyBadge_segDisplayRegister
           _nullifyBadge_userLedsClr
      _nullifyBadge_userLedsRegister
 ---------------------------------------------------------------------------------
 (2) _menu_Init                                            4     2      2    7195
                                             25 BANK0      4     2      2
       _nullifyBadge_segDisplayErase
    _nullifyBadge_segDisplayRegister
           _nullifyBadge_userLedsClr
      _nullifyBadge_userLedsRegister
 ---------------------------------------------------------------------------------
 (2) _matrix_Init                                          6     4      2    7477
                                             25 BANK0      6     4      2
       _nullifyBadge_segDisplayErase
    _nullifyBadge_segDisplayRegister
           _nullifyBadge_userLedsClr
      _nullifyBadge_userLedsRegister
 ---------------------------------------------------------------------------------
 (2) _locked_Init                                          4     2      2    7260
                                             25 BANK0      4     2      2
                   _locked_lock_leds
       _nullifyBadge_segDisplayErase
    _nullifyBadge_segDisplayRegister
           _nullifyBadge_userLedsClr
      _nullifyBadge_userLedsRegister
 ---------------------------------------------------------------------------------
 (2) _flashy_Init                                          4     2      2    7350
                                             25 BANK0      4     2      2
       _nullifyBadge_segDisplayErase
    _nullifyBadge_segDisplayRegister
           _nullifyBadge_userLedsClr
      _nullifyBadge_userLedsRegister
 ---------------------------------------------------------------------------------
 (3) _nullifyBadge_userLedsRegister                        1     1      0     278
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _nullifyBadge_segDisplayRegister                      1     1      0     283
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _scheduler_Init                                       3     3      0     197
                                              1 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _schedulerExecute                                    14    14      0  324735
                                             72 BANK0      6     6      0
                                              0 BANK1      8     8      0
                _TMR0_Read16bitTimer
                  _scheduler_TaskRun
 ---------------------------------------------------------------------------------
 (2) _scheduler_TaskRun                                    1     1      0  324179
                                             71 BANK0      1     1      0
                   Absolute function *
                _TMR0_Read16bitTimer
                        _flashy_Main *
                        _locked_Main *
                        _matrix_Main *
                          _menu_Main *
                        _secret_Main *
                          _slot_Main *
 ---------------------------------------------------------------------------------
 (3) _slot_Main                                           21    19      2   70718
                                             50 BANK0     21    19      2
                            ___lwmod
                            _marquee
                     _marquee_speedy
                             _memset
            _nullifyBadge_buttonsGet
                               _rand
            _slot_Finished_Animation
             _slot_Running_Animation
                         _slot_Setup
                            _sprintf
                             _strlen
 ---------------------------------------------------------------------------------
 (4) _slot_Running_Animation                               6     4      2    3731
                                             18 BANK0      6     4      2
                         _led_circle
 ---------------------------------------------------------------------------------
 (4) _slot_Finished_Animation                              6     4      2    4417
                                             29 BANK0      6     4      2
                           _led_rand
 ---------------------------------------------------------------------------------
 (3) _secret_Main                                          8     6      2    4719
                                             50 BANK0      8     6      2
            _nullifyBadge_buttonsGet
                       _secret_check
                       _secret_clear
 ---------------------------------------------------------------------------------
 (4) _secret_clear                                         2     0      2     286
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (4) _secret_check                                        19    16      3    2785
                                              7 COMMON     3     0      3
                                              0 BANK0     10    10      0
                             ___bmul
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _menu_Main                                            7     5      2   51344
                                             50 BANK0      7     5      2
                         _menu_clear
                _menu_display_option
                    _menu_run_option
            _nullifyBadge_buttonsGet
                         _slot_Setup
 ---------------------------------------------------------------------------------
 (4) _menu_run_option                                      2     0      2    7012
                                             27 BANK0      2     0      2
                         _menu_clear
 ---------------------------------------------------------------------------------
 (5) _menu_clear                                           2     0      2    6838
                                             25 BANK0      2     0      2
       _nullifyBadge_segDisplayErase
           _nullifyBadge_userLedsClr
 ---------------------------------------------------------------------------------
 (4) _menu_display_option                                  6     4      2   28579
                                             44 BANK0      6     4      2
                            ___lwmod
                            _marquee
 _nullifyBadge_segDisplayForceUpdate
      _nullifyBadge_segDisplayPutStr
           _nullifyBadge_userLedsSet
 ---------------------------------------------------------------------------------
 (3) _matrix_Main                                         11     9      2   42339
                                             50 BANK0     11     9      2
                         _led_Parody
                        _led_curtain
              _matrix_display_option
                _matrix_secret_check
            _nullifyBadge_buttonsGet
 ---------------------------------------------------------------------------------
 (4) _matrix_secret_check                                 19    16      3    3381
                                              7 COMMON     3     0      3
                                              0 BANK0     10    10      0
                             ___bmul
                             _strlen
 ---------------------------------------------------------------------------------
 (5) ___bmul                                               4     3      1      52
                                              1 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (4) _matrix_display_option                                4     2      2   14978
                                             44 BANK0      4     2      2
                     _marquee_speedy
 ---------------------------------------------------------------------------------
 (3) _locked_Main                                          7     5      2   38890
                                             50 BANK0      7     5      2
                            ___lwmod
                       _locked_clear
               _locked_get_lock_leds
             _locked_get_unlock_leds
                   _locked_lock_leds
                 _locked_unlock_leds
                            _marquee
            _nullifyBadge_buttonsGet
           _nullifyBadge_userLedsSet
                         _slot_Setup
 ---------------------------------------------------------------------------------
 (3) _slot_Setup                                           7     5      2    7403
                                             15 BANK0      7     5      2
                            ___lwmod
                             _memset
                               _rand
 ---------------------------------------------------------------------------------
 (4) _locked_unlock_leds                                   2     2      0       0
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _locked_lock_leds                                     4     4      0      34
                                              1 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (4) _locked_get_unlock_leds                               4     2      2      34
                                              1 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (4) _locked_get_lock_leds                                 8     6      2      68
                                              1 COMMON     8     6      2
 ---------------------------------------------------------------------------------
 (4) _locked_clear                                         2     0      2    6588
                                             25 BANK0      2     0      2
       _nullifyBadge_segDisplayErase
           _nullifyBadge_userLedsClr
 ---------------------------------------------------------------------------------
 (3) _nullifyBadge_userLedsClr                             1     1      0    2094
                                             11 BANK0      1     1      0
              _displayL2_ClrUserLeds
 ---------------------------------------------------------------------------------
 (4) _displayL2_ClrUserLeds                                1     1      0    1559
                                             11 COMMON     1     1      0
               _displayL1_SetUserLed
                   _displayL1_Update
 ---------------------------------------------------------------------------------
 (3) _nullifyBadge_segDisplayErase                         1     1      0    4196
                                             24 BANK0      1     1      0
          _displayL2_EraseSegDisplay
 ---------------------------------------------------------------------------------
 (4) _displayL2_EraseSegDisplay                            1     1      0    3589
                                             23 BANK0      1     1      0
                   _displayL1_Update
                   _displayL2_PutStr
 ---------------------------------------------------------------------------------
 (3) _flashy_Main                                         14    12      2  115938
                                             50 BANK0     14    12      2
              _flashy_display_option
                         _led_Parody
                         _led_circle
                        _led_curtain
                           _led_rand
                     _led_roundabout
                      _let_alternate
                            _marquee
            _nullifyBadge_buttonsGet
                 _nullifyBadge_irGet
               _nullifyBadge_irTxClr
          _nullifyBadge_irTxRegister
           _nullifyBadge_irTxRelease
               _nullifyBadge_irTxSet
 _nullifyBadge_segDisplayForceUpdate
      _nullifyBadge_segDisplayPutStr
           _nullifyBadge_userLedsSet
                            _sprintf
 ---------------------------------------------------------------------------------
 (4) _sprintf                                             32    20     12   15007
                                             15 BANK0     28    16     12
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              2     2      0      99
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    5928
                                              1 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (4) _nullifyBadge_irTxSet                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _nullifyBadge_irTxRelease                             2     2      0      67
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _nullifyBadge_irTxRegister                            1     1      0      98
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _nullifyBadge_irTxClr                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _nullifyBadge_irGet                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _nullifyBadge_buttonsGet                              3     3      0      46
                                              1 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (4) _let_alternate                                        2     0      2    3314
                                             16 BANK0      2     0      2
           _nullifyBadge_userLedsSet
 ---------------------------------------------------------------------------------
 (4) _led_roundabout                                       8     6      2    8722
                                             16 BANK0      8     6      2
                            ___lwmod
           _nullifyBadge_userLedsSet
 ---------------------------------------------------------------------------------
 (5) _led_rand                                            10    10      0    4190
                                             19 BANK0     10    10      0
                            ___almod
           _nullifyBadge_userLedsSet
                               _rand
 ---------------------------------------------------------------------------------
 (4) _rand                                                 7     5      2     316
                                              4 BANK0      7     5      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (5) ___lmul                                              12     4      8     316
                                              1 COMMON     8     0      8
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (6) ___almod                                             11     3      8     613
                                              9 COMMON     3     3      0
                                             11 BANK0      8     0      8
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (4) _led_curtain                                          8     6      2    8812
                                             16 BANK0      8     6      2
                            ___lwmod
           _nullifyBadge_userLedsSet
 ---------------------------------------------------------------------------------
 (5) _led_circle                                           2     0      2    3404
                                             16 BANK0      2     0      2
           _nullifyBadge_userLedsSet
 ---------------------------------------------------------------------------------
 (4) _led_Parody                                           8     6      2    8874
                                             16 BANK0      8     6      2
                            ___lwmod
           _nullifyBadge_userLedsSet
 ---------------------------------------------------------------------------------
 (6) _nullifyBadge_userLedsSet                             3     1      2    3193
                                             13 BANK0      3     1      2
              _displayL2_SetUserLeds
 ---------------------------------------------------------------------------------
 (7) _displayL2_SetUserLeds                                3     1      2    1868
                                             11 COMMON     1     1      0
                                             11 BANK0      2     0      2
               _displayL1_SetUserLed
                   _displayL1_Update
 ---------------------------------------------------------------------------------
 (5) _displayL1_SetUserLed                                 4     2      2     376
                                              1 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (4) _flashy_display_option                                2     0      2   34483
                                             44 BANK0      2     0      2
                            _marquee
                     _marquee_speedy
 _nullifyBadge_segDisplayForceUpdate
      _nullifyBadge_segDisplayPutStr
 ---------------------------------------------------------------------------------
 (4) _marquee_speedy                                      18    12      6   14556
                                             26 BANK0     18    12      6
                            ___lwdiv
                            ___lwmod
 _nullifyBadge_segDisplayForceUpdate
      _nullifyBadge_segDisplayPutStr
                             _strlen
 ---------------------------------------------------------------------------------
 (4) _marquee                                             18    14      4   15099
                                             26 BANK0     18    14      4
                            ___lwdiv
                            ___lwmod
 _nullifyBadge_segDisplayForceUpdate
      _nullifyBadge_segDisplayPutStr
                             _strlen
 ---------------------------------------------------------------------------------
 (4) _strlen                                               6     4      2    1390
                                              1 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (5) _nullifyBadge_segDisplayPutStr                        3     1      2    3224
                                             23 BANK0      3     1      2
                   _displayL2_PutStr
 ---------------------------------------------------------------------------------
 (5) _displayL2_PutStr                                     7     5      2    2406
                                             16 BANK0      7     5      2
                  _displayL2_PutChar
 ---------------------------------------------------------------------------------
 (6) _displayL2_PutChar                                    6     5      1    1993
                                             10 BANK0      6     5      1
               _displayL1_SetSegChar
 ---------------------------------------------------------------------------------
 (7) _displayL1_SetSegChar                                10     8      2    1298
                                              0 BANK0     10     8      2
                 _displayCharReverse
 ---------------------------------------------------------------------------------
 (8) _displayCharReverse                                  11     9      2     331
                                              1 COMMON    11     9      2
 ---------------------------------------------------------------------------------
 (5) _nullifyBadge_segDisplayForceUpdate                   1     1      0    1399
                                             11 BANK0      1     1      0
              _displayL2_ForceUpdate
 ---------------------------------------------------------------------------------
 (6) _displayL2_ForceUpdate                                1     1      0    1152
                                             11 COMMON     1     1      0
                   _displayL1_Update
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              6     2      4    5272
                                              9 COMMON     2     2      0
                                             11 BANK0      4     0      4
                            ___lwdiv (ARG)
                               _rand (ARG)
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              8     4      4    1221
                                              1 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (3) _TMR0_Read16bitTimer                                 11     9      2     102
                                              1 COMMON    11     9      2
 ---------------------------------------------------------------------------------
 (15) Absolute function(Fake)                              2     0      2       0
 ---------------------------------------------------------------------------------
 (1) _nullifyBadge_platformInit                            1     1      0    5679
                                             12 BANK0      1     1      0
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM1_Initialize
                 _PWM1_LoadDutyValue
                    _PWM2_Initialize
                 _PWM2_LoadDutyValue
                    _PWM5_Initialize
                 _PWM5_LoadDutyValue
                    _PWM6_Initialize
                 _PWM6_LoadDutyValue
                    _SPI1_Initialize
                  _SYSTEM_Initialize
                    _TMR0_Initialize
                    _TMR2_Initialize
                    _TMR4_Initialize
               _displayL2_Initialize
 ---------------------------------------------------------------------------------
 (2) _displayL2_Initialize                                 1     1      0    4257
                                             11 BANK0      1     1      0
               _displayL1_Initialize
                             _memset
 ---------------------------------------------------------------------------------
 (3) _displayL1_Initialize                                 1     1      0    2640
                                             11 COMMON     1     1      0
                   _displayL1_Update
                             _memset
 ---------------------------------------------------------------------------------
 (4) _memset                                               8     2      6    1457
                                              1 COMMON     8     2      6
 ---------------------------------------------------------------------------------
 (5) _displayL1_Update                                    13    13      0    1085
                                              9 COMMON     2     2      0
                                              0 BANK0     11    11      0
            _SPI1_Exchange8bitBuffer
 ---------------------------------------------------------------------------------
 (6) _SPI1_Exchange8bitBuffer                              7     5      2     759
                                              2 COMMON     7     5      2
                  _SPI1_Exchange8bit
 ---------------------------------------------------------------------------------
 (7) _SPI1_Exchange8bit                                    1     1      0      31
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _SYSTEM_Initialize                                    0     0      0     155
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM1_Initialize
                    _PWM2_Initialize
                    _PWM5_Initialize
                    _PWM6_Initialize
                    _SPI1_Initialize
                    _TMR0_Initialize
                    _TMR2_Initialize
                    _TMR4_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (3) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR4_Initialize                                      0     0      0       0
                    _TMR4_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR4_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0     121
           _TMR0_SetInterruptHandler
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR0_SetInterruptHandler                             2     0      2     121
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _SPI1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _PWM6_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _PWM5_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _PWM2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _PWM1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _PIN_MANAGER_Initialize                               1     1      0      34
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM6_LoadDutyValue                                   4     2      2     242
                                              1 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (2) _PWM5_LoadDutyValue                                   4     2      2     332
                                              1 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (2) _PWM2_LoadDutyValue                                   2     0      2     220
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PWM1_LoadDutyValue                                   2     0      2     220
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _INTERRUPT_InterruptManager                          1     1      0       0
                                              0 COMMON     1     1      0
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (13) _TMR0_ISR                                            0     0      0       0
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (14) _TMR0_CallBack                                       0     0      0       0
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (15) _TMR0_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (15) Absolute function(Fake)                              2     0      2       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _nullifyBadge_platformInit
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM1_Initialize
     _PWM1_LoadDutyValue
     _PWM2_Initialize
     _PWM2_LoadDutyValue
     _PWM5_Initialize
     _PWM5_LoadDutyValue
     _PWM6_Initialize
     _PWM6_LoadDutyValue
     _SPI1_Initialize
     _SYSTEM_Initialize
       _OSCILLATOR_Initialize
       _PIN_MANAGER_Initialize
       _PWM1_Initialize
       _PWM2_Initialize
       _PWM5_Initialize
       _PWM6_Initialize
       _SPI1_Initialize
       _TMR0_Initialize
         _TMR0_SetInterruptHandler
         _TMR0_StartTimer
       _TMR2_Initialize
         _TMR2_StartTimer
       _TMR4_Initialize
         _TMR4_StartTimer
       _WDT_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
       _TMR0_StartTimer
     _TMR2_Initialize
       _TMR2_StartTimer
     _TMR4_Initialize
       _TMR4_StartTimer
     _displayL2_Initialize
       _displayL1_Initialize
         _displayL1_Update
           _SPI1_Exchange8bitBuffer
             _SPI1_Exchange8bit
         _memset
       _memset
   _schedulerExecute
     _TMR0_Read16bitTimer
     _scheduler_TaskRun
       Absolute function(Fake) *
       _TMR0_Read16bitTimer *
       _flashy_Main *
         _flashy_display_option
           _marquee
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
               _rand (ARG)
                 ___lmul
               _strlen (ARG)
             _nullifyBadge_segDisplayForceUpdate
               _displayL2_ForceUpdate
                 _displayL1_Update
                   _SPI1_Exchange8bitBuffer
                     _SPI1_Exchange8bit
             _nullifyBadge_segDisplayPutStr
               _displayL2_PutStr
                 _displayL2_PutChar
                   _displayL1_SetSegChar
                     _displayCharReverse
             _strlen
           _marquee_speedy
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
               _rand (ARG)
                 ___lmul
               _strlen (ARG)
             _nullifyBadge_segDisplayForceUpdate
               _displayL2_ForceUpdate
                 _displayL1_Update
                   _SPI1_Exchange8bitBuffer
                     _SPI1_Exchange8bit
             _nullifyBadge_segDisplayPutStr
               _displayL2_PutStr
                 _displayL2_PutChar
                   _displayL1_SetSegChar
                     _displayCharReverse
             _strlen
           _nullifyBadge_segDisplayForceUpdate
             _displayL2_ForceUpdate
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
           _nullifyBadge_segDisplayPutStr
             _displayL2_PutStr
               _displayL2_PutChar
                 _displayL1_SetSegChar
                   _displayCharReverse
         _led_Parody
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _nullifyBadge_userLedsSet
             _displayL2_SetUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
         _led_circle
           _nullifyBadge_userLedsSet
             _displayL2_SetUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
         _led_curtain
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _nullifyBadge_userLedsSet
             _displayL2_SetUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
         _led_rand
           ___almod
             _rand (ARG)
               ___lmul
           _nullifyBadge_userLedsSet
             _displayL2_SetUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
           _rand
             ___lmul
         _led_roundabout
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _nullifyBadge_userLedsSet
             _displayL2_SetUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
         _let_alternate
           _nullifyBadge_userLedsSet
             _displayL2_SetUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
         _marquee
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _nullifyBadge_segDisplayForceUpdate
             _displayL2_ForceUpdate
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
           _nullifyBadge_segDisplayPutStr
             _displayL2_PutStr
               _displayL2_PutChar
                 _displayL1_SetSegChar
                   _displayCharReverse
           _strlen
         _nullifyBadge_buttonsGet
         _nullifyBadge_irGet
         _nullifyBadge_irTxClr
         _nullifyBadge_irTxRegister
         _nullifyBadge_irTxRelease
         _nullifyBadge_irTxSet
         _nullifyBadge_segDisplayForceUpdate
           _displayL2_ForceUpdate
             _displayL1_Update
               _SPI1_Exchange8bitBuffer
                 _SPI1_Exchange8bit
         _nullifyBadge_segDisplayPutStr
           _displayL2_PutStr
             _displayL2_PutChar
               _displayL1_SetSegChar
                 _displayCharReverse
         _nullifyBadge_userLedsSet
           _displayL2_SetUserLeds
             _displayL1_SetUserLed
             _displayL1_Update
               _SPI1_Exchange8bitBuffer
                 _SPI1_Exchange8bit
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           ___wmul
           _isdigit
       _locked_Main *
         ___lwmod
           ___lwdiv (ARG)
           _rand (ARG)
             ___lmul
           _strlen (ARG)
         _locked_clear
           _nullifyBadge_segDisplayErase
             _displayL2_EraseSegDisplay
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
               _displayL2_PutStr
                 _displayL2_PutChar
                   _displayL1_SetSegChar
                     _displayCharReverse
           _nullifyBadge_userLedsClr
             _displayL2_ClrUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
         _locked_get_lock_leds
         _locked_get_unlock_leds
         _locked_lock_leds
         _locked_unlock_leds
         _marquee
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _nullifyBadge_segDisplayForceUpdate
             _displayL2_ForceUpdate
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
           _nullifyBadge_segDisplayPutStr
             _displayL2_PutStr
               _displayL2_PutChar
                 _displayL1_SetSegChar
                   _displayCharReverse
           _strlen
         _nullifyBadge_buttonsGet
         _nullifyBadge_userLedsSet
           _displayL2_SetUserLeds
             _displayL1_SetUserLed
             _displayL1_Update
               _SPI1_Exchange8bitBuffer
                 _SPI1_Exchange8bit
         _slot_Setup
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _memset
           _rand
             ___lmul
       _matrix_Main *
         _led_Parody
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _nullifyBadge_userLedsSet
             _displayL2_SetUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
         _led_curtain
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _nullifyBadge_userLedsSet
             _displayL2_SetUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
         _matrix_display_option
           _marquee_speedy
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
               _rand (ARG)
                 ___lmul
               _strlen (ARG)
             _nullifyBadge_segDisplayForceUpdate
               _displayL2_ForceUpdate
                 _displayL1_Update
                   _SPI1_Exchange8bitBuffer
                     _SPI1_Exchange8bit
             _nullifyBadge_segDisplayPutStr
               _displayL2_PutStr
                 _displayL2_PutChar
                   _displayL1_SetSegChar
                     _displayCharReverse
             _strlen
         _matrix_secret_check
           ___bmul
           _strlen
         _nullifyBadge_buttonsGet
       _menu_Main *
         _menu_clear
           _nullifyBadge_segDisplayErase
             _displayL2_EraseSegDisplay
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
               _displayL2_PutStr
                 _displayL2_PutChar
                   _displayL1_SetSegChar
                     _displayCharReverse
           _nullifyBadge_userLedsClr
             _displayL2_ClrUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
         _menu_display_option
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _marquee
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
               _rand (ARG)
                 ___lmul
               _strlen (ARG)
             _nullifyBadge_segDisplayForceUpdate
               _displayL2_ForceUpdate
                 _displayL1_Update
                   _SPI1_Exchange8bitBuffer
                     _SPI1_Exchange8bit
             _nullifyBadge_segDisplayPutStr
               _displayL2_PutStr
                 _displayL2_PutChar
                   _displayL1_SetSegChar
                     _displayCharReverse
             _strlen
           _nullifyBadge_segDisplayForceUpdate
             _displayL2_ForceUpdate
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
           _nullifyBadge_segDisplayPutStr
             _displayL2_PutStr
               _displayL2_PutChar
                 _displayL1_SetSegChar
                   _displayCharReverse
           _nullifyBadge_userLedsSet
             _displayL2_SetUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
         _menu_run_option
           _menu_clear
             _nullifyBadge_segDisplayErase
               _displayL2_EraseSegDisplay
                 _displayL1_Update
                   _SPI1_Exchange8bitBuffer
                     _SPI1_Exchange8bit
                 _displayL2_PutStr
                   _displayL2_PutChar
                     _displayL1_SetSegChar
                       _displayCharReverse
             _nullifyBadge_userLedsClr
               _displayL2_ClrUserLeds
                 _displayL1_SetUserLed
                 _displayL1_Update
                   _SPI1_Exchange8bitBuffer
                     _SPI1_Exchange8bit
         _nullifyBadge_buttonsGet
         _slot_Setup
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _memset
           _rand
             ___lmul
       _secret_Main *
         _nullifyBadge_buttonsGet
         _secret_check
           ___bmul
           _strlen
         _secret_clear
       _slot_Main *
         ___lwmod
           ___lwdiv (ARG)
           _rand (ARG)
             ___lmul
           _strlen (ARG)
         _marquee
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _nullifyBadge_segDisplayForceUpdate
             _displayL2_ForceUpdate
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
           _nullifyBadge_segDisplayPutStr
             _displayL2_PutStr
               _displayL2_PutChar
                 _displayL1_SetSegChar
                   _displayCharReverse
           _strlen
         _marquee_speedy
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _nullifyBadge_segDisplayForceUpdate
             _displayL2_ForceUpdate
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
           _nullifyBadge_segDisplayPutStr
             _displayL2_PutStr
               _displayL2_PutChar
                 _displayL1_SetSegChar
                   _displayCharReverse
           _strlen
         _memset
         _nullifyBadge_buttonsGet
         _rand
           ___lmul
         _slot_Finished_Animation
           _led_rand
             ___almod
               _rand (ARG)
                 ___lmul
             _nullifyBadge_userLedsSet
               _displayL2_SetUserLeds
                 _displayL1_SetUserLed
                 _displayL1_Update
                   _SPI1_Exchange8bitBuffer
                     _SPI1_Exchange8bit
             _rand
               ___lmul
         _slot_Running_Animation
           _led_circle
             _nullifyBadge_userLedsSet
               _displayL2_SetUserLeds
                 _displayL1_SetUserLed
                 _displayL1_Update
                   _SPI1_Exchange8bitBuffer
                     _SPI1_Exchange8bit
         _slot_Setup
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _memset
           _rand
             ___lmul
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           ___wmul
           _isdigit
         _strlen
   _scheduler_Init
   _scheduler_TaskAdd
     Absolute function(Fake) *
     _flashy_Init *
       _nullifyBadge_segDisplayErase
         _displayL2_EraseSegDisplay
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
           _displayL2_PutStr
             _displayL2_PutChar
               _displayL1_SetSegChar
                 _displayCharReverse
       _nullifyBadge_segDisplayRegister
       _nullifyBadge_userLedsClr
         _displayL2_ClrUserLeds
           _displayL1_SetUserLed
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
       _nullifyBadge_userLedsRegister
     _locked_Init *
       _locked_lock_leds
       _nullifyBadge_segDisplayErase
         _displayL2_EraseSegDisplay
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
           _displayL2_PutStr
             _displayL2_PutChar
               _displayL1_SetSegChar
                 _displayCharReverse
       _nullifyBadge_segDisplayRegister
       _nullifyBadge_userLedsClr
         _displayL2_ClrUserLeds
           _displayL1_SetUserLed
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
       _nullifyBadge_userLedsRegister
     _matrix_Init *
       _nullifyBadge_segDisplayErase
         _displayL2_EraseSegDisplay
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
           _displayL2_PutStr
             _displayL2_PutChar
               _displayL1_SetSegChar
                 _displayCharReverse
       _nullifyBadge_segDisplayRegister
       _nullifyBadge_userLedsClr
         _displayL2_ClrUserLeds
           _displayL1_SetUserLed
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
       _nullifyBadge_userLedsRegister
     _menu_Init *
       _nullifyBadge_segDisplayErase
         _displayL2_EraseSegDisplay
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
           _displayL2_PutStr
             _displayL2_PutChar
               _displayL1_SetSegChar
                 _displayCharReverse
       _nullifyBadge_segDisplayRegister
       _nullifyBadge_userLedsClr
         _displayL2_ClrUserLeds
           _displayL1_SetUserLed
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
       _nullifyBadge_userLedsRegister
     _secret_Init *
       _nullifyBadge_segDisplayErase
         _displayL2_EraseSegDisplay
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
           _displayL2_PutStr
             _displayL2_PutChar
               _displayL1_SetSegChar
                 _displayCharReverse
       _nullifyBadge_segDisplayRegister
       _nullifyBadge_userLedsClr
         _displayL2_ClrUserLeds
           _displayL1_SetUserLed
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
       _nullifyBadge_userLedsRegister
     _slot_Init *
       _nullifyBadge_segDisplayErase
         _displayL2_EraseSegDisplay
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
           _displayL2_PutStr
             _displayL2_PutChar
               _displayL1_SetSegChar
                 _displayCharReverse
       _nullifyBadge_segDisplayRegister
       _nullifyBadge_userLedsClr
         _displayL2_ClrUserLeds
           _displayL1_SetUserLed
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
       _nullifyBadge_userLedsRegister
       _slot_Setup
         ___lwmod
           ___lwdiv (ARG)
           _rand (ARG)
             ___lmul
           _strlen (ARG)
         _memset
         _rand
           ___lmul
   _scheduler_TaskInit

 _INTERRUPT_InterruptManager (ROOT)
   _TMR0_ISR
     _TMR0_CallBack
       Absolute function(Fake) *
       _TMR0_DefaultInterruptHandler *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4F      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      8      45       7       86.2%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      49       9       91.2%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      4D      11       96.2%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      46      13       87.5%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
ABS                  0      0     313      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0      50      16      100.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0      37      18       68.8%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0      38      20       70.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0      38      22       70.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0      3D      24       76.2%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0      3A      26       72.5%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
DATA                 0      0     313      28        0.0%
BANK11              50      0      28      29       50.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITBANK12           50      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12              50      0       0      31        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITBANK13           50      0       0      32        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BANK13              50      0       0      33        0.0%
BITBANK14           50      0       0      34        0.0%
BANK14              50      0       0      35        0.0%
BITBANK15           50      0       0      36        0.0%
BANK15              50      0       0      37        0.0%
BITBANK16           50      0       0      38        0.0%
BANK16              50      0       0      39        0.0%
BITBANK17           50      0       0      40        0.0%
BANK17              50      0       0      41        0.0%
BITBANK18           50      0       0      42        0.0%
BANK18              50      0       0      43        0.0%
BITBANK19           50      0       0      44        0.0%
BANK19              50      0       0      45        0.0%
BITBANK20           50      0       0      46        0.0%
BANK20              50      0       0      47        0.0%
BITBANK21           50      0       0      48        0.0%
BANK21              50      0       0      49        0.0%
BITBANK22           50      0       0      50        0.0%
BANK22              10      0       0      51        0.0%
BITBANK23           50      0       0      52        0.0%
BANK23               0      0       0      53        0.0%
BITBANK24           50      0       0      54        0.0%
BANK24               0      0       0      55        0.0%
BITBANK25           20      0       0      56        0.0%
BANK25               0      0       0      57        0.0%


Microchip Technology PIC Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Wed Jul 26 07:49:51 2017

                          _SPI1_Exchange8bit 33E7                                            pc 0002  
           __size_of_slot_Finished_Animation 0027                               ___bmul@product 0073  
                 __end_of_gamma_table_256x1k 1A00                           ?_SPI1_Exchange8bit 0070  
                                __CFG_CP$OFF 0000                                           l18 33EC  
                      _displayL2_ClrUserLeds 3499                          ___wmul@multiplicand 0073  
                   marquee_speedy@multiplier 003E                                 ?_led_curtain 0030  
              nullifyBadge_buttonsGet@retVal 0073                  __size_of_PWM6_LoadDutyValue 0016  
                                __CFG_LVP$ON 0000                   ??_nullifyBadge_userLedsClr 007C  
                 ??_nullifyBadge_userLedsSet 007C                                          l208 3400  
                                        l625 20A2                                          _GIE 005F  
                             led_Parody@leds 0034              ??_nullifyBadge_segDisplayPutStr 007C  
                                        _PR2 001E                                          _PR4 0416  
                               __CFG_CPD$OFF 0000                               _scheduler_Init 360E  
                             led_Parody@size 0036                          ??_SPI1_Exchange8bit 0071  
                   ??_slot_Running_Animation 0034                           _locked_unlock_leds 351A  
                marquee_speedy@string_length 0048                              _TMR2_Initialize 3403  
             SPI1_Exchange8bitBuffer@dataOut 0073                     displayL1_Update@tmpRxBuf 0020  
                                        wreg 0009                                _slot_taskData 00BC  
               marquee_speedy@display_string 0041                  displayL1_Initialize@display 007B  
        nullifyBadge_userLedsSet@userLedData 002D                              led_curtain@leds 0034  
                    secret_Main@secret_found 0056                              led_curtain@size 0036  
                       _displayL1_Initialize 352C                  slot_Finished_Animation@data 0041  
                                       l1010 2CDF                                         l1150 0B61  
                                       l1160 0C49                                         l1241 371D  
                                       l1155 0BD4                                         l1147 0AF4  
                                       l1245 0812                                         l1405 2BA6  
                                       l1432 0574                                         l1265 1D2C  
                                       l1435 05CD                                         l1680 35FB  
                                       l1587 1BA4                                         l1748 2102  
                                       l8013 2A55                                         l8031 2CF8  
                                       l8103 37D7                                         l8033 2D0C  
                                       l8201 2914                                         l8121 3684  
                                       l9001 1F3E                                         l8027 2CE9  
                                       l8035 2D10                                         l8123 3690  
                                       l8107 37E2                                         l8045 2D18  
                                       l8037 2D15                                         l8213 3779  
                                       l9021 1F8F                                         l8215 3785  
                                       l8223 379A                                         l8135 34EE  
                                       l9111 0936                                         l9103 091E  
                                       l9031 1FBB                                         l9007 1F53  
                                       l8161 2117                                         l9017 1F7F  
                                       l8219 3791                                         l8075 374B  
                                       l8163 2125                                         l8171 2148  
                                       l8155 210F                                         l8323 35F5  
                                       l9123 095D                                         l9043 1FEE  
                                       l8245 21C6                                         l8317 3497  
                                       l8341 34FF                                         l9301 0C4D  
                                       l9117 0949                                         l9053 0865  
                                       l8191 28F9                                         l8263 2216  
                                       l8239 219F                                         l8175 2156  
                                       l8167 213D                                         l9215 0AF8  
                                       l9151 09C4                                         l8513 1AD8  
                                       l8505 1AC4                                         l8337 34F9  
                                       l9321 0CA5                                         l9241 0B65  
                                       l9209 0ADF                                         l9153 09D5  
                                       l9129 096D                                         l9081 08C6  
                                       l8531 1B0B                                         l8523 1AF5  
                                       l8443 2F24                                         l8451 2CA4  
                                       l9411 0E26                                         l9403 0E06  
                                       l9235 0B4C                                         l9171 0A36  
                                       l9147 09B7                                         l9139 0992  
                                       l9083 08D5                                         l8197 290B  
                                       l8189 28ED                                         l8269 223D  
                                       l8373 354A                                         l8605 1BEB  
                                       l8517 1ADA                                         l8429 2DC9  
                                       l9261 0BBB                                         l9093 08FA  
                                       l9181 0A5E                                         l8383 20CF  
                                       l8279 2C8E                                         l8543 1B35  
                                       l8519 1AE8                                         l8551 1B5C  
                                       l8607 1A64                                         l8455 2CB1  
                                       l8447 2C97                                         l8703 2B93  
                                       l8711 2BB5                                         l9415 0E39  
                                       l9407 0E19                                         l9271 0BD8  
                                       l9175 0A4B                                         l9159 09EB  
                                       l9183 0A72                                         l8289 35C5  
                                       l8481 1A48                                         l8561 1B73  
                                       l8537 1B1F                                         l8529 1AF7  
                                       l8609 1C25                                         l8465 2CCB  
                                       l8721 101C                                         l9441 0EE5  
                                       l9417 0E3E                                         l9185 0A7D  
                                       l9505 1C5D                                         l8539 1B2A  
                                       l8491 1A85                                         l8459 2CBE  
                                       l9451 0F70                                         l9339 0CFB  
                                       l9291 0C30                                         l9443 0F36  
                                       l9523 1CBD                                         l9515 1C9A  
                                       l9611 26BA                                         l8477 1A20  
                                       l8581 1BC0                                         l8573 1B98  
                                       l8549 1B3E                                         l9445 0F59  
                                       l9437 0E92                                         l9189 0A8C  
                                       l8591 1BD9                                         l8583 1BC3  
                                       l8567 1B79                                         l8751 2541  
                                       l9711 0251                                         l9367 0D77  
                                       l9359 0D4E                                         l9535 1D0A  
                                       l9551 1D58                                         l9623 26EE  
                                       l9607 26A2                                         l8585 1BC7  
                                       l8497 1A95                                         l8745 252A  
                                       l8673 10CA                                         l9457 0F89  
                                       l9369 0D7C                                         l9473 0FC9  
                                       l9537 1D15                                         l9529 1CED  
                                       l8747 253B                                         l8675 10DB  
                                       l9475 0FD6                                         l9395 0DE3  
                                       l9555 1D70                                         l9643 2752  
                                       l9627 2706                                         l9811 1152  
                                       l8597 1BE7                                         l8773 2453  
                                       l8765 2417                                         l8749 248F  
                                       l8677 102F                                         l9725 0347  
                                       l9469 0FBD                                         l9389 0DD0  
                                       l9581 1E00                                         l9549 1D44  
                                       l9813 115A                                         l8679 10E1  
                                       l9399 0DF4                                         l8935 1E1B  
                                       l9567 1D9D                                         l9559 1D7A  
                                       l9671 27D2                                         l9655 2786  
                                       l9639 273A                                         l9903 130D  
                                       l8769 2430                                         l9753 050D  
                                       l9737 041A                                         l8961 1E95  
                                       l8953 1E61                                         l9577 1DD5  
                                       l9569 1DAA                                         l9809 1147  
                                       l7995 37BE                                         l7987 37AD  
                                       l9755 0583                                         l9747 04CA  
                                       l9691 011E                                         l9659 279E  
                                       l9595 266B                                         l9675 27E3  
                                       l9843 11E7                                         l9819 1183  
                                       l8981 1EE2                                         l8957 1E87  
                                       l9677 27F5                                         l9589 2651  
                                       l9933 13A0                                         l9909 133C  
                                       l9759 05B6                                         l9775 0627  
                                       l8967 1EAA                                         l8959 1E8D  
                                       STR_1 3BF9                                         STR_2 3BF4  
                                       l8969 1EAE                                         l9873 127A  
                                       l9849 1216                          ?_locked_unlock_leds 0070  
                                       STR_3 287D                                         STR_4 3BEF  
                                       l8987 1F05                                         l9963 1433  
                                       l9939 13CF                                         STR_5 3BA3  
                                       STR_6 3AF7                                         l8989 1F0A  
                                       STR_7 3B66                                         STR_8 3B9D  
                                       l9879 12A9                                         l9799 111A  
                                       STR_9 3BEA                                         l9993 14C6  
                                       l9969 1462                                         l9999 14F5  
                    __end_of_PWM1_Initialize 342D                                         _LATA 010C  
                                       _LATB 010D                                         _LATC 010E  
                                       u5015 20B3                                         u5025 289A  
                                       u5035 28A8                                         u5145 1AEE  
                                       u5235 1BB3                              led_Parody@count 0030  
                                       u4605 2B6E                                         u5405 2495  
                                       u5325 1094                                         u6205 11F9  
                                       u5335 1035                                         u6215 128C  
                                       u6225 131F                                         u4715 28F0  
                                       u4555 37E3                                         u5195 1B8E  
                                       u6235 13B2                                         u5460 2E27  
                                       u4805 378B                                         u4645 211A  
                                       u4565 37EA                                         u6245 1445  
                                       u4830 2176                                         u6335 358E  
                                       u4735 28FA                                         u4815 3792  
                                       u5295 3717                                         u6255 14D8  
                                       u6424 2261                                         u6345 35A4  
                                       u4745 2904                                         u4665 2133  
                                       u5545 1EFF                                         u6265 156B  
                                       u6505 2332                                         u6425 225F  
                                       u4755 290C                                         u4675 213E  
                                       u5395 24F4                                         u6275 15FE  
                                       u6195 116C                                         u4860 21ED  
                                       u6444 2280                                         u6365 355B  
                                       u6285 1691                                         u6445 227E  
                                       u5815 0D71                                         u6385 3571  
                                       u4785 377C                                         u4945 35FC  
                                       u4955 3601                                         u6484 22DE  
                                       u6485 22DC                                         _PLLR 48E0  
                                       _TMR2 001D                                         _TMR4 0415  
                                       _WPUA 020C                                         _WPUB 020D  
                                       _WPUC 020E                                 __CFG_WRT$OFF 0000  
                              __CFG_FCMEN$ON 0000                       ?_matrix_display_option 004C  
                                       _main 0661                                         _rand 2B38  
                            _TMR0_StartTimer 33A7                                         fsr0h 0005  
                                       fsr1h 0007                                         indf0 0000  
                                       fsr0l 0004                                         indf1 0001  
                                       fsr1l 0006                                         btemp 007E  
                              __CFG_BOREN$ON 0000                             ??_marquee_speedy 0040  
                              __CFG_BORV$LOW 0000                                         start 0016  
                  __end_of_SPI1_Exchange8bit 33F0                          _menu_display_option 2ED9  
                            _PWM5_Initialize 344E                          matrix_Main@taskData 0052  
                        locked_Main@taskData 0052                 displayL2_ClrUserLeds@display 007B  
                    displayL2_PutStr@display 0035                                __CFG_CSWEN$ON 0000  
                          ___bmul@multiplier 0074                                __CFG_MCLRE$ON 0000  
                       _displayL1_SetSegChar 2A33                   __end_of_PWM5_LoadDutyValue 3595  
                                      S10803 3000                          menu_run_option@data 003B  
                       _displayL2_Initialize 3722                         ??_locked_unlock_leds 0071  
                    __end_of_PWM2_Initialize 3438                      __end_of_TMR0_Initialize 3680  
             ??_TMR0_DefaultInterruptHandler 0070               __size_of_OSCILLATOR_Initialize 000A  
                     __end_of_scheduler_Init 3629                         _displayL1_SetUserLed 3508  
                      marquee@display_string 003F                __end_of_OSCILLATOR_Initialize 3403  
                                      l10023 1559                                        l10113 1712  
                                      l10141 1782                                        l10053 15EC  
                                      l10029 1588                                        l10161 17F4  
                                      l10153 17CC                                        l10145 1795  
                                      l10083 167F                                        l10059 161B  
                                      l10147 17B6                                        l10421 2250  
                                      l10431 22B3                                        l10177 3564  
                                      l10193 357A                                        l10089 16AE  
                                      l10427 22A8                                        l10435 22BB  
                                      l10801 08CC                                        l10459 2340  
                                      l10805 0F3B                                        l10807 2CD1  
                                      l10639 075F                      ?_locked_get_unlock_leds 0071  
                    _locked_locking_leds_idx 00A4                              __end_of___almod 215F  
                                      ?_main 0070                                        ?_rand 0024  
                                      STR_10 3A45                                        STR_11 3BEA  
                                      STR_20 3971                                        STR_12 3B25  
                                      STR_21 38B0                                        STR_13 3B5E  
                                      STR_30 3A89                                        STR_22 3919  
                                      STR_14 3B97                                        STR_31 38D4  
                                      STR_23 3954                                        STR_15 3A32  
                                      STR_40 3BE5                                        STR_32 3A79  
                                      STR_24 39A8                                        STR_16 3A0A  
                                      STR_41 3BFE                                        STR_33 38F7  
                                      STR_25 3888                                        STR_17 39C3  
                              __CFG_WDTE$OFF 0000                                        STR_42 3AA5  
                                      STR_34 280A                                        STR_26 3A57  
                                      STR_18 3B56                                        STR_50 3BB3  
                                      STR_43 3AA7                                        STR_35 3A68  
                                      STR_27 3A1F                                        STR_19 39F4  
                                      STR_51 3BBD                                        STR_44 3BE0  
                                      STR_36 3800                                        STR_28 3937  
                                      STR_60 3B3E                                        STR_52 3BC2  
                                      STR_45 3BDB                                        STR_37 3AB2  
                                      STR_29 3ACB                                        STR_61 3ABF  
                                      STR_53 3BB8                                        STR_38 385D  
                                      STR_62 3A98                                        STR_70 3B8A  
                                      STR_54 3BCC                                        STR_46 3BD1  
                                      STR_39 287D                                        STR_63 3B13  
                                      STR_55 3B4E                                        STR_71 3B75  
                                      STR_47 3BC7                                        STR_64 3B1C  
                                      STR_80 382F                                        STR_56 3B46  
                                      STR_72 3B01                                        STR_48 3BAE  
                                      STR_65 3B1C                                        STR_81 398D  
                                      STR_57 3B0A                                        STR_73 3B7C  
                                      STR_49 3BD6                                        STR_66 3B1C  
                                      STR_82 39DD                                        STR_58 3AE2  
                                      STR_74 3BA9                                        STR_67 3B1C  
                                      STR_83 3B6E                                        STR_59 3AD7  
                                      STR_75 3AED                                        STR_68 3B1C  
                                      STR_76 3B91                                        STR_69 3C02  
                                      STR_77 3B2E                                        STR_78 3B83  
                                      STR_79 3B36                             _schedulerExecute 22C3  
                                      _T2CON 001F                      _flashy_leds_state_track 00B0  
                                      _T4CON 0417                               __CFG_DEBUG$OFF 0000  
                            __end_of___lwdiv 2919                              __end_of___lwmod 379F  
                                      i1l363 0011                                        _OSCEN 091D  
                                      _TMR0H 0016                                        _TMR0L 0015  
                             _led_roundabout 2AB5                         ?_menu_display_option 004C  
             nullifyBadge_irTxRegister@badge 0071                   __end_of_scheduler_TaskInit 29F9  
                                      _TRISA 008C                                        _TRISB 008D  
                                      _TRISC 008E             __size_of_nullifyBadge_buttonsGet 0031  
          __size_of_TMR0_SetInterruptHandler 0006                              _TMR4_Initialize 3438  
                            _PWM6_Initialize 345A                          ___lmul@multiplicand 0075  
                  ?_TMR0_SetInterruptHandler 0071                        _displayL2_ForceUpdate 33C5  
                     ??_locked_get_lock_leds 0073                             __end_of_TMR0_ISR 348B  
                               _badge_locked 00C4                                 ?_matrix_Main 0052  
                               ?_locked_Main 0052                                 ?_matrix_Init 0039  
                               ?_locked_Init 0039                        ?_displayL1_Initialize 0070  
                            __end_of_dpowers 280A                      _SPI1_Exchange8bitBuffer 2CE0  
                             _WDT_Initialize 33B6                              __end_of_isdigit 3499  
                            __end_of_marquee 2249                                        _randx 00D3  
                       matrix_Main@holdvalue 005A                                        pclath 000A  
         __size_of_nullifyBadge_platformInit 0055                                        status 0003  
                                      wtemp0 007E                              __end_of_sprintf 1C2C  
                            _TMR2_StartTimer 33AA            __size_of_nullifyBadge_irTxRelease 000B  
                           _menu_option_size 00B4                    ?_nullifyBadge_irTxRelease 0070  
                   __size_of_SPI1_Initialize 0008                       menu_Main@buttonPressed 0056  
               displayL1_SetSegChar@charData 0028                        ?_displayL1_SetSegChar 0020  
                            __initialization 0018                            ?_displayL1_Update 0070  
                               __end_of_main 0764                                 __end_of_rand 2B7B  
                      ?_displayL2_Initialize 0070                            ?_displayL2_PutStr 0030  
                     __size_of_let_alternate 0014                       ?_displayL2_ClrUserLeds 0070  
             __end_of_locked_get_unlock_leds 0819                           ??_displayL1_Update 0079  
                    __end_of_TMR2_Initialize 340D                        ?_displayL1_SetUserLed 0071  
                ?_INTERRUPT_InterruptManager 0070                           ??_displayL2_PutStr 0032  
           displayCharReverse@retValUpperRev 007A                              ?_scheduler_Init 0070  
                     __end_of_led_roundabout 2AF6                                       ??_main 006E  
                                     ??_rand 0026                                slot_Main@data 0065  
                       _nullifyBadge_irTxClr 33B0                        ??_menu_display_option 007C  
                       _nullifyBadge_irTxSet 33B3                                 ?_secret_Main 0052  
                               ?_secret_Init 0039              __size_of_slot_Running_Animation 0046  
                     __end_of_WDT_Initialize 33BA                                slot_Init@data 003B  
      __end_of_nullifyBadge_segDisplayPutStr 3417       __size_of_nullifyBadge_segDisplayPutStr 000A  
              _nullifyBadge_segDisplayPutStr 340D                      __end_of_TMR0_StartTimer 33AA  
                            scheduler_Init@k 0073               nullifyBadge_platformInit@badge 002C  
                                     _CCPR1H 0292                                       _CCPR2H 0296  
                                     _CCPR1L 0291                                       _CCPR2L 0295  
                                     _ANSELA 018C                                       _ANSELB 018D  
                                     _ANSELC 018E                                       _T0CON0 0017  
                                     _T0CON1 0018                             ?_PWM1_Initialize 0070  
                                     _ODCONA 028C                                       _ODCONB 028D  
                                     _ODCONC 028E                      __end_of_PWM5_Initialize 345A  
                __end_of_TMR0_Read16bitTimer 3662                                       _OSCFRQ 091F  
                                     _WDTCON 0097                    matrix_secret_check@inputs 0027  
                            _TMR4_StartTimer 33AD                        SPI1_Exchange8bit@data 0071  
                          _scheduler_TaskAdd 2249                     __size_of_menu_run_option 004A  
                   __end_of_locked_lock_leds 35F3            __end_of_nullifyBadge_platformInit 2E7E  
                 __size_of_SPI1_Exchange8bit 0009                            _scheduler_TaskRun 36DD  
                             __CFG_PWRTE$OFF 0000                  __end_of_matrix_secret_check 2543  
                         ?_scheduler_TaskAdd 003F                           ?_scheduler_TaskRun 0070  
                    _slot_Finished_Animation 1001                                       ___bmul 34F7  
                           __end_of_led_rand 2C96                                       ___lmul 37CE  
                                  ??___almod 0079                     locked_get_lock_leds@leds 0077  
                                 _Shot_Index 007C                                       ___wmul 35F3  
                             __CFG_STVREN$ON 0000                     locked_get_lock_leds@size 0075  
                                     _deaths 00AA                         __size_of_flashy_Main 07E7  
                       __size_of_flashy_Init 0096                                    ??___lwdiv 0075  
                                  ??___lwmod 0079                        _flashy_display_option 1A00  
                           ?_TMR0_Initialize 0070                             ?_PWM2_Initialize 0070  
                              ?_locked_clear 0039                                       _memset 35C1  
                    __end_of_PWM6_Initialize 3466                      __end_of_TMR4_Initialize 3443  
                        ??_scheduler_TaskAdd 0040             nullifyBadge_segDisplayPutStr@str 0037  
           __end_of_nullifyBadge_userLedsClr 0800             __end_of_nullifyBadge_userLedsSet 34F7  
                        ??_scheduler_TaskRun 007C                              ?_led_roundabout 0030  
                      ?_nullifyBadge_irTxClr 0070                                 __pdataBANK10 0520  
                      ?_nullifyBadge_irTxSet 0070                                       _strlen 3680  
                               __pdataBIGRAM 26F0                         __size_of_led_curtain 0041  
                                 _Slot_Wheel 0320                       ?_displayL2_ForceUpdate 0070  
                                  ??_isdigit 0071                                    ??_marquee 003E  
                  ??_SPI1_Exchange8bitBuffer 0074                              ?_WDT_Initialize 0070  
                     ??_displayL1_Initialize 007B                        _displayL2_SetUserLeds 369E  
              TMR0_Read16bitTimer@readValLow 007A                        __end_of_TMR0_CallBack 3422  
                              _let_alternate 353F                      __end_of_TMR2_StartTimer 33AD  
   TMR0_SetInterruptHandler@InterruptHandler 0071                                    ??_sprintf 003B  
                 ?_displayL2_EraseSegDisplay 0070                   __end_of_nullifyBadge_irGet 33BF  
                       locked_lock_leds@size 0073                            _SYSTEM_Initialize 36BC  
           displayL2_EraseSegDisplay@display 0037                   ?_nullifyBadge_irTxRegister 0070  
                          _menu_options_leds 0220                    __end_of_scheduler_TaskAdd 22C3  
                    __end_of__initialization 00E1                    secret_check@buttonPressed 0079  
                  __end_of_scheduler_TaskRun 36FE                       menu_display_option@led 0050  
                    _roundabout_leds_inverse 03A0                           ?_SYSTEM_Initialize 0070  
                 __end_of_PWM2_LoadDutyValue 357F                       _slot_Running_Animation 2B7B  
                     ??_displayL1_SetSegChar 0022                  PWM1_LoadDutyValue@dutyValue 0071  
                  secret_check@currents_size 0025                          ___bmul@multiplicand 0071  
                              led_rand@spark 003B                       ??_displayL2_Initialize 007C  
                          _displayL2_PutChar 2D2E                               __pcstackCOMMON 0070  
                displayL1_SetSegChar@charPos 0021                  __size_of_displayCharReverse 002F  
                               __pidataBANK1 35AB                                 __pidataBANK2 0002  
                               __pidataBANK3 3629                                 __pidataBANK4 2BC1  
                               __pidataBANK5 2002                                 __pidataBANK6 2919  
                               __pidataBANK7 2988                                 __pidataBANK8 2950  
                        ??_SYSTEM_Initialize 0073                                    ?_TMR0_ISR 0070  
                     ??_displayL1_SetUserLed 0073                           ?_displayL2_PutChar 002A  
                                 _badge_inst 01B2                               ??_locked_clear 007C  
                          ??_SPI1_Initialize 0071                  displayL1_SetSegChar@display 0027  
                         _PWM1_LoadDutyValue 3553                        scheduler_TaskAdd@task 003F  
                           ?_TMR2_Initialize 0070                          matrix_Init@taskData 0039  
                        locked_Init@taskData 0039                          _flashy_sparkle_rate 00AE  
       __end_of_nullifyBadge_segDisplayErase 33D7        __size_of_nullifyBadge_segDisplayErase 0006  
               _nullifyBadge_segDisplayErase 33D1                      _nullifyBadge_buttonsGet 2882  
                        ??_displayL2_PutChar 002B                          ?_PWM1_LoadDutyValue 0071  
                             ?_let_alternate 0030                           _gamma_table_256x1k 1800  
                           ?_TMR0_StartTimer 0070                      ??_matrix_display_option 004E  
                    __end_of_TMR4_StartTimer 33B0                    __end_of_SYSTEM_Initialize 36DD  
                         led_curtain@counter 0030                                 sprintf@width 0048  
                              _menu_TaskData 02BC                                   __pbssBANK1 00A0  
                                 __pbssBANK2 0120                                   __pbssBANK3 01A0  
                                 __pbssBANK5 02A0                                   __pbssBANK9 04A0  
                       __size_of_locked_Main 01DD                         __size_of_matrix_Main 071D  
                       __size_of_locked_Init 0063                         __size_of_matrix_Init 009E  
                        secret_Main@taskData 0052                             ?_PWM5_Initialize 0070  
             ?_nullifyBadge_segDisplayPutStr 0037                            _flashy_option_idx 00A8  
                   __end_of_schedulerExecute 2347                        _TMR4_InterruptHandler 0124  
         nullifyBadge_userLedsRegister@badge 0071                           __size_of_menu_Main 01F7  
                         __size_of_menu_Init 0062                    __end_of_displayL2_PutChar 2D80  
                  ??_slot_Finished_Animation 003F                                ?_secret_check 0077  
                       ??_PWM1_LoadDutyValue 0073                                ?_secret_clear 0071  
                             _SSP1DATPPSbits 0E21                              _secret_TaskData 02A0  
                                 __pmaintext 0661                                      ?___bmul 0071  
           __end_of_TMR0_SetInterruptHandler 33C5                                      ?___lmul 0071  
                     ?_flashy_display_option 004C                                      ?___wmul 0071  
                      scheduler_TaskRun@task 0067                                   ??_TMR0_ISR 0070  
                            __CFG_PPS1WAY$ON 0000                   __end_of_PWM6_LoadDutyValue 35AB  
                                 __pintentry 0004                            ??_menu_run_option 007C  
                                    _CCP1CON 0293                                      _CCP2CON 0297  
                                    ?_memset 0071                               ___lmul@product 0020  
                     ??_nullifyBadge_irTxClr 0071                             ?_TMR4_Initialize 0070  
                           ?_PWM6_Initialize 0070                       ??_nullifyBadge_irTxSet 0071  
                             _SSP1CLKPPSbits 0E20                          __CFG_RSTOSC$HFINT32 0000  
                                    ?_strlen 0071                                   _led_Parody 208C  
              ?_nullifyBadge_segDisplayErase 0070                       ?_displayL2_SetUserLeds 002B  
                         _PWM5_LoadDutyValue 357F                                      _OSCCON1 0919  
                   displayL2_PutChar@display 002F                                      _OSCCON3 091B  
                         __size_of_slot_Main 057C                           __size_of_slot_Init 0064  
                                    _NVMADRH 0892                    matrix_display_option@data 004C  
                                    _NVMADRL 0891                                      _NVMDATH 0894  
                                    _OSCTUNE 091E                                      _NVMDATL 0893  
                                    _NVMCON2 0896                                      _PWM5DCH 0618  
                                    _PWM5DCL 0617                                      _PWM6DCH 061B  
                                    _PWM6DCL 061A                                      _PWM5CON 0619  
                                    _PWM6CON 061C                                      _SSP1ADD 0212  
                       __size_of_secret_Main 01BD                                      _PPSLOCK 0E0F  
                                    _SSP1BUF 0211                                   _led_circle 33F0  
                       __size_of_secret_Init 005B                             ?_TMR2_StartTimer 0070  
                              _matrix_option 02CA                                    ?_led_rand 0070  
                        ?_PWM5_LoadDutyValue 0071                      _FLASHY_TEXT_SECRET_TEST 00DB  
                   flashy_Main@buttonPressed 005C                   __size_of_scheduler_TaskAdd 007A  
          __size_of_nullifyBadge_userLedsClr 0006                   __size_of_scheduler_TaskRun 0021  
          __size_of_nullifyBadge_userLedsSet 0011                           _scheduler_TaskInit 29C0  
                  ?_nullifyBadge_userLedsClr 0070                    ?_nullifyBadge_userLedsSet 002D  
                             ??_secret_check 0020                               ??_secret_clear 0073  
                    ??_displayL2_ClrUserLeds 007B                 displayL2_SetUserLeds@display 007B  
                           ??_scheduler_Init 0071                          ?_scheduler_TaskInit 0070  
                            __size_of___bmul 0011                                      ___almod 20F1  
                            __size_of___lmul 0032                              __size_of___wmul 001B  
            ??_nullifyBadge_userLedsRegister 0071                                      ___lwdiv 28E5  
                         scheduler_TaskAdd@k 0047                                      ___lwmod 3772  
                       ??_PWM5_LoadDutyValue 0073                  __size_of_locked_unlock_leds 0012  
                  ??_nullifyBadge_buttonsGet 0071                              _roundabout_leds 03BC  
                    scheduler_Init@scheduler 0072                              __size_of_memset 0018  
                      displayL1_SetSegChar@c 0020                              _matrix_TaskData 04A0  
                            _locked_TaskData 02AE                                   _menu_clear 2C07  
                                    __ptext1 29C0                                      __ptext2 2249  
                                    __ptext3 2347                                      __ptext4 2E7E  
                                    __ptext5 2F9D                                      __ptext6 2F3B  
                                    __ptext7 0764                                      __ptext8 2028  
                                    __ptext9 34B6                              __size_of_strlen 001E  
            __end_of_slot_Finished_Animation 1028                                      _dpowers 2800  
                             slot_Setup@data 0034                        _OSCILLATOR_Initialize 33F9  
                                    _oddeven 00B8                                    _T2CONbits 001F  
                          __end_of_menu_Main 2000                            __end_of_menu_Init 2F9D  
                                    _isdigit 348B                              ??_let_alternate 007C  
                                    _marquee 21D2                                    _T4CONbits 0417  
                   ??_PIN_MANAGER_Initialize 0071      nullifyBadge_segDisplayForceUpdate@badge 002B  
                  __size_of_displayL1_Update 0011                         ??_scheduler_TaskInit 0071  
                  __size_of_displayL2_PutStr 002A                   __size_of_SYSTEM_Initialize 0021  
                                    _sprintf 1A5F                                      clrloop0 3467  
                           ?_TMR4_StartTimer 0070                __size_of_locked_get_lock_leds 0024  
                        displayL2_PutStr@str 0030                                   ??_led_rand 0033  
                       end_of_initialization 00E1                         __end_of_locked_clear 2B38  
                                    init_ram 3472                                      memset@c 0073  
                                    memset@n 0075                                      memset@p 0077  
                              secret_check@i 0028                                      initloop 3473  
                               marquee@count 003C                   __size_of_displayL2_PutChar 0052  
                          ?_locked_lock_leds 0070                            __end_of_slot_Main 0661  
                          __end_of_slot_Init 208C                             ??_led_roundabout 0032  
                         ??_locked_lock_leds 0071                              _matrix_leds_idx 00A0  
             TMR0_Read16bitTimer@readValHigh 007B                  __end_of_menu_display_option 2F3B  
                     slot_Main@buttonPressed 0064                                      strlen@s 0071  
                    ??_displayL2_ForceUpdate 007B                      __size_of_marquee_speedy 0073  
                         secret_check@inputs 0027                             ??_WDT_Initialize 0071  
                   _TMR0_SetInterruptHandler 33BF                                    _PORTAbits 000C  
                                  _PORTBbits 000D                                    _PORTCbits 000E  
              nullifyBadge_userLedsClr@badge 002B                                  ?_led_Parody 0030  
                                 _slot_Setup 2D80                      displayL1_Update@display 002A  
                                ?_led_circle 0030                      menu_display_option@data 004C  
             ??_nullifyBadge_segDisplayErase 007C                      menu_display_option@size 004E  
                           __CFG_FEXTOSC$OFF 0000                  ??_displayL2_EraseSegDisplay 007C  
            __end_of_nullifyBadge_buttonsGet 28B3                                _schedulerInst 01A0  
                   _nullifyBadge_irTxRelease 3443                      ?_slot_Running_Animation 0032  
                ??_nullifyBadge_irTxRegister 0071                                  _CCP1CONbits 0293  
                            _SPI1_Initialize 33D7                                  _CCP2CONbits 0297  
                          slot_Main@taskData 0052                                ??_flashy_Main 0054  
                              ??_flashy_Init 007C                   ?_nullifyBadge_platformInit 0070  
               __size_of_TMR0_Read16bitTimer 001D                     __size_of_PWM1_Initialize 000B  
                        secret_Init@taskData 0039                         _timer0ReloadVal16bit 00C0  
                         _nullifyBadge_irGet 33BA                              flashy_Main@data 005E  
                              __pidataBANK10 29F9                               __end_of___bmul 3508  
              nullifyBadge_userLedsSet@badge 002F                               __end_of___lmul 3800  
                              __pidataBIGRAM 2543                                ??_led_curtain 0032  
                             __end_of___wmul 360E              slot_Finished_Animation@taskData 003D  
                     flashy_Main@hit_counter 0056                            __size_of_TMR0_ISR 000D  
                         _PWM2_LoadDutyValue 3569                 __size_of_matrix_secret_check 00BB  
                                ?_menu_clear 0039                       ?_OSCILLATOR_Initialize 0070  
                             __end_of_memset 35D9                          ?_nullifyBadge_irGet 0070  
                            flashy_Init@data 003B        __end_of_nullifyBadge_userLedsRegister 34C5  
     __size_of_nullifyBadge_userLedsRegister 000F                _nullifyBadge_userLedsRegister 34B6  
                       __end_of_secret_check 10E3                              _menu_option_idx 00B6  
                       __end_of_secret_clear 28E5                               __end_of_strlen 369E  
                        start_initialization 0018                     __size_of_PWM2_Initialize 000B  
                   __size_of_TMR0_Initialize 001E                          ?_PWM2_LoadDutyValue 0071  
            __size_of_PIN_MANAGER_Initialize 0055                         marquee_speedy@F14090 01E8  
              __size_of_displayL1_Initialize 0013               __end_of_slot_Running_Animation 2BC1  
                       _matrix_secret_inputs 0234               __size_of_matrix_display_option 00A3  
              __end_of_matrix_display_option 2488                         ??_nullifyBadge_irGet 0071  
                            _menu_run_option 2C96                            ?_schedulerExecute 0070  
                    ??_flashy_display_option 007C                   __end_of_displayCharReverse 37CE  
                   ??_locked_get_unlock_leds 0073                          __size_of_led_Parody 0065  
                         led_roundabout@leds 0034                             __CFG_LPBOREN$OFF 0000  
                         led_roundabout@size 0036                           _flashy_scroll_rate 00AC  
                       ??_PWM2_LoadDutyValue 0073                                _secret_inputs 024D  
                         ??_schedulerExecute 0068                    flashy_display_option@data 004C  
              __size_of_displayL1_SetSegChar 0041                                     ??___bmul 0072  
                PWM2_LoadDutyValue@dutyValue 0071                                     ??___lmul 0079  
                 slot_Running_Animation@data 0036                                     ??___wmul 0075  
                  _displayL2_EraseSegDisplay 34C5                                  _CCPTMRSbits 029F  
                        __size_of_led_circle 0009                __size_of_displayL2_Initialize 0026  
                     __size_of_TMR0_CallBack 000B                                  __pdataBANK1 00C7  
                                __pdataBANK2 0167                                  __pdataBANK3 01D1  
                                __pdataBANK4 0220                                  __pdataBANK5 02CA  
                                __pdataBANK6 0320                                  __pdataBANK7 03A0  
                                __pdataBANK8 0420                                     ??_memset 0077  
                  _nullifyBadge_irTxRegister 34A7                __size_of_displayL1_SetUserLed 0012  
                        __end_of_flashy_Main 1000                          __end_of_flashy_Init 07FA  
                   ?_SPI1_Exchange8bitBuffer 0072                      ??_displayL2_SetUserLeds 007B  
                           secret_check@data 0077                                     ??_strlen 0073  
                           secret_check@size 0023                                  __pbssBANK11 05A0  
                  schedulerExecute@scheduler 00E3           nullifyBadge_segDisplayPutStr@badge 0039  
                PWM5_LoadDutyValue@dutyValue 0071                         marquee_speedy@string 003A  
                                __pbssCOMMON 007C                                  ?_slot_Setup 002F  
                  schedulerExecute@tickDelta 00E1                                    ___latbits 0003  
                        __end_of_led_curtain 2AB5                                __pcstackBANK0 0020  
                              __pcstackBANK1 00DD                        __size_of_locked_clear 0042  
                           _displayL1_Update 34D5                           _PWM6_LoadDutyValue 3595  
                   __size_of_TMR2_Initialize 000A                                ??_matrix_Main 0054  
                              ??_locked_Main 0054                             _displayL2_PutStr 3748  
                              ??_matrix_Init 003B                                ??_locked_Init 007C  
                     scheduler_TaskInit@task 0071                             secret_clear@data 0071  
                    __end_of_SPI1_Initialize 33DF                                 _isdigit$3610 0071  
                       _asciiCharTableLookup 26F0                        _locked_lock_base_leds 00D9  
                         _flashy_option_size 00A6             matrix_secret_check@buttonPressed 0079  
                    matrix_secret_check@data 0077                                 _curtain_leds 043C  
                        ?_PWM6_LoadDutyValue 0071                      matrix_secret_check@size 0023  
           displayL2_SetUserLeds@userLedData 002B                                  sprintf@flag 0040  
                          __size_of_led_rand 0048                                  sprintf@prec 003F  
           matrix_secret_check@currents_size 0025                          __size_of_menu_clear 0047  
                      _TMR0_InterruptHandler 00BE                     __size_of_TMR0_StartTimer 0003  
                __size_of_PWM1_LoadDutyValue 0016                             ___lwdiv@dividend 0073  
                     _PIN_MANAGER_Initialize 2DD4                                  _FLASHY_TEXT 0167  
                   __size_of_PWM5_Initialize 000C                            menu_Main@taskData 0052  
             __size_of_displayL2_ClrUserLeds 000E                __end_of_displayL2_ClrUserLeds 34A7  
                displayL1_SetUserLed@display 0074                                     ?___almod 002B  
                                  __ptext100 3569                                    __ptext101 3553  
                                  __ptext103 347E                                    __ptext104 3417  
                                  __ptext105 0800                            schedulerExecute@k 00E4  
                                   ?___lwdiv 0071                                     ?___lwmod 002B  
                             _marquee_speedy 215F                         ??_PWM6_LoadDutyValue 0073  
                               _locked_clear 2AF6                            ??_PWM1_Initialize 0071  
               ??_INTERRUPT_InterruptManager 0070                             ___almod@dividend 002F  
                          marquee@multiplier 0044                                    __pswtext1 3000  
                     displayCharReverse@cVal 0071                __size_of_nullifyBadge_irTxClr 0003  
              __size_of_nullifyBadge_irTxSet 0003                                ??_secret_Main 0054  
                              ??_secret_Init 007C                          _locked_locking_leds 00C7  
                                   ?_isdigit 0070                                     ?_marquee 003A  
                   __size_of_PWM6_Initialize 000C                     __size_of_TMR4_Initialize 000B  
             ?_nullifyBadge_userLedsRegister 0070                  displayL2_Initialize@display 002B  
                    __end_of_menu_run_option 2CE0                             ___lwdiv@quotient 0077  
                            secret_Main@data 0058                                    _menu_Main 1E09  
                       matrix_secret_check@i 0028                                    _menu_Init 2F3B  
              nullifyBadge_irTxRelease@badge 0072                                    _menu_Exit 0000  
                                   ?_sprintf 002F                          flashy_Main@taskData 0052  
                              _TMR0_CallBack 3417                           displayL2_PutChar@c 002A  
                         displayL2_PutChar@k 002E                                    _menu_task 014D  
    displayL1_SetSegChar@dispDataVectBaseIdx 0026                     ?_slot_Finished_Animation 003D  
                          ??_TMR0_Initialize 0073                            ??_PWM2_Initialize 0071  
                            secret_Init@data 003B                SPI1_Exchange8bitBuffer@dataIn 0077  
                             ___wmul@product 0075                          __end_of_locked_Main 1E09  
                        __end_of_matrix_Main 1800                          __end_of_locked_Init 3000  
                        __end_of_matrix_Init 23E5                                     _LATBbits 010D  
                                   _LATCbits 010E                SPI1_Exchange8bitBuffer@bufLen 0072  
                                  clear_ram0 3466                                     _PIE0bits 0090  
                   __size_of_TMR2_StartTimer 0003          __size_of_INTERRUPT_InterruptManager 0012  
                 ??_TMR0_SetInterruptHandler 0073              __size_of_locked_get_unlock_leds 0018  
                                   _PIR0bits 0010                                     _PIR1bits 0011  
                                   _PIR2bits 0012                                  _flashy_Main 0819  
                                _flashy_Init 0764                                  _flashy_Exit 0000  
                        __size_of_slot_Setup 0054                   TMR0_Read16bitTimer@readVal 0078  
                 __end_of_locked_unlock_leds 352C                   scheduler_TaskAdd@scheduler 0046  
            __end_of_SPI1_Exchange8bitBuffer 2D2E                 __end_of_locked_get_lock_leds 3722  
                     __end_of_marquee_speedy 21D2                                  _flashy_task 015A  
                                   _SSP1CON1 0215                                     _TMR0_ISR 347E  
                                   _SSP1STAT 0214                            slot_Init@taskData 0039  
                __size_of_PWM5_LoadDutyValue 0016                        __size_of_secret_check 00BB  
                                  _slot_Main 00E5                        __size_of_secret_clear 0032  
                                  _slot_Init 2028                                    _slot_Exit 0000  
                                _led_curtain 2A74              displayL1_SetUserLed@userLedVect 0071  
                            _flashy_TaskData 04BF                                    _slot_task 0140  
          schedulerExecute@currentSystemTick 00DD                            ___wmul@multiplier 0071  
             __size_of_displayL2_ForceUpdate 0006                __end_of_displayL2_ForceUpdate 33CB  
                          _Shot_Options_Long 02DE                                 ??_led_Parody 0032  
                 ??_nullifyBadge_irTxRelease 0071                    __size_of_locked_lock_leds 001A  
          nullifyBadge_segDisplayErase@badge 0038                     matrix_Main@buttonPressed 0059  
                   locked_Main@buttonPressed 0056                          _TMR0_Read16bitTimer 3645  
                      __end_of_let_alternate 3553                                 ??_led_circle 007C  
                            led_circle@count 0030                  __size_of_scheduler_TaskInit 0039  
                             ?_TMR0_CallBack 0070                                   ?_menu_Main 0052  
                                 ?_menu_Init 0039                             ?_SPI1_Initialize 0070  
                   _nullifyBadge_userLedsClr 07FA                            ___lmul@multiplier 0071  
                      led_roundabout@counter 0030                     _nullifyBadge_userLedsSet 34E6  
                        __end_of_secret_Main 2800                          __end_of_secret_Init 2ED9  
                                   _Leds_idx 00D7                          _matrix_secret_check 2488  
                          ??_TMR2_Initialize 0071                     secret_Main@buttonPressed 0057  
                 locked_get_unlock_leds@leds 0073                     __size_of_TMR4_StartTimer 0003  
                               _secret_check 1028                                 _secret_clear 28B3  
                       ?_TMR0_Read16bitTimer 0071                           __end_of_led_Parody 20F1  
                            marquee_speedy@i 0046                              marquee_speedy@j 004A  
                ??_nullifyBadge_platformInit 007C                     ?_nullifyBadge_buttonsGet 0070  
                               _secret_value 00C5                              _flashy_leds_idx 00B2  
 __end_of_nullifyBadge_segDisplayForceUpdate 33D1  __size_of_nullifyBadge_segDisplayForceUpdate 0006  
       ??_nullifyBadge_segDisplayForceUpdate 007C          ?_nullifyBadge_segDisplayForceUpdate 0070  
         _nullifyBadge_segDisplayForceUpdate 33CB                              ?_marquee_speedy 003A  
                    ??_OSCILLATOR_Initialize 0071                          marquee_speedy@count 003C  
                          ??_TMR0_StartTimer 0071                             __size_of___almod 006E  
                         __end_of_led_circle 33F9                                   ?_slot_Main 0052  
                                 ?_slot_Init 0039                             __size_of___lwdiv 0034  
                           __size_of___lwmod 002D                         ?_matrix_secret_check 0077  
                               ??_menu_clear 007C                            ??_PWM5_Initialize 0071  
                    __size_of_scheduler_Init 001B                                   sprintf@len 0046  
                                _currentTask 00BA                                   sprintf@val 0044  
               __size_of_menu_display_option 0062           __size_of_displayL2_EraseSegDisplay 0010  
                                 _T0CON0bits 0017                       _locked_get_unlock_leds 0801  
                           __size_of_isdigit 000E                             __size_of_marquee 0077  
                            ___lwdiv@divisor 0071                              ___lwdiv@counter 0076  
                               _Shot_Options 01D1                          displayCharReverse@k 007B  
         __size_of_nullifyBadge_irTxRegister 000F                                     __ptext10 33DF  
                                   __ptext11 360E                                     __ptext20 2B7B  
                                   __ptext12 22C3                                     __ptext21 1001  
                                   __ptext13 36DD                                     __ptext30 2D80  
                                   __ptext22 28B3                                     __ptext14 10E3  
                                   __ptext31 351A                                     __ptext23 1028  
                                   __ptext15 2643                                     __ptext40 1A5F  
                                   __ptext32 35D9                                     __ptext24 2C96  
                                   __ptext16 1C2C                                     __ptext41 348B  
                                   __ptext33 0801                                     __ptext25 2C07  
                                   __ptext17 1E09                                     __ptext50 2AB5  
                                   __ptext42 35F3                                     __ptext34 36FE  
                                   __ptext26 2ED9                                     __ptext18 0819  
                                   __ptext51 2C4E                                     __ptext43 33B3  
                                   __ptext35 2AF6                                     __ptext27 2488  
                                   __ptext19 00E5                                     __ptext60 3508  
                                   __ptext52 2B38                                     __ptext44 3443  
                                   __ptext36 07FA                                     __ptext28 34F7  
                                   __ptext61 1A00                                     __ptext53 37CE  
                                   __ptext45 34A7                                     __ptext37 3499  
                                   __ptext29 23E5                                     __ptext70 33CB  
                                   __ptext62 215F                                     __ptext54 20F1  
                                   __ptext46 33B0                                     __ptext38 33D1  
                                   __ptext71 33C5                                     __ptext63 21D2  
                                   __ptext55 2A74                                     __ptext47 33BA  
                                   __ptext39 34C5                                     __ptext80 2CE0  
                                   __ptext72 3772                                     __ptext64 3680  
                                   __ptext56 33F0                                     __ptext48 2882  
                                   __ptext81 33E7                                     __ptext73 28E5  
                                   __ptext65 340D                                     __ptext57 208C  
                                   __ptext49 353F                                     __ptext90 33BF  
                                   __ptext82 36BC                                     __ptext74 3645  
                                   __ptext66 3748                                     __ptext58 34E6  
                                   __ptext91 33D7                                     __ptext83 33B6  
                                   __ptext75 2E29                                     __ptext67 2D2E  
                                   __ptext59 369E                                     __ptext92 345A  
                                   __ptext84 3438                                     __ptext76 3722  
                                   __ptext68 2A33                                     __ptext93 344E  
                                   __ptext85 33AD                                     __ptext77 352C  
                                   __ptext69 379F                                     __ptext94 342D  
                                   __ptext86 3403                                     __ptext78 35C1  
                                   __ptext95 3422                                     __ptext87 33AA  
                                   __ptext79 34D5                                     __ptext96 2DD4  
                                   __ptext88 3662                                     __ptext97 33F9  
                                   __ptext89 33A7                                     __ptext98 3595  
                                   __ptext99 357F                                  _matrix_Main 10E3  
                                _locked_Main 1C2C                                  _matrix_Init 2347  
                                _locked_Init 2F9D                           slot_Setup@taskData 002F  
                                _matrix_Exit 0000                                  _locked_Exit 0000  
                               _SSP1CON1bits 0215                             ?_menu_run_option 003B  
                                _locked_leds 00A2                                  _matrix_task 01C4  
                                _locked_task 0133                              ___almod@divisor 002B  
                                   _led_rand 2C4E                             __size_of_sprintf 01CD  
                            ___almod@counter 007A               slot_Running_Animation@taskData 0032  
                                _menu_option 022A      __end_of_nullifyBadge_segDisplayRegister 33E7  
   __size_of_nullifyBadge_segDisplayRegister 0008            ??_nullifyBadge_segDisplayRegister 0071  
           ?_nullifyBadge_segDisplayRegister 0070              _nullifyBadge_segDisplayRegister 33DF  
                       marquee@string_length 0048                                menu_Main@data 0057  
                          ??_TMR4_Initialize 0071                            ??_PWM6_Initialize 0071  
                              __size_of_main 0103                                __size_of_rand 0043  
       __end_of_TMR0_DefaultInterruptHandler 0801        __size_of_TMR0_DefaultInterruptHandler 0001  
               _TMR0_DefaultInterruptHandler 0800                           __end_of_menu_clear 2C4E  
                          displayL2_PutStr@k 0036                        ??_TMR0_Read16bitTimer 0073  
                                 _RC0PPSbits 0EA0                                marquee@F14099 01E3  
                                 _RC1PPSbits 0EA1                                menu_Init@data 003B  
                   __end_of_displayL1_Update 34E6                           let_alternate@count 0030  
                                 _RC2PPSbits 0EA2               __size_of_flashy_display_option 005F  
                   __end_of_displayL2_PutStr 3772                __end_of_flashy_display_option 1A5F  
                                 _RC3PPSbits 0EA3                 __end_of_displayL1_Initialize 353F  
                       _curtain_leds_inverse 0420                                   _RC4PPSbits 0EA4  
                                 _RB6PPSbits 0E9E                                     int$flags 007E  
               displayL2_ForceUpdate@display 007B                              matrix_Main@data 005B  
                            locked_Main@data 0057                            ??_TMR2_StartTimer 0071  
         __end_of_INTERRUPT_InterruptManager 0016                   _INTERRUPT_InterruptManager 0004  
                      ??_matrix_secret_check 0020                                 _SSP1STATbits 0214  
       nullifyBadge_segDisplayRegister@badge 0071                  PIN_MANAGER_Initialize@state 0071  
         schedulerExecute@taskLastSystemTick 00DF                           _displayCharReverse 379F  
                          menu_Init@taskData 0039                    __size_of_schedulerExecute 0084  
             __size_of_displayL2_SetUserLeds 001E                              matrix_Init@data 003D  
                            locked_Init@data 003B                __end_of_displayL2_SetUserLeds 36BC  
              displayCharReverse@retValLower 0078                displayCharReverse@retValUpper 0079  
                                 _INTCONbits 000B                                  _secret_Main 2643  
                    __size_of_led_roundabout 0041                                  _secret_Init 2E7E  
                               ??_slot_Setup 0031                                  _secret_Exit 0000  
                            ??_TMR0_CallBack 0070                                  _NVMCON1bits 0895  
                  _nullifyBadge_platformInit 2E29                 __end_of_displayL1_SetSegChar 2A74  
                                _secret_task 0126                               __pstringtext10 3919  
                             __pstringtext11 3937                               __pstringtext20 3A1F  
                             __pstringtext12 3954                               __pstringtext21 3A32  
                             __pstringtext13 3971                               __pstringtext30 3ABF  
                             __pstringtext22 3A45                               __pstringtext14 398D  
                             __pstringtext31 3ACB                               __pstringtext23 3A57  
                             __pstringtext15 39A8                               __pstringtext40 3B25  
                             __pstringtext32 3AD7                               __pstringtext24 3A68  
                             __pstringtext16 39C3                               __pstringtext41 3B2E  
                             __pstringtext33 3AE2                               __pstringtext25 3A79  
                             __pstringtext17 39DD                               __pstringtext50 3B75  
                             __pstringtext42 3B36                               __pstringtext34 3AED  
                             __pstringtext26 3A89                               __pstringtext18 39F4  
                             __pstringtext51 3B7C                               __pstringtext43 3B3E  
                             __pstringtext35 3AF7                               __pstringtext27 3A98  
                             __pstringtext19 3A0A                               __pstringtext60 3BB3  
                             __pstringtext52 3B83                               __pstringtext44 3B46  
                             __pstringtext36 3B01                               __pstringtext28 3AA5  
                             __pstringtext61 3BB8                               __pstringtext53 3B8A  
                             __pstringtext45 3B4E                               __pstringtext37 3B0A  
                             __pstringtext29 3AB2                               __pstringtext70 3BE5  
                             __pstringtext62 3BBD                               __pstringtext54 3B91  
                             __pstringtext46 3B56                               __pstringtext38 3B13  
                             __pstringtext71 3BEA                               __pstringtext63 3BC2  
                             __pstringtext55 3B97                               __pstringtext47 3B5E  
                             __pstringtext39 3B1C                               __pstringtext72 3BEF  
                             __pstringtext64 3BC7                               __pstringtext56 3B9D  
                             __pstringtext48 3B66                               __pstringtext73 3BF4  
                             __pstringtext65 3BCC                               __pstringtext57 3BA3  
                             __pstringtext49 3B6E                               __pstringtext74 3BF9  
                             __pstringtext66 3BD1                               __pstringtext58 3BA9  
                             __pstringtext75 3BFE                               __pstringtext67 3BD6  
                             __pstringtext59 3BAE                               __pstringtext76 3C02  
                             __pstringtext68 3BDB                               __pstringtext77 0000  
                             __pstringtext69 3BE0            __end_of_displayL2_EraseSegDisplay 34D5  
                                   isdigit@c 0072                                     marquee@i 0046  
                                   marquee@j 004A                                     memset@p1 0071  
               __end_of_displayL2_Initialize 3748                          ?_displayCharReverse 0071  
                                ??_menu_Main 0054                                  ??_menu_Init 007C  
                    __size_of_WDT_Initialize 0004                         _locked_get_lock_leds 36FE  
          __end_of_nullifyBadge_irTxRegister 34B6             __size_of_SPI1_Exchange8bitBuffer 004E  
                    matrix_Main@matrix_found 0058                 __end_of_displayL1_SetUserLed 351A  
                                   intlevel1 0000                                    sprintf@ap 0043  
                                  sprintf@cp 0041                                    sprintf@sp 002F  
                           ___lwmod@dividend 002D                      ?_PIN_MANAGER_Initialize 0070  
                              marquee@string 003A                  __size_of_nullifyBadge_irGet 0005  
                          __CFG_CLKOUTEN$OFF 0000                        _matrix_display_option 23E5  
        SPI1_Exchange8bitBuffer@bytesWritten 0078                                  _PPSLOCKbits 0E0F  
                            _PWM1_Initialize 3422                          flashy_Init@taskData 0039  
                             menu_clear@data 0039                ?_TMR0_DefaultInterruptHandler 0070  
                __size_of_PWM2_LoadDutyValue 0016                         ??_displayCharReverse 0073  
                         __end_of_slot_Setup 2DD4                            ??_TMR4_StartTimer 0071  
                                ??_slot_Main 0054                                  ??_slot_Init 007C  
                              __pstringtext1 1800                                __pstringtext2 2800  
                              __pstringtext3 3800                                __pstringtext4 382F  
                              __pstringtext5 385D                                __pstringtext6 3888  
                              __pstringtext7 38B0                                __pstringtext8 38D4  
                              __pstringtext9 38F7             __end_of_nullifyBadge_irTxRelease 344E  
                                   sprintf@c 004A                                     sprintf@f 0031  
                              _flashy_option 0520                             _locked_lock_leds 35D9  
                            ___lwmod@divisor 002B                              _TMR0_Initialize 3662  
                            _PWM2_Initialize 342D                                     strlen@cp 0075  
                              _slot_TaskData 05A0                              ___lwmod@counter 007A  
                PWM6_LoadDutyValue@dutyValue 0071                        ?_locked_get_lock_leds 0071  
             __end_of_PIN_MANAGER_Initialize 2E29                           _matrix_option_size 0120  
                           locked_clear@data 0039                                 ___almod@sign 007B  
                                _PWMTMRSbits 061F                 __end_of_nullifyBadge_irTxClr 33B3  
               __end_of_nullifyBadge_irTxSet 33B6                   __end_of_PWM1_LoadDutyValue 3569  
                          _matrix_option_idx 0122                        _TMR2_InterruptHandler 00C2  
                               ?_flashy_Main 0052                                 ?_flashy_Init 0039  
