

Microchip Technology PIC LITE Macro Assembler V1.42 build -159332390 
                                                                                               Wed Jul 26 15:12:08 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	16LF18346
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	idataBANK3,global,class=CODE,delta=2
     7                           	psect	idataBANK4,global,class=CODE,delta=2
     8                           	psect	idataBANK5,global,class=CODE,delta=2
     9                           	psect	idataBANK6,global,class=CODE,delta=2
    10                           	psect	idataBANK7,global,class=CODE,delta=2
    11                           	psect	idataBANK8,global,class=CODE,delta=2
    12                           	psect	idataBANK10,global,class=CODE,delta=2
    13                           	psect	idataBIGRAM,global,class=CODE,delta=2
    14                           	psect	stringtext1,global,class=STRCODE,delta=2
    15                           	psect	stringtext2,global,class=STRCODE,delta=2
    16                           	psect	stringtext3,global,class=STRCODE,delta=2
    17                           	psect	stringtext4,global,class=STRCODE,delta=2
    18                           	psect	stringtext5,global,class=STRCODE,delta=2
    19                           	psect	stringtext6,global,class=STRCODE,delta=2
    20                           	psect	stringtext7,global,class=STRCODE,delta=2
    21                           	psect	stringtext8,global,class=STRCODE,delta=2
    22                           	psect	stringtext9,global,class=STRCODE,delta=2
    23                           	psect	stringtext10,global,class=STRCODE,delta=2
    24                           	psect	stringtext11,global,class=STRCODE,delta=2
    25                           	psect	stringtext12,global,class=STRCODE,delta=2
    26                           	psect	stringtext13,global,class=STRCODE,delta=2
    27                           	psect	stringtext14,global,class=STRCODE,delta=2
    28                           	psect	stringtext15,global,class=STRCODE,delta=2
    29                           	psect	stringtext16,global,class=STRCODE,delta=2
    30                           	psect	stringtext17,global,class=STRCODE,delta=2
    31                           	psect	stringtext18,global,class=STRCODE,delta=2
    32                           	psect	stringtext19,global,class=STRCODE,delta=2
    33                           	psect	stringtext20,global,class=STRCODE,delta=2
    34                           	psect	stringtext21,global,class=STRCODE,delta=2
    35                           	psect	stringtext22,global,class=STRCODE,delta=2
    36                           	psect	stringtext23,global,class=STRCODE,delta=2
    37                           	psect	stringtext24,global,class=STRCODE,delta=2
    38                           	psect	stringtext25,global,class=STRCODE,delta=2
    39                           	psect	stringtext26,global,class=STRCODE,delta=2
    40                           	psect	stringtext27,global,class=STRCODE,delta=2
    41                           	psect	stringtext28,global,class=STRCODE,delta=2
    42                           	psect	stringtext29,global,class=STRCODE,delta=2
    43                           	psect	stringtext30,global,class=STRCODE,delta=2
    44                           	psect	stringtext31,global,class=STRCODE,delta=2
    45                           	psect	stringtext32,global,class=STRCODE,delta=2
    46                           	psect	stringtext33,global,class=STRCODE,delta=2
    47                           	psect	stringtext34,global,class=STRCODE,delta=2
    48                           	psect	stringtext35,global,class=STRCODE,delta=2
    49                           	psect	stringtext36,global,class=STRCODE,delta=2
    50                           	psect	stringtext37,global,class=STRCODE,delta=2
    51                           	psect	stringtext38,global,class=STRCODE,delta=2
    52                           	psect	stringtext39,global,class=STRCODE,delta=2
    53                           	psect	stringtext40,global,class=STRCODE,delta=2
    54                           	psect	stringtext41,global,class=STRCODE,delta=2
    55                           	psect	stringtext42,global,class=STRCODE,delta=2
    56                           	psect	stringtext43,global,class=STRCODE,delta=2
    57                           	psect	stringtext44,global,class=STRCODE,delta=2
    58                           	psect	stringtext45,global,class=STRCODE,delta=2
    59                           	psect	stringtext46,global,class=STRCODE,delta=2
    60                           	psect	stringtext47,global,class=STRCODE,delta=2
    61                           	psect	stringtext48,global,class=STRCODE,delta=2
    62                           	psect	stringtext49,global,class=STRCODE,delta=2
    63                           	psect	stringtext50,global,class=STRCODE,delta=2
    64                           	psect	stringtext51,global,class=STRCODE,delta=2
    65                           	psect	stringtext52,global,class=STRCODE,delta=2
    66                           	psect	stringtext53,global,class=STRCODE,delta=2
    67                           	psect	stringtext54,global,class=STRCODE,delta=2
    68                           	psect	stringtext55,global,class=STRCODE,delta=2
    69                           	psect	stringtext56,global,class=STRCODE,delta=2
    70                           	psect	stringtext57,global,class=STRCODE,delta=2
    71                           	psect	stringtext58,global,class=STRCODE,delta=2
    72                           	psect	stringtext59,global,class=STRCODE,delta=2
    73                           	psect	stringtext60,global,class=STRCODE,delta=2
    74                           	psect	stringtext61,global,class=STRCODE,delta=2
    75                           	psect	stringtext62,global,class=STRCODE,delta=2
    76                           	psect	stringtext63,global,class=STRCODE,delta=2
    77                           	psect	stringtext64,global,class=STRCODE,delta=2
    78                           	psect	stringtext65,global,class=STRCODE,delta=2
    79                           	psect	stringtext66,global,class=STRCODE,delta=2
    80                           	psect	stringtext67,global,class=STRCODE,delta=2
    81                           	psect	stringtext68,global,class=STRCODE,delta=2
    82                           	psect	stringtext69,global,class=STRCODE,delta=2
    83                           	psect	stringtext70,global,class=STRCODE,delta=2
    84                           	psect	stringtext71,global,class=STRCODE,delta=2
    85                           	psect	stringtext72,global,class=STRCODE,delta=2
    86                           	psect	stringtext73,global,class=STRCODE,delta=2
    87                           	psect	stringtext74,global,class=STRCODE,delta=2
    88                           	psect	stringtext75,global,class=STRCODE,delta=2
    89                           	psect	stringtext76,global,class=STRCODE,delta=2
    90                           	psect	stringtext77,global,class=STRCODE,delta=2
    91                           	psect	stringtext78,global,class=STRCODE,delta=2
    92                           	psect	stringtext79,global,class=STRCODE,delta=2
    93                           	psect	cinit,global,class=CODE,merge=1,delta=2
    94                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    95                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    96                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    97                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    98                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    99                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
   100                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
   101                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
   102                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
   103                           	psect	dataBANK5,global,class=BANK5,space=1,delta=1
   104                           	psect	dataBANK6,global,class=BANK6,space=1,delta=1
   105                           	psect	dataBANK7,global,class=BANK7,space=1,delta=1
   106                           	psect	dataBANK8,global,class=BANK8,space=1,delta=1
   107                           	psect	bssBANK9,global,class=BANK9,space=1,delta=1
   108                           	psect	dataBANK10,global,class=BANK10,space=1,delta=1
   109                           	psect	bssBANK11,global,class=BANK11,space=1,delta=1
   110                           	psect	inittext,global,class=CODE,delta=2
   111                           	psect	clrtext,global,class=CODE,delta=2
   112                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
   113                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
   114                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
   115                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
   116                           	psect	text1,local,class=CODE,merge=1,delta=2
   117                           	psect	text2,local,class=CODE,merge=1,delta=2
   118                           	psect	text3,local,class=CODE,merge=1,delta=2
   119                           	psect	text4,local,class=CODE,merge=1,delta=2
   120                           	psect	text5,local,class=CODE,merge=1,delta=2
   121                           	psect	text6,local,class=CODE,merge=1,delta=2
   122                           	psect	text7,local,class=CODE,merge=1,delta=2
   123                           	psect	text8,local,class=CODE,merge=1,delta=2
   124                           	psect	text9,local,class=CODE,merge=1,delta=2
   125                           	psect	text10,local,class=CODE,merge=1,delta=2
   126                           	psect	text11,local,class=CODE,merge=1,delta=2
   127                           	psect	text12,local,class=CODE,merge=1,delta=2
   128                           	psect	text13,local,class=CODE,merge=1,delta=2
   129                           	psect	text14,local,class=CODE,merge=1,delta=2
   130                           	psect	text15,local,class=CODE,merge=1,delta=2
   131                           	psect	text16,local,class=CODE,merge=1,delta=2
   132                           	psect	text17,local,class=CODE,merge=1,delta=2
   133                           	psect	text18,local,class=CODE,merge=1,delta=2
   134                           	psect	swtext1,local,class=CONST,delta=2
   135                           	psect	text19,local,class=CODE,merge=1,delta=2
   136                           	psect	text20,local,class=CODE,merge=1,delta=2
   137                           	psect	text21,local,class=CODE,merge=1,delta=2
   138                           	psect	text22,local,class=CODE,merge=1,delta=2
   139                           	psect	text23,local,class=CODE,merge=1,delta=2
   140                           	psect	text24,local,class=CODE,merge=1,delta=2
   141                           	psect	text25,local,class=CODE,merge=1,delta=2
   142                           	psect	text26,local,class=CODE,merge=1,delta=2
   143                           	psect	text27,local,class=CODE,merge=1,delta=2
   144                           	psect	text28,local,class=CODE,merge=1,delta=2
   145                           	psect	text29,local,class=CODE,merge=1,delta=2
   146                           	psect	text30,local,class=CODE,merge=1,delta=2
   147                           	psect	text31,local,class=CODE,merge=1,delta=2
   148                           	psect	text32,local,class=CODE,merge=1,delta=2,group=2
   149                           	psect	text33,local,class=CODE,merge=1,delta=2
   150                           	psect	text34,local,class=CODE,merge=1,delta=2
   151                           	psect	text35,local,class=CODE,merge=1,delta=2
   152                           	psect	text36,local,class=CODE,merge=1,delta=2
   153                           	psect	text37,local,class=CODE,merge=1,delta=2
   154                           	psect	text38,local,class=CODE,merge=1,delta=2
   155                           	psect	text39,local,class=CODE,merge=1,delta=2
   156                           	psect	text40,local,class=CODE,merge=1,delta=2
   157                           	psect	text41,local,class=CODE,merge=1,delta=2
   158                           	psect	text42,local,class=CODE,merge=1,delta=2,group=2
   159                           	psect	text43,local,class=CODE,merge=1,delta=2,group=2
   160                           	psect	text44,local,class=CODE,merge=1,delta=2
   161                           	psect	text45,local,class=CODE,merge=1,delta=2
   162                           	psect	text46,local,class=CODE,merge=1,delta=2
   163                           	psect	text47,local,class=CODE,merge=1,delta=2
   164                           	psect	text48,local,class=CODE,merge=1,delta=2
   165                           	psect	text49,local,class=CODE,merge=1,delta=2
   166                           	psect	text50,local,class=CODE,merge=1,delta=2
   167                           	psect	text51,local,class=CODE,merge=1,delta=2
   168                           	psect	text52,local,class=CODE,merge=1,delta=2
   169                           	psect	text53,local,class=CODE,merge=1,delta=2,group=2
   170                           	psect	text54,local,class=CODE,merge=1,delta=2,group=2
   171                           	psect	text55,local,class=CODE,merge=1,delta=2,group=2
   172                           	psect	text56,local,class=CODE,merge=1,delta=2
   173                           	psect	text57,local,class=CODE,merge=1,delta=2
   174                           	psect	text58,local,class=CODE,merge=1,delta=2
   175                           	psect	text59,local,class=CODE,merge=1,delta=2
   176                           	psect	text60,local,class=CODE,merge=1,delta=2
   177                           	psect	text61,local,class=CODE,merge=1,delta=2
   178                           	psect	text62,local,class=CODE,merge=1,delta=2
   179                           	psect	text63,local,class=CODE,merge=1,delta=2
   180                           	psect	text64,local,class=CODE,merge=1,delta=2
   181                           	psect	text65,local,class=CODE,merge=1,delta=2,group=2
   182                           	psect	text66,local,class=CODE,merge=1,delta=2
   183                           	psect	text67,local,class=CODE,merge=1,delta=2
   184                           	psect	text68,local,class=CODE,merge=1,delta=2
   185                           	psect	text69,local,class=CODE,merge=1,delta=2
   186                           	psect	text70,local,class=CODE,merge=1,delta=2
   187                           	psect	text71,local,class=CODE,merge=1,delta=2
   188                           	psect	text72,local,class=CODE,merge=1,delta=2
   189                           	psect	text73,local,class=CODE,merge=1,delta=2,group=2
   190                           	psect	text74,local,class=CODE,merge=1,delta=2,group=2
   191                           	psect	text75,local,class=CODE,merge=1,delta=2
   192                           	psect	text76,local,class=CODE,merge=1,delta=2
   193                           	psect	text77,local,class=CODE,merge=1,delta=2
   194                           	psect	text78,local,class=CODE,merge=1,delta=2
   195                           	psect	text79,local,class=CODE,merge=1,delta=2,group=2
   196                           	psect	text80,local,class=CODE,merge=1,delta=2
   197                           	psect	text81,local,class=CODE,merge=1,delta=2
   198                           	psect	text82,local,class=CODE,merge=1,delta=2
   199                           	psect	text83,local,class=CODE,merge=1,delta=2
   200                           	psect	text84,local,class=CODE,merge=1,delta=2
   201                           	psect	text85,local,class=CODE,merge=1,delta=2
   202                           	psect	text86,local,class=CODE,merge=1,delta=2
   203                           	psect	text87,local,class=CODE,merge=1,delta=2
   204                           	psect	text88,local,class=CODE,merge=1,delta=2
   205                           	psect	text89,local,class=CODE,merge=1,delta=2
   206                           	psect	text90,local,class=CODE,merge=1,delta=2
   207                           	psect	text91,local,class=CODE,merge=1,delta=2
   208                           	psect	text92,local,class=CODE,merge=1,delta=2
   209                           	psect	text93,local,class=CODE,merge=1,delta=2
   210                           	psect	text94,local,class=CODE,merge=1,delta=2
   211                           	psect	text95,local,class=CODE,merge=1,delta=2
   212                           	psect	text96,local,class=CODE,merge=1,delta=2
   213                           	psect	text97,local,class=CODE,merge=1,delta=2
   214                           	psect	text98,local,class=CODE,merge=1,delta=2
   215                           	psect	text99,local,class=CODE,merge=1,delta=2
   216                           	psect	text100,local,class=CODE,merge=1,delta=2
   217                           	psect	text101,local,class=CODE,merge=1,delta=2
   218                           	psect	text102,local,class=CODE,merge=1,delta=2
   219                           	psect	intentry,global,class=CODE,delta=2
   220                           	psect	text104,local,class=CODE,merge=1,delta=2
   221                           	psect	text105,local,class=CODE,merge=1,delta=2
   222                           	psect	text106,local,class=CODE,merge=1,delta=2
   223                           	dabs	1,0xCA0,32
   224                           	dabs	1,0xC20,80
   225                           	dabs	1,0xBA0,80
   226                           	dabs	1,0xB30,64
   227                           	dabs	1,0x26F0,0,_asciiCharTableLookup
   228                           	dabs	1,0x7E,2
   229  0000                     
   230                           ; Version 1.42
   231                           ; Generated 13/04/2017 GMT
   232                           ; 
   233                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   234                           ; All rights reserved.
   235                           ; 
   236                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   237                           ; 
   238                           ; Redistribution and use in source and binary forms, with or without modification, are
   239                           ; permitted provided that the following conditions are met:
   240                           ; 
   241                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   242                           ;        conditions and the following disclaimer.
   243                           ; 
   244                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   245                           ;        of conditions and the following disclaimer in the documentation and/or other
   246                           ;        materials provided with the distribution.
   247                           ; 
   248                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   249                           ;        software without specific prior written permission.
   250                           ; 
   251                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   252                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   253                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   254                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   255                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   256                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   257                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   258                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   259                           ; 
   260                           ; 
   261                           ; Code-generator required, PIC16LF18346 Definitions
   262                           ; 
   263                           ; SFR Addresses
   264  0000                     	;# 
   265  0001                     	;# 
   266  0002                     	;# 
   267  0003                     	;# 
   268  0004                     	;# 
   269  0005                     	;# 
   270  0006                     	;# 
   271  0007                     	;# 
   272  0008                     	;# 
   273  0009                     	;# 
   274  000A                     	;# 
   275  000B                     	;# 
   276  000C                     	;# 
   277  000D                     	;# 
   278  000E                     	;# 
   279  0010                     	;# 
   280  0011                     	;# 
   281  0012                     	;# 
   282  0013                     	;# 
   283  0014                     	;# 
   284  0015                     	;# 
   285  0015                     	;# 
   286  0016                     	;# 
   287  0016                     	;# 
   288  0017                     	;# 
   289  0018                     	;# 
   290  0019                     	;# 
   291  0019                     	;# 
   292  001A                     	;# 
   293  001B                     	;# 
   294  001C                     	;# 
   295  001D                     	;# 
   296  001E                     	;# 
   297  001F                     	;# 
   298  008C                     	;# 
   299  008D                     	;# 
   300  008E                     	;# 
   301  0090                     	;# 
   302  0091                     	;# 
   303  0092                     	;# 
   304  0093                     	;# 
   305  0094                     	;# 
   306  0097                     	;# 
   307  009B                     	;# 
   308  009B                     	;# 
   309  009C                     	;# 
   310  009D                     	;# 
   311  009E                     	;# 
   312  009F                     	;# 
   313  010C                     	;# 
   314  010D                     	;# 
   315  010E                     	;# 
   316  0111                     	;# 
   317  0112                     	;# 
   318  0113                     	;# 
   319  0114                     	;# 
   320  0115                     	;# 
   321  0116                     	;# 
   322  0117                     	;# 
   323  0118                     	;# 
   324  0119                     	;# 
   325  018C                     	;# 
   326  018D                     	;# 
   327  018E                     	;# 
   328  0199                     	;# 
   329  0199                     	;# 
   330  0199                     	;# 
   331  019A                     	;# 
   332  019A                     	;# 
   333  019A                     	;# 
   334  019B                     	;# 
   335  019B                     	;# 
   336  019B                     	;# 
   337  019B                     	;# 
   338  019B                     	;# 
   339  019C                     	;# 
   340  019C                     	;# 
   341  019C                     	;# 
   342  019D                     	;# 
   343  019D                     	;# 
   344  019D                     	;# 
   345  019E                     	;# 
   346  019E                     	;# 
   347  019E                     	;# 
   348  019F                     	;# 
   349  019F                     	;# 
   350  019F                     	;# 
   351  019F                     	;# 
   352  019F                     	;# 
   353  020C                     	;# 
   354  020D                     	;# 
   355  020E                     	;# 
   356  0211                     	;# 
   357  0211                     	;# 
   358  0212                     	;# 
   359  0212                     	;# 
   360  0213                     	;# 
   361  0213                     	;# 
   362  0214                     	;# 
   363  0214                     	;# 
   364  0215                     	;# 
   365  0215                     	;# 
   366  0215                     	;# 
   367  0215                     	;# 
   368  0216                     	;# 
   369  0216                     	;# 
   370  0217                     	;# 
   371  0217                     	;# 
   372  0219                     	;# 
   373  021A                     	;# 
   374  021B                     	;# 
   375  021C                     	;# 
   376  021D                     	;# 
   377  021D                     	;# 
   378  021E                     	;# 
   379  021F                     	;# 
   380  028C                     	;# 
   381  028D                     	;# 
   382  028E                     	;# 
   383  0291                     	;# 
   384  0291                     	;# 
   385  0292                     	;# 
   386  0293                     	;# 
   387  0294                     	;# 
   388  0295                     	;# 
   389  0295                     	;# 
   390  0296                     	;# 
   391  0297                     	;# 
   392  0298                     	;# 
   393  029F                     	;# 
   394  030C                     	;# 
   395  030D                     	;# 
   396  030E                     	;# 
   397  0311                     	;# 
   398  0311                     	;# 
   399  0312                     	;# 
   400  0313                     	;# 
   401  0314                     	;# 
   402  0315                     	;# 
   403  0315                     	;# 
   404  0316                     	;# 
   405  0317                     	;# 
   406  0318                     	;# 
   407  038C                     	;# 
   408  038D                     	;# 
   409  038E                     	;# 
   410  0391                     	;# 
   411  0392                     	;# 
   412  0393                     	;# 
   413  0394                     	;# 
   414  0395                     	;# 
   415  0396                     	;# 
   416  0397                     	;# 
   417  0398                     	;# 
   418  0399                     	;# 
   419  039A                     	;# 
   420  039C                     	;# 
   421  039D                     	;# 
   422  039E                     	;# 
   423  039F                     	;# 
   424  0411                     	;# 
   425  0411                     	;# 
   426  0412                     	;# 
   427  0413                     	;# 
   428  0414                     	;# 
   429  0415                     	;# 
   430  0416                     	;# 
   431  0417                     	;# 
   432  0418                     	;# 
   433  0418                     	;# 
   434  0419                     	;# 
   435  041A                     	;# 
   436  041B                     	;# 
   437  041C                     	;# 
   438  041D                     	;# 
   439  041E                     	;# 
   440  041F                     	;# 
   441  0498                     	;# 
   442  0498                     	;# 
   443  0499                     	;# 
   444  049A                     	;# 
   445  049B                     	;# 
   446  049B                     	;# 
   447  049C                     	;# 
   448  049D                     	;# 
   449  049E                     	;# 
   450  049F                     	;# 
   451  0617                     	;# 
   452  0618                     	;# 
   453  0619                     	;# 
   454  0619                     	;# 
   455  061A                     	;# 
   456  061B                     	;# 
   457  061C                     	;# 
   458  061C                     	;# 
   459  061F                     	;# 
   460  0691                     	;# 
   461  0692                     	;# 
   462  0693                     	;# 
   463  0694                     	;# 
   464  0695                     	;# 
   465  0696                     	;# 
   466  0697                     	;# 
   467  0698                     	;# 
   468  0699                     	;# 
   469  0711                     	;# 
   470  0712                     	;# 
   471  0713                     	;# 
   472  0714                     	;# 
   473  0715                     	;# 
   474  0716                     	;# 
   475  0717                     	;# 
   476  0718                     	;# 
   477  0719                     	;# 
   478  0891                     	;# 
   479  0891                     	;# 
   480  0891                     	;# 
   481  0891                     	;# 
   482  0891                     	;# 
   483  0891                     	;# 
   484  0892                     	;# 
   485  0892                     	;# 
   486  0892                     	;# 
   487  0893                     	;# 
   488  0893                     	;# 
   489  0893                     	;# 
   490  0893                     	;# 
   491  0893                     	;# 
   492  0893                     	;# 
   493  0894                     	;# 
   494  0894                     	;# 
   495  0894                     	;# 
   496  0895                     	;# 
   497  0895                     	;# 
   498  0895                     	;# 
   499  0896                     	;# 
   500  0896                     	;# 
   501  0896                     	;# 
   502  089B                     	;# 
   503  0911                     	;# 
   504  0912                     	;# 
   505  0913                     	;# 
   506  0914                     	;# 
   507  0915                     	;# 
   508  0916                     	;# 
   509  0918                     	;# 
   510  0919                     	;# 
   511  091A                     	;# 
   512  091B                     	;# 
   513  091C                     	;# 
   514  091D                     	;# 
   515  091E                     	;# 
   516  091F                     	;# 
   517  0E0F                     	;# 
   518  0E10                     	;# 
   519  0E11                     	;# 
   520  0E12                     	;# 
   521  0E13                     	;# 
   522  0E14                     	;# 
   523  0E15                     	;# 
   524  0E16                     	;# 
   525  0E17                     	;# 
   526  0E18                     	;# 
   527  0E19                     	;# 
   528  0E1A                     	;# 
   529  0E1B                     	;# 
   530  0E1C                     	;# 
   531  0E1D                     	;# 
   532  0E1E                     	;# 
   533  0E1F                     	;# 
   534  0E20                     	;# 
   535  0E21                     	;# 
   536  0E22                     	;# 
   537  0E24                     	;# 
   538  0E25                     	;# 
   539  0E28                     	;# 
   540  0E29                     	;# 
   541  0E2A                     	;# 
   542  0E2B                     	;# 
   543  0E2C                     	;# 
   544  0E2D                     	;# 
   545  0E2E                     	;# 
   546  0E2F                     	;# 
   547  0E90                     	;# 
   548  0E91                     	;# 
   549  0E92                     	;# 
   550  0E94                     	;# 
   551  0E95                     	;# 
   552  0E9C                     	;# 
   553  0E9D                     	;# 
   554  0E9E                     	;# 
   555  0E9F                     	;# 
   556  0EA0                     	;# 
   557  0EA1                     	;# 
   558  0EA2                     	;# 
   559  0EA3                     	;# 
   560  0EA4                     	;# 
   561  0EA5                     	;# 
   562  0EA6                     	;# 
   563  0EA7                     	;# 
   564  0F0F                     	;# 
   565  0F10                     	;# 
   566  0F11                     	;# 
   567  0F12                     	;# 
   568  0F13                     	;# 
   569  0F14                     	;# 
   570  0F15                     	;# 
   571  0F16                     	;# 
   572  0F17                     	;# 
   573  0F18                     	;# 
   574  0F19                     	;# 
   575  0F1A                     	;# 
   576  0F1B                     	;# 
   577  0F1C                     	;# 
   578  0F1D                     	;# 
   579  0F1E                     	;# 
   580  0F1F                     	;# 
   581  0F20                     	;# 
   582  0F21                     	;# 
   583  0F22                     	;# 
   584  0F23                     	;# 
   585  0F24                     	;# 
   586  0F25                     	;# 
   587  0F26                     	;# 
   588  0F27                     	;# 
   589  0F28                     	;# 
   590  0F29                     	;# 
   591  0F2A                     	;# 
   592  0F2B                     	;# 
   593  0F2C                     	;# 
   594  0F2D                     	;# 
   595  0F2E                     	;# 
   596  0F2F                     	;# 
   597  0F30                     	;# 
   598  0F31                     	;# 
   599  0F32                     	;# 
   600  0F33                     	;# 
   601  0F34                     	;# 
   602  0F35                     	;# 
   603  0F36                     	;# 
   604  0F37                     	;# 
   605  0FE4                     	;# 
   606  0FE5                     	;# 
   607  0FE6                     	;# 
   608  0FE7                     	;# 
   609  0FE8                     	;# 
   610  0FE9                     	;# 
   611  0FEA                     	;# 
   612  0FEB                     	;# 
   613  0FED                     	;# 
   614  0FEE                     	;# 
   615  0FEF                     	;# 
   616  0000                     	;# 
   617  0001                     	;# 
   618  0002                     	;# 
   619  0003                     	;# 
   620  0004                     	;# 
   621  0005                     	;# 
   622  0006                     	;# 
   623  0007                     	;# 
   624  0008                     	;# 
   625  0009                     	;# 
   626  000A                     	;# 
   627  000B                     	;# 
   628  000C                     	;# 
   629  000D                     	;# 
   630  000E                     	;# 
   631  0010                     	;# 
   632  0011                     	;# 
   633  0012                     	;# 
   634  0013                     	;# 
   635  0014                     	;# 
   636  0015                     	;# 
   637  0015                     	;# 
   638  0016                     	;# 
   639  0016                     	;# 
   640  0017                     	;# 
   641  0018                     	;# 
   642  0019                     	;# 
   643  0019                     	;# 
   644  001A                     	;# 
   645  001B                     	;# 
   646  001C                     	;# 
   647  001D                     	;# 
   648  001E                     	;# 
   649  001F                     	;# 
   650  008C                     	;# 
   651  008D                     	;# 
   652  008E                     	;# 
   653  0090                     	;# 
   654  0091                     	;# 
   655  0092                     	;# 
   656  0093                     	;# 
   657  0094                     	;# 
   658  0097                     	;# 
   659  009B                     	;# 
   660  009B                     	;# 
   661  009C                     	;# 
   662  009D                     	;# 
   663  009E                     	;# 
   664  009F                     	;# 
   665  010C                     	;# 
   666  010D                     	;# 
   667  010E                     	;# 
   668  0111                     	;# 
   669  0112                     	;# 
   670  0113                     	;# 
   671  0114                     	;# 
   672  0115                     	;# 
   673  0116                     	;# 
   674  0117                     	;# 
   675  0118                     	;# 
   676  0119                     	;# 
   677  018C                     	;# 
   678  018D                     	;# 
   679  018E                     	;# 
   680  0199                     	;# 
   681  0199                     	;# 
   682  0199                     	;# 
   683  019A                     	;# 
   684  019A                     	;# 
   685  019A                     	;# 
   686  019B                     	;# 
   687  019B                     	;# 
   688  019B                     	;# 
   689  019B                     	;# 
   690  019B                     	;# 
   691  019C                     	;# 
   692  019C                     	;# 
   693  019C                     	;# 
   694  019D                     	;# 
   695  019D                     	;# 
   696  019D                     	;# 
   697  019E                     	;# 
   698  019E                     	;# 
   699  019E                     	;# 
   700  019F                     	;# 
   701  019F                     	;# 
   702  019F                     	;# 
   703  019F                     	;# 
   704  019F                     	;# 
   705  020C                     	;# 
   706  020D                     	;# 
   707  020E                     	;# 
   708  0211                     	;# 
   709  0211                     	;# 
   710  0212                     	;# 
   711  0212                     	;# 
   712  0213                     	;# 
   713  0213                     	;# 
   714  0214                     	;# 
   715  0214                     	;# 
   716  0215                     	;# 
   717  0215                     	;# 
   718  0215                     	;# 
   719  0215                     	;# 
   720  0216                     	;# 
   721  0216                     	;# 
   722  0217                     	;# 
   723  0217                     	;# 
   724  0219                     	;# 
   725  021A                     	;# 
   726  021B                     	;# 
   727  021C                     	;# 
   728  021D                     	;# 
   729  021D                     	;# 
   730  021E                     	;# 
   731  021F                     	;# 
   732  028C                     	;# 
   733  028D                     	;# 
   734  028E                     	;# 
   735  0291                     	;# 
   736  0291                     	;# 
   737  0292                     	;# 
   738  0293                     	;# 
   739  0294                     	;# 
   740  0295                     	;# 
   741  0295                     	;# 
   742  0296                     	;# 
   743  0297                     	;# 
   744  0298                     	;# 
   745  029F                     	;# 
   746  030C                     	;# 
   747  030D                     	;# 
   748  030E                     	;# 
   749  0311                     	;# 
   750  0311                     	;# 
   751  0312                     	;# 
   752  0313                     	;# 
   753  0314                     	;# 
   754  0315                     	;# 
   755  0315                     	;# 
   756  0316                     	;# 
   757  0317                     	;# 
   758  0318                     	;# 
   759  038C                     	;# 
   760  038D                     	;# 
   761  038E                     	;# 
   762  0391                     	;# 
   763  0392                     	;# 
   764  0393                     	;# 
   765  0394                     	;# 
   766  0395                     	;# 
   767  0396                     	;# 
   768  0397                     	;# 
   769  0398                     	;# 
   770  0399                     	;# 
   771  039A                     	;# 
   772  039C                     	;# 
   773  039D                     	;# 
   774  039E                     	;# 
   775  039F                     	;# 
   776  0411                     	;# 
   777  0411                     	;# 
   778  0412                     	;# 
   779  0413                     	;# 
   780  0414                     	;# 
   781  0415                     	;# 
   782  0416                     	;# 
   783  0417                     	;# 
   784  0418                     	;# 
   785  0418                     	;# 
   786  0419                     	;# 
   787  041A                     	;# 
   788  041B                     	;# 
   789  041C                     	;# 
   790  041D                     	;# 
   791  041E                     	;# 
   792  041F                     	;# 
   793  0498                     	;# 
   794  0498                     	;# 
   795  0499                     	;# 
   796  049A                     	;# 
   797  049B                     	;# 
   798  049B                     	;# 
   799  049C                     	;# 
   800  049D                     	;# 
   801  049E                     	;# 
   802  049F                     	;# 
   803  0617                     	;# 
   804  0618                     	;# 
   805  0619                     	;# 
   806  0619                     	;# 
   807  061A                     	;# 
   808  061B                     	;# 
   809  061C                     	;# 
   810  061C                     	;# 
   811  061F                     	;# 
   812  0691                     	;# 
   813  0692                     	;# 
   814  0693                     	;# 
   815  0694                     	;# 
   816  0695                     	;# 
   817  0696                     	;# 
   818  0697                     	;# 
   819  0698                     	;# 
   820  0699                     	;# 
   821  0711                     	;# 
   822  0712                     	;# 
   823  0713                     	;# 
   824  0714                     	;# 
   825  0715                     	;# 
   826  0716                     	;# 
   827  0717                     	;# 
   828  0718                     	;# 
   829  0719                     	;# 
   830  0891                     	;# 
   831  0891                     	;# 
   832  0891                     	;# 
   833  0891                     	;# 
   834  0891                     	;# 
   835  0891                     	;# 
   836  0892                     	;# 
   837  0892                     	;# 
   838  0892                     	;# 
   839  0893                     	;# 
   840  0893                     	;# 
   841  0893                     	;# 
   842  0893                     	;# 
   843  0893                     	;# 
   844  0893                     	;# 
   845  0894                     	;# 
   846  0894                     	;# 
   847  0894                     	;# 
   848  0895                     	;# 
   849  0895                     	;# 
   850  0895                     	;# 
   851  0896                     	;# 
   852  0896                     	;# 
   853  0896                     	;# 
   854  089B                     	;# 
   855  0911                     	;# 
   856  0912                     	;# 
   857  0913                     	;# 
   858  0914                     	;# 
   859  0915                     	;# 
   860  0916                     	;# 
   861  0918                     	;# 
   862  0919                     	;# 
   863  091A                     	;# 
   864  091B                     	;# 
   865  091C                     	;# 
   866  091D                     	;# 
   867  091E                     	;# 
   868  091F                     	;# 
   869  0E0F                     	;# 
   870  0E10                     	;# 
   871  0E11                     	;# 
   872  0E12                     	;# 
   873  0E13                     	;# 
   874  0E14                     	;# 
   875  0E15                     	;# 
   876  0E16                     	;# 
   877  0E17                     	;# 
   878  0E18                     	;# 
   879  0E19                     	;# 
   880  0E1A                     	;# 
   881  0E1B                     	;# 
   882  0E1C                     	;# 
   883  0E1D                     	;# 
   884  0E1E                     	;# 
   885  0E1F                     	;# 
   886  0E20                     	;# 
   887  0E21                     	;# 
   888  0E22                     	;# 
   889  0E24                     	;# 
   890  0E25                     	;# 
   891  0E28                     	;# 
   892  0E29                     	;# 
   893  0E2A                     	;# 
   894  0E2B                     	;# 
   895  0E2C                     	;# 
   896  0E2D                     	;# 
   897  0E2E                     	;# 
   898  0E2F                     	;# 
   899  0E90                     	;# 
   900  0E91                     	;# 
   901  0E92                     	;# 
   902  0E94                     	;# 
   903  0E95                     	;# 
   904  0E9C                     	;# 
   905  0E9D                     	;# 
   906  0E9E                     	;# 
   907  0E9F                     	;# 
   908  0EA0                     	;# 
   909  0EA1                     	;# 
   910  0EA2                     	;# 
   911  0EA3                     	;# 
   912  0EA4                     	;# 
   913  0EA5                     	;# 
   914  0EA6                     	;# 
   915  0EA7                     	;# 
   916  0F0F                     	;# 
   917  0F10                     	;# 
   918  0F11                     	;# 
   919  0F12                     	;# 
   920  0F13                     	;# 
   921  0F14                     	;# 
   922  0F15                     	;# 
   923  0F16                     	;# 
   924  0F17                     	;# 
   925  0F18                     	;# 
   926  0F19                     	;# 
   927  0F1A                     	;# 
   928  0F1B                     	;# 
   929  0F1C                     	;# 
   930  0F1D                     	;# 
   931  0F1E                     	;# 
   932  0F1F                     	;# 
   933  0F20                     	;# 
   934  0F21                     	;# 
   935  0F22                     	;# 
   936  0F23                     	;# 
   937  0F24                     	;# 
   938  0F25                     	;# 
   939  0F26                     	;# 
   940  0F27                     	;# 
   941  0F28                     	;# 
   942  0F29                     	;# 
   943  0F2A                     	;# 
   944  0F2B                     	;# 
   945  0F2C                     	;# 
   946  0F2D                     	;# 
   947  0F2E                     	;# 
   948  0F2F                     	;# 
   949  0F30                     	;# 
   950  0F31                     	;# 
   951  0F32                     	;# 
   952  0F33                     	;# 
   953  0F34                     	;# 
   954  0F35                     	;# 
   955  0F36                     	;# 
   956  0F37                     	;# 
   957  0FE4                     	;# 
   958  0FE5                     	;# 
   959  0FE6                     	;# 
   960  0FE7                     	;# 
   961  0FE8                     	;# 
   962  0FE9                     	;# 
   963  0FEA                     	;# 
   964  0FEB                     	;# 
   965  0FED                     	;# 
   966  0FEE                     	;# 
   967  0FEF                     	;# 
   968  0000                     	;# 
   969  0001                     	;# 
   970  0002                     	;# 
   971  0003                     	;# 
   972  0004                     	;# 
   973  0005                     	;# 
   974  0006                     	;# 
   975  0007                     	;# 
   976  0008                     	;# 
   977  0009                     	;# 
   978  000A                     	;# 
   979  000B                     	;# 
   980  000C                     	;# 
   981  000D                     	;# 
   982  000E                     	;# 
   983  0010                     	;# 
   984  0011                     	;# 
   985  0012                     	;# 
   986  0013                     	;# 
   987  0014                     	;# 
   988  0015                     	;# 
   989  0015                     	;# 
   990  0016                     	;# 
   991  0016                     	;# 
   992  0017                     	;# 
   993  0018                     	;# 
   994  0019                     	;# 
   995  0019                     	;# 
   996  001A                     	;# 
   997  001B                     	;# 
   998  001C                     	;# 
   999  001D                     	;# 
  1000  001E                     	;# 
  1001  001F                     	;# 
  1002  008C                     	;# 
  1003  008D                     	;# 
  1004  008E                     	;# 
  1005  0090                     	;# 
  1006  0091                     	;# 
  1007  0092                     	;# 
  1008  0093                     	;# 
  1009  0094                     	;# 
  1010  0097                     	;# 
  1011  009B                     	;# 
  1012  009B                     	;# 
  1013  009C                     	;# 
  1014  009D                     	;# 
  1015  009E                     	;# 
  1016  009F                     	;# 
  1017  010C                     	;# 
  1018  010D                     	;# 
  1019  010E                     	;# 
  1020  0111                     	;# 
  1021  0112                     	;# 
  1022  0113                     	;# 
  1023  0114                     	;# 
  1024  0115                     	;# 
  1025  0116                     	;# 
  1026  0117                     	;# 
  1027  0118                     	;# 
  1028  0119                     	;# 
  1029  018C                     	;# 
  1030  018D                     	;# 
  1031  018E                     	;# 
  1032  0199                     	;# 
  1033  0199                     	;# 
  1034  0199                     	;# 
  1035  019A                     	;# 
  1036  019A                     	;# 
  1037  019A                     	;# 
  1038  019B                     	;# 
  1039  019B                     	;# 
  1040  019B                     	;# 
  1041  019B                     	;# 
  1042  019B                     	;# 
  1043  019C                     	;# 
  1044  019C                     	;# 
  1045  019C                     	;# 
  1046  019D                     	;# 
  1047  019D                     	;# 
  1048  019D                     	;# 
  1049  019E                     	;# 
  1050  019E                     	;# 
  1051  019E                     	;# 
  1052  019F                     	;# 
  1053  019F                     	;# 
  1054  019F                     	;# 
  1055  019F                     	;# 
  1056  019F                     	;# 
  1057  020C                     	;# 
  1058  020D                     	;# 
  1059  020E                     	;# 
  1060  0211                     	;# 
  1061  0211                     	;# 
  1062  0212                     	;# 
  1063  0212                     	;# 
  1064  0213                     	;# 
  1065  0213                     	;# 
  1066  0214                     	;# 
  1067  0214                     	;# 
  1068  0215                     	;# 
  1069  0215                     	;# 
  1070  0215                     	;# 
  1071  0215                     	;# 
  1072  0216                     	;# 
  1073  0216                     	;# 
  1074  0217                     	;# 
  1075  0217                     	;# 
  1076  0219                     	;# 
  1077  021A                     	;# 
  1078  021B                     	;# 
  1079  021C                     	;# 
  1080  021D                     	;# 
  1081  021D                     	;# 
  1082  021E                     	;# 
  1083  021F                     	;# 
  1084  028C                     	;# 
  1085  028D                     	;# 
  1086  028E                     	;# 
  1087  0291                     	;# 
  1088  0291                     	;# 
  1089  0292                     	;# 
  1090  0293                     	;# 
  1091  0294                     	;# 
  1092  0295                     	;# 
  1093  0295                     	;# 
  1094  0296                     	;# 
  1095  0297                     	;# 
  1096  0298                     	;# 
  1097  029F                     	;# 
  1098  030C                     	;# 
  1099  030D                     	;# 
  1100  030E                     	;# 
  1101  0311                     	;# 
  1102  0311                     	;# 
  1103  0312                     	;# 
  1104  0313                     	;# 
  1105  0314                     	;# 
  1106  0315                     	;# 
  1107  0315                     	;# 
  1108  0316                     	;# 
  1109  0317                     	;# 
  1110  0318                     	;# 
  1111  038C                     	;# 
  1112  038D                     	;# 
  1113  038E                     	;# 
  1114  0391                     	;# 
  1115  0392                     	;# 
  1116  0393                     	;# 
  1117  0394                     	;# 
  1118  0395                     	;# 
  1119  0396                     	;# 
  1120  0397                     	;# 
  1121  0398                     	;# 
  1122  0399                     	;# 
  1123  039A                     	;# 
  1124  039C                     	;# 
  1125  039D                     	;# 
  1126  039E                     	;# 
  1127  039F                     	;# 
  1128  0411                     	;# 
  1129  0411                     	;# 
  1130  0412                     	;# 
  1131  0413                     	;# 
  1132  0414                     	;# 
  1133  0415                     	;# 
  1134  0416                     	;# 
  1135  0417                     	;# 
  1136  0418                     	;# 
  1137  0418                     	;# 
  1138  0419                     	;# 
  1139  041A                     	;# 
  1140  041B                     	;# 
  1141  041C                     	;# 
  1142  041D                     	;# 
  1143  041E                     	;# 
  1144  041F                     	;# 
  1145  0498                     	;# 
  1146  0498                     	;# 
  1147  0499                     	;# 
  1148  049A                     	;# 
  1149  049B                     	;# 
  1150  049B                     	;# 
  1151  049C                     	;# 
  1152  049D                     	;# 
  1153  049E                     	;# 
  1154  049F                     	;# 
  1155  0617                     	;# 
  1156  0618                     	;# 
  1157  0619                     	;# 
  1158  0619                     	;# 
  1159  061A                     	;# 
  1160  061B                     	;# 
  1161  061C                     	;# 
  1162  061C                     	;# 
  1163  061F                     	;# 
  1164  0691                     	;# 
  1165  0692                     	;# 
  1166  0693                     	;# 
  1167  0694                     	;# 
  1168  0695                     	;# 
  1169  0696                     	;# 
  1170  0697                     	;# 
  1171  0698                     	;# 
  1172  0699                     	;# 
  1173  0711                     	;# 
  1174  0712                     	;# 
  1175  0713                     	;# 
  1176  0714                     	;# 
  1177  0715                     	;# 
  1178  0716                     	;# 
  1179  0717                     	;# 
  1180  0718                     	;# 
  1181  0719                     	;# 
  1182  0891                     	;# 
  1183  0891                     	;# 
  1184  0891                     	;# 
  1185  0891                     	;# 
  1186  0891                     	;# 
  1187  0891                     	;# 
  1188  0892                     	;# 
  1189  0892                     	;# 
  1190  0892                     	;# 
  1191  0893                     	;# 
  1192  0893                     	;# 
  1193  0893                     	;# 
  1194  0893                     	;# 
  1195  0893                     	;# 
  1196  0893                     	;# 
  1197  0894                     	;# 
  1198  0894                     	;# 
  1199  0894                     	;# 
  1200  0895                     	;# 
  1201  0895                     	;# 
  1202  0895                     	;# 
  1203  0896                     	;# 
  1204  0896                     	;# 
  1205  0896                     	;# 
  1206  089B                     	;# 
  1207  0911                     	;# 
  1208  0912                     	;# 
  1209  0913                     	;# 
  1210  0914                     	;# 
  1211  0915                     	;# 
  1212  0916                     	;# 
  1213  0918                     	;# 
  1214  0919                     	;# 
  1215  091A                     	;# 
  1216  091B                     	;# 
  1217  091C                     	;# 
  1218  091D                     	;# 
  1219  091E                     	;# 
  1220  091F                     	;# 
  1221  0E0F                     	;# 
  1222  0E10                     	;# 
  1223  0E11                     	;# 
  1224  0E12                     	;# 
  1225  0E13                     	;# 
  1226  0E14                     	;# 
  1227  0E15                     	;# 
  1228  0E16                     	;# 
  1229  0E17                     	;# 
  1230  0E18                     	;# 
  1231  0E19                     	;# 
  1232  0E1A                     	;# 
  1233  0E1B                     	;# 
  1234  0E1C                     	;# 
  1235  0E1D                     	;# 
  1236  0E1E                     	;# 
  1237  0E1F                     	;# 
  1238  0E20                     	;# 
  1239  0E21                     	;# 
  1240  0E22                     	;# 
  1241  0E24                     	;# 
  1242  0E25                     	;# 
  1243  0E28                     	;# 
  1244  0E29                     	;# 
  1245  0E2A                     	;# 
  1246  0E2B                     	;# 
  1247  0E2C                     	;# 
  1248  0E2D                     	;# 
  1249  0E2E                     	;# 
  1250  0E2F                     	;# 
  1251  0E90                     	;# 
  1252  0E91                     	;# 
  1253  0E92                     	;# 
  1254  0E94                     	;# 
  1255  0E95                     	;# 
  1256  0E9C                     	;# 
  1257  0E9D                     	;# 
  1258  0E9E                     	;# 
  1259  0E9F                     	;# 
  1260  0EA0                     	;# 
  1261  0EA1                     	;# 
  1262  0EA2                     	;# 
  1263  0EA3                     	;# 
  1264  0EA4                     	;# 
  1265  0EA5                     	;# 
  1266  0EA6                     	;# 
  1267  0EA7                     	;# 
  1268  0F0F                     	;# 
  1269  0F10                     	;# 
  1270  0F11                     	;# 
  1271  0F12                     	;# 
  1272  0F13                     	;# 
  1273  0F14                     	;# 
  1274  0F15                     	;# 
  1275  0F16                     	;# 
  1276  0F17                     	;# 
  1277  0F18                     	;# 
  1278  0F19                     	;# 
  1279  0F1A                     	;# 
  1280  0F1B                     	;# 
  1281  0F1C                     	;# 
  1282  0F1D                     	;# 
  1283  0F1E                     	;# 
  1284  0F1F                     	;# 
  1285  0F20                     	;# 
  1286  0F21                     	;# 
  1287  0F22                     	;# 
  1288  0F23                     	;# 
  1289  0F24                     	;# 
  1290  0F25                     	;# 
  1291  0F26                     	;# 
  1292  0F27                     	;# 
  1293  0F28                     	;# 
  1294  0F29                     	;# 
  1295  0F2A                     	;# 
  1296  0F2B                     	;# 
  1297  0F2C                     	;# 
  1298  0F2D                     	;# 
  1299  0F2E                     	;# 
  1300  0F2F                     	;# 
  1301  0F30                     	;# 
  1302  0F31                     	;# 
  1303  0F32                     	;# 
  1304  0F33                     	;# 
  1305  0F34                     	;# 
  1306  0F35                     	;# 
  1307  0F36                     	;# 
  1308  0F37                     	;# 
  1309  0FE4                     	;# 
  1310  0FE5                     	;# 
  1311  0FE6                     	;# 
  1312  0FE7                     	;# 
  1313  0FE8                     	;# 
  1314  0FE9                     	;# 
  1315  0FEA                     	;# 
  1316  0FEB                     	;# 
  1317  0FED                     	;# 
  1318  0FEE                     	;# 
  1319  0FEF                     	;# 
  1320  0000                     	;# 
  1321  0001                     	;# 
  1322  0002                     	;# 
  1323  0003                     	;# 
  1324  0004                     	;# 
  1325  0005                     	;# 
  1326  0006                     	;# 
  1327  0007                     	;# 
  1328  0008                     	;# 
  1329  0009                     	;# 
  1330  000A                     	;# 
  1331  000B                     	;# 
  1332  000C                     	;# 
  1333  000D                     	;# 
  1334  000E                     	;# 
  1335  0010                     	;# 
  1336  0011                     	;# 
  1337  0012                     	;# 
  1338  0013                     	;# 
  1339  0014                     	;# 
  1340  0015                     	;# 
  1341  0015                     	;# 
  1342  0016                     	;# 
  1343  0016                     	;# 
  1344  0017                     	;# 
  1345  0018                     	;# 
  1346  0019                     	;# 
  1347  0019                     	;# 
  1348  001A                     	;# 
  1349  001B                     	;# 
  1350  001C                     	;# 
  1351  001D                     	;# 
  1352  001E                     	;# 
  1353  001F                     	;# 
  1354  008C                     	;# 
  1355  008D                     	;# 
  1356  008E                     	;# 
  1357  0090                     	;# 
  1358  0091                     	;# 
  1359  0092                     	;# 
  1360  0093                     	;# 
  1361  0094                     	;# 
  1362  0097                     	;# 
  1363  009B                     	;# 
  1364  009B                     	;# 
  1365  009C                     	;# 
  1366  009D                     	;# 
  1367  009E                     	;# 
  1368  009F                     	;# 
  1369  010C                     	;# 
  1370  010D                     	;# 
  1371  010E                     	;# 
  1372  0111                     	;# 
  1373  0112                     	;# 
  1374  0113                     	;# 
  1375  0114                     	;# 
  1376  0115                     	;# 
  1377  0116                     	;# 
  1378  0117                     	;# 
  1379  0118                     	;# 
  1380  0119                     	;# 
  1381  018C                     	;# 
  1382  018D                     	;# 
  1383  018E                     	;# 
  1384  0199                     	;# 
  1385  0199                     	;# 
  1386  0199                     	;# 
  1387  019A                     	;# 
  1388  019A                     	;# 
  1389  019A                     	;# 
  1390  019B                     	;# 
  1391  019B                     	;# 
  1392  019B                     	;# 
  1393  019B                     	;# 
  1394  019B                     	;# 
  1395  019C                     	;# 
  1396  019C                     	;# 
  1397  019C                     	;# 
  1398  019D                     	;# 
  1399  019D                     	;# 
  1400  019D                     	;# 
  1401  019E                     	;# 
  1402  019E                     	;# 
  1403  019E                     	;# 
  1404  019F                     	;# 
  1405  019F                     	;# 
  1406  019F                     	;# 
  1407  019F                     	;# 
  1408  019F                     	;# 
  1409  020C                     	;# 
  1410  020D                     	;# 
  1411  020E                     	;# 
  1412  0211                     	;# 
  1413  0211                     	;# 
  1414  0212                     	;# 
  1415  0212                     	;# 
  1416  0213                     	;# 
  1417  0213                     	;# 
  1418  0214                     	;# 
  1419  0214                     	;# 
  1420  0215                     	;# 
  1421  0215                     	;# 
  1422  0215                     	;# 
  1423  0215                     	;# 
  1424  0216                     	;# 
  1425  0216                     	;# 
  1426  0217                     	;# 
  1427  0217                     	;# 
  1428  0219                     	;# 
  1429  021A                     	;# 
  1430  021B                     	;# 
  1431  021C                     	;# 
  1432  021D                     	;# 
  1433  021D                     	;# 
  1434  021E                     	;# 
  1435  021F                     	;# 
  1436  028C                     	;# 
  1437  028D                     	;# 
  1438  028E                     	;# 
  1439  0291                     	;# 
  1440  0291                     	;# 
  1441  0292                     	;# 
  1442  0293                     	;# 
  1443  0294                     	;# 
  1444  0295                     	;# 
  1445  0295                     	;# 
  1446  0296                     	;# 
  1447  0297                     	;# 
  1448  0298                     	;# 
  1449  029F                     	;# 
  1450  030C                     	;# 
  1451  030D                     	;# 
  1452  030E                     	;# 
  1453  0311                     	;# 
  1454  0311                     	;# 
  1455  0312                     	;# 
  1456  0313                     	;# 
  1457  0314                     	;# 
  1458  0315                     	;# 
  1459  0315                     	;# 
  1460  0316                     	;# 
  1461  0317                     	;# 
  1462  0318                     	;# 
  1463  038C                     	;# 
  1464  038D                     	;# 
  1465  038E                     	;# 
  1466  0391                     	;# 
  1467  0392                     	;# 
  1468  0393                     	;# 
  1469  0394                     	;# 
  1470  0395                     	;# 
  1471  0396                     	;# 
  1472  0397                     	;# 
  1473  0398                     	;# 
  1474  0399                     	;# 
  1475  039A                     	;# 
  1476  039C                     	;# 
  1477  039D                     	;# 
  1478  039E                     	;# 
  1479  039F                     	;# 
  1480  0411                     	;# 
  1481  0411                     	;# 
  1482  0412                     	;# 
  1483  0413                     	;# 
  1484  0414                     	;# 
  1485  0415                     	;# 
  1486  0416                     	;# 
  1487  0417                     	;# 
  1488  0418                     	;# 
  1489  0418                     	;# 
  1490  0419                     	;# 
  1491  041A                     	;# 
  1492  041B                     	;# 
  1493  041C                     	;# 
  1494  041D                     	;# 
  1495  041E                     	;# 
  1496  041F                     	;# 
  1497  0498                     	;# 
  1498  0498                     	;# 
  1499  0499                     	;# 
  1500  049A                     	;# 
  1501  049B                     	;# 
  1502  049B                     	;# 
  1503  049C                     	;# 
  1504  049D                     	;# 
  1505  049E                     	;# 
  1506  049F                     	;# 
  1507  0617                     	;# 
  1508  0618                     	;# 
  1509  0619                     	;# 
  1510  0619                     	;# 
  1511  061A                     	;# 
  1512  061B                     	;# 
  1513  061C                     	;# 
  1514  061C                     	;# 
  1515  061F                     	;# 
  1516  0691                     	;# 
  1517  0692                     	;# 
  1518  0693                     	;# 
  1519  0694                     	;# 
  1520  0695                     	;# 
  1521  0696                     	;# 
  1522  0697                     	;# 
  1523  0698                     	;# 
  1524  0699                     	;# 
  1525  0711                     	;# 
  1526  0712                     	;# 
  1527  0713                     	;# 
  1528  0714                     	;# 
  1529  0715                     	;# 
  1530  0716                     	;# 
  1531  0717                     	;# 
  1532  0718                     	;# 
  1533  0719                     	;# 
  1534  0891                     	;# 
  1535  0891                     	;# 
  1536  0891                     	;# 
  1537  0891                     	;# 
  1538  0891                     	;# 
  1539  0891                     	;# 
  1540  0892                     	;# 
  1541  0892                     	;# 
  1542  0892                     	;# 
  1543  0893                     	;# 
  1544  0893                     	;# 
  1545  0893                     	;# 
  1546  0893                     	;# 
  1547  0893                     	;# 
  1548  0893                     	;# 
  1549  0894                     	;# 
  1550  0894                     	;# 
  1551  0894                     	;# 
  1552  0895                     	;# 
  1553  0895                     	;# 
  1554  0895                     	;# 
  1555  0896                     	;# 
  1556  0896                     	;# 
  1557  0896                     	;# 
  1558  089B                     	;# 
  1559  0911                     	;# 
  1560  0912                     	;# 
  1561  0913                     	;# 
  1562  0914                     	;# 
  1563  0915                     	;# 
  1564  0916                     	;# 
  1565  0918                     	;# 
  1566  0919                     	;# 
  1567  091A                     	;# 
  1568  091B                     	;# 
  1569  091C                     	;# 
  1570  091D                     	;# 
  1571  091E                     	;# 
  1572  091F                     	;# 
  1573  0E0F                     	;# 
  1574  0E10                     	;# 
  1575  0E11                     	;# 
  1576  0E12                     	;# 
  1577  0E13                     	;# 
  1578  0E14                     	;# 
  1579  0E15                     	;# 
  1580  0E16                     	;# 
  1581  0E17                     	;# 
  1582  0E18                     	;# 
  1583  0E19                     	;# 
  1584  0E1A                     	;# 
  1585  0E1B                     	;# 
  1586  0E1C                     	;# 
  1587  0E1D                     	;# 
  1588  0E1E                     	;# 
  1589  0E1F                     	;# 
  1590  0E20                     	;# 
  1591  0E21                     	;# 
  1592  0E22                     	;# 
  1593  0E24                     	;# 
  1594  0E25                     	;# 
  1595  0E28                     	;# 
  1596  0E29                     	;# 
  1597  0E2A                     	;# 
  1598  0E2B                     	;# 
  1599  0E2C                     	;# 
  1600  0E2D                     	;# 
  1601  0E2E                     	;# 
  1602  0E2F                     	;# 
  1603  0E90                     	;# 
  1604  0E91                     	;# 
  1605  0E92                     	;# 
  1606  0E94                     	;# 
  1607  0E95                     	;# 
  1608  0E9C                     	;# 
  1609  0E9D                     	;# 
  1610  0E9E                     	;# 
  1611  0E9F                     	;# 
  1612  0EA0                     	;# 
  1613  0EA1                     	;# 
  1614  0EA2                     	;# 
  1615  0EA3                     	;# 
  1616  0EA4                     	;# 
  1617  0EA5                     	;# 
  1618  0EA6                     	;# 
  1619  0EA7                     	;# 
  1620  0F0F                     	;# 
  1621  0F10                     	;# 
  1622  0F11                     	;# 
  1623  0F12                     	;# 
  1624  0F13                     	;# 
  1625  0F14                     	;# 
  1626  0F15                     	;# 
  1627  0F16                     	;# 
  1628  0F17                     	;# 
  1629  0F18                     	;# 
  1630  0F19                     	;# 
  1631  0F1A                     	;# 
  1632  0F1B                     	;# 
  1633  0F1C                     	;# 
  1634  0F1D                     	;# 
  1635  0F1E                     	;# 
  1636  0F1F                     	;# 
  1637  0F20                     	;# 
  1638  0F21                     	;# 
  1639  0F22                     	;# 
  1640  0F23                     	;# 
  1641  0F24                     	;# 
  1642  0F25                     	;# 
  1643  0F26                     	;# 
  1644  0F27                     	;# 
  1645  0F28                     	;# 
  1646  0F29                     	;# 
  1647  0F2A                     	;# 
  1648  0F2B                     	;# 
  1649  0F2C                     	;# 
  1650  0F2D                     	;# 
  1651  0F2E                     	;# 
  1652  0F2F                     	;# 
  1653  0F30                     	;# 
  1654  0F31                     	;# 
  1655  0F32                     	;# 
  1656  0F33                     	;# 
  1657  0F34                     	;# 
  1658  0F35                     	;# 
  1659  0F36                     	;# 
  1660  0F37                     	;# 
  1661  0FE4                     	;# 
  1662  0FE5                     	;# 
  1663  0FE6                     	;# 
  1664  0FE7                     	;# 
  1665  0FE8                     	;# 
  1666  0FE9                     	;# 
  1667  0FEA                     	;# 
  1668  0FEB                     	;# 
  1669  0FED                     	;# 
  1670  0FEE                     	;# 
  1671  0FEF                     	;# 
  1672  0000                     	;# 
  1673  0001                     	;# 
  1674  0002                     	;# 
  1675  0003                     	;# 
  1676  0004                     	;# 
  1677  0005                     	;# 
  1678  0006                     	;# 
  1679  0007                     	;# 
  1680  0008                     	;# 
  1681  0009                     	;# 
  1682  000A                     	;# 
  1683  000B                     	;# 
  1684  000C                     	;# 
  1685  000D                     	;# 
  1686  000E                     	;# 
  1687  0010                     	;# 
  1688  0011                     	;# 
  1689  0012                     	;# 
  1690  0013                     	;# 
  1691  0014                     	;# 
  1692  0015                     	;# 
  1693  0015                     	;# 
  1694  0016                     	;# 
  1695  0016                     	;# 
  1696  0017                     	;# 
  1697  0018                     	;# 
  1698  0019                     	;# 
  1699  0019                     	;# 
  1700  001A                     	;# 
  1701  001B                     	;# 
  1702  001C                     	;# 
  1703  001D                     	;# 
  1704  001E                     	;# 
  1705  001F                     	;# 
  1706  008C                     	;# 
  1707  008D                     	;# 
  1708  008E                     	;# 
  1709  0090                     	;# 
  1710  0091                     	;# 
  1711  0092                     	;# 
  1712  0093                     	;# 
  1713  0094                     	;# 
  1714  0097                     	;# 
  1715  009B                     	;# 
  1716  009B                     	;# 
  1717  009C                     	;# 
  1718  009D                     	;# 
  1719  009E                     	;# 
  1720  009F                     	;# 
  1721  010C                     	;# 
  1722  010D                     	;# 
  1723  010E                     	;# 
  1724  0111                     	;# 
  1725  0112                     	;# 
  1726  0113                     	;# 
  1727  0114                     	;# 
  1728  0115                     	;# 
  1729  0116                     	;# 
  1730  0117                     	;# 
  1731  0118                     	;# 
  1732  0119                     	;# 
  1733  018C                     	;# 
  1734  018D                     	;# 
  1735  018E                     	;# 
  1736  0199                     	;# 
  1737  0199                     	;# 
  1738  0199                     	;# 
  1739  019A                     	;# 
  1740  019A                     	;# 
  1741  019A                     	;# 
  1742  019B                     	;# 
  1743  019B                     	;# 
  1744  019B                     	;# 
  1745  019B                     	;# 
  1746  019B                     	;# 
  1747  019C                     	;# 
  1748  019C                     	;# 
  1749  019C                     	;# 
  1750  019D                     	;# 
  1751  019D                     	;# 
  1752  019D                     	;# 
  1753  019E                     	;# 
  1754  019E                     	;# 
  1755  019E                     	;# 
  1756  019F                     	;# 
  1757  019F                     	;# 
  1758  019F                     	;# 
  1759  019F                     	;# 
  1760  019F                     	;# 
  1761  020C                     	;# 
  1762  020D                     	;# 
  1763  020E                     	;# 
  1764  0211                     	;# 
  1765  0211                     	;# 
  1766  0212                     	;# 
  1767  0212                     	;# 
  1768  0213                     	;# 
  1769  0213                     	;# 
  1770  0214                     	;# 
  1771  0214                     	;# 
  1772  0215                     	;# 
  1773  0215                     	;# 
  1774  0215                     	;# 
  1775  0215                     	;# 
  1776  0216                     	;# 
  1777  0216                     	;# 
  1778  0217                     	;# 
  1779  0217                     	;# 
  1780  0219                     	;# 
  1781  021A                     	;# 
  1782  021B                     	;# 
  1783  021C                     	;# 
  1784  021D                     	;# 
  1785  021D                     	;# 
  1786  021E                     	;# 
  1787  021F                     	;# 
  1788  028C                     	;# 
  1789  028D                     	;# 
  1790  028E                     	;# 
  1791  0291                     	;# 
  1792  0291                     	;# 
  1793  0292                     	;# 
  1794  0293                     	;# 
  1795  0294                     	;# 
  1796  0295                     	;# 
  1797  0295                     	;# 
  1798  0296                     	;# 
  1799  0297                     	;# 
  1800  0298                     	;# 
  1801  029F                     	;# 
  1802  030C                     	;# 
  1803  030D                     	;# 
  1804  030E                     	;# 
  1805  0311                     	;# 
  1806  0311                     	;# 
  1807  0312                     	;# 
  1808  0313                     	;# 
  1809  0314                     	;# 
  1810  0315                     	;# 
  1811  0315                     	;# 
  1812  0316                     	;# 
  1813  0317                     	;# 
  1814  0318                     	;# 
  1815  038C                     	;# 
  1816  038D                     	;# 
  1817  038E                     	;# 
  1818  0391                     	;# 
  1819  0392                     	;# 
  1820  0393                     	;# 
  1821  0394                     	;# 
  1822  0395                     	;# 
  1823  0396                     	;# 
  1824  0397                     	;# 
  1825  0398                     	;# 
  1826  0399                     	;# 
  1827  039A                     	;# 
  1828  039C                     	;# 
  1829  039D                     	;# 
  1830  039E                     	;# 
  1831  039F                     	;# 
  1832  0411                     	;# 
  1833  0411                     	;# 
  1834  0412                     	;# 
  1835  0413                     	;# 
  1836  0414                     	;# 
  1837  0415                     	;# 
  1838  0416                     	;# 
  1839  0417                     	;# 
  1840  0418                     	;# 
  1841  0418                     	;# 
  1842  0419                     	;# 
  1843  041A                     	;# 
  1844  041B                     	;# 
  1845  041C                     	;# 
  1846  041D                     	;# 
  1847  041E                     	;# 
  1848  041F                     	;# 
  1849  0498                     	;# 
  1850  0498                     	;# 
  1851  0499                     	;# 
  1852  049A                     	;# 
  1853  049B                     	;# 
  1854  049B                     	;# 
  1855  049C                     	;# 
  1856  049D                     	;# 
  1857  049E                     	;# 
  1858  049F                     	;# 
  1859  0617                     	;# 
  1860  0618                     	;# 
  1861  0619                     	;# 
  1862  0619                     	;# 
  1863  061A                     	;# 
  1864  061B                     	;# 
  1865  061C                     	;# 
  1866  061C                     	;# 
  1867  061F                     	;# 
  1868  0691                     	;# 
  1869  0692                     	;# 
  1870  0693                     	;# 
  1871  0694                     	;# 
  1872  0695                     	;# 
  1873  0696                     	;# 
  1874  0697                     	;# 
  1875  0698                     	;# 
  1876  0699                     	;# 
  1877  0711                     	;# 
  1878  0712                     	;# 
  1879  0713                     	;# 
  1880  0714                     	;# 
  1881  0715                     	;# 
  1882  0716                     	;# 
  1883  0717                     	;# 
  1884  0718                     	;# 
  1885  0719                     	;# 
  1886  0891                     	;# 
  1887  0891                     	;# 
  1888  0891                     	;# 
  1889  0891                     	;# 
  1890  0891                     	;# 
  1891  0891                     	;# 
  1892  0892                     	;# 
  1893  0892                     	;# 
  1894  0892                     	;# 
  1895  0893                     	;# 
  1896  0893                     	;# 
  1897  0893                     	;# 
  1898  0893                     	;# 
  1899  0893                     	;# 
  1900  0893                     	;# 
  1901  0894                     	;# 
  1902  0894                     	;# 
  1903  0894                     	;# 
  1904  0895                     	;# 
  1905  0895                     	;# 
  1906  0895                     	;# 
  1907  0896                     	;# 
  1908  0896                     	;# 
  1909  0896                     	;# 
  1910  089B                     	;# 
  1911  0911                     	;# 
  1912  0912                     	;# 
  1913  0913                     	;# 
  1914  0914                     	;# 
  1915  0915                     	;# 
  1916  0916                     	;# 
  1917  0918                     	;# 
  1918  0919                     	;# 
  1919  091A                     	;# 
  1920  091B                     	;# 
  1921  091C                     	;# 
  1922  091D                     	;# 
  1923  091E                     	;# 
  1924  091F                     	;# 
  1925  0E0F                     	;# 
  1926  0E10                     	;# 
  1927  0E11                     	;# 
  1928  0E12                     	;# 
  1929  0E13                     	;# 
  1930  0E14                     	;# 
  1931  0E15                     	;# 
  1932  0E16                     	;# 
  1933  0E17                     	;# 
  1934  0E18                     	;# 
  1935  0E19                     	;# 
  1936  0E1A                     	;# 
  1937  0E1B                     	;# 
  1938  0E1C                     	;# 
  1939  0E1D                     	;# 
  1940  0E1E                     	;# 
  1941  0E1F                     	;# 
  1942  0E20                     	;# 
  1943  0E21                     	;# 
  1944  0E22                     	;# 
  1945  0E24                     	;# 
  1946  0E25                     	;# 
  1947  0E28                     	;# 
  1948  0E29                     	;# 
  1949  0E2A                     	;# 
  1950  0E2B                     	;# 
  1951  0E2C                     	;# 
  1952  0E2D                     	;# 
  1953  0E2E                     	;# 
  1954  0E2F                     	;# 
  1955  0E90                     	;# 
  1956  0E91                     	;# 
  1957  0E92                     	;# 
  1958  0E94                     	;# 
  1959  0E95                     	;# 
  1960  0E9C                     	;# 
  1961  0E9D                     	;# 
  1962  0E9E                     	;# 
  1963  0E9F                     	;# 
  1964  0EA0                     	;# 
  1965  0EA1                     	;# 
  1966  0EA2                     	;# 
  1967  0EA3                     	;# 
  1968  0EA4                     	;# 
  1969  0EA5                     	;# 
  1970  0EA6                     	;# 
  1971  0EA7                     	;# 
  1972  0F0F                     	;# 
  1973  0F10                     	;# 
  1974  0F11                     	;# 
  1975  0F12                     	;# 
  1976  0F13                     	;# 
  1977  0F14                     	;# 
  1978  0F15                     	;# 
  1979  0F16                     	;# 
  1980  0F17                     	;# 
  1981  0F18                     	;# 
  1982  0F19                     	;# 
  1983  0F1A                     	;# 
  1984  0F1B                     	;# 
  1985  0F1C                     	;# 
  1986  0F1D                     	;# 
  1987  0F1E                     	;# 
  1988  0F1F                     	;# 
  1989  0F20                     	;# 
  1990  0F21                     	;# 
  1991  0F22                     	;# 
  1992  0F23                     	;# 
  1993  0F24                     	;# 
  1994  0F25                     	;# 
  1995  0F26                     	;# 
  1996  0F27                     	;# 
  1997  0F28                     	;# 
  1998  0F29                     	;# 
  1999  0F2A                     	;# 
  2000  0F2B                     	;# 
  2001  0F2C                     	;# 
  2002  0F2D                     	;# 
  2003  0F2E                     	;# 
  2004  0F2F                     	;# 
  2005  0F30                     	;# 
  2006  0F31                     	;# 
  2007  0F32                     	;# 
  2008  0F33                     	;# 
  2009  0F34                     	;# 
  2010  0F35                     	;# 
  2011  0F36                     	;# 
  2012  0F37                     	;# 
  2013  0FE4                     	;# 
  2014  0FE5                     	;# 
  2015  0FE6                     	;# 
  2016  0FE7                     	;# 
  2017  0FE8                     	;# 
  2018  0FE9                     	;# 
  2019  0FEA                     	;# 
  2020  0FEB                     	;# 
  2021  0FED                     	;# 
  2022  0FEE                     	;# 
  2023  0FEF                     	;# 
  2024  0000                     	;# 
  2025  0001                     	;# 
  2026  0002                     	;# 
  2027  0003                     	;# 
  2028  0004                     	;# 
  2029  0005                     	;# 
  2030  0006                     	;# 
  2031  0007                     	;# 
  2032  0008                     	;# 
  2033  0009                     	;# 
  2034  000A                     	;# 
  2035  000B                     	;# 
  2036  000C                     	;# 
  2037  000D                     	;# 
  2038  000E                     	;# 
  2039  0010                     	;# 
  2040  0011                     	;# 
  2041  0012                     	;# 
  2042  0013                     	;# 
  2043  0014                     	;# 
  2044  0015                     	;# 
  2045  0015                     	;# 
  2046  0016                     	;# 
  2047  0016                     	;# 
  2048  0017                     	;# 
  2049  0018                     	;# 
  2050  0019                     	;# 
  2051  0019                     	;# 
  2052  001A                     	;# 
  2053  001B                     	;# 
  2054  001C                     	;# 
  2055  001D                     	;# 
  2056  001E                     	;# 
  2057  001F                     	;# 
  2058  008C                     	;# 
  2059  008D                     	;# 
  2060  008E                     	;# 
  2061  0090                     	;# 
  2062  0091                     	;# 
  2063  0092                     	;# 
  2064  0093                     	;# 
  2065  0094                     	;# 
  2066  0097                     	;# 
  2067  009B                     	;# 
  2068  009B                     	;# 
  2069  009C                     	;# 
  2070  009D                     	;# 
  2071  009E                     	;# 
  2072  009F                     	;# 
  2073  010C                     	;# 
  2074  010D                     	;# 
  2075  010E                     	;# 
  2076  0111                     	;# 
  2077  0112                     	;# 
  2078  0113                     	;# 
  2079  0114                     	;# 
  2080  0115                     	;# 
  2081  0116                     	;# 
  2082  0117                     	;# 
  2083  0118                     	;# 
  2084  0119                     	;# 
  2085  018C                     	;# 
  2086  018D                     	;# 
  2087  018E                     	;# 
  2088  0199                     	;# 
  2089  0199                     	;# 
  2090  0199                     	;# 
  2091  019A                     	;# 
  2092  019A                     	;# 
  2093  019A                     	;# 
  2094  019B                     	;# 
  2095  019B                     	;# 
  2096  019B                     	;# 
  2097  019B                     	;# 
  2098  019B                     	;# 
  2099  019C                     	;# 
  2100  019C                     	;# 
  2101  019C                     	;# 
  2102  019D                     	;# 
  2103  019D                     	;# 
  2104  019D                     	;# 
  2105  019E                     	;# 
  2106  019E                     	;# 
  2107  019E                     	;# 
  2108  019F                     	;# 
  2109  019F                     	;# 
  2110  019F                     	;# 
  2111  019F                     	;# 
  2112  019F                     	;# 
  2113  020C                     	;# 
  2114  020D                     	;# 
  2115  020E                     	;# 
  2116  0211                     	;# 
  2117  0211                     	;# 
  2118  0212                     	;# 
  2119  0212                     	;# 
  2120  0213                     	;# 
  2121  0213                     	;# 
  2122  0214                     	;# 
  2123  0214                     	;# 
  2124  0215                     	;# 
  2125  0215                     	;# 
  2126  0215                     	;# 
  2127  0215                     	;# 
  2128  0216                     	;# 
  2129  0216                     	;# 
  2130  0217                     	;# 
  2131  0217                     	;# 
  2132  0219                     	;# 
  2133  021A                     	;# 
  2134  021B                     	;# 
  2135  021C                     	;# 
  2136  021D                     	;# 
  2137  021D                     	;# 
  2138  021E                     	;# 
  2139  021F                     	;# 
  2140  028C                     	;# 
  2141  028D                     	;# 
  2142  028E                     	;# 
  2143  0291                     	;# 
  2144  0291                     	;# 
  2145  0292                     	;# 
  2146  0293                     	;# 
  2147  0294                     	;# 
  2148  0295                     	;# 
  2149  0295                     	;# 
  2150  0296                     	;# 
  2151  0297                     	;# 
  2152  0298                     	;# 
  2153  029F                     	;# 
  2154  030C                     	;# 
  2155  030D                     	;# 
  2156  030E                     	;# 
  2157  0311                     	;# 
  2158  0311                     	;# 
  2159  0312                     	;# 
  2160  0313                     	;# 
  2161  0314                     	;# 
  2162  0315                     	;# 
  2163  0315                     	;# 
  2164  0316                     	;# 
  2165  0317                     	;# 
  2166  0318                     	;# 
  2167  038C                     	;# 
  2168  038D                     	;# 
  2169  038E                     	;# 
  2170  0391                     	;# 
  2171  0392                     	;# 
  2172  0393                     	;# 
  2173  0394                     	;# 
  2174  0395                     	;# 
  2175  0396                     	;# 
  2176  0397                     	;# 
  2177  0398                     	;# 
  2178  0399                     	;# 
  2179  039A                     	;# 
  2180  039C                     	;# 
  2181  039D                     	;# 
  2182  039E                     	;# 
  2183  039F                     	;# 
  2184  0411                     	;# 
  2185  0411                     	;# 
  2186  0412                     	;# 
  2187  0413                     	;# 
  2188  0414                     	;# 
  2189  0415                     	;# 
  2190  0416                     	;# 
  2191  0417                     	;# 
  2192  0418                     	;# 
  2193  0418                     	;# 
  2194  0419                     	;# 
  2195  041A                     	;# 
  2196  041B                     	;# 
  2197  041C                     	;# 
  2198  041D                     	;# 
  2199  041E                     	;# 
  2200  041F                     	;# 
  2201  0498                     	;# 
  2202  0498                     	;# 
  2203  0499                     	;# 
  2204  049A                     	;# 
  2205  049B                     	;# 
  2206  049B                     	;# 
  2207  049C                     	;# 
  2208  049D                     	;# 
  2209  049E                     	;# 
  2210  049F                     	;# 
  2211  0617                     	;# 
  2212  0618                     	;# 
  2213  0619                     	;# 
  2214  0619                     	;# 
  2215  061A                     	;# 
  2216  061B                     	;# 
  2217  061C                     	;# 
  2218  061C                     	;# 
  2219  061F                     	;# 
  2220  0691                     	;# 
  2221  0692                     	;# 
  2222  0693                     	;# 
  2223  0694                     	;# 
  2224  0695                     	;# 
  2225  0696                     	;# 
  2226  0697                     	;# 
  2227  0698                     	;# 
  2228  0699                     	;# 
  2229  0711                     	;# 
  2230  0712                     	;# 
  2231  0713                     	;# 
  2232  0714                     	;# 
  2233  0715                     	;# 
  2234  0716                     	;# 
  2235  0717                     	;# 
  2236  0718                     	;# 
  2237  0719                     	;# 
  2238  0891                     	;# 
  2239  0891                     	;# 
  2240  0891                     	;# 
  2241  0891                     	;# 
  2242  0891                     	;# 
  2243  0891                     	;# 
  2244  0892                     	;# 
  2245  0892                     	;# 
  2246  0892                     	;# 
  2247  0893                     	;# 
  2248  0893                     	;# 
  2249  0893                     	;# 
  2250  0893                     	;# 
  2251  0893                     	;# 
  2252  0893                     	;# 
  2253  0894                     	;# 
  2254  0894                     	;# 
  2255  0894                     	;# 
  2256  0895                     	;# 
  2257  0895                     	;# 
  2258  0895                     	;# 
  2259  0896                     	;# 
  2260  0896                     	;# 
  2261  0896                     	;# 
  2262  089B                     	;# 
  2263  0911                     	;# 
  2264  0912                     	;# 
  2265  0913                     	;# 
  2266  0914                     	;# 
  2267  0915                     	;# 
  2268  0916                     	;# 
  2269  0918                     	;# 
  2270  0919                     	;# 
  2271  091A                     	;# 
  2272  091B                     	;# 
  2273  091C                     	;# 
  2274  091D                     	;# 
  2275  091E                     	;# 
  2276  091F                     	;# 
  2277  0E0F                     	;# 
  2278  0E10                     	;# 
  2279  0E11                     	;# 
  2280  0E12                     	;# 
  2281  0E13                     	;# 
  2282  0E14                     	;# 
  2283  0E15                     	;# 
  2284  0E16                     	;# 
  2285  0E17                     	;# 
  2286  0E18                     	;# 
  2287  0E19                     	;# 
  2288  0E1A                     	;# 
  2289  0E1B                     	;# 
  2290  0E1C                     	;# 
  2291  0E1D                     	;# 
  2292  0E1E                     	;# 
  2293  0E1F                     	;# 
  2294  0E20                     	;# 
  2295  0E21                     	;# 
  2296  0E22                     	;# 
  2297  0E24                     	;# 
  2298  0E25                     	;# 
  2299  0E28                     	;# 
  2300  0E29                     	;# 
  2301  0E2A                     	;# 
  2302  0E2B                     	;# 
  2303  0E2C                     	;# 
  2304  0E2D                     	;# 
  2305  0E2E                     	;# 
  2306  0E2F                     	;# 
  2307  0E90                     	;# 
  2308  0E91                     	;# 
  2309  0E92                     	;# 
  2310  0E94                     	;# 
  2311  0E95                     	;# 
  2312  0E9C                     	;# 
  2313  0E9D                     	;# 
  2314  0E9E                     	;# 
  2315  0E9F                     	;# 
  2316  0EA0                     	;# 
  2317  0EA1                     	;# 
  2318  0EA2                     	;# 
  2319  0EA3                     	;# 
  2320  0EA4                     	;# 
  2321  0EA5                     	;# 
  2322  0EA6                     	;# 
  2323  0EA7                     	;# 
  2324  0F0F                     	;# 
  2325  0F10                     	;# 
  2326  0F11                     	;# 
  2327  0F12                     	;# 
  2328  0F13                     	;# 
  2329  0F14                     	;# 
  2330  0F15                     	;# 
  2331  0F16                     	;# 
  2332  0F17                     	;# 
  2333  0F18                     	;# 
  2334  0F19                     	;# 
  2335  0F1A                     	;# 
  2336  0F1B                     	;# 
  2337  0F1C                     	;# 
  2338  0F1D                     	;# 
  2339  0F1E                     	;# 
  2340  0F1F                     	;# 
  2341  0F20                     	;# 
  2342  0F21                     	;# 
  2343  0F22                     	;# 
  2344  0F23                     	;# 
  2345  0F24                     	;# 
  2346  0F25                     	;# 
  2347  0F26                     	;# 
  2348  0F27                     	;# 
  2349  0F28                     	;# 
  2350  0F29                     	;# 
  2351  0F2A                     	;# 
  2352  0F2B                     	;# 
  2353  0F2C                     	;# 
  2354  0F2D                     	;# 
  2355  0F2E                     	;# 
  2356  0F2F                     	;# 
  2357  0F30                     	;# 
  2358  0F31                     	;# 
  2359  0F32                     	;# 
  2360  0F33                     	;# 
  2361  0F34                     	;# 
  2362  0F35                     	;# 
  2363  0F36                     	;# 
  2364  0F37                     	;# 
  2365  0FE4                     	;# 
  2366  0FE5                     	;# 
  2367  0FE6                     	;# 
  2368  0FE7                     	;# 
  2369  0FE8                     	;# 
  2370  0FE9                     	;# 
  2371  0FEA                     	;# 
  2372  0FEB                     	;# 
  2373  0FED                     	;# 
  2374  0FEE                     	;# 
  2375  0FEF                     	;# 
  2376  0000                     	;# 
  2377  0001                     	;# 
  2378  0002                     	;# 
  2379  0003                     	;# 
  2380  0004                     	;# 
  2381  0005                     	;# 
  2382  0006                     	;# 
  2383  0007                     	;# 
  2384  0008                     	;# 
  2385  0009                     	;# 
  2386  000A                     	;# 
  2387  000B                     	;# 
  2388  000C                     	;# 
  2389  000D                     	;# 
  2390  000E                     	;# 
  2391  0010                     	;# 
  2392  0011                     	;# 
  2393  0012                     	;# 
  2394  0013                     	;# 
  2395  0014                     	;# 
  2396  0015                     	;# 
  2397  0015                     	;# 
  2398  0016                     	;# 
  2399  0016                     	;# 
  2400  0017                     	;# 
  2401  0018                     	;# 
  2402  0019                     	;# 
  2403  0019                     	;# 
  2404  001A                     	;# 
  2405  001B                     	;# 
  2406  001C                     	;# 
  2407  001D                     	;# 
  2408  001E                     	;# 
  2409  001F                     	;# 
  2410  008C                     	;# 
  2411  008D                     	;# 
  2412  008E                     	;# 
  2413  0090                     	;# 
  2414  0091                     	;# 
  2415  0092                     	;# 
  2416  0093                     	;# 
  2417  0094                     	;# 
  2418  0097                     	;# 
  2419  009B                     	;# 
  2420  009B                     	;# 
  2421  009C                     	;# 
  2422  009D                     	;# 
  2423  009E                     	;# 
  2424  009F                     	;# 
  2425  010C                     	;# 
  2426  010D                     	;# 
  2427  010E                     	;# 
  2428  0111                     	;# 
  2429  0112                     	;# 
  2430  0113                     	;# 
  2431  0114                     	;# 
  2432  0115                     	;# 
  2433  0116                     	;# 
  2434  0117                     	;# 
  2435  0118                     	;# 
  2436  0119                     	;# 
  2437  018C                     	;# 
  2438  018D                     	;# 
  2439  018E                     	;# 
  2440  0199                     	;# 
  2441  0199                     	;# 
  2442  0199                     	;# 
  2443  019A                     	;# 
  2444  019A                     	;# 
  2445  019A                     	;# 
  2446  019B                     	;# 
  2447  019B                     	;# 
  2448  019B                     	;# 
  2449  019B                     	;# 
  2450  019B                     	;# 
  2451  019C                     	;# 
  2452  019C                     	;# 
  2453  019C                     	;# 
  2454  019D                     	;# 
  2455  019D                     	;# 
  2456  019D                     	;# 
  2457  019E                     	;# 
  2458  019E                     	;# 
  2459  019E                     	;# 
  2460  019F                     	;# 
  2461  019F                     	;# 
  2462  019F                     	;# 
  2463  019F                     	;# 
  2464  019F                     	;# 
  2465  020C                     	;# 
  2466  020D                     	;# 
  2467  020E                     	;# 
  2468  0211                     	;# 
  2469  0211                     	;# 
  2470  0212                     	;# 
  2471  0212                     	;# 
  2472  0213                     	;# 
  2473  0213                     	;# 
  2474  0214                     	;# 
  2475  0214                     	;# 
  2476  0215                     	;# 
  2477  0215                     	;# 
  2478  0215                     	;# 
  2479  0215                     	;# 
  2480  0216                     	;# 
  2481  0216                     	;# 
  2482  0217                     	;# 
  2483  0217                     	;# 
  2484  0219                     	;# 
  2485  021A                     	;# 
  2486  021B                     	;# 
  2487  021C                     	;# 
  2488  021D                     	;# 
  2489  021D                     	;# 
  2490  021E                     	;# 
  2491  021F                     	;# 
  2492  028C                     	;# 
  2493  028D                     	;# 
  2494  028E                     	;# 
  2495  0291                     	;# 
  2496  0291                     	;# 
  2497  0292                     	;# 
  2498  0293                     	;# 
  2499  0294                     	;# 
  2500  0295                     	;# 
  2501  0295                     	;# 
  2502  0296                     	;# 
  2503  0297                     	;# 
  2504  0298                     	;# 
  2505  029F                     	;# 
  2506  030C                     	;# 
  2507  030D                     	;# 
  2508  030E                     	;# 
  2509  0311                     	;# 
  2510  0311                     	;# 
  2511  0312                     	;# 
  2512  0313                     	;# 
  2513  0314                     	;# 
  2514  0315                     	;# 
  2515  0315                     	;# 
  2516  0316                     	;# 
  2517  0317                     	;# 
  2518  0318                     	;# 
  2519  038C                     	;# 
  2520  038D                     	;# 
  2521  038E                     	;# 
  2522  0391                     	;# 
  2523  0392                     	;# 
  2524  0393                     	;# 
  2525  0394                     	;# 
  2526  0395                     	;# 
  2527  0396                     	;# 
  2528  0397                     	;# 
  2529  0398                     	;# 
  2530  0399                     	;# 
  2531  039A                     	;# 
  2532  039C                     	;# 
  2533  039D                     	;# 
  2534  039E                     	;# 
  2535  039F                     	;# 
  2536  0411                     	;# 
  2537  0411                     	;# 
  2538  0412                     	;# 
  2539  0413                     	;# 
  2540  0414                     	;# 
  2541  0415                     	;# 
  2542  0416                     	;# 
  2543  0417                     	;# 
  2544  0418                     	;# 
  2545  0418                     	;# 
  2546  0419                     	;# 
  2547  041A                     	;# 
  2548  041B                     	;# 
  2549  041C                     	;# 
  2550  041D                     	;# 
  2551  041E                     	;# 
  2552  041F                     	;# 
  2553  0498                     	;# 
  2554  0498                     	;# 
  2555  0499                     	;# 
  2556  049A                     	;# 
  2557  049B                     	;# 
  2558  049B                     	;# 
  2559  049C                     	;# 
  2560  049D                     	;# 
  2561  049E                     	;# 
  2562  049F                     	;# 
  2563  0617                     	;# 
  2564  0618                     	;# 
  2565  0619                     	;# 
  2566  0619                     	;# 
  2567  061A                     	;# 
  2568  061B                     	;# 
  2569  061C                     	;# 
  2570  061C                     	;# 
  2571  061F                     	;# 
  2572  0691                     	;# 
  2573  0692                     	;# 
  2574  0693                     	;# 
  2575  0694                     	;# 
  2576  0695                     	;# 
  2577  0696                     	;# 
  2578  0697                     	;# 
  2579  0698                     	;# 
  2580  0699                     	;# 
  2581  0711                     	;# 
  2582  0712                     	;# 
  2583  0713                     	;# 
  2584  0714                     	;# 
  2585  0715                     	;# 
  2586  0716                     	;# 
  2587  0717                     	;# 
  2588  0718                     	;# 
  2589  0719                     	;# 
  2590  0891                     	;# 
  2591  0891                     	;# 
  2592  0891                     	;# 
  2593  0891                     	;# 
  2594  0891                     	;# 
  2595  0891                     	;# 
  2596  0892                     	;# 
  2597  0892                     	;# 
  2598  0892                     	;# 
  2599  0893                     	;# 
  2600  0893                     	;# 
  2601  0893                     	;# 
  2602  0893                     	;# 
  2603  0893                     	;# 
  2604  0893                     	;# 
  2605  0894                     	;# 
  2606  0894                     	;# 
  2607  0894                     	;# 
  2608  0895                     	;# 
  2609  0895                     	;# 
  2610  0895                     	;# 
  2611  0896                     	;# 
  2612  0896                     	;# 
  2613  0896                     	;# 
  2614  089B                     	;# 
  2615  0911                     	;# 
  2616  0912                     	;# 
  2617  0913                     	;# 
  2618  0914                     	;# 
  2619  0915                     	;# 
  2620  0916                     	;# 
  2621  0918                     	;# 
  2622  0919                     	;# 
  2623  091A                     	;# 
  2624  091B                     	;# 
  2625  091C                     	;# 
  2626  091D                     	;# 
  2627  091E                     	;# 
  2628  091F                     	;# 
  2629  0E0F                     	;# 
  2630  0E10                     	;# 
  2631  0E11                     	;# 
  2632  0E12                     	;# 
  2633  0E13                     	;# 
  2634  0E14                     	;# 
  2635  0E15                     	;# 
  2636  0E16                     	;# 
  2637  0E17                     	;# 
  2638  0E18                     	;# 
  2639  0E19                     	;# 
  2640  0E1A                     	;# 
  2641  0E1B                     	;# 
  2642  0E1C                     	;# 
  2643  0E1D                     	;# 
  2644  0E1E                     	;# 
  2645  0E1F                     	;# 
  2646  0E20                     	;# 
  2647  0E21                     	;# 
  2648  0E22                     	;# 
  2649  0E24                     	;# 
  2650  0E25                     	;# 
  2651  0E28                     	;# 
  2652  0E29                     	;# 
  2653  0E2A                     	;# 
  2654  0E2B                     	;# 
  2655  0E2C                     	;# 
  2656  0E2D                     	;# 
  2657  0E2E                     	;# 
  2658  0E2F                     	;# 
  2659  0E90                     	;# 
  2660  0E91                     	;# 
  2661  0E92                     	;# 
  2662  0E94                     	;# 
  2663  0E95                     	;# 
  2664  0E9C                     	;# 
  2665  0E9D                     	;# 
  2666  0E9E                     	;# 
  2667  0E9F                     	;# 
  2668  0EA0                     	;# 
  2669  0EA1                     	;# 
  2670  0EA2                     	;# 
  2671  0EA3                     	;# 
  2672  0EA4                     	;# 
  2673  0EA5                     	;# 
  2674  0EA6                     	;# 
  2675  0EA7                     	;# 
  2676  0F0F                     	;# 
  2677  0F10                     	;# 
  2678  0F11                     	;# 
  2679  0F12                     	;# 
  2680  0F13                     	;# 
  2681  0F14                     	;# 
  2682  0F15                     	;# 
  2683  0F16                     	;# 
  2684  0F17                     	;# 
  2685  0F18                     	;# 
  2686  0F19                     	;# 
  2687  0F1A                     	;# 
  2688  0F1B                     	;# 
  2689  0F1C                     	;# 
  2690  0F1D                     	;# 
  2691  0F1E                     	;# 
  2692  0F1F                     	;# 
  2693  0F20                     	;# 
  2694  0F21                     	;# 
  2695  0F22                     	;# 
  2696  0F23                     	;# 
  2697  0F24                     	;# 
  2698  0F25                     	;# 
  2699  0F26                     	;# 
  2700  0F27                     	;# 
  2701  0F28                     	;# 
  2702  0F29                     	;# 
  2703  0F2A                     	;# 
  2704  0F2B                     	;# 
  2705  0F2C                     	;# 
  2706  0F2D                     	;# 
  2707  0F2E                     	;# 
  2708  0F2F                     	;# 
  2709  0F30                     	;# 
  2710  0F31                     	;# 
  2711  0F32                     	;# 
  2712  0F33                     	;# 
  2713  0F34                     	;# 
  2714  0F35                     	;# 
  2715  0F36                     	;# 
  2716  0F37                     	;# 
  2717  0FE4                     	;# 
  2718  0FE5                     	;# 
  2719  0FE6                     	;# 
  2720  0FE7                     	;# 
  2721  0FE8                     	;# 
  2722  0FE9                     	;# 
  2723  0FEA                     	;# 
  2724  0FEB                     	;# 
  2725  0FED                     	;# 
  2726  0FEE                     	;# 
  2727  0FEF                     	;# 
  2728  0000                     	;# 
  2729  0001                     	;# 
  2730  0002                     	;# 
  2731  0003                     	;# 
  2732  0004                     	;# 
  2733  0005                     	;# 
  2734  0006                     	;# 
  2735  0007                     	;# 
  2736  0008                     	;# 
  2737  0009                     	;# 
  2738  000A                     	;# 
  2739  000B                     	;# 
  2740  000C                     	;# 
  2741  000D                     	;# 
  2742  000E                     	;# 
  2743  0010                     	;# 
  2744  0011                     	;# 
  2745  0012                     	;# 
  2746  0013                     	;# 
  2747  0014                     	;# 
  2748  0015                     	;# 
  2749  0015                     	;# 
  2750  0016                     	;# 
  2751  0016                     	;# 
  2752  0017                     	;# 
  2753  0018                     	;# 
  2754  0019                     	;# 
  2755  0019                     	;# 
  2756  001A                     	;# 
  2757  001B                     	;# 
  2758  001C                     	;# 
  2759  001D                     	;# 
  2760  001E                     	;# 
  2761  001F                     	;# 
  2762  008C                     	;# 
  2763  008D                     	;# 
  2764  008E                     	;# 
  2765  0090                     	;# 
  2766  0091                     	;# 
  2767  0092                     	;# 
  2768  0093                     	;# 
  2769  0094                     	;# 
  2770  0097                     	;# 
  2771  009B                     	;# 
  2772  009B                     	;# 
  2773  009C                     	;# 
  2774  009D                     	;# 
  2775  009E                     	;# 
  2776  009F                     	;# 
  2777  010C                     	;# 
  2778  010D                     	;# 
  2779  010E                     	;# 
  2780  0111                     	;# 
  2781  0112                     	;# 
  2782  0113                     	;# 
  2783  0114                     	;# 
  2784  0115                     	;# 
  2785  0116                     	;# 
  2786  0117                     	;# 
  2787  0118                     	;# 
  2788  0119                     	;# 
  2789  018C                     	;# 
  2790  018D                     	;# 
  2791  018E                     	;# 
  2792  0199                     	;# 
  2793  0199                     	;# 
  2794  0199                     	;# 
  2795  019A                     	;# 
  2796  019A                     	;# 
  2797  019A                     	;# 
  2798  019B                     	;# 
  2799  019B                     	;# 
  2800  019B                     	;# 
  2801  019B                     	;# 
  2802  019B                     	;# 
  2803  019C                     	;# 
  2804  019C                     	;# 
  2805  019C                     	;# 
  2806  019D                     	;# 
  2807  019D                     	;# 
  2808  019D                     	;# 
  2809  019E                     	;# 
  2810  019E                     	;# 
  2811  019E                     	;# 
  2812  019F                     	;# 
  2813  019F                     	;# 
  2814  019F                     	;# 
  2815  019F                     	;# 
  2816  019F                     	;# 
  2817  020C                     	;# 
  2818  020D                     	;# 
  2819  020E                     	;# 
  2820  0211                     	;# 
  2821  0211                     	;# 
  2822  0212                     	;# 
  2823  0212                     	;# 
  2824  0213                     	;# 
  2825  0213                     	;# 
  2826  0214                     	;# 
  2827  0214                     	;# 
  2828  0215                     	;# 
  2829  0215                     	;# 
  2830  0215                     	;# 
  2831  0215                     	;# 
  2832  0216                     	;# 
  2833  0216                     	;# 
  2834  0217                     	;# 
  2835  0217                     	;# 
  2836  0219                     	;# 
  2837  021A                     	;# 
  2838  021B                     	;# 
  2839  021C                     	;# 
  2840  021D                     	;# 
  2841  021D                     	;# 
  2842  021E                     	;# 
  2843  021F                     	;# 
  2844  028C                     	;# 
  2845  028D                     	;# 
  2846  028E                     	;# 
  2847  0291                     	;# 
  2848  0291                     	;# 
  2849  0292                     	;# 
  2850  0293                     	;# 
  2851  0294                     	;# 
  2852  0295                     	;# 
  2853  0295                     	;# 
  2854  0296                     	;# 
  2855  0297                     	;# 
  2856  0298                     	;# 
  2857  029F                     	;# 
  2858  030C                     	;# 
  2859  030D                     	;# 
  2860  030E                     	;# 
  2861  0311                     	;# 
  2862  0311                     	;# 
  2863  0312                     	;# 
  2864  0313                     	;# 
  2865  0314                     	;# 
  2866  0315                     	;# 
  2867  0315                     	;# 
  2868  0316                     	;# 
  2869  0317                     	;# 
  2870  0318                     	;# 
  2871  038C                     	;# 
  2872  038D                     	;# 
  2873  038E                     	;# 
  2874  0391                     	;# 
  2875  0392                     	;# 
  2876  0393                     	;# 
  2877  0394                     	;# 
  2878  0395                     	;# 
  2879  0396                     	;# 
  2880  0397                     	;# 
  2881  0398                     	;# 
  2882  0399                     	;# 
  2883  039A                     	;# 
  2884  039C                     	;# 
  2885  039D                     	;# 
  2886  039E                     	;# 
  2887  039F                     	;# 
  2888  0411                     	;# 
  2889  0411                     	;# 
  2890  0412                     	;# 
  2891  0413                     	;# 
  2892  0414                     	;# 
  2893  0415                     	;# 
  2894  0416                     	;# 
  2895  0417                     	;# 
  2896  0418                     	;# 
  2897  0418                     	;# 
  2898  0419                     	;# 
  2899  041A                     	;# 
  2900  041B                     	;# 
  2901  041C                     	;# 
  2902  041D                     	;# 
  2903  041E                     	;# 
  2904  041F                     	;# 
  2905  0498                     	;# 
  2906  0498                     	;# 
  2907  0499                     	;# 
  2908  049A                     	;# 
  2909  049B                     	;# 
  2910  049B                     	;# 
  2911  049C                     	;# 
  2912  049D                     	;# 
  2913  049E                     	;# 
  2914  049F                     	;# 
  2915  0617                     	;# 
  2916  0618                     	;# 
  2917  0619                     	;# 
  2918  0619                     	;# 
  2919  061A                     	;# 
  2920  061B                     	;# 
  2921  061C                     	;# 
  2922  061C                     	;# 
  2923  061F                     	;# 
  2924  0691                     	;# 
  2925  0692                     	;# 
  2926  0693                     	;# 
  2927  0694                     	;# 
  2928  0695                     	;# 
  2929  0696                     	;# 
  2930  0697                     	;# 
  2931  0698                     	;# 
  2932  0699                     	;# 
  2933  0711                     	;# 
  2934  0712                     	;# 
  2935  0713                     	;# 
  2936  0714                     	;# 
  2937  0715                     	;# 
  2938  0716                     	;# 
  2939  0717                     	;# 
  2940  0718                     	;# 
  2941  0719                     	;# 
  2942  0891                     	;# 
  2943  0891                     	;# 
  2944  0891                     	;# 
  2945  0891                     	;# 
  2946  0891                     	;# 
  2947  0891                     	;# 
  2948  0892                     	;# 
  2949  0892                     	;# 
  2950  0892                     	;# 
  2951  0893                     	;# 
  2952  0893                     	;# 
  2953  0893                     	;# 
  2954  0893                     	;# 
  2955  0893                     	;# 
  2956  0893                     	;# 
  2957  0894                     	;# 
  2958  0894                     	;# 
  2959  0894                     	;# 
  2960  0895                     	;# 
  2961  0895                     	;# 
  2962  0895                     	;# 
  2963  0896                     	;# 
  2964  0896                     	;# 
  2965  0896                     	;# 
  2966  089B                     	;# 
  2967  0911                     	;# 
  2968  0912                     	;# 
  2969  0913                     	;# 
  2970  0914                     	;# 
  2971  0915                     	;# 
  2972  0916                     	;# 
  2973  0918                     	;# 
  2974  0919                     	;# 
  2975  091A                     	;# 
  2976  091B                     	;# 
  2977  091C                     	;# 
  2978  091D                     	;# 
  2979  091E                     	;# 
  2980  091F                     	;# 
  2981  0E0F                     	;# 
  2982  0E10                     	;# 
  2983  0E11                     	;# 
  2984  0E12                     	;# 
  2985  0E13                     	;# 
  2986  0E14                     	;# 
  2987  0E15                     	;# 
  2988  0E16                     	;# 
  2989  0E17                     	;# 
  2990  0E18                     	;# 
  2991  0E19                     	;# 
  2992  0E1A                     	;# 
  2993  0E1B                     	;# 
  2994  0E1C                     	;# 
  2995  0E1D                     	;# 
  2996  0E1E                     	;# 
  2997  0E1F                     	;# 
  2998  0E20                     	;# 
  2999  0E21                     	;# 
  3000  0E22                     	;# 
  3001  0E24                     	;# 
  3002  0E25                     	;# 
  3003  0E28                     	;# 
  3004  0E29                     	;# 
  3005  0E2A                     	;# 
  3006  0E2B                     	;# 
  3007  0E2C                     	;# 
  3008  0E2D                     	;# 
  3009  0E2E                     	;# 
  3010  0E2F                     	;# 
  3011  0E90                     	;# 
  3012  0E91                     	;# 
  3013  0E92                     	;# 
  3014  0E94                     	;# 
  3015  0E95                     	;# 
  3016  0E9C                     	;# 
  3017  0E9D                     	;# 
  3018  0E9E                     	;# 
  3019  0E9F                     	;# 
  3020  0EA0                     	;# 
  3021  0EA1                     	;# 
  3022  0EA2                     	;# 
  3023  0EA3                     	;# 
  3024  0EA4                     	;# 
  3025  0EA5                     	;# 
  3026  0EA6                     	;# 
  3027  0EA7                     	;# 
  3028  0F0F                     	;# 
  3029  0F10                     	;# 
  3030  0F11                     	;# 
  3031  0F12                     	;# 
  3032  0F13                     	;# 
  3033  0F14                     	;# 
  3034  0F15                     	;# 
  3035  0F16                     	;# 
  3036  0F17                     	;# 
  3037  0F18                     	;# 
  3038  0F19                     	;# 
  3039  0F1A                     	;# 
  3040  0F1B                     	;# 
  3041  0F1C                     	;# 
  3042  0F1D                     	;# 
  3043  0F1E                     	;# 
  3044  0F1F                     	;# 
  3045  0F20                     	;# 
  3046  0F21                     	;# 
  3047  0F22                     	;# 
  3048  0F23                     	;# 
  3049  0F24                     	;# 
  3050  0F25                     	;# 
  3051  0F26                     	;# 
  3052  0F27                     	;# 
  3053  0F28                     	;# 
  3054  0F29                     	;# 
  3055  0F2A                     	;# 
  3056  0F2B                     	;# 
  3057  0F2C                     	;# 
  3058  0F2D                     	;# 
  3059  0F2E                     	;# 
  3060  0F2F                     	;# 
  3061  0F30                     	;# 
  3062  0F31                     	;# 
  3063  0F32                     	;# 
  3064  0F33                     	;# 
  3065  0F34                     	;# 
  3066  0F35                     	;# 
  3067  0F36                     	;# 
  3068  0F37                     	;# 
  3069  0FE4                     	;# 
  3070  0FE5                     	;# 
  3071  0FE6                     	;# 
  3072  0FE7                     	;# 
  3073  0FE8                     	;# 
  3074  0FE9                     	;# 
  3075  0FEA                     	;# 
  3076  0FEB                     	;# 
  3077  0FED                     	;# 
  3078  0FEE                     	;# 
  3079  0FEF                     	;# 
  3080  0000                     	;# 
  3081  0001                     	;# 
  3082  0002                     	;# 
  3083  0003                     	;# 
  3084  0004                     	;# 
  3085  0005                     	;# 
  3086  0006                     	;# 
  3087  0007                     	;# 
  3088  0008                     	;# 
  3089  0009                     	;# 
  3090  000A                     	;# 
  3091  000B                     	;# 
  3092  000C                     	;# 
  3093  000D                     	;# 
  3094  000E                     	;# 
  3095  0010                     	;# 
  3096  0011                     	;# 
  3097  0012                     	;# 
  3098  0013                     	;# 
  3099  0014                     	;# 
  3100  0015                     	;# 
  3101  0015                     	;# 
  3102  0016                     	;# 
  3103  0016                     	;# 
  3104  0017                     	;# 
  3105  0018                     	;# 
  3106  0019                     	;# 
  3107  0019                     	;# 
  3108  001A                     	;# 
  3109  001B                     	;# 
  3110  001C                     	;# 
  3111  001D                     	;# 
  3112  001E                     	;# 
  3113  001F                     	;# 
  3114  008C                     	;# 
  3115  008D                     	;# 
  3116  008E                     	;# 
  3117  0090                     	;# 
  3118  0091                     	;# 
  3119  0092                     	;# 
  3120  0093                     	;# 
  3121  0094                     	;# 
  3122  0097                     	;# 
  3123  009B                     	;# 
  3124  009B                     	;# 
  3125  009C                     	;# 
  3126  009D                     	;# 
  3127  009E                     	;# 
  3128  009F                     	;# 
  3129  010C                     	;# 
  3130  010D                     	;# 
  3131  010E                     	;# 
  3132  0111                     	;# 
  3133  0112                     	;# 
  3134  0113                     	;# 
  3135  0114                     	;# 
  3136  0115                     	;# 
  3137  0116                     	;# 
  3138  0117                     	;# 
  3139  0118                     	;# 
  3140  0119                     	;# 
  3141  018C                     	;# 
  3142  018D                     	;# 
  3143  018E                     	;# 
  3144  0199                     	;# 
  3145  0199                     	;# 
  3146  0199                     	;# 
  3147  019A                     	;# 
  3148  019A                     	;# 
  3149  019A                     	;# 
  3150  019B                     	;# 
  3151  019B                     	;# 
  3152  019B                     	;# 
  3153  019B                     	;# 
  3154  019B                     	;# 
  3155  019C                     	;# 
  3156  019C                     	;# 
  3157  019C                     	;# 
  3158  019D                     	;# 
  3159  019D                     	;# 
  3160  019D                     	;# 
  3161  019E                     	;# 
  3162  019E                     	;# 
  3163  019E                     	;# 
  3164  019F                     	;# 
  3165  019F                     	;# 
  3166  019F                     	;# 
  3167  019F                     	;# 
  3168  019F                     	;# 
  3169  020C                     	;# 
  3170  020D                     	;# 
  3171  020E                     	;# 
  3172  0211                     	;# 
  3173  0211                     	;# 
  3174  0212                     	;# 
  3175  0212                     	;# 
  3176  0213                     	;# 
  3177  0213                     	;# 
  3178  0214                     	;# 
  3179  0214                     	;# 
  3180  0215                     	;# 
  3181  0215                     	;# 
  3182  0215                     	;# 
  3183  0215                     	;# 
  3184  0216                     	;# 
  3185  0216                     	;# 
  3186  0217                     	;# 
  3187  0217                     	;# 
  3188  0219                     	;# 
  3189  021A                     	;# 
  3190  021B                     	;# 
  3191  021C                     	;# 
  3192  021D                     	;# 
  3193  021D                     	;# 
  3194  021E                     	;# 
  3195  021F                     	;# 
  3196  028C                     	;# 
  3197  028D                     	;# 
  3198  028E                     	;# 
  3199  0291                     	;# 
  3200  0291                     	;# 
  3201  0292                     	;# 
  3202  0293                     	;# 
  3203  0294                     	;# 
  3204  0295                     	;# 
  3205  0295                     	;# 
  3206  0296                     	;# 
  3207  0297                     	;# 
  3208  0298                     	;# 
  3209  029F                     	;# 
  3210  030C                     	;# 
  3211  030D                     	;# 
  3212  030E                     	;# 
  3213  0311                     	;# 
  3214  0311                     	;# 
  3215  0312                     	;# 
  3216  0313                     	;# 
  3217  0314                     	;# 
  3218  0315                     	;# 
  3219  0315                     	;# 
  3220  0316                     	;# 
  3221  0317                     	;# 
  3222  0318                     	;# 
  3223  038C                     	;# 
  3224  038D                     	;# 
  3225  038E                     	;# 
  3226  0391                     	;# 
  3227  0392                     	;# 
  3228  0393                     	;# 
  3229  0394                     	;# 
  3230  0395                     	;# 
  3231  0396                     	;# 
  3232  0397                     	;# 
  3233  0398                     	;# 
  3234  0399                     	;# 
  3235  039A                     	;# 
  3236  039C                     	;# 
  3237  039D                     	;# 
  3238  039E                     	;# 
  3239  039F                     	;# 
  3240  0411                     	;# 
  3241  0411                     	;# 
  3242  0412                     	;# 
  3243  0413                     	;# 
  3244  0414                     	;# 
  3245  0415                     	;# 
  3246  0416                     	;# 
  3247  0417                     	;# 
  3248  0418                     	;# 
  3249  0418                     	;# 
  3250  0419                     	;# 
  3251  041A                     	;# 
  3252  041B                     	;# 
  3253  041C                     	;# 
  3254  041D                     	;# 
  3255  041E                     	;# 
  3256  041F                     	;# 
  3257  0498                     	;# 
  3258  0498                     	;# 
  3259  0499                     	;# 
  3260  049A                     	;# 
  3261  049B                     	;# 
  3262  049B                     	;# 
  3263  049C                     	;# 
  3264  049D                     	;# 
  3265  049E                     	;# 
  3266  049F                     	;# 
  3267  0617                     	;# 
  3268  0618                     	;# 
  3269  0619                     	;# 
  3270  0619                     	;# 
  3271  061A                     	;# 
  3272  061B                     	;# 
  3273  061C                     	;# 
  3274  061C                     	;# 
  3275  061F                     	;# 
  3276  0691                     	;# 
  3277  0692                     	;# 
  3278  0693                     	;# 
  3279  0694                     	;# 
  3280  0695                     	;# 
  3281  0696                     	;# 
  3282  0697                     	;# 
  3283  0698                     	;# 
  3284  0699                     	;# 
  3285  0711                     	;# 
  3286  0712                     	;# 
  3287  0713                     	;# 
  3288  0714                     	;# 
  3289  0715                     	;# 
  3290  0716                     	;# 
  3291  0717                     	;# 
  3292  0718                     	;# 
  3293  0719                     	;# 
  3294  0891                     	;# 
  3295  0891                     	;# 
  3296  0891                     	;# 
  3297  0891                     	;# 
  3298  0891                     	;# 
  3299  0891                     	;# 
  3300  0892                     	;# 
  3301  0892                     	;# 
  3302  0892                     	;# 
  3303  0893                     	;# 
  3304  0893                     	;# 
  3305  0893                     	;# 
  3306  0893                     	;# 
  3307  0893                     	;# 
  3308  0893                     	;# 
  3309  0894                     	;# 
  3310  0894                     	;# 
  3311  0894                     	;# 
  3312  0895                     	;# 
  3313  0895                     	;# 
  3314  0895                     	;# 
  3315  0896                     	;# 
  3316  0896                     	;# 
  3317  0896                     	;# 
  3318  089B                     	;# 
  3319  0911                     	;# 
  3320  0912                     	;# 
  3321  0913                     	;# 
  3322  0914                     	;# 
  3323  0915                     	;# 
  3324  0916                     	;# 
  3325  0918                     	;# 
  3326  0919                     	;# 
  3327  091A                     	;# 
  3328  091B                     	;# 
  3329  091C                     	;# 
  3330  091D                     	;# 
  3331  091E                     	;# 
  3332  091F                     	;# 
  3333  0E0F                     	;# 
  3334  0E10                     	;# 
  3335  0E11                     	;# 
  3336  0E12                     	;# 
  3337  0E13                     	;# 
  3338  0E14                     	;# 
  3339  0E15                     	;# 
  3340  0E16                     	;# 
  3341  0E17                     	;# 
  3342  0E18                     	;# 
  3343  0E19                     	;# 
  3344  0E1A                     	;# 
  3345  0E1B                     	;# 
  3346  0E1C                     	;# 
  3347  0E1D                     	;# 
  3348  0E1E                     	;# 
  3349  0E1F                     	;# 
  3350  0E20                     	;# 
  3351  0E21                     	;# 
  3352  0E22                     	;# 
  3353  0E24                     	;# 
  3354  0E25                     	;# 
  3355  0E28                     	;# 
  3356  0E29                     	;# 
  3357  0E2A                     	;# 
  3358  0E2B                     	;# 
  3359  0E2C                     	;# 
  3360  0E2D                     	;# 
  3361  0E2E                     	;# 
  3362  0E2F                     	;# 
  3363  0E90                     	;# 
  3364  0E91                     	;# 
  3365  0E92                     	;# 
  3366  0E94                     	;# 
  3367  0E95                     	;# 
  3368  0E9C                     	;# 
  3369  0E9D                     	;# 
  3370  0E9E                     	;# 
  3371  0E9F                     	;# 
  3372  0EA0                     	;# 
  3373  0EA1                     	;# 
  3374  0EA2                     	;# 
  3375  0EA3                     	;# 
  3376  0EA4                     	;# 
  3377  0EA5                     	;# 
  3378  0EA6                     	;# 
  3379  0EA7                     	;# 
  3380  0F0F                     	;# 
  3381  0F10                     	;# 
  3382  0F11                     	;# 
  3383  0F12                     	;# 
  3384  0F13                     	;# 
  3385  0F14                     	;# 
  3386  0F15                     	;# 
  3387  0F16                     	;# 
  3388  0F17                     	;# 
  3389  0F18                     	;# 
  3390  0F19                     	;# 
  3391  0F1A                     	;# 
  3392  0F1B                     	;# 
  3393  0F1C                     	;# 
  3394  0F1D                     	;# 
  3395  0F1E                     	;# 
  3396  0F1F                     	;# 
  3397  0F20                     	;# 
  3398  0F21                     	;# 
  3399  0F22                     	;# 
  3400  0F23                     	;# 
  3401  0F24                     	;# 
  3402  0F25                     	;# 
  3403  0F26                     	;# 
  3404  0F27                     	;# 
  3405  0F28                     	;# 
  3406  0F29                     	;# 
  3407  0F2A                     	;# 
  3408  0F2B                     	;# 
  3409  0F2C                     	;# 
  3410  0F2D                     	;# 
  3411  0F2E                     	;# 
  3412  0F2F                     	;# 
  3413  0F30                     	;# 
  3414  0F31                     	;# 
  3415  0F32                     	;# 
  3416  0F33                     	;# 
  3417  0F34                     	;# 
  3418  0F35                     	;# 
  3419  0F36                     	;# 
  3420  0F37                     	;# 
  3421  0FE4                     	;# 
  3422  0FE5                     	;# 
  3423  0FE6                     	;# 
  3424  0FE7                     	;# 
  3425  0FE8                     	;# 
  3426  0FE9                     	;# 
  3427  0FEA                     	;# 
  3428  0FEB                     	;# 
  3429  0FED                     	;# 
  3430  0FEE                     	;# 
  3431  0FEF                     	;# 
  3432  0000                     	;# 
  3433  0001                     	;# 
  3434  0002                     	;# 
  3435  0003                     	;# 
  3436  0004                     	;# 
  3437  0005                     	;# 
  3438  0006                     	;# 
  3439  0007                     	;# 
  3440  0008                     	;# 
  3441  0009                     	;# 
  3442  000A                     	;# 
  3443  000B                     	;# 
  3444  000C                     	;# 
  3445  000D                     	;# 
  3446  000E                     	;# 
  3447  0010                     	;# 
  3448  0011                     	;# 
  3449  0012                     	;# 
  3450  0013                     	;# 
  3451  0014                     	;# 
  3452  0015                     	;# 
  3453  0015                     	;# 
  3454  0016                     	;# 
  3455  0016                     	;# 
  3456  0017                     	;# 
  3457  0018                     	;# 
  3458  0019                     	;# 
  3459  0019                     	;# 
  3460  001A                     	;# 
  3461  001B                     	;# 
  3462  001C                     	;# 
  3463  001D                     	;# 
  3464  001E                     	;# 
  3465  001F                     	;# 
  3466  008C                     	;# 
  3467  008D                     	;# 
  3468  008E                     	;# 
  3469  0090                     	;# 
  3470  0091                     	;# 
  3471  0092                     	;# 
  3472  0093                     	;# 
  3473  0094                     	;# 
  3474  0097                     	;# 
  3475  009B                     	;# 
  3476  009B                     	;# 
  3477  009C                     	;# 
  3478  009D                     	;# 
  3479  009E                     	;# 
  3480  009F                     	;# 
  3481  010C                     	;# 
  3482  010D                     	;# 
  3483  010E                     	;# 
  3484  0111                     	;# 
  3485  0112                     	;# 
  3486  0113                     	;# 
  3487  0114                     	;# 
  3488  0115                     	;# 
  3489  0116                     	;# 
  3490  0117                     	;# 
  3491  0118                     	;# 
  3492  0119                     	;# 
  3493  018C                     	;# 
  3494  018D                     	;# 
  3495  018E                     	;# 
  3496  0199                     	;# 
  3497  0199                     	;# 
  3498  0199                     	;# 
  3499  019A                     	;# 
  3500  019A                     	;# 
  3501  019A                     	;# 
  3502  019B                     	;# 
  3503  019B                     	;# 
  3504  019B                     	;# 
  3505  019B                     	;# 
  3506  019B                     	;# 
  3507  019C                     	;# 
  3508  019C                     	;# 
  3509  019C                     	;# 
  3510  019D                     	;# 
  3511  019D                     	;# 
  3512  019D                     	;# 
  3513  019E                     	;# 
  3514  019E                     	;# 
  3515  019E                     	;# 
  3516  019F                     	;# 
  3517  019F                     	;# 
  3518  019F                     	;# 
  3519  019F                     	;# 
  3520  019F                     	;# 
  3521  020C                     	;# 
  3522  020D                     	;# 
  3523  020E                     	;# 
  3524  0211                     	;# 
  3525  0211                     	;# 
  3526  0212                     	;# 
  3527  0212                     	;# 
  3528  0213                     	;# 
  3529  0213                     	;# 
  3530  0214                     	;# 
  3531  0214                     	;# 
  3532  0215                     	;# 
  3533  0215                     	;# 
  3534  0215                     	;# 
  3535  0215                     	;# 
  3536  0216                     	;# 
  3537  0216                     	;# 
  3538  0217                     	;# 
  3539  0217                     	;# 
  3540  0219                     	;# 
  3541  021A                     	;# 
  3542  021B                     	;# 
  3543  021C                     	;# 
  3544  021D                     	;# 
  3545  021D                     	;# 
  3546  021E                     	;# 
  3547  021F                     	;# 
  3548  028C                     	;# 
  3549  028D                     	;# 
  3550  028E                     	;# 
  3551  0291                     	;# 
  3552  0291                     	;# 
  3553  0292                     	;# 
  3554  0293                     	;# 
  3555  0294                     	;# 
  3556  0295                     	;# 
  3557  0295                     	;# 
  3558  0296                     	;# 
  3559  0297                     	;# 
  3560  0298                     	;# 
  3561  029F                     	;# 
  3562  030C                     	;# 
  3563  030D                     	;# 
  3564  030E                     	;# 
  3565  0311                     	;# 
  3566  0311                     	;# 
  3567  0312                     	;# 
  3568  0313                     	;# 
  3569  0314                     	;# 
  3570  0315                     	;# 
  3571  0315                     	;# 
  3572  0316                     	;# 
  3573  0317                     	;# 
  3574  0318                     	;# 
  3575  038C                     	;# 
  3576  038D                     	;# 
  3577  038E                     	;# 
  3578  0391                     	;# 
  3579  0392                     	;# 
  3580  0393                     	;# 
  3581  0394                     	;# 
  3582  0395                     	;# 
  3583  0396                     	;# 
  3584  0397                     	;# 
  3585  0398                     	;# 
  3586  0399                     	;# 
  3587  039A                     	;# 
  3588  039C                     	;# 
  3589  039D                     	;# 
  3590  039E                     	;# 
  3591  039F                     	;# 
  3592  0411                     	;# 
  3593  0411                     	;# 
  3594  0412                     	;# 
  3595  0413                     	;# 
  3596  0414                     	;# 
  3597  0415                     	;# 
  3598  0416                     	;# 
  3599  0417                     	;# 
  3600  0418                     	;# 
  3601  0418                     	;# 
  3602  0419                     	;# 
  3603  041A                     	;# 
  3604  041B                     	;# 
  3605  041C                     	;# 
  3606  041D                     	;# 
  3607  041E                     	;# 
  3608  041F                     	;# 
  3609  0498                     	;# 
  3610  0498                     	;# 
  3611  0499                     	;# 
  3612  049A                     	;# 
  3613  049B                     	;# 
  3614  049B                     	;# 
  3615  049C                     	;# 
  3616  049D                     	;# 
  3617  049E                     	;# 
  3618  049F                     	;# 
  3619  0617                     	;# 
  3620  0618                     	;# 
  3621  0619                     	;# 
  3622  0619                     	;# 
  3623  061A                     	;# 
  3624  061B                     	;# 
  3625  061C                     	;# 
  3626  061C                     	;# 
  3627  061F                     	;# 
  3628  0691                     	;# 
  3629  0692                     	;# 
  3630  0693                     	;# 
  3631  0694                     	;# 
  3632  0695                     	;# 
  3633  0696                     	;# 
  3634  0697                     	;# 
  3635  0698                     	;# 
  3636  0699                     	;# 
  3637  0711                     	;# 
  3638  0712                     	;# 
  3639  0713                     	;# 
  3640  0714                     	;# 
  3641  0715                     	;# 
  3642  0716                     	;# 
  3643  0717                     	;# 
  3644  0718                     	;# 
  3645  0719                     	;# 
  3646  0891                     	;# 
  3647  0891                     	;# 
  3648  0891                     	;# 
  3649  0891                     	;# 
  3650  0891                     	;# 
  3651  0891                     	;# 
  3652  0892                     	;# 
  3653  0892                     	;# 
  3654  0892                     	;# 
  3655  0893                     	;# 
  3656  0893                     	;# 
  3657  0893                     	;# 
  3658  0893                     	;# 
  3659  0893                     	;# 
  3660  0893                     	;# 
  3661  0894                     	;# 
  3662  0894                     	;# 
  3663  0894                     	;# 
  3664  0895                     	;# 
  3665  0895                     	;# 
  3666  0895                     	;# 
  3667  0896                     	;# 
  3668  0896                     	;# 
  3669  0896                     	;# 
  3670  089B                     	;# 
  3671  0911                     	;# 
  3672  0912                     	;# 
  3673  0913                     	;# 
  3674  0914                     	;# 
  3675  0915                     	;# 
  3676  0916                     	;# 
  3677  0918                     	;# 
  3678  0919                     	;# 
  3679  091A                     	;# 
  3680  091B                     	;# 
  3681  091C                     	;# 
  3682  091D                     	;# 
  3683  091E                     	;# 
  3684  091F                     	;# 
  3685  0E0F                     	;# 
  3686  0E10                     	;# 
  3687  0E11                     	;# 
  3688  0E12                     	;# 
  3689  0E13                     	;# 
  3690  0E14                     	;# 
  3691  0E15                     	;# 
  3692  0E16                     	;# 
  3693  0E17                     	;# 
  3694  0E18                     	;# 
  3695  0E19                     	;# 
  3696  0E1A                     	;# 
  3697  0E1B                     	;# 
  3698  0E1C                     	;# 
  3699  0E1D                     	;# 
  3700  0E1E                     	;# 
  3701  0E1F                     	;# 
  3702  0E20                     	;# 
  3703  0E21                     	;# 
  3704  0E22                     	;# 
  3705  0E24                     	;# 
  3706  0E25                     	;# 
  3707  0E28                     	;# 
  3708  0E29                     	;# 
  3709  0E2A                     	;# 
  3710  0E2B                     	;# 
  3711  0E2C                     	;# 
  3712  0E2D                     	;# 
  3713  0E2E                     	;# 
  3714  0E2F                     	;# 
  3715  0E90                     	;# 
  3716  0E91                     	;# 
  3717  0E92                     	;# 
  3718  0E94                     	;# 
  3719  0E95                     	;# 
  3720  0E9C                     	;# 
  3721  0E9D                     	;# 
  3722  0E9E                     	;# 
  3723  0E9F                     	;# 
  3724  0EA0                     	;# 
  3725  0EA1                     	;# 
  3726  0EA2                     	;# 
  3727  0EA3                     	;# 
  3728  0EA4                     	;# 
  3729  0EA5                     	;# 
  3730  0EA6                     	;# 
  3731  0EA7                     	;# 
  3732  0F0F                     	;# 
  3733  0F10                     	;# 
  3734  0F11                     	;# 
  3735  0F12                     	;# 
  3736  0F13                     	;# 
  3737  0F14                     	;# 
  3738  0F15                     	;# 
  3739  0F16                     	;# 
  3740  0F17                     	;# 
  3741  0F18                     	;# 
  3742  0F19                     	;# 
  3743  0F1A                     	;# 
  3744  0F1B                     	;# 
  3745  0F1C                     	;# 
  3746  0F1D                     	;# 
  3747  0F1E                     	;# 
  3748  0F1F                     	;# 
  3749  0F20                     	;# 
  3750  0F21                     	;# 
  3751  0F22                     	;# 
  3752  0F23                     	;# 
  3753  0F24                     	;# 
  3754  0F25                     	;# 
  3755  0F26                     	;# 
  3756  0F27                     	;# 
  3757  0F28                     	;# 
  3758  0F29                     	;# 
  3759  0F2A                     	;# 
  3760  0F2B                     	;# 
  3761  0F2C                     	;# 
  3762  0F2D                     	;# 
  3763  0F2E                     	;# 
  3764  0F2F                     	;# 
  3765  0F30                     	;# 
  3766  0F31                     	;# 
  3767  0F32                     	;# 
  3768  0F33                     	;# 
  3769  0F34                     	;# 
  3770  0F35                     	;# 
  3771  0F36                     	;# 
  3772  0F37                     	;# 
  3773  0FE4                     	;# 
  3774  0FE5                     	;# 
  3775  0FE6                     	;# 
  3776  0FE7                     	;# 
  3777  0FE8                     	;# 
  3778  0FE9                     	;# 
  3779  0FEA                     	;# 
  3780  0FEB                     	;# 
  3781  0FED                     	;# 
  3782  0FEE                     	;# 
  3783  0FEF                     	;# 
  3784  0000                     	;# 
  3785  0001                     	;# 
  3786  0002                     	;# 
  3787  0003                     	;# 
  3788  0004                     	;# 
  3789  0005                     	;# 
  3790  0006                     	;# 
  3791  0007                     	;# 
  3792  0008                     	;# 
  3793  0009                     	;# 
  3794  000A                     	;# 
  3795  000B                     	;# 
  3796  000C                     	;# 
  3797  000D                     	;# 
  3798  000E                     	;# 
  3799  0010                     	;# 
  3800  0011                     	;# 
  3801  0012                     	;# 
  3802  0013                     	;# 
  3803  0014                     	;# 
  3804  0015                     	;# 
  3805  0015                     	;# 
  3806  0016                     	;# 
  3807  0016                     	;# 
  3808  0017                     	;# 
  3809  0018                     	;# 
  3810  0019                     	;# 
  3811  0019                     	;# 
  3812  001A                     	;# 
  3813  001B                     	;# 
  3814  001C                     	;# 
  3815  001D                     	;# 
  3816  001E                     	;# 
  3817  001F                     	;# 
  3818  008C                     	;# 
  3819  008D                     	;# 
  3820  008E                     	;# 
  3821  0090                     	;# 
  3822  0091                     	;# 
  3823  0092                     	;# 
  3824  0093                     	;# 
  3825  0094                     	;# 
  3826  0097                     	;# 
  3827  009B                     	;# 
  3828  009B                     	;# 
  3829  009C                     	;# 
  3830  009D                     	;# 
  3831  009E                     	;# 
  3832  009F                     	;# 
  3833  010C                     	;# 
  3834  010D                     	;# 
  3835  010E                     	;# 
  3836  0111                     	;# 
  3837  0112                     	;# 
  3838  0113                     	;# 
  3839  0114                     	;# 
  3840  0115                     	;# 
  3841  0116                     	;# 
  3842  0117                     	;# 
  3843  0118                     	;# 
  3844  0119                     	;# 
  3845  018C                     	;# 
  3846  018D                     	;# 
  3847  018E                     	;# 
  3848  0199                     	;# 
  3849  0199                     	;# 
  3850  0199                     	;# 
  3851  019A                     	;# 
  3852  019A                     	;# 
  3853  019A                     	;# 
  3854  019B                     	;# 
  3855  019B                     	;# 
  3856  019B                     	;# 
  3857  019B                     	;# 
  3858  019B                     	;# 
  3859  019C                     	;# 
  3860  019C                     	;# 
  3861  019C                     	;# 
  3862  019D                     	;# 
  3863  019D                     	;# 
  3864  019D                     	;# 
  3865  019E                     	;# 
  3866  019E                     	;# 
  3867  019E                     	;# 
  3868  019F                     	;# 
  3869  019F                     	;# 
  3870  019F                     	;# 
  3871  019F                     	;# 
  3872  019F                     	;# 
  3873  020C                     	;# 
  3874  020D                     	;# 
  3875  020E                     	;# 
  3876  0211                     	;# 
  3877  0211                     	;# 
  3878  0212                     	;# 
  3879  0212                     	;# 
  3880  0213                     	;# 
  3881  0213                     	;# 
  3882  0214                     	;# 
  3883  0214                     	;# 
  3884  0215                     	;# 
  3885  0215                     	;# 
  3886  0215                     	;# 
  3887  0215                     	;# 
  3888  0216                     	;# 
  3889  0216                     	;# 
  3890  0217                     	;# 
  3891  0217                     	;# 
  3892  0219                     	;# 
  3893  021A                     	;# 
  3894  021B                     	;# 
  3895  021C                     	;# 
  3896  021D                     	;# 
  3897  021D                     	;# 
  3898  021E                     	;# 
  3899  021F                     	;# 
  3900  028C                     	;# 
  3901  028D                     	;# 
  3902  028E                     	;# 
  3903  0291                     	;# 
  3904  0291                     	;# 
  3905  0292                     	;# 
  3906  0293                     	;# 
  3907  0294                     	;# 
  3908  0295                     	;# 
  3909  0295                     	;# 
  3910  0296                     	;# 
  3911  0297                     	;# 
  3912  0298                     	;# 
  3913  029F                     	;# 
  3914  030C                     	;# 
  3915  030D                     	;# 
  3916  030E                     	;# 
  3917  0311                     	;# 
  3918  0311                     	;# 
  3919  0312                     	;# 
  3920  0313                     	;# 
  3921  0314                     	;# 
  3922  0315                     	;# 
  3923  0315                     	;# 
  3924  0316                     	;# 
  3925  0317                     	;# 
  3926  0318                     	;# 
  3927  038C                     	;# 
  3928  038D                     	;# 
  3929  038E                     	;# 
  3930  0391                     	;# 
  3931  0392                     	;# 
  3932  0393                     	;# 
  3933  0394                     	;# 
  3934  0395                     	;# 
  3935  0396                     	;# 
  3936  0397                     	;# 
  3937  0398                     	;# 
  3938  0399                     	;# 
  3939  039A                     	;# 
  3940  039C                     	;# 
  3941  039D                     	;# 
  3942  039E                     	;# 
  3943  039F                     	;# 
  3944  0411                     	;# 
  3945  0411                     	;# 
  3946  0412                     	;# 
  3947  0413                     	;# 
  3948  0414                     	;# 
  3949  0415                     	;# 
  3950  0416                     	;# 
  3951  0417                     	;# 
  3952  0418                     	;# 
  3953  0418                     	;# 
  3954  0419                     	;# 
  3955  041A                     	;# 
  3956  041B                     	;# 
  3957  041C                     	;# 
  3958  041D                     	;# 
  3959  041E                     	;# 
  3960  041F                     	;# 
  3961  0498                     	;# 
  3962  0498                     	;# 
  3963  0499                     	;# 
  3964  049A                     	;# 
  3965  049B                     	;# 
  3966  049B                     	;# 
  3967  049C                     	;# 
  3968  049D                     	;# 
  3969  049E                     	;# 
  3970  049F                     	;# 
  3971  0617                     	;# 
  3972  0618                     	;# 
  3973  0619                     	;# 
  3974  0619                     	;# 
  3975  061A                     	;# 
  3976  061B                     	;# 
  3977  061C                     	;# 
  3978  061C                     	;# 
  3979  061F                     	;# 
  3980  0691                     	;# 
  3981  0692                     	;# 
  3982  0693                     	;# 
  3983  0694                     	;# 
  3984  0695                     	;# 
  3985  0696                     	;# 
  3986  0697                     	;# 
  3987  0698                     	;# 
  3988  0699                     	;# 
  3989  0711                     	;# 
  3990  0712                     	;# 
  3991  0713                     	;# 
  3992  0714                     	;# 
  3993  0715                     	;# 
  3994  0716                     	;# 
  3995  0717                     	;# 
  3996  0718                     	;# 
  3997  0719                     	;# 
  3998  0891                     	;# 
  3999  0891                     	;# 
  4000  0891                     	;# 
  4001  0891                     	;# 
  4002  0891                     	;# 
  4003  0891                     	;# 
  4004  0892                     	;# 
  4005  0892                     	;# 
  4006  0892                     	;# 
  4007  0893                     	;# 
  4008  0893                     	;# 
  4009  0893                     	;# 
  4010  0893                     	;# 
  4011  0893                     	;# 
  4012  0893                     	;# 
  4013  0894                     	;# 
  4014  0894                     	;# 
  4015  0894                     	;# 
  4016  0895                     	;# 
  4017  0895                     	;# 
  4018  0895                     	;# 
  4019  0896                     	;# 
  4020  0896                     	;# 
  4021  0896                     	;# 
  4022  089B                     	;# 
  4023  0911                     	;# 
  4024  0912                     	;# 
  4025  0913                     	;# 
  4026  0914                     	;# 
  4027  0915                     	;# 
  4028  0916                     	;# 
  4029  0918                     	;# 
  4030  0919                     	;# 
  4031  091A                     	;# 
  4032  091B                     	;# 
  4033  091C                     	;# 
  4034  091D                     	;# 
  4035  091E                     	;# 
  4036  091F                     	;# 
  4037  0E0F                     	;# 
  4038  0E10                     	;# 
  4039  0E11                     	;# 
  4040  0E12                     	;# 
  4041  0E13                     	;# 
  4042  0E14                     	;# 
  4043  0E15                     	;# 
  4044  0E16                     	;# 
  4045  0E17                     	;# 
  4046  0E18                     	;# 
  4047  0E19                     	;# 
  4048  0E1A                     	;# 
  4049  0E1B                     	;# 
  4050  0E1C                     	;# 
  4051  0E1D                     	;# 
  4052  0E1E                     	;# 
  4053  0E1F                     	;# 
  4054  0E20                     	;# 
  4055  0E21                     	;# 
  4056  0E22                     	;# 
  4057  0E24                     	;# 
  4058  0E25                     	;# 
  4059  0E28                     	;# 
  4060  0E29                     	;# 
  4061  0E2A                     	;# 
  4062  0E2B                     	;# 
  4063  0E2C                     	;# 
  4064  0E2D                     	;# 
  4065  0E2E                     	;# 
  4066  0E2F                     	;# 
  4067  0E90                     	;# 
  4068  0E91                     	;# 
  4069  0E92                     	;# 
  4070  0E94                     	;# 
  4071  0E95                     	;# 
  4072  0E9C                     	;# 
  4073  0E9D                     	;# 
  4074  0E9E                     	;# 
  4075  0E9F                     	;# 
  4076  0EA0                     	;# 
  4077  0EA1                     	;# 
  4078  0EA2                     	;# 
  4079  0EA3                     	;# 
  4080  0EA4                     	;# 
  4081  0EA5                     	;# 
  4082  0EA6                     	;# 
  4083  0EA7                     	;# 
  4084  0F0F                     	;# 
  4085  0F10                     	;# 
  4086  0F11                     	;# 
  4087  0F12                     	;# 
  4088  0F13                     	;# 
  4089  0F14                     	;# 
  4090  0F15                     	;# 
  4091  0F16                     	;# 
  4092  0F17                     	;# 
  4093  0F18                     	;# 
  4094  0F19                     	;# 
  4095  0F1A                     	;# 
  4096  0F1B                     	;# 
  4097  0F1C                     	;# 
  4098  0F1D                     	;# 
  4099  0F1E                     	;# 
  4100  0F1F                     	;# 
  4101  0F20                     	;# 
  4102  0F21                     	;# 
  4103  0F22                     	;# 
  4104  0F23                     	;# 
  4105  0F24                     	;# 
  4106  0F25                     	;# 
  4107  0F26                     	;# 
  4108  0F27                     	;# 
  4109  0F28                     	;# 
  4110  0F29                     	;# 
  4111  0F2A                     	;# 
  4112  0F2B                     	;# 
  4113  0F2C                     	;# 
  4114  0F2D                     	;# 
  4115  0F2E                     	;# 
  4116  0F2F                     	;# 
  4117  0F30                     	;# 
  4118  0F31                     	;# 
  4119  0F32                     	;# 
  4120  0F33                     	;# 
  4121  0F34                     	;# 
  4122  0F35                     	;# 
  4123  0F36                     	;# 
  4124  0F37                     	;# 
  4125  0FE4                     	;# 
  4126  0FE5                     	;# 
  4127  0FE6                     	;# 
  4128  0FE7                     	;# 
  4129  0FE8                     	;# 
  4130  0FE9                     	;# 
  4131  0FEA                     	;# 
  4132  0FEB                     	;# 
  4133  0FED                     	;# 
  4134  0FEE                     	;# 
  4135  0FEF                     	;# 
  4136  0000                     	;# 
  4137  0001                     	;# 
  4138  0002                     	;# 
  4139  0003                     	;# 
  4140  0004                     	;# 
  4141  0005                     	;# 
  4142  0006                     	;# 
  4143  0007                     	;# 
  4144  0008                     	;# 
  4145  0009                     	;# 
  4146  000A                     	;# 
  4147  000B                     	;# 
  4148  000C                     	;# 
  4149  000D                     	;# 
  4150  000E                     	;# 
  4151  0010                     	;# 
  4152  0011                     	;# 
  4153  0012                     	;# 
  4154  0013                     	;# 
  4155  0014                     	;# 
  4156  0015                     	;# 
  4157  0015                     	;# 
  4158  0016                     	;# 
  4159  0016                     	;# 
  4160  0017                     	;# 
  4161  0018                     	;# 
  4162  0019                     	;# 
  4163  0019                     	;# 
  4164  001A                     	;# 
  4165  001B                     	;# 
  4166  001C                     	;# 
  4167  001D                     	;# 
  4168  001E                     	;# 
  4169  001F                     	;# 
  4170  008C                     	;# 
  4171  008D                     	;# 
  4172  008E                     	;# 
  4173  0090                     	;# 
  4174  0091                     	;# 
  4175  0092                     	;# 
  4176  0093                     	;# 
  4177  0094                     	;# 
  4178  0097                     	;# 
  4179  009B                     	;# 
  4180  009B                     	;# 
  4181  009C                     	;# 
  4182  009D                     	;# 
  4183  009E                     	;# 
  4184  009F                     	;# 
  4185  010C                     	;# 
  4186  010D                     	;# 
  4187  010E                     	;# 
  4188  0111                     	;# 
  4189  0112                     	;# 
  4190  0113                     	;# 
  4191  0114                     	;# 
  4192  0115                     	;# 
  4193  0116                     	;# 
  4194  0117                     	;# 
  4195  0118                     	;# 
  4196  0119                     	;# 
  4197  018C                     	;# 
  4198  018D                     	;# 
  4199  018E                     	;# 
  4200  0199                     	;# 
  4201  0199                     	;# 
  4202  0199                     	;# 
  4203  019A                     	;# 
  4204  019A                     	;# 
  4205  019A                     	;# 
  4206  019B                     	;# 
  4207  019B                     	;# 
  4208  019B                     	;# 
  4209  019B                     	;# 
  4210  019B                     	;# 
  4211  019C                     	;# 
  4212  019C                     	;# 
  4213  019C                     	;# 
  4214  019D                     	;# 
  4215  019D                     	;# 
  4216  019D                     	;# 
  4217  019E                     	;# 
  4218  019E                     	;# 
  4219  019E                     	;# 
  4220  019F                     	;# 
  4221  019F                     	;# 
  4222  019F                     	;# 
  4223  019F                     	;# 
  4224  019F                     	;# 
  4225  020C                     	;# 
  4226  020D                     	;# 
  4227  020E                     	;# 
  4228  0211                     	;# 
  4229  0211                     	;# 
  4230  0212                     	;# 
  4231  0212                     	;# 
  4232  0213                     	;# 
  4233  0213                     	;# 
  4234  0214                     	;# 
  4235  0214                     	;# 
  4236  0215                     	;# 
  4237  0215                     	;# 
  4238  0215                     	;# 
  4239  0215                     	;# 
  4240  0216                     	;# 
  4241  0216                     	;# 
  4242  0217                     	;# 
  4243  0217                     	;# 
  4244  0219                     	;# 
  4245  021A                     	;# 
  4246  021B                     	;# 
  4247  021C                     	;# 
  4248  021D                     	;# 
  4249  021D                     	;# 
  4250  021E                     	;# 
  4251  021F                     	;# 
  4252  028C                     	;# 
  4253  028D                     	;# 
  4254  028E                     	;# 
  4255  0291                     	;# 
  4256  0291                     	;# 
  4257  0292                     	;# 
  4258  0293                     	;# 
  4259  0294                     	;# 
  4260  0295                     	;# 
  4261  0295                     	;# 
  4262  0296                     	;# 
  4263  0297                     	;# 
  4264  0298                     	;# 
  4265  029F                     	;# 
  4266  030C                     	;# 
  4267  030D                     	;# 
  4268  030E                     	;# 
  4269  0311                     	;# 
  4270  0311                     	;# 
  4271  0312                     	;# 
  4272  0313                     	;# 
  4273  0314                     	;# 
  4274  0315                     	;# 
  4275  0315                     	;# 
  4276  0316                     	;# 
  4277  0317                     	;# 
  4278  0318                     	;# 
  4279  038C                     	;# 
  4280  038D                     	;# 
  4281  038E                     	;# 
  4282  0391                     	;# 
  4283  0392                     	;# 
  4284  0393                     	;# 
  4285  0394                     	;# 
  4286  0395                     	;# 
  4287  0396                     	;# 
  4288  0397                     	;# 
  4289  0398                     	;# 
  4290  0399                     	;# 
  4291  039A                     	;# 
  4292  039C                     	;# 
  4293  039D                     	;# 
  4294  039E                     	;# 
  4295  039F                     	;# 
  4296  0411                     	;# 
  4297  0411                     	;# 
  4298  0412                     	;# 
  4299  0413                     	;# 
  4300  0414                     	;# 
  4301  0415                     	;# 
  4302  0416                     	;# 
  4303  0417                     	;# 
  4304  0418                     	;# 
  4305  0418                     	;# 
  4306  0419                     	;# 
  4307  041A                     	;# 
  4308  041B                     	;# 
  4309  041C                     	;# 
  4310  041D                     	;# 
  4311  041E                     	;# 
  4312  041F                     	;# 
  4313  0498                     	;# 
  4314  0498                     	;# 
  4315  0499                     	;# 
  4316  049A                     	;# 
  4317  049B                     	;# 
  4318  049B                     	;# 
  4319  049C                     	;# 
  4320  049D                     	;# 
  4321  049E                     	;# 
  4322  049F                     	;# 
  4323  0617                     	;# 
  4324  0618                     	;# 
  4325  0619                     	;# 
  4326  0619                     	;# 
  4327  061A                     	;# 
  4328  061B                     	;# 
  4329  061C                     	;# 
  4330  061C                     	;# 
  4331  061F                     	;# 
  4332  0691                     	;# 
  4333  0692                     	;# 
  4334  0693                     	;# 
  4335  0694                     	;# 
  4336  0695                     	;# 
  4337  0696                     	;# 
  4338  0697                     	;# 
  4339  0698                     	;# 
  4340  0699                     	;# 
  4341  0711                     	;# 
  4342  0712                     	;# 
  4343  0713                     	;# 
  4344  0714                     	;# 
  4345  0715                     	;# 
  4346  0716                     	;# 
  4347  0717                     	;# 
  4348  0718                     	;# 
  4349  0719                     	;# 
  4350  0891                     	;# 
  4351  0891                     	;# 
  4352  0891                     	;# 
  4353  0891                     	;# 
  4354  0891                     	;# 
  4355  0891                     	;# 
  4356  0892                     	;# 
  4357  0892                     	;# 
  4358  0892                     	;# 
  4359  0893                     	;# 
  4360  0893                     	;# 
  4361  0893                     	;# 
  4362  0893                     	;# 
  4363  0893                     	;# 
  4364  0893                     	;# 
  4365  0894                     	;# 
  4366  0894                     	;# 
  4367  0894                     	;# 
  4368  0895                     	;# 
  4369  0895                     	;# 
  4370  0895                     	;# 
  4371  0896                     	;# 
  4372  0896                     	;# 
  4373  0896                     	;# 
  4374  089B                     	;# 
  4375  0911                     	;# 
  4376  0912                     	;# 
  4377  0913                     	;# 
  4378  0914                     	;# 
  4379  0915                     	;# 
  4380  0916                     	;# 
  4381  0918                     	;# 
  4382  0919                     	;# 
  4383  091A                     	;# 
  4384  091B                     	;# 
  4385  091C                     	;# 
  4386  091D                     	;# 
  4387  091E                     	;# 
  4388  091F                     	;# 
  4389  0E0F                     	;# 
  4390  0E10                     	;# 
  4391  0E11                     	;# 
  4392  0E12                     	;# 
  4393  0E13                     	;# 
  4394  0E14                     	;# 
  4395  0E15                     	;# 
  4396  0E16                     	;# 
  4397  0E17                     	;# 
  4398  0E18                     	;# 
  4399  0E19                     	;# 
  4400  0E1A                     	;# 
  4401  0E1B                     	;# 
  4402  0E1C                     	;# 
  4403  0E1D                     	;# 
  4404  0E1E                     	;# 
  4405  0E1F                     	;# 
  4406  0E20                     	;# 
  4407  0E21                     	;# 
  4408  0E22                     	;# 
  4409  0E24                     	;# 
  4410  0E25                     	;# 
  4411  0E28                     	;# 
  4412  0E29                     	;# 
  4413  0E2A                     	;# 
  4414  0E2B                     	;# 
  4415  0E2C                     	;# 
  4416  0E2D                     	;# 
  4417  0E2E                     	;# 
  4418  0E2F                     	;# 
  4419  0E90                     	;# 
  4420  0E91                     	;# 
  4421  0E92                     	;# 
  4422  0E94                     	;# 
  4423  0E95                     	;# 
  4424  0E9C                     	;# 
  4425  0E9D                     	;# 
  4426  0E9E                     	;# 
  4427  0E9F                     	;# 
  4428  0EA0                     	;# 
  4429  0EA1                     	;# 
  4430  0EA2                     	;# 
  4431  0EA3                     	;# 
  4432  0EA4                     	;# 
  4433  0EA5                     	;# 
  4434  0EA6                     	;# 
  4435  0EA7                     	;# 
  4436  0F0F                     	;# 
  4437  0F10                     	;# 
  4438  0F11                     	;# 
  4439  0F12                     	;# 
  4440  0F13                     	;# 
  4441  0F14                     	;# 
  4442  0F15                     	;# 
  4443  0F16                     	;# 
  4444  0F17                     	;# 
  4445  0F18                     	;# 
  4446  0F19                     	;# 
  4447  0F1A                     	;# 
  4448  0F1B                     	;# 
  4449  0F1C                     	;# 
  4450  0F1D                     	;# 
  4451  0F1E                     	;# 
  4452  0F1F                     	;# 
  4453  0F20                     	;# 
  4454  0F21                     	;# 
  4455  0F22                     	;# 
  4456  0F23                     	;# 
  4457  0F24                     	;# 
  4458  0F25                     	;# 
  4459  0F26                     	;# 
  4460  0F27                     	;# 
  4461  0F28                     	;# 
  4462  0F29                     	;# 
  4463  0F2A                     	;# 
  4464  0F2B                     	;# 
  4465  0F2C                     	;# 
  4466  0F2D                     	;# 
  4467  0F2E                     	;# 
  4468  0F2F                     	;# 
  4469  0F30                     	;# 
  4470  0F31                     	;# 
  4471  0F32                     	;# 
  4472  0F33                     	;# 
  4473  0F34                     	;# 
  4474  0F35                     	;# 
  4475  0F36                     	;# 
  4476  0F37                     	;# 
  4477  0FE4                     	;# 
  4478  0FE5                     	;# 
  4479  0FE6                     	;# 
  4480  0FE7                     	;# 
  4481  0FE8                     	;# 
  4482  0FE9                     	;# 
  4483  0FEA                     	;# 
  4484  0FEB                     	;# 
  4485  0FED                     	;# 
  4486  0FEE                     	;# 
  4487  0FEF                     	;# 
  4488  0000                     	;# 
  4489  0001                     	;# 
  4490  0002                     	;# 
  4491  0003                     	;# 
  4492  0004                     	;# 
  4493  0005                     	;# 
  4494  0006                     	;# 
  4495  0007                     	;# 
  4496  0008                     	;# 
  4497  0009                     	;# 
  4498  000A                     	;# 
  4499  000B                     	;# 
  4500  000C                     	;# 
  4501  000D                     	;# 
  4502  000E                     	;# 
  4503  0010                     	;# 
  4504  0011                     	;# 
  4505  0012                     	;# 
  4506  0013                     	;# 
  4507  0014                     	;# 
  4508  0015                     	;# 
  4509  0015                     	;# 
  4510  0016                     	;# 
  4511  0016                     	;# 
  4512  0017                     	;# 
  4513  0018                     	;# 
  4514  0019                     	;# 
  4515  0019                     	;# 
  4516  001A                     	;# 
  4517  001B                     	;# 
  4518  001C                     	;# 
  4519  001D                     	;# 
  4520  001E                     	;# 
  4521  001F                     	;# 
  4522  008C                     	;# 
  4523  008D                     	;# 
  4524  008E                     	;# 
  4525  0090                     	;# 
  4526  0091                     	;# 
  4527  0092                     	;# 
  4528  0093                     	;# 
  4529  0094                     	;# 
  4530  0097                     	;# 
  4531  009B                     	;# 
  4532  009B                     	;# 
  4533  009C                     	;# 
  4534  009D                     	;# 
  4535  009E                     	;# 
  4536  009F                     	;# 
  4537  010C                     	;# 
  4538  010D                     	;# 
  4539  010E                     	;# 
  4540  0111                     	;# 
  4541  0112                     	;# 
  4542  0113                     	;# 
  4543  0114                     	;# 
  4544  0115                     	;# 
  4545  0116                     	;# 
  4546  0117                     	;# 
  4547  0118                     	;# 
  4548  0119                     	;# 
  4549  018C                     	;# 
  4550  018D                     	;# 
  4551  018E                     	;# 
  4552  0199                     	;# 
  4553  0199                     	;# 
  4554  0199                     	;# 
  4555  019A                     	;# 
  4556  019A                     	;# 
  4557  019A                     	;# 
  4558  019B                     	;# 
  4559  019B                     	;# 
  4560  019B                     	;# 
  4561  019B                     	;# 
  4562  019B                     	;# 
  4563  019C                     	;# 
  4564  019C                     	;# 
  4565  019C                     	;# 
  4566  019D                     	;# 
  4567  019D                     	;# 
  4568  019D                     	;# 
  4569  019E                     	;# 
  4570  019E                     	;# 
  4571  019E                     	;# 
  4572  019F                     	;# 
  4573  019F                     	;# 
  4574  019F                     	;# 
  4575  019F                     	;# 
  4576  019F                     	;# 
  4577  020C                     	;# 
  4578  020D                     	;# 
  4579  020E                     	;# 
  4580  0211                     	;# 
  4581  0211                     	;# 
  4582  0212                     	;# 
  4583  0212                     	;# 
  4584  0213                     	;# 
  4585  0213                     	;# 
  4586  0214                     	;# 
  4587  0214                     	;# 
  4588  0215                     	;# 
  4589  0215                     	;# 
  4590  0215                     	;# 
  4591  0215                     	;# 
  4592  0216                     	;# 
  4593  0216                     	;# 
  4594  0217                     	;# 
  4595  0217                     	;# 
  4596  0219                     	;# 
  4597  021A                     	;# 
  4598  021B                     	;# 
  4599  021C                     	;# 
  4600  021D                     	;# 
  4601  021D                     	;# 
  4602  021E                     	;# 
  4603  021F                     	;# 
  4604  028C                     	;# 
  4605  028D                     	;# 
  4606  028E                     	;# 
  4607  0291                     	;# 
  4608  0291                     	;# 
  4609  0292                     	;# 
  4610  0293                     	;# 
  4611  0294                     	;# 
  4612  0295                     	;# 
  4613  0295                     	;# 
  4614  0296                     	;# 
  4615  0297                     	;# 
  4616  0298                     	;# 
  4617  029F                     	;# 
  4618  030C                     	;# 
  4619  030D                     	;# 
  4620  030E                     	;# 
  4621  0311                     	;# 
  4622  0311                     	;# 
  4623  0312                     	;# 
  4624  0313                     	;# 
  4625  0314                     	;# 
  4626  0315                     	;# 
  4627  0315                     	;# 
  4628  0316                     	;# 
  4629  0317                     	;# 
  4630  0318                     	;# 
  4631  038C                     	;# 
  4632  038D                     	;# 
  4633  038E                     	;# 
  4634  0391                     	;# 
  4635  0392                     	;# 
  4636  0393                     	;# 
  4637  0394                     	;# 
  4638  0395                     	;# 
  4639  0396                     	;# 
  4640  0397                     	;# 
  4641  0398                     	;# 
  4642  0399                     	;# 
  4643  039A                     	;# 
  4644  039C                     	;# 
  4645  039D                     	;# 
  4646  039E                     	;# 
  4647  039F                     	;# 
  4648  0411                     	;# 
  4649  0411                     	;# 
  4650  0412                     	;# 
  4651  0413                     	;# 
  4652  0414                     	;# 
  4653  0415                     	;# 
  4654  0416                     	;# 
  4655  0417                     	;# 
  4656  0418                     	;# 
  4657  0418                     	;# 
  4658  0419                     	;# 
  4659  041A                     	;# 
  4660  041B                     	;# 
  4661  041C                     	;# 
  4662  041D                     	;# 
  4663  041E                     	;# 
  4664  041F                     	;# 
  4665  0498                     	;# 
  4666  0498                     	;# 
  4667  0499                     	;# 
  4668  049A                     	;# 
  4669  049B                     	;# 
  4670  049B                     	;# 
  4671  049C                     	;# 
  4672  049D                     	;# 
  4673  049E                     	;# 
  4674  049F                     	;# 
  4675  0617                     	;# 
  4676  0618                     	;# 
  4677  0619                     	;# 
  4678  0619                     	;# 
  4679  061A                     	;# 
  4680  061B                     	;# 
  4681  061C                     	;# 
  4682  061C                     	;# 
  4683  061F                     	;# 
  4684  0691                     	;# 
  4685  0692                     	;# 
  4686  0693                     	;# 
  4687  0694                     	;# 
  4688  0695                     	;# 
  4689  0696                     	;# 
  4690  0697                     	;# 
  4691  0698                     	;# 
  4692  0699                     	;# 
  4693  0711                     	;# 
  4694  0712                     	;# 
  4695  0713                     	;# 
  4696  0714                     	;# 
  4697  0715                     	;# 
  4698  0716                     	;# 
  4699  0717                     	;# 
  4700  0718                     	;# 
  4701  0719                     	;# 
  4702  0891                     	;# 
  4703  0891                     	;# 
  4704  0891                     	;# 
  4705  0891                     	;# 
  4706  0891                     	;# 
  4707  0891                     	;# 
  4708  0892                     	;# 
  4709  0892                     	;# 
  4710  0892                     	;# 
  4711  0893                     	;# 
  4712  0893                     	;# 
  4713  0893                     	;# 
  4714  0893                     	;# 
  4715  0893                     	;# 
  4716  0893                     	;# 
  4717  0894                     	;# 
  4718  0894                     	;# 
  4719  0894                     	;# 
  4720  0895                     	;# 
  4721  0895                     	;# 
  4722  0895                     	;# 
  4723  0896                     	;# 
  4724  0896                     	;# 
  4725  0896                     	;# 
  4726  089B                     	;# 
  4727  0911                     	;# 
  4728  0912                     	;# 
  4729  0913                     	;# 
  4730  0914                     	;# 
  4731  0915                     	;# 
  4732  0916                     	;# 
  4733  0918                     	;# 
  4734  0919                     	;# 
  4735  091A                     	;# 
  4736  091B                     	;# 
  4737  091C                     	;# 
  4738  091D                     	;# 
  4739  091E                     	;# 
  4740  091F                     	;# 
  4741  0E0F                     	;# 
  4742  0E10                     	;# 
  4743  0E11                     	;# 
  4744  0E12                     	;# 
  4745  0E13                     	;# 
  4746  0E14                     	;# 
  4747  0E15                     	;# 
  4748  0E16                     	;# 
  4749  0E17                     	;# 
  4750  0E18                     	;# 
  4751  0E19                     	;# 
  4752  0E1A                     	;# 
  4753  0E1B                     	;# 
  4754  0E1C                     	;# 
  4755  0E1D                     	;# 
  4756  0E1E                     	;# 
  4757  0E1F                     	;# 
  4758  0E20                     	;# 
  4759  0E21                     	;# 
  4760  0E22                     	;# 
  4761  0E24                     	;# 
  4762  0E25                     	;# 
  4763  0E28                     	;# 
  4764  0E29                     	;# 
  4765  0E2A                     	;# 
  4766  0E2B                     	;# 
  4767  0E2C                     	;# 
  4768  0E2D                     	;# 
  4769  0E2E                     	;# 
  4770  0E2F                     	;# 
  4771  0E90                     	;# 
  4772  0E91                     	;# 
  4773  0E92                     	;# 
  4774  0E94                     	;# 
  4775  0E95                     	;# 
  4776  0E9C                     	;# 
  4777  0E9D                     	;# 
  4778  0E9E                     	;# 
  4779  0E9F                     	;# 
  4780  0EA0                     	;# 
  4781  0EA1                     	;# 
  4782  0EA2                     	;# 
  4783  0EA3                     	;# 
  4784  0EA4                     	;# 
  4785  0EA5                     	;# 
  4786  0EA6                     	;# 
  4787  0EA7                     	;# 
  4788  0F0F                     	;# 
  4789  0F10                     	;# 
  4790  0F11                     	;# 
  4791  0F12                     	;# 
  4792  0F13                     	;# 
  4793  0F14                     	;# 
  4794  0F15                     	;# 
  4795  0F16                     	;# 
  4796  0F17                     	;# 
  4797  0F18                     	;# 
  4798  0F19                     	;# 
  4799  0F1A                     	;# 
  4800  0F1B                     	;# 
  4801  0F1C                     	;# 
  4802  0F1D                     	;# 
  4803  0F1E                     	;# 
  4804  0F1F                     	;# 
  4805  0F20                     	;# 
  4806  0F21                     	;# 
  4807  0F22                     	;# 
  4808  0F23                     	;# 
  4809  0F24                     	;# 
  4810  0F25                     	;# 
  4811  0F26                     	;# 
  4812  0F27                     	;# 
  4813  0F28                     	;# 
  4814  0F29                     	;# 
  4815  0F2A                     	;# 
  4816  0F2B                     	;# 
  4817  0F2C                     	;# 
  4818  0F2D                     	;# 
  4819  0F2E                     	;# 
  4820  0F2F                     	;# 
  4821  0F30                     	;# 
  4822  0F31                     	;# 
  4823  0F32                     	;# 
  4824  0F33                     	;# 
  4825  0F34                     	;# 
  4826  0F35                     	;# 
  4827  0F36                     	;# 
  4828  0F37                     	;# 
  4829  0FE4                     	;# 
  4830  0FE5                     	;# 
  4831  0FE6                     	;# 
  4832  0FE7                     	;# 
  4833  0FE8                     	;# 
  4834  0FE9                     	;# 
  4835  0FEA                     	;# 
  4836  0FEB                     	;# 
  4837  0FED                     	;# 
  4838  0FEE                     	;# 
  4839  0FEF                     	;# 
  4840  0000                     	;# 
  4841  0001                     	;# 
  4842  0002                     	;# 
  4843  0003                     	;# 
  4844  0004                     	;# 
  4845  0005                     	;# 
  4846  0006                     	;# 
  4847  0007                     	;# 
  4848  0008                     	;# 
  4849  0009                     	;# 
  4850  000A                     	;# 
  4851  000B                     	;# 
  4852  000C                     	;# 
  4853  000D                     	;# 
  4854  000E                     	;# 
  4855  0010                     	;# 
  4856  0011                     	;# 
  4857  0012                     	;# 
  4858  0013                     	;# 
  4859  0014                     	;# 
  4860  0015                     	;# 
  4861  0015                     	;# 
  4862  0016                     	;# 
  4863  0016                     	;# 
  4864  0017                     	;# 
  4865  0018                     	;# 
  4866  0019                     	;# 
  4867  0019                     	;# 
  4868  001A                     	;# 
  4869  001B                     	;# 
  4870  001C                     	;# 
  4871  001D                     	;# 
  4872  001E                     	;# 
  4873  001F                     	;# 
  4874  008C                     	;# 
  4875  008D                     	;# 
  4876  008E                     	;# 
  4877  0090                     	;# 
  4878  0091                     	;# 
  4879  0092                     	;# 
  4880  0093                     	;# 
  4881  0094                     	;# 
  4882  0097                     	;# 
  4883  009B                     	;# 
  4884  009B                     	;# 
  4885  009C                     	;# 
  4886  009D                     	;# 
  4887  009E                     	;# 
  4888  009F                     	;# 
  4889  010C                     	;# 
  4890  010D                     	;# 
  4891  010E                     	;# 
  4892  0111                     	;# 
  4893  0112                     	;# 
  4894  0113                     	;# 
  4895  0114                     	;# 
  4896  0115                     	;# 
  4897  0116                     	;# 
  4898  0117                     	;# 
  4899  0118                     	;# 
  4900  0119                     	;# 
  4901  018C                     	;# 
  4902  018D                     	;# 
  4903  018E                     	;# 
  4904  0199                     	;# 
  4905  0199                     	;# 
  4906  0199                     	;# 
  4907  019A                     	;# 
  4908  019A                     	;# 
  4909  019A                     	;# 
  4910  019B                     	;# 
  4911  019B                     	;# 
  4912  019B                     	;# 
  4913  019B                     	;# 
  4914  019B                     	;# 
  4915  019C                     	;# 
  4916  019C                     	;# 
  4917  019C                     	;# 
  4918  019D                     	;# 
  4919  019D                     	;# 
  4920  019D                     	;# 
  4921  019E                     	;# 
  4922  019E                     	;# 
  4923  019E                     	;# 
  4924  019F                     	;# 
  4925  019F                     	;# 
  4926  019F                     	;# 
  4927  019F                     	;# 
  4928  019F                     	;# 
  4929  020C                     	;# 
  4930  020D                     	;# 
  4931  020E                     	;# 
  4932  0211                     	;# 
  4933  0211                     	;# 
  4934  0212                     	;# 
  4935  0212                     	;# 
  4936  0213                     	;# 
  4937  0213                     	;# 
  4938  0214                     	;# 
  4939  0214                     	;# 
  4940  0215                     	;# 
  4941  0215                     	;# 
  4942  0215                     	;# 
  4943  0215                     	;# 
  4944  0216                     	;# 
  4945  0216                     	;# 
  4946  0217                     	;# 
  4947  0217                     	;# 
  4948  0219                     	;# 
  4949  021A                     	;# 
  4950  021B                     	;# 
  4951  021C                     	;# 
  4952  021D                     	;# 
  4953  021D                     	;# 
  4954  021E                     	;# 
  4955  021F                     	;# 
  4956  028C                     	;# 
  4957  028D                     	;# 
  4958  028E                     	;# 
  4959  0291                     	;# 
  4960  0291                     	;# 
  4961  0292                     	;# 
  4962  0293                     	;# 
  4963  0294                     	;# 
  4964  0295                     	;# 
  4965  0295                     	;# 
  4966  0296                     	;# 
  4967  0297                     	;# 
  4968  0298                     	;# 
  4969  029F                     	;# 
  4970  030C                     	;# 
  4971  030D                     	;# 
  4972  030E                     	;# 
  4973  0311                     	;# 
  4974  0311                     	;# 
  4975  0312                     	;# 
  4976  0313                     	;# 
  4977  0314                     	;# 
  4978  0315                     	;# 
  4979  0315                     	;# 
  4980  0316                     	;# 
  4981  0317                     	;# 
  4982  0318                     	;# 
  4983  038C                     	;# 
  4984  038D                     	;# 
  4985  038E                     	;# 
  4986  0391                     	;# 
  4987  0392                     	;# 
  4988  0393                     	;# 
  4989  0394                     	;# 
  4990  0395                     	;# 
  4991  0396                     	;# 
  4992  0397                     	;# 
  4993  0398                     	;# 
  4994  0399                     	;# 
  4995  039A                     	;# 
  4996  039C                     	;# 
  4997  039D                     	;# 
  4998  039E                     	;# 
  4999  039F                     	;# 
  5000  0411                     	;# 
  5001  0411                     	;# 
  5002  0412                     	;# 
  5003  0413                     	;# 
  5004  0414                     	;# 
  5005  0415                     	;# 
  5006  0416                     	;# 
  5007  0417                     	;# 
  5008  0418                     	;# 
  5009  0418                     	;# 
  5010  0419                     	;# 
  5011  041A                     	;# 
  5012  041B                     	;# 
  5013  041C                     	;# 
  5014  041D                     	;# 
  5015  041E                     	;# 
  5016  041F                     	;# 
  5017  0498                     	;# 
  5018  0498                     	;# 
  5019  0499                     	;# 
  5020  049A                     	;# 
  5021  049B                     	;# 
  5022  049B                     	;# 
  5023  049C                     	;# 
  5024  049D                     	;# 
  5025  049E                     	;# 
  5026  049F                     	;# 
  5027  0617                     	;# 
  5028  0618                     	;# 
  5029  0619                     	;# 
  5030  0619                     	;# 
  5031  061A                     	;# 
  5032  061B                     	;# 
  5033  061C                     	;# 
  5034  061C                     	;# 
  5035  061F                     	;# 
  5036  0691                     	;# 
  5037  0692                     	;# 
  5038  0693                     	;# 
  5039  0694                     	;# 
  5040  0695                     	;# 
  5041  0696                     	;# 
  5042  0697                     	;# 
  5043  0698                     	;# 
  5044  0699                     	;# 
  5045  0711                     	;# 
  5046  0712                     	;# 
  5047  0713                     	;# 
  5048  0714                     	;# 
  5049  0715                     	;# 
  5050  0716                     	;# 
  5051  0717                     	;# 
  5052  0718                     	;# 
  5053  0719                     	;# 
  5054  0891                     	;# 
  5055  0891                     	;# 
  5056  0891                     	;# 
  5057  0891                     	;# 
  5058  0891                     	;# 
  5059  0891                     	;# 
  5060  0892                     	;# 
  5061  0892                     	;# 
  5062  0892                     	;# 
  5063  0893                     	;# 
  5064  0893                     	;# 
  5065  0893                     	;# 
  5066  0893                     	;# 
  5067  0893                     	;# 
  5068  0893                     	;# 
  5069  0894                     	;# 
  5070  0894                     	;# 
  5071  0894                     	;# 
  5072  0895                     	;# 
  5073  0895                     	;# 
  5074  0895                     	;# 
  5075  0896                     	;# 
  5076  0896                     	;# 
  5077  0896                     	;# 
  5078  089B                     	;# 
  5079  0911                     	;# 
  5080  0912                     	;# 
  5081  0913                     	;# 
  5082  0914                     	;# 
  5083  0915                     	;# 
  5084  0916                     	;# 
  5085  0918                     	;# 
  5086  0919                     	;# 
  5087  091A                     	;# 
  5088  091B                     	;# 
  5089  091C                     	;# 
  5090  091D                     	;# 
  5091  091E                     	;# 
  5092  091F                     	;# 
  5093  0E0F                     	;# 
  5094  0E10                     	;# 
  5095  0E11                     	;# 
  5096  0E12                     	;# 
  5097  0E13                     	;# 
  5098  0E14                     	;# 
  5099  0E15                     	;# 
  5100  0E16                     	;# 
  5101  0E17                     	;# 
  5102  0E18                     	;# 
  5103  0E19                     	;# 
  5104  0E1A                     	;# 
  5105  0E1B                     	;# 
  5106  0E1C                     	;# 
  5107  0E1D                     	;# 
  5108  0E1E                     	;# 
  5109  0E1F                     	;# 
  5110  0E20                     	;# 
  5111  0E21                     	;# 
  5112  0E22                     	;# 
  5113  0E24                     	;# 
  5114  0E25                     	;# 
  5115  0E28                     	;# 
  5116  0E29                     	;# 
  5117  0E2A                     	;# 
  5118  0E2B                     	;# 
  5119  0E2C                     	;# 
  5120  0E2D                     	;# 
  5121  0E2E                     	;# 
  5122  0E2F                     	;# 
  5123  0E90                     	;# 
  5124  0E91                     	;# 
  5125  0E92                     	;# 
  5126  0E94                     	;# 
  5127  0E95                     	;# 
  5128  0E9C                     	;# 
  5129  0E9D                     	;# 
  5130  0E9E                     	;# 
  5131  0E9F                     	;# 
  5132  0EA0                     	;# 
  5133  0EA1                     	;# 
  5134  0EA2                     	;# 
  5135  0EA3                     	;# 
  5136  0EA4                     	;# 
  5137  0EA5                     	;# 
  5138  0EA6                     	;# 
  5139  0EA7                     	;# 
  5140  0F0F                     	;# 
  5141  0F10                     	;# 
  5142  0F11                     	;# 
  5143  0F12                     	;# 
  5144  0F13                     	;# 
  5145  0F14                     	;# 
  5146  0F15                     	;# 
  5147  0F16                     	;# 
  5148  0F17                     	;# 
  5149  0F18                     	;# 
  5150  0F19                     	;# 
  5151  0F1A                     	;# 
  5152  0F1B                     	;# 
  5153  0F1C                     	;# 
  5154  0F1D                     	;# 
  5155  0F1E                     	;# 
  5156  0F1F                     	;# 
  5157  0F20                     	;# 
  5158  0F21                     	;# 
  5159  0F22                     	;# 
  5160  0F23                     	;# 
  5161  0F24                     	;# 
  5162  0F25                     	;# 
  5163  0F26                     	;# 
  5164  0F27                     	;# 
  5165  0F28                     	;# 
  5166  0F29                     	;# 
  5167  0F2A                     	;# 
  5168  0F2B                     	;# 
  5169  0F2C                     	;# 
  5170  0F2D                     	;# 
  5171  0F2E                     	;# 
  5172  0F2F                     	;# 
  5173  0F30                     	;# 
  5174  0F31                     	;# 
  5175  0F32                     	;# 
  5176  0F33                     	;# 
  5177  0F34                     	;# 
  5178  0F35                     	;# 
  5179  0F36                     	;# 
  5180  0F37                     	;# 
  5181  0FE4                     	;# 
  5182  0FE5                     	;# 
  5183  0FE6                     	;# 
  5184  0FE7                     	;# 
  5185  0FE8                     	;# 
  5186  0FE9                     	;# 
  5187  0FEA                     	;# 
  5188  0FEB                     	;# 
  5189  0FED                     	;# 
  5190  0FEE                     	;# 
  5191  0FEF                     	;# 
  5192  0000                     	;# 
  5193  0001                     	;# 
  5194  0002                     	;# 
  5195  0003                     	;# 
  5196  0004                     	;# 
  5197  0005                     	;# 
  5198  0006                     	;# 
  5199  0007                     	;# 
  5200  0008                     	;# 
  5201  0009                     	;# 
  5202  000A                     	;# 
  5203  000B                     	;# 
  5204  000C                     	;# 
  5205  000D                     	;# 
  5206  000E                     	;# 
  5207  0010                     	;# 
  5208  0011                     	;# 
  5209  0012                     	;# 
  5210  0013                     	;# 
  5211  0014                     	;# 
  5212  0015                     	;# 
  5213  0015                     	;# 
  5214  0016                     	;# 
  5215  0016                     	;# 
  5216  0017                     	;# 
  5217  0018                     	;# 
  5218  0019                     	;# 
  5219  0019                     	;# 
  5220  001A                     	;# 
  5221  001B                     	;# 
  5222  001C                     	;# 
  5223  001D                     	;# 
  5224  001E                     	;# 
  5225  001F                     	;# 
  5226  008C                     	;# 
  5227  008D                     	;# 
  5228  008E                     	;# 
  5229  0090                     	;# 
  5230  0091                     	;# 
  5231  0092                     	;# 
  5232  0093                     	;# 
  5233  0094                     	;# 
  5234  0097                     	;# 
  5235  009B                     	;# 
  5236  009B                     	;# 
  5237  009C                     	;# 
  5238  009D                     	;# 
  5239  009E                     	;# 
  5240  009F                     	;# 
  5241  010C                     	;# 
  5242  010D                     	;# 
  5243  010E                     	;# 
  5244  0111                     	;# 
  5245  0112                     	;# 
  5246  0113                     	;# 
  5247  0114                     	;# 
  5248  0115                     	;# 
  5249  0116                     	;# 
  5250  0117                     	;# 
  5251  0118                     	;# 
  5252  0119                     	;# 
  5253  018C                     	;# 
  5254  018D                     	;# 
  5255  018E                     	;# 
  5256  0197                     	;# 
  5257  0199                     	;# 
  5258  0199                     	;# 
  5259  0199                     	;# 
  5260  019A                     	;# 
  5261  019A                     	;# 
  5262  019A                     	;# 
  5263  019B                     	;# 
  5264  019B                     	;# 
  5265  019B                     	;# 
  5266  019B                     	;# 
  5267  019B                     	;# 
  5268  019C                     	;# 
  5269  019C                     	;# 
  5270  019C                     	;# 
  5271  019D                     	;# 
  5272  019D                     	;# 
  5273  019D                     	;# 
  5274  019E                     	;# 
  5275  019E                     	;# 
  5276  019E                     	;# 
  5277  019F                     	;# 
  5278  019F                     	;# 
  5279  019F                     	;# 
  5280  019F                     	;# 
  5281  019F                     	;# 
  5282  020C                     	;# 
  5283  020D                     	;# 
  5284  020E                     	;# 
  5285  0211                     	;# 
  5286  0211                     	;# 
  5287  0212                     	;# 
  5288  0212                     	;# 
  5289  0213                     	;# 
  5290  0213                     	;# 
  5291  0214                     	;# 
  5292  0214                     	;# 
  5293  0215                     	;# 
  5294  0215                     	;# 
  5295  0215                     	;# 
  5296  0215                     	;# 
  5297  0216                     	;# 
  5298  0216                     	;# 
  5299  0217                     	;# 
  5300  0217                     	;# 
  5301  0219                     	;# 
  5302  021A                     	;# 
  5303  021B                     	;# 
  5304  021C                     	;# 
  5305  021D                     	;# 
  5306  021D                     	;# 
  5307  021E                     	;# 
  5308  021F                     	;# 
  5309  028C                     	;# 
  5310  028D                     	;# 
  5311  028E                     	;# 
  5312  0291                     	;# 
  5313  0291                     	;# 
  5314  0292                     	;# 
  5315  0293                     	;# 
  5316  0294                     	;# 
  5317  0295                     	;# 
  5318  0295                     	;# 
  5319  0296                     	;# 
  5320  0297                     	;# 
  5321  0298                     	;# 
  5322  029F                     	;# 
  5323  030C                     	;# 
  5324  030D                     	;# 
  5325  030E                     	;# 
  5326  0311                     	;# 
  5327  0311                     	;# 
  5328  0312                     	;# 
  5329  0313                     	;# 
  5330  0314                     	;# 
  5331  0315                     	;# 
  5332  0315                     	;# 
  5333  0316                     	;# 
  5334  0317                     	;# 
  5335  0318                     	;# 
  5336  038C                     	;# 
  5337  038D                     	;# 
  5338  038E                     	;# 
  5339  0391                     	;# 
  5340  0392                     	;# 
  5341  0393                     	;# 
  5342  0394                     	;# 
  5343  0395                     	;# 
  5344  0396                     	;# 
  5345  0397                     	;# 
  5346  0398                     	;# 
  5347  0399                     	;# 
  5348  039A                     	;# 
  5349  039C                     	;# 
  5350  039D                     	;# 
  5351  039E                     	;# 
  5352  039F                     	;# 
  5353  0411                     	;# 
  5354  0411                     	;# 
  5355  0412                     	;# 
  5356  0413                     	;# 
  5357  0414                     	;# 
  5358  0415                     	;# 
  5359  0416                     	;# 
  5360  0417                     	;# 
  5361  0418                     	;# 
  5362  0418                     	;# 
  5363  0419                     	;# 
  5364  041A                     	;# 
  5365  041B                     	;# 
  5366  041C                     	;# 
  5367  041D                     	;# 
  5368  041E                     	;# 
  5369  041F                     	;# 
  5370  0498                     	;# 
  5371  0498                     	;# 
  5372  0499                     	;# 
  5373  049A                     	;# 
  5374  049B                     	;# 
  5375  049B                     	;# 
  5376  049C                     	;# 
  5377  049D                     	;# 
  5378  049E                     	;# 
  5379  049F                     	;# 
  5380  0617                     	;# 
  5381  0618                     	;# 
  5382  0619                     	;# 
  5383  0619                     	;# 
  5384  061A                     	;# 
  5385  061B                     	;# 
  5386  061C                     	;# 
  5387  061C                     	;# 
  5388  061F                     	;# 
  5389  0691                     	;# 
  5390  0692                     	;# 
  5391  0693                     	;# 
  5392  0694                     	;# 
  5393  0695                     	;# 
  5394  0696                     	;# 
  5395  0697                     	;# 
  5396  0698                     	;# 
  5397  0699                     	;# 
  5398  0711                     	;# 
  5399  0712                     	;# 
  5400  0713                     	;# 
  5401  0714                     	;# 
  5402  0715                     	;# 
  5403  0716                     	;# 
  5404  0717                     	;# 
  5405  0718                     	;# 
  5406  0719                     	;# 
  5407  0891                     	;# 
  5408  0891                     	;# 
  5409  0891                     	;# 
  5410  0891                     	;# 
  5411  0891                     	;# 
  5412  0891                     	;# 
  5413  0892                     	;# 
  5414  0892                     	;# 
  5415  0892                     	;# 
  5416  0893                     	;# 
  5417  0893                     	;# 
  5418  0893                     	;# 
  5419  0893                     	;# 
  5420  0893                     	;# 
  5421  0893                     	;# 
  5422  0894                     	;# 
  5423  0894                     	;# 
  5424  0894                     	;# 
  5425  0895                     	;# 
  5426  0895                     	;# 
  5427  0895                     	;# 
  5428  0896                     	;# 
  5429  0896                     	;# 
  5430  0896                     	;# 
  5431  089B                     	;# 
  5432  0911                     	;# 
  5433  0912                     	;# 
  5434  0913                     	;# 
  5435  0914                     	;# 
  5436  0915                     	;# 
  5437  0916                     	;# 
  5438  0918                     	;# 
  5439  0919                     	;# 
  5440  091A                     	;# 
  5441  091B                     	;# 
  5442  091C                     	;# 
  5443  091D                     	;# 
  5444  091E                     	;# 
  5445  091F                     	;# 
  5446  0E0F                     	;# 
  5447  0E10                     	;# 
  5448  0E11                     	;# 
  5449  0E12                     	;# 
  5450  0E13                     	;# 
  5451  0E14                     	;# 
  5452  0E15                     	;# 
  5453  0E16                     	;# 
  5454  0E17                     	;# 
  5455  0E18                     	;# 
  5456  0E19                     	;# 
  5457  0E1A                     	;# 
  5458  0E1B                     	;# 
  5459  0E1C                     	;# 
  5460  0E1D                     	;# 
  5461  0E1E                     	;# 
  5462  0E1F                     	;# 
  5463  0E20                     	;# 
  5464  0E21                     	;# 
  5465  0E22                     	;# 
  5466  0E24                     	;# 
  5467  0E25                     	;# 
  5468  0E28                     	;# 
  5469  0E29                     	;# 
  5470  0E2A                     	;# 
  5471  0E2B                     	;# 
  5472  0E2C                     	;# 
  5473  0E2D                     	;# 
  5474  0E2E                     	;# 
  5475  0E2F                     	;# 
  5476  0E90                     	;# 
  5477  0E91                     	;# 
  5478  0E92                     	;# 
  5479  0E94                     	;# 
  5480  0E95                     	;# 
  5481  0E9C                     	;# 
  5482  0E9D                     	;# 
  5483  0E9E                     	;# 
  5484  0E9F                     	;# 
  5485  0EA0                     	;# 
  5486  0EA1                     	;# 
  5487  0EA2                     	;# 
  5488  0EA3                     	;# 
  5489  0EA4                     	;# 
  5490  0EA5                     	;# 
  5491  0EA6                     	;# 
  5492  0EA7                     	;# 
  5493  0F0F                     	;# 
  5494  0F10                     	;# 
  5495  0F11                     	;# 
  5496  0F12                     	;# 
  5497  0F13                     	;# 
  5498  0F14                     	;# 
  5499  0F15                     	;# 
  5500  0F16                     	;# 
  5501  0F17                     	;# 
  5502  0F18                     	;# 
  5503  0F19                     	;# 
  5504  0F1A                     	;# 
  5505  0F1B                     	;# 
  5506  0F1C                     	;# 
  5507  0F1D                     	;# 
  5508  0F1E                     	;# 
  5509  0F1F                     	;# 
  5510  0F20                     	;# 
  5511  0F21                     	;# 
  5512  0F22                     	;# 
  5513  0F23                     	;# 
  5514  0F24                     	;# 
  5515  0F25                     	;# 
  5516  0F26                     	;# 
  5517  0F27                     	;# 
  5518  0F28                     	;# 
  5519  0F29                     	;# 
  5520  0F2A                     	;# 
  5521  0F2B                     	;# 
  5522  0F2C                     	;# 
  5523  0F2D                     	;# 
  5524  0F2E                     	;# 
  5525  0F2F                     	;# 
  5526  0F30                     	;# 
  5527  0F31                     	;# 
  5528  0F32                     	;# 
  5529  0F33                     	;# 
  5530  0F34                     	;# 
  5531  0F35                     	;# 
  5532  0F36                     	;# 
  5533  0F37                     	;# 
  5534  0FE4                     	;# 
  5535  0FE5                     	;# 
  5536  0FE6                     	;# 
  5537  0FE7                     	;# 
  5538  0FE8                     	;# 
  5539  0FE9                     	;# 
  5540  0FEA                     	;# 
  5541  0FEB                     	;# 
  5542  0FED                     	;# 
  5543  0FEE                     	;# 
  5544  0FEF                     	;# 
  5545  0000                     	;# 
  5546  0001                     	;# 
  5547  0002                     	;# 
  5548  0003                     	;# 
  5549  0004                     	;# 
  5550  0005                     	;# 
  5551  0006                     	;# 
  5552  0007                     	;# 
  5553  0008                     	;# 
  5554  0009                     	;# 
  5555  000A                     	;# 
  5556  000B                     	;# 
  5557  000C                     	;# 
  5558  000D                     	;# 
  5559  000E                     	;# 
  5560  0010                     	;# 
  5561  0011                     	;# 
  5562  0012                     	;# 
  5563  0013                     	;# 
  5564  0014                     	;# 
  5565  0015                     	;# 
  5566  0015                     	;# 
  5567  0016                     	;# 
  5568  0016                     	;# 
  5569  0017                     	;# 
  5570  0018                     	;# 
  5571  0019                     	;# 
  5572  0019                     	;# 
  5573  001A                     	;# 
  5574  001B                     	;# 
  5575  001C                     	;# 
  5576  001D                     	;# 
  5577  001E                     	;# 
  5578  001F                     	;# 
  5579  008C                     	;# 
  5580  008D                     	;# 
  5581  008E                     	;# 
  5582  0090                     	;# 
  5583  0091                     	;# 
  5584  0092                     	;# 
  5585  0093                     	;# 
  5586  0094                     	;# 
  5587  0097                     	;# 
  5588  009B                     	;# 
  5589  009B                     	;# 
  5590  009C                     	;# 
  5591  009D                     	;# 
  5592  009E                     	;# 
  5593  009F                     	;# 
  5594  010C                     	;# 
  5595  010D                     	;# 
  5596  010E                     	;# 
  5597  0111                     	;# 
  5598  0112                     	;# 
  5599  0113                     	;# 
  5600  0114                     	;# 
  5601  0115                     	;# 
  5602  0116                     	;# 
  5603  0117                     	;# 
  5604  0118                     	;# 
  5605  0119                     	;# 
  5606  018C                     	;# 
  5607  018D                     	;# 
  5608  018E                     	;# 
  5609  0199                     	;# 
  5610  0199                     	;# 
  5611  0199                     	;# 
  5612  019A                     	;# 
  5613  019A                     	;# 
  5614  019A                     	;# 
  5615  019B                     	;# 
  5616  019B                     	;# 
  5617  019B                     	;# 
  5618  019B                     	;# 
  5619  019B                     	;# 
  5620  019C                     	;# 
  5621  019C                     	;# 
  5622  019C                     	;# 
  5623  019D                     	;# 
  5624  019D                     	;# 
  5625  019D                     	;# 
  5626  019E                     	;# 
  5627  019E                     	;# 
  5628  019E                     	;# 
  5629  019F                     	;# 
  5630  019F                     	;# 
  5631  019F                     	;# 
  5632  019F                     	;# 
  5633  019F                     	;# 
  5634  020C                     	;# 
  5635  020D                     	;# 
  5636  020E                     	;# 
  5637  0211                     	;# 
  5638  0211                     	;# 
  5639  0212                     	;# 
  5640  0212                     	;# 
  5641  0213                     	;# 
  5642  0213                     	;# 
  5643  0214                     	;# 
  5644  0214                     	;# 
  5645  0215                     	;# 
  5646  0215                     	;# 
  5647  0215                     	;# 
  5648  0215                     	;# 
  5649  0216                     	;# 
  5650  0216                     	;# 
  5651  0217                     	;# 
  5652  0217                     	;# 
  5653  0219                     	;# 
  5654  021A                     	;# 
  5655  021B                     	;# 
  5656  021C                     	;# 
  5657  021D                     	;# 
  5658  021D                     	;# 
  5659  021E                     	;# 
  5660  021F                     	;# 
  5661  028C                     	;# 
  5662  028D                     	;# 
  5663  028E                     	;# 
  5664  0291                     	;# 
  5665  0291                     	;# 
  5666  0292                     	;# 
  5667  0293                     	;# 
  5668  0294                     	;# 
  5669  0295                     	;# 
  5670  0295                     	;# 
  5671  0296                     	;# 
  5672  0297                     	;# 
  5673  0298                     	;# 
  5674  029F                     	;# 
  5675  030C                     	;# 
  5676  030D                     	;# 
  5677  030E                     	;# 
  5678  0311                     	;# 
  5679  0311                     	;# 
  5680  0312                     	;# 
  5681  0313                     	;# 
  5682  0314                     	;# 
  5683  0315                     	;# 
  5684  0315                     	;# 
  5685  0316                     	;# 
  5686  0317                     	;# 
  5687  0318                     	;# 
  5688  038C                     	;# 
  5689  038D                     	;# 
  5690  038E                     	;# 
  5691  0391                     	;# 
  5692  0392                     	;# 
  5693  0393                     	;# 
  5694  0394                     	;# 
  5695  0395                     	;# 
  5696  0396                     	;# 
  5697  0397                     	;# 
  5698  0398                     	;# 
  5699  0399                     	;# 
  5700  039A                     	;# 
  5701  039C                     	;# 
  5702  039D                     	;# 
  5703  039E                     	;# 
  5704  039F                     	;# 
  5705  0411                     	;# 
  5706  0411                     	;# 
  5707  0412                     	;# 
  5708  0413                     	;# 
  5709  0414                     	;# 
  5710  0415                     	;# 
  5711  0416                     	;# 
  5712  0417                     	;# 
  5713  0418                     	;# 
  5714  0418                     	;# 
  5715  0419                     	;# 
  5716  041A                     	;# 
  5717  041B                     	;# 
  5718  041C                     	;# 
  5719  041D                     	;# 
  5720  041E                     	;# 
  5721  041F                     	;# 
  5722  0498                     	;# 
  5723  0498                     	;# 
  5724  0499                     	;# 
  5725  049A                     	;# 
  5726  049B                     	;# 
  5727  049B                     	;# 
  5728  049C                     	;# 
  5729  049D                     	;# 
  5730  049E                     	;# 
  5731  049F                     	;# 
  5732  0617                     	;# 
  5733  0618                     	;# 
  5734  0619                     	;# 
  5735  0619                     	;# 
  5736  061A                     	;# 
  5737  061B                     	;# 
  5738  061C                     	;# 
  5739  061C                     	;# 
  5740  061F                     	;# 
  5741  0691                     	;# 
  5742  0692                     	;# 
  5743  0693                     	;# 
  5744  0694                     	;# 
  5745  0695                     	;# 
  5746  0696                     	;# 
  5747  0697                     	;# 
  5748  0698                     	;# 
  5749  0699                     	;# 
  5750  0711                     	;# 
  5751  0712                     	;# 
  5752  0713                     	;# 
  5753  0714                     	;# 
  5754  0715                     	;# 
  5755  0716                     	;# 
  5756  0717                     	;# 
  5757  0718                     	;# 
  5758  0719                     	;# 
  5759  0891                     	;# 
  5760  0891                     	;# 
  5761  0891                     	;# 
  5762  0891                     	;# 
  5763  0891                     	;# 
  5764  0891                     	;# 
  5765  0892                     	;# 
  5766  0892                     	;# 
  5767  0892                     	;# 
  5768  0893                     	;# 
  5769  0893                     	;# 
  5770  0893                     	;# 
  5771  0893                     	;# 
  5772  0893                     	;# 
  5773  0893                     	;# 
  5774  0894                     	;# 
  5775  0894                     	;# 
  5776  0894                     	;# 
  5777  0895                     	;# 
  5778  0895                     	;# 
  5779  0895                     	;# 
  5780  0896                     	;# 
  5781  0896                     	;# 
  5782  0896                     	;# 
  5783  089B                     	;# 
  5784  0911                     	;# 
  5785  0912                     	;# 
  5786  0913                     	;# 
  5787  0914                     	;# 
  5788  0915                     	;# 
  5789  0916                     	;# 
  5790  0918                     	;# 
  5791  0919                     	;# 
  5792  091A                     	;# 
  5793  091B                     	;# 
  5794  091C                     	;# 
  5795  091D                     	;# 
  5796  091E                     	;# 
  5797  091F                     	;# 
  5798  0E0F                     	;# 
  5799  0E10                     	;# 
  5800  0E11                     	;# 
  5801  0E12                     	;# 
  5802  0E13                     	;# 
  5803  0E14                     	;# 
  5804  0E15                     	;# 
  5805  0E16                     	;# 
  5806  0E17                     	;# 
  5807  0E18                     	;# 
  5808  0E19                     	;# 
  5809  0E1A                     	;# 
  5810  0E1B                     	;# 
  5811  0E1C                     	;# 
  5812  0E1D                     	;# 
  5813  0E1E                     	;# 
  5814  0E1F                     	;# 
  5815  0E20                     	;# 
  5816  0E21                     	;# 
  5817  0E22                     	;# 
  5818  0E24                     	;# 
  5819  0E25                     	;# 
  5820  0E28                     	;# 
  5821  0E29                     	;# 
  5822  0E2A                     	;# 
  5823  0E2B                     	;# 
  5824  0E2C                     	;# 
  5825  0E2D                     	;# 
  5826  0E2E                     	;# 
  5827  0E2F                     	;# 
  5828  0E90                     	;# 
  5829  0E91                     	;# 
  5830  0E92                     	;# 
  5831  0E94                     	;# 
  5832  0E95                     	;# 
  5833  0E9C                     	;# 
  5834  0E9D                     	;# 
  5835  0E9E                     	;# 
  5836  0E9F                     	;# 
  5837  0EA0                     	;# 
  5838  0EA1                     	;# 
  5839  0EA2                     	;# 
  5840  0EA3                     	;# 
  5841  0EA4                     	;# 
  5842  0EA5                     	;# 
  5843  0EA6                     	;# 
  5844  0EA7                     	;# 
  5845  0F0F                     	;# 
  5846  0F10                     	;# 
  5847  0F11                     	;# 
  5848  0F12                     	;# 
  5849  0F13                     	;# 
  5850  0F14                     	;# 
  5851  0F15                     	;# 
  5852  0F16                     	;# 
  5853  0F17                     	;# 
  5854  0F18                     	;# 
  5855  0F19                     	;# 
  5856  0F1A                     	;# 
  5857  0F1B                     	;# 
  5858  0F1C                     	;# 
  5859  0F1D                     	;# 
  5860  0F1E                     	;# 
  5861  0F1F                     	;# 
  5862  0F20                     	;# 
  5863  0F21                     	;# 
  5864  0F22                     	;# 
  5865  0F23                     	;# 
  5866  0F24                     	;# 
  5867  0F25                     	;# 
  5868  0F26                     	;# 
  5869  0F27                     	;# 
  5870  0F28                     	;# 
  5871  0F29                     	;# 
  5872  0F2A                     	;# 
  5873  0F2B                     	;# 
  5874  0F2C                     	;# 
  5875  0F2D                     	;# 
  5876  0F2E                     	;# 
  5877  0F2F                     	;# 
  5878  0F30                     	;# 
  5879  0F31                     	;# 
  5880  0F32                     	;# 
  5881  0F33                     	;# 
  5882  0F34                     	;# 
  5883  0F35                     	;# 
  5884  0F36                     	;# 
  5885  0F37                     	;# 
  5886  0FE4                     	;# 
  5887  0FE5                     	;# 
  5888  0FE6                     	;# 
  5889  0FE7                     	;# 
  5890  0FE8                     	;# 
  5891  0FE9                     	;# 
  5892  0FEA                     	;# 
  5893  0FEB                     	;# 
  5894  0FED                     	;# 
  5895  0FEE                     	;# 
  5896  0FEF                     	;# 
  5897  0000                     	;# 
  5898  0001                     	;# 
  5899  0002                     	;# 
  5900  0003                     	;# 
  5901  0004                     	;# 
  5902  0005                     	;# 
  5903  0006                     	;# 
  5904  0007                     	;# 
  5905  0008                     	;# 
  5906  0009                     	;# 
  5907  000A                     	;# 
  5908  000B                     	;# 
  5909  000C                     	;# 
  5910  000D                     	;# 
  5911  000E                     	;# 
  5912  0010                     	;# 
  5913  0011                     	;# 
  5914  0012                     	;# 
  5915  0013                     	;# 
  5916  0014                     	;# 
  5917  0015                     	;# 
  5918  0015                     	;# 
  5919  0016                     	;# 
  5920  0016                     	;# 
  5921  0017                     	;# 
  5922  0018                     	;# 
  5923  0019                     	;# 
  5924  0019                     	;# 
  5925  001A                     	;# 
  5926  001B                     	;# 
  5927  001C                     	;# 
  5928  001D                     	;# 
  5929  001E                     	;# 
  5930  001F                     	;# 
  5931  008C                     	;# 
  5932  008D                     	;# 
  5933  008E                     	;# 
  5934  0090                     	;# 
  5935  0091                     	;# 
  5936  0092                     	;# 
  5937  0093                     	;# 
  5938  0094                     	;# 
  5939  0097                     	;# 
  5940  009B                     	;# 
  5941  009B                     	;# 
  5942  009C                     	;# 
  5943  009D                     	;# 
  5944  009E                     	;# 
  5945  009F                     	;# 
  5946  010C                     	;# 
  5947  010D                     	;# 
  5948  010E                     	;# 
  5949  0111                     	;# 
  5950  0112                     	;# 
  5951  0113                     	;# 
  5952  0114                     	;# 
  5953  0115                     	;# 
  5954  0116                     	;# 
  5955  0117                     	;# 
  5956  0118                     	;# 
  5957  0119                     	;# 
  5958  018C                     	;# 
  5959  018D                     	;# 
  5960  018E                     	;# 
  5961  0199                     	;# 
  5962  0199                     	;# 
  5963  0199                     	;# 
  5964  019A                     	;# 
  5965  019A                     	;# 
  5966  019A                     	;# 
  5967  019B                     	;# 
  5968  019B                     	;# 
  5969  019B                     	;# 
  5970  019B                     	;# 
  5971  019B                     	;# 
  5972  019C                     	;# 
  5973  019C                     	;# 
  5974  019C                     	;# 
  5975  019D                     	;# 
  5976  019D                     	;# 
  5977  019D                     	;# 
  5978  019E                     	;# 
  5979  019E                     	;# 
  5980  019E                     	;# 
  5981  019F                     	;# 
  5982  019F                     	;# 
  5983  019F                     	;# 
  5984  019F                     	;# 
  5985  019F                     	;# 
  5986  020C                     	;# 
  5987  020D                     	;# 
  5988  020E                     	;# 
  5989  0211                     	;# 
  5990  0211                     	;# 
  5991  0212                     	;# 
  5992  0212                     	;# 
  5993  0213                     	;# 
  5994  0213                     	;# 
  5995  0214                     	;# 
  5996  0214                     	;# 
  5997  0215                     	;# 
  5998  0215                     	;# 
  5999  0215                     	;# 
  6000  0215                     	;# 
  6001  0216                     	;# 
  6002  0216                     	;# 
  6003  0217                     	;# 
  6004  0217                     	;# 
  6005  0219                     	;# 
  6006  021A                     	;# 
  6007  021B                     	;# 
  6008  021C                     	;# 
  6009  021D                     	;# 
  6010  021D                     	;# 
  6011  021E                     	;# 
  6012  021F                     	;# 
  6013  028C                     	;# 
  6014  028D                     	;# 
  6015  028E                     	;# 
  6016  0291                     	;# 
  6017  0291                     	;# 
  6018  0292                     	;# 
  6019  0293                     	;# 
  6020  0294                     	;# 
  6021  0295                     	;# 
  6022  0295                     	;# 
  6023  0296                     	;# 
  6024  0297                     	;# 
  6025  0298                     	;# 
  6026  029F                     	;# 
  6027  030C                     	;# 
  6028  030D                     	;# 
  6029  030E                     	;# 
  6030  0311                     	;# 
  6031  0311                     	;# 
  6032  0312                     	;# 
  6033  0313                     	;# 
  6034  0314                     	;# 
  6035  0315                     	;# 
  6036  0315                     	;# 
  6037  0316                     	;# 
  6038  0317                     	;# 
  6039  0318                     	;# 
  6040  038C                     	;# 
  6041  038D                     	;# 
  6042  038E                     	;# 
  6043  0391                     	;# 
  6044  0392                     	;# 
  6045  0393                     	;# 
  6046  0394                     	;# 
  6047  0395                     	;# 
  6048  0396                     	;# 
  6049  0397                     	;# 
  6050  0398                     	;# 
  6051  0399                     	;# 
  6052  039A                     	;# 
  6053  039C                     	;# 
  6054  039D                     	;# 
  6055  039E                     	;# 
  6056  039F                     	;# 
  6057  0411                     	;# 
  6058  0411                     	;# 
  6059  0412                     	;# 
  6060  0413                     	;# 
  6061  0414                     	;# 
  6062  0415                     	;# 
  6063  0416                     	;# 
  6064  0417                     	;# 
  6065  0418                     	;# 
  6066  0418                     	;# 
  6067  0419                     	;# 
  6068  041A                     	;# 
  6069  041B                     	;# 
  6070  041C                     	;# 
  6071  041D                     	;# 
  6072  041E                     	;# 
  6073  041F                     	;# 
  6074  0498                     	;# 
  6075  0498                     	;# 
  6076  0499                     	;# 
  6077  049A                     	;# 
  6078  049B                     	;# 
  6079  049B                     	;# 
  6080  049C                     	;# 
  6081  049D                     	;# 
  6082  049E                     	;# 
  6083  049F                     	;# 
  6084  0617                     	;# 
  6085  0618                     	;# 
  6086  0619                     	;# 
  6087  0619                     	;# 
  6088  061A                     	;# 
  6089  061B                     	;# 
  6090  061C                     	;# 
  6091  061C                     	;# 
  6092  061F                     	;# 
  6093  0691                     	;# 
  6094  0692                     	;# 
  6095  0693                     	;# 
  6096  0694                     	;# 
  6097  0695                     	;# 
  6098  0696                     	;# 
  6099  0697                     	;# 
  6100  0698                     	;# 
  6101  0699                     	;# 
  6102  0711                     	;# 
  6103  0712                     	;# 
  6104  0713                     	;# 
  6105  0714                     	;# 
  6106  0715                     	;# 
  6107  0716                     	;# 
  6108  0717                     	;# 
  6109  0718                     	;# 
  6110  0719                     	;# 
  6111  0891                     	;# 
  6112  0891                     	;# 
  6113  0891                     	;# 
  6114  0891                     	;# 
  6115  0891                     	;# 
  6116  0891                     	;# 
  6117  0892                     	;# 
  6118  0892                     	;# 
  6119  0892                     	;# 
  6120  0893                     	;# 
  6121  0893                     	;# 
  6122  0893                     	;# 
  6123  0893                     	;# 
  6124  0893                     	;# 
  6125  0893                     	;# 
  6126  0894                     	;# 
  6127  0894                     	;# 
  6128  0894                     	;# 
  6129  0895                     	;# 
  6130  0895                     	;# 
  6131  0895                     	;# 
  6132  0896                     	;# 
  6133  0896                     	;# 
  6134  0896                     	;# 
  6135  089B                     	;# 
  6136  0911                     	;# 
  6137  0912                     	;# 
  6138  0913                     	;# 
  6139  0914                     	;# 
  6140  0915                     	;# 
  6141  0916                     	;# 
  6142  0918                     	;# 
  6143  0919                     	;# 
  6144  091A                     	;# 
  6145  091B                     	;# 
  6146  091C                     	;# 
  6147  091D                     	;# 
  6148  091E                     	;# 
  6149  091F                     	;# 
  6150  0E0F                     	;# 
  6151  0E10                     	;# 
  6152  0E11                     	;# 
  6153  0E12                     	;# 
  6154  0E13                     	;# 
  6155  0E14                     	;# 
  6156  0E15                     	;# 
  6157  0E16                     	;# 
  6158  0E17                     	;# 
  6159  0E18                     	;# 
  6160  0E19                     	;# 
  6161  0E1A                     	;# 
  6162  0E1B                     	;# 
  6163  0E1C                     	;# 
  6164  0E1D                     	;# 
  6165  0E1E                     	;# 
  6166  0E1F                     	;# 
  6167  0E20                     	;# 
  6168  0E21                     	;# 
  6169  0E22                     	;# 
  6170  0E24                     	;# 
  6171  0E25                     	;# 
  6172  0E28                     	;# 
  6173  0E29                     	;# 
  6174  0E2A                     	;# 
  6175  0E2B                     	;# 
  6176  0E2C                     	;# 
  6177  0E2D                     	;# 
  6178  0E2E                     	;# 
  6179  0E2F                     	;# 
  6180  0E90                     	;# 
  6181  0E91                     	;# 
  6182  0E92                     	;# 
  6183  0E94                     	;# 
  6184  0E95                     	;# 
  6185  0E9C                     	;# 
  6186  0E9D                     	;# 
  6187  0E9E                     	;# 
  6188  0E9F                     	;# 
  6189  0EA0                     	;# 
  6190  0EA1                     	;# 
  6191  0EA2                     	;# 
  6192  0EA3                     	;# 
  6193  0EA4                     	;# 
  6194  0EA5                     	;# 
  6195  0EA6                     	;# 
  6196  0EA7                     	;# 
  6197  0F0F                     	;# 
  6198  0F10                     	;# 
  6199  0F11                     	;# 
  6200  0F12                     	;# 
  6201  0F13                     	;# 
  6202  0F14                     	;# 
  6203  0F15                     	;# 
  6204  0F16                     	;# 
  6205  0F17                     	;# 
  6206  0F18                     	;# 
  6207  0F19                     	;# 
  6208  0F1A                     	;# 
  6209  0F1B                     	;# 
  6210  0F1C                     	;# 
  6211  0F1D                     	;# 
  6212  0F1E                     	;# 
  6213  0F1F                     	;# 
  6214  0F20                     	;# 
  6215  0F21                     	;# 
  6216  0F22                     	;# 
  6217  0F23                     	;# 
  6218  0F24                     	;# 
  6219  0F25                     	;# 
  6220  0F26                     	;# 
  6221  0F27                     	;# 
  6222  0F28                     	;# 
  6223  0F29                     	;# 
  6224  0F2A                     	;# 
  6225  0F2B                     	;# 
  6226  0F2C                     	;# 
  6227  0F2D                     	;# 
  6228  0F2E                     	;# 
  6229  0F2F                     	;# 
  6230  0F30                     	;# 
  6231  0F31                     	;# 
  6232  0F32                     	;# 
  6233  0F33                     	;# 
  6234  0F34                     	;# 
  6235  0F35                     	;# 
  6236  0F36                     	;# 
  6237  0F37                     	;# 
  6238  0FE4                     	;# 
  6239  0FE5                     	;# 
  6240  0FE6                     	;# 
  6241  0FE7                     	;# 
  6242  0FE8                     	;# 
  6243  0FE9                     	;# 
  6244  0FEA                     	;# 
  6245  0FEB                     	;# 
  6246  0FED                     	;# 
  6247  0FEE                     	;# 
  6248  0FEF                     	;# 
  6249  0000                     	;# 
  6250  0001                     	;# 
  6251  0002                     	;# 
  6252  0003                     	;# 
  6253  0004                     	;# 
  6254  0005                     	;# 
  6255  0006                     	;# 
  6256  0007                     	;# 
  6257  0008                     	;# 
  6258  0009                     	;# 
  6259  000A                     	;# 
  6260  000B                     	;# 
  6261  000C                     	;# 
  6262  000D                     	;# 
  6263  000E                     	;# 
  6264  0010                     	;# 
  6265  0011                     	;# 
  6266  0012                     	;# 
  6267  0013                     	;# 
  6268  0014                     	;# 
  6269  0015                     	;# 
  6270  0015                     	;# 
  6271  0016                     	;# 
  6272  0016                     	;# 
  6273  0017                     	;# 
  6274  0018                     	;# 
  6275  0019                     	;# 
  6276  0019                     	;# 
  6277  001A                     	;# 
  6278  001B                     	;# 
  6279  001C                     	;# 
  6280  001D                     	;# 
  6281  001E                     	;# 
  6282  001F                     	;# 
  6283  008C                     	;# 
  6284  008D                     	;# 
  6285  008E                     	;# 
  6286  0090                     	;# 
  6287  0091                     	;# 
  6288  0092                     	;# 
  6289  0093                     	;# 
  6290  0094                     	;# 
  6291  0097                     	;# 
  6292  009B                     	;# 
  6293  009B                     	;# 
  6294  009C                     	;# 
  6295  009D                     	;# 
  6296  009E                     	;# 
  6297  009F                     	;# 
  6298  010C                     	;# 
  6299  010D                     	;# 
  6300  010E                     	;# 
  6301  0111                     	;# 
  6302  0112                     	;# 
  6303  0113                     	;# 
  6304  0114                     	;# 
  6305  0115                     	;# 
  6306  0116                     	;# 
  6307  0117                     	;# 
  6308  0118                     	;# 
  6309  0119                     	;# 
  6310  018C                     	;# 
  6311  018D                     	;# 
  6312  018E                     	;# 
  6313  0199                     	;# 
  6314  0199                     	;# 
  6315  0199                     	;# 
  6316  019A                     	;# 
  6317  019A                     	;# 
  6318  019A                     	;# 
  6319  019B                     	;# 
  6320  019B                     	;# 
  6321  019B                     	;# 
  6322  019B                     	;# 
  6323  019B                     	;# 
  6324  019C                     	;# 
  6325  019C                     	;# 
  6326  019C                     	;# 
  6327  019D                     	;# 
  6328  019D                     	;# 
  6329  019D                     	;# 
  6330  019E                     	;# 
  6331  019E                     	;# 
  6332  019E                     	;# 
  6333  019F                     	;# 
  6334  019F                     	;# 
  6335  019F                     	;# 
  6336  019F                     	;# 
  6337  019F                     	;# 
  6338  020C                     	;# 
  6339  020D                     	;# 
  6340  020E                     	;# 
  6341  0211                     	;# 
  6342  0211                     	;# 
  6343  0212                     	;# 
  6344  0212                     	;# 
  6345  0213                     	;# 
  6346  0213                     	;# 
  6347  0214                     	;# 
  6348  0214                     	;# 
  6349  0215                     	;# 
  6350  0215                     	;# 
  6351  0215                     	;# 
  6352  0215                     	;# 
  6353  0216                     	;# 
  6354  0216                     	;# 
  6355  0217                     	;# 
  6356  0217                     	;# 
  6357  0219                     	;# 
  6358  021A                     	;# 
  6359  021B                     	;# 
  6360  021C                     	;# 
  6361  021D                     	;# 
  6362  021D                     	;# 
  6363  021E                     	;# 
  6364  021F                     	;# 
  6365  028C                     	;# 
  6366  028D                     	;# 
  6367  028E                     	;# 
  6368  0291                     	;# 
  6369  0291                     	;# 
  6370  0292                     	;# 
  6371  0293                     	;# 
  6372  0294                     	;# 
  6373  0295                     	;# 
  6374  0295                     	;# 
  6375  0296                     	;# 
  6376  0297                     	;# 
  6377  0298                     	;# 
  6378  029F                     	;# 
  6379  030C                     	;# 
  6380  030D                     	;# 
  6381  030E                     	;# 
  6382  0311                     	;# 
  6383  0311                     	;# 
  6384  0312                     	;# 
  6385  0313                     	;# 
  6386  0314                     	;# 
  6387  0315                     	;# 
  6388  0315                     	;# 
  6389  0316                     	;# 
  6390  0317                     	;# 
  6391  0318                     	;# 
  6392  038C                     	;# 
  6393  038D                     	;# 
  6394  038E                     	;# 
  6395  0391                     	;# 
  6396  0392                     	;# 
  6397  0393                     	;# 
  6398  0394                     	;# 
  6399  0395                     	;# 
  6400  0396                     	;# 
  6401  0397                     	;# 
  6402  0398                     	;# 
  6403  0399                     	;# 
  6404  039A                     	;# 
  6405  039C                     	;# 
  6406  039D                     	;# 
  6407  039E                     	;# 
  6408  039F                     	;# 
  6409  0411                     	;# 
  6410  0411                     	;# 
  6411  0412                     	;# 
  6412  0413                     	;# 
  6413  0414                     	;# 
  6414  0415                     	;# 
  6415  0416                     	;# 
  6416  0417                     	;# 
  6417  0418                     	;# 
  6418  0418                     	;# 
  6419  0419                     	;# 
  6420  041A                     	;# 
  6421  041B                     	;# 
  6422  041C                     	;# 
  6423  041D                     	;# 
  6424  041E                     	;# 
  6425  041F                     	;# 
  6426  0498                     	;# 
  6427  0498                     	;# 
  6428  0499                     	;# 
  6429  049A                     	;# 
  6430  049B                     	;# 
  6431  049B                     	;# 
  6432  049C                     	;# 
  6433  049D                     	;# 
  6434  049E                     	;# 
  6435  049F                     	;# 
  6436  0617                     	;# 
  6437  0618                     	;# 
  6438  0619                     	;# 
  6439  0619                     	;# 
  6440  061A                     	;# 
  6441  061B                     	;# 
  6442  061C                     	;# 
  6443  061C                     	;# 
  6444  061F                     	;# 
  6445  0691                     	;# 
  6446  0692                     	;# 
  6447  0693                     	;# 
  6448  0694                     	;# 
  6449  0695                     	;# 
  6450  0696                     	;# 
  6451  0697                     	;# 
  6452  0698                     	;# 
  6453  0699                     	;# 
  6454  0711                     	;# 
  6455  0712                     	;# 
  6456  0713                     	;# 
  6457  0714                     	;# 
  6458  0715                     	;# 
  6459  0716                     	;# 
  6460  0717                     	;# 
  6461  0718                     	;# 
  6462  0719                     	;# 
  6463  0891                     	;# 
  6464  0891                     	;# 
  6465  0891                     	;# 
  6466  0891                     	;# 
  6467  0891                     	;# 
  6468  0891                     	;# 
  6469  0892                     	;# 
  6470  0892                     	;# 
  6471  0892                     	;# 
  6472  0893                     	;# 
  6473  0893                     	;# 
  6474  0893                     	;# 
  6475  0893                     	;# 
  6476  0893                     	;# 
  6477  0893                     	;# 
  6478  0894                     	;# 
  6479  0894                     	;# 
  6480  0894                     	;# 
  6481  0895                     	;# 
  6482  0895                     	;# 
  6483  0895                     	;# 
  6484  0896                     	;# 
  6485  0896                     	;# 
  6486  0896                     	;# 
  6487  089B                     	;# 
  6488  0911                     	;# 
  6489  0912                     	;# 
  6490  0913                     	;# 
  6491  0914                     	;# 
  6492  0915                     	;# 
  6493  0916                     	;# 
  6494  0918                     	;# 
  6495  0919                     	;# 
  6496  091A                     	;# 
  6497  091B                     	;# 
  6498  091C                     	;# 
  6499  091D                     	;# 
  6500  091E                     	;# 
  6501  091F                     	;# 
  6502  0E0F                     	;# 
  6503  0E10                     	;# 
  6504  0E11                     	;# 
  6505  0E12                     	;# 
  6506  0E13                     	;# 
  6507  0E14                     	;# 
  6508  0E15                     	;# 
  6509  0E16                     	;# 
  6510  0E17                     	;# 
  6511  0E18                     	;# 
  6512  0E19                     	;# 
  6513  0E1A                     	;# 
  6514  0E1B                     	;# 
  6515  0E1C                     	;# 
  6516  0E1D                     	;# 
  6517  0E1E                     	;# 
  6518  0E1F                     	;# 
  6519  0E20                     	;# 
  6520  0E21                     	;# 
  6521  0E22                     	;# 
  6522  0E24                     	;# 
  6523  0E25                     	;# 
  6524  0E28                     	;# 
  6525  0E29                     	;# 
  6526  0E2A                     	;# 
  6527  0E2B                     	;# 
  6528  0E2C                     	;# 
  6529  0E2D                     	;# 
  6530  0E2E                     	;# 
  6531  0E2F                     	;# 
  6532  0E90                     	;# 
  6533  0E91                     	;# 
  6534  0E92                     	;# 
  6535  0E94                     	;# 
  6536  0E95                     	;# 
  6537  0E9C                     	;# 
  6538  0E9D                     	;# 
  6539  0E9E                     	;# 
  6540  0E9F                     	;# 
  6541  0EA0                     	;# 
  6542  0EA1                     	;# 
  6543  0EA2                     	;# 
  6544  0EA3                     	;# 
  6545  0EA4                     	;# 
  6546  0EA5                     	;# 
  6547  0EA6                     	;# 
  6548  0EA7                     	;# 
  6549  0F0F                     	;# 
  6550  0F10                     	;# 
  6551  0F11                     	;# 
  6552  0F12                     	;# 
  6553  0F13                     	;# 
  6554  0F14                     	;# 
  6555  0F15                     	;# 
  6556  0F16                     	;# 
  6557  0F17                     	;# 
  6558  0F18                     	;# 
  6559  0F19                     	;# 
  6560  0F1A                     	;# 
  6561  0F1B                     	;# 
  6562  0F1C                     	;# 
  6563  0F1D                     	;# 
  6564  0F1E                     	;# 
  6565  0F1F                     	;# 
  6566  0F20                     	;# 
  6567  0F21                     	;# 
  6568  0F22                     	;# 
  6569  0F23                     	;# 
  6570  0F24                     	;# 
  6571  0F25                     	;# 
  6572  0F26                     	;# 
  6573  0F27                     	;# 
  6574  0F28                     	;# 
  6575  0F29                     	;# 
  6576  0F2A                     	;# 
  6577  0F2B                     	;# 
  6578  0F2C                     	;# 
  6579  0F2D                     	;# 
  6580  0F2E                     	;# 
  6581  0F2F                     	;# 
  6582  0F30                     	;# 
  6583  0F31                     	;# 
  6584  0F32                     	;# 
  6585  0F33                     	;# 
  6586  0F34                     	;# 
  6587  0F35                     	;# 
  6588  0F36                     	;# 
  6589  0F37                     	;# 
  6590  0FE4                     	;# 
  6591  0FE5                     	;# 
  6592  0FE6                     	;# 
  6593  0FE7                     	;# 
  6594  0FE8                     	;# 
  6595  0FE9                     	;# 
  6596  0FEA                     	;# 
  6597  0FEB                     	;# 
  6598  0FED                     	;# 
  6599  0FEE                     	;# 
  6600  0FEF                     	;# 
  6601  0000                     	;# 
  6602  0001                     	;# 
  6603  0002                     	;# 
  6604  0003                     	;# 
  6605  0004                     	;# 
  6606  0005                     	;# 
  6607  0006                     	;# 
  6608  0007                     	;# 
  6609  0008                     	;# 
  6610  0009                     	;# 
  6611  000A                     	;# 
  6612  000B                     	;# 
  6613  000C                     	;# 
  6614  000D                     	;# 
  6615  000E                     	;# 
  6616  0010                     	;# 
  6617  0011                     	;# 
  6618  0012                     	;# 
  6619  0013                     	;# 
  6620  0014                     	;# 
  6621  0015                     	;# 
  6622  0015                     	;# 
  6623  0016                     	;# 
  6624  0016                     	;# 
  6625  0017                     	;# 
  6626  0018                     	;# 
  6627  0019                     	;# 
  6628  0019                     	;# 
  6629  001A                     	;# 
  6630  001B                     	;# 
  6631  001C                     	;# 
  6632  001D                     	;# 
  6633  001E                     	;# 
  6634  001F                     	;# 
  6635  008C                     	;# 
  6636  008D                     	;# 
  6637  008E                     	;# 
  6638  0090                     	;# 
  6639  0091                     	;# 
  6640  0092                     	;# 
  6641  0093                     	;# 
  6642  0094                     	;# 
  6643  0097                     	;# 
  6644  009B                     	;# 
  6645  009B                     	;# 
  6646  009C                     	;# 
  6647  009D                     	;# 
  6648  009E                     	;# 
  6649  009F                     	;# 
  6650  010C                     	;# 
  6651  010D                     	;# 
  6652  010E                     	;# 
  6653  0111                     	;# 
  6654  0112                     	;# 
  6655  0113                     	;# 
  6656  0114                     	;# 
  6657  0115                     	;# 
  6658  0116                     	;# 
  6659  0117                     	;# 
  6660  0118                     	;# 
  6661  0119                     	;# 
  6662  018C                     	;# 
  6663  018D                     	;# 
  6664  018E                     	;# 
  6665  0199                     	;# 
  6666  0199                     	;# 
  6667  0199                     	;# 
  6668  019A                     	;# 
  6669  019A                     	;# 
  6670  019A                     	;# 
  6671  019B                     	;# 
  6672  019B                     	;# 
  6673  019B                     	;# 
  6674  019B                     	;# 
  6675  019B                     	;# 
  6676  019C                     	;# 
  6677  019C                     	;# 
  6678  019C                     	;# 
  6679  019D                     	;# 
  6680  019D                     	;# 
  6681  019D                     	;# 
  6682  019E                     	;# 
  6683  019E                     	;# 
  6684  019E                     	;# 
  6685  019F                     	;# 
  6686  019F                     	;# 
  6687  019F                     	;# 
  6688  019F                     	;# 
  6689  019F                     	;# 
  6690  020C                     	;# 
  6691  020D                     	;# 
  6692  020E                     	;# 
  6693  0211                     	;# 
  6694  0211                     	;# 
  6695  0212                     	;# 
  6696  0212                     	;# 
  6697  0213                     	;# 
  6698  0213                     	;# 
  6699  0214                     	;# 
  6700  0214                     	;# 
  6701  0215                     	;# 
  6702  0215                     	;# 
  6703  0215                     	;# 
  6704  0215                     	;# 
  6705  0216                     	;# 
  6706  0216                     	;# 
  6707  0217                     	;# 
  6708  0217                     	;# 
  6709  0219                     	;# 
  6710  021A                     	;# 
  6711  021B                     	;# 
  6712  021C                     	;# 
  6713  021D                     	;# 
  6714  021D                     	;# 
  6715  021E                     	;# 
  6716  021F                     	;# 
  6717  028C                     	;# 
  6718  028D                     	;# 
  6719  028E                     	;# 
  6720  0291                     	;# 
  6721  0291                     	;# 
  6722  0292                     	;# 
  6723  0293                     	;# 
  6724  0294                     	;# 
  6725  0295                     	;# 
  6726  0295                     	;# 
  6727  0296                     	;# 
  6728  0297                     	;# 
  6729  0298                     	;# 
  6730  029F                     	;# 
  6731  030C                     	;# 
  6732  030D                     	;# 
  6733  030E                     	;# 
  6734  0311                     	;# 
  6735  0311                     	;# 
  6736  0312                     	;# 
  6737  0313                     	;# 
  6738  0314                     	;# 
  6739  0315                     	;# 
  6740  0315                     	;# 
  6741  0316                     	;# 
  6742  0317                     	;# 
  6743  0318                     	;# 
  6744  038C                     	;# 
  6745  038D                     	;# 
  6746  038E                     	;# 
  6747  0391                     	;# 
  6748  0392                     	;# 
  6749  0393                     	;# 
  6750  0394                     	;# 
  6751  0395                     	;# 
  6752  0396                     	;# 
  6753  0397                     	;# 
  6754  0398                     	;# 
  6755  0399                     	;# 
  6756  039A                     	;# 
  6757  039C                     	;# 
  6758  039D                     	;# 
  6759  039E                     	;# 
  6760  039F                     	;# 
  6761  0411                     	;# 
  6762  0411                     	;# 
  6763  0412                     	;# 
  6764  0413                     	;# 
  6765  0414                     	;# 
  6766  0415                     	;# 
  6767  0416                     	;# 
  6768  0417                     	;# 
  6769  0418                     	;# 
  6770  0418                     	;# 
  6771  0419                     	;# 
  6772  041A                     	;# 
  6773  041B                     	;# 
  6774  041C                     	;# 
  6775  041D                     	;# 
  6776  041E                     	;# 
  6777  041F                     	;# 
  6778  0498                     	;# 
  6779  0498                     	;# 
  6780  0499                     	;# 
  6781  049A                     	;# 
  6782  049B                     	;# 
  6783  049B                     	;# 
  6784  049C                     	;# 
  6785  049D                     	;# 
  6786  049E                     	;# 
  6787  049F                     	;# 
  6788  0617                     	;# 
  6789  0618                     	;# 
  6790  0619                     	;# 
  6791  0619                     	;# 
  6792  061A                     	;# 
  6793  061B                     	;# 
  6794  061C                     	;# 
  6795  061C                     	;# 
  6796  061F                     	;# 
  6797  0691                     	;# 
  6798  0692                     	;# 
  6799  0693                     	;# 
  6800  0694                     	;# 
  6801  0695                     	;# 
  6802  0696                     	;# 
  6803  0697                     	;# 
  6804  0698                     	;# 
  6805  0699                     	;# 
  6806  0711                     	;# 
  6807  0712                     	;# 
  6808  0713                     	;# 
  6809  0714                     	;# 
  6810  0715                     	;# 
  6811  0716                     	;# 
  6812  0717                     	;# 
  6813  0718                     	;# 
  6814  0719                     	;# 
  6815  0891                     	;# 
  6816  0891                     	;# 
  6817  0891                     	;# 
  6818  0891                     	;# 
  6819  0891                     	;# 
  6820  0891                     	;# 
  6821  0892                     	;# 
  6822  0892                     	;# 
  6823  0892                     	;# 
  6824  0893                     	;# 
  6825  0893                     	;# 
  6826  0893                     	;# 
  6827  0893                     	;# 
  6828  0893                     	;# 
  6829  0893                     	;# 
  6830  0894                     	;# 
  6831  0894                     	;# 
  6832  0894                     	;# 
  6833  0895                     	;# 
  6834  0895                     	;# 
  6835  0895                     	;# 
  6836  0896                     	;# 
  6837  0896                     	;# 
  6838  0896                     	;# 
  6839  089B                     	;# 
  6840  0911                     	;# 
  6841  0912                     	;# 
  6842  0913                     	;# 
  6843  0914                     	;# 
  6844  0915                     	;# 
  6845  0916                     	;# 
  6846  0918                     	;# 
  6847  0919                     	;# 
  6848  091A                     	;# 
  6849  091B                     	;# 
  6850  091C                     	;# 
  6851  091D                     	;# 
  6852  091E                     	;# 
  6853  091F                     	;# 
  6854  0E0F                     	;# 
  6855  0E10                     	;# 
  6856  0E11                     	;# 
  6857  0E12                     	;# 
  6858  0E13                     	;# 
  6859  0E14                     	;# 
  6860  0E15                     	;# 
  6861  0E16                     	;# 
  6862  0E17                     	;# 
  6863  0E18                     	;# 
  6864  0E19                     	;# 
  6865  0E1A                     	;# 
  6866  0E1B                     	;# 
  6867  0E1C                     	;# 
  6868  0E1D                     	;# 
  6869  0E1E                     	;# 
  6870  0E1F                     	;# 
  6871  0E20                     	;# 
  6872  0E21                     	;# 
  6873  0E22                     	;# 
  6874  0E24                     	;# 
  6875  0E25                     	;# 
  6876  0E28                     	;# 
  6877  0E29                     	;# 
  6878  0E2A                     	;# 
  6879  0E2B                     	;# 
  6880  0E2C                     	;# 
  6881  0E2D                     	;# 
  6882  0E2E                     	;# 
  6883  0E2F                     	;# 
  6884  0E90                     	;# 
  6885  0E91                     	;# 
  6886  0E92                     	;# 
  6887  0E94                     	;# 
  6888  0E95                     	;# 
  6889  0E9C                     	;# 
  6890  0E9D                     	;# 
  6891  0E9E                     	;# 
  6892  0E9F                     	;# 
  6893  0EA0                     	;# 
  6894  0EA1                     	;# 
  6895  0EA2                     	;# 
  6896  0EA3                     	;# 
  6897  0EA4                     	;# 
  6898  0EA5                     	;# 
  6899  0EA6                     	;# 
  6900  0EA7                     	;# 
  6901  0F0F                     	;# 
  6902  0F10                     	;# 
  6903  0F11                     	;# 
  6904  0F12                     	;# 
  6905  0F13                     	;# 
  6906  0F14                     	;# 
  6907  0F15                     	;# 
  6908  0F16                     	;# 
  6909  0F17                     	;# 
  6910  0F18                     	;# 
  6911  0F19                     	;# 
  6912  0F1A                     	;# 
  6913  0F1B                     	;# 
  6914  0F1C                     	;# 
  6915  0F1D                     	;# 
  6916  0F1E                     	;# 
  6917  0F1F                     	;# 
  6918  0F20                     	;# 
  6919  0F21                     	;# 
  6920  0F22                     	;# 
  6921  0F23                     	;# 
  6922  0F24                     	;# 
  6923  0F25                     	;# 
  6924  0F26                     	;# 
  6925  0F27                     	;# 
  6926  0F28                     	;# 
  6927  0F29                     	;# 
  6928  0F2A                     	;# 
  6929  0F2B                     	;# 
  6930  0F2C                     	;# 
  6931  0F2D                     	;# 
  6932  0F2E                     	;# 
  6933  0F2F                     	;# 
  6934  0F30                     	;# 
  6935  0F31                     	;# 
  6936  0F32                     	;# 
  6937  0F33                     	;# 
  6938  0F34                     	;# 
  6939  0F35                     	;# 
  6940  0F36                     	;# 
  6941  0F37                     	;# 
  6942  0FE4                     	;# 
  6943  0FE5                     	;# 
  6944  0FE6                     	;# 
  6945  0FE7                     	;# 
  6946  0FE8                     	;# 
  6947  0FE9                     	;# 
  6948  0FEA                     	;# 
  6949  0FEB                     	;# 
  6950  0FED                     	;# 
  6951  0FEE                     	;# 
  6952  0FEF                     	;# 
  6953  0000                     	;# 
  6954  0001                     	;# 
  6955  0002                     	;# 
  6956  0003                     	;# 
  6957  0004                     	;# 
  6958  0005                     	;# 
  6959  0006                     	;# 
  6960  0007                     	;# 
  6961  0008                     	;# 
  6962  0009                     	;# 
  6963  000A                     	;# 
  6964  000B                     	;# 
  6965  000C                     	;# 
  6966  000D                     	;# 
  6967  000E                     	;# 
  6968  0010                     	;# 
  6969  0011                     	;# 
  6970  0012                     	;# 
  6971  0013                     	;# 
  6972  0014                     	;# 
  6973  0015                     	;# 
  6974  0015                     	;# 
  6975  0016                     	;# 
  6976  0016                     	;# 
  6977  0017                     	;# 
  6978  0018                     	;# 
  6979  0019                     	;# 
  6980  0019                     	;# 
  6981  001A                     	;# 
  6982  001B                     	;# 
  6983  001C                     	;# 
  6984  001D                     	;# 
  6985  001E                     	;# 
  6986  001F                     	;# 
  6987  008C                     	;# 
  6988  008D                     	;# 
  6989  008E                     	;# 
  6990  0090                     	;# 
  6991  0091                     	;# 
  6992  0092                     	;# 
  6993  0093                     	;# 
  6994  0094                     	;# 
  6995  0097                     	;# 
  6996  009B                     	;# 
  6997  009B                     	;# 
  6998  009C                     	;# 
  6999  009D                     	;# 
  7000  009E                     	;# 
  7001  009F                     	;# 
  7002  010C                     	;# 
  7003  010D                     	;# 
  7004  010E                     	;# 
  7005  0111                     	;# 
  7006  0112                     	;# 
  7007  0113                     	;# 
  7008  0114                     	;# 
  7009  0115                     	;# 
  7010  0116                     	;# 
  7011  0117                     	;# 
  7012  0118                     	;# 
  7013  0119                     	;# 
  7014  018C                     	;# 
  7015  018D                     	;# 
  7016  018E                     	;# 
  7017  0199                     	;# 
  7018  0199                     	;# 
  7019  0199                     	;# 
  7020  019A                     	;# 
  7021  019A                     	;# 
  7022  019A                     	;# 
  7023  019B                     	;# 
  7024  019B                     	;# 
  7025  019B                     	;# 
  7026  019B                     	;# 
  7027  019B                     	;# 
  7028  019C                     	;# 
  7029  019C                     	;# 
  7030  019C                     	;# 
  7031  019D                     	;# 
  7032  019D                     	;# 
  7033  019D                     	;# 
  7034  019E                     	;# 
  7035  019E                     	;# 
  7036  019E                     	;# 
  7037  019F                     	;# 
  7038  019F                     	;# 
  7039  019F                     	;# 
  7040  019F                     	;# 
  7041  019F                     	;# 
  7042  020C                     	;# 
  7043  020D                     	;# 
  7044  020E                     	;# 
  7045  0211                     	;# 
  7046  0211                     	;# 
  7047  0212                     	;# 
  7048  0212                     	;# 
  7049  0213                     	;# 
  7050  0213                     	;# 
  7051  0214                     	;# 
  7052  0214                     	;# 
  7053  0215                     	;# 
  7054  0215                     	;# 
  7055  0215                     	;# 
  7056  0215                     	;# 
  7057  0216                     	;# 
  7058  0216                     	;# 
  7059  0217                     	;# 
  7060  0217                     	;# 
  7061  0219                     	;# 
  7062  021A                     	;# 
  7063  021B                     	;# 
  7064  021C                     	;# 
  7065  021D                     	;# 
  7066  021D                     	;# 
  7067  021E                     	;# 
  7068  021F                     	;# 
  7069  028C                     	;# 
  7070  028D                     	;# 
  7071  028E                     	;# 
  7072  0291                     	;# 
  7073  0291                     	;# 
  7074  0292                     	;# 
  7075  0293                     	;# 
  7076  0294                     	;# 
  7077  0295                     	;# 
  7078  0295                     	;# 
  7079  0296                     	;# 
  7080  0297                     	;# 
  7081  0298                     	;# 
  7082  029F                     	;# 
  7083  030C                     	;# 
  7084  030D                     	;# 
  7085  030E                     	;# 
  7086  0311                     	;# 
  7087  0311                     	;# 
  7088  0312                     	;# 
  7089  0313                     	;# 
  7090  0314                     	;# 
  7091  0315                     	;# 
  7092  0315                     	;# 
  7093  0316                     	;# 
  7094  0317                     	;# 
  7095  0318                     	;# 
  7096  038C                     	;# 
  7097  038D                     	;# 
  7098  038E                     	;# 
  7099  0391                     	;# 
  7100  0392                     	;# 
  7101  0393                     	;# 
  7102  0394                     	;# 
  7103  0395                     	;# 
  7104  0396                     	;# 
  7105  0397                     	;# 
  7106  0398                     	;# 
  7107  0399                     	;# 
  7108  039A                     	;# 
  7109  039C                     	;# 
  7110  039D                     	;# 
  7111  039E                     	;# 
  7112  039F                     	;# 
  7113  0411                     	;# 
  7114  0411                     	;# 
  7115  0412                     	;# 
  7116  0413                     	;# 
  7117  0414                     	;# 
  7118  0415                     	;# 
  7119  0416                     	;# 
  7120  0417                     	;# 
  7121  0418                     	;# 
  7122  0418                     	;# 
  7123  0419                     	;# 
  7124  041A                     	;# 
  7125  041B                     	;# 
  7126  041C                     	;# 
  7127  041D                     	;# 
  7128  041E                     	;# 
  7129  041F                     	;# 
  7130  0498                     	;# 
  7131  0498                     	;# 
  7132  0499                     	;# 
  7133  049A                     	;# 
  7134  049B                     	;# 
  7135  049B                     	;# 
  7136  049C                     	;# 
  7137  049D                     	;# 
  7138  049E                     	;# 
  7139  049F                     	;# 
  7140  0617                     	;# 
  7141  0618                     	;# 
  7142  0619                     	;# 
  7143  0619                     	;# 
  7144  061A                     	;# 
  7145  061B                     	;# 
  7146  061C                     	;# 
  7147  061C                     	;# 
  7148  061F                     	;# 
  7149  0691                     	;# 
  7150  0692                     	;# 
  7151  0693                     	;# 
  7152  0694                     	;# 
  7153  0695                     	;# 
  7154  0696                     	;# 
  7155  0697                     	;# 
  7156  0698                     	;# 
  7157  0699                     	;# 
  7158  0711                     	;# 
  7159  0712                     	;# 
  7160  0713                     	;# 
  7161  0714                     	;# 
  7162  0715                     	;# 
  7163  0716                     	;# 
  7164  0717                     	;# 
  7165  0718                     	;# 
  7166  0719                     	;# 
  7167  0891                     	;# 
  7168  0891                     	;# 
  7169  0891                     	;# 
  7170  0891                     	;# 
  7171  0891                     	;# 
  7172  0891                     	;# 
  7173  0892                     	;# 
  7174  0892                     	;# 
  7175  0892                     	;# 
  7176  0893                     	;# 
  7177  0893                     	;# 
  7178  0893                     	;# 
  7179  0893                     	;# 
  7180  0893                     	;# 
  7181  0893                     	;# 
  7182  0894                     	;# 
  7183  0894                     	;# 
  7184  0894                     	;# 
  7185  0895                     	;# 
  7186  0895                     	;# 
  7187  0895                     	;# 
  7188  0896                     	;# 
  7189  0896                     	;# 
  7190  0896                     	;# 
  7191  089B                     	;# 
  7192  0911                     	;# 
  7193  0912                     	;# 
  7194  0913                     	;# 
  7195  0914                     	;# 
  7196  0915                     	;# 
  7197  0916                     	;# 
  7198  0918                     	;# 
  7199  0919                     	;# 
  7200  091A                     	;# 
  7201  091B                     	;# 
  7202  091C                     	;# 
  7203  091D                     	;# 
  7204  091E                     	;# 
  7205  091F                     	;# 
  7206  0E0F                     	;# 
  7207  0E10                     	;# 
  7208  0E11                     	;# 
  7209  0E12                     	;# 
  7210  0E13                     	;# 
  7211  0E14                     	;# 
  7212  0E15                     	;# 
  7213  0E16                     	;# 
  7214  0E17                     	;# 
  7215  0E18                     	;# 
  7216  0E19                     	;# 
  7217  0E1A                     	;# 
  7218  0E1B                     	;# 
  7219  0E1C                     	;# 
  7220  0E1D                     	;# 
  7221  0E1E                     	;# 
  7222  0E1F                     	;# 
  7223  0E20                     	;# 
  7224  0E21                     	;# 
  7225  0E22                     	;# 
  7226  0E24                     	;# 
  7227  0E25                     	;# 
  7228  0E28                     	;# 
  7229  0E29                     	;# 
  7230  0E2A                     	;# 
  7231  0E2B                     	;# 
  7232  0E2C                     	;# 
  7233  0E2D                     	;# 
  7234  0E2E                     	;# 
  7235  0E2F                     	;# 
  7236  0E90                     	;# 
  7237  0E91                     	;# 
  7238  0E92                     	;# 
  7239  0E94                     	;# 
  7240  0E95                     	;# 
  7241  0E9C                     	;# 
  7242  0E9D                     	;# 
  7243  0E9E                     	;# 
  7244  0E9F                     	;# 
  7245  0EA0                     	;# 
  7246  0EA1                     	;# 
  7247  0EA2                     	;# 
  7248  0EA3                     	;# 
  7249  0EA4                     	;# 
  7250  0EA5                     	;# 
  7251  0EA6                     	;# 
  7252  0EA7                     	;# 
  7253  0F0F                     	;# 
  7254  0F10                     	;# 
  7255  0F11                     	;# 
  7256  0F12                     	;# 
  7257  0F13                     	;# 
  7258  0F14                     	;# 
  7259  0F15                     	;# 
  7260  0F16                     	;# 
  7261  0F17                     	;# 
  7262  0F18                     	;# 
  7263  0F19                     	;# 
  7264  0F1A                     	;# 
  7265  0F1B                     	;# 
  7266  0F1C                     	;# 
  7267  0F1D                     	;# 
  7268  0F1E                     	;# 
  7269  0F1F                     	;# 
  7270  0F20                     	;# 
  7271  0F21                     	;# 
  7272  0F22                     	;# 
  7273  0F23                     	;# 
  7274  0F24                     	;# 
  7275  0F25                     	;# 
  7276  0F26                     	;# 
  7277  0F27                     	;# 
  7278  0F28                     	;# 
  7279  0F29                     	;# 
  7280  0F2A                     	;# 
  7281  0F2B                     	;# 
  7282  0F2C                     	;# 
  7283  0F2D                     	;# 
  7284  0F2E                     	;# 
  7285  0F2F                     	;# 
  7286  0F30                     	;# 
  7287  0F31                     	;# 
  7288  0F32                     	;# 
  7289  0F33                     	;# 
  7290  0F34                     	;# 
  7291  0F35                     	;# 
  7292  0F36                     	;# 
  7293  0F37                     	;# 
  7294  0FE4                     	;# 
  7295  0FE5                     	;# 
  7296  0FE6                     	;# 
  7297  0FE7                     	;# 
  7298  0FE8                     	;# 
  7299  0FE9                     	;# 
  7300  0FEA                     	;# 
  7301  0FEB                     	;# 
  7302  0FED                     	;# 
  7303  0FEE                     	;# 
  7304  0FEF                     	;# 
  7305  0000                     	;# 
  7306  0001                     	;# 
  7307  0002                     	;# 
  7308  0003                     	;# 
  7309  0004                     	;# 
  7310  0005                     	;# 
  7311  0006                     	;# 
  7312  0007                     	;# 
  7313  0008                     	;# 
  7314  0009                     	;# 
  7315  000A                     	;# 
  7316  000B                     	;# 
  7317  000C                     	;# 
  7318  000D                     	;# 
  7319  000E                     	;# 
  7320  0010                     	;# 
  7321  0011                     	;# 
  7322  0012                     	;# 
  7323  0013                     	;# 
  7324  0014                     	;# 
  7325  0015                     	;# 
  7326  0015                     	;# 
  7327  0016                     	;# 
  7328  0016                     	;# 
  7329  0017                     	;# 
  7330  0018                     	;# 
  7331  0019                     	;# 
  7332  0019                     	;# 
  7333  001A                     	;# 
  7334  001B                     	;# 
  7335  001C                     	;# 
  7336  001D                     	;# 
  7337  001E                     	;# 
  7338  001F                     	;# 
  7339  008C                     	;# 
  7340  008D                     	;# 
  7341  008E                     	;# 
  7342  0090                     	;# 
  7343  0091                     	;# 
  7344  0092                     	;# 
  7345  0093                     	;# 
  7346  0094                     	;# 
  7347  0097                     	;# 
  7348  009B                     	;# 
  7349  009B                     	;# 
  7350  009C                     	;# 
  7351  009D                     	;# 
  7352  009E                     	;# 
  7353  009F                     	;# 
  7354  010C                     	;# 
  7355  010D                     	;# 
  7356  010E                     	;# 
  7357  0111                     	;# 
  7358  0112                     	;# 
  7359  0113                     	;# 
  7360  0114                     	;# 
  7361  0115                     	;# 
  7362  0116                     	;# 
  7363  0117                     	;# 
  7364  0118                     	;# 
  7365  0119                     	;# 
  7366  018C                     	;# 
  7367  018D                     	;# 
  7368  018E                     	;# 
  7369  0199                     	;# 
  7370  0199                     	;# 
  7371  0199                     	;# 
  7372  019A                     	;# 
  7373  019A                     	;# 
  7374  019A                     	;# 
  7375  019B                     	;# 
  7376  019B                     	;# 
  7377  019B                     	;# 
  7378  019B                     	;# 
  7379  019B                     	;# 
  7380  019C                     	;# 
  7381  019C                     	;# 
  7382  019C                     	;# 
  7383  019D                     	;# 
  7384  019D                     	;# 
  7385  019D                     	;# 
  7386  019E                     	;# 
  7387  019E                     	;# 
  7388  019E                     	;# 
  7389  019F                     	;# 
  7390  019F                     	;# 
  7391  019F                     	;# 
  7392  019F                     	;# 
  7393  019F                     	;# 
  7394  020C                     	;# 
  7395  020D                     	;# 
  7396  020E                     	;# 
  7397  0211                     	;# 
  7398  0211                     	;# 
  7399  0212                     	;# 
  7400  0212                     	;# 
  7401  0213                     	;# 
  7402  0213                     	;# 
  7403  0214                     	;# 
  7404  0214                     	;# 
  7405  0215                     	;# 
  7406  0215                     	;# 
  7407  0215                     	;# 
  7408  0215                     	;# 
  7409  0216                     	;# 
  7410  0216                     	;# 
  7411  0217                     	;# 
  7412  0217                     	;# 
  7413  0219                     	;# 
  7414  021A                     	;# 
  7415  021B                     	;# 
  7416  021C                     	;# 
  7417  021D                     	;# 
  7418  021D                     	;# 
  7419  021E                     	;# 
  7420  021F                     	;# 
  7421  028C                     	;# 
  7422  028D                     	;# 
  7423  028E                     	;# 
  7424  0291                     	;# 
  7425  0291                     	;# 
  7426  0292                     	;# 
  7427  0293                     	;# 
  7428  0294                     	;# 
  7429  0295                     	;# 
  7430  0295                     	;# 
  7431  0296                     	;# 
  7432  0297                     	;# 
  7433  0298                     	;# 
  7434  029F                     	;# 
  7435  030C                     	;# 
  7436  030D                     	;# 
  7437  030E                     	;# 
  7438  0311                     	;# 
  7439  0311                     	;# 
  7440  0312                     	;# 
  7441  0313                     	;# 
  7442  0314                     	;# 
  7443  0315                     	;# 
  7444  0315                     	;# 
  7445  0316                     	;# 
  7446  0317                     	;# 
  7447  0318                     	;# 
  7448  038C                     	;# 
  7449  038D                     	;# 
  7450  038E                     	;# 
  7451  0391                     	;# 
  7452  0392                     	;# 
  7453  0393                     	;# 
  7454  0394                     	;# 
  7455  0395                     	;# 
  7456  0396                     	;# 
  7457  0397                     	;# 
  7458  0398                     	;# 
  7459  0399                     	;# 
  7460  039A                     	;# 
  7461  039C                     	;# 
  7462  039D                     	;# 
  7463  039E                     	;# 
  7464  039F                     	;# 
  7465  0411                     	;# 
  7466  0411                     	;# 
  7467  0412                     	;# 
  7468  0413                     	;# 
  7469  0414                     	;# 
  7470  0415                     	;# 
  7471  0416                     	;# 
  7472  0417                     	;# 
  7473  0418                     	;# 
  7474  0418                     	;# 
  7475  0419                     	;# 
  7476  041A                     	;# 
  7477  041B                     	;# 
  7478  041C                     	;# 
  7479  041D                     	;# 
  7480  041E                     	;# 
  7481  041F                     	;# 
  7482  0498                     	;# 
  7483  0498                     	;# 
  7484  0499                     	;# 
  7485  049A                     	;# 
  7486  049B                     	;# 
  7487  049B                     	;# 
  7488  049C                     	;# 
  7489  049D                     	;# 
  7490  049E                     	;# 
  7491  049F                     	;# 
  7492  0617                     	;# 
  7493  0618                     	;# 
  7494  0619                     	;# 
  7495  0619                     	;# 
  7496  061A                     	;# 
  7497  061B                     	;# 
  7498  061C                     	;# 
  7499  061C                     	;# 
  7500  061F                     	;# 
  7501  0691                     	;# 
  7502  0692                     	;# 
  7503  0693                     	;# 
  7504  0694                     	;# 
  7505  0695                     	;# 
  7506  0696                     	;# 
  7507  0697                     	;# 
  7508  0698                     	;# 
  7509  0699                     	;# 
  7510  0711                     	;# 
  7511  0712                     	;# 
  7512  0713                     	;# 
  7513  0714                     	;# 
  7514  0715                     	;# 
  7515  0716                     	;# 
  7516  0717                     	;# 
  7517  0718                     	;# 
  7518  0719                     	;# 
  7519  0891                     	;# 
  7520  0891                     	;# 
  7521  0891                     	;# 
  7522  0891                     	;# 
  7523  0891                     	;# 
  7524  0891                     	;# 
  7525  0892                     	;# 
  7526  0892                     	;# 
  7527  0892                     	;# 
  7528  0893                     	;# 
  7529  0893                     	;# 
  7530  0893                     	;# 
  7531  0893                     	;# 
  7532  0893                     	;# 
  7533  0893                     	;# 
  7534  0894                     	;# 
  7535  0894                     	;# 
  7536  0894                     	;# 
  7537  0895                     	;# 
  7538  0895                     	;# 
  7539  0895                     	;# 
  7540  0896                     	;# 
  7541  0896                     	;# 
  7542  0896                     	;# 
  7543  089B                     	;# 
  7544  0911                     	;# 
  7545  0912                     	;# 
  7546  0913                     	;# 
  7547  0914                     	;# 
  7548  0915                     	;# 
  7549  0916                     	;# 
  7550  0918                     	;# 
  7551  0919                     	;# 
  7552  091A                     	;# 
  7553  091B                     	;# 
  7554  091C                     	;# 
  7555  091D                     	;# 
  7556  091E                     	;# 
  7557  091F                     	;# 
  7558  0E0F                     	;# 
  7559  0E10                     	;# 
  7560  0E11                     	;# 
  7561  0E12                     	;# 
  7562  0E13                     	;# 
  7563  0E14                     	;# 
  7564  0E15                     	;# 
  7565  0E16                     	;# 
  7566  0E17                     	;# 
  7567  0E18                     	;# 
  7568  0E19                     	;# 
  7569  0E1A                     	;# 
  7570  0E1B                     	;# 
  7571  0E1C                     	;# 
  7572  0E1D                     	;# 
  7573  0E1E                     	;# 
  7574  0E1F                     	;# 
  7575  0E20                     	;# 
  7576  0E21                     	;# 
  7577  0E22                     	;# 
  7578  0E24                     	;# 
  7579  0E25                     	;# 
  7580  0E28                     	;# 
  7581  0E29                     	;# 
  7582  0E2A                     	;# 
  7583  0E2B                     	;# 
  7584  0E2C                     	;# 
  7585  0E2D                     	;# 
  7586  0E2E                     	;# 
  7587  0E2F                     	;# 
  7588  0E90                     	;# 
  7589  0E91                     	;# 
  7590  0E92                     	;# 
  7591  0E94                     	;# 
  7592  0E95                     	;# 
  7593  0E9C                     	;# 
  7594  0E9D                     	;# 
  7595  0E9E                     	;# 
  7596  0E9F                     	;# 
  7597  0EA0                     	;# 
  7598  0EA1                     	;# 
  7599  0EA2                     	;# 
  7600  0EA3                     	;# 
  7601  0EA4                     	;# 
  7602  0EA5                     	;# 
  7603  0EA6                     	;# 
  7604  0EA7                     	;# 
  7605  0F0F                     	;# 
  7606  0F10                     	;# 
  7607  0F11                     	;# 
  7608  0F12                     	;# 
  7609  0F13                     	;# 
  7610  0F14                     	;# 
  7611  0F15                     	;# 
  7612  0F16                     	;# 
  7613  0F17                     	;# 
  7614  0F18                     	;# 
  7615  0F19                     	;# 
  7616  0F1A                     	;# 
  7617  0F1B                     	;# 
  7618  0F1C                     	;# 
  7619  0F1D                     	;# 
  7620  0F1E                     	;# 
  7621  0F1F                     	;# 
  7622  0F20                     	;# 
  7623  0F21                     	;# 
  7624  0F22                     	;# 
  7625  0F23                     	;# 
  7626  0F24                     	;# 
  7627  0F25                     	;# 
  7628  0F26                     	;# 
  7629  0F27                     	;# 
  7630  0F28                     	;# 
  7631  0F29                     	;# 
  7632  0F2A                     	;# 
  7633  0F2B                     	;# 
  7634  0F2C                     	;# 
  7635  0F2D                     	;# 
  7636  0F2E                     	;# 
  7637  0F2F                     	;# 
  7638  0F30                     	;# 
  7639  0F31                     	;# 
  7640  0F32                     	;# 
  7641  0F33                     	;# 
  7642  0F34                     	;# 
  7643  0F35                     	;# 
  7644  0F36                     	;# 
  7645  0F37                     	;# 
  7646  0FE4                     	;# 
  7647  0FE5                     	;# 
  7648  0FE6                     	;# 
  7649  0FE7                     	;# 
  7650  0FE8                     	;# 
  7651  0FE9                     	;# 
  7652  0FEA                     	;# 
  7653  0FEB                     	;# 
  7654  0FED                     	;# 
  7655  0FEE                     	;# 
  7656  0FEF                     	;# 
  7657  0000                     	;# 
  7658  0001                     	;# 
  7659  0002                     	;# 
  7660  0003                     	;# 
  7661  0004                     	;# 
  7662  0005                     	;# 
  7663  0006                     	;# 
  7664  0007                     	;# 
  7665  0008                     	;# 
  7666  0009                     	;# 
  7667  000A                     	;# 
  7668  000B                     	;# 
  7669  000C                     	;# 
  7670  000D                     	;# 
  7671  000E                     	;# 
  7672  0010                     	;# 
  7673  0011                     	;# 
  7674  0012                     	;# 
  7675  0013                     	;# 
  7676  0014                     	;# 
  7677  0015                     	;# 
  7678  0015                     	;# 
  7679  0016                     	;# 
  7680  0016                     	;# 
  7681  0017                     	;# 
  7682  0018                     	;# 
  7683  0019                     	;# 
  7684  0019                     	;# 
  7685  001A                     	;# 
  7686  001B                     	;# 
  7687  001C                     	;# 
  7688  001D                     	;# 
  7689  001E                     	;# 
  7690  001F                     	;# 
  7691  008C                     	;# 
  7692  008D                     	;# 
  7693  008E                     	;# 
  7694  0090                     	;# 
  7695  0091                     	;# 
  7696  0092                     	;# 
  7697  0093                     	;# 
  7698  0094                     	;# 
  7699  0097                     	;# 
  7700  009B                     	;# 
  7701  009B                     	;# 
  7702  009C                     	;# 
  7703  009D                     	;# 
  7704  009E                     	;# 
  7705  009F                     	;# 
  7706  010C                     	;# 
  7707  010D                     	;# 
  7708  010E                     	;# 
  7709  0111                     	;# 
  7710  0112                     	;# 
  7711  0113                     	;# 
  7712  0114                     	;# 
  7713  0115                     	;# 
  7714  0116                     	;# 
  7715  0117                     	;# 
  7716  0118                     	;# 
  7717  0119                     	;# 
  7718  018C                     	;# 
  7719  018D                     	;# 
  7720  018E                     	;# 
  7721  0199                     	;# 
  7722  0199                     	;# 
  7723  0199                     	;# 
  7724  019A                     	;# 
  7725  019A                     	;# 
  7726  019A                     	;# 
  7727  019B                     	;# 
  7728  019B                     	;# 
  7729  019B                     	;# 
  7730  019B                     	;# 
  7731  019B                     	;# 
  7732  019C                     	;# 
  7733  019C                     	;# 
  7734  019C                     	;# 
  7735  019D                     	;# 
  7736  019D                     	;# 
  7737  019D                     	;# 
  7738  019E                     	;# 
  7739  019E                     	;# 
  7740  019E                     	;# 
  7741  019F                     	;# 
  7742  019F                     	;# 
  7743  019F                     	;# 
  7744  019F                     	;# 
  7745  019F                     	;# 
  7746  020C                     	;# 
  7747  020D                     	;# 
  7748  020E                     	;# 
  7749  0211                     	;# 
  7750  0211                     	;# 
  7751  0212                     	;# 
  7752  0212                     	;# 
  7753  0213                     	;# 
  7754  0213                     	;# 
  7755  0214                     	;# 
  7756  0214                     	;# 
  7757  0215                     	;# 
  7758  0215                     	;# 
  7759  0215                     	;# 
  7760  0215                     	;# 
  7761  0216                     	;# 
  7762  0216                     	;# 
  7763  0217                     	;# 
  7764  0217                     	;# 
  7765  0219                     	;# 
  7766  021A                     	;# 
  7767  021B                     	;# 
  7768  021C                     	;# 
  7769  021D                     	;# 
  7770  021D                     	;# 
  7771  021E                     	;# 
  7772  021F                     	;# 
  7773  028C                     	;# 
  7774  028D                     	;# 
  7775  028E                     	;# 
  7776  0291                     	;# 
  7777  0291                     	;# 
  7778  0292                     	;# 
  7779  0293                     	;# 
  7780  0294                     	;# 
  7781  0295                     	;# 
  7782  0295                     	;# 
  7783  0296                     	;# 
  7784  0297                     	;# 
  7785  0298                     	;# 
  7786  029F                     	;# 
  7787  030C                     	;# 
  7788  030D                     	;# 
  7789  030E                     	;# 
  7790  0311                     	;# 
  7791  0311                     	;# 
  7792  0312                     	;# 
  7793  0313                     	;# 
  7794  0314                     	;# 
  7795  0315                     	;# 
  7796  0315                     	;# 
  7797  0316                     	;# 
  7798  0317                     	;# 
  7799  0318                     	;# 
  7800  038C                     	;# 
  7801  038D                     	;# 
  7802  038E                     	;# 
  7803  0391                     	;# 
  7804  0392                     	;# 
  7805  0393                     	;# 
  7806  0394                     	;# 
  7807  0395                     	;# 
  7808  0396                     	;# 
  7809  0397                     	;# 
  7810  0398                     	;# 
  7811  0399                     	;# 
  7812  039A                     	;# 
  7813  039C                     	;# 
  7814  039D                     	;# 
  7815  039E                     	;# 
  7816  039F                     	;# 
  7817  0411                     	;# 
  7818  0411                     	;# 
  7819  0412                     	;# 
  7820  0413                     	;# 
  7821  0414                     	;# 
  7822  0415                     	;# 
  7823  0416                     	;# 
  7824  0417                     	;# 
  7825  0418                     	;# 
  7826  0418                     	;# 
  7827  0419                     	;# 
  7828  041A                     	;# 
  7829  041B                     	;# 
  7830  041C                     	;# 
  7831  041D                     	;# 
  7832  041E                     	;# 
  7833  041F                     	;# 
  7834  0498                     	;# 
  7835  0498                     	;# 
  7836  0499                     	;# 
  7837  049A                     	;# 
  7838  049B                     	;# 
  7839  049B                     	;# 
  7840  049C                     	;# 
  7841  049D                     	;# 
  7842  049E                     	;# 
  7843  049F                     	;# 
  7844  0617                     	;# 
  7845  0618                     	;# 
  7846  0619                     	;# 
  7847  0619                     	;# 
  7848  061A                     	;# 
  7849  061B                     	;# 
  7850  061C                     	;# 
  7851  061C                     	;# 
  7852  061F                     	;# 
  7853  0691                     	;# 
  7854  0692                     	;# 
  7855  0693                     	;# 
  7856  0694                     	;# 
  7857  0695                     	;# 
  7858  0696                     	;# 
  7859  0697                     	;# 
  7860  0698                     	;# 
  7861  0699                     	;# 
  7862  0711                     	;# 
  7863  0712                     	;# 
  7864  0713                     	;# 
  7865  0714                     	;# 
  7866  0715                     	;# 
  7867  0716                     	;# 
  7868  0717                     	;# 
  7869  0718                     	;# 
  7870  0719                     	;# 
  7871  0891                     	;# 
  7872  0891                     	;# 
  7873  0891                     	;# 
  7874  0891                     	;# 
  7875  0891                     	;# 
  7876  0891                     	;# 
  7877  0892                     	;# 
  7878  0892                     	;# 
  7879  0892                     	;# 
  7880  0893                     	;# 
  7881  0893                     	;# 
  7882  0893                     	;# 
  7883  0893                     	;# 
  7884  0893                     	;# 
  7885  0893                     	;# 
  7886  0894                     	;# 
  7887  0894                     	;# 
  7888  0894                     	;# 
  7889  0895                     	;# 
  7890  0895                     	;# 
  7891  0895                     	;# 
  7892  0896                     	;# 
  7893  0896                     	;# 
  7894  0896                     	;# 
  7895  089B                     	;# 
  7896  0911                     	;# 
  7897  0912                     	;# 
  7898  0913                     	;# 
  7899  0914                     	;# 
  7900  0915                     	;# 
  7901  0916                     	;# 
  7902  0918                     	;# 
  7903  0919                     	;# 
  7904  091A                     	;# 
  7905  091B                     	;# 
  7906  091C                     	;# 
  7907  091D                     	;# 
  7908  091E                     	;# 
  7909  091F                     	;# 
  7910  0E0F                     	;# 
  7911  0E10                     	;# 
  7912  0E11                     	;# 
  7913  0E12                     	;# 
  7914  0E13                     	;# 
  7915  0E14                     	;# 
  7916  0E15                     	;# 
  7917  0E16                     	;# 
  7918  0E17                     	;# 
  7919  0E18                     	;# 
  7920  0E19                     	;# 
  7921  0E1A                     	;# 
  7922  0E1B                     	;# 
  7923  0E1C                     	;# 
  7924  0E1D                     	;# 
  7925  0E1E                     	;# 
  7926  0E1F                     	;# 
  7927  0E20                     	;# 
  7928  0E21                     	;# 
  7929  0E22                     	;# 
  7930  0E24                     	;# 
  7931  0E25                     	;# 
  7932  0E28                     	;# 
  7933  0E29                     	;# 
  7934  0E2A                     	;# 
  7935  0E2B                     	;# 
  7936  0E2C                     	;# 
  7937  0E2D                     	;# 
  7938  0E2E                     	;# 
  7939  0E2F                     	;# 
  7940  0E90                     	;# 
  7941  0E91                     	;# 
  7942  0E92                     	;# 
  7943  0E94                     	;# 
  7944  0E95                     	;# 
  7945  0E9C                     	;# 
  7946  0E9D                     	;# 
  7947  0E9E                     	;# 
  7948  0E9F                     	;# 
  7949  0EA0                     	;# 
  7950  0EA1                     	;# 
  7951  0EA2                     	;# 
  7952  0EA3                     	;# 
  7953  0EA4                     	;# 
  7954  0EA5                     	;# 
  7955  0EA6                     	;# 
  7956  0EA7                     	;# 
  7957  0F0F                     	;# 
  7958  0F10                     	;# 
  7959  0F11                     	;# 
  7960  0F12                     	;# 
  7961  0F13                     	;# 
  7962  0F14                     	;# 
  7963  0F15                     	;# 
  7964  0F16                     	;# 
  7965  0F17                     	;# 
  7966  0F18                     	;# 
  7967  0F19                     	;# 
  7968  0F1A                     	;# 
  7969  0F1B                     	;# 
  7970  0F1C                     	;# 
  7971  0F1D                     	;# 
  7972  0F1E                     	;# 
  7973  0F1F                     	;# 
  7974  0F20                     	;# 
  7975  0F21                     	;# 
  7976  0F22                     	;# 
  7977  0F23                     	;# 
  7978  0F24                     	;# 
  7979  0F25                     	;# 
  7980  0F26                     	;# 
  7981  0F27                     	;# 
  7982  0F28                     	;# 
  7983  0F29                     	;# 
  7984  0F2A                     	;# 
  7985  0F2B                     	;# 
  7986  0F2C                     	;# 
  7987  0F2D                     	;# 
  7988  0F2E                     	;# 
  7989  0F2F                     	;# 
  7990  0F30                     	;# 
  7991  0F31                     	;# 
  7992  0F32                     	;# 
  7993  0F33                     	;# 
  7994  0F34                     	;# 
  7995  0F35                     	;# 
  7996  0F36                     	;# 
  7997  0F37                     	;# 
  7998  0FE4                     	;# 
  7999  0FE5                     	;# 
  8000  0FE6                     	;# 
  8001  0FE7                     	;# 
  8002  0FE8                     	;# 
  8003  0FE9                     	;# 
  8004  0FEA                     	;# 
  8005  0FEB                     	;# 
  8006  0FED                     	;# 
  8007  0FEE                     	;# 
  8008  0FEF                     	;# 
  8009  0000                     	;# 
  8010  0001                     	;# 
  8011  0002                     	;# 
  8012  0003                     	;# 
  8013  0004                     	;# 
  8014  0005                     	;# 
  8015  0006                     	;# 
  8016  0007                     	;# 
  8017  0008                     	;# 
  8018  0009                     	;# 
  8019  000A                     	;# 
  8020  000B                     	;# 
  8021  000C                     	;# 
  8022  000D                     	;# 
  8023  000E                     	;# 
  8024  0010                     	;# 
  8025  0011                     	;# 
  8026  0012                     	;# 
  8027  0013                     	;# 
  8028  0014                     	;# 
  8029  0015                     	;# 
  8030  0015                     	;# 
  8031  0016                     	;# 
  8032  0016                     	;# 
  8033  0017                     	;# 
  8034  0018                     	;# 
  8035  0019                     	;# 
  8036  0019                     	;# 
  8037  001A                     	;# 
  8038  001B                     	;# 
  8039  001C                     	;# 
  8040  001D                     	;# 
  8041  001E                     	;# 
  8042  001F                     	;# 
  8043  008C                     	;# 
  8044  008D                     	;# 
  8045  008E                     	;# 
  8046  0090                     	;# 
  8047  0091                     	;# 
  8048  0092                     	;# 
  8049  0093                     	;# 
  8050  0094                     	;# 
  8051  0097                     	;# 
  8052  009B                     	;# 
  8053  009B                     	;# 
  8054  009C                     	;# 
  8055  009D                     	;# 
  8056  009E                     	;# 
  8057  009F                     	;# 
  8058  010C                     	;# 
  8059  010D                     	;# 
  8060  010E                     	;# 
  8061  0111                     	;# 
  8062  0112                     	;# 
  8063  0113                     	;# 
  8064  0114                     	;# 
  8065  0115                     	;# 
  8066  0116                     	;# 
  8067  0117                     	;# 
  8068  0118                     	;# 
  8069  0119                     	;# 
  8070  018C                     	;# 
  8071  018D                     	;# 
  8072  018E                     	;# 
  8073  0199                     	;# 
  8074  0199                     	;# 
  8075  0199                     	;# 
  8076  019A                     	;# 
  8077  019A                     	;# 
  8078  019A                     	;# 
  8079  019B                     	;# 
  8080  019B                     	;# 
  8081  019B                     	;# 
  8082  019B                     	;# 
  8083  019B                     	;# 
  8084  019C                     	;# 
  8085  019C                     	;# 
  8086  019C                     	;# 
  8087  019D                     	;# 
  8088  019D                     	;# 
  8089  019D                     	;# 
  8090  019E                     	;# 
  8091  019E                     	;# 
  8092  019E                     	;# 
  8093  019F                     	;# 
  8094  019F                     	;# 
  8095  019F                     	;# 
  8096  019F                     	;# 
  8097  019F                     	;# 
  8098  020C                     	;# 
  8099  020D                     	;# 
  8100  020E                     	;# 
  8101  0211                     	;# 
  8102  0211                     	;# 
  8103  0212                     	;# 
  8104  0212                     	;# 
  8105  0213                     	;# 
  8106  0213                     	;# 
  8107  0214                     	;# 
  8108  0214                     	;# 
  8109  0215                     	;# 
  8110  0215                     	;# 
  8111  0215                     	;# 
  8112  0215                     	;# 
  8113  0216                     	;# 
  8114  0216                     	;# 
  8115  0217                     	;# 
  8116  0217                     	;# 
  8117  0219                     	;# 
  8118  021A                     	;# 
  8119  021B                     	;# 
  8120  021C                     	;# 
  8121  021D                     	;# 
  8122  021D                     	;# 
  8123  021E                     	;# 
  8124  021F                     	;# 
  8125  028C                     	;# 
  8126  028D                     	;# 
  8127  028E                     	;# 
  8128  0291                     	;# 
  8129  0291                     	;# 
  8130  0292                     	;# 
  8131  0293                     	;# 
  8132  0294                     	;# 
  8133  0295                     	;# 
  8134  0295                     	;# 
  8135  0296                     	;# 
  8136  0297                     	;# 
  8137  0298                     	;# 
  8138  029F                     	;# 
  8139  030C                     	;# 
  8140  030D                     	;# 
  8141  030E                     	;# 
  8142  0311                     	;# 
  8143  0311                     	;# 
  8144  0312                     	;# 
  8145  0313                     	;# 
  8146  0314                     	;# 
  8147  0315                     	;# 
  8148  0315                     	;# 
  8149  0316                     	;# 
  8150  0317                     	;# 
  8151  0318                     	;# 
  8152  038C                     	;# 
  8153  038D                     	;# 
  8154  038E                     	;# 
  8155  0391                     	;# 
  8156  0392                     	;# 
  8157  0393                     	;# 
  8158  0394                     	;# 
  8159  0395                     	;# 
  8160  0396                     	;# 
  8161  0397                     	;# 
  8162  0398                     	;# 
  8163  0399                     	;# 
  8164  039A                     	;# 
  8165  039C                     	;# 
  8166  039D                     	;# 
  8167  039E                     	;# 
  8168  039F                     	;# 
  8169  0411                     	;# 
  8170  0411                     	;# 
  8171  0412                     	;# 
  8172  0413                     	;# 
  8173  0414                     	;# 
  8174  0415                     	;# 
  8175  0416                     	;# 
  8176  0417                     	;# 
  8177  0418                     	;# 
  8178  0418                     	;# 
  8179  0419                     	;# 
  8180  041A                     	;# 
  8181  041B                     	;# 
  8182  041C                     	;# 
  8183  041D                     	;# 
  8184  041E                     	;# 
  8185  041F                     	;# 
  8186  0498                     	;# 
  8187  0498                     	;# 
  8188  0499                     	;# 
  8189  049A                     	;# 
  8190  049B                     	;# 
  8191  049B                     	;# 
  8192  049C                     	;# 
  8193  049D                     	;# 
  8194  049E                     	;# 
  8195  049F                     	;# 
  8196  0617                     	;# 
  8197  0618                     	;# 
  8198  0619                     	;# 
  8199  0619                     	;# 
  8200  061A                     	;# 
  8201  061B                     	;# 
  8202  061C                     	;# 
  8203  061C                     	;# 
  8204  061F                     	;# 
  8205  0691                     	;# 
  8206  0692                     	;# 
  8207  0693                     	;# 
  8208  0694                     	;# 
  8209  0695                     	;# 
  8210  0696                     	;# 
  8211  0697                     	;# 
  8212  0698                     	;# 
  8213  0699                     	;# 
  8214  0711                     	;# 
  8215  0712                     	;# 
  8216  0713                     	;# 
  8217  0714                     	;# 
  8218  0715                     	;# 
  8219  0716                     	;# 
  8220  0717                     	;# 
  8221  0718                     	;# 
  8222  0719                     	;# 
  8223  0891                     	;# 
  8224  0891                     	;# 
  8225  0891                     	;# 
  8226  0891                     	;# 
  8227  0891                     	;# 
  8228  0891                     	;# 
  8229  0892                     	;# 
  8230  0892                     	;# 
  8231  0892                     	;# 
  8232  0893                     	;# 
  8233  0893                     	;# 
  8234  0893                     	;# 
  8235  0893                     	;# 
  8236  0893                     	;# 
  8237  0893                     	;# 
  8238  0894                     	;# 
  8239  0894                     	;# 
  8240  0894                     	;# 
  8241  0895                     	;# 
  8242  0895                     	;# 
  8243  0895                     	;# 
  8244  0896                     	;# 
  8245  0896                     	;# 
  8246  0896                     	;# 
  8247  089B                     	;# 
  8248  0911                     	;# 
  8249  0912                     	;# 
  8250  0913                     	;# 
  8251  0914                     	;# 
  8252  0915                     	;# 
  8253  0916                     	;# 
  8254  0918                     	;# 
  8255  0919                     	;# 
  8256  091A                     	;# 
  8257  091B                     	;# 
  8258  091C                     	;# 
  8259  091D                     	;# 
  8260  091E                     	;# 
  8261  091F                     	;# 
  8262  0E0F                     	;# 
  8263  0E10                     	;# 
  8264  0E11                     	;# 
  8265  0E12                     	;# 
  8266  0E13                     	;# 
  8267  0E14                     	;# 
  8268  0E15                     	;# 
  8269  0E16                     	;# 
  8270  0E17                     	;# 
  8271  0E18                     	;# 
  8272  0E19                     	;# 
  8273  0E1A                     	;# 
  8274  0E1B                     	;# 
  8275  0E1C                     	;# 
  8276  0E1D                     	;# 
  8277  0E1E                     	;# 
  8278  0E1F                     	;# 
  8279  0E20                     	;# 
  8280  0E21                     	;# 
  8281  0E22                     	;# 
  8282  0E24                     	;# 
  8283  0E25                     	;# 
  8284  0E28                     	;# 
  8285  0E29                     	;# 
  8286  0E2A                     	;# 
  8287  0E2B                     	;# 
  8288  0E2C                     	;# 
  8289  0E2D                     	;# 
  8290  0E2E                     	;# 
  8291  0E2F                     	;# 
  8292  0E90                     	;# 
  8293  0E91                     	;# 
  8294  0E92                     	;# 
  8295  0E94                     	;# 
  8296  0E95                     	;# 
  8297  0E9C                     	;# 
  8298  0E9D                     	;# 
  8299  0E9E                     	;# 
  8300  0E9F                     	;# 
  8301  0EA0                     	;# 
  8302  0EA1                     	;# 
  8303  0EA2                     	;# 
  8304  0EA3                     	;# 
  8305  0EA4                     	;# 
  8306  0EA5                     	;# 
  8307  0EA6                     	;# 
  8308  0EA7                     	;# 
  8309  0F0F                     	;# 
  8310  0F10                     	;# 
  8311  0F11                     	;# 
  8312  0F12                     	;# 
  8313  0F13                     	;# 
  8314  0F14                     	;# 
  8315  0F15                     	;# 
  8316  0F16                     	;# 
  8317  0F17                     	;# 
  8318  0F18                     	;# 
  8319  0F19                     	;# 
  8320  0F1A                     	;# 
  8321  0F1B                     	;# 
  8322  0F1C                     	;# 
  8323  0F1D                     	;# 
  8324  0F1E                     	;# 
  8325  0F1F                     	;# 
  8326  0F20                     	;# 
  8327  0F21                     	;# 
  8328  0F22                     	;# 
  8329  0F23                     	;# 
  8330  0F24                     	;# 
  8331  0F25                     	;# 
  8332  0F26                     	;# 
  8333  0F27                     	;# 
  8334  0F28                     	;# 
  8335  0F29                     	;# 
  8336  0F2A                     	;# 
  8337  0F2B                     	;# 
  8338  0F2C                     	;# 
  8339  0F2D                     	;# 
  8340  0F2E                     	;# 
  8341  0F2F                     	;# 
  8342  0F30                     	;# 
  8343  0F31                     	;# 
  8344  0F32                     	;# 
  8345  0F33                     	;# 
  8346  0F34                     	;# 
  8347  0F35                     	;# 
  8348  0F36                     	;# 
  8349  0F37                     	;# 
  8350  0FE4                     	;# 
  8351  0FE5                     	;# 
  8352  0FE6                     	;# 
  8353  0FE7                     	;# 
  8354  0FE8                     	;# 
  8355  0FE9                     	;# 
  8356  0FEA                     	;# 
  8357  0FEB                     	;# 
  8358  0FED                     	;# 
  8359  0FEE                     	;# 
  8360  0FEF                     	;# 
  8361  0000                     	;# 
  8362  0001                     	;# 
  8363  0002                     	;# 
  8364  0003                     	;# 
  8365  0004                     	;# 
  8366  0005                     	;# 
  8367  0006                     	;# 
  8368  0007                     	;# 
  8369  0008                     	;# 
  8370  0009                     	;# 
  8371  000A                     	;# 
  8372  000B                     	;# 
  8373  000C                     	;# 
  8374  000D                     	;# 
  8375  000E                     	;# 
  8376  0010                     	;# 
  8377  0011                     	;# 
  8378  0012                     	;# 
  8379  0013                     	;# 
  8380  0014                     	;# 
  8381  0015                     	;# 
  8382  0015                     	;# 
  8383  0016                     	;# 
  8384  0016                     	;# 
  8385  0017                     	;# 
  8386  0018                     	;# 
  8387  0019                     	;# 
  8388  0019                     	;# 
  8389  001A                     	;# 
  8390  001B                     	;# 
  8391  001C                     	;# 
  8392  001D                     	;# 
  8393  001E                     	;# 
  8394  001F                     	;# 
  8395  008C                     	;# 
  8396  008D                     	;# 
  8397  008E                     	;# 
  8398  0090                     	;# 
  8399  0091                     	;# 
  8400  0092                     	;# 
  8401  0093                     	;# 
  8402  0094                     	;# 
  8403  0097                     	;# 
  8404  009B                     	;# 
  8405  009B                     	;# 
  8406  009C                     	;# 
  8407  009D                     	;# 
  8408  009E                     	;# 
  8409  009F                     	;# 
  8410  010C                     	;# 
  8411  010D                     	;# 
  8412  010E                     	;# 
  8413  0111                     	;# 
  8414  0112                     	;# 
  8415  0113                     	;# 
  8416  0114                     	;# 
  8417  0115                     	;# 
  8418  0116                     	;# 
  8419  0117                     	;# 
  8420  0118                     	;# 
  8421  0119                     	;# 
  8422  018C                     	;# 
  8423  018D                     	;# 
  8424  018E                     	;# 
  8425  0199                     	;# 
  8426  0199                     	;# 
  8427  0199                     	;# 
  8428  019A                     	;# 
  8429  019A                     	;# 
  8430  019A                     	;# 
  8431  019B                     	;# 
  8432  019B                     	;# 
  8433  019B                     	;# 
  8434  019B                     	;# 
  8435  019B                     	;# 
  8436  019C                     	;# 
  8437  019C                     	;# 
  8438  019C                     	;# 
  8439  019D                     	;# 
  8440  019D                     	;# 
  8441  019D                     	;# 
  8442  019E                     	;# 
  8443  019E                     	;# 
  8444  019E                     	;# 
  8445  019F                     	;# 
  8446  019F                     	;# 
  8447  019F                     	;# 
  8448  019F                     	;# 
  8449  019F                     	;# 
  8450  020C                     	;# 
  8451  020D                     	;# 
  8452  020E                     	;# 
  8453  0211                     	;# 
  8454  0211                     	;# 
  8455  0212                     	;# 
  8456  0212                     	;# 
  8457  0213                     	;# 
  8458  0213                     	;# 
  8459  0214                     	;# 
  8460  0214                     	;# 
  8461  0215                     	;# 
  8462  0215                     	;# 
  8463  0215                     	;# 
  8464  0215                     	;# 
  8465  0216                     	;# 
  8466  0216                     	;# 
  8467  0217                     	;# 
  8468  0217                     	;# 
  8469  0219                     	;# 
  8470  021A                     	;# 
  8471  021B                     	;# 
  8472  021C                     	;# 
  8473  021D                     	;# 
  8474  021D                     	;# 
  8475  021E                     	;# 
  8476  021F                     	;# 
  8477  028C                     	;# 
  8478  028D                     	;# 
  8479  028E                     	;# 
  8480  0291                     	;# 
  8481  0291                     	;# 
  8482  0292                     	;# 
  8483  0293                     	;# 
  8484  0294                     	;# 
  8485  0295                     	;# 
  8486  0295                     	;# 
  8487  0296                     	;# 
  8488  0297                     	;# 
  8489  0298                     	;# 
  8490  029F                     	;# 
  8491  030C                     	;# 
  8492  030D                     	;# 
  8493  030E                     	;# 
  8494  0311                     	;# 
  8495  0311                     	;# 
  8496  0312                     	;# 
  8497  0313                     	;# 
  8498  0314                     	;# 
  8499  0315                     	;# 
  8500  0315                     	;# 
  8501  0316                     	;# 
  8502  0317                     	;# 
  8503  0318                     	;# 
  8504  038C                     	;# 
  8505  038D                     	;# 
  8506  038E                     	;# 
  8507  0391                     	;# 
  8508  0392                     	;# 
  8509  0393                     	;# 
  8510  0394                     	;# 
  8511  0395                     	;# 
  8512  0396                     	;# 
  8513  0397                     	;# 
  8514  0398                     	;# 
  8515  0399                     	;# 
  8516  039A                     	;# 
  8517  039C                     	;# 
  8518  039D                     	;# 
  8519  039E                     	;# 
  8520  039F                     	;# 
  8521  0411                     	;# 
  8522  0411                     	;# 
  8523  0412                     	;# 
  8524  0413                     	;# 
  8525  0414                     	;# 
  8526  0415                     	;# 
  8527  0416                     	;# 
  8528  0417                     	;# 
  8529  0418                     	;# 
  8530  0418                     	;# 
  8531  0419                     	;# 
  8532  041A                     	;# 
  8533  041B                     	;# 
  8534  041C                     	;# 
  8535  041D                     	;# 
  8536  041E                     	;# 
  8537  041F                     	;# 
  8538  0498                     	;# 
  8539  0498                     	;# 
  8540  0499                     	;# 
  8541  049A                     	;# 
  8542  049B                     	;# 
  8543  049B                     	;# 
  8544  049C                     	;# 
  8545  049D                     	;# 
  8546  049E                     	;# 
  8547  049F                     	;# 
  8548  0617                     	;# 
  8549  0618                     	;# 
  8550  0619                     	;# 
  8551  0619                     	;# 
  8552  061A                     	;# 
  8553  061B                     	;# 
  8554  061C                     	;# 
  8555  061C                     	;# 
  8556  061F                     	;# 
  8557  0691                     	;# 
  8558  0692                     	;# 
  8559  0693                     	;# 
  8560  0694                     	;# 
  8561  0695                     	;# 
  8562  0696                     	;# 
  8563  0697                     	;# 
  8564  0698                     	;# 
  8565  0699                     	;# 
  8566  0711                     	;# 
  8567  0712                     	;# 
  8568  0713                     	;# 
  8569  0714                     	;# 
  8570  0715                     	;# 
  8571  0716                     	;# 
  8572  0717                     	;# 
  8573  0718                     	;# 
  8574  0719                     	;# 
  8575  0891                     	;# 
  8576  0891                     	;# 
  8577  0891                     	;# 
  8578  0891                     	;# 
  8579  0891                     	;# 
  8580  0891                     	;# 
  8581  0892                     	;# 
  8582  0892                     	;# 
  8583  0892                     	;# 
  8584  0893                     	;# 
  8585  0893                     	;# 
  8586  0893                     	;# 
  8587  0893                     	;# 
  8588  0893                     	;# 
  8589  0893                     	;# 
  8590  0894                     	;# 
  8591  0894                     	;# 
  8592  0894                     	;# 
  8593  0895                     	;# 
  8594  0895                     	;# 
  8595  0895                     	;# 
  8596  0896                     	;# 
  8597  0896                     	;# 
  8598  0896                     	;# 
  8599  089B                     	;# 
  8600  0911                     	;# 
  8601  0912                     	;# 
  8602  0913                     	;# 
  8603  0914                     	;# 
  8604  0915                     	;# 
  8605  0916                     	;# 
  8606  0918                     	;# 
  8607  0919                     	;# 
  8608  091A                     	;# 
  8609  091B                     	;# 
  8610  091C                     	;# 
  8611  091D                     	;# 
  8612  091E                     	;# 
  8613  091F                     	;# 
  8614  0E0F                     	;# 
  8615  0E10                     	;# 
  8616  0E11                     	;# 
  8617  0E12                     	;# 
  8618  0E13                     	;# 
  8619  0E14                     	;# 
  8620  0E15                     	;# 
  8621  0E16                     	;# 
  8622  0E17                     	;# 
  8623  0E18                     	;# 
  8624  0E19                     	;# 
  8625  0E1A                     	;# 
  8626  0E1B                     	;# 
  8627  0E1C                     	;# 
  8628  0E1D                     	;# 
  8629  0E1E                     	;# 
  8630  0E1F                     	;# 
  8631  0E20                     	;# 
  8632  0E21                     	;# 
  8633  0E22                     	;# 
  8634  0E24                     	;# 
  8635  0E25                     	;# 
  8636  0E28                     	;# 
  8637  0E29                     	;# 
  8638  0E2A                     	;# 
  8639  0E2B                     	;# 
  8640  0E2C                     	;# 
  8641  0E2D                     	;# 
  8642  0E2E                     	;# 
  8643  0E2F                     	;# 
  8644  0E90                     	;# 
  8645  0E91                     	;# 
  8646  0E92                     	;# 
  8647  0E94                     	;# 
  8648  0E95                     	;# 
  8649  0E9C                     	;# 
  8650  0E9D                     	;# 
  8651  0E9E                     	;# 
  8652  0E9F                     	;# 
  8653  0EA0                     	;# 
  8654  0EA1                     	;# 
  8655  0EA2                     	;# 
  8656  0EA3                     	;# 
  8657  0EA4                     	;# 
  8658  0EA5                     	;# 
  8659  0EA6                     	;# 
  8660  0EA7                     	;# 
  8661  0F0F                     	;# 
  8662  0F10                     	;# 
  8663  0F11                     	;# 
  8664  0F12                     	;# 
  8665  0F13                     	;# 
  8666  0F14                     	;# 
  8667  0F15                     	;# 
  8668  0F16                     	;# 
  8669  0F17                     	;# 
  8670  0F18                     	;# 
  8671  0F19                     	;# 
  8672  0F1A                     	;# 
  8673  0F1B                     	;# 
  8674  0F1C                     	;# 
  8675  0F1D                     	;# 
  8676  0F1E                     	;# 
  8677  0F1F                     	;# 
  8678  0F20                     	;# 
  8679  0F21                     	;# 
  8680  0F22                     	;# 
  8681  0F23                     	;# 
  8682  0F24                     	;# 
  8683  0F25                     	;# 
  8684  0F26                     	;# 
  8685  0F27                     	;# 
  8686  0F28                     	;# 
  8687  0F29                     	;# 
  8688  0F2A                     	;# 
  8689  0F2B                     	;# 
  8690  0F2C                     	;# 
  8691  0F2D                     	;# 
  8692  0F2E                     	;# 
  8693  0F2F                     	;# 
  8694  0F30                     	;# 
  8695  0F31                     	;# 
  8696  0F32                     	;# 
  8697  0F33                     	;# 
  8698  0F34                     	;# 
  8699  0F35                     	;# 
  8700  0F36                     	;# 
  8701  0F37                     	;# 
  8702  0FE4                     	;# 
  8703  0FE5                     	;# 
  8704  0FE6                     	;# 
  8705  0FE7                     	;# 
  8706  0FE8                     	;# 
  8707  0FE9                     	;# 
  8708  0FEA                     	;# 
  8709  0FEB                     	;# 
  8710  0FED                     	;# 
  8711  0FEE                     	;# 
  8712  0FEF                     	;# 
  8713  0000                     	;# 
  8714  0001                     	;# 
  8715  0002                     	;# 
  8716  0003                     	;# 
  8717  0004                     	;# 
  8718  0005                     	;# 
  8719  0006                     	;# 
  8720  0007                     	;# 
  8721  0008                     	;# 
  8722  0009                     	;# 
  8723  000A                     	;# 
  8724  000B                     	;# 
  8725  000C                     	;# 
  8726  000D                     	;# 
  8727  000E                     	;# 
  8728  0010                     	;# 
  8729  0011                     	;# 
  8730  0012                     	;# 
  8731  0013                     	;# 
  8732  0014                     	;# 
  8733  0015                     	;# 
  8734  0015                     	;# 
  8735  0016                     	;# 
  8736  0016                     	;# 
  8737  0017                     	;# 
  8738  0018                     	;# 
  8739  0019                     	;# 
  8740  0019                     	;# 
  8741  001A                     	;# 
  8742  001B                     	;# 
  8743  001C                     	;# 
  8744  001D                     	;# 
  8745  001E                     	;# 
  8746  001F                     	;# 
  8747  008C                     	;# 
  8748  008D                     	;# 
  8749  008E                     	;# 
  8750  0090                     	;# 
  8751  0091                     	;# 
  8752  0092                     	;# 
  8753  0093                     	;# 
  8754  0094                     	;# 
  8755  0097                     	;# 
  8756  009B                     	;# 
  8757  009B                     	;# 
  8758  009C                     	;# 
  8759  009D                     	;# 
  8760  009E                     	;# 
  8761  009F                     	;# 
  8762  010C                     	;# 
  8763  010D                     	;# 
  8764  010E                     	;# 
  8765  0111                     	;# 
  8766  0112                     	;# 
  8767  0113                     	;# 
  8768  0114                     	;# 
  8769  0115                     	;# 
  8770  0116                     	;# 
  8771  0117                     	;# 
  8772  0118                     	;# 
  8773  0119                     	;# 
  8774  018C                     	;# 
  8775  018D                     	;# 
  8776  018E                     	;# 
  8777  0199                     	;# 
  8778  0199                     	;# 
  8779  0199                     	;# 
  8780  019A                     	;# 
  8781  019A                     	;# 
  8782  019A                     	;# 
  8783  019B                     	;# 
  8784  019B                     	;# 
  8785  019B                     	;# 
  8786  019B                     	;# 
  8787  019B                     	;# 
  8788  019C                     	;# 
  8789  019C                     	;# 
  8790  019C                     	;# 
  8791  019D                     	;# 
  8792  019D                     	;# 
  8793  019D                     	;# 
  8794  019E                     	;# 
  8795  019E                     	;# 
  8796  019E                     	;# 
  8797  019F                     	;# 
  8798  019F                     	;# 
  8799  019F                     	;# 
  8800  019F                     	;# 
  8801  019F                     	;# 
  8802  020C                     	;# 
  8803  020D                     	;# 
  8804  020E                     	;# 
  8805  0211                     	;# 
  8806  0211                     	;# 
  8807  0212                     	;# 
  8808  0212                     	;# 
  8809  0213                     	;# 
  8810  0213                     	;# 
  8811  0214                     	;# 
  8812  0214                     	;# 
  8813  0215                     	;# 
  8814  0215                     	;# 
  8815  0215                     	;# 
  8816  0215                     	;# 
  8817  0216                     	;# 
  8818  0216                     	;# 
  8819  0217                     	;# 
  8820  0217                     	;# 
  8821  0219                     	;# 
  8822  021A                     	;# 
  8823  021B                     	;# 
  8824  021C                     	;# 
  8825  021D                     	;# 
  8826  021D                     	;# 
  8827  021E                     	;# 
  8828  021F                     	;# 
  8829  028C                     	;# 
  8830  028D                     	;# 
  8831  028E                     	;# 
  8832  0291                     	;# 
  8833  0291                     	;# 
  8834  0292                     	;# 
  8835  0293                     	;# 
  8836  0294                     	;# 
  8837  0295                     	;# 
  8838  0295                     	;# 
  8839  0296                     	;# 
  8840  0297                     	;# 
  8841  0298                     	;# 
  8842  029F                     	;# 
  8843  030C                     	;# 
  8844  030D                     	;# 
  8845  030E                     	;# 
  8846  0311                     	;# 
  8847  0311                     	;# 
  8848  0312                     	;# 
  8849  0313                     	;# 
  8850  0314                     	;# 
  8851  0315                     	;# 
  8852  0315                     	;# 
  8853  0316                     	;# 
  8854  0317                     	;# 
  8855  0318                     	;# 
  8856  038C                     	;# 
  8857  038D                     	;# 
  8858  038E                     	;# 
  8859  0391                     	;# 
  8860  0392                     	;# 
  8861  0393                     	;# 
  8862  0394                     	;# 
  8863  0395                     	;# 
  8864  0396                     	;# 
  8865  0397                     	;# 
  8866  0398                     	;# 
  8867  0399                     	;# 
  8868  039A                     	;# 
  8869  039C                     	;# 
  8870  039D                     	;# 
  8871  039E                     	;# 
  8872  039F                     	;# 
  8873  0411                     	;# 
  8874  0411                     	;# 
  8875  0412                     	;# 
  8876  0413                     	;# 
  8877  0414                     	;# 
  8878  0415                     	;# 
  8879  0416                     	;# 
  8880  0417                     	;# 
  8881  0418                     	;# 
  8882  0418                     	;# 
  8883  0419                     	;# 
  8884  041A                     	;# 
  8885  041B                     	;# 
  8886  041C                     	;# 
  8887  041D                     	;# 
  8888  041E                     	;# 
  8889  041F                     	;# 
  8890  0498                     	;# 
  8891  0498                     	;# 
  8892  0499                     	;# 
  8893  049A                     	;# 
  8894  049B                     	;# 
  8895  049B                     	;# 
  8896  049C                     	;# 
  8897  049D                     	;# 
  8898  049E                     	;# 
  8899  049F                     	;# 
  8900  0617                     	;# 
  8901  0618                     	;# 
  8902  0619                     	;# 
  8903  0619                     	;# 
  8904  061A                     	;# 
  8905  061B                     	;# 
  8906  061C                     	;# 
  8907  061C                     	;# 
  8908  061F                     	;# 
  8909  0691                     	;# 
  8910  0692                     	;# 
  8911  0693                     	;# 
  8912  0694                     	;# 
  8913  0695                     	;# 
  8914  0696                     	;# 
  8915  0697                     	;# 
  8916  0698                     	;# 
  8917  0699                     	;# 
  8918  0711                     	;# 
  8919  0712                     	;# 
  8920  0713                     	;# 
  8921  0714                     	;# 
  8922  0715                     	;# 
  8923  0716                     	;# 
  8924  0717                     	;# 
  8925  0718                     	;# 
  8926  0719                     	;# 
  8927  0891                     	;# 
  8928  0891                     	;# 
  8929  0891                     	;# 
  8930  0891                     	;# 
  8931  0891                     	;# 
  8932  0891                     	;# 
  8933  0892                     	;# 
  8934  0892                     	;# 
  8935  0892                     	;# 
  8936  0893                     	;# 
  8937  0893                     	;# 
  8938  0893                     	;# 
  8939  0893                     	;# 
  8940  0893                     	;# 
  8941  0893                     	;# 
  8942  0894                     	;# 
  8943  0894                     	;# 
  8944  0894                     	;# 
  8945  0895                     	;# 
  8946  0895                     	;# 
  8947  0895                     	;# 
  8948  0896                     	;# 
  8949  0896                     	;# 
  8950  0896                     	;# 
  8951  089B                     	;# 
  8952  0911                     	;# 
  8953  0912                     	;# 
  8954  0913                     	;# 
  8955  0914                     	;# 
  8956  0915                     	;# 
  8957  0916                     	;# 
  8958  0918                     	;# 
  8959  0919                     	;# 
  8960  091A                     	;# 
  8961  091B                     	;# 
  8962  091C                     	;# 
  8963  091D                     	;# 
  8964  091E                     	;# 
  8965  091F                     	;# 
  8966  0E0F                     	;# 
  8967  0E10                     	;# 
  8968  0E11                     	;# 
  8969  0E12                     	;# 
  8970  0E13                     	;# 
  8971  0E14                     	;# 
  8972  0E15                     	;# 
  8973  0E16                     	;# 
  8974  0E17                     	;# 
  8975  0E18                     	;# 
  8976  0E19                     	;# 
  8977  0E1A                     	;# 
  8978  0E1B                     	;# 
  8979  0E1C                     	;# 
  8980  0E1D                     	;# 
  8981  0E1E                     	;# 
  8982  0E1F                     	;# 
  8983  0E20                     	;# 
  8984  0E21                     	;# 
  8985  0E22                     	;# 
  8986  0E24                     	;# 
  8987  0E25                     	;# 
  8988  0E28                     	;# 
  8989  0E29                     	;# 
  8990  0E2A                     	;# 
  8991  0E2B                     	;# 
  8992  0E2C                     	;# 
  8993  0E2D                     	;# 
  8994  0E2E                     	;# 
  8995  0E2F                     	;# 
  8996  0E90                     	;# 
  8997  0E91                     	;# 
  8998  0E92                     	;# 
  8999  0E94                     	;# 
  9000  0E95                     	;# 
  9001  0E9C                     	;# 
  9002  0E9D                     	;# 
  9003  0E9E                     	;# 
  9004  0E9F                     	;# 
  9005  0EA0                     	;# 
  9006  0EA1                     	;# 
  9007  0EA2                     	;# 
  9008  0EA3                     	;# 
  9009  0EA4                     	;# 
  9010  0EA5                     	;# 
  9011  0EA6                     	;# 
  9012  0EA7                     	;# 
  9013  0F0F                     	;# 
  9014  0F10                     	;# 
  9015  0F11                     	;# 
  9016  0F12                     	;# 
  9017  0F13                     	;# 
  9018  0F14                     	;# 
  9019  0F15                     	;# 
  9020  0F16                     	;# 
  9021  0F17                     	;# 
  9022  0F18                     	;# 
  9023  0F19                     	;# 
  9024  0F1A                     	;# 
  9025  0F1B                     	;# 
  9026  0F1C                     	;# 
  9027  0F1D                     	;# 
  9028  0F1E                     	;# 
  9029  0F1F                     	;# 
  9030  0F20                     	;# 
  9031  0F21                     	;# 
  9032  0F22                     	;# 
  9033  0F23                     	;# 
  9034  0F24                     	;# 
  9035  0F25                     	;# 
  9036  0F26                     	;# 
  9037  0F27                     	;# 
  9038  0F28                     	;# 
  9039  0F29                     	;# 
  9040  0F2A                     	;# 
  9041  0F2B                     	;# 
  9042  0F2C                     	;# 
  9043  0F2D                     	;# 
  9044  0F2E                     	;# 
  9045  0F2F                     	;# 
  9046  0F30                     	;# 
  9047  0F31                     	;# 
  9048  0F32                     	;# 
  9049  0F33                     	;# 
  9050  0F34                     	;# 
  9051  0F35                     	;# 
  9052  0F36                     	;# 
  9053  0F37                     	;# 
  9054  0FE4                     	;# 
  9055  0FE5                     	;# 
  9056  0FE6                     	;# 
  9057  0FE7                     	;# 
  9058  0FE8                     	;# 
  9059  0FE9                     	;# 
  9060  0FEA                     	;# 
  9061  0FEB                     	;# 
  9062  0FED                     	;# 
  9063  0FEE                     	;# 
  9064  0FEF                     	;_asciiCharTableLookup
  9065                           
  9066 ;; Function _menu_Exit is unused but had its address taken
  9067  0000                     
  9068 ;; Function _flashy_Exit is unused but had its address taken
  9069  0000                     
  9070 ;; Function _locked_Exit is unused but had its address taken
  9071  0000                     
  9072 ;; Function _secret_Exit is unused but had its address taken
  9073  0000                     
  9074 ;; Function _slot_Exit is unused but had its address taken
  9075  0000                     
  9076 ;; Function _matrix_Exit is unused but had its address taken
  9077  0000                     
  9078                           	psect	idataBANK1
  9079  1000                     __pidataBANK1:	
  9080                           
  9081                           ;initializer for marquee_speedy@F14093
  9082  1000  3420               	retlw	32
  9083  1001  3420               	retlw	32
  9084  1002  3420               	retlw	32
  9085  1003  3420               	retlw	32
  9086  1004  3400               	retlw	0
  9087                           
  9088                           ;initializer for _randx
  9089  1005  3401               	retlw	1
  9090  1006  3400               	retlw	0
  9091  1007  3400               	retlw	0
  9092  1008  3400               	retlw	0
  9093                           
  9094                           ;initializer for _Leds_idx
  9095  1009  3401               	retlw	1
  9096  100A  3400               	retlw	0
  9097                           
  9098                           ;initializer for _locked_lock_base_leds
  9099  100B  341F               	retlw	31
  9100  100C  34F8               	retlw	248
  9101                           
  9102                           ;initializer for _FLASHY_TEXT_SECRET_TEST
  9103  100D  3445               	retlw	low (STR_10| (0+32768))
  9104  100E  34BA               	retlw	high (STR_10| (0+32768))
  9105                           
  9106                           	psect	idataBANK2
  9107  0002                     __pidataBANK2:	
  9108                           
  9109                           ;initializer for _FLASHY_TEXT
  9110  0002  34F1               	retlw	low (STR_9| (0+32768))
  9111  0003  34BB               	retlw	high (STR_9| (0+32768))
  9112                           
  9113                           	psect	idataBANK3
  9114  33AB                     __pidataBANK3:	
  9115                           
  9116                           ;initializer for _Shot_Options
  9117  33AB  34C9               	retlw	low (STR_48| (0+32768))
  9118  33AC  34BB               	retlw	high (STR_48| (0+32768))
  9119  33AD  34BF               	retlw	low (STR_49| (0+32768))
  9120  33AE  34BB               	retlw	high (STR_49| (0+32768))
  9121  33AF  34A6               	retlw	low (STR_50| (0+32768))
  9122  33B0  34BB               	retlw	high (STR_50| (0+32768))
  9123  33B1  34CE               	retlw	low (STR_51| (0+32768))
  9124  33B2  34BB               	retlw	high (STR_51| (0+32768))
  9125  33B3  34AB               	retlw	low (STR_52| (0+32768))
  9126  33B4  34BB               	retlw	high (STR_52| (0+32768))
  9127  33B5  34B5               	retlw	low (STR_53| (0+32768))
  9128  33B6  34BB               	retlw	high (STR_53| (0+32768))
  9129  33B7  34BA               	retlw	low (STR_54| (0+32768))
  9130  33B8  34BB               	retlw	high (STR_54| (0+32768))
  9131  33B9  34B0               	retlw	low (STR_55| (0+32768))
  9132  33BA  34BB               	retlw	high (STR_55| (0+32768))
  9133  33BB  34C4               	retlw	low (STR_56| (0+32768))
  9134  33BC  34BB               	retlw	high (STR_56| (0+32768))
  9135                           
  9136                           ;initializer for marquee@F14102
  9137  33BD  3420               	retlw	32
  9138  33BE  3420               	retlw	32
  9139  33BF  3420               	retlw	32
  9140  33C0  3420               	retlw	32
  9141  33C1  3400               	retlw	0
  9142                           
  9143                           	psect	idataBANK4
  9144  2A13                     __pidataBANK4:	
  9145                           
  9146                           ;initializer for _locked_locking_leds
  9147  2A13  3400               	retlw	0
  9148  2A14  3400               	retlw	0
  9149  2A15  3420               	retlw	32
  9150  2A16  3400               	retlw	0
  9151  2A17  3460               	retlw	96
  9152  2A18  3400               	retlw	0
  9153  2A19  34E0               	retlw	224
  9154  2A1A  3400               	retlw	0
  9155  2A1B  34E0               	retlw	224
  9156  2A1C  3401               	retlw	1
  9157  2A1D  34E0               	retlw	224
  9158  2A1E  3403               	retlw	3
  9159                           
  9160                           ;initializer for _menu_option
  9161  2A1F  34F6               	retlw	low (STR_4| (0+32768))
  9162  2A20  34BB               	retlw	high (STR_4| (0+32768))
  9163  2A21  349B               	retlw	low (STR_5| (0+32768))
  9164  2A22  34BB               	retlw	high (STR_5| (0+32768))
  9165  2A23  34F7               	retlw	low (STR_6| (0+32768))
  9166  2A24  34BA               	retlw	high (STR_6| (0+32768))
  9167  2A25  345E               	retlw	low (STR_7| (0+32768))
  9168  2A26  34BB               	retlw	high (STR_7| (0+32768))
  9169  2A27  3495               	retlw	low (STR_8| (0+32768))
  9170  2A28  34BB               	retlw	high (STR_8| (0+32768))
  9171                           
  9172                           ;initializer for _secret_inputs
  9173  2A29  3401               	retlw	1
  9174  2A2A  3401               	retlw	1
  9175  2A2B  3402               	retlw	2
  9176  2A2C  3402               	retlw	2
  9177  2A2D  3401               	retlw	1
  9178  2A2E  3402               	retlw	2
  9179  2A2F  3401               	retlw	1
  9180  2A30  3402               	retlw	2
  9181  2A31  3404               	retlw	4
  9182  2A32  3408               	retlw	8
  9183  2A33  3400               	retlw	0
  9184  2A34  3400               	retlw	0
  9185  2A35  3400               	retlw	0
  9186  2A36  3400               	retlw	0
  9187  2A37  3400               	retlw	0
  9188  2A38  3400               	retlw	0
  9189  2A39  3400               	retlw	0
  9190  2A3A  3400               	retlw	0
  9191  2A3B  3400               	retlw	0
  9192  2A3C  3400               	retlw	0
  9193  2A3D  3400               	retlw	0
  9194  2A3E  3400               	retlw	0
  9195  2A3F  34C5               	retlw	low (_secret_value| 0)
  9196  2A40  3401               	retlw	1
  9197  2A41  3400               	retlw	0
  9198                           
  9199                           ;initializer for _locked_secret_inputs
  9200  2A42  3402               	retlw	2
  9201  2A43  3408               	retlw	8
  9202  2A44  3401               	retlw	1
  9203  2A45  3401               	retlw	1
  9204  2A46  3400               	retlw	0
  9205  2A47  3400               	retlw	0
  9206  2A48  3400               	retlw	0
  9207  2A49  3400               	retlw	0
  9208  2A4A  3400               	retlw	0
  9209  2A4B  3400               	retlw	0
  9210  2A4C  3400               	retlw	0
  9211  2A4D  3400               	retlw	0
  9212  2A4E  3400               	retlw	0
  9213  2A4F  3400               	retlw	0
  9214  2A50  3400               	retlw	0
  9215  2A51  3400               	retlw	0
  9216  2A52  3400               	retlw	0
  9217  2A53  3400               	retlw	0
  9218  2A54  3400               	retlw	0
  9219  2A55  3400               	retlw	0
  9220  2A56  3400               	retlw	0
  9221  2A57  3400               	retlw	0
  9222  2A58  3469               	retlw	low (_locked_secret_value| (0+256))
  9223  2A59  3401               	retlw	1
  9224  2A5A  3400               	retlw	0
  9225                           
  9226                           	psect	idataBANK5
  9227  34E4                     __pidataBANK5:	
  9228                           
  9229                           ;initializer for _menu_options_leds
  9230  34E4  3400               	retlw	0
  9231  34E5  3402               	retlw	2
  9232  34E6  3400               	retlw	0
  9233  34E7  3401               	retlw	1
  9234  34E8  3480               	retlw	128
  9235  34E9  3400               	retlw	0
  9236  34EA  3440               	retlw	64
  9237  34EB  3400               	retlw	0
  9238  34EC  3420               	retlw	32
  9239  34ED  3400               	retlw	0
  9240                           
  9241                           ;initializer for _matrix_secret_inputs
  9242  34EE  3401               	retlw	1
  9243  34EF  3408               	retlw	8
  9244  34F0  3402               	retlw	2
  9245  34F1  3404               	retlw	4
  9246  34F2  3405               	retlw	5
  9247  34F3  3409               	retlw	9
  9248  34F4  3403               	retlw	3
  9249  34F5  3400               	retlw	0
  9250  34F6  3400               	retlw	0
  9251  34F7  3400               	retlw	0
  9252  34F8  3400               	retlw	0
  9253  34F9  3400               	retlw	0
  9254  34FA  3400               	retlw	0
  9255  34FB  3400               	retlw	0
  9256  34FC  3400               	retlw	0
  9257  34FD  3400               	retlw	0
  9258  34FE  3400               	retlw	0
  9259  34FF  3400               	retlw	0
  9260  3500  3400               	retlw	0
  9261  3501  3400               	retlw	0
  9262  3502  3400               	retlw	0
  9263  3503  3400               	retlw	0
  9264  3504  34C5               	retlw	low (_secret_value| 0)
  9265  3505  3401               	retlw	1
  9266  3506  3400               	retlw	0
  9267                           
  9268                           	psect	idataBANK6
  9269  2A5B                     __pidataBANK6:	
  9270                           
  9271                           ;initializer for _Shot_Options_Long
  9272  2A5B  344E               	retlw	low (STR_57| (0+32768))
  9273  2A5C  34BB               	retlw	high (STR_57| (0+32768))
  9274  2A5D  3446               	retlw	low (STR_58| (0+32768))
  9275  2A5E  34BB               	retlw	high (STR_58| (0+32768))
  9276  2A5F  340A               	retlw	low (STR_59| (0+32768))
  9277  2A60  34BB               	retlw	high (STR_59| (0+32768))
  9278  2A61  34E2               	retlw	low (STR_60| (0+32768))
  9279  2A62  34BA               	retlw	high (STR_60| (0+32768))
  9280  2A63  34D7               	retlw	low (STR_61| (0+32768))
  9281  2A64  34BA               	retlw	high (STR_61| (0+32768))
  9282  2A65  343E               	retlw	low (STR_62| (0+32768))
  9283  2A66  34BB               	retlw	high (STR_62| (0+32768))
  9284  2A67  34BF               	retlw	low (STR_63| (0+32768))
  9285  2A68  34BA               	retlw	high (STR_63| (0+32768))
  9286  2A69  3498               	retlw	low (STR_64| (0+32768))
  9287  2A6A  34BA               	retlw	high (STR_64| (0+32768))
  9288  2A6B  3413               	retlw	low (STR_65| (0+32768))
  9289  2A6C  34BB               	retlw	high (STR_65| (0+32768))
  9290                           
  9291                           ;initializer for _Slot_Wheel
  9292  2A6D  3441               	retlw	65
  9293  2A6E  3442               	retlw	66
  9294  2A6F  3443               	retlw	67
  9295  2A70  3444               	retlw	68
  9296  2A71  3445               	retlw	69
  9297  2A72  3446               	retlw	70
  9298  2A73  3447               	retlw	71
  9299  2A74  3448               	retlw	72
  9300  2A75  3449               	retlw	73
  9301  2A76  344A               	retlw	74
  9302  2A77  344B               	retlw	75
  9303  2A78  344C               	retlw	76
  9304  2A79  344D               	retlw	77
  9305  2A7A  344E               	retlw	78
  9306  2A7B  344F               	retlw	79
  9307  2A7C  3450               	retlw	80
  9308  2A7D  3451               	retlw	81
  9309  2A7E  3452               	retlw	82
  9310  2A7F  3453               	retlw	83
  9311  2A80  3454               	retlw	84
  9312  2A81  3455               	retlw	85
  9313  2A82  3456               	retlw	86
  9314  2A83  3457               	retlw	87
  9315  2A84  3458               	retlw	88
  9316  2A85  3459               	retlw	89
  9317  2A86  345A               	retlw	90
  9318  2A87  3430               	retlw	48
  9319  2A88  3431               	retlw	49
  9320  2A89  3432               	retlw	50
  9321  2A8A  3433               	retlw	51
  9322  2A8B  3434               	retlw	52
  9323  2A8C  3435               	retlw	53
  9324  2A8D  3436               	retlw	54
  9325  2A8E  3437               	retlw	55
  9326  2A8F  3438               	retlw	56
  9327  2A90  3439               	retlw	57
  9328  2A91  343C               	retlw	60
  9329  2A92  343E               	retlw	62
  9330  2A93  3421               	retlw	33
  9331  2A94  3424               	retlw	36
  9332  2A95  3425               	retlw	37
  9333  2A96  3426               	retlw	38
  9334  2A97  342D               	retlw	45
  9335  2A98  3423               	retlw	35
  9336  2A99  342A               	retlw	42
  9337  2A9A  342B               	retlw	43
  9338  2A9B  342D               	retlw	45
  9339  2A9C  342E               	retlw	46
  9340  2A9D  3440               	retlw	64
  9341  2A9E  343B               	retlw	59
  9342  2A9F  343A               	retlw	58
  9343  2AA0  3427               	retlw	39
  9344  2AA1  3422               	retlw	34
  9345  2AA2  342F               	retlw	47
  9346  2AA3  345C               	retlw	92
  9347                           
  9348                           	psect	idataBANK7
  9349  2AEE                     __pidataBANK7:	
  9350                           
  9351                           ;initializer for _roundabout_leds_inverse
  9352  2AEE  3480               	retlw	128
  9353  2AEF  3400               	retlw	0
  9354  2AF0  3440               	retlw	64
  9355  2AF1  3400               	retlw	0
  9356  2AF2  3420               	retlw	32
  9357  2AF3  3400               	retlw	0
  9358  2AF4  3410               	retlw	16
  9359  2AF5  3400               	retlw	0
  9360  2AF6  3408               	retlw	8
  9361  2AF7  3400               	retlw	0
  9362  2AF8  3404               	retlw	4
  9363  2AF9  3400               	retlw	0
  9364  2AFA  3402               	retlw	2
  9365  2AFB  3400               	retlw	0
  9366  2AFC  3401               	retlw	1
  9367  2AFD  3400               	retlw	0
  9368  2AFE  3402               	retlw	2
  9369  2AFF  3400               	retlw	0
  9370  2B00  3404               	retlw	4
  9371  2B01  3400               	retlw	0
  9372  2B02  3408               	retlw	8
  9373  2B03  3400               	retlw	0
  9374  2B04  3410               	retlw	16
  9375  2B05  3400               	retlw	0
  9376  2B06  3420               	retlw	32
  9377  2B07  3400               	retlw	0
  9378  2B08  3440               	retlw	64
  9379  2B09  3400               	retlw	0
  9380                           
  9381                           ;initializer for _roundabout_leds
  9382  2B0A  3480               	retlw	128
  9383  2B0B  3400               	retlw	0
  9384  2B0C  3400               	retlw	0
  9385  2B0D  3401               	retlw	1
  9386  2B0E  3400               	retlw	0
  9387  2B0F  3402               	retlw	2
  9388  2B10  3400               	retlw	0
  9389  2B11  3408               	retlw	8
  9390  2B12  3400               	retlw	0
  9391  2B13  3410               	retlw	16
  9392  2B14  3400               	retlw	0
  9393  2B15  3420               	retlw	32
  9394  2B16  3400               	retlw	0
  9395  2B17  3440               	retlw	64
  9396  2B18  3400               	retlw	0
  9397  2B19  3480               	retlw	128
  9398  2B1A  3400               	retlw	0
  9399  2B1B  3440               	retlw	64
  9400  2B1C  3400               	retlw	0
  9401  2B1D  3420               	retlw	32
  9402  2B1E  3400               	retlw	0
  9403  2B1F  3410               	retlw	16
  9404  2B20  3400               	retlw	0
  9405  2B21  3408               	retlw	8
  9406  2B22  3400               	retlw	0
  9407  2B23  3402               	retlw	2
  9408  2B24  3400               	retlw	0
  9409  2B25  3401               	retlw	1
  9410                           
  9411                           ;initializer for _matrix_option
  9412  2B26  3482               	retlw	low (STR_72| (0+32768))
  9413  2B27  34BB               	retlw	high (STR_72| (0+32768))
  9414  2B28  346D               	retlw	low (STR_73| (0+32768))
  9415  2B29  34BB               	retlw	high (STR_73| (0+32768))
  9416  2B2A  3401               	retlw	low (STR_74| (0+32768))
  9417  2B2B  34BB               	retlw	high (STR_74| (0+32768))
  9418  2B2C  3474               	retlw	low (STR_75| (0+32768))
  9419  2B2D  34BB               	retlw	high (STR_75| (0+32768))
  9420  2B2E  34A1               	retlw	low (STR_76| (0+32768))
  9421  2B2F  34BB               	retlw	high (STR_76| (0+32768))
  9422  2B30  34ED               	retlw	low (STR_77| (0+32768))
  9423  2B31  34BA               	retlw	high (STR_77| (0+32768))
  9424  2B32  3489               	retlw	low (STR_78| (0+32768))
  9425  2B33  34BB               	retlw	high (STR_78| (0+32768))
  9426  2B34  342E               	retlw	low (STR_79| (0+32768))
  9427  2B35  34BB               	retlw	high (STR_79| (0+32768))
  9428  2B36  347B               	retlw	low (STR_80| (0+32768))
  9429  2B37  34BB               	retlw	high (STR_80| (0+32768))
  9430  2B38  3436               	retlw	low (STR_81| (0+32768))
  9431  2B39  34BB               	retlw	high (STR_81| (0+32768))
  9432                           
  9433                           	psect	idataBANK8
  9434  36CC                     __pidataBANK8:	
  9435                           
  9436                           ;initializer for _curtain_leds_inverse
  9437  36CC  3480               	retlw	128
  9438  36CD  3400               	retlw	0
  9439  36CE  34C0               	retlw	192
  9440  36CF  3400               	retlw	0
  9441  36D0  34E0               	retlw	224
  9442  36D1  3400               	retlw	0
  9443  36D2  34F0               	retlw	240
  9444  36D3  3400               	retlw	0
  9445  36D4  34F8               	retlw	248
  9446  36D5  3400               	retlw	0
  9447  36D6  34FC               	retlw	252
  9448  36D7  3400               	retlw	0
  9449  36D8  34FE               	retlw	254
  9450  36D9  3400               	retlw	0
  9451  36DA  34FF               	retlw	255
  9452  36DB  3400               	retlw	0
  9453  36DC  34FE               	retlw	254
  9454  36DD  3400               	retlw	0
  9455  36DE  34FC               	retlw	252
  9456  36DF  3400               	retlw	0
  9457  36E0  34F8               	retlw	248
  9458  36E1  3400               	retlw	0
  9459  36E2  34F0               	retlw	240
  9460  36E3  3400               	retlw	0
  9461  36E4  34E0               	retlw	224
  9462  36E5  3400               	retlw	0
  9463  36E6  34C0               	retlw	192
  9464  36E7  3400               	retlw	0
  9465                           
  9466                           ;initializer for _curtain_leds
  9467  36E8  3480               	retlw	128
  9468  36E9  3400               	retlw	0
  9469  36EA  3480               	retlw	128
  9470  36EB  3401               	retlw	1
  9471  36EC  3480               	retlw	128
  9472  36ED  3403               	retlw	3
  9473  36EE  3480               	retlw	128
  9474  36EF  340B               	retlw	11
  9475  36F0  3480               	retlw	128
  9476  36F1  341B               	retlw	27
  9477  36F2  3480               	retlw	128
  9478  36F3  343B               	retlw	59
  9479  36F4  3480               	retlw	128
  9480  36F5  347B               	retlw	123
  9481  36F6  3480               	retlw	128
  9482  36F7  34FB               	retlw	251
  9483  36F8  3480               	retlw	128
  9484  36F9  347B               	retlw	123
  9485  36FA  3480               	retlw	128
  9486  36FB  343B               	retlw	59
  9487  36FC  3480               	retlw	128
  9488  36FD  341B               	retlw	27
  9489  36FE  3480               	retlw	128
  9490  36FF  340B               	retlw	11
  9491  3700  3480               	retlw	128
  9492  3701  3403               	retlw	3
  9493  3702  3480               	retlw	128
  9494  3703  3401               	retlw	1
  9495                           
  9496                           	psect	idataBANK10
  9497  3694                     __pidataBANK10:	
  9498                           
  9499                           ;initializer for _flashy_option
  9500  3694  34F1               	retlw	low (STR_9| (0+32768))
  9501  3695  34BB               	retlw	high (STR_9| (0+32768))
  9502  3696  3425               	retlw	low (STR_12| (0+32768))
  9503  3697  34BB               	retlw	high (STR_12| (0+32768))
  9504  3698  3456               	retlw	low (STR_13| (0+32768))
  9505  3699  34BB               	retlw	high (STR_13| (0+32768))
  9506  369A  348F               	retlw	low (STR_14| (0+32768))
  9507  369B  34BB               	retlw	high (STR_14| (0+32768))
  9508  369C  3432               	retlw	low (STR_15| (0+32768))
  9509  369D  34BA               	retlw	high (STR_15| (0+32768))
  9510  369E  340A               	retlw	low (STR_16| (0+32768))
  9511  369F  34BA               	retlw	high (STR_16| (0+32768))
  9512  36A0  34C3               	retlw	low (STR_17| (0+32768))
  9513  36A1  34B9               	retlw	high (STR_17| (0+32768))
  9514  36A2  34F4               	retlw	low (STR_18| (0+32768))
  9515  36A3  34B9               	retlw	high (STR_18| (0+32768))
  9516  36A4  3471               	retlw	low (STR_19| (0+32768))
  9517  36A5  34B9               	retlw	high (STR_19| (0+32768))
  9518  36A6  34B0               	retlw	low (STR_20| (0+32768))
  9519  36A7  34B8               	retlw	high (STR_20| (0+32768))
  9520  36A8  3419               	retlw	low (STR_21| (0+32768))
  9521  36A9  34B9               	retlw	high (STR_21| (0+32768))
  9522  36AA  3454               	retlw	low (STR_22| (0+32768))
  9523  36AB  34B9               	retlw	high (STR_22| (0+32768))
  9524  36AC  34A8               	retlw	low (STR_23| (0+32768))
  9525  36AD  34B9               	retlw	high (STR_23| (0+32768))
  9526  36AE  3488               	retlw	low (STR_24| (0+32768))
  9527  36AF  34B8               	retlw	high (STR_24| (0+32768))
  9528  36B0  3457               	retlw	low (STR_25| (0+32768))
  9529  36B1  34BA               	retlw	high (STR_25| (0+32768))
  9530  36B2  341F               	retlw	low (STR_26| (0+32768))
  9531  36B3  34BA               	retlw	high (STR_26| (0+32768))
  9532  36B4  3437               	retlw	low (STR_27| (0+32768))
  9533  36B5  34B9               	retlw	high (STR_27| (0+32768))
  9534  36B6  34CB               	retlw	low (STR_28| (0+32768))
  9535  36B7  34BA               	retlw	high (STR_28| (0+32768))
  9536  36B8  3489               	retlw	low (STR_29| (0+32768))
  9537  36B9  34BA               	retlw	high (STR_29| (0+32768))
  9538  36BA  34D4               	retlw	low (STR_30| (0+32768))
  9539  36BB  34B8               	retlw	high (STR_30| (0+32768))
  9540  36BC  3479               	retlw	low (STR_31| (0+32768))
  9541  36BD  34BA               	retlw	high (STR_31| (0+32768))
  9542  36BE  34F7               	retlw	low (STR_32| (0+32768))
  9543  36BF  34B8               	retlw	high (STR_32| (0+32768))
  9544  36C0  340A               	retlw	low (STR_33| (0+32768))
  9545  36C1  34A8               	retlw	high (STR_33| (0+32768))
  9546  36C2  3468               	retlw	low (STR_34| (0+32768))
  9547  36C3  34BA               	retlw	high (STR_34| (0+32768))
  9548  36C4  3400               	retlw	low (STR_35| (0+32768))
  9549  36C5  34B8               	retlw	high (STR_35| (0+32768))
  9550  36C6  34B2               	retlw	low (STR_36| (0+32768))
  9551  36C7  34BA               	retlw	high (STR_36| (0+32768))
  9552  36C8  345D               	retlw	low (STR_37| (0+32768))
  9553  36C9  34B8               	retlw	high (STR_37| (0+32768))
  9554  36CA  347D               	retlw	low ((STR_33+115)| (0+32768))
  9555  36CB  34A8               	retlw	high ((STR_33+115)| (0+32768))
  9556                           
  9557                           	psect	idataBIGRAM
  9558  186B                     __pidataBIGRAM:	
  9559                           
  9560                           ;initializer for _asciiCharTableLookup
  9561  186B  3400               	retlw	0
  9562  186C  3400               	retlw	0
  9563  186D  3400               	retlw	0
  9564  186E  3420               	retlw	32
  9565  186F  3410               	retlw	16
  9566  1870  3410               	retlw	16
  9567  1871  3420               	retlw	32
  9568  1872  3400               	retlw	0
  9569  1873  3410               	retlw	16
  9570  1874  3410               	retlw	16
  9571  1875  34A5               	retlw	165
  9572  1876  3421               	retlw	33
  9573  1877  34A5               	retlw	165
  9574  1878  3460               	retlw	96
  9575  1879  3410               	retlw	16
  9576  187A  3430               	retlw	48
  9577  187B  3400               	retlw	0
  9578  187C  3412               	retlw	18
  9579  187D  3410               	retlw	16
  9580  187E  3408               	retlw	8
  9581  187F  3420               	retlw	32
  9582  1880  3420               	retlw	32
  9583  1881  3485               	retlw	133
  9584  1882  3445               	retlw	69
  9585  1883  34B1               	retlw	177
  9586  1884  3430               	retlw	48
  9587  1885  3410               	retlw	16
  9588  1886  3410               	retlw	16
  9589  1887  3410               	retlw	16
  9590  1888  3410               	retlw	16
  9591  1889  3410               	retlw	16
  9592  188A  3410               	retlw	16
  9593  188B  3410               	retlw	16
  9594  188C  3410               	retlw	16
  9595  188D  3410               	retlw	16
  9596  188E  3410               	retlw	16
  9597  188F  3410               	retlw	16
  9598  1890  3410               	retlw	16
  9599  1891  3410               	retlw	16
  9600  1892  3410               	retlw	16
  9601  1893  3410               	retlw	16
  9602  1894  3410               	retlw	16
  9603  1895  3410               	retlw	16
  9604  1896  3410               	retlw	16
  9605  1897  3410               	retlw	16
  9606  1898  3410               	retlw	16
  9607  1899  3410               	retlw	16
  9608  189A  3410               	retlw	16
  9609  189B  3410               	retlw	16
  9610  189C  3410               	retlw	16
  9611  189D  3410               	retlw	16
  9612  189E  3410               	retlw	16
  9613  189F  3410               	retlw	16
  9614  18A0  3410               	retlw	16
  9615  18A1  3410               	retlw	16
  9616  18A2  3410               	retlw	16
  9617  18A3  3410               	retlw	16
  9618  18A4  3410               	retlw	16
  9619  18A5  3410               	retlw	16
  9620  18A6  3410               	retlw	16
  9621  18A7  3410               	retlw	16
  9622  18A8  3410               	retlw	16
  9623  18A9  3410               	retlw	16
  9624  18AA  3410               	retlw	16
  9625  18AB  3400               	retlw	0
  9626  18AC  3400               	retlw	0
  9627  18AD  34C0               	retlw	192
  9628  18AE  3440               	retlw	64
  9629  18AF  3400               	retlw	0
  9630  18B0  3444               	retlw	68
  9631  18B1  3410               	retlw	16
  9632  18B2  3410               	retlw	16
  9633  18B3  34B4               	retlw	180
  9634  18B4  3435               	retlw	53
  9635  18B5  3410               	retlw	16
  9636  18B6  3410               	retlw	16
  9637  18B7  3410               	retlw	16
  9638  18B8  3410               	retlw	16
  9639  18B9  3400               	retlw	0
  9640  18BA  3404               	retlw	4
  9641  18BB  3408               	retlw	8
  9642  18BC  3408               	retlw	8
  9643  18BD  3402               	retlw	2
  9644  18BE  3402               	retlw	2
  9645  18BF  341E               	retlw	30
  9646  18C0  341E               	retlw	30
  9647  18C1  3414               	retlw	20
  9648  18C2  3414               	retlw	20
  9649  18C3  3440               	retlw	64
  9650  18C4  3400               	retlw	0
  9651  18C5  3410               	retlw	16
  9652  18C6  3410               	retlw	16
  9653  18C7  3440               	retlw	64
  9654  18C8  3400               	retlw	0
  9655  18C9  3402               	retlw	2
  9656  18CA  3408               	retlw	8
  9657  18CB  34A9               	retlw	169
  9658  18CC  3463               	retlw	99
  9659  18CD  3480               	retlw	128
  9660  18CE  3440               	retlw	64
  9661  18CF  3431               	retlw	49
  9662  18D0  3470               	retlw	112
  9663  18D1  34B0               	retlw	176
  9664  18D2  3460               	retlw	96
  9665  18D3  3490               	retlw	144
  9666  18D4  3451               	retlw	81
  9667  18D5  34B0               	retlw	176
  9668  18D6  3431               	retlw	49
  9669  18D7  34B1               	retlw	177
  9670  18D8  3431               	retlw	49
  9671  18D9  3480               	retlw	128
  9672  18DA  3460               	retlw	96
  9673  18DB  34B1               	retlw	177
  9674  18DC  3471               	retlw	113
  9675  18DD  3490               	retlw	144
  9676  18DE  3471               	retlw	113
  9677  18DF  3410               	retlw	16
  9678  18E0  3410               	retlw	16
  9679  18E1  3410               	retlw	16
  9680  18E2  3410               	retlw	16
  9681  18E3  3408               	retlw	8
  9682  18E4  3408               	retlw	8
  9683  18E5  3430               	retlw	48
  9684  18E6  3410               	retlw	16
  9685  18E7  3402               	retlw	2
  9686  18E8  3402               	retlw	2
  9687  18E9  3414               	retlw	20
  9688  18EA  34E1               	retlw	225
  9689  18EB  34A5               	retlw	165
  9690  18EC  3470               	retlw	112
  9691  18ED  3491               	retlw	145
  9692  18EE  3471               	retlw	113
  9693  18EF  34B1               	retlw	177
  9694  18F0  3411               	retlw	17
  9695  18F1  3421               	retlw	33
  9696  18F2  3421               	retlw	33
  9697  18F3  34B1               	retlw	177
  9698  18F4  3450               	retlw	80
  9699  18F5  3421               	retlw	33
  9700  18F6  3431               	retlw	49
  9701  18F7  3401               	retlw	1
  9702  18F8  3431               	retlw	49
  9703  18F9  34B1               	retlw	177
  9704  18FA  3421               	retlw	33
  9705  18FB  3491               	retlw	145
  9706  18FC  3451               	retlw	81
  9707  18FD  3424               	retlw	36
  9708  18FE  3424               	retlw	36
  9709  18FF  34A1               	retlw	161
  9710  1900  3440               	retlw	64
  9711  1901  3409               	retlw	9
  9712  1902  3419               	retlw	25
  9713  1903  3421               	retlw	33
  9714  1904  3401               	retlw	1
  9715  1905  3481               	retlw	129
  9716  1906  344B               	retlw	75
  9717  1907  3489               	retlw	137
  9718  1908  3443               	retlw	67
  9719  1909  34A1               	retlw	161
  9720  190A  3461               	retlw	97
  9721  190B  3411               	retlw	17
  9722  190C  3471               	retlw	113
  9723  190D  34A9               	retlw	169
  9724  190E  3461               	retlw	97
  9725  190F  3419               	retlw	25
  9726  1910  3471               	retlw	113
  9727  1911  34B0               	retlw	176
  9728  1912  3431               	retlw	49
  9729  1913  3404               	retlw	4
  9730  1914  3424               	retlw	36
  9731  1915  34A1               	retlw	161
  9732  1916  3441               	retlw	65
  9733  1917  3403               	retlw	3
  9734  1918  3409               	retlw	9
  9735  1919  348B               	retlw	139
  9736  191A  3441               	retlw	65
  9737  191B  340A               	retlw	10
  9738  191C  340A               	retlw	10
  9739  191D  3404               	retlw	4
  9740  191E  340A               	retlw	10
  9741  191F  3422               	retlw	34
  9742  1920  3428               	retlw	40
  9743  1921  3421               	retlw	33
  9744  1922  3421               	retlw	33
  9745  1923  3408               	retlw	8
  9746  1924  3402               	retlw	2
  9747  1925  340A               	retlw	10
  9748  1926  3400               	retlw	0
  9749  1927  3420               	retlw	32
  9750  1928  3400               	retlw	0
  9751  1929  3410               	retlw	16
  9752  192A  3410               	retlw	16
  9753  192B  3491               	retlw	145
  9754  192C  3471               	retlw	113
  9755  192D  34B1               	retlw	177
  9756  192E  3411               	retlw	17
  9757  192F  3431               	retlw	49
  9758  1930  3410               	retlw	16
  9759  1931  34B1               	retlw	177
  9760  1932  3450               	retlw	80
  9761  1933  3421               	retlw	33
  9762  1934  3431               	retlw	49
  9763  1935  3401               	retlw	1
  9764  1936  3431               	retlw	49
  9765  1937  34B1               	retlw	177
  9766  1938  3421               	retlw	33
  9767  1939  3491               	retlw	145
  9768  193A  3451               	retlw	81
  9769  193B  3424               	retlw	36
  9770  193C  3424               	retlw	36
  9771  193D  34A1               	retlw	161
  9772  193E  3440               	retlw	64
  9773  193F  3409               	retlw	9
  9774  1940  3419               	retlw	25
  9775  1941  3421               	retlw	33
  9776  1942  3401               	retlw	1
  9777  1943  3481               	retlw	129
  9778  1944  344B               	retlw	75
  9779  1945  3489               	retlw	137
  9780  1946  3443               	retlw	67
  9781  1947  34A1               	retlw	161
  9782  1948  3461               	retlw	97
  9783  1949  3411               	retlw	17
  9784  194A  3471               	retlw	113
  9785  194B  34A9               	retlw	169
  9786  194C  3461               	retlw	97
  9787  194D  3419               	retlw	25
  9788  194E  3471               	retlw	113
  9789  194F  34B0               	retlw	176
  9790  1950  3431               	retlw	49
  9791  1951  3404               	retlw	4
  9792  1952  3424               	retlw	36
  9793  1953  34A1               	retlw	161
  9794  1954  3441               	retlw	65
  9795  1955  3403               	retlw	3
  9796  1956  3409               	retlw	9
  9797  1957  348B               	retlw	139
  9798  1958  3441               	retlw	65
  9799  1959  340A               	retlw	10
  9800  195A  340A               	retlw	10
  9801  195B  3404               	retlw	4
  9802  195C  340A               	retlw	10
  9803  195D  3422               	retlw	34
  9804  195E  3428               	retlw	40
  9805  195F  3408               	retlw	8
  9806  1960  3408               	retlw	8
  9807  1961  3404               	retlw	4
  9808  1962  3404               	retlw	4
  9809  1963  3402               	retlw	2
  9810  1964  3402               	retlw	2
  9811  1965  3410               	retlw	16
  9812  1966  3410               	retlw	16
  9813  1967  34FF               	retlw	255
  9814  1968  34FF               	retlw	255
  9815  1969  3400               	retlw	0
  9816  196A  3400               	retlw	0
  9817                           
  9818                           	psect	stringtext1
  9819  2000                     __pstringtext1:	
  9820  2000                     _gamma_table_256x1k:	
  9821  2000  3400               	retlw	0
  9822  2001  3400               	retlw	0
  9823  2002  3400               	retlw	0
  9824  2003  3400               	retlw	0
  9825  2004  3400               	retlw	0
  9826  2005  3400               	retlw	0
  9827  2006  3400               	retlw	0
  9828  2007  3400               	retlw	0
  9829  2008  3400               	retlw	0
  9830  2009  3400               	retlw	0
  9831  200A  3400               	retlw	0
  9832  200B  3400               	retlw	0
  9833  200C  3400               	retlw	0
  9834  200D  3400               	retlw	0
  9835  200E  3400               	retlw	0
  9836  200F  3400               	retlw	0
  9837  2010  3400               	retlw	0
  9838  2011  3400               	retlw	0
  9839  2012  3400               	retlw	0
  9840  2013  3400               	retlw	0
  9841  2014  3400               	retlw	0
  9842  2015  3400               	retlw	0
  9843  2016  3400               	retlw	0
  9844  2017  3400               	retlw	0
  9845  2018  3400               	retlw	0
  9846  2019  3400               	retlw	0
  9847  201A  3400               	retlw	0
  9848  201B  3400               	retlw	0
  9849  201C  3400               	retlw	0
  9850  201D  3400               	retlw	0
  9851  201E  3401               	retlw	1
  9852  201F  3400               	retlw	0
  9853  2020  3401               	retlw	1
  9854  2021  3400               	retlw	0
  9855  2022  3401               	retlw	1
  9856  2023  3400               	retlw	0
  9857  2024  3401               	retlw	1
  9858  2025  3400               	retlw	0
  9859  2026  3401               	retlw	1
  9860  2027  3400               	retlw	0
  9861  2028  3401               	retlw	1
  9862  2029  3400               	retlw	0
  9863  202A  3402               	retlw	2
  9864  202B  3400               	retlw	0
  9865  202C  3402               	retlw	2
  9866  202D  3400               	retlw	0
  9867  202E  3402               	retlw	2
  9868  202F  3400               	retlw	0
  9869  2030  3403               	retlw	3
  9870  2031  3400               	retlw	0
  9871  2032  3403               	retlw	3
  9872  2033  3400               	retlw	0
  9873  2034  3403               	retlw	3
  9874  2035  3400               	retlw	0
  9875  2036  3404               	retlw	4
  9876  2037  3400               	retlw	0
  9877  2038  3404               	retlw	4
  9878  2039  3400               	retlw	0
  9879  203A  3404               	retlw	4
  9880  203B  3400               	retlw	0
  9881  203C  3405               	retlw	5
  9882  203D  3400               	retlw	0
  9883  203E  3405               	retlw	5
  9884  203F  3400               	retlw	0
  9885  2040  3406               	retlw	6
  9886  2041  3400               	retlw	0
  9887  2042  3406               	retlw	6
  9888  2043  3400               	retlw	0
  9889  2044  3407               	retlw	7
  9890  2045  3400               	retlw	0
  9891  2046  3407               	retlw	7
  9892  2047  3400               	retlw	0
  9893  2048  3408               	retlw	8
  9894  2049  3400               	retlw	0
  9895  204A  3408               	retlw	8
  9896  204B  3400               	retlw	0
  9897  204C  3409               	retlw	9
  9898  204D  3400               	retlw	0
  9899  204E  3409               	retlw	9
  9900  204F  3400               	retlw	0
  9901  2050  340A               	retlw	10
  9902  2051  3400               	retlw	0
  9903  2052  340B               	retlw	11
  9904  2053  3400               	retlw	0
  9905  2054  340B               	retlw	11
  9906  2055  3400               	retlw	0
  9907  2056  340C               	retlw	12
  9908  2057  3400               	retlw	0
  9909  2058  340D               	retlw	13
  9910  2059  3400               	retlw	0
  9911  205A  340E               	retlw	14
  9912  205B  3400               	retlw	0
  9913  205C  340E               	retlw	14
  9914  205D  3400               	retlw	0
  9915  205E  340F               	retlw	15
  9916  205F  3400               	retlw	0
  9917  2060  3410               	retlw	16
  9918  2061  3400               	retlw	0
  9919  2062  3411               	retlw	17
  9920  2063  3400               	retlw	0
  9921  2064  3412               	retlw	18
  9922  2065  3400               	retlw	0
  9923  2066  3413               	retlw	19
  9924  2067  3400               	retlw	0
  9925  2068  3413               	retlw	19
  9926  2069  3400               	retlw	0
  9927  206A  3414               	retlw	20
  9928  206B  3400               	retlw	0
  9929  206C  3415               	retlw	21
  9930  206D  3400               	retlw	0
  9931  206E  3416               	retlw	22
  9932  206F  3400               	retlw	0
  9933  2070  3417               	retlw	23
  9934  2071  3400               	retlw	0
  9935  2072  3419               	retlw	25
  9936  2073  3400               	retlw	0
  9937  2074  341A               	retlw	26
  9938  2075  3400               	retlw	0
  9939  2076  341B               	retlw	27
  9940  2077  3400               	retlw	0
  9941  2078  341C               	retlw	28
  9942  2079  3400               	retlw	0
  9943  207A  341D               	retlw	29
  9944  207B  3400               	retlw	0
  9945  207C  341E               	retlw	30
  9946  207D  3400               	retlw	0
  9947  207E  3420               	retlw	32
  9948  207F  3400               	retlw	0
  9949  2080  3421               	retlw	33
  9950  2081  3400               	retlw	0
  9951  2082  3422               	retlw	34
  9952  2083  3400               	retlw	0
  9953  2084  3423               	retlw	35
  9954  2085  3400               	retlw	0
  9955  2086  3425               	retlw	37
  9956  2087  3400               	retlw	0
  9957  2088  3426               	retlw	38
  9958  2089  3400               	retlw	0
  9959  208A  3428               	retlw	40
  9960  208B  3400               	retlw	0
  9961  208C  3429               	retlw	41
  9962  208D  3400               	retlw	0
  9963  208E  342A               	retlw	42
  9964  208F  3400               	retlw	0
  9965  2090  342C               	retlw	44
  9966  2091  3400               	retlw	0
  9967  2092  342E               	retlw	46
  9968  2093  3400               	retlw	0
  9969  2094  342F               	retlw	47
  9970  2095  3400               	retlw	0
  9971  2096  3431               	retlw	49
  9972  2097  3400               	retlw	0
  9973  2098  3432               	retlw	50
  9974  2099  3400               	retlw	0
  9975  209A  3434               	retlw	52
  9976  209B  3400               	retlw	0
  9977  209C  3436               	retlw	54
  9978  209D  3400               	retlw	0
  9979  209E  3437               	retlw	55
  9980  209F  3400               	retlw	0
  9981  20A0  3439               	retlw	57
  9982  20A1  3400               	retlw	0
  9983  20A2  343B               	retlw	59
  9984  20A3  3400               	retlw	0
  9985  20A4  343D               	retlw	61
  9986  20A5  3400               	retlw	0
  9987  20A6  343F               	retlw	63
  9988  20A7  3400               	retlw	0
  9989  20A8  3441               	retlw	65
  9990  20A9  3400               	retlw	0
  9991  20AA  3442               	retlw	66
  9992  20AB  3400               	retlw	0
  9993  20AC  3444               	retlw	68
  9994  20AD  3400               	retlw	0
  9995  20AE  3446               	retlw	70
  9996  20AF  3400               	retlw	0
  9997  20B0  3448               	retlw	72
  9998  20B1  3400               	retlw	0
  9999  20B2  344B               	retlw	75
 10000  20B3  3400               	retlw	0
 10001  20B4  344D               	retlw	77
 10002  20B5  3400               	retlw	0
 10003  20B6  344F               	retlw	79
 10004  20B7  3400               	retlw	0
 10005  20B8  3451               	retlw	81
 10006  20B9  3400               	retlw	0
 10007  20BA  3453               	retlw	83
 10008  20BB  3400               	retlw	0
 10009  20BC  3455               	retlw	85
 10010  20BD  3400               	retlw	0
 10011  20BE  3458               	retlw	88
 10012  20BF  3400               	retlw	0
 10013  20C0  345A               	retlw	90
 10014  20C1  3400               	retlw	0
 10015  20C2  345C               	retlw	92
 10016  20C3  3400               	retlw	0
 10017  20C4  345F               	retlw	95
 10018  20C5  3400               	retlw	0
 10019  20C6  3461               	retlw	97
 10020  20C7  3400               	retlw	0
 10021  20C8  3464               	retlw	100
 10022  20C9  3400               	retlw	0
 10023  20CA  3466               	retlw	102
 10024  20CB  3400               	retlw	0
 10025  20CC  3469               	retlw	105
 10026  20CD  3400               	retlw	0
 10027  20CE  346B               	retlw	107
 10028  20CF  3400               	retlw	0
 10029  20D0  346E               	retlw	110
 10030  20D1  3400               	retlw	0
 10031  20D2  3470               	retlw	112
 10032  20D3  3400               	retlw	0
 10033  20D4  3473               	retlw	115
 10034  20D5  3400               	retlw	0
 10035  20D6  3476               	retlw	118
 10036  20D7  3400               	retlw	0
 10037  20D8  3479               	retlw	121
 10038  20D9  3400               	retlw	0
 10039  20DA  347B               	retlw	123
 10040  20DB  3400               	retlw	0
 10041  20DC  347E               	retlw	126
 10042  20DD  3400               	retlw	0
 10043  20DE  3481               	retlw	129
 10044  20DF  3400               	retlw	0
 10045  20E0  3484               	retlw	132
 10046  20E1  3400               	retlw	0
 10047  20E2  3487               	retlw	135
 10048  20E3  3400               	retlw	0
 10049  20E4  348A               	retlw	138
 10050  20E5  3400               	retlw	0
 10051  20E6  348D               	retlw	141
 10052  20E7  3400               	retlw	0
 10053  20E8  3490               	retlw	144
 10054  20E9  3400               	retlw	0
 10055  20EA  3493               	retlw	147
 10056  20EB  3400               	retlw	0
 10057  20EC  3496               	retlw	150
 10058  20ED  3400               	retlw	0
 10059  20EE  349A               	retlw	154
 10060  20EF  3400               	retlw	0
 10061  20F0  349D               	retlw	157
 10062  20F1  3400               	retlw	0
 10063  20F2  34A0               	retlw	160
 10064  20F3  3400               	retlw	0
 10065  20F4  34A3               	retlw	163
 10066  20F5  3400               	retlw	0
 10067  20F6  34A7               	retlw	167
 10068  20F7  3400               	retlw	0
 10069  20F8  34AA               	retlw	170
 10070  20F9  3400               	retlw	0
 10071  20FA  34AE               	retlw	174
 10072  20FB  3400               	retlw	0
 10073  20FC  34B1               	retlw	177
 10074  20FD  3400               	retlw	0
 10075  20FE  34B5               	retlw	181
 10076  20FF  3400               	retlw	0
 10077  2100  34B8               	retlw	184
 10078  2101  3400               	retlw	0
 10079  2102  34BC               	retlw	188
 10080  2103  3400               	retlw	0
 10081  2104  34BF               	retlw	191
 10082  2105  3400               	retlw	0
 10083  2106  34C3               	retlw	195
 10084  2107  3400               	retlw	0
 10085  2108  34C7               	retlw	199
 10086  2109  3400               	retlw	0
 10087  210A  34CA               	retlw	202
 10088  210B  3400               	retlw	0
 10089  210C  34CE               	retlw	206
 10090  210D  3400               	retlw	0
 10091  210E  34D2               	retlw	210
 10092  210F  3400               	retlw	0
 10093  2110  34D6               	retlw	214
 10094  2111  3400               	retlw	0
 10095  2112  34DA               	retlw	218
 10096  2113  3400               	retlw	0
 10097  2114  34DE               	retlw	222
 10098  2115  3400               	retlw	0
 10099  2116  34E2               	retlw	226
 10100  2117  3400               	retlw	0
 10101  2118  34E6               	retlw	230
 10102  2119  3400               	retlw	0
 10103  211A  34EA               	retlw	234
 10104  211B  3400               	retlw	0
 10105  211C  34EE               	retlw	238
 10106  211D  3400               	retlw	0
 10107  211E  34F3               	retlw	243
 10108  211F  3400               	retlw	0
 10109  2120  34F7               	retlw	247
 10110  2121  3400               	retlw	0
 10111  2122  34FB               	retlw	251
 10112  2123  3400               	retlw	0
 10113  2124  34FF               	retlw	255
 10114  2125  3400               	retlw	0
 10115  2126  3404               	retlw	4
 10116  2127  3401               	retlw	1
 10117  2128  3408               	retlw	8
 10118  2129  3401               	retlw	1
 10119  212A  340D               	retlw	13
 10120  212B  3401               	retlw	1
 10121  212C  3411               	retlw	17
 10122  212D  3401               	retlw	1
 10123  212E  3416               	retlw	22
 10124  212F  3401               	retlw	1
 10125  2130  341A               	retlw	26
 10126  2131  3401               	retlw	1
 10127  2132  341F               	retlw	31
 10128  2133  3401               	retlw	1
 10129  2134  3424               	retlw	36
 10130  2135  3401               	retlw	1
 10131  2136  3428               	retlw	40
 10132  2137  3401               	retlw	1
 10133  2138  342D               	retlw	45
 10134  2139  3401               	retlw	1
 10135  213A  3432               	retlw	50
 10136  213B  3401               	retlw	1
 10137  213C  3437               	retlw	55
 10138  213D  3401               	retlw	1
 10139  213E  343C               	retlw	60
 10140  213F  3401               	retlw	1
 10141  2140  3441               	retlw	65
 10142  2141  3401               	retlw	1
 10143  2142  3446               	retlw	70
 10144  2143  3401               	retlw	1
 10145  2144  344B               	retlw	75
 10146  2145  3401               	retlw	1
 10147  2146  3450               	retlw	80
 10148  2147  3401               	retlw	1
 10149  2148  3455               	retlw	85
 10150  2149  3401               	retlw	1
 10151  214A  345A               	retlw	90
 10152  214B  3401               	retlw	1
 10153  214C  345F               	retlw	95
 10154  214D  3401               	retlw	1
 10155  214E  3465               	retlw	101
 10156  214F  3401               	retlw	1
 10157  2150  346A               	retlw	106
 10158  2151  3401               	retlw	1
 10159  2152  346F               	retlw	111
 10160  2153  3401               	retlw	1
 10161  2154  3475               	retlw	117
 10162  2155  3401               	retlw	1
 10163  2156  347A               	retlw	122
 10164  2157  3401               	retlw	1
 10165  2158  3480               	retlw	128
 10166  2159  3401               	retlw	1
 10167  215A  3486               	retlw	134
 10168  215B  3401               	retlw	1
 10169  215C  348B               	retlw	139
 10170  215D  3401               	retlw	1
 10171  215E  3491               	retlw	145
 10172  215F  3401               	retlw	1
 10173  2160  3497               	retlw	151
 10174  2161  3401               	retlw	1
 10175  2162  349C               	retlw	156
 10176  2163  3401               	retlw	1
 10177  2164  34A2               	retlw	162
 10178  2165  3401               	retlw	1
 10179  2166  34A8               	retlw	168
 10180  2167  3401               	retlw	1
 10181  2168  34AE               	retlw	174
 10182  2169  3401               	retlw	1
 10183  216A  34B4               	retlw	180
 10184  216B  3401               	retlw	1
 10185  216C  34BA               	retlw	186
 10186  216D  3401               	retlw	1
 10187  216E  34C0               	retlw	192
 10188  216F  3401               	retlw	1
 10189  2170  34C6               	retlw	198
 10190  2171  3401               	retlw	1
 10191  2172  34CC               	retlw	204
 10192  2173  3401               	retlw	1
 10193  2174  34D2               	retlw	210
 10194  2175  3401               	retlw	1
 10195  2176  34D9               	retlw	217
 10196  2177  3401               	retlw	1
 10197  2178  34DF               	retlw	223
 10198  2179  3401               	retlw	1
 10199  217A  34E5               	retlw	229
 10200  217B  3401               	retlw	1
 10201  217C  34EC               	retlw	236
 10202  217D  3401               	retlw	1
 10203  217E  34F2               	retlw	242
 10204  217F  3401               	retlw	1
 10205  2180  34F9               	retlw	249
 10206  2181  3401               	retlw	1
 10207  2182  34FF               	retlw	255
 10208  2183  3401               	retlw	1
 10209  2184  3406               	retlw	6
 10210  2185  3402               	retlw	2
 10211  2186  340D               	retlw	13
 10212  2187  3402               	retlw	2
 10213  2188  3413               	retlw	19
 10214  2189  3402               	retlw	2
 10215  218A  341A               	retlw	26
 10216  218B  3402               	retlw	2
 10217  218C  3421               	retlw	33
 10218  218D  3402               	retlw	2
 10219  218E  3428               	retlw	40
 10220  218F  3402               	retlw	2
 10221  2190  342F               	retlw	47
 10222  2191  3402               	retlw	2
 10223  2192  3436               	retlw	54
 10224  2193  3402               	retlw	2
 10225  2194  343D               	retlw	61
 10226  2195  3402               	retlw	2
 10227  2196  3444               	retlw	68
 10228  2197  3402               	retlw	2
 10229  2198  344B               	retlw	75
 10230  2199  3402               	retlw	2
 10231  219A  3452               	retlw	82
 10232  219B  3402               	retlw	2
 10233  219C  345A               	retlw	90
 10234  219D  3402               	retlw	2
 10235  219E  3461               	retlw	97
 10236  219F  3402               	retlw	2
 10237  21A0  3468               	retlw	104
 10238  21A1  3402               	retlw	2
 10239  21A2  3470               	retlw	112
 10240  21A3  3402               	retlw	2
 10241  21A4  3477               	retlw	119
 10242  21A5  3402               	retlw	2
 10243  21A6  347F               	retlw	127
 10244  21A7  3402               	retlw	2
 10245  21A8  3486               	retlw	134
 10246  21A9  3402               	retlw	2
 10247  21AA  348E               	retlw	142
 10248  21AB  3402               	retlw	2
 10249  21AC  3495               	retlw	149
 10250  21AD  3402               	retlw	2
 10251  21AE  349D               	retlw	157
 10252  21AF  3402               	retlw	2
 10253  21B0  34A5               	retlw	165
 10254  21B1  3402               	retlw	2
 10255  21B2  34AD               	retlw	173
 10256  21B3  3402               	retlw	2
 10257  21B4  34B5               	retlw	181
 10258  21B5  3402               	retlw	2
 10259  21B6  34BD               	retlw	189
 10260  21B7  3402               	retlw	2
 10261  21B8  34C5               	retlw	197
 10262  21B9  3402               	retlw	2
 10263  21BA  34CD               	retlw	205
 10264  21BB  3402               	retlw	2
 10265  21BC  34D5               	retlw	213
 10266  21BD  3402               	retlw	2
 10267  21BE  34DD               	retlw	221
 10268  21BF  3402               	retlw	2
 10269  21C0  34E5               	retlw	229
 10270  21C1  3402               	retlw	2
 10271  21C2  34ED               	retlw	237
 10272  21C3  3402               	retlw	2
 10273  21C4  34F6               	retlw	246
 10274  21C5  3402               	retlw	2
 10275  21C6  34FE               	retlw	254
 10276  21C7  3402               	retlw	2
 10277  21C8  3406               	retlw	6
 10278  21C9  3403               	retlw	3
 10279  21CA  340F               	retlw	15
 10280  21CB  3403               	retlw	3
 10281  21CC  3418               	retlw	24
 10282  21CD  3403               	retlw	3
 10283  21CE  3420               	retlw	32
 10284  21CF  3403               	retlw	3
 10285  21D0  3429               	retlw	41
 10286  21D1  3403               	retlw	3
 10287  21D2  3431               	retlw	49
 10288  21D3  3403               	retlw	3
 10289  21D4  343A               	retlw	58
 10290  21D5  3403               	retlw	3
 10291  21D6  3443               	retlw	67
 10292  21D7  3403               	retlw	3
 10293  21D8  344C               	retlw	76
 10294  21D9  3403               	retlw	3
 10295  21DA  3455               	retlw	85
 10296  21DB  3403               	retlw	3
 10297  21DC  345E               	retlw	94
 10298  21DD  3403               	retlw	3
 10299  21DE  3467               	retlw	103
 10300  21DF  3403               	retlw	3
 10301  21E0  3470               	retlw	112
 10302  21E1  3403               	retlw	3
 10303  21E2  3479               	retlw	121
 10304  21E3  3403               	retlw	3
 10305  21E4  3482               	retlw	130
 10306  21E5  3403               	retlw	3
 10307  21E6  348C               	retlw	140
 10308  21E7  3403               	retlw	3
 10309  21E8  3495               	retlw	149
 10310  21E9  3403               	retlw	3
 10311  21EA  349E               	retlw	158
 10312  21EB  3403               	retlw	3
 10313  21EC  34A8               	retlw	168
 10314  21ED  3403               	retlw	3
 10315  21EE  34B1               	retlw	177
 10316  21EF  3403               	retlw	3
 10317  21F0  34BB               	retlw	187
 10318  21F1  3403               	retlw	3
 10319  21F2  34C5               	retlw	197
 10320  21F3  3403               	retlw	3
 10321  21F4  34CE               	retlw	206
 10322  21F5  3403               	retlw	3
 10323  21F6  34D8               	retlw	216
 10324  21F7  3403               	retlw	3
 10325  21F8  34E2               	retlw	226
 10326  21F9  3403               	retlw	3
 10327  21FA  34EC               	retlw	236
 10328  21FB  3403               	retlw	3
 10329  21FC  34F6               	retlw	246
 10330  21FD  3403               	retlw	3
 10331  21FE  34FF               	retlw	255
 10332  21FF  3403               	retlw	3
 10333  2200                     __end_of_gamma_table_256x1k:	
 10334                           
 10335                           	psect	stringtext2
 10336  2800                     __pstringtext2:	
 10337  2800                     _dpowers:	
 10338  2800  3401               	retlw	1
 10339  2801  3400               	retlw	0
 10340  2802  340A               	retlw	10
 10341  2803  3400               	retlw	0
 10342  2804  3464               	retlw	100
 10343  2805  3400               	retlw	0
 10344  2806  34E8               	retlw	232
 10345  2807  3403               	retlw	3
 10346  2808  3410               	retlw	16
 10347  2809  3427               	retlw	39
 10348  280A                     __end_of_dpowers:	
 10349  000D                     _PORTBbits	set	13
 10350  000C                     _PORTAbits	set	12
 10351  000E                     _PORTCbits	set	14
 10352  000B                     _INTCONbits	set	11
 10353  0017                     _T0CON0bits	set	23
 10354  0010                     _PIR0bits	set	16
 10355  0015                     _TMR0L	set	21
 10356  0016                     _TMR0H	set	22
 10357  0018                     _T0CON1	set	24
 10358  0017                     _T0CON0	set	23
 10359  0012                     _PIR2bits	set	18
 10360  001F                     _T2CONbits	set	31
 10361  0011                     _PIR1bits	set	17
 10362  001D                     _TMR2	set	29
 10363  001E                     _PR2	set	30
 10364  001F                     _T2CON	set	31
 10365  005F                     _GIE	set	95
 10366  0090                     _PIE0bits	set	144
 10367  008E                     _TRISC	set	142
 10368  008D                     _TRISB	set	141
 10369  008C                     _TRISA	set	140
 10370  0097                     _WDTCON	set	151
 10371  010E                     _LATCbits	set	270
 10372  010D                     _LATBbits	set	269
 10373  010E                     _LATC	set	270
 10374  010D                     _LATB	set	269
 10375  010C                     _LATA	set	268
 10376  018C                     _ANSELA	set	396
 10377  018D                     _ANSELB	set	397
 10378  018E                     _ANSELC	set	398
 10379  020E                     _WPUC	set	526
 10380  020C                     _WPUA	set	524
 10381  020D                     _WPUB	set	525
 10382  0214                     _SSP1STATbits	set	532
 10383  0211                     _SSP1BUF	set	529
 10384  0215                     _SSP1CON1bits	set	533
 10385  0212                     _SSP1ADD	set	530
 10386  0215                     _SSP1CON1	set	533
 10387  0214                     _SSP1STAT	set	532
 10388  0297                     _CCP2CONbits	set	663
 10389  0295                     _CCPR2L	set	661
 10390  0296                     _CCPR2H	set	662
 10391  0297                     _CCP2CON	set	663
 10392  028E                     _ODCONC	set	654
 10393  028D                     _ODCONB	set	653
 10394  028C                     _ODCONA	set	652
 10395  0293                     _CCP1CONbits	set	659
 10396  029F                     _CCPTMRSbits	set	671
 10397  0291                     _CCPR1L	set	657
 10398  0292                     _CCPR1H	set	658
 10399  0293                     _CCP1CON	set	659
 10400  0417                     _T4CONbits	set	1047
 10401  0415                     _TMR4	set	1045
 10402  0416                     _PR4	set	1046
 10403  0417                     _T4CON	set	1047
 10404  061A                     _PWM6DCL	set	1562
 10405  061B                     _PWM6DCH	set	1563
 10406  061C                     _PWM6CON	set	1564
 10407  061F                     _PWMTMRSbits	set	1567
 10408  0617                     _PWM5DCL	set	1559
 10409  0618                     _PWM5DCH	set	1560
 10410  0619                     _PWM5CON	set	1561
 10411  0896                     _NVMCON2	set	2198
 10412  0893                     _NVMDATL	set	2195
 10413  0894                     _NVMDATH	set	2196
 10414  0895                     _NVMCON1bits	set	2197
 10415  0892                     _NVMADRH	set	2194
 10416  0891                     _NVMADRL	set	2193
 10417  091E                     _OSCTUNE	set	2334
 10418  091F                     _OSCFRQ	set	2335
 10419  091D                     _OSCEN	set	2333
 10420  091B                     _OSCCON3	set	2331
 10421  0919                     _OSCCON1	set	2329
 10422  48E0                     _PLLR	set	18656
 10423  0E20                     _SSP1CLKPPSbits	set	3616
 10424  0E21                     _SSP1DATPPSbits	set	3617
 10425  0E0F                     _PPSLOCKbits	set	3599
 10426  0E0F                     _PPSLOCK	set	3599
 10427  0EA2                     _RC2PPSbits	set	3746
 10428  0E9E                     _RB6PPSbits	set	3742
 10429  0EA3                     _RC3PPSbits	set	3747
 10430  0EA0                     _RC0PPSbits	set	3744
 10431  0EA4                     _RC4PPSbits	set	3748
 10432  0EA1                     _RC1PPSbits	set	3745
 10433  280A                     STR_33:	
 10434  280A  3449               	retlw	73	;'I'
 10435  280B  344D               	retlw	77	;'M'
 10436  280C  3420               	retlw	32	;' '
 10437  280D  3441               	retlw	65	;'A'
 10438  280E  3446               	retlw	70	;'F'
 10439  280F  3452               	retlw	82	;'R'
 10440  2810  3441               	retlw	65	;'A'
 10441  2811  3449               	retlw	73	;'I'
 10442  2812  3444               	retlw	68	;'D'
 10443  2813  3420               	retlw	32	;' '
 10444  2814  3449               	retlw	73	;'I'
 10445  2815  3420               	retlw	32	;' '
 10446  2816  3443               	retlw	67	;'C'
 10447  2817  3441               	retlw	65	;'A'
 10448  2818  344E               	retlw	78	;'N'
 10449  2819  3454               	retlw	84	;'T'
 10450  281A  3420               	retlw	32	;' '
 10451  281B  344C               	retlw	76	;'L'
 10452  281C  3445               	retlw	69	;'E'
 10453  281D  3454               	retlw	84	;'T'
 10454  281E  3420               	retlw	32	;' '
 10455  281F  3459               	retlw	89	;'Y'
 10456  2820  344F               	retlw	79	;'O'
 10457  2821  3455               	retlw	85	;'U'
 10458  2822  3420               	retlw	32	;' '
 10459  2823  3444               	retlw	68	;'D'
 10460  2824  344F               	retlw	79	;'O'
 10461  2825  3420               	retlw	32	;' '
 10462  2826  3454               	retlw	84	;'T'
 10463  2827  3448               	retlw	72	;'H'
 10464  2828  3441               	retlw	65	;'A'
 10465  2829  3454               	retlw	84	;'T'
 10466  282A  3420               	retlw	32	;' '
 10467  282B  3444               	retlw	68	;'D'
 10468  282C  3441               	retlw	65	;'A'
 10469  282D  3456               	retlw	86	;'V'
 10470  282E  3445               	retlw	69	;'E'
 10471  282F  342E               	retlw	46	;'.'
 10472  2830  342E               	retlw	46	;'.'
 10473  2831  342E               	retlw	46	;'.'
 10474  2832  3420               	retlw	32	;' '
 10475  2833  3420               	retlw	32	;' '
 10476  2834  3449               	retlw	73	;'I'
 10477  2835  344D               	retlw	77	;'M'
 10478  2836  3420               	retlw	32	;' '
 10479  2837  3448               	retlw	72	;'H'
 10480  2838  3445               	retlw	69	;'E'
 10481  2839  3452               	retlw	82	;'R'
 10482  283A  3445               	retlw	69	;'E'
 10483  283B  3420               	retlw	32	;' '
 10484  283C  3454               	retlw	84	;'T'
 10485  283D  344F               	retlw	79	;'O'
 10486  283E  3420               	retlw	32	;' '
 10487  283F  3443               	retlw	67	;'C'
 10488  2840  3448               	retlw	72	;'H'
 10489  2841  3445               	retlw	69	;'E'
 10490  2842  3457               	retlw	87	;'W'
 10491  2843  3420               	retlw	32	;' '
 10492  2844  3442               	retlw	66	;'B'
 10493  2845  3455               	retlw	85	;'U'
 10494  2846  3442               	retlw	66	;'B'
 10495  2847  3442               	retlw	66	;'B'
 10496  2848  344C               	retlw	76	;'L'
 10497  2849  3445               	retlw	69	;'E'
 10498  284A  3447               	retlw	71	;'G'
 10499  284B  3455               	retlw	85	;'U'
 10500  284C  344D               	retlw	77	;'M'
 10501  284D  3420               	retlw	32	;' '
 10502  284E  3441               	retlw	65	;'A'
 10503  284F  344E               	retlw	78	;'N'
 10504  2850  3444               	retlw	68	;'D'
 10505  2851  3420               	retlw	32	;' '
 10506  2852  344B               	retlw	75	;'K'
 10507  2853  3449               	retlw	73	;'I'
 10508  2854  3443               	retlw	67	;'C'
 10509  2855  344B               	retlw	75	;'K'
 10510  2856  3420               	retlw	32	;' '
 10511  2857  3441               	retlw	65	;'A'
 10512  2858  3453               	retlw	83	;'S'
 10513  2859  3453               	retlw	83	;'S'
 10514  285A  342E               	retlw	46	;'.'
 10515  285B  342E               	retlw	46	;'.'
 10516  285C  342E               	retlw	46	;'.'
 10517  285D  3420               	retlw	32	;' '
 10518  285E  3441               	retlw	65	;'A'
 10519  285F  344E               	retlw	78	;'N'
 10520  2860  3444               	retlw	68	;'D'
 10521  2861  3420               	retlw	32	;' '
 10522  2862  3449               	retlw	73	;'I'
 10523  2863  344D               	retlw	77	;'M'
 10524  2864  3420               	retlw	32	;' '
 10525  2865  3441               	retlw	65	;'A'
 10526  2866  344C               	retlw	76	;'L'
 10527  2867  344C               	retlw	76	;'L'
 10528  2868  3420               	retlw	32	;' '
 10529  2869  344F               	retlw	79	;'O'
 10530  286A  3455               	retlw	85	;'U'
 10531  286B  3454               	retlw	84	;'T'
 10532  286C  3420               	retlw	32	;' '
 10533  286D  344F               	retlw	79	;'O'
 10534  286E  3446               	retlw	70	;'F'
 10535  286F  3420               	retlw	32	;' '
 10536  2870  3442               	retlw	66	;'B'
 10537  2871  3455               	retlw	85	;'U'
 10538  2872  3442               	retlw	66	;'B'
 10539  2873  3442               	retlw	66	;'B'
 10540  2874  344C               	retlw	76	;'L'
 10541  2875  3445               	retlw	69	;'E'
 10542  2876  3447               	retlw	71	;'G'
 10543  2877  3455               	retlw	85	;'U'
 10544  2878  344D               	retlw	77	;'M'
 10545  2879  3420               	retlw	32	;' '
 10546  287A  3420               	retlw	32	;' '
 10547  287B  3420               	retlw	32	;' '
 10548  287C  3420               	retlw	32	;' '
 10549  287D  3420               	retlw	32	;' '
 10550  287E  3420               	retlw	32	;' '
 10551  287F  3420               	retlw	32	;' '
 10552  2880  3420               	retlw	32	;' '
 10553  2881  3400               	retlw	0
 10554                           
 10555                           	psect	stringtext3
 10556  3800                     __pstringtext3:	
 10557  3800                     STR_35:	
 10558  3800  3449               	retlw	73	;'I'
 10559  3801  3420               	retlw	32	;' '
 10560  3802  344C               	retlw	76	;'L'
 10561  3803  344F               	retlw	79	;'O'
 10562  3804  3456               	retlw	86	;'V'
 10563  3805  3445               	retlw	69	;'E'
 10564  3806  3420               	retlw	32	;' '
 10565  3807  3449               	retlw	73	;'I'
 10566  3808  3454               	retlw	84	;'T'
 10567  3809  342E               	retlw	46	;'.'
 10568  380A  3420               	retlw	32	;' '
 10569  380B  3445               	retlw	69	;'E'
 10570  380C  3453               	retlw	83	;'S'
 10571  380D  3450               	retlw	80	;'P'
 10572  380E  3445               	retlw	69	;'E'
 10573  380F  3443               	retlw	67	;'C'
 10574  3810  3449               	retlw	73	;'I'
 10575  3811  3441               	retlw	65	;'A'
 10576  3812  344C               	retlw	76	;'L'
 10577  3813  344C               	retlw	76	;'L'
 10578  3814  3459               	retlw	89	;'Y'
 10579  3815  3420               	retlw	32	;' '
 10580  3816  344C               	retlw	76	;'L'
 10581  3817  3441               	retlw	65	;'A'
 10582  3818  3454               	retlw	84	;'T'
 10583  3819  3445               	retlw	69	;'E'
 10584  381A  3452               	retlw	82	;'R'
 10585  381B  3420               	retlw	32	;' '
 10586  381C  3449               	retlw	73	;'I'
 10587  381D  344E               	retlw	78	;'N'
 10588  381E  3420               	retlw	32	;' '
 10589  381F  3454               	retlw	84	;'T'
 10590  3820  3448               	retlw	72	;'H'
 10591  3821  3445               	retlw	69	;'E'
 10592  3822  3420               	retlw	32	;' '
 10593  3823  3453               	retlw	83	;'S'
 10594  3824  3455               	retlw	85	;'U'
 10595  3825  344D               	retlw	77	;'M'
 10596  3826  344D               	retlw	77	;'M'
 10597  3827  3445               	retlw	69	;'E'
 10598  3828  3452               	retlw	82	;'R'
 10599  3829  3420               	retlw	32	;' '
 10600  382A  3420               	retlw	32	;' '
 10601  382B  3420               	retlw	32	;' '
 10602  382C  3420               	retlw	32	;' '
 10603  382D  3420               	retlw	32	;' '
 10604  382E  3400               	retlw	0
 10605                           
 10606                           	psect	stringtext4
 10607  382F                     __pstringtext4:	
 10608  382F                     STR_82:	
 10609  382F  3459               	retlw	89	;'Y'
 10610  3830  344F               	retlw	79	;'O'
 10611  3831  3455               	retlw	85	;'U'
 10612  3832  3420               	retlw	32	;' '
 10613  3833  3441               	retlw	65	;'A'
 10614  3834  3452               	retlw	82	;'R'
 10615  3835  3445               	retlw	69	;'E'
 10616  3836  3420               	retlw	32	;' '
 10617  3837  3449               	retlw	73	;'I'
 10618  3838  344E               	retlw	78	;'N'
 10619  3839  3420               	retlw	32	;' '
 10620  383A  3454               	retlw	84	;'T'
 10621  383B  344F               	retlw	79	;'O'
 10622  383C  344F               	retlw	79	;'O'
 10623  383D  3420               	retlw	32	;' '
 10624  383E  3444               	retlw	68	;'D'
 10625  383F  3445               	retlw	69	;'E'
 10626  3840  3445               	retlw	69	;'E'
 10627  3841  3450               	retlw	80	;'P'
 10628  3842  3420               	retlw	32	;' '
 10629  3843  3420               	retlw	32	;' '
 10630  3844  3420               	retlw	32	;' '
 10631  3845  3420               	retlw	32	;' '
 10632  3846  3420               	retlw	32	;' '
 10633  3847  3454               	retlw	84	;'T'
 10634  3848  3441               	retlw	65	;'A'
 10635  3849  344B               	retlw	75	;'K'
 10636  384A  3445               	retlw	69	;'E'
 10637  384B  3420               	retlw	32	;' '
 10638  384C  3454               	retlw	84	;'T'
 10639  384D  3448               	retlw	72	;'H'
 10640  384E  3445               	retlw	69	;'E'
 10641  384F  3420               	retlw	32	;' '
 10642  3850  3452               	retlw	82	;'R'
 10643  3851  3445               	retlw	69	;'E'
 10644  3852  3444               	retlw	68	;'D'
 10645  3853  3420               	retlw	32	;' '
 10646  3854  3450               	retlw	80	;'P'
 10647  3855  3449               	retlw	73	;'I'
 10648  3856  344C               	retlw	76	;'L'
 10649  3857  344C               	retlw	76	;'L'
 10650  3858  3420               	retlw	32	;' '
 10651  3859  3420               	retlw	32	;' '
 10652  385A  3420               	retlw	32	;' '
 10653  385B  3420               	retlw	32	;' '
 10654  385C  3400               	retlw	0
 10655                           
 10656                           	psect	stringtext5
 10657  385D                     __pstringtext5:	
 10658  385D                     STR_37:	
 10659  385D  3448               	retlw	72	;'H'
 10660  385E  3454               	retlw	84	;'T'
 10661  385F  3454               	retlw	84	;'T'
 10662  3860  3450               	retlw	80	;'P'
 10663  3861  3453               	retlw	83	;'S'
 10664  3862  343A               	retlw	58	;':'
 10665  3863  342F               	retlw	47	;'/'
 10666  3864  342F               	retlw	47	;'/'
 10667  3865  3447               	retlw	71	;'G'
 10668  3866  3449               	retlw	73	;'I'
 10669  3867  3454               	retlw	84	;'T'
 10670  3868  3448               	retlw	72	;'H'
 10671  3869  3455               	retlw	85	;'U'
 10672  386A  3442               	retlw	66	;'B'
 10673  386B  342E               	retlw	46	;'.'
 10674  386C  3443               	retlw	67	;'C'
 10675  386D  344F               	retlw	79	;'O'
 10676  386E  344D               	retlw	77	;'M'
 10677  386F  342F               	retlw	47	;'/'
 10678  3870  344E               	retlw	78	;'N'
 10679  3871  3455               	retlw	85	;'U'
 10680  3872  344C               	retlw	76	;'L'
 10681  3873  344C               	retlw	76	;'L'
 10682  3874  3449               	retlw	73	;'I'
 10683  3875  3442               	retlw	66	;'B'
 10684  3876  3441               	retlw	65	;'A'
 10685  3877  3444               	retlw	68	;'D'
 10686  3878  3447               	retlw	71	;'G'
 10687  3879  3445               	retlw	69	;'E'
 10688  387A  342F               	retlw	47	;'/'
 10689  387B  3444               	retlw	68	;'D'
 10690  387C  3445               	retlw	69	;'E'
 10691  387D  3446               	retlw	70	;'F'
 10692  387E  3443               	retlw	67	;'C'
 10693  387F  344F               	retlw	79	;'O'
 10694  3880  344E               	retlw	78	;'N'
 10695  3881  3432               	retlw	50	;'2'
 10696  3882  3435               	retlw	53	;'5'
 10697  3883  3420               	retlw	32	;' '
 10698  3884  3420               	retlw	32	;' '
 10699  3885  3420               	retlw	32	;' '
 10700  3886  3420               	retlw	32	;' '
 10701  3887  3400               	retlw	0
 10702                           
 10703                           	psect	stringtext6
 10704  3888                     __pstringtext6:	
 10705  3888                     STR_24:	
 10706  3888  3447               	retlw	71	;'G'
 10707  3889  3455               	retlw	85	;'U'
 10708  388A  3459               	retlw	89	;'Y'
 10709  388B  3453               	retlw	83	;'S'
 10710  388C  3420               	retlw	32	;' '
 10711  388D  3449               	retlw	73	;'I'
 10712  388E  3420               	retlw	32	;' '
 10713  388F  3448               	retlw	72	;'H'
 10714  3890  3441               	retlw	65	;'A'
 10715  3891  3456               	retlw	86	;'V'
 10716  3892  3445               	retlw	69	;'E'
 10717  3893  3420               	retlw	32	;' '
 10718  3894  3441               	retlw	65	;'A'
 10719  3895  3420               	retlw	32	;' '
 10720  3896  3447               	retlw	71	;'G'
 10721  3897  3452               	retlw	82	;'R'
 10722  3898  3445               	retlw	69	;'E'
 10723  3899  3441               	retlw	65	;'A'
 10724  389A  3454               	retlw	84	;'T'
 10725  389B  3420               	retlw	32	;' '
 10726  389C  3449               	retlw	73	;'I'
 10727  389D  3444               	retlw	68	;'D'
 10728  389E  3445               	retlw	69	;'E'
 10729  389F  3441               	retlw	65	;'A'
 10730  38A0  3420               	retlw	32	;' '
 10731  38A1  342D               	retlw	45	;'-'
 10732  38A2  344D               	retlw	77	;'M'
 10733  38A3  3449               	retlw	73	;'I'
 10734  38A4  344B               	retlw	75	;'K'
 10735  38A5  3445               	retlw	69	;'E'
 10736  38A6  3420               	retlw	32	;' '
 10737  38A7  344B               	retlw	75	;'K'
 10738  38A8  342E               	retlw	46	;'.'
 10739  38A9  3420               	retlw	32	;' '
 10740  38AA  3420               	retlw	32	;' '
 10741  38AB  3420               	retlw	32	;' '
 10742  38AC  3420               	retlw	32	;' '
 10743  38AD  3420               	retlw	32	;' '
 10744  38AE  3420               	retlw	32	;' '
 10745  38AF  3400               	retlw	0
 10746                           
 10747                           	psect	stringtext7
 10748  38B0                     __pstringtext7:	
 10749  38B0                     STR_20:	
 10750  38B0  3441               	retlw	65	;'A'
 10751  38B1  344C               	retlw	76	;'L'
 10752  38B2  344C               	retlw	76	;'L'
 10753  38B3  3420               	retlw	32	;' '
 10754  38B4  3459               	retlw	89	;'Y'
 10755  38B5  344F               	retlw	79	;'O'
 10756  38B6  3455               	retlw	85	;'U'
 10757  38B7  3452               	retlw	82	;'R'
 10758  38B8  3420               	retlw	32	;' '
 10759  38B9  3442               	retlw	66	;'B'
 10760  38BA  3441               	retlw	65	;'A'
 10761  38BB  3453               	retlw	83	;'S'
 10762  38BC  3445               	retlw	69	;'E'
 10763  38BD  3420               	retlw	32	;' '
 10764  38BE  3441               	retlw	65	;'A'
 10765  38BF  3452               	retlw	82	;'R'
 10766  38C0  3445               	retlw	69	;'E'
 10767  38C1  3420               	retlw	32	;' '
 10768  38C2  3442               	retlw	66	;'B'
 10769  38C3  3445               	retlw	69	;'E'
 10770  38C4  344C               	retlw	76	;'L'
 10771  38C5  344F               	retlw	79	;'O'
 10772  38C6  344E               	retlw	78	;'N'
 10773  38C7  3447               	retlw	71	;'G'
 10774  38C8  3420               	retlw	32	;' '
 10775  38C9  3454               	retlw	84	;'T'
 10776  38CA  344F               	retlw	79	;'O'
 10777  38CB  3420               	retlw	32	;' '
 10778  38CC  3455               	retlw	85	;'U'
 10779  38CD  3453               	retlw	83	;'S'
 10780  38CE  3420               	retlw	32	;' '
 10781  38CF  3420               	retlw	32	;' '
 10782  38D0  3420               	retlw	32	;' '
 10783  38D1  3420               	retlw	32	;' '
 10784  38D2  3420               	retlw	32	;' '
 10785  38D3  3400               	retlw	0
 10786                           
 10787                           	psect	stringtext8
 10788  38D4                     __pstringtext8:	
 10789  38D4                     STR_30:	
 10790  38D4  3449               	retlw	73	;'I'
 10791  38D5  3454               	retlw	84	;'T'
 10792  38D6  3453               	retlw	83	;'S'
 10793  38D7  3420               	retlw	32	;' '
 10794  38D8  3441               	retlw	65	;'A'
 10795  38D9  3420               	retlw	32	;' '
 10796  38DA  3455               	retlw	85	;'U'
 10797  38DB  344E               	retlw	78	;'N'
 10798  38DC  3449               	retlw	73	;'I'
 10799  38DD  3458               	retlw	88	;'X'
 10800  38DE  3420               	retlw	32	;' '
 10801  38DF  3453               	retlw	83	;'S'
 10802  38E0  3459               	retlw	89	;'Y'
 10803  38E1  3453               	retlw	83	;'S'
 10804  38E2  3454               	retlw	84	;'T'
 10805  38E3  3445               	retlw	69	;'E'
 10806  38E4  344D               	retlw	77	;'M'
 10807  38E5  3420               	retlw	32	;' '
 10808  38E6  3420               	retlw	32	;' '
 10809  38E7  3449               	retlw	73	;'I'
 10810  38E8  3420               	retlw	32	;' '
 10811  38E9  344B               	retlw	75	;'K'
 10812  38EA  344E               	retlw	78	;'N'
 10813  38EB  344F               	retlw	79	;'O'
 10814  38EC  3457               	retlw	87	;'W'
 10815  38ED  3420               	retlw	32	;' '
 10816  38EE  3454               	retlw	84	;'T'
 10817  38EF  3448               	retlw	72	;'H'
 10818  38F0  3449               	retlw	73	;'I'
 10819  38F1  3453               	retlw	83	;'S'
 10820  38F2  3421               	retlw	33	;'!'
 10821  38F3  3420               	retlw	32	;' '
 10822  38F4  3420               	retlw	32	;' '
 10823  38F5  3420               	retlw	32	;' '
 10824  38F6  3400               	retlw	0
 10825                           
 10826                           	psect	stringtext9
 10827  38F7                     __pstringtext9:	
 10828  38F7                     STR_32:	
 10829  38F7  3457               	retlw	87	;'W'
 10830  38F8  344F               	retlw	79	;'O'
 10831  38F9  3455               	retlw	85	;'U'
 10832  38FA  344C               	retlw	76	;'L'
 10833  38FB  3444               	retlw	68	;'D'
 10834  38FC  3420               	retlw	32	;' '
 10835  38FD  3459               	retlw	89	;'Y'
 10836  38FE  344F               	retlw	79	;'O'
 10837  38FF  3455               	retlw	85	;'U'
 10838  3900  3420               	retlw	32	;' '
 10839  3901  344C               	retlw	76	;'L'
 10840  3902  3449               	retlw	73	;'I'
 10841  3903  344B               	retlw	75	;'K'
 10842  3904  3445               	retlw	69	;'E'
 10843  3905  3420               	retlw	32	;' '
 10844  3906  3454               	retlw	84	;'T'
 10845  3907  344F               	retlw	79	;'O'
 10846  3908  3420               	retlw	32	;' '
 10847  3909  3450               	retlw	80	;'P'
 10848  390A  344C               	retlw	76	;'L'
 10849  390B  3441               	retlw	65	;'A'
 10850  390C  3459               	retlw	89	;'Y'
 10851  390D  3420               	retlw	32	;' '
 10852  390E  3441               	retlw	65	;'A'
 10853  390F  3420               	retlw	32	;' '
 10854  3910  3447               	retlw	71	;'G'
 10855  3911  3441               	retlw	65	;'A'
 10856  3912  344D               	retlw	77	;'M'
 10857  3913  3445               	retlw	69	;'E'
 10858  3914  343F               	retlw	63	;'?'
 10859  3915  3420               	retlw	32	;' '
 10860  3916  3420               	retlw	32	;' '
 10861  3917  3420               	retlw	32	;' '
 10862  3918  3400               	retlw	0
 10863                           
 10864                           	psect	stringtext10
 10865  3919                     __pstringtext10:	
 10866  3919                     STR_21:	
 10867  3919  3444               	retlw	68	;'D'
 10868  391A  344F               	retlw	79	;'O'
 10869  391B  3445               	retlw	69	;'E'
 10870  391C  3453               	retlw	83	;'S'
 10871  391D  3420               	retlw	32	;' '
 10872  391E  3444               	retlw	68	;'D'
 10873  391F  3445               	retlw	69	;'E'
 10874  3920  3456               	retlw	86	;'V'
 10875  3921  3441               	retlw	65	;'A'
 10876  3922  344E               	retlw	78	;'N'
 10877  3923  3420               	retlw	32	;' '
 10878  3924  3448               	retlw	72	;'H'
 10879  3925  3441               	retlw	65	;'A'
 10880  3926  3453               	retlw	83	;'S'
 10881  3927  3420               	retlw	32	;' '
 10882  3928  3448               	retlw	72	;'H'
 10883  3929  3449               	retlw	73	;'I'
 10884  392A  3453               	retlw	83	;'S'
 10885  392B  3420               	retlw	32	;' '
 10886  392C  3450               	retlw	80	;'P'
 10887  392D  3448               	retlw	72	;'H'
 10888  392E  344F               	retlw	79	;'O'
 10889  392F  344E               	retlw	78	;'N'
 10890  3930  3445               	retlw	69	;'E'
 10891  3931  343F               	retlw	63	;'?'
 10892  3932  3420               	retlw	32	;' '
 10893  3933  3420               	retlw	32	;' '
 10894  3934  3420               	retlw	32	;' '
 10895  3935  3420               	retlw	32	;' '
 10896  3936  3400               	retlw	0
 10897                           
 10898                           	psect	stringtext11
 10899  3937                     __pstringtext11:	
 10900  3937                     STR_27:	
 10901  3937  344E               	retlw	78	;'N'
 10902  3938  3443               	retlw	67	;'C'
 10903  3939  3420               	retlw	32	;' '
 10904  393A  342D               	retlw	45	;'-'
 10905  393B  3445               	retlw	69	;'E'
 10906  393C  3420               	retlw	32	;' '
 10907  393D  342F               	retlw	47	;'/'
 10908  393E  3442               	retlw	66	;'B'
 10909  393F  3449               	retlw	73	;'I'
 10910  3940  344E               	retlw	78	;'N'
 10911  3941  342F               	retlw	47	;'/'
 10912  3942  3442               	retlw	66	;'B'
 10913  3943  3441               	retlw	65	;'A'
 10914  3944  3453               	retlw	83	;'S'
 10915  3945  3448               	retlw	72	;'H'
 10916  3946  3420               	retlw	32	;' '
 10917  3947  342D               	retlw	45	;'-'
 10918  3948  344C               	retlw	76	;'L'
 10919  3949  3450               	retlw	80	;'P'
 10920  394A  3420               	retlw	32	;' '
 10921  394B  3431               	retlw	49	;'1'
 10922  394C  3433               	retlw	51	;'3'
 10923  394D  3433               	retlw	51	;'3'
 10924  394E  3437               	retlw	55	;'7'
 10925  394F  3420               	retlw	32	;' '
 10926  3950  3420               	retlw	32	;' '
 10927  3951  3420               	retlw	32	;' '
 10928  3952  3420               	retlw	32	;' '
 10929  3953  3400               	retlw	0
 10930                           
 10931                           	psect	stringtext12
 10932  3954                     __pstringtext12:	
 10933  3954                     STR_22:	
 10934  3954  3459               	retlw	89	;'Y'
 10935  3955  344F               	retlw	79	;'O'
 10936  3956  3455               	retlw	85	;'U'
 10937  3957  3420               	retlw	32	;' '
 10938  3958  344A               	retlw	74	;'J'
 10939  3959  3455               	retlw	85	;'U'
 10940  395A  3453               	retlw	83	;'S'
 10941  395B  3454               	retlw	84	;'T'
 10942  395C  3420               	retlw	32	;' '
 10943  395D  3448               	retlw	72	;'H'
 10944  395E  3441               	retlw	65	;'A'
 10945  395F  3456               	retlw	86	;'V'
 10946  3960  3445               	retlw	69	;'E'
 10947  3961  3420               	retlw	32	;' '
 10948  3962  3454               	retlw	84	;'T'
 10949  3963  344F               	retlw	79	;'O'
 10950  3964  3420               	retlw	32	;' '
 10951  3965  3442               	retlw	66	;'B'
 10952  3966  3445               	retlw	69	;'E'
 10953  3967  344C               	retlw	76	;'L'
 10954  3968  3449               	retlw	73	;'I'
 10955  3969  3445               	retlw	69	;'E'
 10956  396A  3456               	retlw	86	;'V'
 10957  396B  3445               	retlw	69	;'E'
 10958  396C  3420               	retlw	32	;' '
 10959  396D  3420               	retlw	32	;' '
 10960  396E  3420               	retlw	32	;' '
 10961  396F  3420               	retlw	32	;' '
 10962  3970  3400               	retlw	0
 10963                           
 10964                           	psect	stringtext13
 10965  3971                     __pstringtext13:	
 10966  3971                     STR_19:	
 10967  3971  3449               	retlw	73	;'I'
 10968  3972  3420               	retlw	32	;' '
 10969  3973  3443               	retlw	67	;'C'
 10970  3974  3441               	retlw	65	;'A'
 10971  3975  344E               	retlw	78	;'N'
 10972  3976  3420               	retlw	32	;' '
 10973  3977  3442               	retlw	66	;'B'
 10974  3978  3452               	retlw	82	;'R'
 10975  3979  3445               	retlw	69	;'E'
 10976  397A  3441               	retlw	65	;'A'
 10977  397B  344B               	retlw	75	;'K'
 10978  397C  3420               	retlw	32	;' '
 10979  397D  3454               	retlw	84	;'T'
 10980  397E  3448               	retlw	72	;'H'
 10981  397F  3441               	retlw	65	;'A'
 10982  3980  3454               	retlw	84	;'T'
 10983  3981  3420               	retlw	32	;' '
 10984  3982  3446               	retlw	70	;'F'
 10985  3983  344F               	retlw	79	;'O'
 10986  3984  3452               	retlw	82	;'R'
 10987  3985  3420               	retlw	32	;' '
 10988  3986  3459               	retlw	89	;'Y'
 10989  3987  344F               	retlw	79	;'O'
 10990  3988  3455               	retlw	85	;'U'
 10991  3989  3420               	retlw	32	;' '
 10992  398A  3420               	retlw	32	;' '
 10993  398B  3420               	retlw	32	;' '
 10994  398C  3400               	retlw	0
 10995                           
 10996                           	psect	stringtext14
 10997  398D                     __pstringtext14:	
 10998  398D                     STR_83:	
 10999  398D  3459               	retlw	89	;'Y'
 11000  398E  344F               	retlw	79	;'O'
 11001  398F  3455               	retlw	85	;'U'
 11002  3990  3420               	retlw	32	;' '
 11003  3991  3453               	retlw	83	;'S'
 11004  3992  3454               	retlw	84	;'T'
 11005  3993  3441               	retlw	65	;'A'
 11006  3994  3459               	retlw	89	;'Y'
 11007  3995  3420               	retlw	32	;' '
 11008  3996  3449               	retlw	73	;'I'
 11009  3997  344E               	retlw	78	;'N'
 11010  3998  3420               	retlw	32	;' '
 11011  3999  3457               	retlw	87	;'W'
 11012  399A  344F               	retlw	79	;'O'
 11013  399B  344E               	retlw	78	;'N'
 11014  399C  3444               	retlw	68	;'D'
 11015  399D  3445               	retlw	69	;'E'
 11016  399E  3452               	retlw	82	;'R'
 11017  399F  344C               	retlw	76	;'L'
 11018  39A0  3441               	retlw	65	;'A'
 11019  39A1  344E               	retlw	78	;'N'
 11020  39A2  3444               	retlw	68	;'D'
 11021  39A3  3420               	retlw	32	;' '
 11022  39A4  3420               	retlw	32	;' '
 11023  39A5  3420               	retlw	32	;' '
 11024  39A6  3420               	retlw	32	;' '
 11025  39A7  3400               	retlw	0
 11026                           
 11027                           	psect	stringtext15
 11028  39A8                     __pstringtext15:	
 11029  39A8                     STR_23:	
 11030  39A8  344E               	retlw	78	;'N'
 11031  39A9  344F               	retlw	79	;'O'
 11032  39AA  3454               	retlw	84	;'T'
 11033  39AB  3448               	retlw	72	;'H'
 11034  39AC  3449               	retlw	73	;'I'
 11035  39AD  344E               	retlw	78	;'N'
 11036  39AE  3447               	retlw	71	;'G'
 11037  39AF  3420               	retlw	32	;' '
 11038  39B0  3454               	retlw	84	;'T'
 11039  39B1  344F               	retlw	79	;'O'
 11040  39B2  3420               	retlw	32	;' '
 11041  39B3  3453               	retlw	83	;'S'
 11042  39B4  3445               	retlw	69	;'E'
 11043  39B5  3445               	retlw	69	;'E'
 11044  39B6  3420               	retlw	32	;' '
 11045  39B7  3448               	retlw	72	;'H'
 11046  39B8  3445               	retlw	69	;'E'
 11047  39B9  3452               	retlw	82	;'R'
 11048  39BA  3445               	retlw	69	;'E'
 11049  39BB  342E               	retlw	46	;'.'
 11050  39BC  342E               	retlw	46	;'.'
 11051  39BD  342E               	retlw	46	;'.'
 11052  39BE  3420               	retlw	32	;' '
 11053  39BF  3420               	retlw	32	;' '
 11054  39C0  3420               	retlw	32	;' '
 11055  39C1  3420               	retlw	32	;' '
 11056  39C2  3400               	retlw	0
 11057                           
 11058                           	psect	stringtext16
 11059  39C3                     __pstringtext16:	
 11060  39C3                     STR_17:	
 11061  39C3  3448               	retlw	72	;'H'
 11062  39C4  3454               	retlw	84	;'T'
 11063  39C5  3454               	retlw	84	;'T'
 11064  39C6  3450               	retlw	80	;'P'
 11065  39C7  3420               	retlw	32	;' '
 11066  39C8  3434               	retlw	52	;'4'
 11067  39C9  3431               	retlw	49	;'1'
 11068  39CA  3438               	retlw	56	;'8'
 11069  39CB  3420               	retlw	32	;' '
 11070  39CC  3449               	retlw	73	;'I'
 11071  39CD  3427               	retlw	39	;'''
 11072  39CE  344D               	retlw	77	;'M'
 11073  39CF  3420               	retlw	32	;' '
 11074  39D0  3441               	retlw	65	;'A'
 11075  39D1  3420               	retlw	32	;' '
 11076  39D2  3454               	retlw	84	;'T'
 11077  39D3  3445               	retlw	69	;'E'
 11078  39D4  3441               	retlw	65	;'A'
 11079  39D5  3450               	retlw	80	;'P'
 11080  39D6  344F               	retlw	79	;'O'
 11081  39D7  3454               	retlw	84	;'T'
 11082  39D8  3420               	retlw	32	;' '
 11083  39D9  3420               	retlw	32	;' '
 11084  39DA  3420               	retlw	32	;' '
 11085  39DB  3420               	retlw	32	;' '
 11086  39DC  3400               	retlw	0
 11087                           
 11088                           	psect	stringtext17
 11089  39DD                     __pstringtext17:	
 11090  39DD                     STR_84:	
 11091  39DD  3454               	retlw	84	;'T'
 11092  39DE  3448               	retlw	72	;'H'
 11093  39DF  3445               	retlw	69	;'E'
 11094  39E0  3420               	retlw	32	;' '
 11095  39E1  3443               	retlw	67	;'C'
 11096  39E2  3448               	retlw	72	;'H'
 11097  39E3  344F               	retlw	79	;'O'
 11098  39E4  3449               	retlw	73	;'I'
 11099  39E5  3443               	retlw	67	;'C'
 11100  39E6  3445               	retlw	69	;'E'
 11101  39E7  3420               	retlw	32	;' '
 11102  39E8  3449               	retlw	73	;'I'
 11103  39E9  3453               	retlw	83	;'S'
 11104  39EA  3420               	retlw	32	;' '
 11105  39EB  3459               	retlw	89	;'Y'
 11106  39EC  344F               	retlw	79	;'O'
 11107  39ED  3455               	retlw	85	;'U'
 11108  39EE  3452               	retlw	82	;'R'
 11109  39EF  3453               	retlw	83	;'S'
 11110  39F0  3420               	retlw	32	;' '
 11111  39F1  3420               	retlw	32	;' '
 11112  39F2  3420               	retlw	32	;' '
 11113  39F3  3400               	retlw	0
 11114                           
 11115                           	psect	stringtext18
 11116  39F4                     __pstringtext18:	
 11117  39F4                     STR_18:	
 11118  39F4  3449               	retlw	73	;'I'
 11119  39F5  3420               	retlw	32	;' '
 11120  39F6  3441               	retlw	65	;'A'
 11121  39F7  344D               	retlw	77	;'M'
 11122  39F8  3420               	retlw	32	;' '
 11123  39F9  344A               	retlw	74	;'J'
 11124  39FA  3455               	retlw	85	;'U'
 11125  39FB  3453               	retlw	83	;'S'
 11126  39FC  3454               	retlw	84	;'T'
 11127  39FD  3420               	retlw	32	;' '
 11128  39FE  3441               	retlw	65	;'A'
 11129  39FF  3420               	retlw	32	;' '
 11130  3A00  3442               	retlw	66	;'B'
 11131  3A01  3441               	retlw	65	;'A'
 11132  3A02  3444               	retlw	68	;'D'
 11133  3A03  3447               	retlw	71	;'G'
 11134  3A04  3445               	retlw	69	;'E'
 11135  3A05  3420               	retlw	32	;' '
 11136  3A06  3420               	retlw	32	;' '
 11137  3A07  3420               	retlw	32	;' '
 11138  3A08  3420               	retlw	32	;' '
 11139  3A09  3400               	retlw	0
 11140                           
 11141                           	psect	stringtext19
 11142  3A0A                     __pstringtext19:	
 11143  3A0A                     STR_16:	
 11144  3A0A  3457               	retlw	87	;'W'
 11145  3A0B  3449               	retlw	73	;'I'
 11146  3A0C  344C               	retlw	76	;'L'
 11147  3A0D  344C               	retlw	76	;'L'
 11148  3A0E  3420               	retlw	32	;' '
 11149  3A0F  3448               	retlw	72	;'H'
 11150  3A10  3441               	retlw	65	;'A'
 11151  3A11  3443               	retlw	67	;'C'
 11152  3A12  344B               	retlw	75	;'K'
 11153  3A13  3420               	retlw	32	;' '
 11154  3A14  3446               	retlw	70	;'F'
 11155  3A15  344F               	retlw	79	;'O'
 11156  3A16  3452               	retlw	82	;'R'
 11157  3A17  3420               	retlw	32	;' '
 11158  3A18  3441               	retlw	65	;'A'
 11159  3A19  342F               	retlw	47	;'/'
 11160  3A1A  3443               	retlw	67	;'C'
 11161  3A1B  3420               	retlw	32	;' '
 11162  3A1C  3420               	retlw	32	;' '
 11163  3A1D  3420               	retlw	32	;' '
 11164  3A1E  3400               	retlw	0
 11165                           
 11166                           	psect	stringtext20
 11167  3A1F                     __pstringtext20:	
 11168  3A1F                     STR_26:	
 11169  3A1F  3442               	retlw	66	;'B'
 11170  3A20  3445               	retlw	69	;'E'
 11171  3A21  344C               	retlw	76	;'L'
 11172  3A22  3449               	retlw	73	;'I'
 11173  3A23  3445               	retlw	69	;'E'
 11174  3A24  3456               	retlw	86	;'V'
 11175  3A25  3445               	retlw	69	;'E'
 11176  3A26  3420               	retlw	32	;' '
 11177  3A27  3454               	retlw	84	;'T'
 11178  3A28  3448               	retlw	72	;'H'
 11179  3A29  3445               	retlw	69	;'E'
 11180  3A2A  3420               	retlw	32	;' '
 11181  3A2B  344C               	retlw	76	;'L'
 11182  3A2C  3449               	retlw	73	;'I'
 11183  3A2D  3445               	retlw	69	;'E'
 11184  3A2E  3420               	retlw	32	;' '
 11185  3A2F  3420               	retlw	32	;' '
 11186  3A30  3420               	retlw	32	;' '
 11187  3A31  3400               	retlw	0
 11188                           
 11189                           	psect	stringtext21
 11190  3A32                     __pstringtext21:	
 11191  3A32                     STR_15:	
 11192  3A32  3448               	retlw	72	;'H'
 11193  3A33  3441               	retlw	65	;'A'
 11194  3A34  3443               	retlw	67	;'C'
 11195  3A35  344B               	retlw	75	;'K'
 11196  3A36  3420               	retlw	32	;' '
 11197  3A37  3454               	retlw	84	;'T'
 11198  3A38  3448               	retlw	72	;'H'
 11199  3A39  3445               	retlw	69	;'E'
 11200  3A3A  3420               	retlw	32	;' '
 11201  3A3B  3450               	retlw	80	;'P'
 11202  3A3C  344C               	retlw	76	;'L'
 11203  3A3D  3441               	retlw	65	;'A'
 11204  3A3E  344E               	retlw	78	;'N'
 11205  3A3F  3445               	retlw	69	;'E'
 11206  3A40  3454               	retlw	84	;'T'
 11207  3A41  3420               	retlw	32	;' '
 11208  3A42  3420               	retlw	32	;' '
 11209  3A43  3420               	retlw	32	;' '
 11210  3A44  3400               	retlw	0
 11211                           
 11212                           	psect	stringtext22
 11213  3A45                     __pstringtext22:	
 11214  3A45                     STR_10:	
 11215  3A45  3405               	retlw	5
 11216  3A46  3407               	retlw	7
 11217  3A47  3407               	retlw	7
 11218  3A48  3408               	retlw	8
 11219  3A49  342D               	retlw	45	;'-'
 11220  3A4A  342D               	retlw	45	;'-'
 11221  3A4B  3420               	retlw	32	;' '
 11222  3A4C  3420               	retlw	32	;' '
 11223  3A4D  342D               	retlw	45	;'-'
 11224  3A4E  342D               	retlw	45	;'-'
 11225  3A4F  3409               	retlw	9
 11226  3A50  3407               	retlw	7
 11227  3A51  3407               	retlw	7
 11228  3A52  3406               	retlw	6
 11229  3A53  3420               	retlw	32	;' '
 11230  3A54  340B               	retlw	11
 11231  3A55  3420               	retlw	32	;' '
 11232  3A56  3400               	retlw	0
 11233                           
 11234                           	psect	stringtext23
 11235  3A57                     __pstringtext23:	
 11236  3A57                     STR_25:	
 11237  3A57  3444               	retlw	68	;'D'
 11238  3A58  3445               	retlw	69	;'E'
 11239  3A59  344E               	retlw	78	;'N'
 11240  3A5A  3459               	retlw	89	;'Y'
 11241  3A5B  3420               	retlw	32	;' '
 11242  3A5C  3441               	retlw	65	;'A'
 11243  3A5D  344E               	retlw	78	;'N'
 11244  3A5E  3459               	retlw	89	;'Y'
 11245  3A5F  3420               	retlw	32	;' '
 11246  3A60  3441               	retlw	65	;'A'
 11247  3A61  344E               	retlw	78	;'N'
 11248  3A62  3459               	retlw	89	;'Y'
 11249  3A63  3420               	retlw	32	;' '
 11250  3A64  3420               	retlw	32	;' '
 11251  3A65  3420               	retlw	32	;' '
 11252  3A66  3420               	retlw	32	;' '
 11253  3A67  3400               	retlw	0
 11254                           
 11255                           	psect	stringtext24
 11256  3A68                     __pstringtext24:	
 11257  3A68                     STR_34:	
 11258  3A68  3442               	retlw	66	;'B'
 11259  3A69  3455               	retlw	85	;'U'
 11260  3A6A  3454               	retlw	84	;'T'
 11261  3A6B  3454               	retlw	84	;'T'
 11262  3A6C  3445               	retlw	69	;'E'
 11263  3A6D  3452               	retlw	82	;'R'
 11264  3A6E  3420               	retlw	32	;' '
 11265  3A6F  3445               	retlw	69	;'E'
 11266  3A70  344D               	retlw	77	;'M'
 11267  3A71  3441               	retlw	65	;'A'
 11268  3A72  3449               	retlw	73	;'I'
 11269  3A73  344C               	retlw	76	;'L'
 11270  3A74  3453               	retlw	83	;'S'
 11271  3A75  3420               	retlw	32	;' '
 11272  3A76  3420               	retlw	32	;' '
 11273  3A77  3420               	retlw	32	;' '
 11274  3A78  3400               	retlw	0
 11275                           
 11276                           	psect	stringtext25
 11277  3A79                     __pstringtext25:	
 11278  3A79                     STR_31:	
 11279  3A79  3454               	retlw	84	;'T'
 11280  3A7A  3452               	retlw	82	;'R'
 11281  3A7B  3455               	retlw	85	;'U'
 11282  3A7C  3453               	retlw	83	;'S'
 11283  3A7D  3454               	retlw	84	;'T'
 11284  3A7E  3420               	retlw	32	;' '
 11285  3A7F  344E               	retlw	78	;'N'
 11286  3A80  344F               	retlw	79	;'O'
 11287  3A81  3420               	retlw	32	;' '
 11288  3A82  344F               	retlw	79	;'O'
 11289  3A83  344E               	retlw	78	;'N'
 11290  3A84  3445               	retlw	69	;'E'
 11291  3A85  3420               	retlw	32	;' '
 11292  3A86  3420               	retlw	32	;' '
 11293  3A87  3420               	retlw	32	;' '
 11294  3A88  3400               	retlw	0
 11295                           
 11296                           	psect	stringtext26
 11297  3A89                     __pstringtext26:	
 11298  3A89                     STR_29:	
 11299  3A89  3448               	retlw	72	;'H'
 11300  3A8A  3449               	retlw	73	;'I'
 11301  3A8B  3453               	retlw	83	;'S'
 11302  3A8C  3454               	retlw	84	;'T'
 11303  3A8D  344F               	retlw	79	;'O'
 11304  3A8E  3452               	retlw	82	;'R'
 11305  3A8F  3459               	retlw	89	;'Y'
 11306  3A90  3420               	retlw	32	;' '
 11307  3A91  342D               	retlw	45	;'-'
 11308  3A92  3443               	retlw	67	;'C'
 11309  3A93  3457               	retlw	87	;'W'
 11310  3A94  3420               	retlw	32	;' '
 11311  3A95  3420               	retlw	32	;' '
 11312  3A96  3420               	retlw	32	;' '
 11313  3A97  3400               	retlw	0
 11314                           
 11315                           	psect	stringtext27
 11316  3A98                     __pstringtext27:	
 11317  3A98                     STR_64:	
 11318  3A98  3446               	retlw	70	;'F'
 11319  3A99  3449               	retlw	73	;'I'
 11320  3A9A  3452               	retlw	82	;'R'
 11321  3A9B  3445               	retlw	69	;'E'
 11322  3A9C  3420               	retlw	32	;' '
 11323  3A9D  3442               	retlw	66	;'B'
 11324  3A9E  3441               	retlw	65	;'A'
 11325  3A9F  344C               	retlw	76	;'L'
 11326  3AA0  344C               	retlw	76	;'L'
 11327  3AA1  3420               	retlw	32	;' '
 11328  3AA2  3420               	retlw	32	;' '
 11329  3AA3  3420               	retlw	32	;' '
 11330  3AA4  3400               	retlw	0
 11331                           
 11332                           	psect	stringtext28
 11333  3AA5                     __pstringtext28:	
 11334  3AA5                     STR_41:	
 11335  3AA5  3455               	retlw	85	;'U'
 11336  3AA6  344E               	retlw	78	;'N'
 11337  3AA7  344C               	retlw	76	;'L'
 11338  3AA8  344F               	retlw	79	;'O'
 11339  3AA9  3443               	retlw	67	;'C'
 11340  3AAA  344B               	retlw	75	;'K'
 11341  3AAB  3449               	retlw	73	;'I'
 11342  3AAC  344E               	retlw	78	;'N'
 11343  3AAD  3447               	retlw	71	;'G'
 11344  3AAE  342E               	retlw	46	;'.'
 11345  3AAF  342E               	retlw	46	;'.'
 11346  3AB0  342E               	retlw	46	;'.'
 11347  3AB1  3400               	retlw	0
 11348                           
 11349                           	psect	stringtext29
 11350  3AB2                     __pstringtext29:	
 11351  3AB2                     STR_36:	
 11352  3AB2  3442               	retlw	66	;'B'
 11353  3AB3  3441               	retlw	65	;'A'
 11354  3AB4  3442               	retlw	66	;'B'
 11355  3AB5  3441               	retlw	65	;'A'
 11356  3AB6  3420               	retlw	32	;' '
 11357  3AB7  3457               	retlw	87	;'W'
 11358  3AB8  3445               	retlw	69	;'E'
 11359  3AB9  3452               	retlw	82	;'R'
 11360  3ABA  344B               	retlw	75	;'K'
 11361  3ABB  3420               	retlw	32	;' '
 11362  3ABC  3420               	retlw	32	;' '
 11363  3ABD  3420               	retlw	32	;' '
 11364  3ABE  3400               	retlw	0
 11365                           
 11366                           	psect	stringtext30
 11367  3ABF                     __pstringtext30:	
 11368  3ABF                     STR_63:	
 11369  3ABF  3452               	retlw	82	;'R'
 11370  3AC0  3445               	retlw	69	;'E'
 11371  3AC1  3444               	retlw	68	;'D'
 11372  3AC2  3420               	retlw	32	;' '
 11373  3AC3  3442               	retlw	66	;'B'
 11374  3AC4  3455               	retlw	85	;'U'
 11375  3AC5  344C               	retlw	76	;'L'
 11376  3AC6  344C               	retlw	76	;'L'
 11377  3AC7  3420               	retlw	32	;' '
 11378  3AC8  3420               	retlw	32	;' '
 11379  3AC9  3420               	retlw	32	;' '
 11380  3ACA  3400               	retlw	0
 11381                           
 11382                           	psect	stringtext31
 11383  3ACB                     __pstringtext31:	
 11384  3ACB                     STR_28:	
 11385  3ACB  3452               	retlw	82	;'R'
 11386  3ACC  344D               	retlw	77	;'M'
 11387  3ACD  3420               	retlw	32	;' '
 11388  3ACE  342D               	retlw	45	;'-'
 11389  3ACF  3452               	retlw	82	;'R'
 11390  3AD0  3446               	retlw	70	;'F'
 11391  3AD1  3420               	retlw	32	;' '
 11392  3AD2  342F               	retlw	47	;'/'
 11393  3AD3  3420               	retlw	32	;' '
 11394  3AD4  3420               	retlw	32	;' '
 11395  3AD5  3420               	retlw	32	;' '
 11396  3AD6  3400               	retlw	0
 11397                           
 11398                           	psect	stringtext32
 11399  3AD7                     __pstringtext32:	
 11400  3AD7                     STR_61:	
 11401  3AD7  3454               	retlw	84	;'T'
 11402  3AD8  3445               	retlw	69	;'E'
 11403  3AD9  3451               	retlw	81	;'Q'
 11404  3ADA  3455               	retlw	85	;'U'
 11405  3ADB  3449               	retlw	73	;'I'
 11406  3ADC  344C               	retlw	76	;'L'
 11407  3ADD  3441               	retlw	65	;'A'
 11408  3ADE  3420               	retlw	32	;' '
 11409  3ADF  3420               	retlw	32	;' '
 11410  3AE0  3420               	retlw	32	;' '
 11411  3AE1  3400               	retlw	0
 11412                           
 11413                           	psect	stringtext33
 11414  3AE2                     __pstringtext33:	
 11415  3AE2                     STR_60:	
 11416  3AE2  3457               	retlw	87	;'W'
 11417  3AE3  3448               	retlw	72	;'H'
 11418  3AE4  3449               	retlw	73	;'I'
 11419  3AE5  3453               	retlw	83	;'S'
 11420  3AE6  344B               	retlw	75	;'K'
 11421  3AE7  3445               	retlw	69	;'E'
 11422  3AE8  3459               	retlw	89	;'Y'
 11423  3AE9  3420               	retlw	32	;' '
 11424  3AEA  3420               	retlw	32	;' '
 11425  3AEB  3420               	retlw	32	;' '
 11426  3AEC  3400               	retlw	0
 11427                           
 11428                           	psect	stringtext34
 11429  3AED                     __pstringtext34:	
 11430  3AED                     STR_77:	
 11431  3AED  3420               	retlw	32	;' '
 11432  3AEE  3420               	retlw	32	;' '
 11433  3AEF  3442               	retlw	66	;'B'
 11434  3AF0  3449               	retlw	73	;'I'
 11435  3AF1  3454               	retlw	84	;'T'
 11436  3AF2  3420               	retlw	32	;' '
 11437  3AF3  344E               	retlw	78	;'N'
 11438  3AF4  3420               	retlw	32	;' '
 11439  3AF5  3420               	retlw	32	;' '
 11440  3AF6  3400               	retlw	0
 11441                           
 11442                           	psect	stringtext35
 11443  3AF7                     __pstringtext35:	
 11444  3AF7                     STR_6:	
 11445  3AF7  3450               	retlw	80	;'P'
 11446  3AF8  3441               	retlw	65	;'A'
 11447  3AF9  3453               	retlw	83	;'S'
 11448  3AFA  3453               	retlw	83	;'S'
 11449  3AFB  3457               	retlw	87	;'W'
 11450  3AFC  344F               	retlw	79	;'O'
 11451  3AFD  3452               	retlw	82	;'R'
 11452  3AFE  3444               	retlw	68	;'D'
 11453  3AFF  3420               	retlw	32	;' '
 11454  3B00  3400               	retlw	0
 11455                           
 11456                           	psect	stringtext36
 11457  3B01                     __pstringtext36:	
 11458  3B01                     STR_74:	
 11459  3B01  3420               	retlw	32	;' '
 11460  3B02  3454               	retlw	84	;'T'
 11461  3B03  3448               	retlw	72	;'H'
 11462  3B04  3445               	retlw	69	;'E'
 11463  3B05  3420               	retlw	32	;' '
 11464  3B06  3457               	retlw	87	;'W'
 11465  3B07  3448               	retlw	72	;'H'
 11466  3B08  3420               	retlw	32	;' '
 11467  3B09  3400               	retlw	0
 11468                           
 11469                           	psect	stringtext37
 11470  3B0A                     __pstringtext37:	
 11471  3B0A                     STR_59:	
 11472  3B0A  3456               	retlw	86	;'V'
 11473  3B0B  344F               	retlw	79	;'O'
 11474  3B0C  3444               	retlw	68	;'D'
 11475  3B0D  344B               	retlw	75	;'K'
 11476  3B0E  3441               	retlw	65	;'A'
 11477  3B0F  3420               	retlw	32	;' '
 11478  3B10  3420               	retlw	32	;' '
 11479  3B11  3420               	retlw	32	;' '
 11480  3B12  3400               	retlw	0
 11481                           
 11482                           	psect	stringtext38
 11483  3B13                     __pstringtext38:	
 11484  3B13                     STR_65:	
 11485  3B13  3457               	retlw	87	;'W'
 11486  3B14  3441               	retlw	65	;'A'
 11487  3B15  3454               	retlw	84	;'T'
 11488  3B16  3445               	retlw	69	;'E'
 11489  3B17  3452               	retlw	82	;'R'
 11490  3B18  3420               	retlw	32	;' '
 11491  3B19  3420               	retlw	32	;' '
 11492  3B1A  3420               	retlw	32	;' '
 11493  3B1B  3400               	retlw	0
 11494                           
 11495                           	psect	stringtext39
 11496  3B1C                     __pstringtext39:	
 11497  3B1C                     STR_66:	
 11498  3B1C  3425               	retlw	37	;'%'
 11499  3B1D  3463               	retlw	99	;'c'
 11500  3B1E  3425               	retlw	37	;'%'
 11501  3B1F  3463               	retlw	99	;'c'
 11502  3B20  3425               	retlw	37	;'%'
 11503  3B21  3463               	retlw	99	;'c'
 11504  3B22  3425               	retlw	37	;'%'
 11505  3B23  3463               	retlw	99	;'c'
 11506  3B24  3400               	retlw	0
 11507                           
 11508                           	psect	stringtext40
 11509  3B25                     __pstringtext40:	
 11510  3B25                     STR_12:	
 11511  3B25  344E               	retlw	78	;'N'
 11512  3B26  3455               	retlw	85	;'U'
 11513  3B27  344C               	retlw	76	;'L'
 11514  3B28  344C               	retlw	76	;'L'
 11515  3B29  3449               	retlw	73	;'I'
 11516  3B2A  3446               	retlw	70	;'F'
 11517  3B2B  3459               	retlw	89	;'Y'
 11518  3B2C  3420               	retlw	32	;' '
 11519  3B2D  3400               	retlw	0
 11520                           
 11521                           	psect	stringtext41
 11522  3B2E                     __pstringtext41:	
 11523  3B2E                     STR_79:	
 11524  3B2E  3450               	retlw	80	;'P'
 11525  3B2F  344F               	retlw	79	;'O'
 11526  3B30  3454               	retlw	84	;'T'
 11527  3B31  3441               	retlw	65	;'A'
 11528  3B32  3454               	retlw	84	;'T'
 11529  3B33  3420               	retlw	32	;' '
 11530  3B34  3420               	retlw	32	;' '
 11531  3B35  3400               	retlw	0
 11532                           
 11533                           	psect	stringtext42
 11534  3B36                     __pstringtext42:	
 11535  3B36                     STR_81:	
 11536  3B36  3420               	retlw	32	;' '
 11537  3B37  3420               	retlw	32	;' '
 11538  3B38  3454               	retlw	84	;'T'
 11539  3B39  3445               	retlw	69	;'E'
 11540  3B3A  3459               	retlw	89	;'Y'
 11541  3B3B  3420               	retlw	32	;' '
 11542  3B3C  3420               	retlw	32	;' '
 11543  3B3D  3400               	retlw	0
 11544                           
 11545                           	psect	stringtext43
 11546  3B3E                     __pstringtext43:	
 11547  3B3E                     STR_62:	
 11548  3B3E  3443               	retlw	67	;'C'
 11549  3B3F  3448               	retlw	72	;'H'
 11550  3B40  3455               	retlw	85	;'U'
 11551  3B41  3447               	retlw	71	;'G'
 11552  3B42  3420               	retlw	32	;' '
 11553  3B43  3420               	retlw	32	;' '
 11554  3B44  3420               	retlw	32	;' '
 11555  3B45  3400               	retlw	0
 11556                           
 11557                           	psect	stringtext44
 11558  3B46                     __pstringtext44:	
 11559  3B46                     STR_58:	
 11560  3B46  3442               	retlw	66	;'B'
 11561  3B47  3445               	retlw	69	;'E'
 11562  3B48  3445               	retlw	69	;'E'
 11563  3B49  3452               	retlw	82	;'R'
 11564  3B4A  3420               	retlw	32	;' '
 11565  3B4B  3420               	retlw	32	;' '
 11566  3B4C  3420               	retlw	32	;' '
 11567  3B4D  3400               	retlw	0
 11568                           
 11569                           	psect	stringtext45
 11570  3B4E                     __pstringtext45:	
 11571  3B4E                     STR_57:	
 11572  3B4E  3453               	retlw	83	;'S'
 11573  3B4F  3448               	retlw	72	;'H'
 11574  3B50  344F               	retlw	79	;'O'
 11575  3B51  3454               	retlw	84	;'T'
 11576  3B52  3420               	retlw	32	;' '
 11577  3B53  3420               	retlw	32	;' '
 11578  3B54  3420               	retlw	32	;' '
 11579  3B55  3400               	retlw	0
 11580                           
 11581                           	psect	stringtext46
 11582  3B56                     __pstringtext46:	
 11583  3B56                     STR_13:	
 11584  3B56  3444               	retlw	68	;'D'
 11585  3B57  3445               	retlw	69	;'E'
 11586  3B58  3446               	retlw	70	;'F'
 11587  3B59  3443               	retlw	67	;'C'
 11588  3B5A  344F               	retlw	79	;'O'
 11589  3B5B  344E               	retlw	78	;'N'
 11590  3B5C  3420               	retlw	32	;' '
 11591  3B5D  3400               	retlw	0
 11592                           
 11593                           	psect	stringtext47
 11594  3B5E                     __pstringtext47:	
 11595  3B5E                     STR_7:	
 11596  3B5E  344D               	retlw	77	;'M'
 11597  3B5F  3441               	retlw	65	;'A'
 11598  3B60  3454               	retlw	84	;'T'
 11599  3B61  3452               	retlw	82	;'R'
 11600  3B62  3449               	retlw	73	;'I'
 11601  3B63  3458               	retlw	88	;'X'
 11602  3B64  3420               	retlw	32	;' '
 11603  3B65  3400               	retlw	0
 11604                           
 11605                           	psect	stringtext48
 11606  3B66                     __pstringtext48:	
 11607  3B66                     STR_85:	
 11608  3B66  3428               	retlw	40	;'('
 11609  3B67  346E               	retlw	110	;'n'
 11610  3B68  3475               	retlw	117	;'u'
 11611  3B69  346C               	retlw	108	;'l'
 11612  3B6A  346C               	retlw	108	;'l'
 11613  3B6B  3429               	retlw	41	;')'
 11614  3B6C  3400               	retlw	0
 11615                           
 11616                           	psect	stringtext49
 11617  3B6D                     __pstringtext49:	
 11618  3B6D                     STR_73:	
 11619  3B6D  344F               	retlw	79	;'O'
 11620  3B6E  3457               	retlw	87	;'W'
 11621  3B6F  3420               	retlw	32	;' '
 11622  3B70  3420               	retlw	32	;' '
 11623  3B71  3420               	retlw	32	;' '
 11624  3B72  3420               	retlw	32	;' '
 11625  3B73  3400               	retlw	0
 11626                           
 11627                           	psect	stringtext50
 11628  3B74                     __pstringtext50:	
 11629  3B74                     STR_75:	
 11630  3B74  3449               	retlw	73	;'I'
 11631  3B75  3454               	retlw	84	;'T'
 11632  3B76  3445               	retlw	69	;'E'
 11633  3B77  3420               	retlw	32	;' '
 11634  3B78  3420               	retlw	32	;' '
 11635  3B79  3420               	retlw	32	;' '
 11636  3B7A  3400               	retlw	0
 11637                           
 11638                           	psect	stringtext51
 11639  3B7B                     __pstringtext51:	
 11640  3B7B                     STR_80:	
 11641  3B7B  3420               	retlw	32	;' '
 11642  3B7C  3420               	retlw	32	;' '
 11643  3B7D  3445               	retlw	69	;'E'
 11644  3B7E  3457               	retlw	87	;'W'
 11645  3B7F  3420               	retlw	32	;' '
 11646  3B80  3420               	retlw	32	;' '
 11647  3B81  3400               	retlw	0
 11648                           
 11649                           	psect	stringtext52
 11650  3B82                     __pstringtext52:	
 11651  3B82                     STR_72:	
 11652  3B82  3420               	retlw	32	;' '
 11653  3B83  3420               	retlw	32	;' '
 11654  3B84  3446               	retlw	70	;'F'
 11655  3B85  344F               	retlw	79	;'O'
 11656  3B86  344C               	retlw	76	;'L'
 11657  3B87  344C               	retlw	76	;'L'
 11658  3B88  3400               	retlw	0
 11659                           
 11660                           	psect	stringtext53
 11661  3B89                     __pstringtext53:	
 11662  3B89                     STR_78:	
 11663  3B89  3445               	retlw	69	;'E'
 11664  3B8A  344F               	retlw	79	;'O'
 11665  3B8B  3420               	retlw	32	;' '
 11666  3B8C  3420               	retlw	32	;' '
 11667  3B8D  3420               	retlw	32	;' '
 11668  3B8E  3400               	retlw	0
 11669                           
 11670                           	psect	stringtext54
 11671  3B8F                     __pstringtext54:	
 11672  3B8F                     STR_14:	
 11673  3B8F  3448               	retlw	72	;'H'
 11674  3B90  3441               	retlw	65	;'A'
 11675  3B91  3458               	retlw	88	;'X'
 11676  3B92  3420               	retlw	32	;' '
 11677  3B93  3420               	retlw	32	;' '
 11678  3B94  3400               	retlw	0
 11679                           
 11680                           	psect	stringtext55
 11681  3B95                     __pstringtext55:	
 11682  3B95                     STR_8:	
 11683  3B95  3445               	retlw	69	;'E'
 11684  3B96  3458               	retlw	88	;'X'
 11685  3B97  3449               	retlw	73	;'I'
 11686  3B98  3454               	retlw	84	;'T'
 11687  3B99  3420               	retlw	32	;' '
 11688  3B9A  3400               	retlw	0
 11689                           
 11690                           	psect	stringtext56
 11691  3B9B                     __pstringtext56:	
 11692  3B9B                     STR_5:	
 11693  3B9B  3453               	retlw	83	;'S'
 11694  3B9C  344C               	retlw	76	;'L'
 11695  3B9D  344F               	retlw	79	;'O'
 11696  3B9E  3454               	retlw	84	;'T'
 11697  3B9F  3420               	retlw	32	;' '
 11698  3BA0  3400               	retlw	0
 11699                           
 11700                           	psect	stringtext57
 11701  3BA1                     __pstringtext57:	
 11702  3BA1                     STR_76:	
 11703  3BA1  3420               	retlw	32	;' '
 11704  3BA2  3452               	retlw	82	;'R'
 11705  3BA3  3441               	retlw	65	;'A'
 11706  3BA4  3442               	retlw	66	;'B'
 11707  3BA5  3400               	retlw	0
 11708                           
 11709                           	psect	stringtext58
 11710  3BA6                     __pstringtext58:	
 11711  3BA6                     STR_50:	
 11712  3BA6  3456               	retlw	86	;'V'
 11713  3BA7  3444               	retlw	68	;'D'
 11714  3BA8  344B               	retlw	75	;'K'
 11715  3BA9  3441               	retlw	65	;'A'
 11716  3BAA  3400               	retlw	0
 11717                           
 11718                           	psect	stringtext59
 11719  3BAB                     __pstringtext59:	
 11720  3BAB                     STR_52:	
 11721  3BAB  3454               	retlw	84	;'T'
 11722  3BAC  3451               	retlw	81	;'Q'
 11723  3BAD  344C               	retlw	76	;'L'
 11724  3BAE  3441               	retlw	65	;'A'
 11725  3BAF  3400               	retlw	0
 11726                           
 11727                           	psect	stringtext60
 11728  3BB0                     __pstringtext60:	
 11729  3BB0                     STR_55:	
 11730  3BB0  3446               	retlw	70	;'F'
 11731  3BB1  3449               	retlw	73	;'I'
 11732  3BB2  3452               	retlw	82	;'R'
 11733  3BB3  3445               	retlw	69	;'E'
 11734  3BB4  3400               	retlw	0
 11735                           
 11736                           	psect	stringtext61
 11737  3BB5                     __pstringtext61:	
 11738  3BB5                     STR_53:	
 11739  3BB5  3443               	retlw	67	;'C'
 11740  3BB6  3448               	retlw	72	;'H'
 11741  3BB7  3455               	retlw	85	;'U'
 11742  3BB8  3447               	retlw	71	;'G'
 11743  3BB9  3400               	retlw	0
 11744                           
 11745                           	psect	stringtext62
 11746  3BBA                     __pstringtext62:	
 11747  3BBA                     STR_54:	
 11748  3BBA  3452               	retlw	82	;'R'
 11749  3BBB  3445               	retlw	69	;'E'
 11750  3BBC  3442               	retlw	66	;'B'
 11751  3BBD  344C               	retlw	76	;'L'
 11752  3BBE  3400               	retlw	0
 11753                           
 11754                           	psect	stringtext63
 11755  3BBF                     __pstringtext63:	
 11756  3BBF                     STR_49:	
 11757  3BBF  3442               	retlw	66	;'B'
 11758  3BC0  3445               	retlw	69	;'E'
 11759  3BC1  3445               	retlw	69	;'E'
 11760  3BC2  3452               	retlw	82	;'R'
 11761  3BC3  3400               	retlw	0
 11762                           
 11763                           	psect	stringtext64
 11764  3BC4                     __pstringtext64:	
 11765  3BC4                     STR_56:	
 11766  3BC4  3457               	retlw	87	;'W'
 11767  3BC5  3441               	retlw	65	;'A'
 11768  3BC6  3454               	retlw	84	;'T'
 11769  3BC7  3452               	retlw	82	;'R'
 11770  3BC8  3400               	retlw	0
 11771                           
 11772                           	psect	stringtext65
 11773  3BC9                     __pstringtext65:	
 11774  3BC9                     STR_48:	
 11775  3BC9  3453               	retlw	83	;'S'
 11776  3BCA  3448               	retlw	72	;'H'
 11777  3BCB  344F               	retlw	79	;'O'
 11778  3BCC  3454               	retlw	84	;'T'
 11779  3BCD  3400               	retlw	0
 11780                           
 11781                           	psect	stringtext66
 11782  3BCE                     __pstringtext66:	
 11783  3BCE                     STR_51:	
 11784  3BCE  3457               	retlw	87	;'W'
 11785  3BCF  3453               	retlw	83	;'S'
 11786  3BD0  344B               	retlw	75	;'K'
 11787  3BD1  3459               	retlw	89	;'Y'
 11788  3BD2  3400               	retlw	0
 11789                           
 11790                           	psect	stringtext67
 11791  3BD3                     __pstringtext67:	
 11792  3BD3                     STR_46:	
 11793  3BD3  344E               	retlw	78	;'N'
 11794  3BD4  3420               	retlw	32	;' '
 11795  3BD5  3420               	retlw	32	;' '
 11796  3BD6  3420               	retlw	32	;' '
 11797  3BD7  3400               	retlw	0
 11798                           
 11799                           	psect	stringtext68
 11800  3BD8                     __pstringtext68:	
 11801  3BD8                     STR_45:	
 11802  3BD8  3420               	retlw	32	;' '
 11803  3BD9  3455               	retlw	85	;'U'
 11804  3BDA  3420               	retlw	32	;' '
 11805  3BDB  3420               	retlw	32	;' '
 11806  3BDC  3400               	retlw	0
 11807                           
 11808                           	psect	stringtext69
 11809  3BDD                     __pstringtext69:	
 11810  3BDD                     STR_44:	
 11811  3BDD  344C               	retlw	76	;'L'
 11812  3BDE  344F               	retlw	79	;'O'
 11813  3BDF  3443               	retlw	67	;'C'
 11814  3BE0  344B               	retlw	75	;'K'
 11815  3BE1  3400               	retlw	0
 11816                           
 11817                           	psect	stringtext70
 11818  3BE2                     __pstringtext70:	
 11819  3BE2                     STR_47:	
 11820  3BE2  3420               	retlw	32	;' '
 11821  3BE3  3420               	retlw	32	;' '
 11822  3BE4  344C               	retlw	76	;'L'
 11823  3BE5  344C               	retlw	76	;'L'
 11824  3BE6  3400               	retlw	0
 11825                           
 11826                           	psect	stringtext71
 11827  3BE7                     __pstringtext71:	
 11828  3BE7                     STR_43:	
 11829  3BE7  344F               	retlw	79	;'O'
 11830  3BE8  3450               	retlw	80	;'P'
 11831  3BE9  3445               	retlw	69	;'E'
 11832  3BEA  344E               	retlw	78	;'N'
 11833  3BEB  3400               	retlw	0
 11834                           
 11835                           	psect	stringtext72
 11836  3BEC                     __pstringtext72:	
 11837  3BEC                     STR_39:	
 11838  3BEC  3450               	retlw	80	;'P'
 11839  3BED  3445               	retlw	69	;'E'
 11840  3BEE  3457               	retlw	87	;'W'
 11841  3BEF  3420               	retlw	32	;' '
 11842  3BF0  3400               	retlw	0
 11843                           
 11844                           	psect	stringtext73
 11845  3BF1                     __pstringtext73:	
 11846  3BF1                     STR_9:	
 11847  3BF1  344E               	retlw	78	;'N'
 11848  3BF2  3455               	retlw	85	;'U'
 11849  3BF3  344C               	retlw	76	;'L'
 11850  3BF4  344C               	retlw	76	;'L'
 11851  3BF5  3400               	retlw	0
 11852                           
 11853                           	psect	stringtext74
 11854  3BF6                     __pstringtext74:	
 11855  3BF6                     STR_4:	
 11856  3BF6  344D               	retlw	77	;'M'
 11857  3BF7  3445               	retlw	69	;'E'
 11858  3BF8  344E               	retlw	78	;'N'
 11859  3BF9  3455               	retlw	85	;'U'
 11860  3BFA  3400               	retlw	0
 11861                           
 11862                           	psect	stringtext75
 11863  3BFB                     __pstringtext75:	
 11864  3BFB                     STR_2:	
 11865  3BFB  3444               	retlw	68	;'D'
 11866  3BFC  344F               	retlw	79	;'O'
 11867  3BFD  3457               	retlw	87	;'W'
 11868  3BFE  344E               	retlw	78	;'N'
 11869  3BFF  3400               	retlw	0
 11870                           
 11871                           	psect	stringtext76
 11872  3C00                     __pstringtext76:	
 11873  3C00                     STR_1:	
 11874  3C00  3420               	retlw	32	;' '
 11875  3C01  3420               	retlw	32	;' '
 11876  3C02  3455               	retlw	85	;'U'
 11877  3C03  3450               	retlw	80	;'P'
 11878  3C04  3400               	retlw	0
 11879                           
 11880                           	psect	stringtext77
 11881  3C05                     __pstringtext77:	
 11882  3C05                     STR_40:	
 11883  3C05  3425               	retlw	37	;'%'
 11884  3C06  3434               	retlw	52	;'4'
 11885  3C07  3464               	retlw	100	;'d'
 11886  3C08  3400               	retlw	0
 11887                           
 11888                           	psect	stringtext78
 11889  3C09                     __pstringtext78:	
 11890  3C09                     STR_71:	
 11891  3C09  3425               	retlw	37	;'%'
 11892  3C0A  3473               	retlw	115	;'s'
 11893  3C0B  3400               	retlw	0
 11894                           
 11895                           	psect	stringtext79
 11896  0000                     __pstringtext79:	
 11897  287D                     
 11898                           ; #config settings
 11899  0000                     
 11900                           	psect	cinit
 11901  0018                     start_initialization:	
 11902  0018                     __initialization:		;BIGRAM
 11903                           
 11904                           ; Initialize objects allocated to BIGRAM
 11905  0018  306B               	movlw	low __pidataBIGRAM
 11906  0019  0084               	movwf	4
 11907  001A  3098               	movlw	(high __pidataBIGRAM)| (0+128)
 11908  001B  0085               	movwf	5
 11909  001C  30F0               	movlw	low (0+9968)
 11910  001D  0086               	movwf	6
 11911  001E  3026               	movlw	high (0+9968)
 11912  001F  0087               	movwf	7
 11913  0020  3001               	movlw	1
 11914  0021  00FF               	movwf	btemp+1
 11915  0022  3000               	movlw	0
 11916  0023  31B2  2285  3180   	fcall	init_ram
 11917                           
 11918                           ; Initialize objects allocated to BANK1
 11919  0026  3000               	movlw	low __pidataBANK1
 11920  0027  0084               	movwf	4
 11921  0028  3090               	movlw	(high __pidataBANK1)| (0+128)
 11922  0029  0085               	movwf	5
 11923  002A  30C7               	movlw	low __pdataBANK1
 11924  002B  0086               	movwf	6
 11925  002C  3000               	movlw	high __pdataBANK1
 11926  002D  0087               	movwf	7
 11927  002E  3000               	movlw	0
 11928  002F  00FF               	movwf	btemp+1
 11929  0030  300F               	movlw	15
 11930  0031  31B2  2285  3180   	fcall	init_ram
 11931                           
 11932                           ; Initialize objects allocated to BANK2
 11933  0034  0022               	movlb	2	; select bank2
 11934  0035  3180  2002  3180   	fcall	__pidataBANK2	;fetch initializer
 11935  0038  00EB               	movwf	__pdataBANK2& (0+127)
 11936  0039  3180  2003  3180   	fcall	__pidataBANK2+1	;fetch initializer
 11937  003C  00EC               	movwf	(__pdataBANK2+1)& (0+127)
 11938                           
 11939                           ; Initialize objects allocated to BANK3
 11940  003D  30AB               	movlw	low __pidataBANK3
 11941  003E  0084               	movwf	4
 11942  003F  30B3               	movlw	(high __pidataBANK3)| (0+128)
 11943  0040  0085               	movwf	5
 11944  0041  30D1               	movlw	low __pdataBANK3
 11945  0042  0086               	movwf	6
 11946  0043  3001               	movlw	high __pdataBANK3
 11947  0044  0087               	movwf	7
 11948  0045  3000               	movlw	0
 11949  0046  00FF               	movwf	btemp+1
 11950  0047  3017               	movlw	23
 11951  0048  31B2  2285  3180   	fcall	init_ram
 11952                           
 11953                           ; Initialize objects allocated to BANK4
 11954  004B  3013               	movlw	low __pidataBANK4
 11955  004C  0084               	movwf	4
 11956  004D  30AA               	movlw	(high __pidataBANK4)| (0+128)
 11957  004E  0085               	movwf	5
 11958  004F  3020               	movlw	low __pdataBANK4
 11959  0050  0086               	movwf	6
 11960  0051  3002               	movlw	high __pdataBANK4
 11961  0052  0087               	movwf	7
 11962  0053  3000               	movlw	0
 11963  0054  00FF               	movwf	btemp+1
 11964  0055  3048               	movlw	72
 11965  0056  31B2  2285  3180   	fcall	init_ram
 11966                           
 11967                           ; Initialize objects allocated to BANK5
 11968  0059  30E4               	movlw	low __pidataBANK5
 11969  005A  0084               	movwf	4
 11970  005B  30B4               	movlw	(high __pidataBANK5)| (0+128)
 11971  005C  0085               	movwf	5
 11972  005D  30CA               	movlw	low __pdataBANK5
 11973  005E  0086               	movwf	6
 11974  005F  3002               	movlw	high __pdataBANK5
 11975  0060  0087               	movwf	7
 11976  0061  3000               	movlw	0
 11977  0062  00FF               	movwf	btemp+1
 11978  0063  3023               	movlw	35
 11979  0064  31B2  2285  3180   	fcall	init_ram
 11980                           
 11981                           ; Initialize objects allocated to BANK6
 11982  0067  305B               	movlw	low __pidataBANK6
 11983  0068  0084               	movwf	4
 11984  0069  30AA               	movlw	(high __pidataBANK6)| (0+128)
 11985  006A  0085               	movwf	5
 11986  006B  3020               	movlw	low __pdataBANK6
 11987  006C  0086               	movwf	6
 11988  006D  3003               	movlw	high __pdataBANK6
 11989  006E  0087               	movwf	7
 11990  006F  3000               	movlw	0
 11991  0070  00FF               	movwf	btemp+1
 11992  0071  3049               	movlw	73
 11993  0072  31B2  2285  3180   	fcall	init_ram
 11994                           
 11995                           ; Initialize objects allocated to BANK7
 11996  0075  30EE               	movlw	low __pidataBANK7
 11997  0076  0084               	movwf	4
 11998  0077  30AA               	movlw	(high __pidataBANK7)| (0+128)
 11999  0078  0085               	movwf	5
 12000  0079  30A0               	movlw	low __pdataBANK7
 12001  007A  0086               	movwf	6
 12002  007B  3003               	movlw	high __pdataBANK7
 12003  007C  0087               	movwf	7
 12004  007D  3000               	movlw	0
 12005  007E  00FF               	movwf	btemp+1
 12006  007F  304C               	movlw	76
 12007  0080  31B2  2285  3180   	fcall	init_ram
 12008                           
 12009                           ; Initialize objects allocated to BANK8
 12010  0083  30CC               	movlw	low __pidataBANK8
 12011  0084  0084               	movwf	4
 12012  0085  30B6               	movlw	(high __pidataBANK8)| (0+128)
 12013  0086  0085               	movwf	5
 12014  0087  3020               	movlw	low __pdataBANK8
 12015  0088  0086               	movwf	6
 12016  0089  3004               	movlw	high __pdataBANK8
 12017  008A  0087               	movwf	7
 12018  008B  3000               	movlw	0
 12019  008C  00FF               	movwf	btemp+1
 12020  008D  3038               	movlw	56
 12021  008E  31B2  2285  3180   	fcall	init_ram
 12022                           
 12023                           ; Initialize objects allocated to BANK10
 12024  0091  3094               	movlw	low __pidataBANK10
 12025  0092  0084               	movwf	4
 12026  0093  30B6               	movlw	(high __pidataBANK10)| (0+128)
 12027  0094  0085               	movwf	5
 12028  0095  3020               	movlw	low __pdataBANK10
 12029  0096  0086               	movwf	6
 12030  0097  3005               	movlw	high __pdataBANK10
 12031  0098  0087               	movwf	7
 12032  0099  3000               	movlw	0
 12033  009A  00FF               	movwf	btemp+1
 12034  009B  3038               	movlw	56
 12035  009C  31B2  2285  3180   	fcall	init_ram
 12036                           
 12037                           ; Clear objects allocated to COMMON
 12038  009F  01FC               	clrf	__pbssCOMMON& (0+127)
 12039                           
 12040                           ; Clear objects allocated to BANK1
 12041  00A0  30A0               	movlw	low __pbssBANK1
 12042  00A1  0084               	movwf	4
 12043  00A2  3000               	movlw	high __pbssBANK1
 12044  00A3  0085               	movwf	5
 12045  00A4  3027               	movlw	39
 12046  00A5  00FE               	movwf	btemp
 12047  00A6  3000               	movlw	0
 12048  00A7  00FF               	movwf	btemp+1
 12049  00A8  31B2  2279  3180   	fcall	clear_ram0
 12050                           
 12051                           ; Clear objects allocated to BANK2
 12052  00AB  3020               	movlw	low __pbssBANK2
 12053  00AC  0084               	movwf	4
 12054  00AD  3001               	movlw	high __pbssBANK2
 12055  00AE  0085               	movwf	5
 12056  00AF  304B               	movlw	75
 12057  00B0  00FE               	movwf	btemp
 12058  00B1  3000               	movlw	0
 12059  00B2  00FF               	movwf	btemp+1
 12060  00B3  31B2  2279  3180   	fcall	clear_ram0
 12061                           
 12062                           ; Clear objects allocated to BANK3
 12063  00B6  30A0               	movlw	low __pbssBANK3
 12064  00B7  0084               	movwf	4
 12065  00B8  3001               	movlw	high __pbssBANK3
 12066  00B9  0085               	movwf	5
 12067  00BA  3031               	movlw	49
 12068  00BB  00FE               	movwf	btemp
 12069  00BC  3000               	movlw	0
 12070  00BD  00FF               	movwf	btemp+1
 12071  00BE  31B2  2279  3180   	fcall	clear_ram0
 12072                           
 12073                           ; Clear objects allocated to BANK5
 12074  00C1  30A0               	movlw	low __pbssBANK5
 12075  00C2  0084               	movwf	4
 12076  00C3  3002               	movlw	high __pbssBANK5
 12077  00C4  0085               	movwf	5
 12078  00C5  302A               	movlw	42
 12079  00C6  00FE               	movwf	btemp
 12080  00C7  3000               	movlw	0
 12081  00C8  00FF               	movwf	btemp+1
 12082  00C9  31B2  2279  3180   	fcall	clear_ram0
 12083                           
 12084                           ; Clear objects allocated to BANK9
 12085  00CC  30A0               	movlw	low __pbssBANK9
 12086  00CD  0084               	movwf	4
 12087  00CE  3004               	movlw	high __pbssBANK9
 12088  00CF  0085               	movwf	5
 12089  00D0  303D               	movlw	61
 12090  00D1  00FE               	movwf	btemp
 12091  00D2  3000               	movlw	0
 12092  00D3  00FF               	movwf	btemp+1
 12093  00D4  31B2  2279  3180   	fcall	clear_ram0
 12094                           
 12095                           ; Clear objects allocated to BANK11
 12096  00D7  30A0               	movlw	low __pbssBANK11
 12097  00D8  0084               	movwf	4
 12098  00D9  3005               	movlw	high __pbssBANK11
 12099  00DA  0085               	movwf	5
 12100  00DB  3028               	movlw	40
 12101  00DC  00FE               	movwf	btemp
 12102  00DD  3000               	movlw	0
 12103  00DE  00FF               	movwf	btemp+1
 12104  00DF  31B2  2279         	fcall	clear_ram0
 12105  00E1                     end_of_initialization:	
 12106                           ;End of C runtime variable initialization code
 12107                           
 12108  00E1                     __end_of__initialization:	
 12109  00E1  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
 12110  00E2  0020               	movlb	0
 12111  00E3  3186  2E61         	ljmp	_main	;jump to C main() function
 12112                           
 12113                           	psect	bssCOMMON
 12114  007C                     __pbssCOMMON:	
 12115  007C                     _Shot_Index:	
 12116  007C                     	ds	1
 12117                           
 12118                           	psect	bssBANK1
 12119  00A0                     __pbssBANK1:	
 12120  00A0                     _matrix_leds_idx:	
 12121  00A0                     	ds	2
 12122  00A2                     _locked_leds:	
 12123  00A2                     	ds	2
 12124  00A4                     _locked_locking_leds_idx:	
 12125  00A4                     	ds	2
 12126  00A6                     _flashy_option_size:	
 12127  00A6                     	ds	2
 12128  00A8                     _flashy_option_idx:	
 12129  00A8                     	ds	2
 12130  00AA                     _deaths:	
 12131  00AA                     	ds	2
 12132  00AC                     _flashy_scroll_rate:	
 12133  00AC                     	ds	2
 12134  00AE                     _flashy_sparkle_rate:	
 12135  00AE                     	ds	2
 12136  00B0                     _flashy_leds_state_track:	
 12137  00B0                     	ds	2
 12138  00B2                     _flashy_leds_idx:	
 12139  00B2                     	ds	2
 12140  00B4                     _menu_option_size:	
 12141  00B4                     	ds	2
 12142  00B6                     _menu_option_idx:	
 12143  00B6                     	ds	2
 12144  00B8                     _oddeven:	
 12145  00B8                     	ds	2
 12146  00BA                     _currentTask:	
 12147  00BA                     	ds	2
 12148  00BC                     _slot_taskData:	
 12149  00BC                     	ds	2
 12150  00BE                     _TMR0_InterruptHandler:	
 12151  00BE                     	ds	2
 12152  00C0                     _timer0ReloadVal16bit:	
 12153  00C0                     	ds	2
 12154  00C2                     _matrix_found:	
 12155  00C2                     	ds	1
 12156  00C3                     _pw_found:	
 12157  00C3                     	ds	1
 12158  00C4                     _badge_locked:	
 12159  00C4                     	ds	1
 12160  00C5                     _secret_value:	
 12161  00C5                     	ds	2
 12162                           
 12163                           	psect	dataBANK1
 12164  00C7                     __pdataBANK1:	
 12165  00C7                     marquee_speedy@F14093:	
 12166  00C7                     	ds	5
 12167  00CC                     _randx:	
 12168  00CC                     	ds	4
 12169  00D0                     _Leds_idx:	
 12170  00D0                     	ds	2
 12171  00D2                     _locked_lock_base_leds:	
 12172  00D2                     	ds	2
 12173  00D4                     _FLASHY_TEXT_SECRET_TEST:	
 12174  00D4                     	ds	2
 12175                           
 12176                           	psect	bssBANK2
 12177  0120                     __pbssBANK2:	
 12178  0120                     _matrix_option_size:	
 12179  0120                     	ds	2
 12180  0122                     _matrix_option_idx:	
 12181  0122                     	ds	2
 12182  0124                     _TMR4_InterruptHandler:	
 12183  0124                     	ds	2
 12184  0126                     _TMR2_InterruptHandler:	
 12185  0126                     	ds	2
 12186  0128                     _secret_task:	
 12187  0128                     	ds	13
 12188  0135                     _locked_task:	
 12189  0135                     	ds	13
 12190  0142                     _slot_task:	
 12191  0142                     	ds	13
 12192  014F                     _menu_task:	
 12193  014F                     	ds	13
 12194  015C                     _flashy_task:	
 12195  015C                     	ds	13
 12196  0169                     _locked_secret_value:	
 12197  0169                     	ds	2
 12198                           
 12199                           	psect	dataBANK2
 12200  016B                     __pdataBANK2:	
 12201  016B                     _FLASHY_TEXT:	
 12202  016B                     	ds	2
 12203                           
 12204                           	psect	bssBANK3
 12205  01A0                     __pbssBANK3:	
 12206  01A0                     _schedulerInst:	
 12207  01A0                     	ds	18
 12208  01B2                     _badge_inst:	
 12209  01B2                     	ds	18
 12210  01C4                     _matrix_task:	
 12211  01C4                     	ds	13
 12212                           
 12213                           	psect	dataBANK3
 12214  01D1                     __pdataBANK3:	
 12215  01D1                     _Shot_Options:	
 12216  01D1                     	ds	18
 12217  01E3                     marquee@F14102:	
 12218  01E3                     	ds	5
 12219                           
 12220                           	psect	dataBANK4
 12221  0220                     __pdataBANK4:	
 12222  0220                     _locked_locking_leds:	
 12223  0220                     	ds	12
 12224  022C                     _menu_option:	
 12225  022C                     	ds	10
 12226  0236                     _secret_inputs:	
 12227  0236                     	ds	25
 12228  024F                     _locked_secret_inputs:	
 12229  024F                     	ds	25
 12230                           
 12231                           	psect	bssBANK5
 12232  02A0                     __pbssBANK5:	
 12233  02A0                     _secret_TaskData:	
 12234  02A0                     	ds	14
 12235  02AE                     _locked_TaskData:	
 12236  02AE                     	ds	14
 12237  02BC                     _menu_TaskData:	
 12238  02BC                     	ds	14
 12239                           
 12240                           	psect	dataBANK5
 12241  02CA                     __pdataBANK5:	
 12242  02CA                     _menu_options_leds:	
 12243  02CA                     	ds	10
 12244  02D4                     _matrix_secret_inputs:	
 12245  02D4                     	ds	25
 12246                           
 12247                           	psect	dataBANK6
 12248  0320                     __pdataBANK6:	
 12249  0320                     _Shot_Options_Long:	
 12250  0320                     	ds	18
 12251  0332                     _Slot_Wheel:	
 12252  0332                     	ds	55
 12253                           
 12254                           	psect	dataBANK7
 12255  03A0                     __pdataBANK7:	
 12256  03A0                     _roundabout_leds_inverse:	
 12257  03A0                     	ds	28
 12258  03BC                     _roundabout_leds:	
 12259  03BC                     	ds	28
 12260  03D8                     _matrix_option:	
 12261  03D8                     	ds	20
 12262                           
 12263                           	psect	dataBANK8
 12264  0420                     __pdataBANK8:	
 12265  0420                     _curtain_leds_inverse:	
 12266  0420                     	ds	28
 12267  043C                     _curtain_leds:	
 12268  043C                     	ds	28
 12269                           
 12270                           	psect	bssBANK9
 12271  04A0                     __pbssBANK9:	
 12272  04A0                     _matrix_TaskData:	
 12273  04A0                     	ds	31
 12274  04BF                     _flashy_TaskData:	
 12275  04BF                     	ds	30
 12276                           
 12277                           	psect	dataBANK10
 12278  0520                     __pdataBANK10:	
 12279  0520                     _flashy_option:	
 12280  0520                     	ds	56
 12281                           
 12282                           	psect	bssBANK11
 12283  05A0                     __pbssBANK11:	
 12284  05A0                     _slot_TaskData:	
 12285  05A0                     	ds	40
 12286                           
 12287                           	psect	inittext
 12288  3285                     init_ram:	
 12289  3285  00FE               	movwf	126
 12290  3286                     initloop:	
 12291  3286  0012               	moviw fsr0++
 12292  3287  001E               	movwi fsr1++
 12293  3288  3001               	movlw	1
 12294  3289  02FE               	subwf	126,f
 12295  328A  3000               	movlw	0
 12296  328B  3BFF               	subwfb	127,f
 12297  328C  087F               	movf	127,w
 12298  328D  047E               	iorwf	126,w
 12299  328E  1903               	btfsc	3,2
 12300  328F  3400               	retlw	0
 12301  3290  2A86               	goto	initloop
 12302                           
 12303                           	psect	clrtext
 12304  3279                     clear_ram0:	
 12305                           ;	Called with FSR0 containing the base address, and
 12306                           ;	btemp/btemp+1 has the size to clear
 12307                           
 12308  3279  0064               	clrwdt	;clear the watchdog before getting into this loop
 12309  327A                     clrloop0:	
 12310  327A  0180               	clrf	0	;clear RAM location pointed to by FSR
 12311  327B  3101               	addfsr 0,1
 12312  327C  3001               	movlw	1
 12313  327D  02FE               	subwf	126,f
 12314  327E  3000               	movlw	0
 12315  327F  3BFF               	subwfb	127,f
 12316  3280  087F               	movf	127,w
 12317  3281  047E               	iorwf	126,w
 12318  3282  1903               	btfsc	3,2
 12319  3283  3400               	retlw	0	;all done for this memory range, return
 12320  3284  2A7A               	goto	clrloop0	;have we reached the end yet?
 12321                           
 12322                           	psect	cstackBANK1
 12323  00D6                     __pcstackBANK1:	
 12324  00D6                     schedulerExecute@currentSystemTick:	
 12325                           
 12326                           ; 2 bytes @ 0x0
 12327  00D6                     	ds	2
 12328  00D8                     schedulerExecute@taskLastSystemTick:	
 12329                           
 12330                           ; 2 bytes @ 0x2
 12331  00D8                     	ds	2
 12332  00DA                     schedulerExecute@tickDelta:	
 12333                           
 12334                           ; 2 bytes @ 0x4
 12335  00DA                     	ds	2
 12336  00DC                     schedulerExecute@scheduler:	
 12337                           
 12338                           ; 1 bytes @ 0x6
 12339  00DC                     	ds	1
 12340  00DD                     schedulerExecute@k:	
 12341                           
 12342                           ; 1 bytes @ 0x7
 12343  00DD                     	ds	1
 12344                           
 12345                           	psect	cstackCOMMON
 12346  0070                     __pcstackCOMMON:	
 12347  0070                     ?_isdigit:	
 12348  0070                     ?_TMR2_StartTimer:	
 12349                           ; 1 bit 
 12350                           
 12351  0070                     ?_TMR4_StartTimer:	
 12352                           ; 1 bytes @ 0x0
 12353                           
 12354  0070                     ?_PIN_MANAGER_Initialize:	
 12355                           ; 1 bytes @ 0x0
 12356                           
 12357  0070                     ?_OSCILLATOR_Initialize:	
 12358                           ; 1 bytes @ 0x0
 12359                           
 12360  0070                     ?_WDT_Initialize:	
 12361                           ; 1 bytes @ 0x0
 12362                           
 12363  0070                     ?_PWM2_Initialize:	
 12364                           ; 1 bytes @ 0x0
 12365                           
 12366  0070                     ?_TMR0_Initialize:	
 12367                           ; 1 bytes @ 0x0
 12368                           
 12369  0070                     ?_TMR0_DefaultInterruptHandler:	
 12370                           ; 1 bytes @ 0x0
 12371                           
 12372  0070                     ??_TMR0_DefaultInterruptHandler:	
 12373                           ; 1 bytes @ 0x0
 12374                           
 12375  0070                     ?_TMR0_StartTimer:	
 12376                           ; 1 bytes @ 0x0
 12377                           
 12378  0070                     ?_TMR0_CallBack:	
 12379                           ; 1 bytes @ 0x0
 12380                           
 12381  0070                     ??_TMR0_CallBack:	
 12382                           ; 1 bytes @ 0x0
 12383                           
 12384  0070                     ?_nullifyBadge_segDisplayRegister:	
 12385                           ; 1 bytes @ 0x0
 12386                           
 12387  0070                     ?_nullifyBadge_segDisplayErase:	
 12388                           ; 1 bytes @ 0x0
 12389                           
 12390  0070                     ?_nullifyBadge_segDisplayForceUpdate:	
 12391                           ; 1 bytes @ 0x0
 12392                           
 12393  0070                     ?_nullifyBadge_platformInit:	
 12394                           ; 1 bytes @ 0x0
 12395                           
 12396  0070                     ?_displayL2_Initialize:	
 12397                           ; 1 bytes @ 0x0
 12398                           
 12399  0070                     ?_displayL2_ForceUpdate:	
 12400                           ; 1 bytes @ 0x0
 12401                           
 12402  0070                     ?_displayL2_EraseSegDisplay:	
 12403                           ; 1 bytes @ 0x0
 12404                           
 12405  0070                     ?_displayL2_ClrUserLeds:	
 12406                           ; 1 bytes @ 0x0
 12407                           
 12408  0070                     ?_displayL1_Update:	
 12409                           ; 1 bytes @ 0x0
 12410                           
 12411  0070                     ?_SPI1_Initialize:	
 12412                           ; 1 bytes @ 0x0
 12413                           
 12414  0070                     ?_SPI1_Exchange8bit:	
 12415                           ; 1 bytes @ 0x0
 12416                           
 12417  0070                     ?_PWM5_Initialize:	
 12418                           ; 1 bytes @ 0x0
 12419                           
 12420  0070                     ?_PWM6_Initialize:	
 12421                           ; 1 bytes @ 0x0
 12422                           
 12423  0070                     ?_PWM1_Initialize:	
 12424                           ; 1 bytes @ 0x0
 12425                           
 12426  0070                     ?_TMR2_Initialize:	
 12427                           ; 1 bytes @ 0x0
 12428                           
 12429  0070                     ?_TMR4_Initialize:	
 12430                           ; 1 bytes @ 0x0
 12431                           
 12432  0070                     ?_SYSTEM_Initialize:	
 12433                           ; 1 bytes @ 0x0
 12434                           
 12435  0070                     ?_TMR0_ISR:	
 12436                           ; 1 bytes @ 0x0
 12437                           
 12438  0070                     ??_TMR0_ISR:	
 12439                           ; 1 bytes @ 0x0
 12440                           
 12441  0070                     ?_INTERRUPT_InterruptManager:	
 12442                           ; 1 bytes @ 0x0
 12443                           
 12444  0070                     ??_INTERRUPT_InterruptManager:	
 12445                           ; 1 bytes @ 0x0
 12446                           
 12447  0070                     ?_scheduler_TaskRun:	
 12448                           ; 1 bytes @ 0x0
 12449                           
 12450  0070                     ?_scheduler_Init:	
 12451                           ; 1 bytes @ 0x0
 12452                           
 12453  0070                     ?_scheduler_TaskInit:	
 12454                           ; 1 bytes @ 0x0
 12455                           
 12456  0070                     ?_schedulerExecute:	
 12457                           ; 1 bytes @ 0x0
 12458                           
 12459  0070                     ?_led_rand:	
 12460                           ; 1 bytes @ 0x0
 12461                           
 12462  0070                     ?_main:	
 12463                           ; 1 bytes @ 0x0
 12464                           
 12465  0070                     ?_nullifyBadge_userLedsRegister:	
 12466                           ; 1 bytes @ 0x0
 12467                           
 12468  0070                     ?_nullifyBadge_userLedsClr:	
 12469                           ; 1 bytes @ 0x0
 12470                           
 12471  0070                     ?_nullifyBadge_buttonsGet:	
 12472                           ; 1 bytes @ 0x0
 12473                           
 12474  0070                     ?_nullifyBadge_irGet:	
 12475                           ; 1 bytes @ 0x0
 12476                           
 12477  0070                     ?_nullifyBadge_irTxRegister:	
 12478                           ; 1 bytes @ 0x0
 12479                           
 12480  0070                     ?_nullifyBadge_irTxRelease:	
 12481                           ; 1 bytes @ 0x0
 12482                           
 12483  0070                     ?_nullifyBadge_irTxSet:	
 12484                           ; 1 bytes @ 0x0
 12485                           
 12486  0070                     ?_nullifyBadge_irTxClr:	
 12487                           ; 1 bytes @ 0x0
 12488                           
 12489  0070                     ?_displayL1_Initialize:	
 12490                           ; 1 bytes @ 0x0
 12491                           
 12492  0070                     ?_locked_lock_leds:	
 12493                           ; 1 bytes @ 0x0
 12494                           
 12495  0070                     ?_locked_unlock_leds:	
 12496                           ; 2 bytes @ 0x0
 12497                           
 12498                           
 12499                           ; 2 bytes @ 0x0
 12500  0070                     	ds	1
 12501  0071                     ??_TMR2_StartTimer:	
 12502  0071                     ??_TMR4_StartTimer:	
 12503                           ; 1 bytes @ 0x1
 12504                           
 12505  0071                     ??_PIN_MANAGER_Initialize:	
 12506                           ; 1 bytes @ 0x1
 12507                           
 12508  0071                     ??_OSCILLATOR_Initialize:	
 12509                           ; 1 bytes @ 0x1
 12510                           
 12511  0071                     ??_WDT_Initialize:	
 12512                           ; 1 bytes @ 0x1
 12513                           
 12514  0071                     ??_PWM2_Initialize:	
 12515                           ; 1 bytes @ 0x1
 12516                           
 12517  0071                     ?_TMR0_SetInterruptHandler:	
 12518                           ; 1 bytes @ 0x1
 12519                           
 12520  0071                     ??_TMR0_StartTimer:	
 12521                           ; 1 bytes @ 0x1
 12522                           
 12523  0071                     ??_nullifyBadge_segDisplayRegister:	
 12524                           ; 1 bytes @ 0x1
 12525                           
 12526  0071                     ?_secret_clear:	
 12527                           ; 1 bytes @ 0x1
 12528                           
 12529  0071                     ??_isdigit:	
 12530                           ; 1 bytes @ 0x1
 12531                           
 12532  0071                     ??_SPI1_Initialize:	
 12533                           ; 1 bytes @ 0x1
 12534                           
 12535  0071                     ??_SPI1_Exchange8bit:	
 12536                           ; 1 bytes @ 0x1
 12537                           
 12538  0071                     ??_PWM5_Initialize:	
 12539                           ; 1 bytes @ 0x1
 12540                           
 12541  0071                     ?_PWM5_LoadDutyValue:	
 12542                           ; 1 bytes @ 0x1
 12543                           
 12544  0071                     ??_PWM6_Initialize:	
 12545                           ; 1 bytes @ 0x1
 12546                           
 12547  0071                     ?_PWM6_LoadDutyValue:	
 12548                           ; 1 bytes @ 0x1
 12549                           
 12550  0071                     ??_PWM1_Initialize:	
 12551                           ; 1 bytes @ 0x1
 12552                           
 12553  0071                     ?_PWM1_LoadDutyValue:	
 12554                           ; 1 bytes @ 0x1
 12555                           
 12556  0071                     ??_TMR2_Initialize:	
 12557                           ; 1 bytes @ 0x1
 12558                           
 12559  0071                     ??_TMR4_Initialize:	
 12560                           ; 1 bytes @ 0x1
 12561                           
 12562  0071                     ?_PWM2_LoadDutyValue:	
 12563                           ; 1 bytes @ 0x1
 12564                           
 12565  0071                     ??_scheduler_Init:	
 12566                           ; 1 bytes @ 0x1
 12567                           
 12568  0071                     ??_scheduler_TaskInit:	
 12569                           ; 1 bytes @ 0x1
 12570                           
 12571  0071                     ??_nullifyBadge_userLedsRegister:	
 12572                           ; 1 bytes @ 0x1
 12573                           
 12574  0071                     ??_nullifyBadge_buttonsGet:	
 12575                           ; 1 bytes @ 0x1
 12576                           
 12577  0071                     ??_nullifyBadge_irGet:	
 12578                           ; 1 bytes @ 0x1
 12579                           
 12580  0071                     ??_nullifyBadge_irTxRegister:	
 12581                           ; 1 bytes @ 0x1
 12582                           
 12583  0071                     ??_nullifyBadge_irTxRelease:	
 12584                           ; 1 bytes @ 0x1
 12585                           
 12586  0071                     ??_nullifyBadge_irTxSet:	
 12587                           ; 1 bytes @ 0x1
 12588                           
 12589  0071                     ??_nullifyBadge_irTxClr:	
 12590                           ; 1 bytes @ 0x1
 12591                           
 12592  0071                     ?_displayL1_SetUserLed:	
 12593                           ; 1 bytes @ 0x1
 12594                           
 12595  0071                     ??_locked_lock_leds:	
 12596                           ; 1 bytes @ 0x1
 12597                           
 12598  0071                     ??_locked_unlock_leds:	
 12599                           ; 1 bytes @ 0x1
 12600                           
 12601  0071                     ?___bmul:	
 12602                           ; 1 bytes @ 0x1
 12603                           
 12604  0071                     ?_strlen:	
 12605                           ; 1 bytes @ 0x1
 12606                           
 12607  0071                     ?_memset:	
 12608                           ; 2 bytes @ 0x1
 12609                           
 12610  0071                     ?_displayCharReverse:	
 12611                           ; 2 bytes @ 0x1
 12612                           
 12613  0071                     ?_TMR0_Read16bitTimer:	
 12614                           ; 2 bytes @ 0x1
 12615                           
 12616  0071                     ?_locked_get_lock_leds:	
 12617                           ; 2 bytes @ 0x1
 12618                           
 12619  0071                     ?_locked_get_unlock_leds:	
 12620                           ; 2 bytes @ 0x1
 12621                           
 12622  0071                     ?___wmul:	
 12623                           ; 2 bytes @ 0x1
 12624                           
 12625  0071                     ?___lwdiv:	
 12626                           ; 2 bytes @ 0x1
 12627                           
 12628  0071                     ?___lmul:	
 12629                           ; 2 bytes @ 0x1
 12630                           
 12631  0071                     SPI1_Exchange8bit@data:	
 12632                           ; 4 bytes @ 0x1
 12633                           
 12634  0071                     PIN_MANAGER_Initialize@state:	
 12635                           ; 1 bytes @ 0x1
 12636                           
 12637  0071                     scheduler_TaskInit@task:	
 12638                           ; 1 bytes @ 0x1
 12639                           
 12640  0071                     nullifyBadge_segDisplayRegister@badge:	
 12641                           ; 1 bytes @ 0x1
 12642                           
 12643  0071                     nullifyBadge_userLedsRegister@badge:	
 12644                           ; 1 bytes @ 0x1
 12645                           
 12646  0071                     nullifyBadge_irTxRegister@badge:	
 12647                           ; 1 bytes @ 0x1
 12648                           
 12649  0071                     ___bmul@multiplicand:	
 12650                           ; 1 bytes @ 0x1
 12651                           
 12652  0071                     _isdigit$3645:	
 12653                           ; 1 bytes @ 0x1
 12654                           
 12655  0071                     PWM5_LoadDutyValue@dutyValue:	
 12656                           ; 1 bytes @ 0x1
 12657                           
 12658  0071                     PWM6_LoadDutyValue@dutyValue:	
 12659                           ; 2 bytes @ 0x1
 12660                           
 12661  0071                     PWM1_LoadDutyValue@dutyValue:	
 12662                           ; 2 bytes @ 0x1
 12663                           
 12664  0071                     PWM2_LoadDutyValue@dutyValue:	
 12665                           ; 2 bytes @ 0x1
 12666                           
 12667  0071                     TMR0_SetInterruptHandler@InterruptHandler:	
 12668                           ; 2 bytes @ 0x1
 12669                           
 12670  0071                     displayL1_SetUserLed@userLedVect:	
 12671                           ; 2 bytes @ 0x1
 12672                           
 12673  0071                     displayCharReverse@cVal:	
 12674                           ; 2 bytes @ 0x1
 12675                           
 12676  0071                     secret_clear@data:	
 12677                           ; 2 bytes @ 0x1
 12678                           
 12679  0071                     ___wmul@multiplier:	
 12680                           ; 2 bytes @ 0x1
 12681                           
 12682  0071                     ___lwdiv@divisor:	
 12683                           ; 2 bytes @ 0x1
 12684                           
 12685  0071                     memset@p1:	
 12686                           ; 2 bytes @ 0x1
 12687                           
 12688  0071                     strlen@s:	
 12689                           ; 2 bytes @ 0x1
 12690                           
 12691  0071                     ___lmul@multiplier:	
 12692                           ; 2 bytes @ 0x1
 12693                           
 12694                           
 12695                           ; 4 bytes @ 0x1
 12696  0071                     	ds	1
 12697  0072                     ?_SPI1_Exchange8bitBuffer:	
 12698  0072                     ??___bmul:	
 12699                           ; 1 bytes @ 0x2
 12700                           
 12701  0072                     SPI1_Exchange8bitBuffer@bufLen:	
 12702                           ; 1 bytes @ 0x2
 12703                           
 12704  0072                     scheduler_Init@scheduler:	
 12705                           ; 1 bytes @ 0x2
 12706                           
 12707  0072                     nullifyBadge_irTxRelease@badge:	
 12708                           ; 1 bytes @ 0x2
 12709                           
 12710  0072                     isdigit@c:	
 12711                           ; 1 bytes @ 0x2
 12712                           
 12713                           
 12714                           ; 1 bytes @ 0x2
 12715  0072                     	ds	1
 12716  0073                     ??_TMR0_Initialize:	
 12717  0073                     ??_TMR0_SetInterruptHandler:	
 12718                           ; 1 bytes @ 0x3
 12719                           
 12720  0073                     ??_strlen:	
 12721                           ; 1 bytes @ 0x3
 12722                           
 12723  0073                     ??_displayCharReverse:	
 12724                           ; 1 bytes @ 0x3
 12725                           
 12726  0073                     ??_secret_clear:	
 12727                           ; 1 bytes @ 0x3
 12728                           
 12729  0073                     ??_PWM5_LoadDutyValue:	
 12730                           ; 1 bytes @ 0x3
 12731                           
 12732  0073                     ??_PWM6_LoadDutyValue:	
 12733                           ; 1 bytes @ 0x3
 12734                           
 12735  0073                     ??_PWM1_LoadDutyValue:	
 12736                           ; 1 bytes @ 0x3
 12737                           
 12738  0073                     ??_SYSTEM_Initialize:	
 12739                           ; 1 bytes @ 0x3
 12740                           
 12741  0073                     ??_PWM2_LoadDutyValue:	
 12742                           ; 1 bytes @ 0x3
 12743                           
 12744  0073                     ??_TMR0_Read16bitTimer:	
 12745                           ; 1 bytes @ 0x3
 12746                           
 12747  0073                     ??_displayL1_SetUserLed:	
 12748                           ; 1 bytes @ 0x3
 12749                           
 12750  0073                     ??_locked_get_lock_leds:	
 12751                           ; 1 bytes @ 0x3
 12752                           
 12753  0073                     ??_locked_get_unlock_leds:	
 12754                           ; 1 bytes @ 0x3
 12755                           
 12756  0073                     SPI1_Exchange8bitBuffer@dataOut:	
 12757                           ; 1 bytes @ 0x3
 12758                           
 12759  0073                     scheduler_Init@k:	
 12760                           ; 1 bytes @ 0x3
 12761                           
 12762  0073                     nullifyBadge_buttonsGet@retVal:	
 12763                           ; 1 bytes @ 0x3
 12764                           
 12765  0073                     ___bmul@product:	
 12766                           ; 1 bytes @ 0x3
 12767                           
 12768  0073                     locked_lock_leds@size:	
 12769                           ; 1 bytes @ 0x3
 12770                           
 12771  0073                     locked_get_unlock_leds@leds:	
 12772                           ; 2 bytes @ 0x3
 12773                           
 12774  0073                     ___wmul@multiplicand:	
 12775                           ; 2 bytes @ 0x3
 12776                           
 12777  0073                     ___lwdiv@dividend:	
 12778                           ; 2 bytes @ 0x3
 12779                           
 12780  0073                     memset@c:	
 12781                           ; 2 bytes @ 0x3
 12782                           
 12783                           
 12784                           ; 2 bytes @ 0x3
 12785  0073                     	ds	1
 12786  0074                     ??_SPI1_Exchange8bitBuffer:	
 12787  0074                     displayL1_SetUserLed@display:	
 12788                           ; 1 bytes @ 0x4
 12789                           
 12790  0074                     ___bmul@multiplier:	
 12791                           ; 1 bytes @ 0x4
 12792                           
 12793                           
 12794                           ; 1 bytes @ 0x4
 12795  0074                     	ds	1
 12796  0075                     ??___wmul:	
 12797  0075                     ??___lwdiv:	
 12798                           ; 1 bytes @ 0x5
 12799                           
 12800  0075                     locked_get_lock_leds@size:	
 12801                           ; 1 bytes @ 0x5
 12802                           
 12803  0075                     ___wmul@product:	
 12804                           ; 2 bytes @ 0x5
 12805                           
 12806  0075                     memset@n:	
 12807                           ; 2 bytes @ 0x5
 12808                           
 12809  0075                     strlen@cp:	
 12810                           ; 2 bytes @ 0x5
 12811                           
 12812  0075                     ___lmul@multiplicand:	
 12813                           ; 2 bytes @ 0x5
 12814                           
 12815                           
 12816                           ; 4 bytes @ 0x5
 12817  0075                     	ds	1
 12818  0076                     ___lwdiv@counter:	
 12819                           
 12820                           ; 1 bytes @ 0x6
 12821  0076                     	ds	1
 12822  0077                     ??_memset:	
 12823  0077                     ?_locked_secret_check:	
 12824                           ; 1 bytes @ 0x7
 12825                           
 12826  0077                     ?_secret_check:	
 12827                           ; 1 bytes @ 0x7
 12828                           
 12829  0077                     ?_matrix_secret_check:	
 12830                           ; 1 bytes @ 0x7
 12831                           
 12832  0077                     SPI1_Exchange8bitBuffer@dataIn:	
 12833                           ; 1 bytes @ 0x7
 12834                           
 12835  0077                     locked_get_lock_leds@leds:	
 12836                           ; 1 bytes @ 0x7
 12837                           
 12838  0077                     locked_secret_check@data:	
 12839                           ; 2 bytes @ 0x7
 12840                           
 12841  0077                     secret_check@data:	
 12842                           ; 2 bytes @ 0x7
 12843                           
 12844  0077                     matrix_secret_check@data:	
 12845                           ; 2 bytes @ 0x7
 12846                           
 12847  0077                     ___lwdiv@quotient:	
 12848                           ; 2 bytes @ 0x7
 12849                           
 12850  0077                     memset@p:	
 12851                           ; 2 bytes @ 0x7
 12852                           
 12853                           
 12854                           ; 2 bytes @ 0x7
 12855  0077                     	ds	1
 12856  0078                     SPI1_Exchange8bitBuffer@bytesWritten:	
 12857  0078                     displayCharReverse@retValLower:	
 12858                           ; 1 bytes @ 0x8
 12859                           
 12860  0078                     TMR0_Read16bitTimer@readVal:	
 12861                           ; 1 bytes @ 0x8
 12862                           
 12863                           
 12864                           ; 2 bytes @ 0x8
 12865  0078                     	ds	1
 12866  0079                     ??_displayL1_Update:	
 12867  0079                     ??___lmul:	
 12868                           ; 1 bytes @ 0x9
 12869                           
 12870  0079                     ??___almod:	
 12871                           ; 1 bytes @ 0x9
 12872                           
 12873  0079                     ??___lwmod:	
 12874                           ; 1 bytes @ 0x9
 12875                           
 12876  0079                     displayCharReverse@retValUpper:	
 12877                           ; 1 bytes @ 0x9
 12878                           
 12879  0079                     locked_secret_check@buttonPressed:	
 12880                           ; 1 bytes @ 0x9
 12881                           
 12882  0079                     secret_check@buttonPressed:	
 12883                           ; 1 bytes @ 0x9
 12884                           
 12885  0079                     matrix_secret_check@buttonPressed:	
 12886                           ; 1 bytes @ 0x9
 12887                           
 12888                           
 12889                           ; 1 bytes @ 0x9
 12890  0079                     	ds	1
 12891  007A                     TMR0_Read16bitTimer@readValLow:	
 12892  007A                     displayCharReverse@retValUpperRev:	
 12893                           ; 1 bytes @ 0xA
 12894                           
 12895  007A                     ___almod@counter:	
 12896                           ; 1 bytes @ 0xA
 12897                           
 12898  007A                     ___lwmod@counter:	
 12899                           ; 1 bytes @ 0xA
 12900                           
 12901                           
 12902                           ; 1 bytes @ 0xA
 12903  007A                     	ds	1
 12904  007B                     ??_displayL2_ForceUpdate:	
 12905  007B                     ??_displayL2_SetUserLeds:	
 12906                           ; 1 bytes @ 0xB
 12907                           
 12908  007B                     ??_displayL2_ClrUserLeds:	
 12909                           ; 1 bytes @ 0xB
 12910                           
 12911  007B                     ??_displayL1_Initialize:	
 12912                           ; 1 bytes @ 0xB
 12913                           
 12914  007B                     TMR0_Read16bitTimer@readValHigh:	
 12915                           ; 1 bytes @ 0xB
 12916                           
 12917  007B                     displayL1_Initialize@display:	
 12918                           ; 1 bytes @ 0xB
 12919                           
 12920  007B                     displayCharReverse@k:	
 12921                           ; 1 bytes @ 0xB
 12922                           
 12923  007B                     displayL2_ForceUpdate@display:	
 12924                           ; 1 bytes @ 0xB
 12925                           
 12926  007B                     displayL2_SetUserLeds@display:	
 12927                           ; 1 bytes @ 0xB
 12928                           
 12929  007B                     displayL2_ClrUserLeds@display:	
 12930                           ; 1 bytes @ 0xB
 12931                           
 12932  007B                     ___almod@sign:	
 12933                           ; 1 bytes @ 0xB
 12934                           
 12935                           
 12936                           ; 1 bytes @ 0xB
 12937  007B                     	ds	1
 12938  007C                     ??_nullifyBadge_segDisplayErase:	
 12939  007C                     ??_nullifyBadge_segDisplayPutStr:	
 12940                           ; 1 bytes @ 0xC
 12941                           
 12942  007C                     ??_nullifyBadge_segDisplayForceUpdate:	
 12943                           ; 1 bytes @ 0xC
 12944                           
 12945  007C                     ??_nullifyBadge_userLedsSet:	
 12946                           ; 1 bytes @ 0xC
 12947                           
 12948  007C                     ??_nullifyBadge_platformInit:	
 12949                           ; 1 bytes @ 0xC
 12950                           
 12951  007C                     ??_flashy_Init:	
 12952                           ; 1 bytes @ 0xC
 12953                           
 12954  007C                     ??_menu_Init:	
 12955                           ; 1 bytes @ 0xC
 12956                           
 12957  007C                     ??_slot_Init:	
 12958                           ; 1 bytes @ 0xC
 12959                           
 12960  007C                     ??_locked_Init:	
 12961                           ; 1 bytes @ 0xC
 12962                           
 12963  007C                     ??_secret_Init:	
 12964                           ; 1 bytes @ 0xC
 12965                           
 12966  007C                     ??_displayL2_Initialize:	
 12967                           ; 1 bytes @ 0xC
 12968                           
 12969  007C                     ??_displayL2_EraseSegDisplay:	
 12970                           ; 1 bytes @ 0xC
 12971                           
 12972  007C                     ??_menu_clear:	
 12973                           ; 1 bytes @ 0xC
 12974                           
 12975  007C                     ??_menu_display_option:	
 12976                           ; 1 bytes @ 0xC
 12977                           
 12978  007C                     ??_menu_run_option:	
 12979                           ; 1 bytes @ 0xC
 12980                           
 12981  007C                     ??_locked_clear:	
 12982                           ; 1 bytes @ 0xC
 12983                           
 12984  007C                     ??_scheduler_TaskRun:	
 12985                           ; 1 bytes @ 0xC
 12986                           
 12987  007C                     ??_led_circle:	
 12988                           ; 1 bytes @ 0xC
 12989                           
 12990  007C                     ??_let_alternate:	
 12991                           ; 1 bytes @ 0xC
 12992                           
 12993  007C                     ??_nullifyBadge_userLedsClr:	
 12994                           ; 1 bytes @ 0xC
 12995                           
 12996  007C                     ??_flashy_display_option:	
 12997                           ; 1 bytes @ 0xC
 12998                           
 12999                           
 13000                           	psect	cstackBANK0
 13001  0020                     __pcstackBANK0:	
 13002                           ; 1 bytes @ 0xC
 13003                           
 13004  0020                     ?_displayL1_SetSegChar:	
 13005  0020                     ??_locked_secret_check:	
 13006                           ; 1 bytes @ 0x0
 13007                           
 13008  0020                     ??_secret_check:	
 13009                           ; 1 bytes @ 0x0
 13010                           
 13011  0020                     ??_matrix_secret_check:	
 13012                           ; 1 bytes @ 0x0
 13013                           
 13014  0020                     displayL1_SetSegChar@c:	
 13015                           ; 1 bytes @ 0x0
 13016                           
 13017  0020                     ___lmul@product:	
 13018                           ; 1 bytes @ 0x0
 13019                           
 13020  0020                     displayL1_Update@tmpRxBuf:	
 13021                           ; 4 bytes @ 0x0
 13022                           
 13023                           
 13024                           ; 10 bytes @ 0x0
 13025  0020                     	ds	1
 13026  0021                     displayL1_SetSegChar@charPos:	
 13027                           
 13028                           ; 1 bytes @ 0x1
 13029  0021                     	ds	1
 13030  0022                     ??_displayL1_SetSegChar:	
 13031                           
 13032                           ; 1 bytes @ 0x2
 13033  0022                     	ds	1
 13034  0023                     locked_secret_check@size:	
 13035  0023                     secret_check@size:	
 13036                           ; 2 bytes @ 0x3
 13037                           
 13038  0023                     matrix_secret_check@size:	
 13039                           ; 2 bytes @ 0x3
 13040                           
 13041                           
 13042                           ; 2 bytes @ 0x3
 13043  0023                     	ds	1
 13044  0024                     ?_rand:	
 13045                           
 13046                           ; 2 bytes @ 0x4
 13047  0024                     	ds	1
 13048  0025                     locked_secret_check@currents_size:	
 13049  0025                     secret_check@currents_size:	
 13050                           ; 2 bytes @ 0x5
 13051                           
 13052  0025                     matrix_secret_check@currents_size:	
 13053                           ; 2 bytes @ 0x5
 13054                           
 13055                           
 13056                           ; 2 bytes @ 0x5
 13057  0025                     	ds	1
 13058  0026                     ??_rand:	
 13059  0026                     displayL1_SetSegChar@dispDataVectBaseIdx:	
 13060                           ; 1 bytes @ 0x6
 13061                           
 13062                           
 13063                           ; 1 bytes @ 0x6
 13064  0026                     	ds	1
 13065  0027                     displayL1_SetSegChar@display:	
 13066  0027                     locked_secret_check@inputs:	
 13067                           ; 1 bytes @ 0x7
 13068                           
 13069  0027                     secret_check@inputs:	
 13070                           ; 1 bytes @ 0x7
 13071                           
 13072  0027                     matrix_secret_check@inputs:	
 13073                           ; 1 bytes @ 0x7
 13074                           
 13075                           
 13076                           ; 1 bytes @ 0x7
 13077  0027                     	ds	1
 13078  0028                     displayL1_SetSegChar@charData:	
 13079  0028                     locked_secret_check@i:	
 13080                           ; 2 bytes @ 0x8
 13081                           
 13082  0028                     secret_check@i:	
 13083                           ; 2 bytes @ 0x8
 13084                           
 13085  0028                     matrix_secret_check@i:	
 13086                           ; 2 bytes @ 0x8
 13087                           
 13088                           
 13089                           ; 2 bytes @ 0x8
 13090  0028                     	ds	2
 13091  002A                     ?_displayL2_PutChar:	
 13092  002A                     displayL1_Update@display:	
 13093                           ; 1 bytes @ 0xA
 13094                           
 13095  002A                     displayL2_PutChar@c:	
 13096                           ; 1 bytes @ 0xA
 13097                           
 13098                           
 13099                           ; 1 bytes @ 0xA
 13100  002A                     	ds	1
 13101  002B                     ??_displayL2_PutChar:	
 13102  002B                     ?_displayL2_SetUserLeds:	
 13103                           ; 1 bytes @ 0xB
 13104                           
 13105  002B                     ?___lwmod:	
 13106                           ; 1 bytes @ 0xB
 13107                           
 13108  002B                     ?___almod:	
 13109                           ; 2 bytes @ 0xB
 13110                           
 13111  002B                     nullifyBadge_segDisplayForceUpdate@badge:	
 13112                           ; 4 bytes @ 0xB
 13113                           
 13114  002B                     nullifyBadge_userLedsClr@badge:	
 13115                           ; 1 bytes @ 0xB
 13116                           
 13117  002B                     displayL2_Initialize@display:	
 13118                           ; 1 bytes @ 0xB
 13119                           
 13120  002B                     displayL2_SetUserLeds@userLedData:	
 13121                           ; 1 bytes @ 0xB
 13122                           
 13123  002B                     ___lwmod@divisor:	
 13124                           ; 2 bytes @ 0xB
 13125                           
 13126  002B                     ___almod@divisor:	
 13127                           ; 2 bytes @ 0xB
 13128                           
 13129                           
 13130                           ; 4 bytes @ 0xB
 13131  002B                     	ds	1
 13132  002C                     nullifyBadge_platformInit@badge:	
 13133                           
 13134                           ; 1 bytes @ 0xC
 13135  002C                     	ds	1
 13136  002D                     ?_nullifyBadge_userLedsSet:	
 13137  002D                     nullifyBadge_userLedsSet@userLedData:	
 13138                           ; 1 bytes @ 0xD
 13139                           
 13140  002D                     ___lwmod@dividend:	
 13141                           ; 2 bytes @ 0xD
 13142                           
 13143                           
 13144                           ; 2 bytes @ 0xD
 13145  002D                     	ds	1
 13146  002E                     displayL2_PutChar@k:	
 13147                           
 13148                           ; 1 bytes @ 0xE
 13149  002E                     	ds	1
 13150  002F                     ?_slot_Setup:	
 13151  002F                     ?_sprintf:	
 13152                           ; 1 bytes @ 0xF
 13153                           
 13154  002F                     nullifyBadge_userLedsSet@badge:	
 13155                           ; 2 bytes @ 0xF
 13156                           
 13157  002F                     displayL2_PutChar@display:	
 13158                           ; 1 bytes @ 0xF
 13159                           
 13160  002F                     slot_Setup@taskData:	
 13161                           ; 1 bytes @ 0xF
 13162                           
 13163  002F                     sprintf@sp:	
 13164                           ; 2 bytes @ 0xF
 13165                           
 13166  002F                     ___almod@dividend:	
 13167                           ; 2 bytes @ 0xF
 13168                           
 13169                           
 13170                           ; 4 bytes @ 0xF
 13171  002F                     	ds	1
 13172  0030                     ?_displayL2_PutStr:	
 13173  0030                     ?_led_roundabout:	
 13174                           ; 1 bytes @ 0x10
 13175                           
 13176  0030                     ?_led_curtain:	
 13177                           ; 1 bytes @ 0x10
 13178                           
 13179  0030                     ?_led_circle:	
 13180                           ; 1 bytes @ 0x10
 13181                           
 13182  0030                     ?_let_alternate:	
 13183                           ; 1 bytes @ 0x10
 13184                           
 13185  0030                     ?_led_Parody:	
 13186                           ; 1 bytes @ 0x10
 13187                           
 13188  0030                     led_roundabout@counter:	
 13189                           ; 1 bytes @ 0x10
 13190                           
 13191  0030                     led_curtain@counter:	
 13192                           ; 2 bytes @ 0x10
 13193                           
 13194  0030                     led_circle@count:	
 13195                           ; 2 bytes @ 0x10
 13196                           
 13197  0030                     let_alternate@count:	
 13198                           ; 2 bytes @ 0x10
 13199                           
 13200  0030                     led_Parody@count:	
 13201                           ; 2 bytes @ 0x10
 13202                           
 13203  0030                     displayL2_PutStr@str:	
 13204                           ; 2 bytes @ 0x10
 13205                           
 13206                           
 13207                           ; 2 bytes @ 0x10
 13208  0030                     	ds	1
 13209  0031                     ??_slot_Setup:	
 13210  0031                     sprintf@f:	
 13211                           ; 1 bytes @ 0x11
 13212                           
 13213                           
 13214                           ; 2 bytes @ 0x11
 13215  0031                     	ds	1
 13216  0032                     ??_displayL2_PutStr:	
 13217  0032                     ??_led_roundabout:	
 13218                           ; 1 bytes @ 0x12
 13219                           
 13220  0032                     ??_led_curtain:	
 13221                           ; 1 bytes @ 0x12
 13222                           
 13223  0032                     ??_led_Parody:	
 13224                           ; 1 bytes @ 0x12
 13225                           
 13226  0032                     ?_slot_Running_Animation:	
 13227                           ; 1 bytes @ 0x12
 13228                           
 13229  0032                     slot_Running_Animation@taskData:	
 13230                           ; 1 bytes @ 0x12
 13231                           
 13232                           
 13233                           ; 2 bytes @ 0x12
 13234  0032                     	ds	1
 13235  0033                     ??_led_rand:	
 13236                           
 13237                           ; 1 bytes @ 0x13
 13238  0033                     	ds	1
 13239  0034                     ??_slot_Running_Animation:	
 13240  0034                     led_roundabout@leds:	
 13241                           ; 1 bytes @ 0x14
 13242                           
 13243  0034                     led_curtain@leds:	
 13244                           ; 2 bytes @ 0x14
 13245                           
 13246  0034                     led_Parody@leds:	
 13247                           ; 2 bytes @ 0x14
 13248                           
 13249  0034                     slot_Setup@data:	
 13250                           ; 2 bytes @ 0x14
 13251                           
 13252                           
 13253                           ; 2 bytes @ 0x14
 13254  0034                     	ds	1
 13255  0035                     displayL2_PutStr@display:	
 13256                           
 13257                           ; 1 bytes @ 0x15
 13258  0035                     	ds	1
 13259  0036                     displayL2_PutStr@k:	
 13260  0036                     led_roundabout@size:	
 13261                           ; 1 bytes @ 0x16
 13262                           
 13263  0036                     led_curtain@size:	
 13264                           ; 2 bytes @ 0x16
 13265                           
 13266  0036                     led_Parody@size:	
 13267                           ; 2 bytes @ 0x16
 13268                           
 13269  0036                     slot_Running_Animation@data:	
 13270                           ; 2 bytes @ 0x16
 13271                           
 13272                           
 13273                           ; 2 bytes @ 0x16
 13274  0036                     	ds	1
 13275  0037                     ?_nullifyBadge_segDisplayPutStr:	
 13276  0037                     displayL2_EraseSegDisplay@display:	
 13277                           ; 1 bytes @ 0x17
 13278                           
 13279  0037                     nullifyBadge_segDisplayPutStr@str:	
 13280                           ; 1 bytes @ 0x17
 13281                           
 13282                           
 13283                           ; 2 bytes @ 0x17
 13284  0037                     	ds	1
 13285  0038                     nullifyBadge_segDisplayErase@badge:	
 13286                           
 13287                           ; 1 bytes @ 0x18
 13288  0038                     	ds	1
 13289  0039                     ?_flashy_Init:	
 13290  0039                     ?_menu_Init:	
 13291                           ; 1 bytes @ 0x19
 13292                           
 13293  0039                     ?_slot_Init:	
 13294                           ; 1 bytes @ 0x19
 13295                           
 13296  0039                     ?_locked_Init:	
 13297                           ; 1 bytes @ 0x19
 13298                           
 13299  0039                     ?_secret_Init:	
 13300                           ; 1 bytes @ 0x19
 13301                           
 13302  0039                     ?_matrix_Init:	
 13303                           ; 1 bytes @ 0x19
 13304                           
 13305  0039                     ?_menu_clear:	
 13306                           ; 1 bytes @ 0x19
 13307                           
 13308  0039                     ?_locked_clear:	
 13309                           ; 1 bytes @ 0x19
 13310                           
 13311  0039                     nullifyBadge_segDisplayPutStr@badge:	
 13312                           ; 1 bytes @ 0x19
 13313                           
 13314  0039                     menu_Init@taskData:	
 13315                           ; 1 bytes @ 0x19
 13316                           
 13317  0039                     menu_clear@data:	
 13318                           ; 2 bytes @ 0x19
 13319                           
 13320  0039                     flashy_Init@taskData:	
 13321                           ; 2 bytes @ 0x19
 13322                           
 13323  0039                     locked_Init@taskData:	
 13324                           ; 2 bytes @ 0x19
 13325                           
 13326  0039                     locked_clear@data:	
 13327                           ; 2 bytes @ 0x19
 13328                           
 13329  0039                     secret_Init@taskData:	
 13330                           ; 2 bytes @ 0x19
 13331                           
 13332  0039                     slot_Init@taskData:	
 13333                           ; 2 bytes @ 0x19
 13334                           
 13335  0039                     matrix_Init@taskData:	
 13336                           ; 2 bytes @ 0x19
 13337                           
 13338                           
 13339                           ; 2 bytes @ 0x19
 13340  0039                     	ds	1
 13341  003A                     ?_marquee_speedy:	
 13342  003A                     ?_marquee:	
 13343                           ; 1 bytes @ 0x1A
 13344                           
 13345  003A                     marquee_speedy@string:	
 13346                           ; 1 bytes @ 0x1A
 13347                           
 13348  003A                     marquee@string:	
 13349                           ; 2 bytes @ 0x1A
 13350                           
 13351                           
 13352                           ; 2 bytes @ 0x1A
 13353  003A                     	ds	1
 13354  003B                     ??_matrix_Init:	
 13355  003B                     ?_menu_run_option:	
 13356                           ; 1 bytes @ 0x1B
 13357                           
 13358  003B                     ??_sprintf:	
 13359                           ; 1 bytes @ 0x1B
 13360                           
 13361  003B                     led_rand@spark:	
 13362                           ; 1 bytes @ 0x1B
 13363                           
 13364  003B                     menu_Init@data:	
 13365                           ; 2 bytes @ 0x1B
 13366                           
 13367  003B                     menu_run_option@data:	
 13368                           ; 2 bytes @ 0x1B
 13369                           
 13370  003B                     flashy_Init@data:	
 13371                           ; 2 bytes @ 0x1B
 13372                           
 13373  003B                     locked_Init@data:	
 13374                           ; 2 bytes @ 0x1B
 13375                           
 13376  003B                     secret_Init@data:	
 13377                           ; 2 bytes @ 0x1B
 13378                           
 13379  003B                     slot_Init@data:	
 13380                           ; 2 bytes @ 0x1B
 13381                           
 13382                           
 13383                           ; 2 bytes @ 0x1B
 13384  003B                     	ds	1
 13385  003C                     marquee_speedy@count:	
 13386  003C                     marquee@count:	
 13387                           ; 2 bytes @ 0x1C
 13388                           
 13389                           
 13390                           ; 2 bytes @ 0x1C
 13391  003C                     	ds	1
 13392  003D                     ?_slot_Finished_Animation:	
 13393  003D                     slot_Finished_Animation@taskData:	
 13394                           ; 1 bytes @ 0x1D
 13395                           
 13396  003D                     matrix_Init@data:	
 13397                           ; 2 bytes @ 0x1D
 13398                           
 13399                           
 13400                           ; 2 bytes @ 0x1D
 13401  003D                     	ds	1
 13402  003E                     ??_marquee:	
 13403  003E                     marquee_speedy@multiplier:	
 13404                           ; 1 bytes @ 0x1E
 13405                           
 13406                           
 13407                           ; 2 bytes @ 0x1E
 13408  003E                     	ds	1
 13409  003F                     ?_scheduler_TaskAdd:	
 13410  003F                     ??_slot_Finished_Animation:	
 13411                           ; 1 bytes @ 0x1F
 13412                           
 13413  003F                     scheduler_TaskAdd@task:	
 13414                           ; 1 bytes @ 0x1F
 13415                           
 13416  003F                     sprintf@prec:	
 13417                           ; 1 bytes @ 0x1F
 13418                           
 13419  003F                     marquee@display_string:	
 13420                           ; 1 bytes @ 0x1F
 13421                           
 13422                           
 13423                           ; 5 bytes @ 0x1F
 13424  003F                     	ds	1
 13425  0040                     ??_scheduler_TaskAdd:	
 13426  0040                     ??_marquee_speedy:	
 13427                           ; 1 bytes @ 0x20
 13428                           
 13429  0040                     sprintf@flag:	
 13430                           ; 1 bytes @ 0x20
 13431                           
 13432                           
 13433                           ; 1 bytes @ 0x20
 13434  0040                     	ds	1
 13435  0041                     slot_Finished_Animation@data:	
 13436  0041                     sprintf@cp:	
 13437                           ; 2 bytes @ 0x21
 13438                           
 13439  0041                     marquee_speedy@display_string:	
 13440                           ; 2 bytes @ 0x21
 13441                           
 13442                           
 13443                           ; 5 bytes @ 0x21
 13444  0041                     	ds	2
 13445  0043                     sprintf@ap:	
 13446                           
 13447                           ; 1 bytes @ 0x23
 13448  0043                     	ds	1
 13449  0044                     marquee@multiplier:	
 13450  0044                     sprintf@val:	
 13451                           ; 2 bytes @ 0x24
 13452                           
 13453                           
 13454                           ; 2 bytes @ 0x24
 13455  0044                     	ds	2
 13456  0046                     scheduler_TaskAdd@scheduler:	
 13457  0046                     marquee_speedy@i:	
 13458                           ; 1 bytes @ 0x26
 13459                           
 13460  0046                     marquee@i:	
 13461                           ; 2 bytes @ 0x26
 13462                           
 13463  0046                     sprintf@len:	
 13464                           ; 2 bytes @ 0x26
 13465                           
 13466                           
 13467                           ; 2 bytes @ 0x26
 13468  0046                     	ds	1
 13469  0047                     scheduler_TaskAdd@k:	
 13470                           
 13471                           ; 1 bytes @ 0x27
 13472  0047                     	ds	1
 13473  0048                     marquee_speedy@string_length:	
 13474  0048                     marquee@string_length:	
 13475                           ; 2 bytes @ 0x28
 13476                           
 13477  0048                     sprintf@width:	
 13478                           ; 2 bytes @ 0x28
 13479                           
 13480                           
 13481                           ; 2 bytes @ 0x28
 13482  0048                     	ds	2
 13483  004A                     sprintf@c:	
 13484  004A                     marquee_speedy@j:	
 13485                           ; 1 bytes @ 0x2A
 13486                           
 13487  004A                     marquee@j:	
 13488                           ; 2 bytes @ 0x2A
 13489                           
 13490                           
 13491                           ; 2 bytes @ 0x2A
 13492  004A                     	ds	2
 13493  004C                     ?_menu_display_option:	
 13494  004C                     ?_flashy_display_option:	
 13495                           ; 1 bytes @ 0x2C
 13496                           
 13497  004C                     ?_matrix_display_option:	
 13498                           ; 1 bytes @ 0x2C
 13499                           
 13500  004C                     menu_display_option@data:	
 13501                           ; 1 bytes @ 0x2C
 13502                           
 13503  004C                     flashy_display_option@data:	
 13504                           ; 2 bytes @ 0x2C
 13505                           
 13506  004C                     matrix_display_option@data:	
 13507                           ; 2 bytes @ 0x2C
 13508                           
 13509                           
 13510                           ; 2 bytes @ 0x2C
 13511  004C                     	ds	2
 13512  004E                     ??_matrix_display_option:	
 13513  004E                     menu_display_option@size:	
 13514                           ; 1 bytes @ 0x2E
 13515                           
 13516                           
 13517                           ; 2 bytes @ 0x2E
 13518  004E                     	ds	2
 13519  0050                     menu_display_option@led:	
 13520                           
 13521                           ; 2 bytes @ 0x30
 13522  0050                     	ds	2
 13523  0052                     ?_flashy_Main:	
 13524  0052                     ?_menu_Main:	
 13525                           ; 1 bytes @ 0x32
 13526                           
 13527  0052                     ?_slot_Main:	
 13528                           ; 1 bytes @ 0x32
 13529                           
 13530  0052                     ?_locked_Main:	
 13531                           ; 1 bytes @ 0x32
 13532                           
 13533  0052                     ?_secret_Main:	
 13534                           ; 1 bytes @ 0x32
 13535                           
 13536  0052                     ?_matrix_Main:	
 13537                           ; 1 bytes @ 0x32
 13538                           
 13539  0052                     menu_Main@taskData:	
 13540                           ; 1 bytes @ 0x32
 13541                           
 13542  0052                     flashy_Main@taskData:	
 13543                           ; 2 bytes @ 0x32
 13544                           
 13545  0052                     locked_Main@taskData:	
 13546                           ; 2 bytes @ 0x32
 13547                           
 13548  0052                     secret_Main@taskData:	
 13549                           ; 2 bytes @ 0x32
 13550                           
 13551  0052                     slot_Main@taskData:	
 13552                           ; 2 bytes @ 0x32
 13553                           
 13554  0052                     matrix_Main@taskData:	
 13555                           ; 2 bytes @ 0x32
 13556                           
 13557                           
 13558                           ; 2 bytes @ 0x32
 13559  0052                     	ds	2
 13560  0054                     ??_flashy_Main:	
 13561  0054                     ??_menu_Main:	
 13562                           ; 1 bytes @ 0x34
 13563                           
 13564  0054                     ??_slot_Main:	
 13565                           ; 1 bytes @ 0x34
 13566                           
 13567  0054                     ??_locked_Main:	
 13568                           ; 1 bytes @ 0x34
 13569                           
 13570  0054                     ??_secret_Main:	
 13571                           ; 1 bytes @ 0x34
 13572                           
 13573  0054                     ??_matrix_Main:	
 13574                           ; 1 bytes @ 0x34
 13575                           
 13576                           
 13577                           ; 1 bytes @ 0x34
 13578  0054                     	ds	2
 13579  0056                     menu_Main@buttonPressed:	
 13580  0056                     locked_Main@buttonPressed:	
 13581                           ; 1 bytes @ 0x36
 13582                           
 13583  0056                     secret_Main@secret_found:	
 13584                           ; 1 bytes @ 0x36
 13585                           
 13586  0056                     flashy_Main@hit_counter:	
 13587                           ; 1 bytes @ 0x36
 13588                           
 13589                           
 13590                           ; 6 bytes @ 0x36
 13591  0056                     	ds	1
 13592  0057                     secret_Main@buttonPressed:	
 13593  0057                     menu_Main@data:	
 13594                           ; 1 bytes @ 0x37
 13595                           
 13596  0057                     locked_Main@data:	
 13597                           ; 2 bytes @ 0x37
 13598                           
 13599                           
 13600                           ; 2 bytes @ 0x37
 13601  0057                     	ds	1
 13602  0058                     matrix_Main@buttonPressed:	
 13603  0058                     secret_Main@data:	
 13604                           ; 1 bytes @ 0x38
 13605                           
 13606                           
 13607                           ; 2 bytes @ 0x38
 13608  0058                     	ds	1
 13609  0059                     matrix_Main@holdvalue:	
 13610                           
 13611                           ; 1 bytes @ 0x39
 13612  0059                     	ds	1
 13613  005A                     matrix_Main@data:	
 13614                           
 13615                           ; 2 bytes @ 0x3A
 13616  005A                     	ds	2
 13617  005C                     flashy_Main@buttonPressed:	
 13618                           
 13619                           ; 2 bytes @ 0x3C
 13620  005C                     	ds	2
 13621  005E                     flashy_Main@data:	
 13622                           
 13623                           ; 2 bytes @ 0x3E
 13624  005E                     	ds	6
 13625  0064                     slot_Main@buttonPressed:	
 13626                           
 13627                           ; 1 bytes @ 0x44
 13628  0064                     	ds	1
 13629  0065                     slot_Main@data:	
 13630                           
 13631                           ; 2 bytes @ 0x45
 13632  0065                     	ds	2
 13633  0067                     scheduler_TaskRun@task:	
 13634                           
 13635                           ; 1 bytes @ 0x47
 13636  0067                     	ds	1
 13637  0068                     ??_schedulerExecute:	
 13638                           
 13639                           ; 1 bytes @ 0x48
 13640  0068                     	ds	6
 13641  006E                     ??_main:	
 13642                           
 13643                           ; 1 bytes @ 0x4E
 13644  006E                     	ds	1
 13645                           
 13646                           	psect	maintext
 13647  0661                     __pmaintext:	
 13648 ;;
 13649 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
 13650 ;;
 13651 ;; *************** function _main *****************
 13652 ;; Defined at:
 13653 ;;		line 225 in file "main.c"
 13654 ;; Parameters:    Size  Location     Type
 13655 ;;		None
 13656 ;; Auto vars:     Size  Location     Type
 13657 ;;		None
 13658 ;; Return value:  Size  Location     Type
 13659 ;;                  1    wreg      void 
 13660 ;; Registers used:
 13661 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13662 ;; Tracked objects:
 13663 ;;		On entry : B1F/0
 13664 ;;		On exit  : 0/0
 13665 ;;		Unchanged: 0/0
 13666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13667 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13668 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13669 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13670 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13671 ;;Total ram usage:        1 bytes
 13672 ;; Hardware stack levels required when called:   15
 13673 ;; This function calls:
 13674 ;;		_nullifyBadge_platformInit
 13675 ;;		_schedulerExecute
 13676 ;;		_scheduler_Init
 13677 ;;		_scheduler_TaskAdd
 13678 ;;		_scheduler_TaskInit
 13679 ;; This function is called by:
 13680 ;;		Startup code after reset
 13681 ;; This function uses a non-reentrant model
 13682 ;;
 13683                           
 13684                           
 13685                           ;psect for function _main
 13686  0661                     _main:	
 13687                           
 13688                           ;main.c: 228: nullifyBadge_platformInit(&badge_inst);
 13689                           
 13690                           ;incstack = 0
 13691                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13692  0661  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 13693  0662  31AC  2483  3186   	fcall	_nullifyBadge_platformInit
 13694                           
 13695                           ;main.c: 231: scheduler_Init(&schedulerInst);
 13696  0665  30A0               	movlw	(low (_schedulerInst| (0+256)))& (0+255)
 13697  0666  31B4  2410  3186   	fcall	_scheduler_Init
 13698                           
 13699                           ;main.c: 234: scheduler_TaskInit(&flashy_task);
 13700  0669  305C               	movlw	(low (_flashy_task| (0+256)))& (0+255)
 13701  066A  31B7  2704  3186   	fcall	_scheduler_TaskInit
 13702                           
 13703                           ;main.c: 235: scheduler_TaskInit(&menu_task);
 13704  066D  304F               	movlw	(low (_menu_task| (0+256)))& (0+255)
 13705  066E  31B7  2704  3186   	fcall	_scheduler_TaskInit
 13706                           
 13707                           ;main.c: 236: scheduler_TaskInit(&slot_task);
 13708  0671  3042               	movlw	(low (_slot_task| (0+256)))& (0+255)
 13709  0672  31B7  2704  3186   	fcall	_scheduler_TaskInit
 13710                           
 13711                           ;main.c: 237: scheduler_TaskInit(&locked_task);
 13712  0675  3035               	movlw	(low (_locked_task| (0+256)))& (0+255)
 13713  0676  31B7  2704  3186   	fcall	_scheduler_TaskInit
 13714                           
 13715                           ;main.c: 238: scheduler_TaskInit(&secret_task);
 13716  0679  3028               	movlw	(low (_secret_task| (0+256)))& (0+255)
 13717  067A  31B7  2704  3186   	fcall	_scheduler_TaskInit
 13718                           
 13719                           ;main.c: 239: scheduler_TaskInit(&matrix_task);
 13720  067D  30C4               	movlw	(low (_matrix_task| (0+256)))& (0+255)
 13721  067E  31B7  2704  3186   	fcall	_scheduler_TaskInit
 13722                           
 13723                           ;main.c: 242: flashy_TaskData.badge = &badge_inst;
 13724  0681  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 13725  0682  0020               	movlb	0	; select bank0
 13726  0683  00EE               	movwf	??_main
 13727  0684  086E               	movf	??_main,w
 13728  0685  0029               	movlb	9	; select bank9
 13729  0686  00BF               	movwf	_flashy_TaskData^(0+1152)
 13730                           
 13731                           ;main.c: 243: menu_TaskData.badge = &badge_inst;
 13732  0687  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 13733  0688  0020               	movlb	0	; select bank0
 13734  0689  00EE               	movwf	??_main
 13735  068A  086E               	movf	??_main,w
 13736  068B  0025               	movlb	5	; select bank5
 13737  068C  00BC               	movwf	_menu_TaskData^(0+640)
 13738                           
 13739                           ;main.c: 244: slot_TaskData.badge = &badge_inst;
 13740  068D  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 13741  068E  0020               	movlb	0	; select bank0
 13742  068F  00EE               	movwf	??_main
 13743  0690  086E               	movf	??_main,w
 13744  0691  002B               	movlb	11	; select bank11
 13745  0692  00A0               	movwf	_slot_TaskData^(0+1408)
 13746                           
 13747                           ;main.c: 245: locked_TaskData.badge = &badge_inst;
 13748  0693  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 13749  0694  0020               	movlb	0	; select bank0
 13750  0695  00EE               	movwf	??_main
 13751  0696  086E               	movf	??_main,w
 13752  0697  0025               	movlb	5	; select bank5
 13753  0698  00AE               	movwf	_locked_TaskData^(0+640)
 13754                           
 13755                           ;main.c: 246: secret_TaskData.badge = &badge_inst;
 13756  0699  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 13757  069A  0020               	movlb	0	; select bank0
 13758  069B  00EE               	movwf	??_main
 13759  069C  086E               	movf	??_main,w
 13760  069D  0025               	movlb	5	; select bank5
 13761  069E  00A0               	movwf	_secret_TaskData^(0+640)
 13762                           
 13763                           ;main.c: 247: matrix_TaskData.badge = &badge_inst;
 13764  069F  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 13765  06A0  0020               	movlb	0	; select bank0
 13766  06A1  00EE               	movwf	??_main
 13767  06A2  086E               	movf	??_main,w
 13768  06A3  0029               	movlb	9	; select bank9
 13769  06A4  00A0               	movwf	_matrix_TaskData^(0+1152)
 13770                           
 13771                           ;main.c: 251: badge_locked = 1;
 13772  06A5  0021               	movlb	1	; select bank1
 13773  06A6  01C4               	clrf	_badge_locked^(0+128)
 13774  06A7  0AC4               	incf	_badge_locked^(0+128),f
 13775                           
 13776                           ;main.c: 254: flashy_task.taskData = (void *) &flashy_TaskData;
 13777  06A8  30BF               	movlw	low _flashy_TaskData
 13778  06A9  0022               	movlb	2	; select bank2
 13779  06AA  00DE               	movwf	(low ((_flashy_task| (0+256)+2)))^0
 13780  06AB  3004               	movlw	high _flashy_TaskData
 13781  06AC  00DF               	movwf	((low ((_flashy_task| (0+256)+2))+1))^0
 13782                           
 13783                           ;main.c: 255: flashy_task.taskInitCallback = flashy_Init;
 13784  06AD  3064               	movlw	low _flashy_Init
 13785  06AE  00E0               	movwf	(low ((_flashy_task| (0+256)+4)))^0
 13786  06AF  3007               	movlw	high _flashy_Init
 13787  06B0  00E1               	movwf	((low ((_flashy_task| (0+256)+4)))^0+1)
 13788                           
 13789                           ;main.c: 256: flashy_task.taskExecuteCallback = flashy_Main;
 13790  06B1  3019               	movlw	low _flashy_Main
 13791  06B2  00E4               	movwf	(low ((_flashy_task| (0+256)+8)))^0
 13792  06B3  3008               	movlw	high _flashy_Main
 13793  06B4  00E5               	movwf	((low ((_flashy_task| (0+256)+8)))^0+1)
 13794                           
 13795                           ;main.c: 257: flashy_task.taskExitCallback = flashy_Exit;
 13796  06B5  3000               	movlw	0
 13797  06B6  00E2               	movwf	(low ((_flashy_task| (0+256)+6)))^0
 13798  06B7  3000               	movlw	0
 13799  06B8  00E3               	movwf	((low ((_flashy_task| (0+256)+6)))^0+1)
 13800                           
 13801                           ;main.c: 258: flashy_task.taskInterval = 10;
 13802  06B9  300A               	movlw	10
 13803  06BA  00E6               	movwf	(_flashy_task^(0+256)+10)
 13804  06BB  3000               	movlw	0
 13805  06BC  00E7               	movwf	(_flashy_task^(0+256)+11)
 13806                           
 13807                           ;main.c: 260: menu_task.taskData = (void *) &menu_TaskData;
 13808  06BD  30BC               	movlw	low _menu_TaskData
 13809  06BE  00D1               	movwf	(low ((_menu_task| (0+256)+2)))^0
 13810  06BF  3002               	movlw	high _menu_TaskData
 13811  06C0  00D2               	movwf	((low ((_menu_task| (0+256)+2))+1))^0
 13812                           
 13813                           ;main.c: 261: menu_task.taskInitCallback = menu_Init;
 13814  06C1  30F4               	movlw	low _menu_Init
 13815  06C2  00D3               	movwf	(low ((_menu_task| (0+256)+4)))^0
 13816  06C3  302D               	movlw	high _menu_Init
 13817  06C4  00D4               	movwf	((low ((_menu_task| (0+256)+4)))^0+1)
 13818                           
 13819                           ;main.c: 262: menu_task.taskExecuteCallback = menu_Main;
 13820  06C5  3038               	movlw	low _menu_Main
 13821  06C6  00D7               	movwf	(low ((_menu_task| (0+256)+8)))^0
 13822  06C7  301B               	movlw	high _menu_Main
 13823  06C8  00D8               	movwf	((low ((_menu_task| (0+256)+8)))^0+1)
 13824                           
 13825                           ;main.c: 263: menu_task.taskExitCallback = menu_Exit;
 13826  06C9  3000               	movlw	0
 13827  06CA  00D5               	movwf	(low ((_menu_task| (0+256)+6)))^0
 13828  06CB  3000               	movlw	0
 13829  06CC  00D6               	movwf	((low ((_menu_task| (0+256)+6)))^0+1)
 13830                           
 13831                           ;main.c: 264: menu_task.taskInterval = 10;
 13832  06CD  300A               	movlw	10
 13833  06CE  00D9               	movwf	(_menu_task^(0+256)+10)
 13834  06CF  3000               	movlw	0
 13835  06D0  00DA               	movwf	(_menu_task^(0+256)+11)
 13836                           
 13837                           ;main.c: 266: slot_task.taskData = (void *) &slot_TaskData;
 13838  06D1  30A0               	movlw	low _slot_TaskData
 13839  06D2  00C4               	movwf	(low ((_slot_task| (0+256)+2)))^0
 13840  06D3  3005               	movlw	high _slot_TaskData
 13841  06D4  00C5               	movwf	((low ((_slot_task| (0+256)+2))+1))^0
 13842                           
 13843                           ;main.c: 267: slot_task.taskInitCallback = slot_Init;
 13844  06D5  3056               	movlw	low _slot_Init
 13845  06D6  00C6               	movwf	(low ((_slot_task| (0+256)+4)))^0
 13846  06D7  302E               	movlw	high _slot_Init
 13847  06D8  00C7               	movwf	((low ((_slot_task| (0+256)+4)))^0+1)
 13848                           
 13849                           ;main.c: 268: slot_task.taskExecuteCallback = slot_Main;
 13850  06D9  30E5               	movlw	low _slot_Main
 13851  06DA  00CA               	movwf	(low ((_slot_task| (0+256)+8)))^0
 13852  06DB  3000               	movlw	high _slot_Main
 13853  06DC  00CB               	movwf	((low ((_slot_task| (0+256)+8)))^0+1)
 13854                           
 13855                           ;main.c: 269: slot_task.taskExitCallback = slot_Exit;
 13856  06DD  3000               	movlw	0
 13857  06DE  00C8               	movwf	(low ((_slot_task| (0+256)+6)))^0
 13858  06DF  3000               	movlw	0
 13859  06E0  00C9               	movwf	((low ((_slot_task| (0+256)+6)))^0+1)
 13860                           
 13861                           ;main.c: 270: slot_task.taskInterval = 10;
 13862  06E1  300A               	movlw	10
 13863  06E2  00CC               	movwf	(_slot_task^(0+256)+10)
 13864  06E3  3000               	movlw	0
 13865  06E4  00CD               	movwf	(_slot_task^(0+256)+11)
 13866                           
 13867                           ;main.c: 272: locked_task.taskData = (void *) &locked_TaskData;
 13868  06E5  30AE               	movlw	low _locked_TaskData
 13869  06E6  00B7               	movwf	(low ((_locked_task| (0+256)+2)))^0
 13870  06E7  3002               	movlw	high _locked_TaskData
 13871  06E8  00B8               	movwf	((low ((_locked_task| (0+256)+2))+1))^0
 13872                           
 13873                           ;main.c: 273: locked_task.taskInitCallback = locked_Init;
 13874  06E9  3006               	movlw	low _locked_Init
 13875  06EA  00B9               	movwf	(low ((_locked_task| (0+256)+4)))^0
 13876  06EB  3018               	movlw	high _locked_Init
 13877  06EC  00BA               	movwf	((low ((_locked_task| (0+256)+4)))^0+1)
 13878                           
 13879                           ;main.c: 274: locked_task.taskExecuteCallback = locked_Main;
 13880  06ED  302F               	movlw	low _locked_Main
 13881  06EE  00BD               	movwf	(low ((_locked_task| (0+256)+8)))^0
 13882  06EF  301D               	movlw	high _locked_Main
 13883  06F0  00BE               	movwf	((low ((_locked_task| (0+256)+8)))^0+1)
 13884                           
 13885                           ;main.c: 275: locked_task.taskExitCallback = locked_Exit;
 13886  06F1  3000               	movlw	0
 13887  06F2  00BB               	movwf	(low ((_locked_task| (0+256)+6)))^0
 13888  06F3  3000               	movlw	0
 13889  06F4  00BC               	movwf	((low ((_locked_task| (0+256)+6)))^0+1)
 13890                           
 13891                           ;main.c: 276: locked_task.taskInterval = 10;
 13892  06F5  300A               	movlw	10
 13893  06F6  00BF               	movwf	(_locked_task^(0+256)+10)
 13894  06F7  3000               	movlw	0
 13895  06F8  00C0               	movwf	(_locked_task^(0+256)+11)
 13896                           
 13897                           ;main.c: 278: secret_task.taskData = (void *) &secret_TaskData;
 13898  06F9  30A0               	movlw	low _secret_TaskData
 13899  06FA  00AA               	movwf	(low ((_secret_task| (0+256)+2)))^0
 13900  06FB  3002               	movlw	high _secret_TaskData
 13901  06FC  00AB               	movwf	((low ((_secret_task| (0+256)+2))+1))^0
 13902                           
 13903                           ;main.c: 279: secret_task.taskInitCallback = secret_Init;
 13904  06FD  30D8               	movlw	low _secret_Init
 13905  06FE  00AC               	movwf	(low ((_secret_task| (0+256)+4)))^0
 13906  06FF  302C               	movlw	high _secret_Init
 13907  0700  00AD               	movwf	((low ((_secret_task| (0+256)+4)))^0+1)
 13908                           
 13909                           ;main.c: 280: secret_task.taskExecuteCallback = secret_Main;
 13910  0701  3043               	movlw	low _secret_Main
 13911  0702  00B0               	movwf	(low ((_secret_task| (0+256)+8)))^0
 13912  0703  3026               	movlw	high _secret_Main
 13913  0704  00B1               	movwf	((low ((_secret_task| (0+256)+8)))^0+1)
 13914                           
 13915                           ;main.c: 281: secret_task.taskExitCallback = secret_Exit;
 13916  0705  3000               	movlw	0
 13917  0706  00AE               	movwf	(low ((_secret_task| (0+256)+6)))^0
 13918  0707  3000               	movlw	0
 13919  0708  00AF               	movwf	((low ((_secret_task| (0+256)+6)))^0+1)
 13920                           
 13921                           ;main.c: 282: secret_task.taskInterval = 10;
 13922  0709  300A               	movlw	10
 13923  070A  00B2               	movwf	(_secret_task^(0+256)+10)
 13924  070B  3000               	movlw	0
 13925  070C  00B3               	movwf	(_secret_task^(0+256)+11)
 13926                           
 13927                           ;main.c: 284: matrix_task.taskData = (void *) &matrix_TaskData;
 13928  070D  30A0               	movlw	low _matrix_TaskData
 13929  070E  0023               	movlb	3	; select bank3
 13930  070F  00C6               	movwf	(low ((_matrix_task| (0+256)+2)))^(0+128)
 13931  0710  3004               	movlw	high _matrix_TaskData
 13932  0711  00C7               	movwf	((low ((_matrix_task| (0+256)+2))+1))^(0+128)
 13933                           
 13934                           ;main.c: 285: matrix_task.taskInitCallback = matrix_Init;
 13935  0712  308A               	movlw	low _matrix_Init
 13936  0713  00C8               	movwf	(low ((_matrix_task| (0+256)+4)))^(0+128)
 13937  0714  3023               	movlw	high _matrix_Init
 13938  0715  00C9               	movwf	((low ((_matrix_task| (0+256)+4)))^(0+128)+1)
 13939                           
 13940                           ;main.c: 286: matrix_task.taskExecuteCallback = matrix_Main;
 13941  0716  30CB               	movlw	low _matrix_Main
 13942  0717  00CC               	movwf	(low ((_matrix_task| (0+256)+8)))^(0+128)
 13943  0718  3010               	movlw	high _matrix_Main
 13944  0719  00CD               	movwf	((low ((_matrix_task| (0+256)+8)))^(0+128)+1)
 13945                           
 13946                           ;main.c: 287: matrix_task.taskExitCallback = matrix_Exit;
 13947  071A  3000               	movlw	0
 13948  071B  00CA               	movwf	(low ((_matrix_task| (0+256)+6)))^(0+128)
 13949  071C  3000               	movlw	0
 13950  071D  00CB               	movwf	((low ((_matrix_task| (0+256)+6)))^(0+128)+1)
 13951                           
 13952                           ;main.c: 288: matrix_task.taskInterval = 10;
 13953  071E  300A               	movlw	10
 13954  071F  00CE               	movwf	(_matrix_task^(0+384)+10)
 13955  0720  3000               	movlw	0
 13956  0721  00CF               	movwf	(_matrix_task^(0+384)+11)
 13957                           
 13958                           ;main.c: 291: secret_value = SECRET_VALUE_INIT;
 13959  0722  0021               	movlb	1	; select bank1
 13960  0723  01C5               	clrf	_secret_value^(0+128)
 13961  0724  01C6               	clrf	(_secret_value+1)^(0+128)
 13962                           
 13963                           ;main.c: 294: currentTask = FLASHY_TASK;
 13964  0725  3002               	movlw	2
 13965  0726  00BA               	movwf	_currentTask^(0+128)
 13966  0727  3000               	movlw	0
 13967  0728  00BB               	movwf	(_currentTask^(0+128)+1)
 13968                           
 13969                           ;main.c: 296: scheduler_TaskAdd(&schedulerInst, &flashy_task);
 13970  0729  305C               	movlw	(low (_flashy_task| (0+256)))& (0+255)
 13971  072A  0020               	movlb	0	; select bank0
 13972  072B  00EE               	movwf	??_main
 13973  072C  086E               	movf	??_main,w
 13974  072D  00BF               	movwf	scheduler_TaskAdd@task
 13975  072E  30A0               	movlw	(low (_schedulerInst| (0+256)))& (0+255)
 13976  072F  31A2  228C  3186   	fcall	_scheduler_TaskAdd
 13977                           
 13978                           ;main.c: 297: scheduler_TaskAdd(&schedulerInst, &menu_task);
 13979  0732  304F               	movlw	(low (_menu_task| (0+256)))& (0+255)
 13980  0733  0020               	movlb	0	; select bank0
 13981  0734  00EE               	movwf	??_main
 13982  0735  086E               	movf	??_main,w
 13983  0736  00BF               	movwf	scheduler_TaskAdd@task
 13984  0737  30A0               	movlw	(low (_schedulerInst| (0+256)))& (0+255)
 13985  0738  31A2  228C  3186   	fcall	_scheduler_TaskAdd
 13986                           
 13987                           ;main.c: 298: scheduler_TaskAdd(&schedulerInst, &slot_task);
 13988  073B  3042               	movlw	(low (_slot_task| (0+256)))& (0+255)
 13989  073C  0020               	movlb	0	; select bank0
 13990  073D  00EE               	movwf	??_main
 13991  073E  086E               	movf	??_main,w
 13992  073F  00BF               	movwf	scheduler_TaskAdd@task
 13993  0740  30A0               	movlw	(low (_schedulerInst| (0+256)))& (0+255)
 13994  0741  31A2  228C  3186   	fcall	_scheduler_TaskAdd
 13995                           
 13996                           ;main.c: 299: scheduler_TaskAdd(&schedulerInst, &locked_task);
 13997  0744  3035               	movlw	(low (_locked_task| (0+256)))& (0+255)
 13998  0745  0020               	movlb	0	; select bank0
 13999  0746  00EE               	movwf	??_main
 14000  0747  086E               	movf	??_main,w
 14001  0748  00BF               	movwf	scheduler_TaskAdd@task
 14002  0749  30A0               	movlw	(low (_schedulerInst| (0+256)))& (0+255)
 14003  074A  31A2  228C  3186   	fcall	_scheduler_TaskAdd
 14004                           
 14005                           ;main.c: 300: scheduler_TaskAdd(&schedulerInst, &secret_task);
 14006  074D  3028               	movlw	(low (_secret_task| (0+256)))& (0+255)
 14007  074E  0020               	movlb	0	; select bank0
 14008  074F  00EE               	movwf	??_main
 14009  0750  086E               	movf	??_main,w
 14010  0751  00BF               	movwf	scheduler_TaskAdd@task
 14011  0752  30A0               	movlw	(low (_schedulerInst| (0+256)))& (0+255)
 14012  0753  31A2  228C  3186   	fcall	_scheduler_TaskAdd
 14013                           
 14014                           ;main.c: 301: scheduler_TaskAdd(&schedulerInst, &matrix_task);
 14015  0756  30C4               	movlw	(low (_matrix_task| (0+256)))& (0+255)
 14016  0757  0020               	movlb	0	; select bank0
 14017  0758  00EE               	movwf	??_main
 14018  0759  086E               	movf	??_main,w
 14019  075A  00BF               	movwf	scheduler_TaskAdd@task
 14020  075B  30A0               	movlw	(low (_schedulerInst| (0+256)))& (0+255)
 14021  075C  31A2  228C  3186   	fcall	_scheduler_TaskAdd
 14022  075F                     l10723:	
 14023                           ;main.c: 304: while(1){
 14024                           
 14025                           
 14026                           ;main.c: 305: schedulerExecute(&schedulerInst);
 14027  075F  30A0               	movlw	(low (_schedulerInst| (0+256)))& (0+255)
 14028  0760  31A3  2306  3186   	fcall	_schedulerExecute
 14029  0763  2F5F               	goto	l10723
 14030  0764                     __end_of_main:	
 14031                           
 14032                           	psect	text1
 14033  3704                     __ptext1:	
 14034 ;; *************** function _scheduler_TaskInit *****************
 14035 ;; Defined at:
 14036 ;;		line 36 in file "cooperative_scheduler.c"
 14037 ;; Parameters:    Size  Location     Type
 14038 ;;  task            1    wreg     PTR struct t_schedulerTa
 14039 ;;		 -> matrix_task(13), secret_task(13), locked_task(13), slot_task(13), 
 14040 ;;		 -> menu_task(13), flashy_task(13), 
 14041 ;; Auto vars:     Size  Location     Type
 14042 ;;  task            1    1[COMMON] PTR struct t_schedulerTa
 14043 ;;		 -> matrix_task(13), secret_task(13), locked_task(13), slot_task(13), 
 14044 ;;		 -> menu_task(13), flashy_task(13), 
 14045 ;; Return value:  Size  Location     Type
 14046 ;;                  1    wreg      void 
 14047 ;; Registers used:
 14048 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14049 ;; Tracked objects:
 14050 ;;		On entry : 0/0
 14051 ;;		On exit  : 0/0
 14052 ;;		Unchanged: 0/0
 14053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14054 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14055 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14056 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14057 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14058 ;;Total ram usage:        1 bytes
 14059 ;; Hardware stack levels used:    1
 14060 ;; Hardware stack levels required when called:    4
 14061 ;; This function calls:
 14062 ;;		Nothing
 14063 ;; This function is called by:
 14064 ;;		_main
 14065 ;; This function uses a non-reentrant model
 14066 ;;
 14067                           
 14068                           
 14069                           ;psect for function _scheduler_TaskInit
 14070  3704                     _scheduler_TaskInit:	
 14071                           
 14072                           ;incstack = 0
 14073                           ; Regs used in _scheduler_TaskInit: [wreg+fsr1l+fsr1h+status,2+status,0]
 14074                           ;scheduler_TaskInit@task stored from wreg
 14075  3704  00F1               	movwf	scheduler_TaskInit@task
 14076                           
 14077                           ;cooperative_scheduler.c: 37: task->systemTickLastExecuted = 0;
 14078  3705  0871               	movf	scheduler_TaskInit@task,w
 14079  3706  0086               	movwf	6
 14080  3707  3001               	movlw	1	; select bank2/3
 14081  3708  0087               	movwf	7
 14082  3709  3000               	movlw	0
 14083  370A  3FC0               	movwi [0]fsr1
 14084  370B  3FC1               	movwi [1]fsr1
 14085                           
 14086                           ;cooperative_scheduler.c: 38: task->taskData = (0);
 14087  370C  0871               	movf	scheduler_TaskInit@task,w
 14088  370D  3E02               	addlw	2
 14089  370E  0086               	movwf	6
 14090  370F  3001               	movlw	1	; select bank2/3
 14091  3710  0087               	movwf	7
 14092  3711  3000               	movlw	0
 14093  3712  3FC0               	movwi [0]fsr1
 14094  3713  3FC1               	movwi [1]fsr1
 14095                           
 14096                           ;cooperative_scheduler.c: 39: task->taskInitCallback = (0);
 14097  3714  0871               	movf	scheduler_TaskInit@task,w
 14098  3715  3E04               	addlw	4
 14099  3716  0086               	movwf	6
 14100  3717  3001               	movlw	1	; select bank2/3
 14101  3718  0087               	movwf	7
 14102  3719  3000               	movlw	0
 14103  371A  3FC0               	movwi [0]fsr1
 14104  371B  3FC1               	movwi [1]fsr1
 14105                           
 14106                           ;cooperative_scheduler.c: 40: task->taskExitCallback = (0);
 14107  371C  0871               	movf	scheduler_TaskInit@task,w
 14108  371D  3E06               	addlw	6
 14109  371E  0086               	movwf	6
 14110  371F  3001               	movlw	1	; select bank2/3
 14111  3720  0087               	movwf	7
 14112  3721  3000               	movlw	0
 14113  3722  3FC0               	movwi [0]fsr1
 14114  3723  3FC1               	movwi [1]fsr1
 14115                           
 14116                           ;cooperative_scheduler.c: 41: task->taskExecuteCallback = (0);
 14117  3724  0871               	movf	scheduler_TaskInit@task,w
 14118  3725  3E08               	addlw	8
 14119  3726  0086               	movwf	6
 14120  3727  3001               	movlw	1	; select bank2/3
 14121  3728  0087               	movwf	7
 14122  3729  3000               	movlw	0
 14123  372A  3FC0               	movwi [0]fsr1
 14124  372B  3FC1               	movwi [1]fsr1
 14125                           
 14126                           ;cooperative_scheduler.c: 42: task->taskInterval = 65535;
 14127  372C  0871               	movf	scheduler_TaskInit@task,w
 14128  372D  3E0A               	addlw	10
 14129  372E  0086               	movwf	6
 14130  372F  3001               	movlw	1	; select bank2/3
 14131  3730  0087               	movwf	7
 14132  3731  30FF               	movlw	255
 14133  3732  3FC0               	movwi [0]fsr1
 14134  3733  30FF               	movlw	255
 14135  3734  3FC1               	movwi [1]fsr1
 14136                           
 14137                           ;cooperative_scheduler.c: 43: task->taskId = -1;
 14138  3735  0871               	movf	scheduler_TaskInit@task,w
 14139  3736  3E0C               	addlw	12
 14140  3737  0086               	movwf	6
 14141  3738  3001               	movlw	1	; select bank2/3
 14142  3739  0087               	movwf	7
 14143  373A  0181               	clrf	1
 14144  373B  0381               	decf	1,f
 14145  373C  0008               	return
 14146  373D                     __end_of_scheduler_TaskInit:	
 14147                           
 14148                           	psect	text2
 14149  228C                     __ptext2:	
 14150 ;; *************** function _scheduler_TaskAdd *****************
 14151 ;; Defined at:
 14152 ;;		line 46 in file "cooperative_scheduler.c"
 14153 ;; Parameters:    Size  Location     Type
 14154 ;;  scheduler       1    wreg     PTR struct t_scheduler
 14155 ;;		 -> schedulerInst(18), 
 14156 ;;  task            1   31[BANK0 ] PTR struct t_schedulerTa
 14157 ;;		 -> matrix_task(13), secret_task(13), locked_task(13), slot_task(13), 
 14158 ;;		 -> menu_task(13), flashy_task(13), 
 14159 ;; Auto vars:     Size  Location     Type
 14160 ;;  scheduler       1   38[BANK0 ] PTR struct t_scheduler
 14161 ;;		 -> schedulerInst(18), 
 14162 ;;  k               1   39[BANK0 ] unsigned char 
 14163 ;; Return value:  Size  Location     Type
 14164 ;;                  1    wreg      char 
 14165 ;; Registers used:
 14166 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14167 ;; Tracked objects:
 14168 ;;		On entry : 0/0
 14169 ;;		On exit  : 0/0
 14170 ;;		Unchanged: 0/0
 14171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14172 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14173 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14174 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14175 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14176 ;;Total ram usage:        9 bytes
 14177 ;; Hardware stack levels used:    1
 14178 ;; Hardware stack levels required when called:   11
 14179 ;; This function calls:
 14180 ;;		Absolute function
 14181 ;;		_flashy_Init
 14182 ;;		_locked_Init
 14183 ;;		_matrix_Init
 14184 ;;		_menu_Init
 14185 ;;		_secret_Init
 14186 ;;		_slot_Init
 14187 ;; This function is called by:
 14188 ;;		_main
 14189 ;; This function uses a non-reentrant model
 14190 ;;
 14191                           
 14192                           
 14193                           ;psect for function _scheduler_TaskAdd
 14194  228C                     _scheduler_TaskAdd:	
 14195                           
 14196                           ;incstack = 0
 14197                           ; Regs used in _scheduler_TaskAdd: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14198                           ;scheduler_TaskAdd@scheduler stored from wreg
 14199  228C  0020               	movlb	0	; select bank0
 14200  228D  00C6               	movwf	scheduler_TaskAdd@scheduler
 14201                           
 14202                           ;cooperative_scheduler.c: 47: u8 k;
 14203                           ;cooperative_scheduler.c: 48: for (k = 0; k < 16; k++) {
 14204  228E  01C7               	clrf	scheduler_TaskAdd@k
 14205  228F  3010               	movlw	16
 14206  2290  0247               	subwf	scheduler_TaskAdd@k,w
 14207  2291  1803               	btfsc	3,0
 14208  2292  2AFE               	goto	l10521
 14209  2293                     l10507:	
 14210                           
 14211                           ;cooperative_scheduler.c: 49: if (!(scheduler->taskEntryVector & (1 << k)) ) {
 14212  2293  0846               	movf	scheduler_TaskAdd@scheduler,w
 14213  2294  3E10               	addlw	16
 14214  2295  0086               	movwf	6
 14215  2296  3001               	movlw	1	; select bank2/3
 14216  2297  0087               	movwf	7
 14217  2298  3F40               	moviw [0]fsr1
 14218  2299  00C0               	movwf	??_scheduler_TaskAdd
 14219  229A  3F41               	moviw [1]fsr1
 14220  229B  00C1               	movwf	??_scheduler_TaskAdd+1
 14221  229C  3001               	movlw	1
 14222  229D  00C2               	movwf	??_scheduler_TaskAdd+2
 14223  229E  3000               	movlw	0
 14224  229F  00C3               	movwf	??_scheduler_TaskAdd+3
 14225  22A0  0A47               	incf	scheduler_TaskAdd@k,w
 14226  22A1  2AA4               	goto	u6514
 14227  22A2                     u6515:	
 14228  22A2  35C2               	lslf	??_scheduler_TaskAdd+2,f
 14229  22A3  0DC3               	rlf	??_scheduler_TaskAdd+3,f
 14230  22A4                     u6514:	
 14231  22A4  0B89               	decfsz	9,f
 14232  22A5  2AA2               	goto	u6515
 14233  22A6  0840               	movf	??_scheduler_TaskAdd,w
 14234  22A7  0542               	andwf	??_scheduler_TaskAdd+2,w
 14235  22A8  00C4               	movwf	??_scheduler_TaskAdd+4
 14236  22A9  0841               	movf	??_scheduler_TaskAdd+1,w
 14237  22AA  0543               	andwf	??_scheduler_TaskAdd+3,w
 14238  22AB  00C5               	movwf	??_scheduler_TaskAdd+5
 14239  22AC  0844               	movf	??_scheduler_TaskAdd+4,w
 14240  22AD  0445               	iorwf	??_scheduler_TaskAdd+5,w
 14241  22AE  1D03               	btfss	3,2
 14242  22AF  2AF6               	goto	l10517
 14243                           
 14244                           ;cooperative_scheduler.c: 50: scheduler->tasks[k] = task;
 14245  22B0  083F               	movf	scheduler_TaskAdd@task,w
 14246  22B1  00C0               	movwf	??_scheduler_TaskAdd
 14247  22B2  0847               	movf	scheduler_TaskAdd@k,w
 14248  22B3  0746               	addwf	scheduler_TaskAdd@scheduler,w
 14249  22B4  00C1               	movwf	??_scheduler_TaskAdd+1
 14250  22B5  0841               	movf	??_scheduler_TaskAdd+1,w
 14251  22B6  0086               	movwf	6
 14252  22B7  3001               	movlw	1	; select bank2/3
 14253  22B8  0087               	movwf	7
 14254  22B9  0840               	movf	??_scheduler_TaskAdd,w
 14255  22BA  0081               	movwf	1
 14256                           
 14257                           ;cooperative_scheduler.c: 51: scheduler->taskEntryVector |= (1 << k);
 14258  22BB  3001               	movlw	1
 14259  22BC  00C0               	movwf	??_scheduler_TaskAdd
 14260  22BD  3000               	movlw	0
 14261  22BE  00C1               	movwf	??_scheduler_TaskAdd+1
 14262  22BF  0A47               	incf	scheduler_TaskAdd@k,w
 14263  22C0  2AC3               	goto	u6534
 14264  22C1                     u6535:	
 14265  22C1  35C0               	lslf	??_scheduler_TaskAdd,f
 14266  22C2  0DC1               	rlf	??_scheduler_TaskAdd+1,f
 14267  22C3                     u6534:	
 14268  22C3  0B89               	decfsz	9,f
 14269  22C4  2AC1               	goto	u6535
 14270  22C5  0846               	movf	scheduler_TaskAdd@scheduler,w
 14271  22C6  3E10               	addlw	16
 14272  22C7  0086               	movwf	6
 14273  22C8  3001               	movlw	1	; select bank2/3
 14274  22C9  0087               	movwf	7
 14275  22CA  0840               	movf	??_scheduler_TaskAdd,w
 14276  22CB  0481               	iorwf	1,f
 14277  22CC  3141               	addfsr 1,1
 14278  22CD  0841               	movf	??_scheduler_TaskAdd+1,w
 14279  22CE  0481               	iorwf	1,f
 14280                           
 14281                           ;cooperative_scheduler.c: 53: if (task->taskInitCallback != (0)) {
 14282  22CF  083F               	movf	scheduler_TaskAdd@task,w
 14283  22D0  3E04               	addlw	4
 14284  22D1  0086               	movwf	6
 14285  22D2  3001               	movlw	1	; select bank2/3
 14286  22D3  0087               	movwf	7
 14287  22D4  0016               	moviw fsr1++
 14288  22D5  0401               	iorwf	1,w
 14289  22D6  1903               	btfsc	3,2
 14290  22D7  2AEB               	goto	l10513
 14291                           
 14292                           ;cooperative_scheduler.c: 54: task->taskInitCallback (task->taskData);
 14293  22D8  083F               	movf	scheduler_TaskAdd@task,w
 14294  22D9  3E02               	addlw	2
 14295  22DA  0086               	movwf	6
 14296  22DB  3001               	movlw	1	; select bank2/3
 14297  22DC  0087               	movwf	7
 14298  22DD  3F40               	moviw [0]fsr1
 14299  22DE  00B9               	movwf	matrix_Init@taskData
 14300  22DF  3F41               	moviw [1]fsr1
 14301  22E0  00BA               	movwf	matrix_Init@taskData+1
 14302  22E1  083F               	movf	scheduler_TaskAdd@task,w
 14303  22E2  3E04               	addlw	4
 14304  22E3  0086               	movwf	6
 14305  22E4  3001               	movlw	1	; select bank2/3
 14306  22E5  0087               	movwf	7
 14307  22E6  3F41               	moviw [1]fsr1
 14308  22E7  008A               	movwf	10
 14309  22E8  3F40               	moviw [0]fsr1
 14310  22E9  000A               	callw
 14311  22EA  31A2               	pagesel	$
 14312  22EB                     l10513:	
 14313                           
 14314                           ;cooperative_scheduler.c: 55: }
 14315                           ;cooperative_scheduler.c: 57: task->taskId = (s8) k;
 14316  22EB  0020               	movlb	0	; select bank0
 14317  22EC  0847               	movf	scheduler_TaskAdd@k,w
 14318  22ED  00C0               	movwf	??_scheduler_TaskAdd
 14319  22EE  083F               	movf	scheduler_TaskAdd@task,w
 14320  22EF  3E0C               	addlw	12
 14321  22F0  0086               	movwf	6
 14322  22F1  3001               	movlw	1	; select bank2/3
 14323  22F2  0087               	movwf	7
 14324  22F3  0840               	movf	??_scheduler_TaskAdd,w
 14325  22F4  0081               	movwf	1
 14326                           
 14327                           ;cooperative_scheduler.c: 58: return k;
 14328                           ;	Return value of _scheduler_TaskAdd is never used
 14329  22F5  0008               	return
 14330  22F6                     l10517:	
 14331  22F6  3001               	movlw	1
 14332  22F7  00C0               	movwf	??_scheduler_TaskAdd
 14333  22F8  0840               	movf	??_scheduler_TaskAdd,w
 14334  22F9  07C7               	addwf	scheduler_TaskAdd@k,f
 14335  22FA  3010               	movlw	16
 14336  22FB  0247               	subwf	scheduler_TaskAdd@k,w
 14337  22FC  1C03               	skipc
 14338  22FD  2A93               	goto	l10507
 14339  22FE                     l10521:	
 14340                           
 14341                           ;cooperative_scheduler.c: 59: }
 14342                           ;cooperative_scheduler.c: 60: }
 14343                           ;cooperative_scheduler.c: 62: task->taskId = -1;
 14344  22FE  083F               	movf	scheduler_TaskAdd@task,w
 14345  22FF  3E0C               	addlw	12
 14346  2300  0086               	movwf	6
 14347  2301  3001               	movlw	1	; select bank2/3
 14348  2302  0087               	movwf	7
 14349  2303  0181               	clrf	1
 14350  2304  0381               	decf	1,f
 14351  2305  0008               	return
 14352  2306                     __end_of_scheduler_TaskAdd:	
 14353                           ;cooperative_scheduler.c: 63: return -1;
 14354                           ;	Return value of _scheduler_TaskAdd is never used
 14355                           
 14356                           
 14357                           	psect	text3
 14358  238A                     __ptext3:	
 14359 ;; *************** function _matrix_Init *****************
 14360 ;; Defined at:
 14361 ;;		line 66 in file "matrix_task.c"
 14362 ;; Parameters:    Size  Location     Type
 14363 ;;  taskData        2   25[BANK0 ] PTR void 
 14364 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 14365 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 14366 ;; Auto vars:     Size  Location     Type
 14367 ;;  data            2   29[BANK0 ] PTR struct t_matrix_task
 14368 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 14369 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 14370 ;; Return value:  Size  Location     Type
 14371 ;;                  1    wreg      void 
 14372 ;; Registers used:
 14373 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14374 ;; Tracked objects:
 14375 ;;		On entry : 0/0
 14376 ;;		On exit  : 0/0
 14377 ;;		Unchanged: 0/0
 14378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14379 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14380 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14381 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14382 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14383 ;;Total ram usage:        6 bytes
 14384 ;; Hardware stack levels used:    1
 14385 ;; Hardware stack levels required when called:   10
 14386 ;; This function calls:
 14387 ;;		_nullifyBadge_segDisplayErase
 14388 ;;		_nullifyBadge_segDisplayRegister
 14389 ;;		_nullifyBadge_userLedsClr
 14390 ;;		_nullifyBadge_userLedsRegister
 14391 ;; This function is called by:
 14392 ;;		_main
 14393 ;;		_scheduler_TaskAdd
 14394 ;; This function uses a non-reentrant model
 14395 ;;
 14396                           
 14397                           
 14398                           ;psect for function _matrix_Init
 14399  238A                     _matrix_Init:	
 14400                           
 14401                           ;matrix_task.c: 67: struct t_matrix_taskData *data = (struct t_matrix_taskData *) taskDa
      +                          ta;
 14402                           
 14403                           ;incstack = 0
 14404                           ; Regs used in _matrix_Init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14405  238A  0020               	movlb	0	; select bank0
 14406  238B  083A               	movf	matrix_Init@taskData+1,w
 14407  238C  00BE               	movwf	matrix_Init@data+1
 14408  238D  0839               	movf	matrix_Init@taskData,w
 14409  238E  00BD               	movwf	matrix_Init@data
 14410                           
 14411                           ;matrix_task.c: 70: nullifyBadge_userLedsRegister(data->badge);
 14412  238F  083D               	movf	matrix_Init@data,w
 14413  2390  0086               	movwf	6
 14414  2391  083E               	movf	matrix_Init@data+1,w
 14415  2392  0087               	movwf	7
 14416  2393  0801               	movf	1,w
 14417  2394  31B2  22C9  31A3   	fcall	_nullifyBadge_userLedsRegister
 14418                           
 14419                           ;matrix_task.c: 71: nullifyBadge_userLedsClr(data->badge);
 14420  2397  0020               	movlb	0	; select bank0
 14421  2398  083D               	movf	matrix_Init@data,w
 14422  2399  0086               	movwf	6
 14423  239A  083E               	movf	matrix_Init@data+1,w
 14424  239B  0087               	movwf	7
 14425  239C  0801               	movf	1,w
 14426  239D  3187  27FA  31A3   	fcall	_nullifyBadge_userLedsClr
 14427                           
 14428                           ;matrix_task.c: 72: nullifyBadge_segDisplayRegister(data->badge);
 14429  23A0  0020               	movlb	0	; select bank0
 14430  23A1  083D               	movf	matrix_Init@data,w
 14431  23A2  0086               	movwf	6
 14432  23A3  083E               	movf	matrix_Init@data+1,w
 14433  23A4  0087               	movwf	7
 14434  23A5  0801               	movf	1,w
 14435  23A6  31B1  21F2  31A3   	fcall	_nullifyBadge_segDisplayRegister
 14436                           
 14437                           ;matrix_task.c: 73: nullifyBadge_segDisplayErase(data->badge);
 14438  23A9  0020               	movlb	0	; select bank0
 14439  23AA  083D               	movf	matrix_Init@data,w
 14440  23AB  0086               	movwf	6
 14441  23AC  083E               	movf	matrix_Init@data+1,w
 14442  23AD  0087               	movwf	7
 14443  23AE  0801               	movf	1,w
 14444  23AF  3198  2000  31A3   	fcall	_nullifyBadge_segDisplayErase
 14445                           
 14446                           ;matrix_task.c: 74: matrix_found =0;
 14447  23B2  0021               	movlb	1	; select bank1
 14448  23B3  01C2               	clrf	_matrix_found^(0+128)
 14449                           
 14450                           ;matrix_task.c: 76: data->display_state = MATRIX_STATE_DISPLAY;
 14451  23B4  0020               	movlb	0	; select bank0
 14452  23B5  083D               	movf	matrix_Init@data,w
 14453  23B6  3E02               	addlw	2
 14454  23B7  00BB               	movwf	??_matrix_Init
 14455  23B8  3000               	movlw	0
 14456  23B9  3D3E               	addwfc	matrix_Init@data+1,w
 14457  23BA  00BC               	movwf	??_matrix_Init+1
 14458  23BB  083B               	movf	??_matrix_Init,w
 14459  23BC  0086               	movwf	6
 14460  23BD  083C               	movf	??_matrix_Init+1,w
 14461  23BE  0087               	movwf	7
 14462  23BF  300A               	movlw	10
 14463  23C0  0081               	movwf	1
 14464                           
 14465                           ;matrix_task.c: 77: data->martix_state = STILL_IN_MATRIX;
 14466  23C1  083D               	movf	matrix_Init@data,w
 14467  23C2  3E01               	addlw	1
 14468  23C3  00BB               	movwf	??_matrix_Init
 14469  23C4  3000               	movlw	0
 14470  23C5  3D3E               	addwfc	matrix_Init@data+1,w
 14471  23C6  00BC               	movwf	??_matrix_Init+1
 14472  23C7  083B               	movf	??_matrix_Init,w
 14473  23C8  0086               	movwf	6
 14474  23C9  083C               	movf	??_matrix_Init+1,w
 14475  23CA  0087               	movwf	7
 14476  23CB  3001               	movlw	1
 14477  23CC  0081               	movwf	1
 14478                           
 14479                           ;matrix_task.c: 78: matrix_leds_idx =0;
 14480  23CD  0021               	movlb	1	; select bank1
 14481  23CE  01A0               	clrf	_matrix_leds_idx^(0+128)
 14482  23CF  01A1               	clrf	(_matrix_leds_idx+1)^(0+128)
 14483                           
 14484                           ;matrix_task.c: 81: data->holdCountA = 0 ;
 14485  23D0  0020               	movlb	0	; select bank0
 14486  23D1  083D               	movf	matrix_Init@data,w
 14487  23D2  0086               	movwf	6
 14488  23D3  083E               	movf	matrix_Init@data+1,w
 14489  23D4  0087               	movwf	7
 14490  23D5  3149               	addfsr 1,9
 14491  23D6  3000               	movlw	0
 14492  23D7  3FC0               	movwi [0]fsr1
 14493  23D8  3FC1               	movwi [1]fsr1
 14494                           
 14495                           ;matrix_task.c: 82: data->holdCountB = 0 ;
 14496  23D9  083D               	movf	matrix_Init@data,w
 14497  23DA  0086               	movwf	6
 14498  23DB  083E               	movf	matrix_Init@data+1,w
 14499  23DC  0087               	movwf	7
 14500  23DD  314B               	addfsr 1,11
 14501  23DE  3000               	movlw	0
 14502  23DF  3FC0               	movwi [0]fsr1
 14503  23E0  3FC1               	movwi [1]fsr1
 14504                           
 14505                           ;matrix_task.c: 83: data->holdCountX = 0 ;
 14506  23E1  083D               	movf	matrix_Init@data,w
 14507  23E2  0086               	movwf	6
 14508  23E3  083E               	movf	matrix_Init@data+1,w
 14509  23E4  0087               	movwf	7
 14510  23E5  314D               	addfsr 1,13
 14511  23E6  3000               	movlw	0
 14512  23E7  3FC0               	movwi [0]fsr1
 14513  23E8  3FC1               	movwi [1]fsr1
 14514                           
 14515                           ;matrix_task.c: 84: data->holdCountY = 0 ;
 14516  23E9  083D               	movf	matrix_Init@data,w
 14517  23EA  0086               	movwf	6
 14518  23EB  083E               	movf	matrix_Init@data+1,w
 14519  23EC  0087               	movwf	7
 14520  23ED  314F               	addfsr 1,15
 14521  23EE  3000               	movlw	0
 14522  23EF  3FC0               	movwi [0]fsr1
 14523  23F0  3FC1               	movwi [1]fsr1
 14524                           
 14525                           ;matrix_task.c: 85: data->holdCountXY = 0;
 14526  23F1  083D               	movf	matrix_Init@data,w
 14527  23F2  0086               	movwf	6
 14528  23F3  083E               	movf	matrix_Init@data+1,w
 14529  23F4  0087               	movwf	7
 14530  23F5  3151               	addfsr 1,17
 14531  23F6  3000               	movlw	0
 14532  23F7  3FC0               	movwi [0]fsr1
 14533  23F8  3FC1               	movwi [1]fsr1
 14534                           
 14535                           ;matrix_task.c: 86: data->holdCountAY = 0;
 14536  23F9  083D               	movf	matrix_Init@data,w
 14537  23FA  0086               	movwf	6
 14538  23FB  083E               	movf	matrix_Init@data+1,w
 14539  23FC  0087               	movwf	7
 14540  23FD  3153               	addfsr 1,19
 14541  23FE  3000               	movlw	0
 14542  23FF  3FC0               	movwi [0]fsr1
 14543  2400  3FC1               	movwi [1]fsr1
 14544                           
 14545                           ;matrix_task.c: 87: data->holdCountAX = 0;
 14546  2401  083D               	movf	matrix_Init@data,w
 14547  2402  0086               	movwf	6
 14548  2403  083E               	movf	matrix_Init@data+1,w
 14549  2404  0087               	movwf	7
 14550  2405  3155               	addfsr 1,21
 14551  2406  3000               	movlw	0
 14552  2407  3FC0               	movwi [0]fsr1
 14553  2408  3FC1               	movwi [1]fsr1
 14554                           
 14555                           ;matrix_task.c: 88: data->holdCountBX = 0;
 14556  2409  083D               	movf	matrix_Init@data,w
 14557  240A  0086               	movwf	6
 14558  240B  083E               	movf	matrix_Init@data+1,w
 14559  240C  0087               	movwf	7
 14560  240D  3157               	addfsr 1,23
 14561  240E  3000               	movlw	0
 14562  240F  3FC0               	movwi [0]fsr1
 14563  2410  3FC1               	movwi [1]fsr1
 14564                           
 14565                           ;matrix_task.c: 89: data->holdCountBY = 0;
 14566  2411  083D               	movf	matrix_Init@data,w
 14567  2412  0086               	movwf	6
 14568  2413  083E               	movf	matrix_Init@data+1,w
 14569  2414  0087               	movwf	7
 14570  2415  3159               	addfsr 1,25
 14571  2416  3000               	movlw	0
 14572  2417  3FC0               	movwi [0]fsr1
 14573  2418  3FC1               	movwi [1]fsr1
 14574                           
 14575                           ;matrix_task.c: 90: data->holdCountBA = 0;
 14576  2419  083D               	movf	matrix_Init@data,w
 14577  241A  0086               	movwf	6
 14578  241B  083E               	movf	matrix_Init@data+1,w
 14579  241C  0087               	movwf	7
 14580  241D  315B               	addfsr 1,27
 14581  241E  3000               	movlw	0
 14582  241F  3FC0               	movwi [0]fsr1
 14583  2420  3FC1               	movwi [1]fsr1
 14584                           
 14585                           ;matrix_task.c: 91: data->noholdCount = 0;
 14586  2421  083D               	movf	matrix_Init@data,w
 14587  2422  0086               	movwf	6
 14588  2423  083E               	movf	matrix_Init@data+1,w
 14589  2424  0087               	movwf	7
 14590  2425  315D               	addfsr 1,29
 14591  2426  3000               	movlw	0
 14592  2427  3FC0               	movwi [0]fsr1
 14593  2428  3FC1               	movwi [1]fsr1
 14594  2429  0008               	return
 14595  242A                     __end_of_matrix_Init:	
 14596                           
 14597                           	psect	text4
 14598  2CD8                     __ptext4:	
 14599 ;; *************** function _secret_Init *****************
 14600 ;; Defined at:
 14601 ;;		line 51 in file "secret_task.c"
 14602 ;; Parameters:    Size  Location     Type
 14603 ;;  taskData        2   25[BANK0 ] PTR void 
 14604 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 14605 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 14606 ;; Auto vars:     Size  Location     Type
 14607 ;;  data            2   27[BANK0 ] PTR struct t_secret_task
 14608 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 14609 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 14610 ;; Return value:  Size  Location     Type
 14611 ;;                  1    wreg      void 
 14612 ;; Registers used:
 14613 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14614 ;; Tracked objects:
 14615 ;;		On entry : 0/0
 14616 ;;		On exit  : 0/0
 14617 ;;		Unchanged: 0/0
 14618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14619 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14620 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14621 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14622 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14623 ;;Total ram usage:        4 bytes
 14624 ;; Hardware stack levels used:    1
 14625 ;; Hardware stack levels required when called:   10
 14626 ;; This function calls:
 14627 ;;		_nullifyBadge_segDisplayErase
 14628 ;;		_nullifyBadge_segDisplayRegister
 14629 ;;		_nullifyBadge_userLedsClr
 14630 ;;		_nullifyBadge_userLedsRegister
 14631 ;; This function is called by:
 14632 ;;		_main
 14633 ;;		_scheduler_TaskAdd
 14634 ;; This function uses a non-reentrant model
 14635 ;;
 14636                           
 14637                           
 14638                           ;psect for function _secret_Init
 14639  2CD8                     _secret_Init:	
 14640                           
 14641                           ;secret_task.c: 52: struct t_secret_taskData *data = (struct t_secret_taskData *) taskDa
      +                          ta;
 14642                           
 14643                           ;incstack = 0
 14644                           ; Regs used in _secret_Init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14645  2CD8  0020               	movlb	0	; select bank0
 14646  2CD9  083A               	movf	secret_Init@taskData+1,w
 14647  2CDA  00BC               	movwf	secret_Init@data+1
 14648  2CDB  0839               	movf	secret_Init@taskData,w
 14649  2CDC  00BB               	movwf	secret_Init@data
 14650                           
 14651                           ;secret_task.c: 55: nullifyBadge_userLedsRegister(data->badge);
 14652  2CDD  083B               	movf	secret_Init@data,w
 14653  2CDE  0086               	movwf	6
 14654  2CDF  083C               	movf	secret_Init@data+1,w
 14655  2CE0  0087               	movwf	7
 14656  2CE1  0801               	movf	1,w
 14657  2CE2  31B2  22C9  31AC   	fcall	_nullifyBadge_userLedsRegister
 14658                           
 14659                           ;secret_task.c: 56: nullifyBadge_userLedsClr(data->badge);
 14660  2CE5  0020               	movlb	0	; select bank0
 14661  2CE6  083B               	movf	secret_Init@data,w
 14662  2CE7  0086               	movwf	6
 14663  2CE8  083C               	movf	secret_Init@data+1,w
 14664  2CE9  0087               	movwf	7
 14665  2CEA  0801               	movf	1,w
 14666  2CEB  3187  27FA  31AC   	fcall	_nullifyBadge_userLedsClr
 14667                           
 14668                           ;secret_task.c: 57: nullifyBadge_segDisplayRegister(data->badge);
 14669  2CEE  0020               	movlb	0	; select bank0
 14670  2CEF  083B               	movf	secret_Init@data,w
 14671  2CF0  0086               	movwf	6
 14672  2CF1  083C               	movf	secret_Init@data+1,w
 14673  2CF2  0087               	movwf	7
 14674  2CF3  0801               	movf	1,w
 14675  2CF4  31B1  21F2  31AC   	fcall	_nullifyBadge_segDisplayRegister
 14676                           
 14677                           ;secret_task.c: 58: nullifyBadge_segDisplayErase(data->badge);
 14678  2CF7  0020               	movlb	0	; select bank0
 14679  2CF8  083B               	movf	secret_Init@data,w
 14680  2CF9  0086               	movwf	6
 14681  2CFA  083C               	movf	secret_Init@data+1,w
 14682  2CFB  0087               	movwf	7
 14683  2CFC  0801               	movf	1,w
 14684  2CFD  3198  2000  31AC   	fcall	_nullifyBadge_segDisplayErase
 14685                           
 14686                           ;secret_task.c: 61: data->delayTickCount = 300;
 14687  2D00  0020               	movlb	0	; select bank0
 14688  2D01  083B               	movf	secret_Init@data,w
 14689  2D02  0086               	movwf	6
 14690  2D03  083C               	movf	secret_Init@data+1,w
 14691  2D04  0087               	movwf	7
 14692  2D05  3142               	addfsr 1,2
 14693  2D06  302C               	movlw	44
 14694  2D07  3FC0               	movwi [0]fsr1
 14695  2D08  3001               	movlw	1
 14696  2D09  3FC1               	movwi [1]fsr1
 14697                           
 14698                           ;secret_task.c: 62: data->holdCountA = 0;
 14699  2D0A  083B               	movf	secret_Init@data,w
 14700  2D0B  0086               	movwf	6
 14701  2D0C  083C               	movf	secret_Init@data+1,w
 14702  2D0D  0087               	movwf	7
 14703  2D0E  3144               	addfsr 1,4
 14704  2D0F  3000               	movlw	0
 14705  2D10  3FC0               	movwi [0]fsr1
 14706  2D11  3FC1               	movwi [1]fsr1
 14707                           
 14708                           ;secret_task.c: 63: data->holdCountB = 0;
 14709  2D12  083B               	movf	secret_Init@data,w
 14710  2D13  0086               	movwf	6
 14711  2D14  083C               	movf	secret_Init@data+1,w
 14712  2D15  0087               	movwf	7
 14713  2D16  3146               	addfsr 1,6
 14714  2D17  3000               	movlw	0
 14715  2D18  3FC0               	movwi [0]fsr1
 14716  2D19  3FC1               	movwi [1]fsr1
 14717                           
 14718                           ;secret_task.c: 64: data->holdCountX = 0;
 14719  2D1A  083B               	movf	secret_Init@data,w
 14720  2D1B  0086               	movwf	6
 14721  2D1C  083C               	movf	secret_Init@data+1,w
 14722  2D1D  0087               	movwf	7
 14723  2D1E  3148               	addfsr 1,8
 14724  2D1F  3000               	movlw	0
 14725  2D20  3FC0               	movwi [0]fsr1
 14726  2D21  3FC1               	movwi [1]fsr1
 14727                           
 14728                           ;secret_task.c: 65: data->holdCountY = 0;
 14729  2D22  083B               	movf	secret_Init@data,w
 14730  2D23  0086               	movwf	6
 14731  2D24  083C               	movf	secret_Init@data+1,w
 14732  2D25  0087               	movwf	7
 14733  2D26  314A               	addfsr 1,10
 14734  2D27  3000               	movlw	0
 14735  2D28  3FC0               	movwi [0]fsr1
 14736  2D29  3FC1               	movwi [1]fsr1
 14737                           
 14738                           ;secret_task.c: 66: data->noholdCount = 0;
 14739  2D2A  083B               	movf	secret_Init@data,w
 14740  2D2B  0086               	movwf	6
 14741  2D2C  083C               	movf	secret_Init@data+1,w
 14742  2D2D  0087               	movwf	7
 14743  2D2E  314C               	addfsr 1,12
 14744  2D2F  3000               	movlw	0
 14745  2D30  3FC0               	movwi [0]fsr1
 14746  2D31  3FC1               	movwi [1]fsr1
 14747  2D32  0008               	return
 14748  2D33                     __end_of_secret_Init:	
 14749                           
 14750                           	psect	text5
 14751  1806                     __ptext5:	
 14752 ;; *************** function _locked_Init *****************
 14753 ;; Defined at:
 14754 ;;		line 99 in file "locked_task.c"
 14755 ;; Parameters:    Size  Location     Type
 14756 ;;  taskData        2   25[BANK0 ] PTR void 
 14757 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 14758 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 14759 ;; Auto vars:     Size  Location     Type
 14760 ;;  data            2   27[BANK0 ] PTR struct t_locked_task
 14761 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 14762 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 14763 ;; Return value:  Size  Location     Type
 14764 ;;                  1    wreg      void 
 14765 ;; Registers used:
 14766 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14767 ;; Tracked objects:
 14768 ;;		On entry : 0/0
 14769 ;;		On exit  : 0/0
 14770 ;;		Unchanged: 0/0
 14771 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14772 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14773 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14774 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14775 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14776 ;;Total ram usage:        4 bytes
 14777 ;; Hardware stack levels used:    1
 14778 ;; Hardware stack levels required when called:   10
 14779 ;; This function calls:
 14780 ;;		_locked_lock_leds
 14781 ;;		_nullifyBadge_segDisplayErase
 14782 ;;		_nullifyBadge_segDisplayRegister
 14783 ;;		_nullifyBadge_userLedsClr
 14784 ;;		_nullifyBadge_userLedsRegister
 14785 ;; This function is called by:
 14786 ;;		_main
 14787 ;;		_scheduler_TaskAdd
 14788 ;; This function uses a non-reentrant model
 14789 ;;
 14790                           
 14791                           
 14792                           ;psect for function _locked_Init
 14793  1806                     _locked_Init:	
 14794                           
 14795                           ;locked_task.c: 100: struct t_locked_taskData *data = (struct t_locked_taskData *) taskD
      +                          ata;
 14796                           
 14797                           ;incstack = 0
 14798                           ; Regs used in _locked_Init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14799  1806  0020               	movlb	0	; select bank0
 14800  1807  083A               	movf	locked_Init@taskData+1,w
 14801  1808  00BC               	movwf	locked_Init@data+1
 14802  1809  0839               	movf	locked_Init@taskData,w
 14803  180A  00BB               	movwf	locked_Init@data
 14804                           
 14805                           ;locked_task.c: 103: nullifyBadge_userLedsRegister(data->badge);
 14806  180B  083B               	movf	locked_Init@data,w
 14807  180C  0086               	movwf	6
 14808  180D  083C               	movf	locked_Init@data+1,w
 14809  180E  0087               	movwf	7
 14810  180F  0801               	movf	1,w
 14811  1810  31B2  22C9  3198   	fcall	_nullifyBadge_userLedsRegister
 14812                           
 14813                           ;locked_task.c: 104: nullifyBadge_userLedsClr(data->badge);
 14814  1813  0020               	movlb	0	; select bank0
 14815  1814  083B               	movf	locked_Init@data,w
 14816  1815  0086               	movwf	6
 14817  1816  083C               	movf	locked_Init@data+1,w
 14818  1817  0087               	movwf	7
 14819  1818  0801               	movf	1,w
 14820  1819  3187  27FA  3198   	fcall	_nullifyBadge_userLedsClr
 14821                           
 14822                           ;locked_task.c: 105: nullifyBadge_segDisplayRegister(data->badge);
 14823  181C  0020               	movlb	0	; select bank0
 14824  181D  083B               	movf	locked_Init@data,w
 14825  181E  0086               	movwf	6
 14826  181F  083C               	movf	locked_Init@data+1,w
 14827  1820  0087               	movwf	7
 14828  1821  0801               	movf	1,w
 14829  1822  31B1  21F2  3198   	fcall	_nullifyBadge_segDisplayRegister
 14830                           
 14831                           ;locked_task.c: 106: nullifyBadge_segDisplayErase(data->badge);
 14832  1825  0020               	movlb	0	; select bank0
 14833  1826  083B               	movf	locked_Init@data,w
 14834  1827  0086               	movwf	6
 14835  1828  083C               	movf	locked_Init@data+1,w
 14836  1829  0087               	movwf	7
 14837  182A  0801               	movf	1,w
 14838  182B  3198  2000  3198   	fcall	_nullifyBadge_segDisplayErase
 14839                           
 14840                           ;locked_task.c: 107: pw_found =0;
 14841  182E  0021               	movlb	1	; select bank1
 14842  182F  01C3               	clrf	_pw_found^(0+128)
 14843                           
 14844                           ;locked_task.c: 109: locked_lock_leds();
 14845  1830  31B3  23F5  3198   	fcall	_locked_lock_leds
 14846                           
 14847                           ;locked_task.c: 110: data->state = LOCKED_LOCKED_STATE;
 14848  1833  0020               	movlb	0	; select bank0
 14849  1834  083B               	movf	locked_Init@data,w
 14850  1835  0086               	movwf	6
 14851  1836  083C               	movf	locked_Init@data+1,w
 14852  1837  0087               	movwf	7
 14853  1838  314D               	addfsr 1,13
 14854  1839  0181               	clrf	1
 14855                           
 14856                           ;locked_task.c: 111: data->delayTickCount = 0;
 14857  183A  083B               	movf	locked_Init@data,w
 14858  183B  0086               	movwf	6
 14859  183C  083C               	movf	locked_Init@data+1,w
 14860  183D  0087               	movwf	7
 14861  183E  3141               	addfsr 1,1
 14862  183F  3000               	movlw	0
 14863  1840  3FC0               	movwi [0]fsr1
 14864  1841  3FC1               	movwi [1]fsr1
 14865                           
 14866                           ;locked_task.c: 112: data->holdCountA = 0;
 14867  1842  083B               	movf	locked_Init@data,w
 14868  1843  0086               	movwf	6
 14869  1844  083C               	movf	locked_Init@data+1,w
 14870  1845  0087               	movwf	7
 14871  1846  3143               	addfsr 1,3
 14872  1847  3000               	movlw	0
 14873  1848  3FC0               	movwi [0]fsr1
 14874  1849  3FC1               	movwi [1]fsr1
 14875                           
 14876                           ;locked_task.c: 113: data->holdCountB = 0;
 14877  184A  083B               	movf	locked_Init@data,w
 14878  184B  0086               	movwf	6
 14879  184C  083C               	movf	locked_Init@data+1,w
 14880  184D  0087               	movwf	7
 14881  184E  3145               	addfsr 1,5
 14882  184F  3000               	movlw	0
 14883  1850  3FC0               	movwi [0]fsr1
 14884  1851  3FC1               	movwi [1]fsr1
 14885                           
 14886                           ;locked_task.c: 114: data->holdCountX = 0;
 14887  1852  083B               	movf	locked_Init@data,w
 14888  1853  0086               	movwf	6
 14889  1854  083C               	movf	locked_Init@data+1,w
 14890  1855  0087               	movwf	7
 14891  1856  3147               	addfsr 1,7
 14892  1857  3000               	movlw	0
 14893  1858  3FC0               	movwi [0]fsr1
 14894  1859  3FC1               	movwi [1]fsr1
 14895                           
 14896                           ;locked_task.c: 115: data->holdCountY = 0;
 14897  185A  083B               	movf	locked_Init@data,w
 14898  185B  0086               	movwf	6
 14899  185C  083C               	movf	locked_Init@data+1,w
 14900  185D  0087               	movwf	7
 14901  185E  3149               	addfsr 1,9
 14902  185F  3000               	movlw	0
 14903  1860  3FC0               	movwi [0]fsr1
 14904  1861  3FC1               	movwi [1]fsr1
 14905                           
 14906                           ;locked_task.c: 116: data->noholdCount = 0;
 14907  1862  083B               	movf	locked_Init@data,w
 14908  1863  0086               	movwf	6
 14909  1864  083C               	movf	locked_Init@data+1,w
 14910  1865  0087               	movwf	7
 14911  1866  314B               	addfsr 1,11
 14912  1867  3000               	movlw	0
 14913  1868  3FC0               	movwi [0]fsr1
 14914  1869  3FC1               	movwi [1]fsr1
 14915  186A  0008               	return
 14916  186B                     __end_of_locked_Init:	
 14917                           
 14918                           	psect	text6
 14919  2DF4                     __ptext6:	
 14920 ;; *************** function _menu_Init *****************
 14921 ;; Defined at:
 14922 ;;		line 37 in file "menu_task.c"
 14923 ;; Parameters:    Size  Location     Type
 14924 ;;  taskData        2   25[BANK0 ] PTR void 
 14925 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 14926 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 14927 ;; Auto vars:     Size  Location     Type
 14928 ;;  data            2   27[BANK0 ] PTR struct t_menu_taskDa
 14929 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 14930 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 14931 ;; Return value:  Size  Location     Type
 14932 ;;                  1    wreg      void 
 14933 ;; Registers used:
 14934 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14935 ;; Tracked objects:
 14936 ;;		On entry : 0/0
 14937 ;;		On exit  : 0/0
 14938 ;;		Unchanged: 0/0
 14939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14940 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14941 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14942 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14943 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14944 ;;Total ram usage:        4 bytes
 14945 ;; Hardware stack levels used:    1
 14946 ;; Hardware stack levels required when called:   10
 14947 ;; This function calls:
 14948 ;;		_nullifyBadge_segDisplayErase
 14949 ;;		_nullifyBadge_segDisplayRegister
 14950 ;;		_nullifyBadge_userLedsClr
 14951 ;;		_nullifyBadge_userLedsRegister
 14952 ;; This function is called by:
 14953 ;;		_main
 14954 ;;		_scheduler_TaskAdd
 14955 ;; This function uses a non-reentrant model
 14956 ;;
 14957                           
 14958                           
 14959                           ;psect for function _menu_Init
 14960  2DF4                     _menu_Init:	
 14961                           
 14962                           ;menu_task.c: 38: struct t_menu_taskData *data = (struct t_menu_taskData *) taskData;
 14963                           
 14964                           ;incstack = 0
 14965                           ; Regs used in _menu_Init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14966  2DF4  0020               	movlb	0	; select bank0
 14967  2DF5  083A               	movf	menu_Init@taskData+1,w
 14968  2DF6  00BC               	movwf	menu_Init@data+1
 14969  2DF7  0839               	movf	menu_Init@taskData,w
 14970  2DF8  00BB               	movwf	menu_Init@data
 14971                           
 14972                           ;menu_task.c: 41: nullifyBadge_userLedsRegister(data->badge);
 14973  2DF9  083B               	movf	menu_Init@data,w
 14974  2DFA  0086               	movwf	6
 14975  2DFB  083C               	movf	menu_Init@data+1,w
 14976  2DFC  0087               	movwf	7
 14977  2DFD  0801               	movf	1,w
 14978  2DFE  31B2  22C9  31AD   	fcall	_nullifyBadge_userLedsRegister
 14979                           
 14980                           ;menu_task.c: 42: nullifyBadge_userLedsClr(data->badge);
 14981  2E01  0020               	movlb	0	; select bank0
 14982  2E02  083B               	movf	menu_Init@data,w
 14983  2E03  0086               	movwf	6
 14984  2E04  083C               	movf	menu_Init@data+1,w
 14985  2E05  0087               	movwf	7
 14986  2E06  0801               	movf	1,w
 14987  2E07  3187  27FA  31AD   	fcall	_nullifyBadge_userLedsClr
 14988                           
 14989                           ;menu_task.c: 43: nullifyBadge_segDisplayRegister(data->badge);
 14990  2E0A  0020               	movlb	0	; select bank0
 14991  2E0B  083B               	movf	menu_Init@data,w
 14992  2E0C  0086               	movwf	6
 14993  2E0D  083C               	movf	menu_Init@data+1,w
 14994  2E0E  0087               	movwf	7
 14995  2E0F  0801               	movf	1,w
 14996  2E10  31B1  21F2  31AD   	fcall	_nullifyBadge_segDisplayRegister
 14997                           
 14998                           ;menu_task.c: 44: nullifyBadge_segDisplayErase(data->badge);
 14999  2E13  0020               	movlb	0	; select bank0
 15000  2E14  083B               	movf	menu_Init@data,w
 15001  2E15  0086               	movwf	6
 15002  2E16  083C               	movf	menu_Init@data+1,w
 15003  2E17  0087               	movwf	7
 15004  2E18  0801               	movf	1,w
 15005  2E19  3198  2000  31AD   	fcall	_nullifyBadge_segDisplayErase
 15006                           
 15007                           ;menu_task.c: 47: data->delayTickCount = 50;
 15008  2E1C  0020               	movlb	0	; select bank0
 15009  2E1D  083B               	movf	menu_Init@data,w
 15010  2E1E  0086               	movwf	6
 15011  2E1F  083C               	movf	menu_Init@data+1,w
 15012  2E20  0087               	movwf	7
 15013  2E21  3142               	addfsr 1,2
 15014  2E22  3032               	movlw	50
 15015  2E23  3FC0               	movwi [0]fsr1
 15016  2E24  3000               	movlw	0
 15017  2E25  3FC1               	movwi [1]fsr1
 15018                           
 15019                           ;menu_task.c: 48: data->holdCountA = 0;
 15020  2E26  083B               	movf	menu_Init@data,w
 15021  2E27  0086               	movwf	6
 15022  2E28  083C               	movf	menu_Init@data+1,w
 15023  2E29  0087               	movwf	7
 15024  2E2A  3144               	addfsr 1,4
 15025  2E2B  3000               	movlw	0
 15026  2E2C  3FC0               	movwi [0]fsr1
 15027  2E2D  3FC1               	movwi [1]fsr1
 15028                           
 15029                           ;menu_task.c: 49: data->holdCountB = 0;
 15030  2E2E  083B               	movf	menu_Init@data,w
 15031  2E2F  0086               	movwf	6
 15032  2E30  083C               	movf	menu_Init@data+1,w
 15033  2E31  0087               	movwf	7
 15034  2E32  3146               	addfsr 1,6
 15035  2E33  3000               	movlw	0
 15036  2E34  3FC0               	movwi [0]fsr1
 15037  2E35  3FC1               	movwi [1]fsr1
 15038                           
 15039                           ;menu_task.c: 50: data->holdCountX = 0;
 15040  2E36  083B               	movf	menu_Init@data,w
 15041  2E37  0086               	movwf	6
 15042  2E38  083C               	movf	menu_Init@data+1,w
 15043  2E39  0087               	movwf	7
 15044  2E3A  3148               	addfsr 1,8
 15045  2E3B  3000               	movlw	0
 15046  2E3C  3FC0               	movwi [0]fsr1
 15047  2E3D  3FC1               	movwi [1]fsr1
 15048                           
 15049                           ;menu_task.c: 51: data->holdCountY = 0;
 15050  2E3E  083B               	movf	menu_Init@data,w
 15051  2E3F  0086               	movwf	6
 15052  2E40  083C               	movf	menu_Init@data+1,w
 15053  2E41  0087               	movwf	7
 15054  2E42  314A               	addfsr 1,10
 15055  2E43  3000               	movlw	0
 15056  2E44  3FC0               	movwi [0]fsr1
 15057  2E45  3FC1               	movwi [1]fsr1
 15058                           
 15059                           ;menu_task.c: 52: data->noholdCount = 0;
 15060  2E46  083B               	movf	menu_Init@data,w
 15061  2E47  0086               	movwf	6
 15062  2E48  083C               	movf	menu_Init@data+1,w
 15063  2E49  0087               	movwf	7
 15064  2E4A  314C               	addfsr 1,12
 15065  2E4B  3000               	movlw	0
 15066  2E4C  3FC0               	movwi [0]fsr1
 15067  2E4D  3FC1               	movwi [1]fsr1
 15068                           
 15069                           ;menu_task.c: 54: menu_option_idx = 0;
 15070  2E4E  0021               	movlb	1	; select bank1
 15071  2E4F  01B6               	clrf	_menu_option_idx^(0+128)
 15072  2E50  01B7               	clrf	(_menu_option_idx+1)^(0+128)
 15073                           
 15074                           ;menu_task.c: 56: menu_option_size = sizeof(menu_option)/sizeof(menu_option[0]);
 15075  2E51  3005               	movlw	5
 15076  2E52  00B4               	movwf	_menu_option_size^(0+128)
 15077  2E53  3000               	movlw	0
 15078  2E54  00B5               	movwf	(_menu_option_size^(0+128)+1)
 15079  2E55  0008               	return
 15080  2E56                     __end_of_menu_Init:	
 15081                           
 15082                           	psect	text7
 15083  0764                     __ptext7:	
 15084 ;; *************** function _flashy_Init *****************
 15085 ;; Defined at:
 15086 ;;		line 65 in file "flashy_task.c"
 15087 ;; Parameters:    Size  Location     Type
 15088 ;;  taskData        2   25[BANK0 ] PTR void 
 15089 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 15090 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 15091 ;; Auto vars:     Size  Location     Type
 15092 ;;  data            2   27[BANK0 ] PTR struct t_flashy_task
 15093 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 15094 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 15095 ;; Return value:  Size  Location     Type
 15096 ;;                  1    wreg      void 
 15097 ;; Registers used:
 15098 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15099 ;; Tracked objects:
 15100 ;;		On entry : 0/0
 15101 ;;		On exit  : 0/0
 15102 ;;		Unchanged: 0/0
 15103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15104 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15105 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15106 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15107 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15108 ;;Total ram usage:        4 bytes
 15109 ;; Hardware stack levels used:    1
 15110 ;; Hardware stack levels required when called:   10
 15111 ;; This function calls:
 15112 ;;		_nullifyBadge_segDisplayErase
 15113 ;;		_nullifyBadge_segDisplayRegister
 15114 ;;		_nullifyBadge_userLedsClr
 15115 ;;		_nullifyBadge_userLedsRegister
 15116 ;; This function is called by:
 15117 ;;		_main
 15118 ;;		_scheduler_TaskAdd
 15119 ;; This function uses a non-reentrant model
 15120 ;;
 15121                           
 15122                           
 15123                           ;psect for function _flashy_Init
 15124  0764                     _flashy_Init:	
 15125                           
 15126                           ;flashy_task.c: 66: struct t_flashy_taskData *data = (struct t_flashy_taskData *) taskDa
      +                          ta;
 15127                           
 15128                           ;incstack = 0
 15129                           ; Regs used in _flashy_Init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15130  0764  0020               	movlb	0	; select bank0
 15131  0765  083A               	movf	flashy_Init@taskData+1,w
 15132  0766  00BC               	movwf	flashy_Init@data+1
 15133  0767  0839               	movf	flashy_Init@taskData,w
 15134  0768  00BB               	movwf	flashy_Init@data
 15135                           
 15136                           ;flashy_task.c: 69: nullifyBadge_userLedsRegister(data->badge);
 15137  0769  083B               	movf	flashy_Init@data,w
 15138  076A  0086               	movwf	6
 15139  076B  083C               	movf	flashy_Init@data+1,w
 15140  076C  0087               	movwf	7
 15141  076D  0801               	movf	1,w
 15142  076E  31B2  22C9  3187   	fcall	_nullifyBadge_userLedsRegister
 15143                           
 15144                           ;flashy_task.c: 70: nullifyBadge_userLedsClr(data->badge);
 15145  0771  0020               	movlb	0	; select bank0
 15146  0772  083B               	movf	flashy_Init@data,w
 15147  0773  0086               	movwf	6
 15148  0774  083C               	movf	flashy_Init@data+1,w
 15149  0775  0087               	movwf	7
 15150  0776  0801               	movf	1,w
 15151  0777  3187  27FA  3187   	fcall	_nullifyBadge_userLedsClr
 15152                           
 15153                           ;flashy_task.c: 71: nullifyBadge_segDisplayRegister(data->badge);
 15154  077A  0020               	movlb	0	; select bank0
 15155  077B  083B               	movf	flashy_Init@data,w
 15156  077C  0086               	movwf	6
 15157  077D  083C               	movf	flashy_Init@data+1,w
 15158  077E  0087               	movwf	7
 15159  077F  0801               	movf	1,w
 15160  0780  31B1  21F2  3187   	fcall	_nullifyBadge_segDisplayRegister
 15161                           
 15162                           ;flashy_task.c: 72: nullifyBadge_segDisplayErase(data->badge);
 15163  0783  0020               	movlb	0	; select bank0
 15164  0784  083B               	movf	flashy_Init@data,w
 15165  0785  0086               	movwf	6
 15166  0786  083C               	movf	flashy_Init@data+1,w
 15167  0787  0087               	movwf	7
 15168  0788  0801               	movf	1,w
 15169  0789  3198  2000  3187   	fcall	_nullifyBadge_segDisplayErase
 15170                           
 15171                           ;flashy_task.c: 78: data->delayTickCount = 35;
 15172  078C  0020               	movlb	0	; select bank0
 15173  078D  083B               	movf	flashy_Init@data,w
 15174  078E  0086               	movwf	6
 15175  078F  083C               	movf	flashy_Init@data+1,w
 15176  0790  0087               	movwf	7
 15177  0791  3141               	addfsr 1,1
 15178  0792  3023               	movlw	35
 15179  0793  3FC0               	movwi [0]fsr1
 15180  0794  3000               	movlw	0
 15181  0795  3FC1               	movwi [1]fsr1
 15182                           
 15183                           ;flashy_task.c: 79: data->displayTickCount = 0;
 15184  0796  083B               	movf	flashy_Init@data,w
 15185  0797  0086               	movwf	6
 15186  0798  083C               	movf	flashy_Init@data+1,w
 15187  0799  0087               	movwf	7
 15188  079A  3144               	addfsr 1,4
 15189  079B  3000               	movlw	0
 15190  079C  3FC0               	movwi [0]fsr1
 15191  079D  3FC1               	movwi [1]fsr1
 15192                           
 15193                           ;flashy_task.c: 82: data->holdCountA = 0;
 15194  079E  083B               	movf	flashy_Init@data,w
 15195  079F  0086               	movwf	6
 15196  07A0  083C               	movf	flashy_Init@data+1,w
 15197  07A1  0087               	movwf	7
 15198  07A2  314A               	addfsr 1,10
 15199  07A3  3000               	movlw	0
 15200  07A4  3FC0               	movwi [0]fsr1
 15201  07A5  3FC1               	movwi [1]fsr1
 15202                           
 15203                           ;flashy_task.c: 83: data->holdCountB = 0;
 15204  07A6  083B               	movf	flashy_Init@data,w
 15205  07A7  0086               	movwf	6
 15206  07A8  083C               	movf	flashy_Init@data+1,w
 15207  07A9  0087               	movwf	7
 15208  07AA  314C               	addfsr 1,12
 15209  07AB  3000               	movlw	0
 15210  07AC  3FC0               	movwi [0]fsr1
 15211  07AD  3FC1               	movwi [1]fsr1
 15212                           
 15213                           ;flashy_task.c: 84: data->holdCountX = 0;
 15214  07AE  083B               	movf	flashy_Init@data,w
 15215  07AF  0086               	movwf	6
 15216  07B0  083C               	movf	flashy_Init@data+1,w
 15217  07B1  0087               	movwf	7
 15218  07B2  314E               	addfsr 1,14
 15219  07B3  3000               	movlw	0
 15220  07B4  3FC0               	movwi [0]fsr1
 15221  07B5  3FC1               	movwi [1]fsr1
 15222                           
 15223                           ;flashy_task.c: 85: data->holdCountY = 0;
 15224  07B6  083B               	movf	flashy_Init@data,w
 15225  07B7  0086               	movwf	6
 15226  07B8  083C               	movf	flashy_Init@data+1,w
 15227  07B9  0087               	movwf	7
 15228  07BA  3150               	addfsr 1,16
 15229  07BB  3000               	movlw	0
 15230  07BC  3FC0               	movwi [0]fsr1
 15231  07BD  3FC1               	movwi [1]fsr1
 15232                           
 15233                           ;flashy_task.c: 86: data->holdCountXY = 0;
 15234  07BE  083B               	movf	flashy_Init@data,w
 15235  07BF  0086               	movwf	6
 15236  07C0  083C               	movf	flashy_Init@data+1,w
 15237  07C1  0087               	movwf	7
 15238  07C2  3152               	addfsr 1,18
 15239  07C3  3000               	movlw	0
 15240  07C4  3FC0               	movwi [0]fsr1
 15241  07C5  3FC1               	movwi [1]fsr1
 15242                           
 15243                           ;flashy_task.c: 87: data->holdCountAY = 0;
 15244  07C6  083B               	movf	flashy_Init@data,w
 15245  07C7  0086               	movwf	6
 15246  07C8  083C               	movf	flashy_Init@data+1,w
 15247  07C9  0087               	movwf	7
 15248  07CA  3154               	addfsr 1,20
 15249  07CB  3000               	movlw	0
 15250  07CC  3FC0               	movwi [0]fsr1
 15251  07CD  3FC1               	movwi [1]fsr1
 15252                           
 15253                           ;flashy_task.c: 88: data->holdCountAX = 0;
 15254  07CE  083B               	movf	flashy_Init@data,w
 15255  07CF  0086               	movwf	6
 15256  07D0  083C               	movf	flashy_Init@data+1,w
 15257  07D1  0087               	movwf	7
 15258  07D2  3156               	addfsr 1,22
 15259  07D3  3000               	movlw	0
 15260  07D4  3FC0               	movwi [0]fsr1
 15261  07D5  3FC1               	movwi [1]fsr1
 15262                           
 15263                           ;flashy_task.c: 89: data->noholdCount = 0;
 15264  07D6  083B               	movf	flashy_Init@data,w
 15265  07D7  0086               	movwf	6
 15266  07D8  083C               	movf	flashy_Init@data+1,w
 15267  07D9  0087               	movwf	7
 15268  07DA  315C               	addfsr 1,28
 15269  07DB  3000               	movlw	0
 15270  07DC  3FC0               	movwi [0]fsr1
 15271  07DD  3FC1               	movwi [1]fsr1
 15272                           
 15273                           ;flashy_task.c: 91: flashy_leds_idx = 0;
 15274  07DE  0021               	movlb	1	; select bank1
 15275  07DF  01B2               	clrf	_flashy_leds_idx^(0+128)
 15276  07E0  01B3               	clrf	(_flashy_leds_idx+1)^(0+128)
 15277                           
 15278                           ;flashy_task.c: 92: data->led_state = FLASHY_STATE_LED_ROUNDABOUT;
 15279  07E1  0020               	movlb	0	; select bank0
 15280  07E2  083B               	movf	flashy_Init@data,w
 15281  07E3  0086               	movwf	6
 15282  07E4  083C               	movf	flashy_Init@data+1,w
 15283  07E5  0087               	movwf	7
 15284  07E6  3143               	addfsr 1,3
 15285  07E7  0181               	clrf	1
 15286                           
 15287                           ;flashy_task.c: 93: flashy_option_idx = 0;
 15288  07E8  0021               	movlb	1	; select bank1
 15289  07E9  01A8               	clrf	_flashy_option_idx^(0+128)
 15290  07EA  01A9               	clrf	(_flashy_option_idx+1)^(0+128)
 15291                           
 15292                           ;flashy_task.c: 95: flashy_option_size = sizeof(flashy_option)/sizeof(flashy_option[0]);
 15293  07EB  301C               	movlw	28
 15294  07EC  00A6               	movwf	_flashy_option_size^(0+128)
 15295  07ED  3000               	movlw	0
 15296  07EE  00A7               	movwf	(_flashy_option_size^(0+128)+1)
 15297                           
 15298                           ;flashy_task.c: 97: flashy_sparkle_rate =50;
 15299  07EF  3032               	movlw	50
 15300  07F0  00AE               	movwf	_flashy_sparkle_rate^(0+128)
 15301  07F1  3000               	movlw	0
 15302  07F2  00AF               	movwf	(_flashy_sparkle_rate^(0+128)+1)
 15303                           
 15304                           ;flashy_task.c: 98: flashy_scroll_rate=50;
 15305  07F3  3032               	movlw	50
 15306  07F4  00AC               	movwf	_flashy_scroll_rate^(0+128)
 15307  07F5  3000               	movlw	0
 15308  07F6  00AD               	movwf	(_flashy_scroll_rate^(0+128)+1)
 15309                           
 15310                           ;flashy_task.c: 99: flashy_leds_state_track =0;
 15311  07F7  01B0               	clrf	_flashy_leds_state_track^(0+128)
 15312  07F8  01B1               	clrf	(_flashy_leds_state_track+1)^(0+128)
 15313  07F9  0008               	return
 15314  07FA                     __end_of_flashy_Init:	
 15315                           
 15316                           	psect	text8
 15317  2E56                     __ptext8:	
 15318 ;; *************** function _slot_Init *****************
 15319 ;; Defined at:
 15320 ;;		line 29 in file "slot_task.c"
 15321 ;; Parameters:    Size  Location     Type
 15322 ;;  taskData        2   25[BANK0 ] PTR void 
 15323 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 15324 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 15325 ;; Auto vars:     Size  Location     Type
 15326 ;;  data            2   27[BANK0 ] PTR struct t_slot_taskDa
 15327 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 15328 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 15329 ;; Return value:  Size  Location     Type
 15330 ;;                  1    wreg      void 
 15331 ;; Registers used:
 15332 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15333 ;; Tracked objects:
 15334 ;;		On entry : 0/0
 15335 ;;		On exit  : 0/0
 15336 ;;		Unchanged: 0/0
 15337 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15338 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15339 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15340 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15341 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15342 ;;Total ram usage:        4 bytes
 15343 ;; Hardware stack levels used:    1
 15344 ;; Hardware stack levels required when called:   10
 15345 ;; This function calls:
 15346 ;;		_nullifyBadge_segDisplayErase
 15347 ;;		_nullifyBadge_segDisplayRegister
 15348 ;;		_nullifyBadge_userLedsClr
 15349 ;;		_nullifyBadge_userLedsRegister
 15350 ;;		_slot_Setup
 15351 ;; This function is called by:
 15352 ;;		_main
 15353 ;;		_scheduler_TaskAdd
 15354 ;; This function uses a non-reentrant model
 15355 ;;
 15356                           
 15357                           
 15358                           ;psect for function _slot_Init
 15359  2E56                     _slot_Init:	
 15360                           
 15361                           ;slot_task.c: 30: struct t_slot_taskData *data = (struct t_slot_taskData *) taskData;
 15362                           
 15363                           ;incstack = 0
 15364                           ; Regs used in _slot_Init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15365  2E56  0020               	movlb	0	; select bank0
 15366  2E57  083A               	movf	slot_Init@taskData+1,w
 15367  2E58  00BC               	movwf	slot_Init@data+1
 15368  2E59  0839               	movf	slot_Init@taskData,w
 15369  2E5A  00BB               	movwf	slot_Init@data
 15370                           
 15371                           ;slot_task.c: 33: nullifyBadge_userLedsRegister(data->badge);
 15372  2E5B  083B               	movf	slot_Init@data,w
 15373  2E5C  0086               	movwf	6
 15374  2E5D  083C               	movf	slot_Init@data+1,w
 15375  2E5E  0087               	movwf	7
 15376  2E5F  0801               	movf	1,w
 15377  2E60  31B2  22C9  31AE   	fcall	_nullifyBadge_userLedsRegister
 15378                           
 15379                           ;slot_task.c: 34: nullifyBadge_userLedsClr(data->badge);
 15380  2E63  0020               	movlb	0	; select bank0
 15381  2E64  083B               	movf	slot_Init@data,w
 15382  2E65  0086               	movwf	6
 15383  2E66  083C               	movf	slot_Init@data+1,w
 15384  2E67  0087               	movwf	7
 15385  2E68  0801               	movf	1,w
 15386  2E69  3187  27FA  31AE   	fcall	_nullifyBadge_userLedsClr
 15387                           
 15388                           ;slot_task.c: 35: nullifyBadge_segDisplayRegister(data->badge);
 15389  2E6C  0020               	movlb	0	; select bank0
 15390  2E6D  083B               	movf	slot_Init@data,w
 15391  2E6E  0086               	movwf	6
 15392  2E6F  083C               	movf	slot_Init@data+1,w
 15393  2E70  0087               	movwf	7
 15394  2E71  0801               	movf	1,w
 15395  2E72  31B1  21F2  31AE   	fcall	_nullifyBadge_segDisplayRegister
 15396                           
 15397                           ;slot_task.c: 36: nullifyBadge_segDisplayErase(data->badge);
 15398  2E75  0020               	movlb	0	; select bank0
 15399  2E76  083B               	movf	slot_Init@data,w
 15400  2E77  0086               	movwf	6
 15401  2E78  083C               	movf	slot_Init@data+1,w
 15402  2E79  0087               	movwf	7
 15403  2E7A  0801               	movf	1,w
 15404  2E7B  3198  2000  31AE   	fcall	_nullifyBadge_segDisplayErase
 15405                           
 15406                           ;slot_task.c: 39: data->displayTickCount = 0;
 15407  2E7E  0020               	movlb	0	; select bank0
 15408  2E7F  083B               	movf	slot_Init@data,w
 15409  2E80  0086               	movwf	6
 15410  2E81  083C               	movf	slot_Init@data+1,w
 15411  2E82  0087               	movwf	7
 15412  2E83  3143               	addfsr 1,3
 15413  2E84  3000               	movlw	0
 15414  2E85  3FC0               	movwi [0]fsr1
 15415  2E86  3FC1               	movwi [1]fsr1
 15416                           
 15417                           ;slot_task.c: 40: data->holdCountA = 0;
 15418  2E87  083B               	movf	slot_Init@data,w
 15419  2E88  0086               	movwf	6
 15420  2E89  083C               	movf	slot_Init@data+1,w
 15421  2E8A  0087               	movwf	7
 15422  2E8B  315F               	addfsr 1,31
 15423  2E8C  3000               	movlw	0
 15424  2E8D  3FC0               	movwi [0]fsr1
 15425  2E8E  3FC1               	movwi [1]fsr1
 15426                           
 15427                           ;slot_task.c: 41: data->holdCountB = 0;
 15428  2E8F  083B               	movf	slot_Init@data,w
 15429  2E90  3E21               	addlw	33
 15430  2E91  0086               	movwf	6
 15431  2E92  3000               	movlw	0
 15432  2E93  3D3C               	addwfc	slot_Init@data+1,w
 15433  2E94  0087               	movwf	7
 15434  2E95  3000               	movlw	0
 15435  2E96  3FC0               	movwi [0]fsr1
 15436  2E97  3FC1               	movwi [1]fsr1
 15437                           
 15438                           ;slot_task.c: 42: data->holdCountX = 0;
 15439  2E98  083B               	movf	slot_Init@data,w
 15440  2E99  3E23               	addlw	35
 15441  2E9A  0086               	movwf	6
 15442  2E9B  3000               	movlw	0
 15443  2E9C  3D3C               	addwfc	slot_Init@data+1,w
 15444  2E9D  0087               	movwf	7
 15445  2E9E  3000               	movlw	0
 15446  2E9F  3FC0               	movwi [0]fsr1
 15447  2EA0  3FC1               	movwi [1]fsr1
 15448                           
 15449                           ;slot_task.c: 43: data->holdCountY = 0;
 15450  2EA1  083B               	movf	slot_Init@data,w
 15451  2EA2  3E25               	addlw	37
 15452  2EA3  0086               	movwf	6
 15453  2EA4  3000               	movlw	0
 15454  2EA5  3D3C               	addwfc	slot_Init@data+1,w
 15455  2EA6  0087               	movwf	7
 15456  2EA7  3000               	movlw	0
 15457  2EA8  3FC0               	movwi [0]fsr1
 15458  2EA9  3FC1               	movwi [1]fsr1
 15459                           
 15460                           ;slot_task.c: 44: data->noholdCount = 0;
 15461  2EAA  083B               	movf	slot_Init@data,w
 15462  2EAB  3E27               	addlw	39
 15463  2EAC  0086               	movwf	6
 15464  2EAD  3000               	movlw	0
 15465  2EAE  3D3C               	addwfc	slot_Init@data+1,w
 15466  2EAF  0087               	movwf	7
 15467  2EB0  3000               	movlw	0
 15468  2EB1  3FC0               	movwi [0]fsr1
 15469  2EB2  3FC1               	movwi [1]fsr1
 15470                           
 15471                           ;slot_task.c: 45: slot_Setup(data);
 15472  2EB3  083C               	movf	slot_Init@data+1,w
 15473  2EB4  00B0               	movwf	slot_Setup@taskData+1
 15474  2EB5  083B               	movf	slot_Init@data,w
 15475  2EB6  00AF               	movwf	slot_Setup@taskData
 15476  2EB7  31AB  23DA         	fcall	_slot_Setup
 15477  2EB9  0008               	return
 15478  2EBA                     __end_of_slot_Init:	
 15479                           
 15480                           	psect	text9
 15481  32C9                     __ptext9:	
 15482 ;; *************** function _nullifyBadge_userLedsRegister *****************
 15483 ;; Defined at:
 15484 ;;		line 133 in file "nullifyBadge.c"
 15485 ;; Parameters:    Size  Location     Type
 15486 ;;  badge           1    wreg     PTR struct t_nullifyBadg
 15487 ;;		 -> badge_inst(18), 
 15488 ;; Auto vars:     Size  Location     Type
 15489 ;;  badge           1    1[COMMON] PTR struct t_nullifyBadg
 15490 ;;		 -> badge_inst(18), 
 15491 ;; Return value:  Size  Location     Type
 15492 ;;                  1    wreg      char 
 15493 ;; Registers used:
 15494 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15495 ;; Tracked objects:
 15496 ;;		On entry : 0/0
 15497 ;;		On exit  : 0/0
 15498 ;;		Unchanged: 0/0
 15499 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15500 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15501 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15502 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15503 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15504 ;;Total ram usage:        1 bytes
 15505 ;; Hardware stack levels used:    1
 15506 ;; Hardware stack levels required when called:    4
 15507 ;; This function calls:
 15508 ;;		Nothing
 15509 ;; This function is called by:
 15510 ;;		_menu_Init
 15511 ;;		_flashy_Init
 15512 ;;		_locked_Init
 15513 ;;		_secret_Init
 15514 ;;		_slot_Init
 15515 ;;		_matrix_Init
 15516 ;; This function uses a non-reentrant model
 15517 ;;
 15518                           
 15519                           
 15520                           ;psect for function _nullifyBadge_userLedsRegister
 15521  32C9                     _nullifyBadge_userLedsRegister:	
 15522                           
 15523                           ;incstack = 0
 15524                           ; Regs used in _nullifyBadge_userLedsRegister: [wreg+fsr1l+fsr1h+status,2+status,0]
 15525                           ;nullifyBadge_userLedsRegister@badge stored from wreg
 15526  32C9  00F1               	movwf	nullifyBadge_userLedsRegister@badge
 15527                           
 15528                           ;nullifyBadge.c: 134: if (badge->registeredHw & HW_USER_LEDS) {
 15529  32CA  0871               	movf	nullifyBadge_userLedsRegister@badge,w
 15530  32CB  3E11               	addlw	17
 15531  32CC  0086               	movwf	6
 15532  32CD  3001               	movlw	1	; select bank2/3
 15533  32CE  0087               	movwf	7
 15534  32CF  1801               	btfsc	1,0
 15535  32D0  0008               	return
 15536                           
 15537                           ;nullifyBadge.c: 137: else {
 15538                           ;nullifyBadge.c: 138: badge->registeredHw |= (1 << HW_USER_LEDS);
 15539                           
 15540                           ;nullifyBadge.c: 136: }
 15541                           
 15542                           ;nullifyBadge.c: 135: return -1;
 15543                           ;	Return value of _nullifyBadge_userLedsRegister is never used
 15544  32D1  0871               	movf	nullifyBadge_userLedsRegister@badge,w
 15545  32D2  3E11               	addlw	17
 15546  32D3  0086               	movwf	6
 15547  32D4  3001               	movlw	1	; select bank2/3
 15548  32D5  0087               	movwf	7
 15549  32D6  1481               	bsf	1,1
 15550                           
 15551                           ;nullifyBadge.c: 139: return 0;
 15552                           ;	Return value of _nullifyBadge_userLedsRegister is never used
 15553  32D7  0008               	return
 15554  32D8                     __end_of_nullifyBadge_userLedsRegister:	
 15555                           
 15556                           	psect	text10
 15557  31F2                     __ptext10:	
 15558 ;; *************** function _nullifyBadge_segDisplayRegister *****************
 15559 ;; Defined at:
 15560 ;;		line 68 in file "nullifyBadge.c"
 15561 ;; Parameters:    Size  Location     Type
 15562 ;;  badge           1    wreg     PTR struct t_nullifyBadg
 15563 ;;		 -> badge_inst(18), 
 15564 ;; Auto vars:     Size  Location     Type
 15565 ;;  badge           1    1[COMMON] PTR struct t_nullifyBadg
 15566 ;;		 -> badge_inst(18), 
 15567 ;; Return value:  Size  Location     Type
 15568 ;;                  1    wreg      char 
 15569 ;; Registers used:
 15570 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15571 ;; Tracked objects:
 15572 ;;		On entry : 0/0
 15573 ;;		On exit  : 0/0
 15574 ;;		Unchanged: 0/0
 15575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15576 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15577 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15578 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15579 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15580 ;;Total ram usage:        1 bytes
 15581 ;; Hardware stack levels used:    1
 15582 ;; Hardware stack levels required when called:    4
 15583 ;; This function calls:
 15584 ;;		Nothing
 15585 ;; This function is called by:
 15586 ;;		_menu_Init
 15587 ;;		_flashy_Init
 15588 ;;		_locked_Init
 15589 ;;		_secret_Init
 15590 ;;		_slot_Init
 15591 ;;		_matrix_Init
 15592 ;;		_fadeDisplay_Init
 15593 ;; This function uses a non-reentrant model
 15594 ;;
 15595                           
 15596                           
 15597                           ;psect for function _nullifyBadge_segDisplayRegister
 15598  31F2                     _nullifyBadge_segDisplayRegister:	
 15599                           
 15600                           ;incstack = 0
 15601                           ; Regs used in _nullifyBadge_segDisplayRegister: [wreg+fsr1l+fsr1h+status,2+status,0]
 15602                           ;nullifyBadge_segDisplayRegister@badge stored from wreg
 15603  31F2  00F1               	movwf	nullifyBadge_segDisplayRegister@badge
 15604                           
 15605                           ;nullifyBadge.c: 72: else {
 15606                           ;nullifyBadge.c: 73: badge->registeredHw |= (1 << HW_SEG_DISPLAY);
 15607                           
 15608                           ;nullifyBadge.c: 71: }
 15609                           
 15610                           ;nullifyBadge.c: 70: return -1;
 15611                           ;	Return value of _nullifyBadge_segDisplayRegister is never used
 15612                           
 15613                           ;nullifyBadge.c: 69: if (badge->registeredHw & HW_SEG_DISPLAY) {
 15614  31F3  0871               	movf	nullifyBadge_segDisplayRegister@badge,w
 15615  31F4  3E11               	addlw	17
 15616  31F5  0086               	movwf	6
 15617  31F6  3001               	movlw	1	; select bank2/3
 15618  31F7  0087               	movwf	7
 15619  31F8  1401               	bsf	1,0
 15620                           
 15621                           ;nullifyBadge.c: 74: return 0;
 15622                           ;	Return value of _nullifyBadge_segDisplayRegister is never used
 15623  31F9  0008               	return
 15624  31FA                     __end_of_nullifyBadge_segDisplayRegister:	
 15625                           
 15626                           	psect	text11
 15627  3410                     __ptext11:	
 15628 ;; *************** function _scheduler_Init *****************
 15629 ;; Defined at:
 15630 ;;		line 27 in file "cooperative_scheduler.c"
 15631 ;; Parameters:    Size  Location     Type
 15632 ;;  scheduler       1    wreg     PTR struct t_scheduler
 15633 ;;		 -> schedulerInst(18), 
 15634 ;; Auto vars:     Size  Location     Type
 15635 ;;  scheduler       1    2[COMMON] PTR struct t_scheduler
 15636 ;;		 -> schedulerInst(18), 
 15637 ;;  k               1    3[COMMON] unsigned char 
 15638 ;; Return value:  Size  Location     Type
 15639 ;;                  1    wreg      void 
 15640 ;; Registers used:
 15641 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15642 ;; Tracked objects:
 15643 ;;		On entry : 0/0
 15644 ;;		On exit  : 0/0
 15645 ;;		Unchanged: 0/0
 15646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15647 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15648 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15649 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15650 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15651 ;;Total ram usage:        3 bytes
 15652 ;; Hardware stack levels used:    1
 15653 ;; Hardware stack levels required when called:    4
 15654 ;; This function calls:
 15655 ;;		Nothing
 15656 ;; This function is called by:
 15657 ;;		_main
 15658 ;; This function uses a non-reentrant model
 15659 ;;
 15660                           
 15661                           
 15662                           ;psect for function _scheduler_Init
 15663  3410                     _scheduler_Init:	
 15664                           
 15665                           ;incstack = 0
 15666                           ; Regs used in _scheduler_Init: [wreg+fsr1l+fsr1h+status,2+status,0]
 15667                           ;scheduler_Init@scheduler stored from wreg
 15668  3410  00F2               	movwf	scheduler_Init@scheduler
 15669                           
 15670                           ;cooperative_scheduler.c: 28: scheduler->taskEntryVector = 0x0;
 15671  3411  0872               	movf	scheduler_Init@scheduler,w
 15672  3412  3E10               	addlw	16
 15673  3413  0086               	movwf	6
 15674  3414  3001               	movlw	1	; select bank2/3
 15675  3415  0087               	movwf	7
 15676  3416  3000               	movlw	0
 15677  3417  3FC0               	movwi [0]fsr1
 15678  3418  3FC1               	movwi [1]fsr1
 15679                           
 15680                           ;cooperative_scheduler.c: 29: u8 k;
 15681                           ;cooperative_scheduler.c: 31: for (k = 0; k < 16; k++) {
 15682  3419  01F3               	clrf	scheduler_Init@k
 15683  341A                     L1:	
 15684  341A  3010               	movlw	16
 15685  341B  0273               	subwf	scheduler_Init@k,w
 15686  341C  1803               	btfsc	3,0
 15687  341D  0008               	return
 15688                           
 15689                           ;cooperative_scheduler.c: 32: scheduler->tasks[k] = (0);
 15690  341E  0873               	movf	scheduler_Init@k,w
 15691  341F  0772               	addwf	scheduler_Init@scheduler,w
 15692  3420  00F1               	movwf	??_scheduler_Init
 15693  3421  0871               	movf	??_scheduler_Init,w
 15694  3422  0086               	movwf	6
 15695  3423  3001               	movlw	1	; select bank2/3
 15696  3424  0087               	movwf	7
 15697  3425  0181               	clrf	1
 15698  3426  3001               	movlw	1
 15699  3427  00F1               	movwf	??_scheduler_Init
 15700  3428  0871               	movf	??_scheduler_Init,w
 15701  3429  07F3               	addwf	scheduler_Init@k,f
 15702  342A  2C1A               	goto	L1
 15703  342B                     __end_of_scheduler_Init:	
 15704                           
 15705                           	psect	text12
 15706  2306                     __ptext12:	
 15707 ;; *************** function _schedulerExecute *****************
 15708 ;; Defined at:
 15709 ;;		line 77 in file "cooperative_scheduler.c"
 15710 ;; Parameters:    Size  Location     Type
 15711 ;;  scheduler       1    wreg     PTR struct t_scheduler
 15712 ;;		 -> schedulerInst(18), 
 15713 ;; Auto vars:     Size  Location     Type
 15714 ;;  scheduler       1    6[BANK1 ] PTR struct t_scheduler
 15715 ;;		 -> schedulerInst(18), 
 15716 ;;  tickDelta       2    4[BANK1 ] unsigned int 
 15717 ;;  taskLastSyst    2    2[BANK1 ] unsigned int 
 15718 ;;  currentSyste    2    0[BANK1 ] unsigned int 
 15719 ;;  k               1    7[BANK1 ] unsigned char 
 15720 ;; Return value:  Size  Location     Type
 15721 ;;                  1    wreg      void 
 15722 ;; Registers used:
 15723 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15724 ;; Tracked objects:
 15725 ;;		On entry : 0/0
 15726 ;;		On exit  : 0/0
 15727 ;;		Unchanged: 0/0
 15728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15729 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15730 ;;      Locals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15731 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15732 ;;      Totals:         0       6       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15733 ;;Total ram usage:       14 bytes
 15734 ;; Hardware stack levels used:    1
 15735 ;; Hardware stack levels required when called:   14
 15736 ;; This function calls:
 15737 ;;		_TMR0_Read16bitTimer
 15738 ;;		_scheduler_TaskRun
 15739 ;; This function is called by:
 15740 ;;		_main
 15741 ;; This function uses a non-reentrant model
 15742 ;;
 15743                           
 15744                           
 15745                           ;psect for function _schedulerExecute
 15746  2306                     _schedulerExecute:	
 15747                           
 15748                           ;incstack = 0
 15749                           ; Regs used in _schedulerExecute: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15750                           ;schedulerExecute@scheduler stored from wreg
 15751  2306  0021               	movlb	1	; select bank1
 15752  2307  00DC               	movwf	schedulerExecute@scheduler^(0+128)
 15753                           
 15754                           ;cooperative_scheduler.c: 78: u16 currentSystemTick;
 15755                           ;cooperative_scheduler.c: 79: u16 taskLastSystemTick;
 15756                           ;cooperative_scheduler.c: 80: u16 tickDelta;
 15757                           ;cooperative_scheduler.c: 81: u8 k;
 15758                           ;cooperative_scheduler.c: 83: for (k = 0; k < 16; k++) {
 15759  2308  01DD               	clrf	schedulerExecute@k^(0+128)
 15760  2309                     L2:	
 15761  2309  3010               	movlw	16
 15762  230A  025D               	subwf	schedulerExecute@k^(0+128),w
 15763  230B  1803               	btfsc	3,0
 15764  230C  0008               	return
 15765                           
 15766                           ;cooperative_scheduler.c: 86: if (!(scheduler->taskEntryVector & (1 << k)) ) {
 15767  230D  085C               	movf	schedulerExecute@scheduler^(0+128),w
 15768  230E  3E10               	addlw	16
 15769  230F  0086               	movwf	6
 15770  2310  3001               	movlw	1	; select bank2/3
 15771  2311  0087               	movwf	7
 15772  2312  3F40               	moviw [0]fsr1
 15773  2313  0020               	movlb	0	; select bank0
 15774  2314  00E8               	movwf	??_schedulerExecute
 15775  2315  3F41               	moviw [1]fsr1
 15776  2316  00E9               	movwf	??_schedulerExecute+1
 15777  2317  3001               	movlw	1
 15778  2318  00EA               	movwf	??_schedulerExecute+2
 15779  2319  3000               	movlw	0
 15780  231A  00EB               	movwf	??_schedulerExecute+3
 15781  231B  0021               	movlb	1	; select bank1
 15782  231C  0A5D               	incf	schedulerExecute@k^(0+128),w
 15783  231D  0020               	movlb	0	; select bank0
 15784  231E  2B21               	goto	u6574
 15785  231F                     u6575:	
 15786  231F  35EA               	lslf	??_schedulerExecute+2,f
 15787  2320  0DEB               	rlf	??_schedulerExecute+3,f
 15788  2321                     u6574:	
 15789  2321  0B89               	decfsz	9,f
 15790  2322  2B1F               	goto	u6575
 15791  2323  0868               	movf	??_schedulerExecute,w
 15792  2324  056A               	andwf	??_schedulerExecute+2,w
 15793  2325  00EC               	movwf	??_schedulerExecute+4
 15794  2326  0869               	movf	??_schedulerExecute+1,w
 15795  2327  056B               	andwf	??_schedulerExecute+3,w
 15796  2328  00ED               	movwf	??_schedulerExecute+5
 15797  2329  086C               	movf	??_schedulerExecute+4,w
 15798  232A  046D               	iorwf	??_schedulerExecute+5,w
 15799  232B  1903               	btfsc	3,2
 15800  232C  2B83               	goto	l10545
 15801                           
 15802                           ;cooperative_scheduler.c: 88: }
 15803                           ;cooperative_scheduler.c: 90: currentSystemTick = TMR0_Read16bitTimer();
 15804                           
 15805                           ;cooperative_scheduler.c: 87: continue;
 15806  232D  31B4  242B  31A3   	fcall	_TMR0_Read16bitTimer
 15807  2330  0872               	movf	?_TMR0_Read16bitTimer+1,w
 15808  2331  0021               	movlb	1	; select bank1
 15809  2332  00D7               	movwf	(schedulerExecute@currentSystemTick+1)^(0+128)
 15810  2333  0871               	movf	?_TMR0_Read16bitTimer,w
 15811  2334  00D6               	movwf	schedulerExecute@currentSystemTick^(0+128)
 15812                           
 15813                           ;cooperative_scheduler.c: 91: taskLastSystemTick = scheduler->tasks[k]->systemTickLastEx
      +                          ecuted;
 15814  2335  085D               	movf	schedulerExecute@k^(0+128),w
 15815  2336  075C               	addwf	schedulerExecute@scheduler^(0+128),w
 15816  2337  0020               	movlb	0	; select bank0
 15817  2338  00E8               	movwf	??_schedulerExecute
 15818  2339  0868               	movf	??_schedulerExecute,w
 15819  233A  0086               	movwf	6
 15820  233B  3001               	movlw	1	; select bank2/3
 15821  233C  0087               	movwf	7
 15822  233D  0801               	movf	1,w
 15823  233E  0086               	movwf	6
 15824  233F  3001               	movlw	1	; select bank2/3
 15825  2340  0087               	movwf	7
 15826  2341  3F40               	moviw [0]fsr1
 15827  2342  0021               	movlb	1	; select bank1
 15828  2343  00D8               	movwf	schedulerExecute@taskLastSystemTick^(0+128)
 15829  2344  3F41               	moviw [1]fsr1
 15830  2345  00D9               	movwf	(schedulerExecute@taskLastSystemTick+1)^(0+128)
 15831                           
 15832                           ;cooperative_scheduler.c: 99: tickDelta = currentSystemTick - taskLastSystemTick;
 15833  2346  0958               	comf	schedulerExecute@taskLastSystemTick^(0+128),w
 15834  2347  0020               	movlb	0	; select bank0
 15835  2348  00E8               	movwf	??_schedulerExecute
 15836  2349  0021               	movlb	1	; select bank1
 15837  234A  0959               	comf	(schedulerExecute@taskLastSystemTick+1)^(0+128),w
 15838  234B  0020               	movlb	0	; select bank0
 15839  234C  00E9               	movwf	??_schedulerExecute+1
 15840  234D  0AE8               	incf	??_schedulerExecute,f
 15841  234E  1903               	skipnz
 15842  234F  0AE9               	incf	??_schedulerExecute+1,f
 15843  2350  0021               	movlb	1	; select bank1
 15844  2351  0856               	movf	schedulerExecute@currentSystemTick^(0+128),w
 15845  2352  0020               	movlb	0	; select bank0
 15846  2353  0768               	addwf	??_schedulerExecute,w
 15847  2354  0021               	movlb	1	; select bank1
 15848  2355  00DA               	movwf	schedulerExecute@tickDelta^(0+128)
 15849  2356  0857               	movf	(schedulerExecute@currentSystemTick+1)^(0+128),w
 15850  2357  0020               	movlb	0	; select bank0
 15851  2358  3D69               	addwfc	??_schedulerExecute+1,w
 15852  2359  0021               	movlb	1	; select bank1
 15853  235A  00DB               	movwf	(schedulerExecute@tickDelta+1)^(0+128)
 15854                           
 15855                           ;cooperative_scheduler.c: 103: if (tickDelta >= scheduler->tasks[k]->taskInterval) {
 15856  235B  085D               	movf	schedulerExecute@k^(0+128),w
 15857  235C  075C               	addwf	schedulerExecute@scheduler^(0+128),w
 15858  235D  0020               	movlb	0	; select bank0
 15859  235E  00E8               	movwf	??_schedulerExecute
 15860  235F  0868               	movf	??_schedulerExecute,w
 15861  2360  0086               	movwf	6
 15862  2361  3001               	movlw	1	; select bank2/3
 15863  2362  0087               	movwf	7
 15864  2363  0801               	movf	1,w
 15865  2364  3E0A               	addlw	10
 15866  2365  0086               	movwf	6
 15867  2366  3001               	movlw	1	; select bank2/3
 15868  2367  0087               	movwf	7
 15869  2368  3F40               	moviw [0]fsr1
 15870  2369  00E9               	movwf	??_schedulerExecute+1
 15871  236A  3F41               	moviw [1]fsr1
 15872  236B  00EA               	movwf	??_schedulerExecute+2
 15873  236C  086A               	movf	??_schedulerExecute+2,w
 15874  236D  0021               	movlb	1	; select bank1
 15875  236E  025B               	subwf	(schedulerExecute@tickDelta+1)^(0+128),w
 15876  236F  1D03               	skipz
 15877  2370  2B75               	goto	u6595
 15878  2371  0020               	movlb	0	; select bank0
 15879  2372  0869               	movf	??_schedulerExecute+1,w
 15880  2373  0021               	movlb	1	; select bank1
 15881  2374  025A               	subwf	schedulerExecute@tickDelta^(0+128),w
 15882  2375                     u6595:	
 15883  2375  1C03               	skipc
 15884  2376  2B83               	goto	l10545
 15885                           
 15886                           ;cooperative_scheduler.c: 104: scheduler_TaskRun(scheduler->tasks[k]);
 15887  2377  085D               	movf	schedulerExecute@k^(0+128),w
 15888  2378  075C               	addwf	schedulerExecute@scheduler^(0+128),w
 15889  2379  0020               	movlb	0	; select bank0
 15890  237A  00E8               	movwf	??_schedulerExecute
 15891  237B  0868               	movf	??_schedulerExecute,w
 15892  237C  0086               	movwf	6
 15893  237D  3001               	movlw	1	; select bank2/3
 15894  237E  0087               	movwf	7
 15895  237F  0801               	movf	1,w
 15896  2380  31B4  24C3  31A3   	fcall	_scheduler_TaskRun
 15897  2383                     l10545:	
 15898  2383  3001               	movlw	1
 15899  2384  0020               	movlb	0	; select bank0
 15900  2385  00E8               	movwf	??_schedulerExecute
 15901  2386  0868               	movf	??_schedulerExecute,w
 15902  2387  0021               	movlb	1	; select bank1
 15903  2388  07DD               	addwf	schedulerExecute@k^(0+128),f
 15904  2389  2B09               	goto	L2
 15905  238A                     __end_of_schedulerExecute:	
 15906                           
 15907                           	psect	text13
 15908  34C3                     __ptext13:	
 15909 ;; *************** function _scheduler_TaskRun *****************
 15910 ;; Defined at:
 15911 ;;		line 20 in file "cooperative_scheduler.c"
 15912 ;; Parameters:    Size  Location     Type
 15913 ;;  task            1    wreg     PTR struct t_schedulerTa
 15914 ;;		 -> matrix_task(13), secret_task(13), locked_task(13), slot_task(13), 
 15915 ;;		 -> menu_task(13), flashy_task(13), NULL(0), 
 15916 ;; Auto vars:     Size  Location     Type
 15917 ;;  task            1   71[BANK0 ] PTR struct t_schedulerTa
 15918 ;;		 -> matrix_task(13), secret_task(13), locked_task(13), slot_task(13), 
 15919 ;;		 -> menu_task(13), flashy_task(13), NULL(0), 
 15920 ;; Return value:  Size  Location     Type
 15921 ;;                  1    wreg      void 
 15922 ;; Registers used:
 15923 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15924 ;; Tracked objects:
 15925 ;;		On entry : 0/0
 15926 ;;		On exit  : 0/0
 15927 ;;		Unchanged: 0/0
 15928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15929 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15930 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15932 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15933 ;;Total ram usage:        1 bytes
 15934 ;; Hardware stack levels used:    1
 15935 ;; Hardware stack levels required when called:   13
 15936 ;; This function calls:
 15937 ;;		Absolute function
 15938 ;;		_TMR0_Read16bitTimer
 15939 ;;		_flashy_Main
 15940 ;;		_locked_Main
 15941 ;;		_matrix_Main
 15942 ;;		_menu_Main
 15943 ;;		_secret_Main
 15944 ;;		_slot_Main
 15945 ;; This function is called by:
 15946 ;;		_schedulerExecute
 15947 ;; This function uses a non-reentrant model
 15948 ;;
 15949                           
 15950                           
 15951                           ;psect for function _scheduler_TaskRun
 15952  34C3                     _scheduler_TaskRun:	
 15953                           
 15954                           ;incstack = 0
 15955                           ; Regs used in _scheduler_TaskRun: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15956                           ;scheduler_TaskRun@task stored from wreg
 15957  34C3  0020               	movlb	0	; select bank0
 15958  34C4  00E7               	movwf	scheduler_TaskRun@task
 15959                           
 15960                           ;cooperative_scheduler.c: 21: task->taskExecuteCallback (task->taskData);
 15961  34C5  0867               	movf	scheduler_TaskRun@task,w
 15962  34C6  3E02               	addlw	2
 15963  34C7  0086               	movwf	6
 15964  34C8  3001               	movlw	1	; select bank2/3
 15965  34C9  0087               	movwf	7
 15966  34CA  3F40               	moviw [0]fsr1
 15967  34CB  00D2               	movwf	matrix_Main@taskData
 15968  34CC  3F41               	moviw [1]fsr1
 15969  34CD  00D3               	movwf	matrix_Main@taskData+1
 15970  34CE  0867               	movf	scheduler_TaskRun@task,w
 15971  34CF  3E08               	addlw	8
 15972  34D0  0086               	movwf	6
 15973  34D1  3001               	movlw	1	; select bank2/3
 15974  34D2  0087               	movwf	7
 15975  34D3  3F41               	moviw [1]fsr1
 15976  34D4  008A               	movwf	10
 15977  34D5  3F40               	moviw [0]fsr1
 15978  34D6  000A               	callw
 15979  34D7  31B4               	pagesel	$
 15980                           
 15981                           ;cooperative_scheduler.c: 22: task->systemTickLastExecuted = TMR0_Read16bitTimer();
 15982  34D8  31B4  242B         	fcall	_TMR0_Read16bitTimer
 15983  34DA  0020               	movlb	0	; select bank0
 15984  34DB  0867               	movf	scheduler_TaskRun@task,w
 15985  34DC  0086               	movwf	6
 15986  34DD  3001               	movlw	1	; select bank2/3
 15987  34DE  0087               	movwf	7
 15988  34DF  0871               	movf	?_TMR0_Read16bitTimer,w
 15989  34E0  3FC0               	movwi [0]fsr1
 15990  34E1  0872               	movf	?_TMR0_Read16bitTimer+1,w
 15991  34E2  3FC1               	movwi [1]fsr1
 15992  34E3  0008               	return
 15993  34E4                     __end_of_scheduler_TaskRun:	
 15994                           
 15995                           	psect	text14
 15996  10CB                     __ptext14:	
 15997 ;; *************** function _matrix_Main *****************
 15998 ;; Defined at:
 15999 ;;		line 149 in file "matrix_task.c"
 16000 ;; Parameters:    Size  Location     Type
 16001 ;;  taskData        2   50[BANK0 ] PTR void 
 16002 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 16003 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 16004 ;; Auto vars:     Size  Location     Type
 16005 ;;  data            2   58[BANK0 ] PTR struct t_matrix_task
 16006 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 16007 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 16008 ;;  holdvalue       1   57[BANK0 ] unsigned char 
 16009 ;;  buttonPresse    1   56[BANK0 ] unsigned char 
 16010 ;; Return value:  Size  Location     Type
 16011 ;;                  1    wreg      void 
 16012 ;; Registers used:
 16013 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16014 ;; Tracked objects:
 16015 ;;		On entry : 0/0
 16016 ;;		On exit  : 0/0
 16017 ;;		Unchanged: 0/0
 16018 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16019 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16020 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16021 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16022 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16023 ;;Total ram usage:       10 bytes
 16024 ;; Hardware stack levels used:    1
 16025 ;; Hardware stack levels required when called:   11
 16026 ;; This function calls:
 16027 ;;		_led_Parody
 16028 ;;		_led_curtain
 16029 ;;		_matrix_display_option
 16030 ;;		_matrix_secret_check
 16031 ;;		_nullifyBadge_buttonsGet
 16032 ;; This function is called by:
 16033 ;;		_main
 16034 ;;		_scheduler_TaskRun
 16035 ;; This function uses a non-reentrant model
 16036 ;;
 16037                           
 16038                           
 16039                           ;psect for function _matrix_Main
 16040  10CB                     _matrix_Main:	
 16041                           
 16042                           ;matrix_task.c: 150: struct t_matrix_taskData *data = (struct t_matrix_taskData *) taskD
      +                          ata ;
 16043                           
 16044                           ;incstack = 0
 16045                           ; Regs used in _matrix_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16046  10CB  0020               	movlb	0	; select bank0
 16047  10CC  0853               	movf	matrix_Main@taskData+1,w
 16048  10CD  00DB               	movwf	matrix_Main@data+1
 16049  10CE  0852               	movf	matrix_Main@taskData,w
 16050  10CF  00DA               	movwf	matrix_Main@data
 16051                           
 16052                           ;matrix_task.c: 151: u8 buttonPressed = 0 ;
 16053  10D0  01D8               	clrf	matrix_Main@buttonPressed
 16054                           
 16055                           ;matrix_task.c: 152: u8 holdvalue = 50;
 16056  10D1  3032               	movlw	50
 16057  10D2  00D4               	movwf	??_matrix_Main
 16058  10D3  0854               	movf	??_matrix_Main,w
 16059  10D4  00D9               	movwf	matrix_Main@holdvalue
 16060                           
 16061                           ;matrix_task.c: 154: if ( currentTask != MATRIX_TASK ){
 16062  10D5  3004               	movlw	4
 16063  10D6  0021               	movlb	1	; select bank1
 16064  10D7  063A               	xorwf	_currentTask^(0+128),w
 16065  10D8  043B               	iorwf	(_currentTask+1)^(0+128),w
 16066  10D9  1903               	btfsc	3,2
 16067  10DA  2901               	goto	l9943
 16068                           
 16069                           ;matrix_task.c: 155: data->holdCountA = 1;
 16070  10DB  0020               	movlb	0	; select bank0
 16071  10DC  085A               	movf	matrix_Main@data,w
 16072  10DD  0086               	movwf	6
 16073  10DE  085B               	movf	matrix_Main@data+1,w
 16074  10DF  0087               	movwf	7
 16075  10E0  3149               	addfsr 1,9
 16076  10E1  3001               	movlw	1
 16077  10E2  3FC0               	movwi [0]fsr1
 16078  10E3  3000               	movlw	0
 16079  10E4  3FC1               	movwi [1]fsr1
 16080                           
 16081                           ;matrix_task.c: 156: data->holdCountB = 1;
 16082  10E5  085A               	movf	matrix_Main@data,w
 16083  10E6  0086               	movwf	6
 16084  10E7  085B               	movf	matrix_Main@data+1,w
 16085  10E8  0087               	movwf	7
 16086  10E9  314B               	addfsr 1,11
 16087  10EA  3001               	movlw	1
 16088  10EB  3FC0               	movwi [0]fsr1
 16089  10EC  3000               	movlw	0
 16090  10ED  3FC1               	movwi [1]fsr1
 16091                           
 16092                           ;matrix_task.c: 157: data->holdCountX = 1;
 16093  10EE  085A               	movf	matrix_Main@data,w
 16094  10EF  0086               	movwf	6
 16095  10F0  085B               	movf	matrix_Main@data+1,w
 16096  10F1  0087               	movwf	7
 16097  10F2  314D               	addfsr 1,13
 16098  10F3  3001               	movlw	1
 16099  10F4  3FC0               	movwi [0]fsr1
 16100  10F5  3000               	movlw	0
 16101  10F6  3FC1               	movwi [1]fsr1
 16102                           
 16103                           ;matrix_task.c: 158: data->holdCountY = 1;
 16104  10F7  085A               	movf	matrix_Main@data,w
 16105  10F8  0086               	movwf	6
 16106  10F9  085B               	movf	matrix_Main@data+1,w
 16107  10FA  0087               	movwf	7
 16108  10FB  314F               	addfsr 1,15
 16109  10FC  3001               	movlw	1
 16110  10FD  3FC0               	movwi [0]fsr1
 16111  10FE  3000               	movlw	0
 16112  10FF  3FC1               	movwi [1]fsr1
 16113                           
 16114                           ;matrix_task.c: 159: return;
 16115  1100  0008               	return
 16116  1101                     l9943:	
 16117                           
 16118                           ;matrix_task.c: 160: }
 16119                           ;matrix_task.c: 164: if (data->martix_state == STILL_IN_MATRIX){
 16120  1101  0020               	movlb	0	; select bank0
 16121  1102  085A               	movf	matrix_Main@data,w
 16122  1103  0086               	movwf	6
 16123  1104  085B               	movf	matrix_Main@data+1,w
 16124  1105  0087               	movwf	7
 16125  1106  3141               	addfsr 1,1
 16126  1107  0301               	decf	1,w
 16127  1108  1D03               	btfss	3,2
 16128  1109  2939               	goto	l9955
 16129                           
 16130                           ;matrix_task.c: 165: if(data->delayTickCount == 0){
 16131  110A  085A               	movf	matrix_Main@data,w
 16132  110B  0086               	movwf	6
 16133  110C  085B               	movf	matrix_Main@data+1,w
 16134  110D  0087               	movwf	7
 16135  110E  3143               	addfsr 1,3
 16136  110F  0016               	moviw fsr1++
 16137  1110  0401               	iorwf	1,w
 16138  1111  1D03               	btfss	3,2
 16139  1112  292E               	goto	l9953
 16140                           
 16141                           ;matrix_task.c: 166: led_Parody(matrix_leds_idx);
 16142  1113  0021               	movlb	1	; select bank1
 16143  1114  0821               	movf	(_matrix_leds_idx+1)^(0+128),w
 16144  1115  0020               	movlb	0	; select bank0
 16145  1116  00B1               	movwf	led_Parody@count+1
 16146  1117  0021               	movlb	1	; select bank1
 16147  1118  0820               	movf	_matrix_leds_idx^(0+128),w
 16148  1119  0020               	movlb	0	; select bank0
 16149  111A  00B0               	movwf	led_Parody@count
 16150  111B  31AE  26BA  3190   	fcall	_led_Parody
 16151                           
 16152                           ;matrix_task.c: 167: matrix_leds_idx += 1;
 16153  111E  3001               	movlw	1
 16154  111F  0021               	movlb	1	; select bank1
 16155  1120  07A0               	addwf	_matrix_leds_idx^(0+128),f
 16156  1121  3000               	movlw	0
 16157  1122  3DA1               	addwfc	(_matrix_leds_idx+1)^(0+128),f
 16158                           
 16159                           ;matrix_task.c: 168: data->delayTickCount = 10;
 16160  1123  0020               	movlb	0	; select bank0
 16161  1124  085A               	movf	matrix_Main@data,w
 16162  1125  0086               	movwf	6
 16163  1126  085B               	movf	matrix_Main@data+1,w
 16164  1127  0087               	movwf	7
 16165  1128  3143               	addfsr 1,3
 16166  1129  300A               	movlw	10
 16167  112A  3FC0               	movwi [0]fsr1
 16168  112B  3000               	movlw	0
 16169  112C  3FC1               	movwi [1]fsr1
 16170                           
 16171                           ;matrix_task.c: 169: }
 16172  112D  2939               	goto	l9955
 16173  112E                     l9953:	
 16174                           
 16175                           ;matrix_task.c: 170: else {
 16176                           ;matrix_task.c: 171: data->delayTickCount -= 1;
 16177  112E  085A               	movf	matrix_Main@data,w
 16178  112F  0086               	movwf	6
 16179  1130  085B               	movf	matrix_Main@data+1,w
 16180  1131  0087               	movwf	7
 16181  1132  3143               	addfsr 1,3
 16182  1133  3001               	movlw	1
 16183  1134  0281               	subwf	1,f
 16184  1135  3141               	addfsr 1,1
 16185  1136  3000               	movlw	0
 16186  1137  3B81               	subwfb	1,f
 16187  1138  317F               	addfsr 1,-1
 16188  1139                     l9955:	
 16189                           
 16190                           ;matrix_task.c: 172: }
 16191                           ;matrix_task.c: 173: }
 16192                           ;matrix_task.c: 177: buttonPressed = nullifyBadge_buttonsGet();
 16193  1139  31B5  25FF  3190   	fcall	_nullifyBadge_buttonsGet
 16194  113C  0020               	movlb	0	; select bank0
 16195  113D  00D4               	movwf	??_matrix_Main
 16196  113E  0854               	movf	??_matrix_Main,w
 16197  113F  00D8               	movwf	matrix_Main@buttonPressed
 16198                           
 16199                           ;matrix_task.c: 180: switch (buttonPressed) {
 16200  1140  2F93               	goto	l10289
 16201  1141                     l9957:	
 16202                           ;matrix_task.c: 181: case 1:
 16203                           
 16204                           
 16205                           ;matrix_task.c: 183: if (data->holdCountA == holdvalue){
 16206  1141  085A               	movf	matrix_Main@data,w
 16207  1142  0086               	movwf	6
 16208  1143  085B               	movf	matrix_Main@data+1,w
 16209  1144  0087               	movwf	7
 16210  1145  3149               	addfsr 1,9
 16211  1146  3F40               	moviw [0]fsr1
 16212  1147  00D4               	movwf	??_matrix_Main
 16213  1148  3F41               	moviw [1]fsr1
 16214  1149  00D5               	movwf	??_matrix_Main+1
 16215  114A  0859               	movf	matrix_Main@holdvalue,w
 16216  114B  00D6               	movwf	??_matrix_Main+2
 16217  114C  01D7               	clrf	??_matrix_Main+3
 16218  114D  0855               	movf	??_matrix_Main+1,w
 16219  114E  0657               	xorwf	??_matrix_Main+3,w
 16220  114F  1D03               	skipz
 16221  1150  2953               	goto	u6365
 16222  1151  0854               	movf	??_matrix_Main,w
 16223  1152  0656               	xorwf	??_matrix_Main+2,w
 16224  1153                     u6365:	
 16225  1153  1D03               	skipz
 16226  1154  296C               	goto	l9963
 16227                           
 16228                           ;matrix_task.c: 184: matrix_found = matrix_secret_check(data, buttonPressed);
 16229  1155  085B               	movf	matrix_Main@data+1,w
 16230  1156  00F8               	movwf	matrix_secret_check@data+1
 16231  1157  085A               	movf	matrix_Main@data,w
 16232  1158  00F7               	movwf	matrix_secret_check@data
 16233  1159  0858               	movf	matrix_Main@buttonPressed,w
 16234  115A  00D4               	movwf	??_matrix_Main
 16235  115B  0854               	movf	??_matrix_Main,w
 16236  115C  00F9               	movwf	matrix_secret_check@buttonPressed
 16237  115D  31A4  24CD  3190   	fcall	_matrix_secret_check
 16238  1160  0020               	movlb	0	; select bank0
 16239  1161  00D5               	movwf	??_matrix_Main+1
 16240  1162  0855               	movf	??_matrix_Main+1,w
 16241  1163  0021               	movlb	1	; select bank1
 16242  1164  00C2               	movwf	_matrix_found^(0+128)
 16243                           
 16244                           ;matrix_task.c: 185: data->display_state = MATRIX_A;
 16245  1165  0020               	movlb	0	; select bank0
 16246  1166  085A               	movf	matrix_Main@data,w
 16247  1167  0086               	movwf	6
 16248  1168  085B               	movf	matrix_Main@data+1,w
 16249  1169  0087               	movwf	7
 16250  116A  3142               	addfsr 1,2
 16251  116B  0181               	clrf	1
 16252  116C                     l9963:	
 16253                           
 16254                           ;matrix_task.c: 186: }
 16255                           ;matrix_task.c: 187: data->holdCountA += 1;
 16256  116C  085A               	movf	matrix_Main@data,w
 16257  116D  0086               	movwf	6
 16258  116E  085B               	movf	matrix_Main@data+1,w
 16259  116F  0087               	movwf	7
 16260  1170  3149               	addfsr 1,9
 16261  1171  3001               	movlw	1
 16262  1172  0781               	addwf	1,f
 16263  1173  3141               	addfsr 1,1
 16264  1174  1803               	skipnc
 16265  1175  0A81               	incf	1,f
 16266                           
 16267                           ;matrix_task.c: 188: data->holdCountB = 0;
 16268  1176  085A               	movf	matrix_Main@data,w
 16269  1177  0086               	movwf	6
 16270  1178  085B               	movf	matrix_Main@data+1,w
 16271  1179  0087               	movwf	7
 16272  117A  314B               	addfsr 1,11
 16273  117B  3000               	movlw	0
 16274  117C  3FC0               	movwi [0]fsr1
 16275  117D  3FC1               	movwi [1]fsr1
 16276                           
 16277                           ;matrix_task.c: 189: data->holdCountX = 0;
 16278  117E  085A               	movf	matrix_Main@data,w
 16279  117F  0086               	movwf	6
 16280  1180  085B               	movf	matrix_Main@data+1,w
 16281  1181  0087               	movwf	7
 16282  1182  314D               	addfsr 1,13
 16283  1183  3000               	movlw	0
 16284  1184  3FC0               	movwi [0]fsr1
 16285  1185  3FC1               	movwi [1]fsr1
 16286                           
 16287                           ;matrix_task.c: 190: data->holdCountY = 0;
 16288  1186  085A               	movf	matrix_Main@data,w
 16289  1187  0086               	movwf	6
 16290  1188  085B               	movf	matrix_Main@data+1,w
 16291  1189  0087               	movwf	7
 16292  118A  314F               	addfsr 1,15
 16293  118B  3000               	movlw	0
 16294  118C  3FC0               	movwi [0]fsr1
 16295  118D  3FC1               	movwi [1]fsr1
 16296                           
 16297                           ;matrix_task.c: 191: data->holdCountXY = 0;
 16298  118E  085A               	movf	matrix_Main@data,w
 16299  118F  0086               	movwf	6
 16300  1190  085B               	movf	matrix_Main@data+1,w
 16301  1191  0087               	movwf	7
 16302  1192  3151               	addfsr 1,17
 16303  1193  3000               	movlw	0
 16304  1194  3FC0               	movwi [0]fsr1
 16305  1195  3FC1               	movwi [1]fsr1
 16306                           
 16307                           ;matrix_task.c: 192: data->holdCountAY = 0;
 16308  1196  085A               	movf	matrix_Main@data,w
 16309  1197  0086               	movwf	6
 16310  1198  085B               	movf	matrix_Main@data+1,w
 16311  1199  0087               	movwf	7
 16312  119A  3153               	addfsr 1,19
 16313  119B  3000               	movlw	0
 16314  119C  3FC0               	movwi [0]fsr1
 16315  119D  3FC1               	movwi [1]fsr1
 16316                           
 16317                           ;matrix_task.c: 193: data->holdCountAX = 0;
 16318  119E  085A               	movf	matrix_Main@data,w
 16319  119F  0086               	movwf	6
 16320  11A0  085B               	movf	matrix_Main@data+1,w
 16321  11A1  0087               	movwf	7
 16322  11A2  3155               	addfsr 1,21
 16323  11A3  3000               	movlw	0
 16324  11A4  3FC0               	movwi [0]fsr1
 16325  11A5  3FC1               	movwi [1]fsr1
 16326                           
 16327                           ;matrix_task.c: 194: data->holdCountBX = 0;
 16328  11A6  085A               	movf	matrix_Main@data,w
 16329  11A7  0086               	movwf	6
 16330  11A8  085B               	movf	matrix_Main@data+1,w
 16331  11A9  0087               	movwf	7
 16332  11AA  3157               	addfsr 1,23
 16333  11AB  3000               	movlw	0
 16334  11AC  3FC0               	movwi [0]fsr1
 16335  11AD  3FC1               	movwi [1]fsr1
 16336                           
 16337                           ;matrix_task.c: 195: data->holdCountBY = 0;
 16338  11AE  085A               	movf	matrix_Main@data,w
 16339  11AF  0086               	movwf	6
 16340  11B0  085B               	movf	matrix_Main@data+1,w
 16341  11B1  0087               	movwf	7
 16342  11B2  3159               	addfsr 1,25
 16343  11B3  3000               	movlw	0
 16344  11B4  3FC0               	movwi [0]fsr1
 16345  11B5  3FC1               	movwi [1]fsr1
 16346                           
 16347                           ;matrix_task.c: 196: data->holdCountBA = 0;
 16348  11B6  085A               	movf	matrix_Main@data,w
 16349  11B7  0086               	movwf	6
 16350  11B8  085B               	movf	matrix_Main@data+1,w
 16351  11B9  0087               	movwf	7
 16352  11BA  315B               	addfsr 1,27
 16353  11BB  3000               	movlw	0
 16354  11BC  3FC0               	movwi [0]fsr1
 16355  11BD  3FC1               	movwi [1]fsr1
 16356                           
 16357                           ;matrix_task.c: 197: data->noholdCount = 0;
 16358  11BE  085A               	movf	matrix_Main@data,w
 16359  11BF  0086               	movwf	6
 16360  11C0  085B               	movf	matrix_Main@data+1,w
 16361  11C1  0087               	movwf	7
 16362  11C2  315D               	addfsr 1,29
 16363  11C3  3000               	movlw	0
 16364  11C4  3FC0               	movwi [0]fsr1
 16365  11C5  3FC1               	movwi [1]fsr1
 16366                           
 16367                           ;matrix_task.c: 198: data->displayTickdown = 300;
 16368  11C6  085A               	movf	matrix_Main@data,w
 16369  11C7  0086               	movwf	6
 16370  11C8  085B               	movf	matrix_Main@data+1,w
 16371  11C9  0087               	movwf	7
 16372  11CA  3147               	addfsr 1,7
 16373  11CB  302C               	movlw	44
 16374  11CC  3FC0               	movwi [0]fsr1
 16375  11CD  3001               	movlw	1
 16376  11CE  3FC1               	movwi [1]fsr1
 16377                           
 16378                           ;matrix_task.c: 199: break;
 16379  11CF  2FB4               	goto	l10291
 16380  11D0                     l9987:	
 16381                           ;matrix_task.c: 200: case 2:
 16382                           
 16383                           
 16384                           ;matrix_task.c: 202: if (data->holdCountB == holdvalue){
 16385  11D0  085A               	movf	matrix_Main@data,w
 16386  11D1  0086               	movwf	6
 16387  11D2  085B               	movf	matrix_Main@data+1,w
 16388  11D3  0087               	movwf	7
 16389  11D4  314B               	addfsr 1,11
 16390  11D5  3F40               	moviw [0]fsr1
 16391  11D6  00D4               	movwf	??_matrix_Main
 16392  11D7  3F41               	moviw [1]fsr1
 16393  11D8  00D5               	movwf	??_matrix_Main+1
 16394  11D9  0859               	movf	matrix_Main@holdvalue,w
 16395  11DA  00D6               	movwf	??_matrix_Main+2
 16396  11DB  01D7               	clrf	??_matrix_Main+3
 16397  11DC  0855               	movf	??_matrix_Main+1,w
 16398  11DD  0657               	xorwf	??_matrix_Main+3,w
 16399  11DE  1D03               	skipz
 16400  11DF  29E2               	goto	u6375
 16401  11E0  0854               	movf	??_matrix_Main,w
 16402  11E1  0656               	xorwf	??_matrix_Main+2,w
 16403  11E2                     u6375:	
 16404  11E2  1D03               	skipz
 16405  11E3  2A01               	goto	l9993
 16406                           
 16407                           ;matrix_task.c: 203: matrix_found = matrix_secret_check(data, buttonPressed);
 16408  11E4  085B               	movf	matrix_Main@data+1,w
 16409  11E5  00F8               	movwf	matrix_secret_check@data+1
 16410  11E6  085A               	movf	matrix_Main@data,w
 16411  11E7  00F7               	movwf	matrix_secret_check@data
 16412  11E8  0858               	movf	matrix_Main@buttonPressed,w
 16413  11E9  00D4               	movwf	??_matrix_Main
 16414  11EA  0854               	movf	??_matrix_Main,w
 16415  11EB  00F9               	movwf	matrix_secret_check@buttonPressed
 16416  11EC  31A4  24CD  3190   	fcall	_matrix_secret_check
 16417  11EF  0020               	movlb	0	; select bank0
 16418  11F0  00D5               	movwf	??_matrix_Main+1
 16419  11F1  0855               	movf	??_matrix_Main+1,w
 16420  11F2  0021               	movlb	1	; select bank1
 16421  11F3  00C2               	movwf	_matrix_found^(0+128)
 16422                           
 16423                           ;matrix_task.c: 204: data->display_state = MATRIX_B;
 16424  11F4  0020               	movlb	0	; select bank0
 16425  11F5  085A               	movf	matrix_Main@data,w
 16426  11F6  3E02               	addlw	2
 16427  11F7  00D4               	movwf	??_matrix_Main
 16428  11F8  3000               	movlw	0
 16429  11F9  3D5B               	addwfc	matrix_Main@data+1,w
 16430  11FA  00D5               	movwf	??_matrix_Main+1
 16431  11FB  0854               	movf	??_matrix_Main,w
 16432  11FC  0086               	movwf	6
 16433  11FD  0855               	movf	??_matrix_Main+1,w
 16434  11FE  0087               	movwf	7
 16435  11FF  3002               	movlw	2
 16436  1200  0081               	movwf	1
 16437  1201                     l9993:	
 16438                           
 16439                           ;matrix_task.c: 205: }
 16440                           ;matrix_task.c: 206: data->holdCountA = 0;
 16441  1201  085A               	movf	matrix_Main@data,w
 16442  1202  0086               	movwf	6
 16443  1203  085B               	movf	matrix_Main@data+1,w
 16444  1204  0087               	movwf	7
 16445  1205  3149               	addfsr 1,9
 16446  1206  3000               	movlw	0
 16447  1207  3FC0               	movwi [0]fsr1
 16448  1208  3FC1               	movwi [1]fsr1
 16449                           
 16450                           ;matrix_task.c: 207: data->holdCountB += 1;
 16451  1209  085A               	movf	matrix_Main@data,w
 16452  120A  0086               	movwf	6
 16453  120B  085B               	movf	matrix_Main@data+1,w
 16454  120C  0087               	movwf	7
 16455  120D  314B               	addfsr 1,11
 16456  120E  3001               	movlw	1
 16457  120F  0781               	addwf	1,f
 16458  1210  3141               	addfsr 1,1
 16459  1211  1803               	skipnc
 16460  1212  0A81               	incf	1,f
 16461                           
 16462                           ;matrix_task.c: 208: data->holdCountX = 0;
 16463  1213  085A               	movf	matrix_Main@data,w
 16464  1214  0086               	movwf	6
 16465  1215  085B               	movf	matrix_Main@data+1,w
 16466  1216  0087               	movwf	7
 16467  1217  314D               	addfsr 1,13
 16468  1218  3000               	movlw	0
 16469  1219  3FC0               	movwi [0]fsr1
 16470  121A  3FC1               	movwi [1]fsr1
 16471                           
 16472                           ;matrix_task.c: 209: data->holdCountY = 0;
 16473  121B  085A               	movf	matrix_Main@data,w
 16474  121C  0086               	movwf	6
 16475  121D  085B               	movf	matrix_Main@data+1,w
 16476  121E  0087               	movwf	7
 16477  121F  314F               	addfsr 1,15
 16478  1220  3000               	movlw	0
 16479  1221  3FC0               	movwi [0]fsr1
 16480  1222  3FC1               	movwi [1]fsr1
 16481                           
 16482                           ;matrix_task.c: 210: data->holdCountXY = 0;
 16483  1223  085A               	movf	matrix_Main@data,w
 16484  1224  0086               	movwf	6
 16485  1225  085B               	movf	matrix_Main@data+1,w
 16486  1226  0087               	movwf	7
 16487  1227  3151               	addfsr 1,17
 16488  1228  3000               	movlw	0
 16489  1229  3FC0               	movwi [0]fsr1
 16490  122A  3FC1               	movwi [1]fsr1
 16491                           
 16492                           ;matrix_task.c: 211: data->holdCountAY = 0;
 16493  122B  085A               	movf	matrix_Main@data,w
 16494  122C  0086               	movwf	6
 16495  122D  085B               	movf	matrix_Main@data+1,w
 16496  122E  0087               	movwf	7
 16497  122F  3153               	addfsr 1,19
 16498  1230  3000               	movlw	0
 16499  1231  3FC0               	movwi [0]fsr1
 16500  1232  3FC1               	movwi [1]fsr1
 16501                           
 16502                           ;matrix_task.c: 212: data->holdCountAX = 0;
 16503  1233  085A               	movf	matrix_Main@data,w
 16504  1234  0086               	movwf	6
 16505  1235  085B               	movf	matrix_Main@data+1,w
 16506  1236  0087               	movwf	7
 16507  1237  3155               	addfsr 1,21
 16508  1238  3000               	movlw	0
 16509  1239  3FC0               	movwi [0]fsr1
 16510  123A  3FC1               	movwi [1]fsr1
 16511                           
 16512                           ;matrix_task.c: 213: data->holdCountBX = 0;
 16513  123B  085A               	movf	matrix_Main@data,w
 16514  123C  0086               	movwf	6
 16515  123D  085B               	movf	matrix_Main@data+1,w
 16516  123E  0087               	movwf	7
 16517  123F  3157               	addfsr 1,23
 16518  1240  3000               	movlw	0
 16519  1241  3FC0               	movwi [0]fsr1
 16520  1242  3FC1               	movwi [1]fsr1
 16521                           
 16522                           ;matrix_task.c: 214: data->holdCountBY = 0;
 16523  1243  085A               	movf	matrix_Main@data,w
 16524  1244  0086               	movwf	6
 16525  1245  085B               	movf	matrix_Main@data+1,w
 16526  1246  0087               	movwf	7
 16527  1247  3159               	addfsr 1,25
 16528  1248  3000               	movlw	0
 16529  1249  3FC0               	movwi [0]fsr1
 16530  124A  3FC1               	movwi [1]fsr1
 16531                           
 16532                           ;matrix_task.c: 215: data->holdCountBA = 0;
 16533  124B  085A               	movf	matrix_Main@data,w
 16534  124C  0086               	movwf	6
 16535  124D  085B               	movf	matrix_Main@data+1,w
 16536  124E  0087               	movwf	7
 16537  124F  315B               	addfsr 1,27
 16538  1250  3000               	movlw	0
 16539  1251  3FC0               	movwi [0]fsr1
 16540  1252  3FC1               	movwi [1]fsr1
 16541                           
 16542                           ;matrix_task.c: 216: data->noholdCount = 0;
 16543  1253  085A               	movf	matrix_Main@data,w
 16544  1254  0086               	movwf	6
 16545  1255  085B               	movf	matrix_Main@data+1,w
 16546  1256  0087               	movwf	7
 16547  1257  315D               	addfsr 1,29
 16548  1258  3000               	movlw	0
 16549  1259  3FC0               	movwi [0]fsr1
 16550  125A  3FC1               	movwi [1]fsr1
 16551                           
 16552                           ;matrix_task.c: 217: data->displayTickdown = 300;
 16553  125B  085A               	movf	matrix_Main@data,w
 16554  125C  0086               	movwf	6
 16555  125D  085B               	movf	matrix_Main@data+1,w
 16556  125E  0087               	movwf	7
 16557  125F  3147               	addfsr 1,7
 16558  1260  302C               	movlw	44
 16559  1261  3FC0               	movwi [0]fsr1
 16560  1262  3001               	movlw	1
 16561  1263  3FC1               	movwi [1]fsr1
 16562                           
 16563                           ;matrix_task.c: 218: break;
 16564  1264  2FB4               	goto	l10291
 16565  1265                     l10017:	
 16566                           ;matrix_task.c: 219: case 4:
 16567                           
 16568                           
 16569                           ;matrix_task.c: 221: if (data->holdCountX == holdvalue){
 16570  1265  085A               	movf	matrix_Main@data,w
 16571  1266  0086               	movwf	6
 16572  1267  085B               	movf	matrix_Main@data+1,w
 16573  1268  0087               	movwf	7
 16574  1269  314D               	addfsr 1,13
 16575  126A  3F40               	moviw [0]fsr1
 16576  126B  00D4               	movwf	??_matrix_Main
 16577  126C  3F41               	moviw [1]fsr1
 16578  126D  00D5               	movwf	??_matrix_Main+1
 16579  126E  0859               	movf	matrix_Main@holdvalue,w
 16580  126F  00D6               	movwf	??_matrix_Main+2
 16581  1270  01D7               	clrf	??_matrix_Main+3
 16582  1271  0855               	movf	??_matrix_Main+1,w
 16583  1272  0657               	xorwf	??_matrix_Main+3,w
 16584  1273  1D03               	skipz
 16585  1274  2A77               	goto	u6385
 16586  1275  0854               	movf	??_matrix_Main,w
 16587  1276  0656               	xorwf	??_matrix_Main+2,w
 16588  1277                     u6385:	
 16589  1277  1D03               	skipz
 16590  1278  2A96               	goto	l10023
 16591                           
 16592                           ;matrix_task.c: 222: matrix_found = matrix_secret_check(data, buttonPressed);
 16593  1279  085B               	movf	matrix_Main@data+1,w
 16594  127A  00F8               	movwf	matrix_secret_check@data+1
 16595  127B  085A               	movf	matrix_Main@data,w
 16596  127C  00F7               	movwf	matrix_secret_check@data
 16597  127D  0858               	movf	matrix_Main@buttonPressed,w
 16598  127E  00D4               	movwf	??_matrix_Main
 16599  127F  0854               	movf	??_matrix_Main,w
 16600  1280  00F9               	movwf	matrix_secret_check@buttonPressed
 16601  1281  31A4  24CD  3190   	fcall	_matrix_secret_check
 16602  1284  0020               	movlb	0	; select bank0
 16603  1285  00D5               	movwf	??_matrix_Main+1
 16604  1286  0855               	movf	??_matrix_Main+1,w
 16605  1287  0021               	movlb	1	; select bank1
 16606  1288  00C2               	movwf	_matrix_found^(0+128)
 16607                           
 16608                           ;matrix_task.c: 223: data->display_state = MATRIX_X;
 16609  1289  0020               	movlb	0	; select bank0
 16610  128A  085A               	movf	matrix_Main@data,w
 16611  128B  3E02               	addlw	2
 16612  128C  00D4               	movwf	??_matrix_Main
 16613  128D  3000               	movlw	0
 16614  128E  3D5B               	addwfc	matrix_Main@data+1,w
 16615  128F  00D5               	movwf	??_matrix_Main+1
 16616  1290  0854               	movf	??_matrix_Main,w
 16617  1291  0086               	movwf	6
 16618  1292  0855               	movf	??_matrix_Main+1,w
 16619  1293  0087               	movwf	7
 16620  1294  3003               	movlw	3
 16621  1295  0081               	movwf	1
 16622  1296                     l10023:	
 16623                           
 16624                           ;matrix_task.c: 224: }
 16625                           ;matrix_task.c: 225: data->holdCountA = 0;
 16626  1296  085A               	movf	matrix_Main@data,w
 16627  1297  0086               	movwf	6
 16628  1298  085B               	movf	matrix_Main@data+1,w
 16629  1299  0087               	movwf	7
 16630  129A  3149               	addfsr 1,9
 16631  129B  3000               	movlw	0
 16632  129C  3FC0               	movwi [0]fsr1
 16633  129D  3FC1               	movwi [1]fsr1
 16634                           
 16635                           ;matrix_task.c: 226: data->holdCountB = 0;
 16636  129E  085A               	movf	matrix_Main@data,w
 16637  129F  0086               	movwf	6
 16638  12A0  085B               	movf	matrix_Main@data+1,w
 16639  12A1  0087               	movwf	7
 16640  12A2  314B               	addfsr 1,11
 16641  12A3  3000               	movlw	0
 16642  12A4  3FC0               	movwi [0]fsr1
 16643  12A5  3FC1               	movwi [1]fsr1
 16644                           
 16645                           ;matrix_task.c: 227: data->holdCountX += 1;
 16646  12A6  085A               	movf	matrix_Main@data,w
 16647  12A7  0086               	movwf	6
 16648  12A8  085B               	movf	matrix_Main@data+1,w
 16649  12A9  0087               	movwf	7
 16650  12AA  314D               	addfsr 1,13
 16651  12AB  3001               	movlw	1
 16652  12AC  0781               	addwf	1,f
 16653  12AD  3141               	addfsr 1,1
 16654  12AE  1803               	skipnc
 16655  12AF  0A81               	incf	1,f
 16656                           
 16657                           ;matrix_task.c: 228: data->holdCountY = 0;
 16658  12B0  085A               	movf	matrix_Main@data,w
 16659  12B1  0086               	movwf	6
 16660  12B2  085B               	movf	matrix_Main@data+1,w
 16661  12B3  0087               	movwf	7
 16662  12B4  314F               	addfsr 1,15
 16663  12B5  3000               	movlw	0
 16664  12B6  3FC0               	movwi [0]fsr1
 16665  12B7  3FC1               	movwi [1]fsr1
 16666                           
 16667                           ;matrix_task.c: 229: data->holdCountXY = 0;
 16668  12B8  085A               	movf	matrix_Main@data,w
 16669  12B9  0086               	movwf	6
 16670  12BA  085B               	movf	matrix_Main@data+1,w
 16671  12BB  0087               	movwf	7
 16672  12BC  3151               	addfsr 1,17
 16673  12BD  3000               	movlw	0
 16674  12BE  3FC0               	movwi [0]fsr1
 16675  12BF  3FC1               	movwi [1]fsr1
 16676                           
 16677                           ;matrix_task.c: 230: data->holdCountAY = 0;
 16678  12C0  085A               	movf	matrix_Main@data,w
 16679  12C1  0086               	movwf	6
 16680  12C2  085B               	movf	matrix_Main@data+1,w
 16681  12C3  0087               	movwf	7
 16682  12C4  3153               	addfsr 1,19
 16683  12C5  3000               	movlw	0
 16684  12C6  3FC0               	movwi [0]fsr1
 16685  12C7  3FC1               	movwi [1]fsr1
 16686                           
 16687                           ;matrix_task.c: 231: data->holdCountAX = 0;
 16688  12C8  085A               	movf	matrix_Main@data,w
 16689  12C9  0086               	movwf	6
 16690  12CA  085B               	movf	matrix_Main@data+1,w
 16691  12CB  0087               	movwf	7
 16692  12CC  3155               	addfsr 1,21
 16693  12CD  3000               	movlw	0
 16694  12CE  3FC0               	movwi [0]fsr1
 16695  12CF  3FC1               	movwi [1]fsr1
 16696                           
 16697                           ;matrix_task.c: 232: data->holdCountBX = 0;
 16698  12D0  085A               	movf	matrix_Main@data,w
 16699  12D1  0086               	movwf	6
 16700  12D2  085B               	movf	matrix_Main@data+1,w
 16701  12D3  0087               	movwf	7
 16702  12D4  3157               	addfsr 1,23
 16703  12D5  3000               	movlw	0
 16704  12D6  3FC0               	movwi [0]fsr1
 16705  12D7  3FC1               	movwi [1]fsr1
 16706                           
 16707                           ;matrix_task.c: 233: data->holdCountBY = 0;
 16708  12D8  085A               	movf	matrix_Main@data,w
 16709  12D9  0086               	movwf	6
 16710  12DA  085B               	movf	matrix_Main@data+1,w
 16711  12DB  0087               	movwf	7
 16712  12DC  3159               	addfsr 1,25
 16713  12DD  3000               	movlw	0
 16714  12DE  3FC0               	movwi [0]fsr1
 16715  12DF  3FC1               	movwi [1]fsr1
 16716                           
 16717                           ;matrix_task.c: 234: data->holdCountBA = 0;
 16718  12E0  085A               	movf	matrix_Main@data,w
 16719  12E1  0086               	movwf	6
 16720  12E2  085B               	movf	matrix_Main@data+1,w
 16721  12E3  0087               	movwf	7
 16722  12E4  315B               	addfsr 1,27
 16723  12E5  3000               	movlw	0
 16724  12E6  3FC0               	movwi [0]fsr1
 16725  12E7  3FC1               	movwi [1]fsr1
 16726                           
 16727                           ;matrix_task.c: 235: data->noholdCount = 0;
 16728  12E8  085A               	movf	matrix_Main@data,w
 16729  12E9  0086               	movwf	6
 16730  12EA  085B               	movf	matrix_Main@data+1,w
 16731  12EB  0087               	movwf	7
 16732  12EC  315D               	addfsr 1,29
 16733  12ED  3000               	movlw	0
 16734  12EE  3FC0               	movwi [0]fsr1
 16735  12EF  3FC1               	movwi [1]fsr1
 16736                           
 16737                           ;matrix_task.c: 236: data->displayTickdown = 300;
 16738  12F0  085A               	movf	matrix_Main@data,w
 16739  12F1  0086               	movwf	6
 16740  12F2  085B               	movf	matrix_Main@data+1,w
 16741  12F3  0087               	movwf	7
 16742  12F4  3147               	addfsr 1,7
 16743  12F5  302C               	movlw	44
 16744  12F6  3FC0               	movwi [0]fsr1
 16745  12F7  3001               	movlw	1
 16746  12F8  3FC1               	movwi [1]fsr1
 16747                           
 16748                           ;matrix_task.c: 237: break;
 16749  12F9  2FB4               	goto	l10291
 16750  12FA                     l10047:	
 16751                           ;matrix_task.c: 238: case 8:
 16752                           
 16753                           
 16754                           ;matrix_task.c: 240: if (data->holdCountY == holdvalue){
 16755  12FA  085A               	movf	matrix_Main@data,w
 16756  12FB  0086               	movwf	6
 16757  12FC  085B               	movf	matrix_Main@data+1,w
 16758  12FD  0087               	movwf	7
 16759  12FE  314F               	addfsr 1,15
 16760  12FF  3F40               	moviw [0]fsr1
 16761  1300  00D4               	movwf	??_matrix_Main
 16762  1301  3F41               	moviw [1]fsr1
 16763  1302  00D5               	movwf	??_matrix_Main+1
 16764  1303  0859               	movf	matrix_Main@holdvalue,w
 16765  1304  00D6               	movwf	??_matrix_Main+2
 16766  1305  01D7               	clrf	??_matrix_Main+3
 16767  1306  0855               	movf	??_matrix_Main+1,w
 16768  1307  0657               	xorwf	??_matrix_Main+3,w
 16769  1308  1D03               	skipz
 16770  1309  2B0C               	goto	u6395
 16771  130A  0854               	movf	??_matrix_Main,w
 16772  130B  0656               	xorwf	??_matrix_Main+2,w
 16773  130C                     u6395:	
 16774  130C  1D03               	skipz
 16775  130D  2B2B               	goto	l10053
 16776                           
 16777                           ;matrix_task.c: 241: matrix_found = matrix_secret_check(data, buttonPressed);
 16778  130E  085B               	movf	matrix_Main@data+1,w
 16779  130F  00F8               	movwf	matrix_secret_check@data+1
 16780  1310  085A               	movf	matrix_Main@data,w
 16781  1311  00F7               	movwf	matrix_secret_check@data
 16782  1312  0858               	movf	matrix_Main@buttonPressed,w
 16783  1313  00D4               	movwf	??_matrix_Main
 16784  1314  0854               	movf	??_matrix_Main,w
 16785  1315  00F9               	movwf	matrix_secret_check@buttonPressed
 16786  1316  31A4  24CD  3190   	fcall	_matrix_secret_check
 16787  1319  0020               	movlb	0	; select bank0
 16788  131A  00D5               	movwf	??_matrix_Main+1
 16789  131B  0855               	movf	??_matrix_Main+1,w
 16790  131C  0021               	movlb	1	; select bank1
 16791  131D  00C2               	movwf	_matrix_found^(0+128)
 16792                           
 16793                           ;matrix_task.c: 242: data->display_state = MATRIX_Y;
 16794  131E  0020               	movlb	0	; select bank0
 16795  131F  085A               	movf	matrix_Main@data,w
 16796  1320  3E02               	addlw	2
 16797  1321  00D4               	movwf	??_matrix_Main
 16798  1322  3000               	movlw	0
 16799  1323  3D5B               	addwfc	matrix_Main@data+1,w
 16800  1324  00D5               	movwf	??_matrix_Main+1
 16801  1325  0854               	movf	??_matrix_Main,w
 16802  1326  0086               	movwf	6
 16803  1327  0855               	movf	??_matrix_Main+1,w
 16804  1328  0087               	movwf	7
 16805  1329  3001               	movlw	1
 16806  132A  0081               	movwf	1
 16807  132B                     l10053:	
 16808                           
 16809                           ;matrix_task.c: 243: }
 16810                           ;matrix_task.c: 245: data->holdCountA = 0;
 16811  132B  085A               	movf	matrix_Main@data,w
 16812  132C  0086               	movwf	6
 16813  132D  085B               	movf	matrix_Main@data+1,w
 16814  132E  0087               	movwf	7
 16815  132F  3149               	addfsr 1,9
 16816  1330  3000               	movlw	0
 16817  1331  3FC0               	movwi [0]fsr1
 16818  1332  3FC1               	movwi [1]fsr1
 16819                           
 16820                           ;matrix_task.c: 246: data->holdCountB = 0;
 16821  1333  085A               	movf	matrix_Main@data,w
 16822  1334  0086               	movwf	6
 16823  1335  085B               	movf	matrix_Main@data+1,w
 16824  1336  0087               	movwf	7
 16825  1337  314B               	addfsr 1,11
 16826  1338  3000               	movlw	0
 16827  1339  3FC0               	movwi [0]fsr1
 16828  133A  3FC1               	movwi [1]fsr1
 16829                           
 16830                           ;matrix_task.c: 247: data->holdCountX = 0;
 16831  133B  085A               	movf	matrix_Main@data,w
 16832  133C  0086               	movwf	6
 16833  133D  085B               	movf	matrix_Main@data+1,w
 16834  133E  0087               	movwf	7
 16835  133F  314D               	addfsr 1,13
 16836  1340  3000               	movlw	0
 16837  1341  3FC0               	movwi [0]fsr1
 16838  1342  3FC1               	movwi [1]fsr1
 16839                           
 16840                           ;matrix_task.c: 248: data->holdCountY += 1;
 16841  1343  085A               	movf	matrix_Main@data,w
 16842  1344  0086               	movwf	6
 16843  1345  085B               	movf	matrix_Main@data+1,w
 16844  1346  0087               	movwf	7
 16845  1347  314F               	addfsr 1,15
 16846  1348  3001               	movlw	1
 16847  1349  0781               	addwf	1,f
 16848  134A  3141               	addfsr 1,1
 16849  134B  1803               	skipnc
 16850  134C  0A81               	incf	1,f
 16851                           
 16852                           ;matrix_task.c: 249: data->holdCountXY = 0;
 16853  134D  085A               	movf	matrix_Main@data,w
 16854  134E  0086               	movwf	6
 16855  134F  085B               	movf	matrix_Main@data+1,w
 16856  1350  0087               	movwf	7
 16857  1351  3151               	addfsr 1,17
 16858  1352  3000               	movlw	0
 16859  1353  3FC0               	movwi [0]fsr1
 16860  1354  3FC1               	movwi [1]fsr1
 16861                           
 16862                           ;matrix_task.c: 250: data->holdCountAY = 0;
 16863  1355  085A               	movf	matrix_Main@data,w
 16864  1356  0086               	movwf	6
 16865  1357  085B               	movf	matrix_Main@data+1,w
 16866  1358  0087               	movwf	7
 16867  1359  3153               	addfsr 1,19
 16868  135A  3000               	movlw	0
 16869  135B  3FC0               	movwi [0]fsr1
 16870  135C  3FC1               	movwi [1]fsr1
 16871                           
 16872                           ;matrix_task.c: 251: data->holdCountAX = 0;
 16873  135D  085A               	movf	matrix_Main@data,w
 16874  135E  0086               	movwf	6
 16875  135F  085B               	movf	matrix_Main@data+1,w
 16876  1360  0087               	movwf	7
 16877  1361  3155               	addfsr 1,21
 16878  1362  3000               	movlw	0
 16879  1363  3FC0               	movwi [0]fsr1
 16880  1364  3FC1               	movwi [1]fsr1
 16881                           
 16882                           ;matrix_task.c: 252: data->holdCountBX = 0;
 16883  1365  085A               	movf	matrix_Main@data,w
 16884  1366  0086               	movwf	6
 16885  1367  085B               	movf	matrix_Main@data+1,w
 16886  1368  0087               	movwf	7
 16887  1369  3157               	addfsr 1,23
 16888  136A  3000               	movlw	0
 16889  136B  3FC0               	movwi [0]fsr1
 16890  136C  3FC1               	movwi [1]fsr1
 16891                           
 16892                           ;matrix_task.c: 253: data->holdCountBY = 0;
 16893  136D  085A               	movf	matrix_Main@data,w
 16894  136E  0086               	movwf	6
 16895  136F  085B               	movf	matrix_Main@data+1,w
 16896  1370  0087               	movwf	7
 16897  1371  3159               	addfsr 1,25
 16898  1372  3000               	movlw	0
 16899  1373  3FC0               	movwi [0]fsr1
 16900  1374  3FC1               	movwi [1]fsr1
 16901                           
 16902                           ;matrix_task.c: 254: data->holdCountBA = 0;
 16903  1375  085A               	movf	matrix_Main@data,w
 16904  1376  0086               	movwf	6
 16905  1377  085B               	movf	matrix_Main@data+1,w
 16906  1378  0087               	movwf	7
 16907  1379  315B               	addfsr 1,27
 16908  137A  3000               	movlw	0
 16909  137B  3FC0               	movwi [0]fsr1
 16910  137C  3FC1               	movwi [1]fsr1
 16911                           
 16912                           ;matrix_task.c: 255: data->noholdCount = 0;
 16913  137D  085A               	movf	matrix_Main@data,w
 16914  137E  0086               	movwf	6
 16915  137F  085B               	movf	matrix_Main@data+1,w
 16916  1380  0087               	movwf	7
 16917  1381  315D               	addfsr 1,29
 16918  1382  3000               	movlw	0
 16919  1383  3FC0               	movwi [0]fsr1
 16920  1384  3FC1               	movwi [1]fsr1
 16921                           
 16922                           ;matrix_task.c: 256: data->displayTickdown = 300;
 16923  1385  085A               	movf	matrix_Main@data,w
 16924  1386  0086               	movwf	6
 16925  1387  085B               	movf	matrix_Main@data+1,w
 16926  1388  0087               	movwf	7
 16927  1389  3147               	addfsr 1,7
 16928  138A  302C               	movlw	44
 16929  138B  3FC0               	movwi [0]fsr1
 16930  138C  3001               	movlw	1
 16931  138D  3FC1               	movwi [1]fsr1
 16932                           
 16933                           ;matrix_task.c: 257: break;
 16934  138E  2FB4               	goto	l10291
 16935  138F                     l10077:	
 16936                           ;matrix_task.c: 258: case 4 | 8:
 16937                           
 16938                           
 16939                           ;matrix_task.c: 260: if (data->holdCountXY == holdvalue){
 16940  138F  085A               	movf	matrix_Main@data,w
 16941  1390  0086               	movwf	6
 16942  1391  085B               	movf	matrix_Main@data+1,w
 16943  1392  0087               	movwf	7
 16944  1393  3151               	addfsr 1,17
 16945  1394  3F40               	moviw [0]fsr1
 16946  1395  00D4               	movwf	??_matrix_Main
 16947  1396  3F41               	moviw [1]fsr1
 16948  1397  00D5               	movwf	??_matrix_Main+1
 16949  1398  0859               	movf	matrix_Main@holdvalue,w
 16950  1399  00D6               	movwf	??_matrix_Main+2
 16951  139A  01D7               	clrf	??_matrix_Main+3
 16952  139B  0855               	movf	??_matrix_Main+1,w
 16953  139C  0657               	xorwf	??_matrix_Main+3,w
 16954  139D  1D03               	skipz
 16955  139E  2BA1               	goto	u6405
 16956  139F  0854               	movf	??_matrix_Main,w
 16957  13A0  0656               	xorwf	??_matrix_Main+2,w
 16958  13A1                     u6405:	
 16959  13A1  1D03               	skipz
 16960  13A2  2BC0               	goto	l10083
 16961                           
 16962                           ;matrix_task.c: 261: matrix_found = matrix_secret_check(data, 4 | 8);
 16963  13A3  085B               	movf	matrix_Main@data+1,w
 16964  13A4  00F8               	movwf	matrix_secret_check@data+1
 16965  13A5  085A               	movf	matrix_Main@data,w
 16966  13A6  00F7               	movwf	matrix_secret_check@data
 16967  13A7  300C               	movlw	12
 16968  13A8  00D4               	movwf	??_matrix_Main
 16969  13A9  0854               	movf	??_matrix_Main,w
 16970  13AA  00F9               	movwf	matrix_secret_check@buttonPressed
 16971  13AB  31A4  24CD  3190   	fcall	_matrix_secret_check
 16972  13AE  0020               	movlb	0	; select bank0
 16973  13AF  00D5               	movwf	??_matrix_Main+1
 16974  13B0  0855               	movf	??_matrix_Main+1,w
 16975  13B1  0021               	movlb	1	; select bank1
 16976  13B2  00C2               	movwf	_matrix_found^(0+128)
 16977                           
 16978                           ;matrix_task.c: 262: data->display_state = MATRIX_XY;
 16979  13B3  0020               	movlb	0	; select bank0
 16980  13B4  085A               	movf	matrix_Main@data,w
 16981  13B5  3E02               	addlw	2
 16982  13B6  00D4               	movwf	??_matrix_Main
 16983  13B7  3000               	movlw	0
 16984  13B8  3D5B               	addwfc	matrix_Main@data+1,w
 16985  13B9  00D5               	movwf	??_matrix_Main+1
 16986  13BA  0854               	movf	??_matrix_Main,w
 16987  13BB  0086               	movwf	6
 16988  13BC  0855               	movf	??_matrix_Main+1,w
 16989  13BD  0087               	movwf	7
 16990  13BE  3008               	movlw	8
 16991  13BF  0081               	movwf	1
 16992  13C0                     l10083:	
 16993                           
 16994                           ;matrix_task.c: 263: }
 16995                           ;matrix_task.c: 264: data->holdCountA = 0;
 16996  13C0  085A               	movf	matrix_Main@data,w
 16997  13C1  0086               	movwf	6
 16998  13C2  085B               	movf	matrix_Main@data+1,w
 16999  13C3  0087               	movwf	7
 17000  13C4  3149               	addfsr 1,9
 17001  13C5  3000               	movlw	0
 17002  13C6  3FC0               	movwi [0]fsr1
 17003  13C7  3FC1               	movwi [1]fsr1
 17004                           
 17005                           ;matrix_task.c: 265: data->holdCountB = 0;
 17006  13C8  085A               	movf	matrix_Main@data,w
 17007  13C9  0086               	movwf	6
 17008  13CA  085B               	movf	matrix_Main@data+1,w
 17009  13CB  0087               	movwf	7
 17010  13CC  314B               	addfsr 1,11
 17011  13CD  3000               	movlw	0
 17012  13CE  3FC0               	movwi [0]fsr1
 17013  13CF  3FC1               	movwi [1]fsr1
 17014                           
 17015                           ;matrix_task.c: 266: data->holdCountX = 0;
 17016  13D0  085A               	movf	matrix_Main@data,w
 17017  13D1  0086               	movwf	6
 17018  13D2  085B               	movf	matrix_Main@data+1,w
 17019  13D3  0087               	movwf	7
 17020  13D4  314D               	addfsr 1,13
 17021  13D5  3000               	movlw	0
 17022  13D6  3FC0               	movwi [0]fsr1
 17023  13D7  3FC1               	movwi [1]fsr1
 17024                           
 17025                           ;matrix_task.c: 267: data->holdCountY = 0;
 17026  13D8  085A               	movf	matrix_Main@data,w
 17027  13D9  0086               	movwf	6
 17028  13DA  085B               	movf	matrix_Main@data+1,w
 17029  13DB  0087               	movwf	7
 17030  13DC  314F               	addfsr 1,15
 17031  13DD  3000               	movlw	0
 17032  13DE  3FC0               	movwi [0]fsr1
 17033  13DF  3FC1               	movwi [1]fsr1
 17034                           
 17035                           ;matrix_task.c: 268: data->holdCountXY += 1;
 17036  13E0  085A               	movf	matrix_Main@data,w
 17037  13E1  0086               	movwf	6
 17038  13E2  085B               	movf	matrix_Main@data+1,w
 17039  13E3  0087               	movwf	7
 17040  13E4  3151               	addfsr 1,17
 17041  13E5  3001               	movlw	1
 17042  13E6  0781               	addwf	1,f
 17043  13E7  3141               	addfsr 1,1
 17044  13E8  1803               	skipnc
 17045  13E9  0A81               	incf	1,f
 17046                           
 17047                           ;matrix_task.c: 269: data->holdCountAY = 0;
 17048  13EA  085A               	movf	matrix_Main@data,w
 17049  13EB  0086               	movwf	6
 17050  13EC  085B               	movf	matrix_Main@data+1,w
 17051  13ED  0087               	movwf	7
 17052  13EE  3153               	addfsr 1,19
 17053  13EF  3000               	movlw	0
 17054  13F0  3FC0               	movwi [0]fsr1
 17055  13F1  3FC1               	movwi [1]fsr1
 17056                           
 17057                           ;matrix_task.c: 270: data->holdCountAX = 0;
 17058  13F2  085A               	movf	matrix_Main@data,w
 17059  13F3  0086               	movwf	6
 17060  13F4  085B               	movf	matrix_Main@data+1,w
 17061  13F5  0087               	movwf	7
 17062  13F6  3155               	addfsr 1,21
 17063  13F7  3000               	movlw	0
 17064  13F8  3FC0               	movwi [0]fsr1
 17065  13F9  3FC1               	movwi [1]fsr1
 17066                           
 17067                           ;matrix_task.c: 271: data->holdCountBX = 0;
 17068  13FA  085A               	movf	matrix_Main@data,w
 17069  13FB  0086               	movwf	6
 17070  13FC  085B               	movf	matrix_Main@data+1,w
 17071  13FD  0087               	movwf	7
 17072  13FE  3157               	addfsr 1,23
 17073  13FF  3000               	movlw	0
 17074  1400  3FC0               	movwi [0]fsr1
 17075  1401  3FC1               	movwi [1]fsr1
 17076                           
 17077                           ;matrix_task.c: 272: data->holdCountBY = 0;
 17078  1402  085A               	movf	matrix_Main@data,w
 17079  1403  0086               	movwf	6
 17080  1404  085B               	movf	matrix_Main@data+1,w
 17081  1405  0087               	movwf	7
 17082  1406  3159               	addfsr 1,25
 17083  1407  3000               	movlw	0
 17084  1408  3FC0               	movwi [0]fsr1
 17085  1409  3FC1               	movwi [1]fsr1
 17086                           
 17087                           ;matrix_task.c: 273: data->holdCountBA = 0;
 17088  140A  085A               	movf	matrix_Main@data,w
 17089  140B  0086               	movwf	6
 17090  140C  085B               	movf	matrix_Main@data+1,w
 17091  140D  0087               	movwf	7
 17092  140E  315B               	addfsr 1,27
 17093  140F  3000               	movlw	0
 17094  1410  3FC0               	movwi [0]fsr1
 17095  1411  3FC1               	movwi [1]fsr1
 17096                           
 17097                           ;matrix_task.c: 274: data->noholdCount = 0;
 17098  1412  085A               	movf	matrix_Main@data,w
 17099  1413  0086               	movwf	6
 17100  1414  085B               	movf	matrix_Main@data+1,w
 17101  1415  0087               	movwf	7
 17102  1416  315D               	addfsr 1,29
 17103  1417  3000               	movlw	0
 17104  1418  3FC0               	movwi [0]fsr1
 17105  1419  3FC1               	movwi [1]fsr1
 17106                           
 17107                           ;matrix_task.c: 275: data->displayTickdown = 300;
 17108  141A  085A               	movf	matrix_Main@data,w
 17109  141B  0086               	movwf	6
 17110  141C  085B               	movf	matrix_Main@data+1,w
 17111  141D  0087               	movwf	7
 17112  141E  3147               	addfsr 1,7
 17113  141F  302C               	movlw	44
 17114  1420  3FC0               	movwi [0]fsr1
 17115  1421  3001               	movlw	1
 17116  1422  3FC1               	movwi [1]fsr1
 17117                           
 17118                           ;matrix_task.c: 276: break;
 17119  1423  2FB4               	goto	l10291
 17120  1424                     l10107:	
 17121                           ;matrix_task.c: 277: case 1 | 8:
 17122                           
 17123                           
 17124                           ;matrix_task.c: 279: if (data->holdCountAY == holdvalue){
 17125  1424  085A               	movf	matrix_Main@data,w
 17126  1425  0086               	movwf	6
 17127  1426  085B               	movf	matrix_Main@data+1,w
 17128  1427  0087               	movwf	7
 17129  1428  3153               	addfsr 1,19
 17130  1429  3F40               	moviw [0]fsr1
 17131  142A  00D4               	movwf	??_matrix_Main
 17132  142B  3F41               	moviw [1]fsr1
 17133  142C  00D5               	movwf	??_matrix_Main+1
 17134  142D  0859               	movf	matrix_Main@holdvalue,w
 17135  142E  00D6               	movwf	??_matrix_Main+2
 17136  142F  01D7               	clrf	??_matrix_Main+3
 17137  1430  0855               	movf	??_matrix_Main+1,w
 17138  1431  0657               	xorwf	??_matrix_Main+3,w
 17139  1432  1D03               	skipz
 17140  1433  2C36               	goto	u6415
 17141  1434  0854               	movf	??_matrix_Main,w
 17142  1435  0656               	xorwf	??_matrix_Main+2,w
 17143  1436                     u6415:	
 17144  1436  1D03               	skipz
 17145  1437  2C55               	goto	l10113
 17146                           
 17147                           ;matrix_task.c: 280: matrix_found = matrix_secret_check(data, 1 | 8);
 17148  1438  085B               	movf	matrix_Main@data+1,w
 17149  1439  00F8               	movwf	matrix_secret_check@data+1
 17150  143A  085A               	movf	matrix_Main@data,w
 17151  143B  00F7               	movwf	matrix_secret_check@data
 17152  143C  3009               	movlw	9
 17153  143D  00D4               	movwf	??_matrix_Main
 17154  143E  0854               	movf	??_matrix_Main,w
 17155  143F  00F9               	movwf	matrix_secret_check@buttonPressed
 17156  1440  31A4  24CD  3190   	fcall	_matrix_secret_check
 17157  1443  0020               	movlb	0	; select bank0
 17158  1444  00D5               	movwf	??_matrix_Main+1
 17159  1445  0855               	movf	??_matrix_Main+1,w
 17160  1446  0021               	movlb	1	; select bank1
 17161  1447  00C2               	movwf	_matrix_found^(0+128)
 17162                           
 17163                           ;matrix_task.c: 281: data->display_state = MATRIX_AY;
 17164  1448  0020               	movlb	0	; select bank0
 17165  1449  085A               	movf	matrix_Main@data,w
 17166  144A  3E02               	addlw	2
 17167  144B  00D4               	movwf	??_matrix_Main
 17168  144C  3000               	movlw	0
 17169  144D  3D5B               	addwfc	matrix_Main@data+1,w
 17170  144E  00D5               	movwf	??_matrix_Main+1
 17171  144F  0854               	movf	??_matrix_Main,w
 17172  1450  0086               	movwf	6
 17173  1451  0855               	movf	??_matrix_Main+1,w
 17174  1452  0087               	movwf	7
 17175  1453  3005               	movlw	5
 17176  1454  0081               	movwf	1
 17177  1455                     l10113:	
 17178                           
 17179                           ;matrix_task.c: 282: }
 17180                           ;matrix_task.c: 283: data->holdCountA = 0;
 17181  1455  085A               	movf	matrix_Main@data,w
 17182  1456  0086               	movwf	6
 17183  1457  085B               	movf	matrix_Main@data+1,w
 17184  1458  0087               	movwf	7
 17185  1459  3149               	addfsr 1,9
 17186  145A  3000               	movlw	0
 17187  145B  3FC0               	movwi [0]fsr1
 17188  145C  3FC1               	movwi [1]fsr1
 17189                           
 17190                           ;matrix_task.c: 284: data->holdCountB = 0;
 17191  145D  085A               	movf	matrix_Main@data,w
 17192  145E  0086               	movwf	6
 17193  145F  085B               	movf	matrix_Main@data+1,w
 17194  1460  0087               	movwf	7
 17195  1461  314B               	addfsr 1,11
 17196  1462  3000               	movlw	0
 17197  1463  3FC0               	movwi [0]fsr1
 17198  1464  3FC1               	movwi [1]fsr1
 17199                           
 17200                           ;matrix_task.c: 285: data->holdCountX = 0;
 17201  1465  085A               	movf	matrix_Main@data,w
 17202  1466  0086               	movwf	6
 17203  1467  085B               	movf	matrix_Main@data+1,w
 17204  1468  0087               	movwf	7
 17205  1469  314D               	addfsr 1,13
 17206  146A  3000               	movlw	0
 17207  146B  3FC0               	movwi [0]fsr1
 17208  146C  3FC1               	movwi [1]fsr1
 17209                           
 17210                           ;matrix_task.c: 286: data->holdCountY = 0;
 17211  146D  085A               	movf	matrix_Main@data,w
 17212  146E  0086               	movwf	6
 17213  146F  085B               	movf	matrix_Main@data+1,w
 17214  1470  0087               	movwf	7
 17215  1471  314F               	addfsr 1,15
 17216  1472  3000               	movlw	0
 17217  1473  3FC0               	movwi [0]fsr1
 17218  1474  3FC1               	movwi [1]fsr1
 17219                           
 17220                           ;matrix_task.c: 287: data->holdCountXY = 0;
 17221  1475  085A               	movf	matrix_Main@data,w
 17222  1476  0086               	movwf	6
 17223  1477  085B               	movf	matrix_Main@data+1,w
 17224  1478  0087               	movwf	7
 17225  1479  3151               	addfsr 1,17
 17226  147A  3000               	movlw	0
 17227  147B  3FC0               	movwi [0]fsr1
 17228  147C  3FC1               	movwi [1]fsr1
 17229                           
 17230                           ;matrix_task.c: 288: data->holdCountAY += 1;
 17231  147D  085A               	movf	matrix_Main@data,w
 17232  147E  0086               	movwf	6
 17233  147F  085B               	movf	matrix_Main@data+1,w
 17234  1480  0087               	movwf	7
 17235  1481  3153               	addfsr 1,19
 17236  1482  3001               	movlw	1
 17237  1483  0781               	addwf	1,f
 17238  1484  3141               	addfsr 1,1
 17239  1485  1803               	skipnc
 17240  1486  0A81               	incf	1,f
 17241                           
 17242                           ;matrix_task.c: 289: data->holdCountAX = 0;
 17243  1487  085A               	movf	matrix_Main@data,w
 17244  1488  0086               	movwf	6
 17245  1489  085B               	movf	matrix_Main@data+1,w
 17246  148A  0087               	movwf	7
 17247  148B  3155               	addfsr 1,21
 17248  148C  3000               	movlw	0
 17249  148D  3FC0               	movwi [0]fsr1
 17250  148E  3FC1               	movwi [1]fsr1
 17251                           
 17252                           ;matrix_task.c: 290: data->holdCountBX = 0;
 17253  148F  085A               	movf	matrix_Main@data,w
 17254  1490  0086               	movwf	6
 17255  1491  085B               	movf	matrix_Main@data+1,w
 17256  1492  0087               	movwf	7
 17257  1493  3157               	addfsr 1,23
 17258  1494  3000               	movlw	0
 17259  1495  3FC0               	movwi [0]fsr1
 17260  1496  3FC1               	movwi [1]fsr1
 17261                           
 17262                           ;matrix_task.c: 291: data->holdCountBY = 0;
 17263  1497  085A               	movf	matrix_Main@data,w
 17264  1498  0086               	movwf	6
 17265  1499  085B               	movf	matrix_Main@data+1,w
 17266  149A  0087               	movwf	7
 17267  149B  3159               	addfsr 1,25
 17268  149C  3000               	movlw	0
 17269  149D  3FC0               	movwi [0]fsr1
 17270  149E  3FC1               	movwi [1]fsr1
 17271                           
 17272                           ;matrix_task.c: 292: data->holdCountBA = 0;
 17273  149F  085A               	movf	matrix_Main@data,w
 17274  14A0  0086               	movwf	6
 17275  14A1  085B               	movf	matrix_Main@data+1,w
 17276  14A2  0087               	movwf	7
 17277  14A3  315B               	addfsr 1,27
 17278  14A4  3000               	movlw	0
 17279  14A5  3FC0               	movwi [0]fsr1
 17280  14A6  3FC1               	movwi [1]fsr1
 17281                           
 17282                           ;matrix_task.c: 293: data->noholdCount = 0;
 17283  14A7  085A               	movf	matrix_Main@data,w
 17284  14A8  0086               	movwf	6
 17285  14A9  085B               	movf	matrix_Main@data+1,w
 17286  14AA  0087               	movwf	7
 17287  14AB  315D               	addfsr 1,29
 17288  14AC  3000               	movlw	0
 17289  14AD  3FC0               	movwi [0]fsr1
 17290  14AE  3FC1               	movwi [1]fsr1
 17291                           
 17292                           ;matrix_task.c: 294: data->displayTickdown = 300;
 17293  14AF  085A               	movf	matrix_Main@data,w
 17294  14B0  0086               	movwf	6
 17295  14B1  085B               	movf	matrix_Main@data+1,w
 17296  14B2  0087               	movwf	7
 17297  14B3  3147               	addfsr 1,7
 17298  14B4  302C               	movlw	44
 17299  14B5  3FC0               	movwi [0]fsr1
 17300  14B6  3001               	movlw	1
 17301  14B7  3FC1               	movwi [1]fsr1
 17302                           
 17303                           ;matrix_task.c: 295: break;
 17304  14B8  2FB4               	goto	l10291
 17305  14B9                     l10137:	
 17306                           ;matrix_task.c: 296: case 1 | 4:
 17307                           
 17308                           
 17309                           ;matrix_task.c: 298: if (data->holdCountAX == holdvalue){
 17310  14B9  085A               	movf	matrix_Main@data,w
 17311  14BA  0086               	movwf	6
 17312  14BB  085B               	movf	matrix_Main@data+1,w
 17313  14BC  0087               	movwf	7
 17314  14BD  3155               	addfsr 1,21
 17315  14BE  3F40               	moviw [0]fsr1
 17316  14BF  00D4               	movwf	??_matrix_Main
 17317  14C0  3F41               	moviw [1]fsr1
 17318  14C1  00D5               	movwf	??_matrix_Main+1
 17319  14C2  0859               	movf	matrix_Main@holdvalue,w
 17320  14C3  00D6               	movwf	??_matrix_Main+2
 17321  14C4  01D7               	clrf	??_matrix_Main+3
 17322  14C5  0855               	movf	??_matrix_Main+1,w
 17323  14C6  0657               	xorwf	??_matrix_Main+3,w
 17324  14C7  1D03               	skipz
 17325  14C8  2CCB               	goto	u6425
 17326  14C9  0854               	movf	??_matrix_Main,w
 17327  14CA  0656               	xorwf	??_matrix_Main+2,w
 17328  14CB                     u6425:	
 17329  14CB  1D03               	skipz
 17330  14CC  2CEA               	goto	l10143
 17331                           
 17332                           ;matrix_task.c: 299: matrix_found = matrix_secret_check(data, 1 | 4);
 17333  14CD  085B               	movf	matrix_Main@data+1,w
 17334  14CE  00F8               	movwf	matrix_secret_check@data+1
 17335  14CF  085A               	movf	matrix_Main@data,w
 17336  14D0  00F7               	movwf	matrix_secret_check@data
 17337  14D1  3005               	movlw	5
 17338  14D2  00D4               	movwf	??_matrix_Main
 17339  14D3  0854               	movf	??_matrix_Main,w
 17340  14D4  00F9               	movwf	matrix_secret_check@buttonPressed
 17341  14D5  31A4  24CD  3190   	fcall	_matrix_secret_check
 17342  14D8  0020               	movlb	0	; select bank0
 17343  14D9  00D5               	movwf	??_matrix_Main+1
 17344  14DA  0855               	movf	??_matrix_Main+1,w
 17345  14DB  0021               	movlb	1	; select bank1
 17346  14DC  00C2               	movwf	_matrix_found^(0+128)
 17347                           
 17348                           ;matrix_task.c: 300: data->display_state = MATRIX_AX;
 17349  14DD  0020               	movlb	0	; select bank0
 17350  14DE  085A               	movf	matrix_Main@data,w
 17351  14DF  3E02               	addlw	2
 17352  14E0  00D4               	movwf	??_matrix_Main
 17353  14E1  3000               	movlw	0
 17354  14E2  3D5B               	addwfc	matrix_Main@data+1,w
 17355  14E3  00D5               	movwf	??_matrix_Main+1
 17356  14E4  0854               	movf	??_matrix_Main,w
 17357  14E5  0086               	movwf	6
 17358  14E6  0855               	movf	??_matrix_Main+1,w
 17359  14E7  0087               	movwf	7
 17360  14E8  3004               	movlw	4
 17361  14E9  0081               	movwf	1
 17362  14EA                     l10143:	
 17363                           
 17364                           ;matrix_task.c: 301: }
 17365                           ;matrix_task.c: 302: data->holdCountA = 0;
 17366  14EA  085A               	movf	matrix_Main@data,w
 17367  14EB  0086               	movwf	6
 17368  14EC  085B               	movf	matrix_Main@data+1,w
 17369  14ED  0087               	movwf	7
 17370  14EE  3149               	addfsr 1,9
 17371  14EF  3000               	movlw	0
 17372  14F0  3FC0               	movwi [0]fsr1
 17373  14F1  3FC1               	movwi [1]fsr1
 17374                           
 17375                           ;matrix_task.c: 303: data->holdCountB = 0;
 17376  14F2  085A               	movf	matrix_Main@data,w
 17377  14F3  0086               	movwf	6
 17378  14F4  085B               	movf	matrix_Main@data+1,w
 17379  14F5  0087               	movwf	7
 17380  14F6  314B               	addfsr 1,11
 17381  14F7  3000               	movlw	0
 17382  14F8  3FC0               	movwi [0]fsr1
 17383  14F9  3FC1               	movwi [1]fsr1
 17384                           
 17385                           ;matrix_task.c: 304: data->holdCountX = 0;
 17386  14FA  085A               	movf	matrix_Main@data,w
 17387  14FB  0086               	movwf	6
 17388  14FC  085B               	movf	matrix_Main@data+1,w
 17389  14FD  0087               	movwf	7
 17390  14FE  314D               	addfsr 1,13
 17391  14FF  3000               	movlw	0
 17392  1500  3FC0               	movwi [0]fsr1
 17393  1501  3FC1               	movwi [1]fsr1
 17394                           
 17395                           ;matrix_task.c: 305: data->holdCountY = 0;
 17396  1502  085A               	movf	matrix_Main@data,w
 17397  1503  0086               	movwf	6
 17398  1504  085B               	movf	matrix_Main@data+1,w
 17399  1505  0087               	movwf	7
 17400  1506  314F               	addfsr 1,15
 17401  1507  3000               	movlw	0
 17402  1508  3FC0               	movwi [0]fsr1
 17403  1509  3FC1               	movwi [1]fsr1
 17404                           
 17405                           ;matrix_task.c: 306: data->holdCountXY = 0;
 17406  150A  085A               	movf	matrix_Main@data,w
 17407  150B  0086               	movwf	6
 17408  150C  085B               	movf	matrix_Main@data+1,w
 17409  150D  0087               	movwf	7
 17410  150E  3151               	addfsr 1,17
 17411  150F  3000               	movlw	0
 17412  1510  3FC0               	movwi [0]fsr1
 17413  1511  3FC1               	movwi [1]fsr1
 17414                           
 17415                           ;matrix_task.c: 307: data->holdCountAY = 0;
 17416  1512  085A               	movf	matrix_Main@data,w
 17417  1513  0086               	movwf	6
 17418  1514  085B               	movf	matrix_Main@data+1,w
 17419  1515  0087               	movwf	7
 17420  1516  3153               	addfsr 1,19
 17421  1517  3000               	movlw	0
 17422  1518  3FC0               	movwi [0]fsr1
 17423  1519  3FC1               	movwi [1]fsr1
 17424                           
 17425                           ;matrix_task.c: 308: data->holdCountAX += 1;
 17426  151A  085A               	movf	matrix_Main@data,w
 17427  151B  0086               	movwf	6
 17428  151C  085B               	movf	matrix_Main@data+1,w
 17429  151D  0087               	movwf	7
 17430  151E  3155               	addfsr 1,21
 17431  151F  3001               	movlw	1
 17432  1520  0781               	addwf	1,f
 17433  1521  3141               	addfsr 1,1
 17434  1522  1803               	skipnc
 17435  1523  0A81               	incf	1,f
 17436                           
 17437                           ;matrix_task.c: 309: data->holdCountBX = 0;
 17438  1524  085A               	movf	matrix_Main@data,w
 17439  1525  0086               	movwf	6
 17440  1526  085B               	movf	matrix_Main@data+1,w
 17441  1527  0087               	movwf	7
 17442  1528  3157               	addfsr 1,23
 17443  1529  3000               	movlw	0
 17444  152A  3FC0               	movwi [0]fsr1
 17445  152B  3FC1               	movwi [1]fsr1
 17446                           
 17447                           ;matrix_task.c: 310: data->holdCountBY = 0;
 17448  152C  085A               	movf	matrix_Main@data,w
 17449  152D  0086               	movwf	6
 17450  152E  085B               	movf	matrix_Main@data+1,w
 17451  152F  0087               	movwf	7
 17452  1530  3159               	addfsr 1,25
 17453  1531  3000               	movlw	0
 17454  1532  3FC0               	movwi [0]fsr1
 17455  1533  3FC1               	movwi [1]fsr1
 17456                           
 17457                           ;matrix_task.c: 311: data->holdCountBA = 0;
 17458  1534  085A               	movf	matrix_Main@data,w
 17459  1535  0086               	movwf	6
 17460  1536  085B               	movf	matrix_Main@data+1,w
 17461  1537  0087               	movwf	7
 17462  1538  315B               	addfsr 1,27
 17463  1539  3000               	movlw	0
 17464  153A  3FC0               	movwi [0]fsr1
 17465  153B  3FC1               	movwi [1]fsr1
 17466                           
 17467                           ;matrix_task.c: 312: data->noholdCount = 0;
 17468  153C  085A               	movf	matrix_Main@data,w
 17469  153D  0086               	movwf	6
 17470  153E  085B               	movf	matrix_Main@data+1,w
 17471  153F  0087               	movwf	7
 17472  1540  315D               	addfsr 1,29
 17473  1541  3000               	movlw	0
 17474  1542  3FC0               	movwi [0]fsr1
 17475  1543  3FC1               	movwi [1]fsr1
 17476                           
 17477                           ;matrix_task.c: 313: data->displayTickdown = 300;
 17478  1544  085A               	movf	matrix_Main@data,w
 17479  1545  0086               	movwf	6
 17480  1546  085B               	movf	matrix_Main@data+1,w
 17481  1547  0087               	movwf	7
 17482  1548  3147               	addfsr 1,7
 17483  1549  302C               	movlw	44
 17484  154A  3FC0               	movwi [0]fsr1
 17485  154B  3001               	movlw	1
 17486  154C  3FC1               	movwi [1]fsr1
 17487                           
 17488                           ;matrix_task.c: 314: break;
 17489  154D  2FB4               	goto	l10291
 17490  154E                     l10167:	
 17491                           ;matrix_task.c: 315: case 2 | 4:
 17492                           
 17493                           
 17494                           ;matrix_task.c: 317: if (data->holdCountBX == holdvalue){
 17495  154E  085A               	movf	matrix_Main@data,w
 17496  154F  0086               	movwf	6
 17497  1550  085B               	movf	matrix_Main@data+1,w
 17498  1551  0087               	movwf	7
 17499  1552  3157               	addfsr 1,23
 17500  1553  3F40               	moviw [0]fsr1
 17501  1554  00D4               	movwf	??_matrix_Main
 17502  1555  3F41               	moviw [1]fsr1
 17503  1556  00D5               	movwf	??_matrix_Main+1
 17504  1557  0859               	movf	matrix_Main@holdvalue,w
 17505  1558  00D6               	movwf	??_matrix_Main+2
 17506  1559  01D7               	clrf	??_matrix_Main+3
 17507  155A  0855               	movf	??_matrix_Main+1,w
 17508  155B  0657               	xorwf	??_matrix_Main+3,w
 17509  155C  1D03               	skipz
 17510  155D  2D60               	goto	u6435
 17511  155E  0854               	movf	??_matrix_Main,w
 17512  155F  0656               	xorwf	??_matrix_Main+2,w
 17513  1560                     u6435:	
 17514  1560  1D03               	skipz
 17515  1561  2D7F               	goto	l10173
 17516                           
 17517                           ;matrix_task.c: 318: matrix_found = matrix_secret_check(data, 2 | 4);
 17518  1562  085B               	movf	matrix_Main@data+1,w
 17519  1563  00F8               	movwf	matrix_secret_check@data+1
 17520  1564  085A               	movf	matrix_Main@data,w
 17521  1565  00F7               	movwf	matrix_secret_check@data
 17522  1566  3006               	movlw	6
 17523  1567  00D4               	movwf	??_matrix_Main
 17524  1568  0854               	movf	??_matrix_Main,w
 17525  1569  00F9               	movwf	matrix_secret_check@buttonPressed
 17526  156A  31A4  24CD  3190   	fcall	_matrix_secret_check
 17527  156D  0020               	movlb	0	; select bank0
 17528  156E  00D5               	movwf	??_matrix_Main+1
 17529  156F  0855               	movf	??_matrix_Main+1,w
 17530  1570  0021               	movlb	1	; select bank1
 17531  1571  00C2               	movwf	_matrix_found^(0+128)
 17532                           
 17533                           ;matrix_task.c: 319: data->display_state = MATRIX_BX;
 17534  1572  0020               	movlb	0	; select bank0
 17535  1573  085A               	movf	matrix_Main@data,w
 17536  1574  3E02               	addlw	2
 17537  1575  00D4               	movwf	??_matrix_Main
 17538  1576  3000               	movlw	0
 17539  1577  3D5B               	addwfc	matrix_Main@data+1,w
 17540  1578  00D5               	movwf	??_matrix_Main+1
 17541  1579  0854               	movf	??_matrix_Main,w
 17542  157A  0086               	movwf	6
 17543  157B  0855               	movf	??_matrix_Main+1,w
 17544  157C  0087               	movwf	7
 17545  157D  3007               	movlw	7
 17546  157E  0081               	movwf	1
 17547  157F                     l10173:	
 17548                           
 17549                           ;matrix_task.c: 320: }
 17550                           ;matrix_task.c: 321: data->holdCountA = 0;
 17551  157F  085A               	movf	matrix_Main@data,w
 17552  1580  0086               	movwf	6
 17553  1581  085B               	movf	matrix_Main@data+1,w
 17554  1582  0087               	movwf	7
 17555  1583  3149               	addfsr 1,9
 17556  1584  3000               	movlw	0
 17557  1585  3FC0               	movwi [0]fsr1
 17558  1586  3FC1               	movwi [1]fsr1
 17559                           
 17560                           ;matrix_task.c: 322: data->holdCountB = 0;
 17561  1587  085A               	movf	matrix_Main@data,w
 17562  1588  0086               	movwf	6
 17563  1589  085B               	movf	matrix_Main@data+1,w
 17564  158A  0087               	movwf	7
 17565  158B  314B               	addfsr 1,11
 17566  158C  3000               	movlw	0
 17567  158D  3FC0               	movwi [0]fsr1
 17568  158E  3FC1               	movwi [1]fsr1
 17569                           
 17570                           ;matrix_task.c: 323: data->holdCountX = 0;
 17571  158F  085A               	movf	matrix_Main@data,w
 17572  1590  0086               	movwf	6
 17573  1591  085B               	movf	matrix_Main@data+1,w
 17574  1592  0087               	movwf	7
 17575  1593  314D               	addfsr 1,13
 17576  1594  3000               	movlw	0
 17577  1595  3FC0               	movwi [0]fsr1
 17578  1596  3FC1               	movwi [1]fsr1
 17579                           
 17580                           ;matrix_task.c: 324: data->holdCountY = 0;
 17581  1597  085A               	movf	matrix_Main@data,w
 17582  1598  0086               	movwf	6
 17583  1599  085B               	movf	matrix_Main@data+1,w
 17584  159A  0087               	movwf	7
 17585  159B  314F               	addfsr 1,15
 17586  159C  3000               	movlw	0
 17587  159D  3FC0               	movwi [0]fsr1
 17588  159E  3FC1               	movwi [1]fsr1
 17589                           
 17590                           ;matrix_task.c: 325: data->holdCountXY = 0;
 17591  159F  085A               	movf	matrix_Main@data,w
 17592  15A0  0086               	movwf	6
 17593  15A1  085B               	movf	matrix_Main@data+1,w
 17594  15A2  0087               	movwf	7
 17595  15A3  3151               	addfsr 1,17
 17596  15A4  3000               	movlw	0
 17597  15A5  3FC0               	movwi [0]fsr1
 17598  15A6  3FC1               	movwi [1]fsr1
 17599                           
 17600                           ;matrix_task.c: 326: data->holdCountAY = 0;
 17601  15A7  085A               	movf	matrix_Main@data,w
 17602  15A8  0086               	movwf	6
 17603  15A9  085B               	movf	matrix_Main@data+1,w
 17604  15AA  0087               	movwf	7
 17605  15AB  3153               	addfsr 1,19
 17606  15AC  3000               	movlw	0
 17607  15AD  3FC0               	movwi [0]fsr1
 17608  15AE  3FC1               	movwi [1]fsr1
 17609                           
 17610                           ;matrix_task.c: 327: data->holdCountAX = 0;
 17611  15AF  085A               	movf	matrix_Main@data,w
 17612  15B0  0086               	movwf	6
 17613  15B1  085B               	movf	matrix_Main@data+1,w
 17614  15B2  0087               	movwf	7
 17615  15B3  3155               	addfsr 1,21
 17616  15B4  3000               	movlw	0
 17617  15B5  3FC0               	movwi [0]fsr1
 17618  15B6  3FC1               	movwi [1]fsr1
 17619                           
 17620                           ;matrix_task.c: 328: data->holdCountBX += 1;
 17621  15B7  085A               	movf	matrix_Main@data,w
 17622  15B8  0086               	movwf	6
 17623  15B9  085B               	movf	matrix_Main@data+1,w
 17624  15BA  0087               	movwf	7
 17625  15BB  3157               	addfsr 1,23
 17626  15BC  3001               	movlw	1
 17627  15BD  0781               	addwf	1,f
 17628  15BE  3141               	addfsr 1,1
 17629  15BF  1803               	skipnc
 17630  15C0  0A81               	incf	1,f
 17631                           
 17632                           ;matrix_task.c: 329: data->holdCountBY = 0;
 17633  15C1  085A               	movf	matrix_Main@data,w
 17634  15C2  0086               	movwf	6
 17635  15C3  085B               	movf	matrix_Main@data+1,w
 17636  15C4  0087               	movwf	7
 17637  15C5  3159               	addfsr 1,25
 17638  15C6  3000               	movlw	0
 17639  15C7  3FC0               	movwi [0]fsr1
 17640  15C8  3FC1               	movwi [1]fsr1
 17641                           
 17642                           ;matrix_task.c: 330: data->holdCountBA = 0;
 17643  15C9  085A               	movf	matrix_Main@data,w
 17644  15CA  0086               	movwf	6
 17645  15CB  085B               	movf	matrix_Main@data+1,w
 17646  15CC  0087               	movwf	7
 17647  15CD  315B               	addfsr 1,27
 17648  15CE  3000               	movlw	0
 17649  15CF  3FC0               	movwi [0]fsr1
 17650  15D0  3FC1               	movwi [1]fsr1
 17651                           
 17652                           ;matrix_task.c: 331: data->noholdCount = 0;
 17653  15D1  085A               	movf	matrix_Main@data,w
 17654  15D2  0086               	movwf	6
 17655  15D3  085B               	movf	matrix_Main@data+1,w
 17656  15D4  0087               	movwf	7
 17657  15D5  315D               	addfsr 1,29
 17658  15D6  3000               	movlw	0
 17659  15D7  3FC0               	movwi [0]fsr1
 17660  15D8  3FC1               	movwi [1]fsr1
 17661                           
 17662                           ;matrix_task.c: 332: data->displayTickdown = 300;
 17663  15D9  085A               	movf	matrix_Main@data,w
 17664  15DA  0086               	movwf	6
 17665  15DB  085B               	movf	matrix_Main@data+1,w
 17666  15DC  0087               	movwf	7
 17667  15DD  3147               	addfsr 1,7
 17668  15DE  302C               	movlw	44
 17669  15DF  3FC0               	movwi [0]fsr1
 17670  15E0  3001               	movlw	1
 17671  15E1  3FC1               	movwi [1]fsr1
 17672                           
 17673                           ;matrix_task.c: 333: break;
 17674  15E2  2FB4               	goto	l10291
 17675  15E3                     l10197:	
 17676                           ;matrix_task.c: 334: case 2 | 8:
 17677                           
 17678                           
 17679                           ;matrix_task.c: 336: if (data->holdCountBY == holdvalue){
 17680  15E3  085A               	movf	matrix_Main@data,w
 17681  15E4  0086               	movwf	6
 17682  15E5  085B               	movf	matrix_Main@data+1,w
 17683  15E6  0087               	movwf	7
 17684  15E7  3159               	addfsr 1,25
 17685  15E8  3F40               	moviw [0]fsr1
 17686  15E9  00D4               	movwf	??_matrix_Main
 17687  15EA  3F41               	moviw [1]fsr1
 17688  15EB  00D5               	movwf	??_matrix_Main+1
 17689  15EC  0859               	movf	matrix_Main@holdvalue,w
 17690  15ED  00D6               	movwf	??_matrix_Main+2
 17691  15EE  01D7               	clrf	??_matrix_Main+3
 17692  15EF  0855               	movf	??_matrix_Main+1,w
 17693  15F0  0657               	xorwf	??_matrix_Main+3,w
 17694  15F1  1D03               	skipz
 17695  15F2  2DF5               	goto	u6445
 17696  15F3  0854               	movf	??_matrix_Main,w
 17697  15F4  0656               	xorwf	??_matrix_Main+2,w
 17698  15F5                     u6445:	
 17699  15F5  1D03               	skipz
 17700  15F6  2E14               	goto	l10203
 17701                           
 17702                           ;matrix_task.c: 337: matrix_found = matrix_secret_check(data, 2 | 8);
 17703  15F7  085B               	movf	matrix_Main@data+1,w
 17704  15F8  00F8               	movwf	matrix_secret_check@data+1
 17705  15F9  085A               	movf	matrix_Main@data,w
 17706  15FA  00F7               	movwf	matrix_secret_check@data
 17707  15FB  300A               	movlw	10
 17708  15FC  00D4               	movwf	??_matrix_Main
 17709  15FD  0854               	movf	??_matrix_Main,w
 17710  15FE  00F9               	movwf	matrix_secret_check@buttonPressed
 17711  15FF  31A4  24CD  3190   	fcall	_matrix_secret_check
 17712  1602  0020               	movlb	0	; select bank0
 17713  1603  00D5               	movwf	??_matrix_Main+1
 17714  1604  0855               	movf	??_matrix_Main+1,w
 17715  1605  0021               	movlb	1	; select bank1
 17716  1606  00C2               	movwf	_matrix_found^(0+128)
 17717                           
 17718                           ;matrix_task.c: 338: data->display_state = MATRIX_BY;
 17719  1607  0020               	movlb	0	; select bank0
 17720  1608  085A               	movf	matrix_Main@data,w
 17721  1609  3E02               	addlw	2
 17722  160A  00D4               	movwf	??_matrix_Main
 17723  160B  3000               	movlw	0
 17724  160C  3D5B               	addwfc	matrix_Main@data+1,w
 17725  160D  00D5               	movwf	??_matrix_Main+1
 17726  160E  0854               	movf	??_matrix_Main,w
 17727  160F  0086               	movwf	6
 17728  1610  0855               	movf	??_matrix_Main+1,w
 17729  1611  0087               	movwf	7
 17730  1612  3009               	movlw	9
 17731  1613  0081               	movwf	1
 17732  1614                     l10203:	
 17733                           
 17734                           ;matrix_task.c: 339: }
 17735                           ;matrix_task.c: 340: data->holdCountA = 0;
 17736  1614  085A               	movf	matrix_Main@data,w
 17737  1615  0086               	movwf	6
 17738  1616  085B               	movf	matrix_Main@data+1,w
 17739  1617  0087               	movwf	7
 17740  1618  3149               	addfsr 1,9
 17741  1619  3000               	movlw	0
 17742  161A  3FC0               	movwi [0]fsr1
 17743  161B  3FC1               	movwi [1]fsr1
 17744                           
 17745                           ;matrix_task.c: 341: data->holdCountB = 0;
 17746  161C  085A               	movf	matrix_Main@data,w
 17747  161D  0086               	movwf	6
 17748  161E  085B               	movf	matrix_Main@data+1,w
 17749  161F  0087               	movwf	7
 17750  1620  314B               	addfsr 1,11
 17751  1621  3000               	movlw	0
 17752  1622  3FC0               	movwi [0]fsr1
 17753  1623  3FC1               	movwi [1]fsr1
 17754                           
 17755                           ;matrix_task.c: 342: data->holdCountX = 0;
 17756  1624  085A               	movf	matrix_Main@data,w
 17757  1625  0086               	movwf	6
 17758  1626  085B               	movf	matrix_Main@data+1,w
 17759  1627  0087               	movwf	7
 17760  1628  314D               	addfsr 1,13
 17761  1629  3000               	movlw	0
 17762  162A  3FC0               	movwi [0]fsr1
 17763  162B  3FC1               	movwi [1]fsr1
 17764                           
 17765                           ;matrix_task.c: 343: data->holdCountY = 0;
 17766  162C  085A               	movf	matrix_Main@data,w
 17767  162D  0086               	movwf	6
 17768  162E  085B               	movf	matrix_Main@data+1,w
 17769  162F  0087               	movwf	7
 17770  1630  314F               	addfsr 1,15
 17771  1631  3000               	movlw	0
 17772  1632  3FC0               	movwi [0]fsr1
 17773  1633  3FC1               	movwi [1]fsr1
 17774                           
 17775                           ;matrix_task.c: 344: data->holdCountXY = 0;
 17776  1634  085A               	movf	matrix_Main@data,w
 17777  1635  0086               	movwf	6
 17778  1636  085B               	movf	matrix_Main@data+1,w
 17779  1637  0087               	movwf	7
 17780  1638  3151               	addfsr 1,17
 17781  1639  3000               	movlw	0
 17782  163A  3FC0               	movwi [0]fsr1
 17783  163B  3FC1               	movwi [1]fsr1
 17784                           
 17785                           ;matrix_task.c: 345: data->holdCountAY = 0;
 17786  163C  085A               	movf	matrix_Main@data,w
 17787  163D  0086               	movwf	6
 17788  163E  085B               	movf	matrix_Main@data+1,w
 17789  163F  0087               	movwf	7
 17790  1640  3153               	addfsr 1,19
 17791  1641  3000               	movlw	0
 17792  1642  3FC0               	movwi [0]fsr1
 17793  1643  3FC1               	movwi [1]fsr1
 17794                           
 17795                           ;matrix_task.c: 346: data->holdCountAX = 0;
 17796  1644  085A               	movf	matrix_Main@data,w
 17797  1645  0086               	movwf	6
 17798  1646  085B               	movf	matrix_Main@data+1,w
 17799  1647  0087               	movwf	7
 17800  1648  3155               	addfsr 1,21
 17801  1649  3000               	movlw	0
 17802  164A  3FC0               	movwi [0]fsr1
 17803  164B  3FC1               	movwi [1]fsr1
 17804                           
 17805                           ;matrix_task.c: 347: data->holdCountBX = 0;
 17806  164C  085A               	movf	matrix_Main@data,w
 17807  164D  0086               	movwf	6
 17808  164E  085B               	movf	matrix_Main@data+1,w
 17809  164F  0087               	movwf	7
 17810  1650  3157               	addfsr 1,23
 17811  1651  3000               	movlw	0
 17812  1652  3FC0               	movwi [0]fsr1
 17813  1653  3FC1               	movwi [1]fsr1
 17814                           
 17815                           ;matrix_task.c: 348: data->holdCountBY += 1;
 17816  1654  085A               	movf	matrix_Main@data,w
 17817  1655  0086               	movwf	6
 17818  1656  085B               	movf	matrix_Main@data+1,w
 17819  1657  0087               	movwf	7
 17820  1658  3159               	addfsr 1,25
 17821  1659  3001               	movlw	1
 17822  165A  0781               	addwf	1,f
 17823  165B  3141               	addfsr 1,1
 17824  165C  1803               	skipnc
 17825  165D  0A81               	incf	1,f
 17826                           
 17827                           ;matrix_task.c: 349: data->holdCountBA = 0;
 17828  165E  085A               	movf	matrix_Main@data,w
 17829  165F  0086               	movwf	6
 17830  1660  085B               	movf	matrix_Main@data+1,w
 17831  1661  0087               	movwf	7
 17832  1662  315B               	addfsr 1,27
 17833  1663  3000               	movlw	0
 17834  1664  3FC0               	movwi [0]fsr1
 17835  1665  3FC1               	movwi [1]fsr1
 17836                           
 17837                           ;matrix_task.c: 350: data->noholdCount = 0;
 17838  1666  085A               	movf	matrix_Main@data,w
 17839  1667  0086               	movwf	6
 17840  1668  085B               	movf	matrix_Main@data+1,w
 17841  1669  0087               	movwf	7
 17842  166A  315D               	addfsr 1,29
 17843  166B  3000               	movlw	0
 17844  166C  3FC0               	movwi [0]fsr1
 17845  166D  3FC1               	movwi [1]fsr1
 17846                           
 17847                           ;matrix_task.c: 351: data->displayTickdown = 300;
 17848  166E  085A               	movf	matrix_Main@data,w
 17849  166F  0086               	movwf	6
 17850  1670  085B               	movf	matrix_Main@data+1,w
 17851  1671  0087               	movwf	7
 17852  1672  3147               	addfsr 1,7
 17853  1673  302C               	movlw	44
 17854  1674  3FC0               	movwi [0]fsr1
 17855  1675  3001               	movlw	1
 17856  1676  3FC1               	movwi [1]fsr1
 17857                           
 17858                           ;matrix_task.c: 353: break;
 17859  1677  2FB4               	goto	l10291
 17860  1678                     l10227:	
 17861                           ;matrix_task.c: 354: case 2 | 1:
 17862                           
 17863                           
 17864                           ;matrix_task.c: 356: if (data->holdCountBA == holdvalue){
 17865  1678  085A               	movf	matrix_Main@data,w
 17866  1679  0086               	movwf	6
 17867  167A  085B               	movf	matrix_Main@data+1,w
 17868  167B  0087               	movwf	7
 17869  167C  315B               	addfsr 1,27
 17870  167D  3F40               	moviw [0]fsr1
 17871  167E  00D4               	movwf	??_matrix_Main
 17872  167F  3F41               	moviw [1]fsr1
 17873  1680  00D5               	movwf	??_matrix_Main+1
 17874  1681  0859               	movf	matrix_Main@holdvalue,w
 17875  1682  00D6               	movwf	??_matrix_Main+2
 17876  1683  01D7               	clrf	??_matrix_Main+3
 17877  1684  0855               	movf	??_matrix_Main+1,w
 17878  1685  0657               	xorwf	??_matrix_Main+3,w
 17879  1686  1D03               	skipz
 17880  1687  2E8A               	goto	u6455
 17881  1688  0854               	movf	??_matrix_Main,w
 17882  1689  0656               	xorwf	??_matrix_Main+2,w
 17883  168A                     u6455:	
 17884  168A  1D03               	skipz
 17885  168B  2EA9               	goto	l10233
 17886                           
 17887                           ;matrix_task.c: 357: matrix_found = matrix_secret_check(data, 2 | 1);
 17888  168C  085B               	movf	matrix_Main@data+1,w
 17889  168D  00F8               	movwf	matrix_secret_check@data+1
 17890  168E  085A               	movf	matrix_Main@data,w
 17891  168F  00F7               	movwf	matrix_secret_check@data
 17892  1690  3003               	movlw	3
 17893  1691  00D4               	movwf	??_matrix_Main
 17894  1692  0854               	movf	??_matrix_Main,w
 17895  1693  00F9               	movwf	matrix_secret_check@buttonPressed
 17896  1694  31A4  24CD  3190   	fcall	_matrix_secret_check
 17897  1697  0020               	movlb	0	; select bank0
 17898  1698  00D5               	movwf	??_matrix_Main+1
 17899  1699  0855               	movf	??_matrix_Main+1,w
 17900  169A  0021               	movlb	1	; select bank1
 17901  169B  00C2               	movwf	_matrix_found^(0+128)
 17902                           
 17903                           ;matrix_task.c: 358: data->display_state = MATRIX_BA;
 17904  169C  0020               	movlb	0	; select bank0
 17905  169D  085A               	movf	matrix_Main@data,w
 17906  169E  3E02               	addlw	2
 17907  169F  00D4               	movwf	??_matrix_Main
 17908  16A0  3000               	movlw	0
 17909  16A1  3D5B               	addwfc	matrix_Main@data+1,w
 17910  16A2  00D5               	movwf	??_matrix_Main+1
 17911  16A3  0854               	movf	??_matrix_Main,w
 17912  16A4  0086               	movwf	6
 17913  16A5  0855               	movf	??_matrix_Main+1,w
 17914  16A6  0087               	movwf	7
 17915  16A7  3006               	movlw	6
 17916  16A8  0081               	movwf	1
 17917  16A9                     l10233:	
 17918                           
 17919                           ;matrix_task.c: 359: }
 17920                           ;matrix_task.c: 360: data->holdCountA = 0;
 17921  16A9  085A               	movf	matrix_Main@data,w
 17922  16AA  0086               	movwf	6
 17923  16AB  085B               	movf	matrix_Main@data+1,w
 17924  16AC  0087               	movwf	7
 17925  16AD  3149               	addfsr 1,9
 17926  16AE  3000               	movlw	0
 17927  16AF  3FC0               	movwi [0]fsr1
 17928  16B0  3FC1               	movwi [1]fsr1
 17929                           
 17930                           ;matrix_task.c: 361: data->holdCountB = 0;
 17931  16B1  085A               	movf	matrix_Main@data,w
 17932  16B2  0086               	movwf	6
 17933  16B3  085B               	movf	matrix_Main@data+1,w
 17934  16B4  0087               	movwf	7
 17935  16B5  314B               	addfsr 1,11
 17936  16B6  3000               	movlw	0
 17937  16B7  3FC0               	movwi [0]fsr1
 17938  16B8  3FC1               	movwi [1]fsr1
 17939                           
 17940                           ;matrix_task.c: 362: data->holdCountX = 0;
 17941  16B9  085A               	movf	matrix_Main@data,w
 17942  16BA  0086               	movwf	6
 17943  16BB  085B               	movf	matrix_Main@data+1,w
 17944  16BC  0087               	movwf	7
 17945  16BD  314D               	addfsr 1,13
 17946  16BE  3000               	movlw	0
 17947  16BF  3FC0               	movwi [0]fsr1
 17948  16C0  3FC1               	movwi [1]fsr1
 17949                           
 17950                           ;matrix_task.c: 363: data->holdCountY = 0;
 17951  16C1  085A               	movf	matrix_Main@data,w
 17952  16C2  0086               	movwf	6
 17953  16C3  085B               	movf	matrix_Main@data+1,w
 17954  16C4  0087               	movwf	7
 17955  16C5  314F               	addfsr 1,15
 17956  16C6  3000               	movlw	0
 17957  16C7  3FC0               	movwi [0]fsr1
 17958  16C8  3FC1               	movwi [1]fsr1
 17959                           
 17960                           ;matrix_task.c: 364: data->holdCountXY = 0;
 17961  16C9  085A               	movf	matrix_Main@data,w
 17962  16CA  0086               	movwf	6
 17963  16CB  085B               	movf	matrix_Main@data+1,w
 17964  16CC  0087               	movwf	7
 17965  16CD  3151               	addfsr 1,17
 17966  16CE  3000               	movlw	0
 17967  16CF  3FC0               	movwi [0]fsr1
 17968  16D0  3FC1               	movwi [1]fsr1
 17969                           
 17970                           ;matrix_task.c: 365: data->holdCountAY = 0;
 17971  16D1  085A               	movf	matrix_Main@data,w
 17972  16D2  0086               	movwf	6
 17973  16D3  085B               	movf	matrix_Main@data+1,w
 17974  16D4  0087               	movwf	7
 17975  16D5  3153               	addfsr 1,19
 17976  16D6  3000               	movlw	0
 17977  16D7  3FC0               	movwi [0]fsr1
 17978  16D8  3FC1               	movwi [1]fsr1
 17979                           
 17980                           ;matrix_task.c: 366: data->holdCountAX = 0;
 17981  16D9  085A               	movf	matrix_Main@data,w
 17982  16DA  0086               	movwf	6
 17983  16DB  085B               	movf	matrix_Main@data+1,w
 17984  16DC  0087               	movwf	7
 17985  16DD  3155               	addfsr 1,21
 17986  16DE  3000               	movlw	0
 17987  16DF  3FC0               	movwi [0]fsr1
 17988  16E0  3FC1               	movwi [1]fsr1
 17989                           
 17990                           ;matrix_task.c: 367: data->holdCountBX = 0;
 17991  16E1  085A               	movf	matrix_Main@data,w
 17992  16E2  0086               	movwf	6
 17993  16E3  085B               	movf	matrix_Main@data+1,w
 17994  16E4  0087               	movwf	7
 17995  16E5  3157               	addfsr 1,23
 17996  16E6  3000               	movlw	0
 17997  16E7  3FC0               	movwi [0]fsr1
 17998  16E8  3FC1               	movwi [1]fsr1
 17999                           
 18000                           ;matrix_task.c: 368: data->holdCountBY = 0;
 18001  16E9  085A               	movf	matrix_Main@data,w
 18002  16EA  0086               	movwf	6
 18003  16EB  085B               	movf	matrix_Main@data+1,w
 18004  16EC  0087               	movwf	7
 18005  16ED  3159               	addfsr 1,25
 18006  16EE  3000               	movlw	0
 18007  16EF  3FC0               	movwi [0]fsr1
 18008  16F0  3FC1               	movwi [1]fsr1
 18009                           
 18010                           ;matrix_task.c: 369: data->holdCountBA += 1;
 18011  16F1  085A               	movf	matrix_Main@data,w
 18012  16F2  0086               	movwf	6
 18013  16F3  085B               	movf	matrix_Main@data+1,w
 18014  16F4  0087               	movwf	7
 18015  16F5  315B               	addfsr 1,27
 18016  16F6  3001               	movlw	1
 18017  16F7  0781               	addwf	1,f
 18018  16F8  3141               	addfsr 1,1
 18019  16F9  1803               	skipnc
 18020  16FA  0A81               	incf	1,f
 18021                           
 18022                           ;matrix_task.c: 370: data->noholdCount = 0;
 18023  16FB  085A               	movf	matrix_Main@data,w
 18024  16FC  0086               	movwf	6
 18025  16FD  085B               	movf	matrix_Main@data+1,w
 18026  16FE  0087               	movwf	7
 18027  16FF  315D               	addfsr 1,29
 18028  1700  3000               	movlw	0
 18029  1701  3FC0               	movwi [0]fsr1
 18030  1702  3FC1               	movwi [1]fsr1
 18031                           
 18032                           ;matrix_task.c: 371: data->displayTickdown = 300;
 18033  1703  085A               	movf	matrix_Main@data,w
 18034  1704  0086               	movwf	6
 18035  1705  085B               	movf	matrix_Main@data+1,w
 18036  1706  0087               	movwf	7
 18037  1707  3147               	addfsr 1,7
 18038  1708  302C               	movlw	44
 18039  1709  3FC0               	movwi [0]fsr1
 18040  170A  3001               	movlw	1
 18041  170B  3FC1               	movwi [1]fsr1
 18042                           
 18043                           ;matrix_task.c: 372: break;
 18044  170C  2FB4               	goto	l10291
 18045  170D                     l10257:	
 18046                           ;matrix_task.c: 373: default:
 18047                           
 18048                           
 18049                           ;matrix_task.c: 374: data->noholdCount += 1;
 18050  170D  085A               	movf	matrix_Main@data,w
 18051  170E  0086               	movwf	6
 18052  170F  085B               	movf	matrix_Main@data+1,w
 18053  1710  0087               	movwf	7
 18054  1711  315D               	addfsr 1,29
 18055  1712  3001               	movlw	1
 18056  1713  0781               	addwf	1,f
 18057  1714  3141               	addfsr 1,1
 18058  1715  1803               	skipnc
 18059  1716  0A81               	incf	1,f
 18060                           
 18061                           ;matrix_task.c: 375: data->holdCountA = 0;
 18062  1717  085A               	movf	matrix_Main@data,w
 18063  1718  0086               	movwf	6
 18064  1719  085B               	movf	matrix_Main@data+1,w
 18065  171A  0087               	movwf	7
 18066  171B  3149               	addfsr 1,9
 18067  171C  3000               	movlw	0
 18068  171D  3FC0               	movwi [0]fsr1
 18069  171E  3FC1               	movwi [1]fsr1
 18070                           
 18071                           ;matrix_task.c: 376: data->holdCountB = 0;
 18072  171F  085A               	movf	matrix_Main@data,w
 18073  1720  0086               	movwf	6
 18074  1721  085B               	movf	matrix_Main@data+1,w
 18075  1722  0087               	movwf	7
 18076  1723  314B               	addfsr 1,11
 18077  1724  3000               	movlw	0
 18078  1725  3FC0               	movwi [0]fsr1
 18079  1726  3FC1               	movwi [1]fsr1
 18080                           
 18081                           ;matrix_task.c: 377: data->holdCountX = 0;
 18082  1727  085A               	movf	matrix_Main@data,w
 18083  1728  0086               	movwf	6
 18084  1729  085B               	movf	matrix_Main@data+1,w
 18085  172A  0087               	movwf	7
 18086  172B  314D               	addfsr 1,13
 18087  172C  3000               	movlw	0
 18088  172D  3FC0               	movwi [0]fsr1
 18089  172E  3FC1               	movwi [1]fsr1
 18090                           
 18091                           ;matrix_task.c: 378: data->holdCountY = 0;
 18092  172F  085A               	movf	matrix_Main@data,w
 18093  1730  0086               	movwf	6
 18094  1731  085B               	movf	matrix_Main@data+1,w
 18095  1732  0087               	movwf	7
 18096  1733  314F               	addfsr 1,15
 18097  1734  3000               	movlw	0
 18098  1735  3FC0               	movwi [0]fsr1
 18099  1736  3FC1               	movwi [1]fsr1
 18100                           
 18101                           ;matrix_task.c: 379: data->holdCountXY = 0;
 18102  1737  085A               	movf	matrix_Main@data,w
 18103  1738  0086               	movwf	6
 18104  1739  085B               	movf	matrix_Main@data+1,w
 18105  173A  0087               	movwf	7
 18106  173B  3151               	addfsr 1,17
 18107  173C  3000               	movlw	0
 18108  173D  3FC0               	movwi [0]fsr1
 18109  173E  3FC1               	movwi [1]fsr1
 18110                           
 18111                           ;matrix_task.c: 380: data->holdCountAY = 0;
 18112  173F  085A               	movf	matrix_Main@data,w
 18113  1740  0086               	movwf	6
 18114  1741  085B               	movf	matrix_Main@data+1,w
 18115  1742  0087               	movwf	7
 18116  1743  3153               	addfsr 1,19
 18117  1744  3000               	movlw	0
 18118  1745  3FC0               	movwi [0]fsr1
 18119  1746  3FC1               	movwi [1]fsr1
 18120                           
 18121                           ;matrix_task.c: 381: data->holdCountAX = 0;
 18122  1747  085A               	movf	matrix_Main@data,w
 18123  1748  0086               	movwf	6
 18124  1749  085B               	movf	matrix_Main@data+1,w
 18125  174A  0087               	movwf	7
 18126  174B  3155               	addfsr 1,21
 18127  174C  3000               	movlw	0
 18128  174D  3FC0               	movwi [0]fsr1
 18129  174E  3FC1               	movwi [1]fsr1
 18130                           
 18131                           ;matrix_task.c: 382: data->holdCountBX = 0;
 18132  174F  085A               	movf	matrix_Main@data,w
 18133  1750  0086               	movwf	6
 18134  1751  085B               	movf	matrix_Main@data+1,w
 18135  1752  0087               	movwf	7
 18136  1753  3157               	addfsr 1,23
 18137  1754  3000               	movlw	0
 18138  1755  3FC0               	movwi [0]fsr1
 18139  1756  3FC1               	movwi [1]fsr1
 18140                           
 18141                           ;matrix_task.c: 383: data->holdCountBY = 0;
 18142  1757  085A               	movf	matrix_Main@data,w
 18143  1758  0086               	movwf	6
 18144  1759  085B               	movf	matrix_Main@data+1,w
 18145  175A  0087               	movwf	7
 18146  175B  3159               	addfsr 1,25
 18147  175C  3000               	movlw	0
 18148  175D  3FC0               	movwi [0]fsr1
 18149  175E  3FC1               	movwi [1]fsr1
 18150                           
 18151                           ;matrix_task.c: 384: data->holdCountBA = 0;
 18152  175F  085A               	movf	matrix_Main@data,w
 18153  1760  0086               	movwf	6
 18154  1761  085B               	movf	matrix_Main@data+1,w
 18155  1762  0087               	movwf	7
 18156  1763  315B               	addfsr 1,27
 18157  1764  3000               	movlw	0
 18158  1765  3FC0               	movwi [0]fsr1
 18159  1766  3FC1               	movwi [1]fsr1
 18160                           
 18161                           ;matrix_task.c: 385: if (matrix_found){
 18162  1767  0021               	movlb	1	; select bank1
 18163  1768  0842               	movf	_matrix_found^(0+128),w
 18164  1769  1903               	btfsc	3,2
 18165  176A  2F7F               	goto	l10285
 18166                           
 18167                           ;matrix_task.c: 386: data->display_state = MATRIX_DONE;
 18168  176B  0020               	movlb	0	; select bank0
 18169  176C  085A               	movf	matrix_Main@data,w
 18170  176D  3E02               	addlw	2
 18171  176E  00D4               	movwf	??_matrix_Main
 18172  176F  3000               	movlw	0
 18173  1770  3D5B               	addwfc	matrix_Main@data+1,w
 18174  1771  00D5               	movwf	??_matrix_Main+1
 18175  1772  0854               	movf	??_matrix_Main,w
 18176  1773  0086               	movwf	6
 18177  1774  0855               	movf	??_matrix_Main+1,w
 18178  1775  0087               	movwf	7
 18179  1776  300B               	movlw	11
 18180  1777  0081               	movwf	1
 18181                           
 18182                           ;matrix_task.c: 387: data->martix_state = MATRIX_SOLVED;
 18183  1778  085A               	movf	matrix_Main@data,w
 18184  1779  0086               	movwf	6
 18185  177A  085B               	movf	matrix_Main@data+1,w
 18186  177B  0087               	movwf	7
 18187  177C  3141               	addfsr 1,1
 18188  177D  0181               	clrf	1
 18189                           
 18190                           ;matrix_task.c: 388: break;
 18191  177E  2FB4               	goto	l10291
 18192  177F                     l10285:	
 18193                           
 18194                           ;matrix_task.c: 389: }
 18195                           ;matrix_task.c: 390: data->displayTickdown -= 1;
 18196  177F  0020               	movlb	0	; select bank0
 18197  1780  085A               	movf	matrix_Main@data,w
 18198  1781  0086               	movwf	6
 18199  1782  085B               	movf	matrix_Main@data+1,w
 18200  1783  0087               	movwf	7
 18201  1784  3147               	addfsr 1,7
 18202  1785  3001               	movlw	1
 18203  1786  0281               	subwf	1,f
 18204  1787  3141               	addfsr 1,1
 18205  1788  3000               	movlw	0
 18206  1789  3B81               	subwfb	1,f
 18207  178A  317F               	addfsr 1,-1
 18208                           
 18209                           ;matrix_task.c: 391: matrix_display_option(data);
 18210  178B  085B               	movf	matrix_Main@data+1,w
 18211  178C  00CD               	movwf	matrix_display_option@data+1
 18212  178D  085A               	movf	matrix_Main@data,w
 18213  178E  00CC               	movwf	matrix_display_option@data
 18214  178F  31A4  242A  3190   	fcall	_matrix_display_option
 18215                           
 18216                           ;matrix_task.c: 392: }
 18217  1792  2FB4               	goto	l10291
 18218  1793                     l10289:	
 18219  1793  0020               	movlb	0	; select bank0
 18220  1794  0858               	movf	matrix_Main@buttonPressed,w
 18221                           
 18222                           ; Switch size 1, requested type "space"
 18223                           ; Number of cases is 10, Range of values is 1 to 12
 18224                           ; switch strategies available:
 18225                           ; Name         Instructions Cycles
 18226                           ; simple_byte           31    16 (average)
 18227                           ; direct_byte           33     9 (fixed)
 18228                           ; jumptable            263     9 (fixed)
 18229                           ;	Chosen strategy is simple_byte
 18230  1795  3A01               	xorlw	1	; case 1
 18231  1796  1903               	skipnz
 18232  1797  2941               	goto	l9957
 18233  1798  3A03               	xorlw	3	; case 2
 18234  1799  1903               	skipnz
 18235  179A  29D0               	goto	l9987
 18236  179B  3A01               	xorlw	1	; case 3
 18237  179C  1903               	skipnz
 18238  179D  2E78               	goto	l10227
 18239  179E  3A07               	xorlw	7	; case 4
 18240  179F  1903               	skipnz
 18241  17A0  2A65               	goto	l10017
 18242  17A1  3A01               	xorlw	1	; case 5
 18243  17A2  1903               	skipnz
 18244  17A3  2CB9               	goto	l10137
 18245  17A4  3A03               	xorlw	3	; case 6
 18246  17A5  1903               	skipnz
 18247  17A6  2D4E               	goto	l10167
 18248  17A7  3A0E               	xorlw	14	; case 8
 18249  17A8  1903               	skipnz
 18250  17A9  2AFA               	goto	l10047
 18251  17AA  3A01               	xorlw	1	; case 9
 18252  17AB  1903               	skipnz
 18253  17AC  2C24               	goto	l10107
 18254  17AD  3A03               	xorlw	3	; case 10
 18255  17AE  1903               	skipnz
 18256  17AF  2DE3               	goto	l10197
 18257  17B0  3A06               	xorlw	6	; case 12
 18258  17B1  1903               	skipnz
 18259  17B2  2B8F               	goto	l10077
 18260  17B3  2F0D               	goto	l10257
 18261  17B4                     l10291:	
 18262                           
 18263                           ;matrix_task.c: 393: if (matrix_found){
 18264  17B4  0021               	movlb	1	; select bank1
 18265  17B5  0842               	movf	_matrix_found^(0+128),w
 18266  17B6  1903               	btfsc	3,2
 18267  17B7  2FCB               	goto	l10297
 18268                           
 18269                           ;matrix_task.c: 394: data->display_state = MATRIX_DONE;
 18270  17B8  0020               	movlb	0	; select bank0
 18271  17B9  085A               	movf	matrix_Main@data,w
 18272  17BA  3E02               	addlw	2
 18273  17BB  00D4               	movwf	??_matrix_Main
 18274  17BC  3000               	movlw	0
 18275  17BD  3D5B               	addwfc	matrix_Main@data+1,w
 18276  17BE  00D5               	movwf	??_matrix_Main+1
 18277  17BF  0854               	movf	??_matrix_Main,w
 18278  17C0  0086               	movwf	6
 18279  17C1  0855               	movf	??_matrix_Main+1,w
 18280  17C2  0087               	movwf	7
 18281  17C3  300B               	movlw	11
 18282  17C4  0081               	movwf	1
 18283                           
 18284                           ;matrix_task.c: 395: data->martix_state = MATRIX_SOLVED;
 18285  17C5  085A               	movf	matrix_Main@data,w
 18286  17C6  0086               	movwf	6
 18287  17C7  085B               	movf	matrix_Main@data+1,w
 18288  17C8  0087               	movwf	7
 18289  17C9  3141               	addfsr 1,1
 18290  17CA  0181               	clrf	1
 18291  17CB                     l10297:	
 18292                           
 18293                           ;matrix_task.c: 396: }
 18294                           ;matrix_task.c: 398: if(data->display_state == MATRIX_DONE){
 18295  17CB  0020               	movlb	0	; select bank0
 18296  17CC  085A               	movf	matrix_Main@data,w
 18297  17CD  0086               	movwf	6
 18298  17CE  085B               	movf	matrix_Main@data+1,w
 18299  17CF  0087               	movwf	7
 18300  17D0  3142               	addfsr 1,2
 18301  17D1  300B               	movlw	11
 18302  17D2  0601               	xorwf	1,w
 18303  17D3  1D03               	btfss	3,2
 18304  17D4  0008               	return
 18305                           
 18306                           ;matrix_task.c: 400: if (data->delayTickCount < 1){
 18307  17D5  085A               	movf	matrix_Main@data,w
 18308  17D6  0086               	movwf	6
 18309  17D7  085B               	movf	matrix_Main@data+1,w
 18310  17D8  0087               	movwf	7
 18311  17D9  3143               	addfsr 1,3
 18312  17DA  0016               	moviw fsr1++
 18313  17DB  0401               	iorwf	1,w
 18314  17DC  1D03               	btfss	3,2
 18315  17DD  2FF4               	goto	l10305
 18316                           
 18317                           ;matrix_task.c: 401: led_curtain(data->noholdCount);
 18318  17DE  085A               	movf	matrix_Main@data,w
 18319  17DF  0086               	movwf	6
 18320  17E0  085B               	movf	matrix_Main@data+1,w
 18321  17E1  0087               	movwf	7
 18322  17E2  315D               	addfsr 1,29
 18323  17E3  3F40               	moviw [0]fsr1
 18324  17E4  00B0               	movwf	led_curtain@counter
 18325  17E5  3F41               	moviw [1]fsr1
 18326  17E6  00B1               	movwf	led_curtain@counter+1
 18327  17E7  31B7  277E         	fcall	_led_curtain
 18328                           
 18329                           ;matrix_task.c: 402: data->delayTickCount = 20;
 18330  17E9  0020               	movlb	0	; select bank0
 18331  17EA  085A               	movf	matrix_Main@data,w
 18332  17EB  0086               	movwf	6
 18333  17EC  085B               	movf	matrix_Main@data+1,w
 18334  17ED  0087               	movwf	7
 18335  17EE  3143               	addfsr 1,3
 18336  17EF  3014               	movlw	20
 18337  17F0  3FC0               	movwi [0]fsr1
 18338  17F1  3000               	movlw	0
 18339  17F2  3FC1               	movwi [1]fsr1
 18340                           
 18341                           ;matrix_task.c: 403: }
 18342  17F3  0008               	return
 18343  17F4                     l10305:	
 18344                           
 18345                           ;matrix_task.c: 404: else {
 18346                           ;matrix_task.c: 405: data->delayTickCount -= 1;
 18347  17F4  085A               	movf	matrix_Main@data,w
 18348  17F5  0086               	movwf	6
 18349  17F6  085B               	movf	matrix_Main@data+1,w
 18350  17F7  0087               	movwf	7
 18351  17F8  3143               	addfsr 1,3
 18352  17F9  3001               	movlw	1
 18353  17FA  0281               	subwf	1,f
 18354  17FB  3141               	addfsr 1,1
 18355  17FC  3000               	movlw	0
 18356  17FD  3B81               	subwfb	1,f
 18357  17FE  317F               	addfsr 1,-1
 18358  17FF  0008               	return
 18359  1800                     __end_of_matrix_Main:	
 18360                           
 18361                           	psect	text15
 18362  2643                     __ptext15:	
 18363 ;; *************** function _secret_Main *****************
 18364 ;; Defined at:
 18365 ;;		line 99 in file "secret_task.c"
 18366 ;; Parameters:    Size  Location     Type
 18367 ;;  taskData        2   50[BANK0 ] PTR void 
 18368 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 18369 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 18370 ;; Auto vars:     Size  Location     Type
 18371 ;;  data            2   56[BANK0 ] PTR struct t_secret_task
 18372 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 18373 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 18374 ;;  buttonPresse    1   55[BANK0 ] unsigned char 
 18375 ;;  secret_found    1   54[BANK0 ] unsigned char 
 18376 ;; Return value:  Size  Location     Type
 18377 ;;                  1    wreg      void 
 18378 ;; Registers used:
 18379 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18380 ;; Tracked objects:
 18381 ;;		On entry : 0/0
 18382 ;;		On exit  : 0/0
 18383 ;;		Unchanged: 0/0
 18384 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18385 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18386 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18387 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18388 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18389 ;;Total ram usage:        8 bytes
 18390 ;; Hardware stack levels used:    1
 18391 ;; Hardware stack levels required when called:    6
 18392 ;; This function calls:
 18393 ;;		_nullifyBadge_buttonsGet
 18394 ;;		_secret_check
 18395 ;;		_secret_clear
 18396 ;; This function is called by:
 18397 ;;		_main
 18398 ;;		_scheduler_TaskRun
 18399 ;; This function uses a non-reentrant model
 18400 ;;
 18401                           
 18402                           
 18403                           ;psect for function _secret_Main
 18404  2643                     _secret_Main:	
 18405                           
 18406                           ;secret_task.c: 100: struct t_secret_taskData *data = (struct t_secret_taskData *) taskD
      +                          ata;
 18407                           
 18408                           ;incstack = 0
 18409                           ; Regs used in _secret_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18410  2643  0020               	movlb	0	; select bank0
 18411  2644  0853               	movf	secret_Main@taskData+1,w
 18412  2645  00D9               	movwf	secret_Main@data+1
 18413  2646  0852               	movf	secret_Main@taskData,w
 18414  2647  00D8               	movwf	secret_Main@data
 18415                           
 18416                           ;secret_task.c: 101: u8 buttonPressed, secret_found = 0;
 18417  2648  01D6               	clrf	secret_Main@secret_found
 18418                           
 18419                           ;secret_task.c: 103: buttonPressed = nullifyBadge_buttonsGet();
 18420  2649  31B5  25FF  31A6   	fcall	_nullifyBadge_buttonsGet
 18421  264C  0020               	movlb	0	; select bank0
 18422  264D  00D4               	movwf	??_secret_Main
 18423  264E  0854               	movf	??_secret_Main,w
 18424  264F  00D7               	movwf	secret_Main@buttonPressed
 18425                           
 18426                           ;secret_task.c: 104: switch (buttonPressed) {
 18427  2650  2FE3               	goto	l9819
 18428  2651                     l9733:	
 18429                           ;secret_task.c: 105: case 0:
 18430                           
 18431                           
 18432                           ;secret_task.c: 107: if (data->delayTickCount == 0){
 18433  2651  0858               	movf	secret_Main@data,w
 18434  2652  0086               	movwf	6
 18435  2653  0859               	movf	secret_Main@data+1,w
 18436  2654  0087               	movwf	7
 18437  2655  3142               	addfsr 1,2
 18438  2656  0016               	moviw fsr1++
 18439  2657  0401               	iorwf	1,w
 18440  2658  1D03               	btfss	3,2
 18441  2659  2E6B               	goto	l9739
 18442                           
 18443                           ;secret_task.c: 108: data->delayTickCount = 300;
 18444  265A  0858               	movf	secret_Main@data,w
 18445  265B  0086               	movwf	6
 18446  265C  0859               	movf	secret_Main@data+1,w
 18447  265D  0087               	movwf	7
 18448  265E  3142               	addfsr 1,2
 18449  265F  302C               	movlw	44
 18450  2660  3FC0               	movwi [0]fsr1
 18451  2661  3001               	movlw	1
 18452  2662  3FC1               	movwi [1]fsr1
 18453                           
 18454                           ;secret_task.c: 109: secret_check(data, 0);
 18455  2663  0859               	movf	secret_Main@data+1,w
 18456  2664  00F8               	movwf	secret_check@data+1
 18457  2665  0858               	movf	secret_Main@data,w
 18458  2666  00F7               	movwf	secret_check@data
 18459  2667  01F9               	clrf	secret_check@buttonPressed
 18460  2668  31A5  2588  31A6   	fcall	_secret_check
 18461  266B                     l9739:	
 18462                           
 18463                           ;secret_task.c: 110: }
 18464                           ;secret_task.c: 111: data->holdCountA = 0;
 18465  266B  0020               	movlb	0	; select bank0
 18466  266C  0858               	movf	secret_Main@data,w
 18467  266D  0086               	movwf	6
 18468  266E  0859               	movf	secret_Main@data+1,w
 18469  266F  0087               	movwf	7
 18470  2670  3144               	addfsr 1,4
 18471  2671  3000               	movlw	0
 18472  2672  3FC0               	movwi [0]fsr1
 18473  2673  3FC1               	movwi [1]fsr1
 18474                           
 18475                           ;secret_task.c: 112: data->holdCountB = 0;
 18476  2674  0858               	movf	secret_Main@data,w
 18477  2675  0086               	movwf	6
 18478  2676  0859               	movf	secret_Main@data+1,w
 18479  2677  0087               	movwf	7
 18480  2678  3146               	addfsr 1,6
 18481  2679  3000               	movlw	0
 18482  267A  3FC0               	movwi [0]fsr1
 18483  267B  3FC1               	movwi [1]fsr1
 18484                           
 18485                           ;secret_task.c: 113: data->holdCountX = 0;
 18486  267C  0858               	movf	secret_Main@data,w
 18487  267D  0086               	movwf	6
 18488  267E  0859               	movf	secret_Main@data+1,w
 18489  267F  0087               	movwf	7
 18490  2680  3148               	addfsr 1,8
 18491  2681  3000               	movlw	0
 18492  2682  3FC0               	movwi [0]fsr1
 18493  2683  3FC1               	movwi [1]fsr1
 18494                           
 18495                           ;secret_task.c: 114: data->holdCountY = 0;
 18496  2684  0858               	movf	secret_Main@data,w
 18497  2685  0086               	movwf	6
 18498  2686  0859               	movf	secret_Main@data+1,w
 18499  2687  0087               	movwf	7
 18500  2688  314A               	addfsr 1,10
 18501  2689  3000               	movlw	0
 18502  268A  3FC0               	movwi [0]fsr1
 18503  268B  3FC1               	movwi [1]fsr1
 18504                           
 18505                           ;secret_task.c: 115: data->noholdCount += 1;
 18506  268C  0858               	movf	secret_Main@data,w
 18507  268D  0086               	movwf	6
 18508  268E  0859               	movf	secret_Main@data+1,w
 18509  268F  0087               	movwf	7
 18510  2690  314C               	addfsr 1,12
 18511  2691  3001               	movlw	1
 18512  2692  0781               	addwf	1,f
 18513  2693  3141               	addfsr 1,1
 18514  2694  1803               	skipnc
 18515  2695  0A81               	incf	1,f
 18516                           
 18517                           ;secret_task.c: 116: data->delayTickCount -= 1;
 18518  2696  0858               	movf	secret_Main@data,w
 18519  2697  0086               	movwf	6
 18520  2698  0859               	movf	secret_Main@data+1,w
 18521  2699  0087               	movwf	7
 18522  269A  3142               	addfsr 1,2
 18523  269B  3001               	movlw	1
 18524  269C  0281               	subwf	1,f
 18525  269D  3141               	addfsr 1,1
 18526  269E  3000               	movlw	0
 18527  269F  3B81               	subwfb	1,f
 18528  26A0  317F               	addfsr 1,-1
 18529                           
 18530                           ;secret_task.c: 117: break;
 18531  26A1  2FF5               	goto	l9821
 18532  26A2                     l9751:	
 18533                           ;secret_task.c: 118: case 1:
 18534                           
 18535                           
 18536                           ;secret_task.c: 120: if (data->holdCountA == 0){
 18537  26A2  0858               	movf	secret_Main@data,w
 18538  26A3  0086               	movwf	6
 18539  26A4  0859               	movf	secret_Main@data+1,w
 18540  26A5  0087               	movwf	7
 18541  26A6  3144               	addfsr 1,4
 18542  26A7  0016               	moviw fsr1++
 18543  26A8  0401               	iorwf	1,w
 18544  26A9  1D03               	btfss	3,2
 18545  26AA  2EBA               	goto	l9755
 18546                           
 18547                           ;secret_task.c: 121: secret_found = secret_check(data, buttonPressed);
 18548  26AB  0859               	movf	secret_Main@data+1,w
 18549  26AC  00F8               	movwf	secret_check@data+1
 18550  26AD  0858               	movf	secret_Main@data,w
 18551  26AE  00F7               	movwf	secret_check@data
 18552  26AF  0857               	movf	secret_Main@buttonPressed,w
 18553  26B0  00D4               	movwf	??_secret_Main
 18554  26B1  0854               	movf	??_secret_Main,w
 18555  26B2  00F9               	movwf	secret_check@buttonPressed
 18556  26B3  31A5  2588  31A6   	fcall	_secret_check
 18557  26B6  0020               	movlb	0	; select bank0
 18558  26B7  00D5               	movwf	??_secret_Main+1
 18559  26B8  0855               	movf	??_secret_Main+1,w
 18560  26B9  00D6               	movwf	secret_Main@secret_found
 18561  26BA                     l9755:	
 18562                           
 18563                           ;secret_task.c: 122: }
 18564                           ;secret_task.c: 123: data->holdCountA += 1;
 18565  26BA  0858               	movf	secret_Main@data,w
 18566  26BB  0086               	movwf	6
 18567  26BC  0859               	movf	secret_Main@data+1,w
 18568  26BD  0087               	movwf	7
 18569  26BE  3144               	addfsr 1,4
 18570  26BF  3001               	movlw	1
 18571  26C0  0781               	addwf	1,f
 18572  26C1  3141               	addfsr 1,1
 18573  26C2  1803               	skipnc
 18574  26C3  0A81               	incf	1,f
 18575                           
 18576                           ;secret_task.c: 124: data->holdCountB = 0;
 18577  26C4  0858               	movf	secret_Main@data,w
 18578  26C5  0086               	movwf	6
 18579  26C6  0859               	movf	secret_Main@data+1,w
 18580  26C7  0087               	movwf	7
 18581  26C8  3146               	addfsr 1,6
 18582  26C9  3000               	movlw	0
 18583  26CA  3FC0               	movwi [0]fsr1
 18584  26CB  3FC1               	movwi [1]fsr1
 18585                           
 18586                           ;secret_task.c: 125: data->holdCountX = 0;
 18587  26CC  0858               	movf	secret_Main@data,w
 18588  26CD  0086               	movwf	6
 18589  26CE  0859               	movf	secret_Main@data+1,w
 18590  26CF  0087               	movwf	7
 18591  26D0  3148               	addfsr 1,8
 18592  26D1  3000               	movlw	0
 18593  26D2  3FC0               	movwi [0]fsr1
 18594  26D3  3FC1               	movwi [1]fsr1
 18595                           
 18596                           ;secret_task.c: 126: data->holdCountY = 0;
 18597  26D4  0858               	movf	secret_Main@data,w
 18598  26D5  0086               	movwf	6
 18599  26D6  0859               	movf	secret_Main@data+1,w
 18600  26D7  0087               	movwf	7
 18601  26D8  314A               	addfsr 1,10
 18602  26D9  3000               	movlw	0
 18603  26DA  3FC0               	movwi [0]fsr1
 18604  26DB  3FC1               	movwi [1]fsr1
 18605                           
 18606                           ;secret_task.c: 127: data->noholdCount = 0;
 18607  26DC  0858               	movf	secret_Main@data,w
 18608  26DD  0086               	movwf	6
 18609  26DE  0859               	movf	secret_Main@data+1,w
 18610  26DF  0087               	movwf	7
 18611  26E0  314C               	addfsr 1,12
 18612  26E1  3000               	movlw	0
 18613  26E2  3FC0               	movwi [0]fsr1
 18614  26E3  3FC1               	movwi [1]fsr1
 18615                           
 18616                           ;secret_task.c: 128: data->delayTickCount = 300;
 18617  26E4  0858               	movf	secret_Main@data,w
 18618  26E5  0086               	movwf	6
 18619  26E6  0859               	movf	secret_Main@data+1,w
 18620  26E7  0087               	movwf	7
 18621  26E8  3142               	addfsr 1,2
 18622  26E9  302C               	movlw	44
 18623  26EA  3FC0               	movwi [0]fsr1
 18624  26EB  3001               	movlw	1
 18625  26EC  3FC1               	movwi [1]fsr1
 18626                           
 18627                           ;secret_task.c: 129: break;
 18628  26ED  2FF5               	goto	l9821
 18629  26EE                     l9767:	
 18630                           ;secret_task.c: 130: case 2:
 18631                           
 18632                           
 18633                           ;secret_task.c: 132: if (data->holdCountB == 0){
 18634  26EE  0858               	movf	secret_Main@data,w
 18635  26EF  0086               	movwf	6
 18636  26F0  0859               	movf	secret_Main@data+1,w
 18637  26F1  0087               	movwf	7
 18638  26F2  3146               	addfsr 1,6
 18639  26F3  0016               	moviw fsr1++
 18640  26F4  0401               	iorwf	1,w
 18641  26F5  1D03               	btfss	3,2
 18642  26F6  2F06               	goto	l9771
 18643                           
 18644                           ;secret_task.c: 133: secret_found = secret_check(data, buttonPressed);
 18645  26F7  0859               	movf	secret_Main@data+1,w
 18646  26F8  00F8               	movwf	secret_check@data+1
 18647  26F9  0858               	movf	secret_Main@data,w
 18648  26FA  00F7               	movwf	secret_check@data
 18649  26FB  0857               	movf	secret_Main@buttonPressed,w
 18650  26FC  00D4               	movwf	??_secret_Main
 18651  26FD  0854               	movf	??_secret_Main,w
 18652  26FE  00F9               	movwf	secret_check@buttonPressed
 18653  26FF  31A5  2588  31A6   	fcall	_secret_check
 18654  2702  0020               	movlb	0	; select bank0
 18655  2703  00D5               	movwf	??_secret_Main+1
 18656  2704  0855               	movf	??_secret_Main+1,w
 18657  2705  00D6               	movwf	secret_Main@secret_found
 18658  2706                     l9771:	
 18659                           
 18660                           ;secret_task.c: 134: }
 18661                           ;secret_task.c: 135: data->holdCountA = 0;
 18662  2706  0858               	movf	secret_Main@data,w
 18663  2707  0086               	movwf	6
 18664  2708  0859               	movf	secret_Main@data+1,w
 18665  2709  0087               	movwf	7
 18666  270A  3144               	addfsr 1,4
 18667  270B  3000               	movlw	0
 18668  270C  3FC0               	movwi [0]fsr1
 18669  270D  3FC1               	movwi [1]fsr1
 18670                           
 18671                           ;secret_task.c: 136: data->holdCountB += 1;
 18672  270E  0858               	movf	secret_Main@data,w
 18673  270F  0086               	movwf	6
 18674  2710  0859               	movf	secret_Main@data+1,w
 18675  2711  0087               	movwf	7
 18676  2712  3146               	addfsr 1,6
 18677  2713  3001               	movlw	1
 18678  2714  0781               	addwf	1,f
 18679  2715  3141               	addfsr 1,1
 18680  2716  1803               	skipnc
 18681  2717  0A81               	incf	1,f
 18682                           
 18683                           ;secret_task.c: 137: data->holdCountX = 0;
 18684  2718  0858               	movf	secret_Main@data,w
 18685  2719  0086               	movwf	6
 18686  271A  0859               	movf	secret_Main@data+1,w
 18687  271B  0087               	movwf	7
 18688  271C  3148               	addfsr 1,8
 18689  271D  3000               	movlw	0
 18690  271E  3FC0               	movwi [0]fsr1
 18691  271F  3FC1               	movwi [1]fsr1
 18692                           
 18693                           ;secret_task.c: 138: data->holdCountY = 0;
 18694  2720  0858               	movf	secret_Main@data,w
 18695  2721  0086               	movwf	6
 18696  2722  0859               	movf	secret_Main@data+1,w
 18697  2723  0087               	movwf	7
 18698  2724  314A               	addfsr 1,10
 18699  2725  3000               	movlw	0
 18700  2726  3FC0               	movwi [0]fsr1
 18701  2727  3FC1               	movwi [1]fsr1
 18702                           
 18703                           ;secret_task.c: 139: data->noholdCount = 0;
 18704  2728  0858               	movf	secret_Main@data,w
 18705  2729  0086               	movwf	6
 18706  272A  0859               	movf	secret_Main@data+1,w
 18707  272B  0087               	movwf	7
 18708  272C  314C               	addfsr 1,12
 18709  272D  3000               	movlw	0
 18710  272E  3FC0               	movwi [0]fsr1
 18711  272F  3FC1               	movwi [1]fsr1
 18712                           
 18713                           ;secret_task.c: 140: data->delayTickCount = 300;
 18714  2730  0858               	movf	secret_Main@data,w
 18715  2731  0086               	movwf	6
 18716  2732  0859               	movf	secret_Main@data+1,w
 18717  2733  0087               	movwf	7
 18718  2734  3142               	addfsr 1,2
 18719  2735  302C               	movlw	44
 18720  2736  3FC0               	movwi [0]fsr1
 18721  2737  3001               	movlw	1
 18722  2738  3FC1               	movwi [1]fsr1
 18723                           
 18724                           ;secret_task.c: 141: break;
 18725  2739  2FF5               	goto	l9821
 18726  273A                     l9783:	
 18727                           ;secret_task.c: 142: case 4:
 18728                           
 18729                           
 18730                           ;secret_task.c: 144: if (data->holdCountX == 0){
 18731  273A  0858               	movf	secret_Main@data,w
 18732  273B  0086               	movwf	6
 18733  273C  0859               	movf	secret_Main@data+1,w
 18734  273D  0087               	movwf	7
 18735  273E  3148               	addfsr 1,8
 18736  273F  0016               	moviw fsr1++
 18737  2740  0401               	iorwf	1,w
 18738  2741  1D03               	btfss	3,2
 18739  2742  2F52               	goto	l9787
 18740                           
 18741                           ;secret_task.c: 145: secret_found = secret_check(data, buttonPressed);
 18742  2743  0859               	movf	secret_Main@data+1,w
 18743  2744  00F8               	movwf	secret_check@data+1
 18744  2745  0858               	movf	secret_Main@data,w
 18745  2746  00F7               	movwf	secret_check@data
 18746  2747  0857               	movf	secret_Main@buttonPressed,w
 18747  2748  00D4               	movwf	??_secret_Main
 18748  2749  0854               	movf	??_secret_Main,w
 18749  274A  00F9               	movwf	secret_check@buttonPressed
 18750  274B  31A5  2588  31A6   	fcall	_secret_check
 18751  274E  0020               	movlb	0	; select bank0
 18752  274F  00D5               	movwf	??_secret_Main+1
 18753  2750  0855               	movf	??_secret_Main+1,w
 18754  2751  00D6               	movwf	secret_Main@secret_found
 18755  2752                     l9787:	
 18756                           
 18757                           ;secret_task.c: 146: }
 18758                           ;secret_task.c: 147: data->holdCountA = 0;
 18759  2752  0858               	movf	secret_Main@data,w
 18760  2753  0086               	movwf	6
 18761  2754  0859               	movf	secret_Main@data+1,w
 18762  2755  0087               	movwf	7
 18763  2756  3144               	addfsr 1,4
 18764  2757  3000               	movlw	0
 18765  2758  3FC0               	movwi [0]fsr1
 18766  2759  3FC1               	movwi [1]fsr1
 18767                           
 18768                           ;secret_task.c: 148: data->holdCountB = 0;
 18769  275A  0858               	movf	secret_Main@data,w
 18770  275B  0086               	movwf	6
 18771  275C  0859               	movf	secret_Main@data+1,w
 18772  275D  0087               	movwf	7
 18773  275E  3146               	addfsr 1,6
 18774  275F  3000               	movlw	0
 18775  2760  3FC0               	movwi [0]fsr1
 18776  2761  3FC1               	movwi [1]fsr1
 18777                           
 18778                           ;secret_task.c: 149: data->holdCountX += 1;
 18779  2762  0858               	movf	secret_Main@data,w
 18780  2763  0086               	movwf	6
 18781  2764  0859               	movf	secret_Main@data+1,w
 18782  2765  0087               	movwf	7
 18783  2766  3148               	addfsr 1,8
 18784  2767  3001               	movlw	1
 18785  2768  0781               	addwf	1,f
 18786  2769  3141               	addfsr 1,1
 18787  276A  1803               	skipnc
 18788  276B  0A81               	incf	1,f
 18789                           
 18790                           ;secret_task.c: 150: data->holdCountY = 0;
 18791  276C  0858               	movf	secret_Main@data,w
 18792  276D  0086               	movwf	6
 18793  276E  0859               	movf	secret_Main@data+1,w
 18794  276F  0087               	movwf	7
 18795  2770  314A               	addfsr 1,10
 18796  2771  3000               	movlw	0
 18797  2772  3FC0               	movwi [0]fsr1
 18798  2773  3FC1               	movwi [1]fsr1
 18799                           
 18800                           ;secret_task.c: 151: data->noholdCount = 0;
 18801  2774  0858               	movf	secret_Main@data,w
 18802  2775  0086               	movwf	6
 18803  2776  0859               	movf	secret_Main@data+1,w
 18804  2777  0087               	movwf	7
 18805  2778  314C               	addfsr 1,12
 18806  2779  3000               	movlw	0
 18807  277A  3FC0               	movwi [0]fsr1
 18808  277B  3FC1               	movwi [1]fsr1
 18809                           
 18810                           ;secret_task.c: 152: data->delayTickCount = 300;
 18811  277C  0858               	movf	secret_Main@data,w
 18812  277D  0086               	movwf	6
 18813  277E  0859               	movf	secret_Main@data+1,w
 18814  277F  0087               	movwf	7
 18815  2780  3142               	addfsr 1,2
 18816  2781  302C               	movlw	44
 18817  2782  3FC0               	movwi [0]fsr1
 18818  2783  3001               	movlw	1
 18819  2784  3FC1               	movwi [1]fsr1
 18820                           
 18821                           ;secret_task.c: 153: break;
 18822  2785  2FF5               	goto	l9821
 18823  2786                     l9799:	
 18824                           ;secret_task.c: 154: case 8:
 18825                           
 18826                           
 18827                           ;secret_task.c: 156: if (data->holdCountY == 0){
 18828  2786  0858               	movf	secret_Main@data,w
 18829  2787  0086               	movwf	6
 18830  2788  0859               	movf	secret_Main@data+1,w
 18831  2789  0087               	movwf	7
 18832  278A  314A               	addfsr 1,10
 18833  278B  0016               	moviw fsr1++
 18834  278C  0401               	iorwf	1,w
 18835  278D  1D03               	btfss	3,2
 18836  278E  2F9E               	goto	l9803
 18837                           
 18838                           ;secret_task.c: 157: secret_found = secret_check(data, buttonPressed);
 18839  278F  0859               	movf	secret_Main@data+1,w
 18840  2790  00F8               	movwf	secret_check@data+1
 18841  2791  0858               	movf	secret_Main@data,w
 18842  2792  00F7               	movwf	secret_check@data
 18843  2793  0857               	movf	secret_Main@buttonPressed,w
 18844  2794  00D4               	movwf	??_secret_Main
 18845  2795  0854               	movf	??_secret_Main,w
 18846  2796  00F9               	movwf	secret_check@buttonPressed
 18847  2797  31A5  2588  31A6   	fcall	_secret_check
 18848  279A  0020               	movlb	0	; select bank0
 18849  279B  00D5               	movwf	??_secret_Main+1
 18850  279C  0855               	movf	??_secret_Main+1,w
 18851  279D  00D6               	movwf	secret_Main@secret_found
 18852  279E                     l9803:	
 18853                           
 18854                           ;secret_task.c: 158: }
 18855                           ;secret_task.c: 159: data->holdCountA = 0;
 18856  279E  0858               	movf	secret_Main@data,w
 18857  279F  0086               	movwf	6
 18858  27A0  0859               	movf	secret_Main@data+1,w
 18859  27A1  0087               	movwf	7
 18860  27A2  3144               	addfsr 1,4
 18861  27A3  3000               	movlw	0
 18862  27A4  3FC0               	movwi [0]fsr1
 18863  27A5  3FC1               	movwi [1]fsr1
 18864                           
 18865                           ;secret_task.c: 160: data->holdCountB = 0;
 18866  27A6  0858               	movf	secret_Main@data,w
 18867  27A7  0086               	movwf	6
 18868  27A8  0859               	movf	secret_Main@data+1,w
 18869  27A9  0087               	movwf	7
 18870  27AA  3146               	addfsr 1,6
 18871  27AB  3000               	movlw	0
 18872  27AC  3FC0               	movwi [0]fsr1
 18873  27AD  3FC1               	movwi [1]fsr1
 18874                           
 18875                           ;secret_task.c: 161: data->holdCountX = 0;
 18876  27AE  0858               	movf	secret_Main@data,w
 18877  27AF  0086               	movwf	6
 18878  27B0  0859               	movf	secret_Main@data+1,w
 18879  27B1  0087               	movwf	7
 18880  27B2  3148               	addfsr 1,8
 18881  27B3  3000               	movlw	0
 18882  27B4  3FC0               	movwi [0]fsr1
 18883  27B5  3FC1               	movwi [1]fsr1
 18884                           
 18885                           ;secret_task.c: 162: data->holdCountY += 1;
 18886  27B6  0858               	movf	secret_Main@data,w
 18887  27B7  0086               	movwf	6
 18888  27B8  0859               	movf	secret_Main@data+1,w
 18889  27B9  0087               	movwf	7
 18890  27BA  314A               	addfsr 1,10
 18891  27BB  3001               	movlw	1
 18892  27BC  0781               	addwf	1,f
 18893  27BD  3141               	addfsr 1,1
 18894  27BE  1803               	skipnc
 18895  27BF  0A81               	incf	1,f
 18896                           
 18897                           ;secret_task.c: 163: data->noholdCount = 0;
 18898  27C0  0858               	movf	secret_Main@data,w
 18899  27C1  0086               	movwf	6
 18900  27C2  0859               	movf	secret_Main@data+1,w
 18901  27C3  0087               	movwf	7
 18902  27C4  314C               	addfsr 1,12
 18903  27C5  3000               	movlw	0
 18904  27C6  3FC0               	movwi [0]fsr1
 18905  27C7  3FC1               	movwi [1]fsr1
 18906                           
 18907                           ;secret_task.c: 164: data->delayTickCount = 300;
 18908  27C8  0858               	movf	secret_Main@data,w
 18909  27C9  0086               	movwf	6
 18910  27CA  0859               	movf	secret_Main@data+1,w
 18911  27CB  0087               	movwf	7
 18912  27CC  3142               	addfsr 1,2
 18913  27CD  302C               	movlw	44
 18914  27CE  3FC0               	movwi [0]fsr1
 18915  27CF  3001               	movlw	1
 18916  27D0  3FC1               	movwi [1]fsr1
 18917                           
 18918                           ;secret_task.c: 165: break;
 18919  27D1  2FF5               	goto	l9821
 18920  27D2                     l9815:	
 18921                           ;secret_task.c: 166: default:
 18922                           
 18923                           
 18924                           ;secret_task.c: 168: secret_check(data, 0);
 18925  27D2  0859               	movf	secret_Main@data+1,w
 18926  27D3  00F8               	movwf	secret_check@data+1
 18927  27D4  0858               	movf	secret_Main@data,w
 18928  27D5  00F7               	movwf	secret_check@data
 18929  27D6  01F9               	clrf	secret_check@buttonPressed
 18930  27D7  31A5  2588  31A6   	fcall	_secret_check
 18931                           
 18932                           ;secret_task.c: 169: secret_clear(data);
 18933  27DA  0020               	movlb	0	; select bank0
 18934  27DB  0859               	movf	secret_Main@data+1,w
 18935  27DC  00F2               	movwf	secret_clear@data+1
 18936  27DD  0858               	movf	secret_Main@data,w
 18937  27DE  00F1               	movwf	secret_clear@data
 18938  27DF  31B6  2662  31A6   	fcall	_secret_clear
 18939                           
 18940                           ;secret_task.c: 170: }
 18941  27E2  2FF5               	goto	l9821
 18942  27E3                     l9819:	
 18943  27E3  0020               	movlb	0	; select bank0
 18944  27E4  0857               	movf	secret_Main@buttonPressed,w
 18945                           
 18946                           ; Switch size 1, requested type "space"
 18947                           ; Number of cases is 5, Range of values is 0 to 8
 18948                           ; switch strategies available:
 18949                           ; Name         Instructions Cycles
 18950                           ; simple_byte           16     9 (average)
 18951                           ; direct_byte           24     6 (fixed)
 18952                           ; jumptable            260     6 (fixed)
 18953                           ;	Chosen strategy is simple_byte
 18954  27E5  3A00               	xorlw	0	; case 0
 18955  27E6  1903               	skipnz
 18956  27E7  2E51               	goto	l9733
 18957  27E8  3A01               	xorlw	1	; case 1
 18958  27E9  1903               	skipnz
 18959  27EA  2EA2               	goto	l9751
 18960  27EB  3A03               	xorlw	3	; case 2
 18961  27EC  1903               	skipnz
 18962  27ED  2EEE               	goto	l9767
 18963  27EE  3A06               	xorlw	6	; case 4
 18964  27EF  1903               	skipnz
 18965  27F0  2F3A               	goto	l9783
 18966  27F1  3A0C               	xorlw	12	; case 8
 18967  27F2  1903               	skipnz
 18968  27F3  2F86               	goto	l9799
 18969  27F4  2FD2               	goto	l9815
 18970  27F5                     l9821:	
 18971                           
 18972                           ;secret_task.c: 173: if (secret_found){
 18973  27F5  0020               	movlb	0	; select bank0
 18974  27F6  0856               	movf	secret_Main@secret_found,w
 18975  27F7  1903               	btfsc	3,2
 18976  27F8  0008               	return
 18977                           
 18978                           ;secret_task.c: 174: secret_clear(data);
 18979  27F9  0859               	movf	secret_Main@data+1,w
 18980  27FA  00F2               	movwf	secret_clear@data+1
 18981  27FB  0858               	movf	secret_Main@data,w
 18982  27FC  00F1               	movwf	secret_clear@data
 18983  27FD  31B6  2662         	fcall	_secret_clear
 18984  27FF  0008               	return
 18985  2800                     __end_of_secret_Main:	
 18986                           
 18987                           	psect	text16
 18988  1D2F                     __ptext16:	
 18989 ;; *************** function _locked_Main *****************
 18990 ;; Defined at:
 18991 ;;		line 150 in file "locked_task.c"
 18992 ;; Parameters:    Size  Location     Type
 18993 ;;  taskData        2   50[BANK0 ] PTR void 
 18994 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 18995 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 18996 ;; Auto vars:     Size  Location     Type
 18997 ;;  data            2   55[BANK0 ] PTR struct t_locked_task
 18998 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 18999 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 19000 ;;  buttonPresse    1   54[BANK0 ] unsigned char 
 19001 ;; Return value:  Size  Location     Type
 19002 ;;                  1    wreg      void 
 19003 ;; Registers used:
 19004 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19005 ;; Tracked objects:
 19006 ;;		On entry : 0/0
 19007 ;;		On exit  : 0/0
 19008 ;;		Unchanged: 0/0
 19009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19010 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19011 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19012 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19013 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19014 ;;Total ram usage:        7 bytes
 19015 ;; Hardware stack levels used:    1
 19016 ;; Hardware stack levels required when called:   11
 19017 ;; This function calls:
 19018 ;;		___lwmod
 19019 ;;		_locked_clear
 19020 ;;		_locked_get_lock_leds
 19021 ;;		_locked_get_unlock_leds
 19022 ;;		_locked_lock_leds
 19023 ;;		_locked_secret_check
 19024 ;;		_locked_unlock_leds
 19025 ;;		_marquee
 19026 ;;		_nullifyBadge_buttonsGet
 19027 ;;		_nullifyBadge_segDisplayForceUpdate
 19028 ;;		_nullifyBadge_segDisplayPutStr
 19029 ;;		_nullifyBadge_userLedsSet
 19030 ;;		_slot_Setup
 19031 ;; This function is called by:
 19032 ;;		_main
 19033 ;;		_scheduler_TaskRun
 19034 ;; This function uses a non-reentrant model
 19035 ;;
 19036                           
 19037                           
 19038                           ;psect for function _locked_Main
 19039  1D2F                     _locked_Main:	
 19040                           
 19041                           ;locked_task.c: 151: struct t_locked_taskData *data = (struct t_locked_taskData *) taskD
      +                          ata;
 19042                           
 19043                           ;incstack = 0
 19044                           ; Regs used in _locked_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 19045  1D2F  0020               	movlb	0	; select bank0
 19046  1D30  0853               	movf	locked_Main@taskData+1,w
 19047  1D31  00D8               	movwf	locked_Main@data+1
 19048  1D32  0852               	movf	locked_Main@taskData,w
 19049  1D33  00D7               	movwf	locked_Main@data
 19050                           
 19051                           ;locked_task.c: 152: u8 buttonPressed;
 19052                           ;locked_task.c: 153: pw_found =0;
 19053  1D34  0021               	movlb	1	; select bank1
 19054  1D35  01C3               	clrf	_pw_found^(0+128)
 19055                           
 19056                           ;locked_task.c: 154: if ( currentTask != LOCKED_TASK ){
 19057  1D36  3003               	movlw	3
 19058  1D37  063A               	xorwf	_currentTask^(0+128),w
 19059  1D38  043B               	iorwf	(_currentTask+1)^(0+128),w
 19060  1D39  1903               	btfsc	3,2
 19061  1D3A  2D61               	goto	l9601
 19062                           
 19063                           ;locked_task.c: 155: data->holdCountA = 1;
 19064  1D3B  0020               	movlb	0	; select bank0
 19065  1D3C  0857               	movf	locked_Main@data,w
 19066  1D3D  0086               	movwf	6
 19067  1D3E  0858               	movf	locked_Main@data+1,w
 19068  1D3F  0087               	movwf	7
 19069  1D40  3143               	addfsr 1,3
 19070  1D41  3001               	movlw	1
 19071  1D42  3FC0               	movwi [0]fsr1
 19072  1D43  3000               	movlw	0
 19073  1D44  3FC1               	movwi [1]fsr1
 19074                           
 19075                           ;locked_task.c: 156: data->holdCountB = 1;
 19076  1D45  0857               	movf	locked_Main@data,w
 19077  1D46  0086               	movwf	6
 19078  1D47  0858               	movf	locked_Main@data+1,w
 19079  1D48  0087               	movwf	7
 19080  1D49  3145               	addfsr 1,5
 19081  1D4A  3001               	movlw	1
 19082  1D4B  3FC0               	movwi [0]fsr1
 19083  1D4C  3000               	movlw	0
 19084  1D4D  3FC1               	movwi [1]fsr1
 19085                           
 19086                           ;locked_task.c: 157: data->holdCountX = 1;
 19087  1D4E  0857               	movf	locked_Main@data,w
 19088  1D4F  0086               	movwf	6
 19089  1D50  0858               	movf	locked_Main@data+1,w
 19090  1D51  0087               	movwf	7
 19091  1D52  3147               	addfsr 1,7
 19092  1D53  3001               	movlw	1
 19093  1D54  3FC0               	movwi [0]fsr1
 19094  1D55  3000               	movlw	0
 19095  1D56  3FC1               	movwi [1]fsr1
 19096                           
 19097                           ;locked_task.c: 158: data->holdCountY = 1;
 19098  1D57  0857               	movf	locked_Main@data,w
 19099  1D58  0086               	movwf	6
 19100  1D59  0858               	movf	locked_Main@data+1,w
 19101  1D5A  0087               	movwf	7
 19102  1D5B  3149               	addfsr 1,9
 19103  1D5C  3001               	movlw	1
 19104  1D5D  3FC0               	movwi [0]fsr1
 19105  1D5E  3000               	movlw	0
 19106  1D5F  3FC1               	movwi [1]fsr1
 19107                           
 19108                           ;locked_task.c: 159: return;
 19109  1D60  0008               	return
 19110  1D61                     l9601:	
 19111                           
 19112                           ;locked_task.c: 160: }
 19113                           ;locked_task.c: 165: if(data->noholdCount > 1){
 19114  1D61  0020               	movlb	0	; select bank0
 19115  1D62  0857               	movf	locked_Main@data,w
 19116  1D63  0086               	movwf	6
 19117  1D64  0858               	movf	locked_Main@data+1,w
 19118  1D65  0087               	movwf	7
 19119  1D66  314B               	addfsr 1,11
 19120  1D67  3F40               	moviw [0]fsr1
 19121  1D68  00D4               	movwf	??_locked_Main
 19122  1D69  3F41               	moviw [1]fsr1
 19123  1D6A  00D5               	movwf	??_locked_Main+1
 19124  1D6B  3000               	movlw	0
 19125  1D6C  0255               	subwf	??_locked_Main+1,w
 19126  1D6D  3002               	movlw	2
 19127  1D6E  1903               	skipnz
 19128  1D6F  0254               	subwf	??_locked_Main,w
 19129  1D70  1803               	btfsc	3,0
 19130  1D71  2E5A               	goto	l9649
 19131  1D72  2E6E               	goto	l9651
 19132  1D73                     l9605:	
 19133                           ;locked_task.c: 167: case LOCKED_UNLOCKING_STATE:
 19134                           
 19135                           ;locked_task.c: 166: switch (data->state){
 19136                           
 19137                           
 19138                           ;locked_task.c: 168: badge_locked = 0;
 19139  1D73  0021               	movlb	1	; select bank1
 19140  1D74  01C4               	clrf	_badge_locked^(0+128)
 19141                           
 19142                           ;locked_task.c: 169: slot_Setup(slot_taskData);
 19143  1D75  083D               	movf	(_slot_taskData+1)^(0+128),w
 19144  1D76  0020               	movlb	0	; select bank0
 19145  1D77  00B0               	movwf	slot_Setup@taskData+1
 19146  1D78  0021               	movlb	1	; select bank1
 19147  1D79  083C               	movf	_slot_taskData^(0+128),w
 19148  1D7A  0020               	movlb	0	; select bank0
 19149  1D7B  00AF               	movwf	slot_Setup@taskData
 19150  1D7C  31AB  23DA  319D   	fcall	_slot_Setup
 19151                           
 19152                           ;locked_task.c: 170: marquee("UNLOCKING...", data->delayTickCount);
 19153  1D7F  30A5               	movlw	low (STR_41| (0+32768))
 19154  1D80  0020               	movlb	0	; select bank0
 19155  1D81  00BA               	movwf	marquee@string
 19156  1D82  30BA               	movlw	high (STR_41| (0+32768))
 19157  1D83  00BB               	movwf	marquee@string+1
 19158  1D84  0857               	movf	locked_Main@data,w
 19159  1D85  0086               	movwf	6
 19160  1D86  0858               	movf	locked_Main@data+1,w
 19161  1D87  0087               	movwf	7
 19162  1D88  3141               	addfsr 1,1
 19163  1D89  3F40               	moviw [0]fsr1
 19164  1D8A  00BC               	movwf	marquee@count
 19165  1D8B  3F41               	moviw [1]fsr1
 19166  1D8C  00BD               	movwf	marquee@count+1
 19167  1D8D  31A2  2215  319D   	fcall	_marquee
 19168                           
 19169                           ;locked_task.c: 172: if (data->delayTickCount % 75 == 0){
 19170  1D90  304B               	movlw	75
 19171  1D91  0020               	movlb	0	; select bank0
 19172  1D92  00AB               	movwf	___lwmod@divisor
 19173  1D93  3000               	movlw	0
 19174  1D94  00AC               	movwf	___lwmod@divisor+1
 19175  1D95  0857               	movf	locked_Main@data,w
 19176  1D96  0086               	movwf	6
 19177  1D97  0858               	movf	locked_Main@data+1,w
 19178  1D98  0087               	movwf	7
 19179  1D99  3141               	addfsr 1,1
 19180  1D9A  3F40               	moviw [0]fsr1
 19181  1D9B  00AD               	movwf	___lwmod@dividend
 19182  1D9C  3F41               	moviw [1]fsr1
 19183  1D9D  00AE               	movwf	___lwmod@dividend+1
 19184  1D9E  31B5  25A3  319D   	fcall	___lwmod
 19185  1DA1  0020               	movlb	0	; select bank0
 19186  1DA2  082B               	movf	?___lwmod,w
 19187  1DA3  042C               	iorwf	?___lwmod+1,w
 19188  1DA4  1D03               	btfss	3,2
 19189  1DA5  2DB0               	goto	l9615
 19190                           
 19191                           ;locked_task.c: 173: locked_leds = locked_lock_base_leds | locked_get_unlock_leds();
 19192  1DA6  3188  2000  319D   	fcall	_locked_get_unlock_leds
 19193  1DA9  0021               	movlb	1	; select bank1
 19194  1DAA  0852               	movf	_locked_lock_base_leds^(0+128),w
 19195  1DAB  0471               	iorwf	?_locked_get_unlock_leds,w
 19196  1DAC  00A2               	movwf	_locked_leds^(0+128)
 19197  1DAD  0853               	movf	(_locked_lock_base_leds+1)^(0+128),w
 19198  1DAE  0472               	iorwf	?_locked_get_unlock_leds+1,w
 19199  1DAF  00A3               	movwf	(_locked_leds+1)^(0+128)
 19200  1DB0                     l9615:	
 19201                           
 19202                           ;locked_task.c: 174: }
 19203                           ;locked_task.c: 177: if (data->delayTickCount == 375){
 19204  1DB0  0020               	movlb	0	; select bank0
 19205  1DB1  0857               	movf	locked_Main@data,w
 19206  1DB2  0086               	movwf	6
 19207  1DB3  0858               	movf	locked_Main@data+1,w
 19208  1DB4  0087               	movwf	7
 19209  1DB5  3141               	addfsr 1,1
 19210  1DB6  0016               	moviw fsr1++
 19211  1DB7  3A77               	xorlw	119
 19212  1DB8  00D4               	movwf	??_locked_Main
 19213  1DB9  0016               	moviw fsr1++
 19214  1DBA  3A01               	xorlw	1
 19215  1DBB  04D4               	iorwf	??_locked_Main,f
 19216  1DBC  1D03               	btfss	3,2
 19217  1DBD  2E20               	goto	l9635
 19218                           
 19219                           ;locked_task.c: 178: data->state = LOCKED_UNLOCKED_STATE;
 19220  1DBE  0857               	movf	locked_Main@data,w
 19221  1DBF  3E0D               	addlw	13
 19222  1DC0  00D4               	movwf	??_locked_Main
 19223  1DC1  3000               	movlw	0
 19224  1DC2  3D58               	addwfc	locked_Main@data+1,w
 19225  1DC3  00D5               	movwf	??_locked_Main+1
 19226  1DC4  0854               	movf	??_locked_Main,w
 19227  1DC5  0086               	movwf	6
 19228  1DC6  0855               	movf	??_locked_Main+1,w
 19229  1DC7  0087               	movwf	7
 19230  1DC8  3002               	movlw	2
 19231  1DC9  0081               	movwf	1
 19232                           
 19233                           ;locked_task.c: 179: data->delayTickCount = 0;
 19234  1DCA  0857               	movf	locked_Main@data,w
 19235  1DCB  0086               	movwf	6
 19236  1DCC  0858               	movf	locked_Main@data+1,w
 19237  1DCD  0087               	movwf	7
 19238  1DCE  3141               	addfsr 1,1
 19239  1DCF  3000               	movlw	0
 19240  1DD0  3FC0               	movwi [0]fsr1
 19241  1DD1  3FC1               	movwi [1]fsr1
 19242  1DD2  2E6E               	goto	l9651
 19243  1DD3                     l9623:	
 19244                           ;locked_task.c: 185: case LOCKED_LOCKING_STATE:
 19245                           
 19246                           ;locked_task.c: 183: }
 19247                           ;locked_task.c: 184: break;
 19248                           
 19249                           ;locked_task.c: 181: else {
 19250                           ;locked_task.c: 182: data->delayTickCount += 1;
 19251                           
 19252                           ;locked_task.c: 180: }
 19253                           
 19254                           
 19255                           ;locked_task.c: 186: marquee("LOCKING...", data->delayTickCount);
 19256  1DD3  30A7               	movlw	low ((STR_41+2)| (0+32768))
 19257  1DD4  00BA               	movwf	marquee@string
 19258  1DD5  30BA               	movlw	high ((STR_41+2)| (0+32768))
 19259  1DD6  00BB               	movwf	marquee@string+1
 19260  1DD7  0857               	movf	locked_Main@data,w
 19261  1DD8  0086               	movwf	6
 19262  1DD9  0858               	movf	locked_Main@data+1,w
 19263  1DDA  0087               	movwf	7
 19264  1DDB  3141               	addfsr 1,1
 19265  1DDC  3F40               	moviw [0]fsr1
 19266  1DDD  00BC               	movwf	marquee@count
 19267  1DDE  3F41               	moviw [1]fsr1
 19268  1DDF  00BD               	movwf	marquee@count+1
 19269  1DE0  31A2  2215  319D   	fcall	_marquee
 19270                           
 19271                           ;locked_task.c: 188: if (data->delayTickCount % 75 == 0){
 19272  1DE3  304B               	movlw	75
 19273  1DE4  0020               	movlb	0	; select bank0
 19274  1DE5  00AB               	movwf	___lwmod@divisor
 19275  1DE6  3000               	movlw	0
 19276  1DE7  00AC               	movwf	___lwmod@divisor+1
 19277  1DE8  0857               	movf	locked_Main@data,w
 19278  1DE9  0086               	movwf	6
 19279  1DEA  0858               	movf	locked_Main@data+1,w
 19280  1DEB  0087               	movwf	7
 19281  1DEC  3141               	addfsr 1,1
 19282  1DED  3F40               	moviw [0]fsr1
 19283  1DEE  00AD               	movwf	___lwmod@dividend
 19284  1DEF  3F41               	moviw [1]fsr1
 19285  1DF0  00AE               	movwf	___lwmod@dividend+1
 19286  1DF1  31B5  25A3  319D   	fcall	___lwmod
 19287  1DF4  0020               	movlb	0	; select bank0
 19288  1DF5  082B               	movf	?___lwmod,w
 19289  1DF6  042C               	iorwf	?___lwmod+1,w
 19290  1DF7  1D03               	btfss	3,2
 19291  1DF8  2E03               	goto	l9629
 19292                           
 19293                           ;locked_task.c: 189: locked_leds = locked_lock_base_leds | locked_get_lock_leds();
 19294  1DF9  31B5  2507  319D   	fcall	_locked_get_lock_leds
 19295  1DFC  0021               	movlb	1	; select bank1
 19296  1DFD  0852               	movf	_locked_lock_base_leds^(0+128),w
 19297  1DFE  0471               	iorwf	?_locked_get_lock_leds,w
 19298  1DFF  00A2               	movwf	_locked_leds^(0+128)
 19299  1E00  0853               	movf	(_locked_lock_base_leds+1)^(0+128),w
 19300  1E01  0472               	iorwf	?_locked_get_lock_leds+1,w
 19301  1E02  00A3               	movwf	(_locked_leds+1)^(0+128)
 19302  1E03                     l9629:	
 19303                           
 19304                           ;locked_task.c: 190: }
 19305                           ;locked_task.c: 193: if (data->delayTickCount == 375){
 19306  1E03  0020               	movlb	0	; select bank0
 19307  1E04  0857               	movf	locked_Main@data,w
 19308  1E05  0086               	movwf	6
 19309  1E06  0858               	movf	locked_Main@data+1,w
 19310  1E07  0087               	movwf	7
 19311  1E08  3141               	addfsr 1,1
 19312  1E09  0016               	moviw fsr1++
 19313  1E0A  3A77               	xorlw	119
 19314  1E0B  00D4               	movwf	??_locked_Main
 19315  1E0C  0016               	moviw fsr1++
 19316  1E0D  3A01               	xorlw	1
 19317  1E0E  04D4               	iorwf	??_locked_Main,f
 19318  1E0F  1D03               	btfss	3,2
 19319  1E10  2E20               	goto	l9635
 19320                           
 19321                           ;locked_task.c: 194: data->state = LOCKED_LOCKED_STATE;
 19322  1E11  0857               	movf	locked_Main@data,w
 19323  1E12  0086               	movwf	6
 19324  1E13  0858               	movf	locked_Main@data+1,w
 19325  1E14  0087               	movwf	7
 19326  1E15  314D               	addfsr 1,13
 19327  1E16  0181               	clrf	1
 19328                           
 19329                           ;locked_task.c: 195: data->delayTickCount = 0;
 19330  1E17  0857               	movf	locked_Main@data,w
 19331  1E18  0086               	movwf	6
 19332  1E19  0858               	movf	locked_Main@data+1,w
 19333  1E1A  0087               	movwf	7
 19334  1E1B  3141               	addfsr 1,1
 19335  1E1C  3000               	movlw	0
 19336  1E1D  3FC0               	movwi [0]fsr1
 19337  1E1E  3FC1               	movwi [1]fsr1
 19338                           
 19339                           ;locked_task.c: 196: }
 19340  1E1F  2E6E               	goto	l9651
 19341  1E20                     l9635:	
 19342                           
 19343                           ;locked_task.c: 197: else {
 19344                           ;locked_task.c: 198: data->delayTickCount += 1;
 19345  1E20  0857               	movf	locked_Main@data,w
 19346  1E21  0086               	movwf	6
 19347  1E22  0858               	movf	locked_Main@data+1,w
 19348  1E23  0087               	movwf	7
 19349  1E24  3141               	addfsr 1,1
 19350  1E25  3001               	movlw	1
 19351  1E26  0781               	addwf	1,f
 19352  1E27  3141               	addfsr 1,1
 19353  1E28  1803               	skipnc
 19354  1E29  0A81               	incf	1,f
 19355                           
 19356                           ;locked_task.c: 199: }
 19357                           ;locked_task.c: 200: break;
 19358  1E2A  2E6E               	goto	l9651
 19359  1E2B                     l9637:	
 19360                           ;locked_task.c: 201: case LOCKED_UNLOCKED_STATE:
 19361                           
 19362                           
 19363                           ;locked_task.c: 202: badge_locked = 0;
 19364  1E2B  0021               	movlb	1	; select bank1
 19365  1E2C  01C4               	clrf	_badge_locked^(0+128)
 19366                           
 19367                           ;locked_task.c: 204: marquee("OPEN", data->delayTickCount);
 19368  1E2D  30E7               	movlw	low (STR_43| (0+32768))
 19369  1E2E  0020               	movlb	0	; select bank0
 19370  1E2F  00BA               	movwf	marquee@string
 19371  1E30  30BB               	movlw	high (STR_43| (0+32768))
 19372  1E31  00BB               	movwf	marquee@string+1
 19373  1E32  0857               	movf	locked_Main@data,w
 19374  1E33  0086               	movwf	6
 19375  1E34  0858               	movf	locked_Main@data+1,w
 19376  1E35  0087               	movwf	7
 19377  1E36  3141               	addfsr 1,1
 19378  1E37  3F40               	moviw [0]fsr1
 19379  1E38  00BC               	movwf	marquee@count
 19380  1E39  3F41               	moviw [1]fsr1
 19381  1E3A  00BD               	movwf	marquee@count+1
 19382  1E3B  31A2  2215  319D   	fcall	_marquee
 19383                           
 19384                           ;locked_task.c: 205: locked_unlock_leds();
 19385  1E3E  31B3  2340  319D   	fcall	_locked_unlock_leds
 19386                           
 19387                           ;locked_task.c: 206: break;
 19388  1E41  2E6E               	goto	l9651
 19389  1E42                     l1287:	
 19390                           ;locked_task.c: 207: case LOCKED_LOCKED_STATE:
 19391                           
 19392                           
 19393                           ;locked_task.c: 208: badge_locked = 1;
 19394  1E42  0021               	movlb	1	; select bank1
 19395  1E43  01C4               	clrf	_badge_locked^(0+128)
 19396  1E44  0AC4               	incf	_badge_locked^(0+128),f
 19397                           
 19398                           ;locked_task.c: 209: marquee("LOCK", data->delayTickCount);
 19399  1E45  30DD               	movlw	low (STR_44| (0+32768))
 19400  1E46  0020               	movlb	0	; select bank0
 19401  1E47  00BA               	movwf	marquee@string
 19402  1E48  30BB               	movlw	high (STR_44| (0+32768))
 19403  1E49  00BB               	movwf	marquee@string+1
 19404  1E4A  0857               	movf	locked_Main@data,w
 19405  1E4B  0086               	movwf	6
 19406  1E4C  0858               	movf	locked_Main@data+1,w
 19407  1E4D  0087               	movwf	7
 19408  1E4E  3141               	addfsr 1,1
 19409  1E4F  3F40               	moviw [0]fsr1
 19410  1E50  00BC               	movwf	marquee@count
 19411  1E51  3F41               	moviw [1]fsr1
 19412  1E52  00BD               	movwf	marquee@count+1
 19413  1E53  31A2  2215  319D   	fcall	_marquee
 19414                           
 19415                           ;locked_task.c: 211: locked_lock_leds();
 19416  1E56  31B3  23F5  319D   	fcall	_locked_lock_leds
 19417                           
 19418                           ;locked_task.c: 213: }
 19419                           
 19420                           ;locked_task.c: 212: break;
 19421  1E59  2E6E               	goto	l9651
 19422  1E5A                     l9649:	
 19423  1E5A  0020               	movlb	0	; select bank0
 19424  1E5B  0857               	movf	locked_Main@data,w
 19425  1E5C  0086               	movwf	6
 19426  1E5D  0858               	movf	locked_Main@data+1,w
 19427  1E5E  0087               	movwf	7
 19428  1E5F  314D               	addfsr 1,13
 19429  1E60  0801               	movf	1,w
 19430                           
 19431                           ; Switch size 1, requested type "space"
 19432                           ; Number of cases is 4, Range of values is 0 to 3
 19433                           ; switch strategies available:
 19434                           ; Name         Instructions Cycles
 19435                           ; simple_byte           13     7 (average)
 19436                           ; direct_byte           14     6 (fixed)
 19437                           ; jumptable            260     6 (fixed)
 19438                           ;	Chosen strategy is simple_byte
 19439  1E61  3A00               	xorlw	0	; case 0
 19440  1E62  1903               	skipnz
 19441  1E63  2E42               	goto	l1287
 19442  1E64  3A01               	xorlw	1	; case 1
 19443  1E65  1903               	skipnz
 19444  1E66  2DD3               	goto	l9623
 19445  1E67  3A03               	xorlw	3	; case 2
 19446  1E68  1903               	skipnz
 19447  1E69  2E2B               	goto	l9637
 19448  1E6A  3A01               	xorlw	1	; case 3
 19449  1E6B  1903               	skipnz
 19450  1E6C  2D73               	goto	l9605
 19451  1E6D  2E6E               	goto	l9651
 19452  1E6E                     l9651:	
 19453                           
 19454                           ;locked_task.c: 214: }
 19455                           ;locked_task.c: 215: nullifyBadge_userLedsSet(data->badge, locked_leds);
 19456  1E6E  0021               	movlb	1	; select bank1
 19457  1E6F  0823               	movf	(_locked_leds+1)^(0+128),w
 19458  1E70  0020               	movlb	0	; select bank0
 19459  1E71  00AE               	movwf	nullifyBadge_userLedsSet@userLedData+1
 19460  1E72  0021               	movlb	1	; select bank1
 19461  1E73  0822               	movf	_locked_leds^(0+128),w
 19462  1E74  0020               	movlb	0	; select bank0
 19463  1E75  00AD               	movwf	nullifyBadge_userLedsSet@userLedData
 19464  1E76  0857               	movf	locked_Main@data,w
 19465  1E77  0086               	movwf	6
 19466  1E78  0858               	movf	locked_Main@data+1,w
 19467  1E79  0087               	movwf	7
 19468  1E7A  0801               	movf	1,w
 19469  1E7B  31B2  22F9  319D   	fcall	_nullifyBadge_userLedsSet
 19470                           
 19471                           ;locked_task.c: 218: buttonPressed = nullifyBadge_buttonsGet();
 19472  1E7E  31B5  25FF  319D   	fcall	_nullifyBadge_buttonsGet
 19473  1E81  0020               	movlb	0	; select bank0
 19474  1E82  00D4               	movwf	??_locked_Main
 19475  1E83  0854               	movf	??_locked_Main,w
 19476  1E84  00D6               	movwf	locked_Main@buttonPressed
 19477                           
 19478                           ;locked_task.c: 219: switch (buttonPressed) {
 19479  1E85  2FCF               	goto	l9717
 19480  1E86                     l9655:	
 19481                           ;locked_task.c: 220: case 4:
 19482                           
 19483                           
 19484                           ;locked_task.c: 221: locked_clear(data);
 19485  1E86  0858               	movf	locked_Main@data+1,w
 19486  1E87  00BA               	movwf	locked_clear@data+1
 19487  1E88  0857               	movf	locked_Main@data,w
 19488  1E89  00B9               	movwf	locked_clear@data
 19489  1E8A  31A8  20B9  319D   	fcall	_locked_clear
 19490                           
 19491                           ;locked_task.c: 222: currentTask = MENU_TASK;
 19492  1E8D  0021               	movlb	1	; select bank1
 19493  1E8E  01BA               	clrf	_currentTask^(0+128)
 19494  1E8F  01BB               	clrf	(_currentTask+1)^(0+128)
 19495                           
 19496                           ;locked_task.c: 223: break;
 19497  1E90  2FDD               	goto	l9719
 19498  1E91                     l9659:	
 19499                           ;locked_task.c: 224: case 8:
 19500                           
 19501                           
 19502                           ;locked_task.c: 225: if (data->holdCountY == 0){
 19503  1E91  0020               	movlb	0	; select bank0
 19504  1E92  0857               	movf	locked_Main@data,w
 19505  1E93  0086               	movwf	6
 19506  1E94  0858               	movf	locked_Main@data+1,w
 19507  1E95  0087               	movwf	7
 19508  1E96  3149               	addfsr 1,9
 19509  1E97  0016               	moviw fsr1++
 19510  1E98  0401               	iorwf	1,w
 19511  1E99  1D03               	btfss	3,2
 19512  1E9A  2EAC               	goto	l9663
 19513                           
 19514                           ;locked_task.c: 227: pw_found = locked_secret_check(data, 8 );
 19515  1E9B  0858               	movf	locked_Main@data+1,w
 19516  1E9C  00F8               	movwf	locked_secret_check@data+1
 19517  1E9D  0857               	movf	locked_Main@data,w
 19518  1E9E  00F7               	movwf	locked_secret_check@data
 19519  1E9F  3008               	movlw	8
 19520  1EA0  00D4               	movwf	??_locked_Main
 19521  1EA1  0854               	movf	??_locked_Main,w
 19522  1EA2  00F9               	movwf	locked_secret_check@buttonPressed
 19523  1EA3  3190  200F  319D   	fcall	_locked_secret_check
 19524  1EA6  0020               	movlb	0	; select bank0
 19525  1EA7  00D5               	movwf	??_locked_Main+1
 19526  1EA8  0855               	movf	??_locked_Main+1,w
 19527  1EA9  0021               	movlb	1	; select bank1
 19528  1EAA  00C3               	movwf	_pw_found^(0+128)
 19529                           
 19530                           ;locked_task.c: 228: }
 19531  1EAB  2EC2               	goto	l9667
 19532  1EAC                     l9663:	
 19533                           
 19534                           ;locked_task.c: 229: else{
 19535                           ;locked_task.c: 230: nullifyBadge_segDisplayPutStr(data->badge, " U  ");
 19536  1EAC  30D8               	movlw	low (STR_45| (0+32768))
 19537  1EAD  0020               	movlb	0	; select bank0
 19538  1EAE  00B7               	movwf	nullifyBadge_segDisplayPutStr@str
 19539  1EAF  30BB               	movlw	high (STR_45| (0+32768))
 19540  1EB0  00B8               	movwf	nullifyBadge_segDisplayPutStr@str+1
 19541  1EB1  0857               	movf	locked_Main@data,w
 19542  1EB2  0086               	movwf	6
 19543  1EB3  0858               	movf	locked_Main@data+1,w
 19544  1EB4  0087               	movwf	7
 19545  1EB5  0801               	movf	1,w
 19546  1EB6  31B2  2220  319D   	fcall	_nullifyBadge_segDisplayPutStr
 19547                           
 19548                           ;locked_task.c: 231: nullifyBadge_segDisplayForceUpdate(data->badge);
 19549  1EB9  0020               	movlb	0	; select bank0
 19550  1EBA  0857               	movf	locked_Main@data,w
 19551  1EBB  0086               	movwf	6
 19552  1EBC  0858               	movf	locked_Main@data+1,w
 19553  1EBD  0087               	movwf	7
 19554  1EBE  0801               	movf	1,w
 19555  1EBF  31B1  21E4  319D   	fcall	_nullifyBadge_segDisplayForceUpdate
 19556  1EC2                     l9667:	
 19557                           
 19558                           ;locked_task.c: 232: }
 19559                           ;locked_task.c: 233: data->holdCountA = 0;
 19560  1EC2  0020               	movlb	0	; select bank0
 19561  1EC3  0857               	movf	locked_Main@data,w
 19562  1EC4  0086               	movwf	6
 19563  1EC5  0858               	movf	locked_Main@data+1,w
 19564  1EC6  0087               	movwf	7
 19565  1EC7  3143               	addfsr 1,3
 19566  1EC8  3000               	movlw	0
 19567  1EC9  3FC0               	movwi [0]fsr1
 19568  1ECA  3FC1               	movwi [1]fsr1
 19569                           
 19570                           ;locked_task.c: 234: data->holdCountB = 0;
 19571  1ECB  0857               	movf	locked_Main@data,w
 19572  1ECC  0086               	movwf	6
 19573  1ECD  0858               	movf	locked_Main@data+1,w
 19574  1ECE  0087               	movwf	7
 19575  1ECF  3145               	addfsr 1,5
 19576  1ED0  3000               	movlw	0
 19577  1ED1  3FC0               	movwi [0]fsr1
 19578  1ED2  3FC1               	movwi [1]fsr1
 19579                           
 19580                           ;locked_task.c: 235: data->holdCountX = 0;
 19581  1ED3  0857               	movf	locked_Main@data,w
 19582  1ED4  0086               	movwf	6
 19583  1ED5  0858               	movf	locked_Main@data+1,w
 19584  1ED6  0087               	movwf	7
 19585  1ED7  3147               	addfsr 1,7
 19586  1ED8  3000               	movlw	0
 19587  1ED9  3FC0               	movwi [0]fsr1
 19588  1EDA  3FC1               	movwi [1]fsr1
 19589                           
 19590                           ;locked_task.c: 236: data->holdCountY += 1;
 19591  1EDB  0857               	movf	locked_Main@data,w
 19592  1EDC  0086               	movwf	6
 19593  1EDD  0858               	movf	locked_Main@data+1,w
 19594  1EDE  0087               	movwf	7
 19595  1EDF  3149               	addfsr 1,9
 19596  1EE0  3001               	movlw	1
 19597  1EE1  0781               	addwf	1,f
 19598  1EE2  3141               	addfsr 1,1
 19599  1EE3  1803               	skipnc
 19600  1EE4  0A81               	incf	1,f
 19601                           
 19602                           ;locked_task.c: 237: data->noholdCount = 0;
 19603  1EE5  0857               	movf	locked_Main@data,w
 19604  1EE6  0086               	movwf	6
 19605  1EE7  0858               	movf	locked_Main@data+1,w
 19606  1EE8  0087               	movwf	7
 19607  1EE9  314B               	addfsr 1,11
 19608  1EEA  3000               	movlw	0
 19609  1EEB  3FC0               	movwi [0]fsr1
 19610  1EEC  3FC1               	movwi [1]fsr1
 19611                           
 19612                           ;locked_task.c: 238: break;
 19613  1EED  2FDD               	goto	l9719
 19614  1EEE                     l9677:	
 19615                           ;locked_task.c: 239: case 2:
 19616                           
 19617                           
 19618                           ;locked_task.c: 240: if (data->holdCountB == 0){
 19619  1EEE  0857               	movf	locked_Main@data,w
 19620  1EEF  0086               	movwf	6
 19621  1EF0  0858               	movf	locked_Main@data+1,w
 19622  1EF1  0087               	movwf	7
 19623  1EF2  3145               	addfsr 1,5
 19624  1EF3  0016               	moviw fsr1++
 19625  1EF4  0401               	iorwf	1,w
 19626  1EF5  1D03               	btfss	3,2
 19627  1EF6  2F08               	goto	l9681
 19628                           
 19629                           ;locked_task.c: 241: pw_found = locked_secret_check(data, 2 );
 19630  1EF7  0858               	movf	locked_Main@data+1,w
 19631  1EF8  00F8               	movwf	locked_secret_check@data+1
 19632  1EF9  0857               	movf	locked_Main@data,w
 19633  1EFA  00F7               	movwf	locked_secret_check@data
 19634  1EFB  3002               	movlw	2
 19635  1EFC  00D4               	movwf	??_locked_Main
 19636  1EFD  0854               	movf	??_locked_Main,w
 19637  1EFE  00F9               	movwf	locked_secret_check@buttonPressed
 19638  1EFF  3190  200F  319D   	fcall	_locked_secret_check
 19639  1F02  0020               	movlb	0	; select bank0
 19640  1F03  00D5               	movwf	??_locked_Main+1
 19641  1F04  0855               	movf	??_locked_Main+1,w
 19642  1F05  0021               	movlb	1	; select bank1
 19643  1F06  00C3               	movwf	_pw_found^(0+128)
 19644                           
 19645                           ;locked_task.c: 242: }
 19646  1F07  2F1E               	goto	l9685
 19647  1F08                     l9681:	
 19648                           
 19649                           ;locked_task.c: 243: else{
 19650                           ;locked_task.c: 244: nullifyBadge_segDisplayPutStr(data->badge, "N   ");
 19651  1F08  30D3               	movlw	low (STR_46| (0+32768))
 19652  1F09  0020               	movlb	0	; select bank0
 19653  1F0A  00B7               	movwf	nullifyBadge_segDisplayPutStr@str
 19654  1F0B  30BB               	movlw	high (STR_46| (0+32768))
 19655  1F0C  00B8               	movwf	nullifyBadge_segDisplayPutStr@str+1
 19656  1F0D  0857               	movf	locked_Main@data,w
 19657  1F0E  0086               	movwf	6
 19658  1F0F  0858               	movf	locked_Main@data+1,w
 19659  1F10  0087               	movwf	7
 19660  1F11  0801               	movf	1,w
 19661  1F12  31B2  2220  319D   	fcall	_nullifyBadge_segDisplayPutStr
 19662                           
 19663                           ;locked_task.c: 245: nullifyBadge_segDisplayForceUpdate(data->badge);
 19664  1F15  0020               	movlb	0	; select bank0
 19665  1F16  0857               	movf	locked_Main@data,w
 19666  1F17  0086               	movwf	6
 19667  1F18  0858               	movf	locked_Main@data+1,w
 19668  1F19  0087               	movwf	7
 19669  1F1A  0801               	movf	1,w
 19670  1F1B  31B1  21E4  319D   	fcall	_nullifyBadge_segDisplayForceUpdate
 19671  1F1E                     l9685:	
 19672                           
 19673                           ;locked_task.c: 246: }
 19674                           ;locked_task.c: 247: data->holdCountA = 0;
 19675  1F1E  0020               	movlb	0	; select bank0
 19676  1F1F  0857               	movf	locked_Main@data,w
 19677  1F20  0086               	movwf	6
 19678  1F21  0858               	movf	locked_Main@data+1,w
 19679  1F22  0087               	movwf	7
 19680  1F23  3143               	addfsr 1,3
 19681  1F24  3000               	movlw	0
 19682  1F25  3FC0               	movwi [0]fsr1
 19683  1F26  3FC1               	movwi [1]fsr1
 19684                           
 19685                           ;locked_task.c: 248: data->holdCountB += 1;
 19686  1F27  0857               	movf	locked_Main@data,w
 19687  1F28  0086               	movwf	6
 19688  1F29  0858               	movf	locked_Main@data+1,w
 19689  1F2A  0087               	movwf	7
 19690  1F2B  3145               	addfsr 1,5
 19691  1F2C  3001               	movlw	1
 19692  1F2D  0781               	addwf	1,f
 19693  1F2E  3141               	addfsr 1,1
 19694  1F2F  1803               	skipnc
 19695  1F30  0A81               	incf	1,f
 19696                           
 19697                           ;locked_task.c: 249: data->holdCountX = 0;
 19698  1F31  0857               	movf	locked_Main@data,w
 19699  1F32  0086               	movwf	6
 19700  1F33  0858               	movf	locked_Main@data+1,w
 19701  1F34  0087               	movwf	7
 19702  1F35  3147               	addfsr 1,7
 19703  1F36  3000               	movlw	0
 19704  1F37  3FC0               	movwi [0]fsr1
 19705  1F38  3FC1               	movwi [1]fsr1
 19706                           
 19707                           ;locked_task.c: 250: data->holdCountY = 0;
 19708  1F39  0857               	movf	locked_Main@data,w
 19709  1F3A  0086               	movwf	6
 19710  1F3B  0858               	movf	locked_Main@data+1,w
 19711  1F3C  0087               	movwf	7
 19712  1F3D  3149               	addfsr 1,9
 19713  1F3E  3000               	movlw	0
 19714  1F3F  3FC0               	movwi [0]fsr1
 19715  1F40  3FC1               	movwi [1]fsr1
 19716                           
 19717                           ;locked_task.c: 251: data->noholdCount = 0;
 19718  1F41  0857               	movf	locked_Main@data,w
 19719  1F42  0086               	movwf	6
 19720  1F43  0858               	movf	locked_Main@data+1,w
 19721  1F44  0087               	movwf	7
 19722  1F45  314B               	addfsr 1,11
 19723  1F46  3000               	movlw	0
 19724  1F47  3FC0               	movwi [0]fsr1
 19725  1F48  3FC1               	movwi [1]fsr1
 19726                           
 19727                           ;locked_task.c: 252: break;
 19728  1F49  2FDD               	goto	l9719
 19729  1F4A                     l9695:	
 19730                           ;locked_task.c: 253: case 1:
 19731                           
 19732                           
 19733                           ;locked_task.c: 254: if (data->holdCountA == 0){
 19734  1F4A  0857               	movf	locked_Main@data,w
 19735  1F4B  0086               	movwf	6
 19736  1F4C  0858               	movf	locked_Main@data+1,w
 19737  1F4D  0087               	movwf	7
 19738  1F4E  3143               	addfsr 1,3
 19739  1F4F  0016               	moviw fsr1++
 19740  1F50  0401               	iorwf	1,w
 19741  1F51  1D03               	btfss	3,2
 19742  1F52  2F62               	goto	l9699
 19743                           
 19744                           ;locked_task.c: 255: pw_found = locked_secret_check(data, 1 );
 19745  1F53  0858               	movf	locked_Main@data+1,w
 19746  1F54  00F8               	movwf	locked_secret_check@data+1
 19747  1F55  0857               	movf	locked_Main@data,w
 19748  1F56  00F7               	movwf	locked_secret_check@data
 19749  1F57  01F9               	clrf	locked_secret_check@buttonPressed
 19750  1F58  0AF9               	incf	locked_secret_check@buttonPressed,f
 19751  1F59  3190  200F  319D   	fcall	_locked_secret_check
 19752  1F5C  0020               	movlb	0	; select bank0
 19753  1F5D  00D4               	movwf	??_locked_Main
 19754  1F5E  0854               	movf	??_locked_Main,w
 19755  1F5F  0021               	movlb	1	; select bank1
 19756  1F60  00C3               	movwf	_pw_found^(0+128)
 19757                           
 19758                           ;locked_task.c: 256: }
 19759  1F61  2F78               	goto	l9703
 19760  1F62                     l9699:	
 19761                           
 19762                           ;locked_task.c: 257: else{
 19763                           ;locked_task.c: 259: nullifyBadge_segDisplayPutStr(data->badge, "  LL");
 19764  1F62  30E2               	movlw	low (STR_47| (0+32768))
 19765  1F63  0020               	movlb	0	; select bank0
 19766  1F64  00B7               	movwf	nullifyBadge_segDisplayPutStr@str
 19767  1F65  30BB               	movlw	high (STR_47| (0+32768))
 19768  1F66  00B8               	movwf	nullifyBadge_segDisplayPutStr@str+1
 19769  1F67  0857               	movf	locked_Main@data,w
 19770  1F68  0086               	movwf	6
 19771  1F69  0858               	movf	locked_Main@data+1,w
 19772  1F6A  0087               	movwf	7
 19773  1F6B  0801               	movf	1,w
 19774  1F6C  31B2  2220  319D   	fcall	_nullifyBadge_segDisplayPutStr
 19775                           
 19776                           ;locked_task.c: 260: nullifyBadge_segDisplayForceUpdate(data->badge);
 19777  1F6F  0020               	movlb	0	; select bank0
 19778  1F70  0857               	movf	locked_Main@data,w
 19779  1F71  0086               	movwf	6
 19780  1F72  0858               	movf	locked_Main@data+1,w
 19781  1F73  0087               	movwf	7
 19782  1F74  0801               	movf	1,w
 19783  1F75  31B1  21E4  319D   	fcall	_nullifyBadge_segDisplayForceUpdate
 19784  1F78                     l9703:	
 19785                           
 19786                           ;locked_task.c: 261: }
 19787                           ;locked_task.c: 262: data->holdCountA += 1;
 19788  1F78  0020               	movlb	0	; select bank0
 19789  1F79  0857               	movf	locked_Main@data,w
 19790  1F7A  0086               	movwf	6
 19791  1F7B  0858               	movf	locked_Main@data+1,w
 19792  1F7C  0087               	movwf	7
 19793  1F7D  3143               	addfsr 1,3
 19794  1F7E  3001               	movlw	1
 19795  1F7F  0781               	addwf	1,f
 19796  1F80  3141               	addfsr 1,1
 19797  1F81  1803               	skipnc
 19798  1F82  0A81               	incf	1,f
 19799                           
 19800                           ;locked_task.c: 263: data->holdCountB = 0;
 19801  1F83  0857               	movf	locked_Main@data,w
 19802  1F84  0086               	movwf	6
 19803  1F85  0858               	movf	locked_Main@data+1,w
 19804  1F86  0087               	movwf	7
 19805  1F87  3145               	addfsr 1,5
 19806  1F88  3000               	movlw	0
 19807  1F89  3FC0               	movwi [0]fsr1
 19808  1F8A  3FC1               	movwi [1]fsr1
 19809                           
 19810                           ;locked_task.c: 264: data->holdCountX = 0;
 19811  1F8B  0857               	movf	locked_Main@data,w
 19812  1F8C  0086               	movwf	6
 19813  1F8D  0858               	movf	locked_Main@data+1,w
 19814  1F8E  0087               	movwf	7
 19815  1F8F  3147               	addfsr 1,7
 19816  1F90  3000               	movlw	0
 19817  1F91  3FC0               	movwi [0]fsr1
 19818  1F92  3FC1               	movwi [1]fsr1
 19819                           
 19820                           ;locked_task.c: 265: data->holdCountY = 0;
 19821  1F93  0857               	movf	locked_Main@data,w
 19822  1F94  0086               	movwf	6
 19823  1F95  0858               	movf	locked_Main@data+1,w
 19824  1F96  0087               	movwf	7
 19825  1F97  3149               	addfsr 1,9
 19826  1F98  3000               	movlw	0
 19827  1F99  3FC0               	movwi [0]fsr1
 19828  1F9A  3FC1               	movwi [1]fsr1
 19829                           
 19830                           ;locked_task.c: 266: data->noholdCount = 0;
 19831  1F9B  0857               	movf	locked_Main@data,w
 19832  1F9C  0086               	movwf	6
 19833  1F9D  0858               	movf	locked_Main@data+1,w
 19834  1F9E  0087               	movwf	7
 19835  1F9F  314B               	addfsr 1,11
 19836  1FA0  3000               	movlw	0
 19837  1FA1  3FC0               	movwi [0]fsr1
 19838  1FA2  3FC1               	movwi [1]fsr1
 19839                           
 19840                           ;locked_task.c: 267: break;
 19841  1FA3  2FDD               	goto	l9719
 19842  1FA4                     l9713:	
 19843                           ;locked_task.c: 268: default:
 19844                           
 19845                           
 19846                           ;locked_task.c: 269: data->holdCountA = 0;
 19847  1FA4  0857               	movf	locked_Main@data,w
 19848  1FA5  0086               	movwf	6
 19849  1FA6  0858               	movf	locked_Main@data+1,w
 19850  1FA7  0087               	movwf	7
 19851  1FA8  3143               	addfsr 1,3
 19852  1FA9  3000               	movlw	0
 19853  1FAA  3FC0               	movwi [0]fsr1
 19854  1FAB  3FC1               	movwi [1]fsr1
 19855                           
 19856                           ;locked_task.c: 270: data->holdCountB = 0;
 19857  1FAC  0857               	movf	locked_Main@data,w
 19858  1FAD  0086               	movwf	6
 19859  1FAE  0858               	movf	locked_Main@data+1,w
 19860  1FAF  0087               	movwf	7
 19861  1FB0  3145               	addfsr 1,5
 19862  1FB1  3000               	movlw	0
 19863  1FB2  3FC0               	movwi [0]fsr1
 19864  1FB3  3FC1               	movwi [1]fsr1
 19865                           
 19866                           ;locked_task.c: 271: data->holdCountX = 0;
 19867  1FB4  0857               	movf	locked_Main@data,w
 19868  1FB5  0086               	movwf	6
 19869  1FB6  0858               	movf	locked_Main@data+1,w
 19870  1FB7  0087               	movwf	7
 19871  1FB8  3147               	addfsr 1,7
 19872  1FB9  3000               	movlw	0
 19873  1FBA  3FC0               	movwi [0]fsr1
 19874  1FBB  3FC1               	movwi [1]fsr1
 19875                           
 19876                           ;locked_task.c: 272: data->holdCountY = 0;
 19877  1FBC  0857               	movf	locked_Main@data,w
 19878  1FBD  0086               	movwf	6
 19879  1FBE  0858               	movf	locked_Main@data+1,w
 19880  1FBF  0087               	movwf	7
 19881  1FC0  3149               	addfsr 1,9
 19882  1FC1  3000               	movlw	0
 19883  1FC2  3FC0               	movwi [0]fsr1
 19884  1FC3  3FC1               	movwi [1]fsr1
 19885                           
 19886                           ;locked_task.c: 273: data->noholdCount += 1;
 19887  1FC4  0857               	movf	locked_Main@data,w
 19888  1FC5  0086               	movwf	6
 19889  1FC6  0858               	movf	locked_Main@data+1,w
 19890  1FC7  0087               	movwf	7
 19891  1FC8  314B               	addfsr 1,11
 19892  1FC9  3001               	movlw	1
 19893  1FCA  0781               	addwf	1,f
 19894  1FCB  3141               	addfsr 1,1
 19895  1FCC  1803               	skipnc
 19896  1FCD  0A81               	incf	1,f
 19897                           
 19898                           ;locked_task.c: 274: }
 19899  1FCE  2FDD               	goto	l9719
 19900  1FCF                     l9717:	
 19901  1FCF  0856               	movf	locked_Main@buttonPressed,w
 19902                           
 19903                           ; Switch size 1, requested type "space"
 19904                           ; Number of cases is 4, Range of values is 1 to 8
 19905                           ; switch strategies available:
 19906                           ; Name         Instructions Cycles
 19907                           ; simple_byte           13     7 (average)
 19908                           ; direct_byte           25     9 (fixed)
 19909                           ; jumptable            263     9 (fixed)
 19910                           ;	Chosen strategy is simple_byte
 19911  1FD0  3A01               	xorlw	1	; case 1
 19912  1FD1  1903               	skipnz
 19913  1FD2  2F4A               	goto	l9695
 19914  1FD3  3A03               	xorlw	3	; case 2
 19915  1FD4  1903               	skipnz
 19916  1FD5  2EEE               	goto	l9677
 19917  1FD6  3A06               	xorlw	6	; case 4
 19918  1FD7  1903               	skipnz
 19919  1FD8  2E86               	goto	l9655
 19920  1FD9  3A0C               	xorlw	12	; case 8
 19921  1FDA  1903               	skipnz
 19922  1FDB  2E91               	goto	l9659
 19923  1FDC  2FA4               	goto	l9713
 19924  1FDD                     l9719:	
 19925                           
 19926                           ;locked_task.c: 275: if(pw_found==1){
 19927  1FDD  0021               	movlb	1	; select bank1
 19928  1FDE  0343               	decf	_pw_found^(0+128),w
 19929  1FDF  1D03               	btfss	3,2
 19930  1FE0  0008               	return
 19931                           
 19932                           ;locked_task.c: 276: if (badge_locked){
 19933  1FE1  0844               	movf	_badge_locked^(0+128),w
 19934  1FE2  1903               	btfsc	3,2
 19935  1FE3  2FF2               	goto	l9725
 19936                           
 19937                           ;locked_task.c: 278: data->state = LOCKED_UNLOCKING_STATE;
 19938  1FE4  0020               	movlb	0	; select bank0
 19939  1FE5  0857               	movf	locked_Main@data,w
 19940  1FE6  3E0D               	addlw	13
 19941  1FE7  00D4               	movwf	??_locked_Main
 19942  1FE8  3000               	movlw	0
 19943  1FE9  3D58               	addwfc	locked_Main@data+1,w
 19944  1FEA  00D5               	movwf	??_locked_Main+1
 19945  1FEB  0854               	movf	??_locked_Main,w
 19946  1FEC  0086               	movwf	6
 19947  1FED  0855               	movf	??_locked_Main+1,w
 19948  1FEE  0087               	movwf	7
 19949  1FEF  3003               	movlw	3
 19950  1FF0  0081               	movwf	1
 19951                           
 19952                           ;locked_task.c: 279: }
 19953  1FF1  0008               	return
 19954  1FF2                     l9725:	
 19955                           
 19956                           ;locked_task.c: 280: else {
 19957                           ;locked_task.c: 282: data->state = LOCKED_LOCKING_STATE;
 19958  1FF2  0020               	movlb	0	; select bank0
 19959  1FF3  0857               	movf	locked_Main@data,w
 19960  1FF4  3E0D               	addlw	13
 19961  1FF5  00D4               	movwf	??_locked_Main
 19962  1FF6  3000               	movlw	0
 19963  1FF7  3D58               	addwfc	locked_Main@data+1,w
 19964  1FF8  00D5               	movwf	??_locked_Main+1
 19965  1FF9  0854               	movf	??_locked_Main,w
 19966  1FFA  0086               	movwf	6
 19967  1FFB  0855               	movf	??_locked_Main+1,w
 19968  1FFC  0087               	movwf	7
 19969  1FFD  3001               	movlw	1
 19970  1FFE  0081               	movwf	1
 19971  1FFF  0008               	return
 19972  2000                     __end_of_locked_Main:	
 19973                           
 19974                           	psect	text17
 19975  1B38                     __ptext17:	
 19976 ;; *************** function _menu_Main *****************
 19977 ;; Defined at:
 19978 ;;		line 59 in file "menu_task.c"
 19979 ;; Parameters:    Size  Location     Type
 19980 ;;  taskData        2   50[BANK0 ] PTR void 
 19981 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 19982 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 19983 ;; Auto vars:     Size  Location     Type
 19984 ;;  data            2   55[BANK0 ] PTR struct t_menu_taskDa
 19985 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 19986 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 19987 ;;  buttonPresse    1   54[BANK0 ] unsigned char 
 19988 ;; Return value:  Size  Location     Type
 19989 ;;                  1    wreg      void 
 19990 ;; Registers used:
 19991 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19992 ;; Tracked objects:
 19993 ;;		On entry : 0/0
 19994 ;;		On exit  : 0/0
 19995 ;;		Unchanged: 0/0
 19996 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19997 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19998 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19999 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20000 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20001 ;;Total ram usage:        7 bytes
 20002 ;; Hardware stack levels used:    1
 20003 ;; Hardware stack levels required when called:   12
 20004 ;; This function calls:
 20005 ;;		_menu_clear
 20006 ;;		_menu_display_option
 20007 ;;		_menu_run_option
 20008 ;;		_nullifyBadge_buttonsGet
 20009 ;;		_slot_Setup
 20010 ;; This function is called by:
 20011 ;;		_main
 20012 ;;		_scheduler_TaskRun
 20013 ;; This function uses a non-reentrant model
 20014 ;;
 20015                           
 20016                           
 20017                           ;psect for function _menu_Main
 20018  1B38                     _menu_Main:	
 20019                           
 20020                           ;menu_task.c: 60: struct t_menu_taskData *data = (struct t_menu_taskData *) taskData;
 20021                           
 20022                           ;incstack = 0
 20023                           ; Regs used in _menu_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 20024  1B38  0020               	movlb	0	; select bank0
 20025  1B39  0853               	movf	menu_Main@taskData+1,w
 20026  1B3A  00D8               	movwf	menu_Main@data+1
 20027  1B3B  0852               	movf	menu_Main@taskData,w
 20028  1B3C  00D7               	movwf	menu_Main@data
 20029                           
 20030                           ;menu_task.c: 61: u8 buttonPressed;
 20031                           ;menu_task.c: 63: if ( currentTask != MENU_TASK ){
 20032  1B3D  0021               	movlb	1	; select bank1
 20033  1B3E  083A               	movf	_currentTask^(0+128),w
 20034  1B3F  043B               	iorwf	(_currentTask+1)^(0+128),w
 20035  1B40  1903               	btfsc	3,2
 20036  1B41  2BBC               	goto	l9053
 20037                           
 20038                           ;menu_task.c: 65: buttonPressed = nullifyBadge_buttonsGet();
 20039  1B42  31B5  25FF  319B   	fcall	_nullifyBadge_buttonsGet
 20040  1B45  0020               	movlb	0	; select bank0
 20041  1B46  00D4               	movwf	??_menu_Main
 20042  1B47  0854               	movf	??_menu_Main,w
 20043  1B48  00D6               	movwf	menu_Main@buttonPressed
 20044                           
 20045                           ;menu_task.c: 66: switch (buttonPressed) {
 20046  1B49  2BB6               	goto	l9051
 20047  1B4A                     l9029:	
 20048                           ;menu_task.c: 67: case 1 | 2 | 8:
 20049                           
 20050                           
 20051                           ;menu_task.c: 68: currentTask = MENU_TASK;
 20052  1B4A  0021               	movlb	1	; select bank1
 20053  1B4B  01BA               	clrf	_currentTask^(0+128)
 20054  1B4C  01BB               	clrf	(_currentTask+1)^(0+128)
 20055                           
 20056                           ;menu_task.c: 69: menu_clear(data);
 20057  1B4D  0020               	movlb	0	; select bank0
 20058  1B4E  0858               	movf	menu_Main@data+1,w
 20059  1B4F  00BA               	movwf	menu_clear@data+1
 20060  1B50  0857               	movf	menu_Main@data,w
 20061  1B51  00B9               	movwf	menu_clear@data
 20062  1B52  31A9  2184  319B   	fcall	_menu_clear
 20063                           
 20064                           ;menu_task.c: 72: slot_Setup(slot_taskData);
 20065  1B55  0021               	movlb	1	; select bank1
 20066  1B56  083D               	movf	(_slot_taskData+1)^(0+128),w
 20067  1B57  0020               	movlb	0	; select bank0
 20068  1B58  00B0               	movwf	slot_Setup@taskData+1
 20069  1B59  0021               	movlb	1	; select bank1
 20070  1B5A  083C               	movf	_slot_taskData^(0+128),w
 20071  1B5B  0020               	movlb	0	; select bank0
 20072  1B5C  00AF               	movwf	slot_Setup@taskData
 20073  1B5D  31AB  23DA  319B   	fcall	_slot_Setup
 20074                           
 20075                           ;menu_task.c: 75: data->holdCountA = 1;
 20076  1B60  0020               	movlb	0	; select bank0
 20077  1B61  0857               	movf	menu_Main@data,w
 20078  1B62  0086               	movwf	6
 20079  1B63  0858               	movf	menu_Main@data+1,w
 20080  1B64  0087               	movwf	7
 20081  1B65  3144               	addfsr 1,4
 20082  1B66  3001               	movlw	1
 20083  1B67  3FC0               	movwi [0]fsr1
 20084  1B68  3000               	movlw	0
 20085  1B69  3FC1               	movwi [1]fsr1
 20086                           
 20087                           ;menu_task.c: 76: data->holdCountB = 1;
 20088  1B6A  0857               	movf	menu_Main@data,w
 20089  1B6B  0086               	movwf	6
 20090  1B6C  0858               	movf	menu_Main@data+1,w
 20091  1B6D  0087               	movwf	7
 20092  1B6E  3146               	addfsr 1,6
 20093  1B6F  3001               	movlw	1
 20094  1B70  3FC0               	movwi [0]fsr1
 20095  1B71  3000               	movlw	0
 20096  1B72  3FC1               	movwi [1]fsr1
 20097                           
 20098                           ;menu_task.c: 77: data->holdCountX = 1;
 20099  1B73  0857               	movf	menu_Main@data,w
 20100  1B74  0086               	movwf	6
 20101  1B75  0858               	movf	menu_Main@data+1,w
 20102  1B76  0087               	movwf	7
 20103  1B77  3148               	addfsr 1,8
 20104  1B78  3001               	movlw	1
 20105  1B79  3FC0               	movwi [0]fsr1
 20106  1B7A  3000               	movlw	0
 20107  1B7B  3FC1               	movwi [1]fsr1
 20108                           
 20109                           ;menu_task.c: 78: data->holdCountY = 1;
 20110  1B7C  0857               	movf	menu_Main@data,w
 20111  1B7D  0086               	movwf	6
 20112  1B7E  0858               	movf	menu_Main@data+1,w
 20113  1B7F  0087               	movwf	7
 20114  1B80  314A               	addfsr 1,10
 20115  1B81  3001               	movlw	1
 20116  1B82  3FC0               	movwi [0]fsr1
 20117  1B83  3000               	movlw	0
 20118  1B84  3FC1               	movwi [1]fsr1
 20119                           
 20120                           ;menu_task.c: 80: menu_option_idx = 0;
 20121  1B85  0021               	movlb	1	; select bank1
 20122  1B86  01B6               	clrf	_menu_option_idx^(0+128)
 20123  1B87  01B7               	clrf	(_menu_option_idx+1)^(0+128)
 20124                           
 20125                           ;menu_task.c: 81: menu_display_option(data);
 20126  1B88  0020               	movlb	0	; select bank0
 20127  1B89  0858               	movf	menu_Main@data+1,w
 20128  1B8A  00CD               	movwf	menu_display_option@data+1
 20129  1B8B  0857               	movf	menu_Main@data,w
 20130  1B8C  00CC               	movwf	menu_display_option@data
 20131  1B8D  31AD  2592         	fcall	_menu_display_option
 20132                           
 20133                           ;menu_task.c: 82: break;
 20134  1B8F  0008               	return
 20135  1B90                     l9047:	
 20136                           ;menu_task.c: 83: default:
 20137                           
 20138                           
 20139                           ;menu_task.c: 85: data->holdCountA = 1;
 20140  1B90  0020               	movlb	0	; select bank0
 20141  1B91  0857               	movf	menu_Main@data,w
 20142  1B92  0086               	movwf	6
 20143  1B93  0858               	movf	menu_Main@data+1,w
 20144  1B94  0087               	movwf	7
 20145  1B95  3144               	addfsr 1,4
 20146  1B96  3001               	movlw	1
 20147  1B97  3FC0               	movwi [0]fsr1
 20148  1B98  3000               	movlw	0
 20149  1B99  3FC1               	movwi [1]fsr1
 20150                           
 20151                           ;menu_task.c: 86: data->holdCountB = 1;
 20152  1B9A  0857               	movf	menu_Main@data,w
 20153  1B9B  0086               	movwf	6
 20154  1B9C  0858               	movf	menu_Main@data+1,w
 20155  1B9D  0087               	movwf	7
 20156  1B9E  3146               	addfsr 1,6
 20157  1B9F  3001               	movlw	1
 20158  1BA0  3FC0               	movwi [0]fsr1
 20159  1BA1  3000               	movlw	0
 20160  1BA2  3FC1               	movwi [1]fsr1
 20161                           
 20162                           ;menu_task.c: 87: data->holdCountX = 1;
 20163  1BA3  0857               	movf	menu_Main@data,w
 20164  1BA4  0086               	movwf	6
 20165  1BA5  0858               	movf	menu_Main@data+1,w
 20166  1BA6  0087               	movwf	7
 20167  1BA7  3148               	addfsr 1,8
 20168  1BA8  3001               	movlw	1
 20169  1BA9  3FC0               	movwi [0]fsr1
 20170  1BAA  3000               	movlw	0
 20171  1BAB  3FC1               	movwi [1]fsr1
 20172                           
 20173                           ;menu_task.c: 88: data->holdCountY = 1;
 20174  1BAC  0857               	movf	menu_Main@data,w
 20175  1BAD  0086               	movwf	6
 20176  1BAE  0858               	movf	menu_Main@data+1,w
 20177  1BAF  0087               	movwf	7
 20178  1BB0  314A               	addfsr 1,10
 20179  1BB1  3001               	movlw	1
 20180  1BB2  3FC0               	movwi [0]fsr1
 20181  1BB3  3000               	movlw	0
 20182  1BB4  3FC1               	movwi [1]fsr1
 20183                           
 20184                           ;menu_task.c: 90: }
 20185                           
 20186                           ;menu_task.c: 89: break;
 20187  1BB5  0008               	return
 20188  1BB6                     l9051:	
 20189  1BB6  0856               	movf	menu_Main@buttonPressed,w
 20190                           
 20191                           ; Switch size 1, requested type "space"
 20192                           ; Number of cases is 1, Range of values is 11 to 11
 20193                           ; switch strategies available:
 20194                           ; Name         Instructions Cycles
 20195                           ; simple_byte            4     3 (average)
 20196                           ; direct_byte           11     9 (fixed)
 20197                           ; jumptable            263     9 (fixed)
 20198                           ;	Chosen strategy is simple_byte
 20199  1BB7  3A0B               	xorlw	11	; case 11
 20200  1BB8  1903               	skipnz
 20201  1BB9  2B4A               	goto	l9029
 20202  1BBA  2B90               	goto	l9047
 20203                           
 20204                           ;menu_task.c: 91: return;
 20205  1BBB  0008               	return
 20206  1BBC                     l9053:	
 20207                           
 20208                           ;menu_task.c: 92: }
 20209                           ;menu_task.c: 94: buttonPressed = nullifyBadge_buttonsGet();
 20210  1BBC  31B5  25FF  319B   	fcall	_nullifyBadge_buttonsGet
 20211  1BBF  0020               	movlb	0	; select bank0
 20212  1BC0  00D4               	movwf	??_menu_Main
 20213  1BC1  0854               	movf	??_menu_Main,w
 20214  1BC2  00D6               	movwf	menu_Main@buttonPressed
 20215                           
 20216                           ;menu_task.c: 95: switch (buttonPressed) {
 20217  1BC3  2D1D               	goto	l9137
 20218  1BC4                     l9055:	
 20219                           ;menu_task.c: 96: case 1:
 20220                           
 20221                           
 20222                           ;menu_task.c: 98: if (data->holdCountA == 0){
 20223  1BC4  0857               	movf	menu_Main@data,w
 20224  1BC5  0086               	movwf	6
 20225  1BC6  0858               	movf	menu_Main@data+1,w
 20226  1BC7  0087               	movwf	7
 20227  1BC8  3144               	addfsr 1,4
 20228  1BC9  0016               	moviw fsr1++
 20229  1BCA  0401               	iorwf	1,w
 20230  1BCB  1D03               	btfss	3,2
 20231  1BCC  2BDD               	goto	l9063
 20232                           
 20233                           ;menu_task.c: 100: if (menu_option_idx == 0){
 20234  1BCD  0021               	movlb	1	; select bank1
 20235  1BCE  0836               	movf	_menu_option_idx^(0+128),w
 20236  1BCF  0437               	iorwf	(_menu_option_idx+1)^(0+128),w
 20237  1BD0  1D03               	btfss	3,2
 20238  1BD1  2BD9               	goto	l9061
 20239                           
 20240                           ;menu_task.c: 101: menu_option_idx = menu_option_size - 1;
 20241  1BD2  0834               	movf	_menu_option_size^(0+128),w
 20242  1BD3  3EFF               	addlw	255
 20243  1BD4  00B6               	movwf	_menu_option_idx^(0+128)
 20244  1BD5  30FF               	movlw	255
 20245  1BD6  3D35               	addwfc	(_menu_option_size+1)^(0+128),w
 20246  1BD7  00B7               	movwf	(_menu_option_idx+1)^(0+128)
 20247                           
 20248                           ;menu_task.c: 102: }
 20249  1BD8  2BDD               	goto	l9063
 20250  1BD9                     l9061:	
 20251                           
 20252                           ;menu_task.c: 103: else {
 20253                           ;menu_task.c: 104: menu_option_idx -= 1;
 20254  1BD9  3001               	movlw	1
 20255  1BDA  02B6               	subwf	_menu_option_idx^(0+128),f
 20256  1BDB  3000               	movlw	0
 20257  1BDC  3BB7               	subwfb	(_menu_option_idx+1)^(0+128),f
 20258  1BDD                     l9063:	
 20259                           
 20260                           ;menu_task.c: 105: }
 20261                           ;menu_task.c: 106: }
 20262                           ;menu_task.c: 107: menu_display_option(data);
 20263  1BDD  0020               	movlb	0	; select bank0
 20264  1BDE  0858               	movf	menu_Main@data+1,w
 20265  1BDF  00CD               	movwf	menu_display_option@data+1
 20266  1BE0  0857               	movf	menu_Main@data,w
 20267  1BE1  00CC               	movwf	menu_display_option@data
 20268  1BE2  31AD  2592  319B   	fcall	_menu_display_option
 20269                           
 20270                           ;menu_task.c: 108: data->holdCountA += 1;
 20271  1BE5  0020               	movlb	0	; select bank0
 20272  1BE6  0857               	movf	menu_Main@data,w
 20273  1BE7  0086               	movwf	6
 20274  1BE8  0858               	movf	menu_Main@data+1,w
 20275  1BE9  0087               	movwf	7
 20276  1BEA  3144               	addfsr 1,4
 20277  1BEB  3001               	movlw	1
 20278  1BEC  0781               	addwf	1,f
 20279  1BED  3141               	addfsr 1,1
 20280  1BEE  1803               	skipnc
 20281  1BEF  0A81               	incf	1,f
 20282                           
 20283                           ;menu_task.c: 109: data->holdCountB = 0;
 20284  1BF0  0857               	movf	menu_Main@data,w
 20285  1BF1  0086               	movwf	6
 20286  1BF2  0858               	movf	menu_Main@data+1,w
 20287  1BF3  0087               	movwf	7
 20288  1BF4  3146               	addfsr 1,6
 20289  1BF5  3000               	movlw	0
 20290  1BF6  3FC0               	movwi [0]fsr1
 20291  1BF7  3FC1               	movwi [1]fsr1
 20292                           
 20293                           ;menu_task.c: 110: data->holdCountX = 0;
 20294  1BF8  0857               	movf	menu_Main@data,w
 20295  1BF9  0086               	movwf	6
 20296  1BFA  0858               	movf	menu_Main@data+1,w
 20297  1BFB  0087               	movwf	7
 20298  1BFC  3148               	addfsr 1,8
 20299  1BFD  3000               	movlw	0
 20300  1BFE  3FC0               	movwi [0]fsr1
 20301  1BFF  3FC1               	movwi [1]fsr1
 20302                           
 20303                           ;menu_task.c: 111: data->holdCountY = 0;
 20304  1C00  0857               	movf	menu_Main@data,w
 20305  1C01  0086               	movwf	6
 20306  1C02  0858               	movf	menu_Main@data+1,w
 20307  1C03  0087               	movwf	7
 20308  1C04  314A               	addfsr 1,10
 20309  1C05  3000               	movlw	0
 20310  1C06  3FC0               	movwi [0]fsr1
 20311  1C07  3FC1               	movwi [1]fsr1
 20312                           
 20313                           ;menu_task.c: 112: data->noholdCount = 0;
 20314  1C08  0857               	movf	menu_Main@data,w
 20315  1C09  0086               	movwf	6
 20316  1C0A  0858               	movf	menu_Main@data+1,w
 20317  1C0B  0087               	movwf	7
 20318  1C0C  314C               	addfsr 1,12
 20319  1C0D  3000               	movlw	0
 20320  1C0E  3FC0               	movwi [0]fsr1
 20321  1C0F  3FC1               	movwi [1]fsr1
 20322                           
 20323                           ;menu_task.c: 113: break;
 20324  1C10  0008               	return
 20325  1C11                     l9075:	
 20326                           ;menu_task.c: 114: case 2:
 20327                           
 20328                           
 20329                           ;menu_task.c: 116: if (data->holdCountB == 0){
 20330  1C11  0857               	movf	menu_Main@data,w
 20331  1C12  0086               	movwf	6
 20332  1C13  0858               	movf	menu_Main@data+1,w
 20333  1C14  0087               	movwf	7
 20334  1C15  3146               	addfsr 1,6
 20335  1C16  0016               	moviw fsr1++
 20336  1C17  0401               	iorwf	1,w
 20337  1C18  1D03               	btfss	3,2
 20338  1C19  2C39               	goto	l9083
 20339                           
 20340                           ;menu_task.c: 118: if (menu_option_idx == menu_option_size - 1){
 20341  1C1A  0021               	movlb	1	; select bank1
 20342  1C1B  0834               	movf	_menu_option_size^(0+128),w
 20343  1C1C  3EFF               	addlw	255
 20344  1C1D  0020               	movlb	0	; select bank0
 20345  1C1E  00D4               	movwf	??_menu_Main
 20346  1C1F  30FF               	movlw	255
 20347  1C20  0021               	movlb	1	; select bank1
 20348  1C21  3D35               	addwfc	(_menu_option_size+1)^(0+128),w
 20349  1C22  0020               	movlb	0	; select bank0
 20350  1C23  00D5               	movwf	??_menu_Main+1
 20351  1C24  0021               	movlb	1	; select bank1
 20352  1C25  0837               	movf	(_menu_option_idx+1)^(0+128),w
 20353  1C26  0020               	movlb	0	; select bank0
 20354  1C27  0655               	xorwf	??_menu_Main+1,w
 20355  1C28  1D03               	skipz
 20356  1C29  2C2E               	goto	u5675
 20357  1C2A  0021               	movlb	1	; select bank1
 20358  1C2B  0836               	movf	_menu_option_idx^(0+128),w
 20359  1C2C  0020               	movlb	0	; select bank0
 20360  1C2D  0654               	xorwf	??_menu_Main,w
 20361  1C2E                     u5675:	
 20362  1C2E  1D03               	skipz
 20363  1C2F  2C34               	goto	l9081
 20364                           
 20365                           ;menu_task.c: 119: menu_option_idx = 0;
 20366  1C30  0021               	movlb	1	; select bank1
 20367  1C31  01B6               	clrf	_menu_option_idx^(0+128)
 20368  1C32  01B7               	clrf	(_menu_option_idx+1)^(0+128)
 20369                           
 20370                           ;menu_task.c: 120: }
 20371  1C33  2C39               	goto	l9083
 20372  1C34                     l9081:	
 20373                           
 20374                           ;menu_task.c: 121: else {
 20375                           ;menu_task.c: 122: menu_option_idx += 1;
 20376  1C34  3001               	movlw	1
 20377  1C35  0021               	movlb	1	; select bank1
 20378  1C36  07B6               	addwf	_menu_option_idx^(0+128),f
 20379  1C37  3000               	movlw	0
 20380  1C38  3DB7               	addwfc	(_menu_option_idx+1)^(0+128),f
 20381  1C39                     l9083:	
 20382                           
 20383                           ;menu_task.c: 123: }
 20384                           ;menu_task.c: 124: }
 20385                           ;menu_task.c: 125: menu_display_option(data);
 20386  1C39  0020               	movlb	0	; select bank0
 20387  1C3A  0858               	movf	menu_Main@data+1,w
 20388  1C3B  00CD               	movwf	menu_display_option@data+1
 20389  1C3C  0857               	movf	menu_Main@data,w
 20390  1C3D  00CC               	movwf	menu_display_option@data
 20391  1C3E  31AD  2592  319B   	fcall	_menu_display_option
 20392                           
 20393                           ;menu_task.c: 126: data->holdCountA = 0;
 20394  1C41  0020               	movlb	0	; select bank0
 20395  1C42  0857               	movf	menu_Main@data,w
 20396  1C43  0086               	movwf	6
 20397  1C44  0858               	movf	menu_Main@data+1,w
 20398  1C45  0087               	movwf	7
 20399  1C46  3144               	addfsr 1,4
 20400  1C47  3000               	movlw	0
 20401  1C48  3FC0               	movwi [0]fsr1
 20402  1C49  3FC1               	movwi [1]fsr1
 20403                           
 20404                           ;menu_task.c: 127: data->holdCountB += 1;
 20405  1C4A  0857               	movf	menu_Main@data,w
 20406  1C4B  0086               	movwf	6
 20407  1C4C  0858               	movf	menu_Main@data+1,w
 20408  1C4D  0087               	movwf	7
 20409  1C4E  3146               	addfsr 1,6
 20410  1C4F  3001               	movlw	1
 20411  1C50  0781               	addwf	1,f
 20412  1C51  3141               	addfsr 1,1
 20413  1C52  1803               	skipnc
 20414  1C53  0A81               	incf	1,f
 20415                           
 20416                           ;menu_task.c: 128: data->holdCountX = 0;
 20417  1C54  0857               	movf	menu_Main@data,w
 20418  1C55  0086               	movwf	6
 20419  1C56  0858               	movf	menu_Main@data+1,w
 20420  1C57  0087               	movwf	7
 20421  1C58  3148               	addfsr 1,8
 20422  1C59  3000               	movlw	0
 20423  1C5A  3FC0               	movwi [0]fsr1
 20424  1C5B  3FC1               	movwi [1]fsr1
 20425                           
 20426                           ;menu_task.c: 129: data->holdCountY = 0;
 20427  1C5C  0857               	movf	menu_Main@data,w
 20428  1C5D  0086               	movwf	6
 20429  1C5E  0858               	movf	menu_Main@data+1,w
 20430  1C5F  0087               	movwf	7
 20431  1C60  314A               	addfsr 1,10
 20432  1C61  3000               	movlw	0
 20433  1C62  3FC0               	movwi [0]fsr1
 20434  1C63  3FC1               	movwi [1]fsr1
 20435                           
 20436                           ;menu_task.c: 130: data->noholdCount = 0;
 20437  1C64  0857               	movf	menu_Main@data,w
 20438  1C65  0086               	movwf	6
 20439  1C66  0858               	movf	menu_Main@data+1,w
 20440  1C67  0087               	movwf	7
 20441  1C68  314C               	addfsr 1,12
 20442  1C69  3000               	movlw	0
 20443  1C6A  3FC0               	movwi [0]fsr1
 20444  1C6B  3FC1               	movwi [1]fsr1
 20445                           
 20446                           ;menu_task.c: 131: break;
 20447  1C6C  0008               	return
 20448  1C6D                     l9095:	
 20449                           ;menu_task.c: 132: case 4:
 20450                           
 20451                           
 20452                           ;menu_task.c: 133: if (data->holdCountX == 0){
 20453  1C6D  0857               	movf	menu_Main@data,w
 20454  1C6E  0086               	movwf	6
 20455  1C6F  0858               	movf	menu_Main@data+1,w
 20456  1C70  0087               	movwf	7
 20457  1C71  3148               	addfsr 1,8
 20458  1C72  0016               	moviw fsr1++
 20459  1C73  0401               	iorwf	1,w
 20460  1C74  1D03               	btfss	3,2
 20461  1C75  2C82               	goto	l9101
 20462                           
 20463                           ;menu_task.c: 135: menu_clear(data);
 20464  1C76  0858               	movf	menu_Main@data+1,w
 20465  1C77  00BA               	movwf	menu_clear@data+1
 20466  1C78  0857               	movf	menu_Main@data,w
 20467  1C79  00B9               	movwf	menu_clear@data
 20468  1C7A  31A9  2184  319B   	fcall	_menu_clear
 20469                           
 20470                           ;menu_task.c: 136: currentTask = FLASHY_TASK;
 20471  1C7D  3002               	movlw	2
 20472  1C7E  0021               	movlb	1	; select bank1
 20473  1C7F  00BA               	movwf	_currentTask^(0+128)
 20474  1C80  3000               	movlw	0
 20475  1C81  00BB               	movwf	(_currentTask^(0+128)+1)
 20476  1C82                     l9101:	
 20477                           
 20478                           ;menu_task.c: 137: }
 20479                           ;menu_task.c: 138: data->holdCountA = 0;
 20480  1C82  0020               	movlb	0	; select bank0
 20481  1C83  0857               	movf	menu_Main@data,w
 20482  1C84  0086               	movwf	6
 20483  1C85  0858               	movf	menu_Main@data+1,w
 20484  1C86  0087               	movwf	7
 20485  1C87  3144               	addfsr 1,4
 20486  1C88  3000               	movlw	0
 20487  1C89  3FC0               	movwi [0]fsr1
 20488  1C8A  3FC1               	movwi [1]fsr1
 20489                           
 20490                           ;menu_task.c: 139: data->holdCountB = 0;
 20491  1C8B  0857               	movf	menu_Main@data,w
 20492  1C8C  0086               	movwf	6
 20493  1C8D  0858               	movf	menu_Main@data+1,w
 20494  1C8E  0087               	movwf	7
 20495  1C8F  3146               	addfsr 1,6
 20496  1C90  3000               	movlw	0
 20497  1C91  3FC0               	movwi [0]fsr1
 20498  1C92  3FC1               	movwi [1]fsr1
 20499                           
 20500                           ;menu_task.c: 140: data->holdCountX += 1;
 20501  1C93  0857               	movf	menu_Main@data,w
 20502  1C94  0086               	movwf	6
 20503  1C95  0858               	movf	menu_Main@data+1,w
 20504  1C96  0087               	movwf	7
 20505  1C97  3148               	addfsr 1,8
 20506  1C98  3001               	movlw	1
 20507  1C99  0781               	addwf	1,f
 20508  1C9A  3141               	addfsr 1,1
 20509  1C9B  1803               	skipnc
 20510  1C9C  0A81               	incf	1,f
 20511                           
 20512                           ;menu_task.c: 141: data->holdCountY = 0;
 20513  1C9D  0857               	movf	menu_Main@data,w
 20514  1C9E  0086               	movwf	6
 20515  1C9F  0858               	movf	menu_Main@data+1,w
 20516  1CA0  0087               	movwf	7
 20517  1CA1  314A               	addfsr 1,10
 20518  1CA2  3000               	movlw	0
 20519  1CA3  3FC0               	movwi [0]fsr1
 20520  1CA4  3FC1               	movwi [1]fsr1
 20521                           
 20522                           ;menu_task.c: 142: data->noholdCount = 0;
 20523  1CA5  0857               	movf	menu_Main@data,w
 20524  1CA6  0086               	movwf	6
 20525  1CA7  0858               	movf	menu_Main@data+1,w
 20526  1CA8  0087               	movwf	7
 20527  1CA9  314C               	addfsr 1,12
 20528  1CAA  3000               	movlw	0
 20529  1CAB  3FC0               	movwi [0]fsr1
 20530  1CAC  3FC1               	movwi [1]fsr1
 20531                           
 20532                           ;menu_task.c: 143: break;
 20533  1CAD  0008               	return
 20534  1CAE                     l9111:	
 20535                           ;menu_task.c: 144: case 8:
 20536                           
 20537                           
 20538                           ;menu_task.c: 145: if (data->holdCountY == 0){
 20539  1CAE  0857               	movf	menu_Main@data,w
 20540  1CAF  0086               	movwf	6
 20541  1CB0  0858               	movf	menu_Main@data+1,w
 20542  1CB1  0087               	movwf	7
 20543  1CB2  314A               	addfsr 1,10
 20544  1CB3  0016               	moviw fsr1++
 20545  1CB4  0401               	iorwf	1,w
 20546  1CB5  1D03               	btfss	3,2
 20547  1CB6  2CBE               	goto	l9115
 20548                           
 20549                           ;menu_task.c: 146: menu_run_option(data);
 20550  1CB7  0858               	movf	menu_Main@data+1,w
 20551  1CB8  00BC               	movwf	menu_run_option@data+1
 20552  1CB9  0857               	movf	menu_Main@data,w
 20553  1CBA  00BB               	movwf	menu_run_option@data
 20554  1CBB  31AA  22A4  319B   	fcall	_menu_run_option
 20555  1CBE                     l9115:	
 20556                           
 20557                           ;menu_task.c: 147: }
 20558                           ;menu_task.c: 148: data->holdCountA = 0;
 20559  1CBE  0020               	movlb	0	; select bank0
 20560  1CBF  0857               	movf	menu_Main@data,w
 20561  1CC0  0086               	movwf	6
 20562  1CC1  0858               	movf	menu_Main@data+1,w
 20563  1CC2  0087               	movwf	7
 20564  1CC3  3144               	addfsr 1,4
 20565  1CC4  3000               	movlw	0
 20566  1CC5  3FC0               	movwi [0]fsr1
 20567  1CC6  3FC1               	movwi [1]fsr1
 20568                           
 20569                           ;menu_task.c: 149: data->holdCountB = 0;
 20570  1CC7  0857               	movf	menu_Main@data,w
 20571  1CC8  0086               	movwf	6
 20572  1CC9  0858               	movf	menu_Main@data+1,w
 20573  1CCA  0087               	movwf	7
 20574  1CCB  3146               	addfsr 1,6
 20575  1CCC  3000               	movlw	0
 20576  1CCD  3FC0               	movwi [0]fsr1
 20577  1CCE  3FC1               	movwi [1]fsr1
 20578                           
 20579                           ;menu_task.c: 150: data->holdCountX = 0;
 20580  1CCF  0857               	movf	menu_Main@data,w
 20581  1CD0  0086               	movwf	6
 20582  1CD1  0858               	movf	menu_Main@data+1,w
 20583  1CD2  0087               	movwf	7
 20584  1CD3  3148               	addfsr 1,8
 20585  1CD4  3000               	movlw	0
 20586  1CD5  3FC0               	movwi [0]fsr1
 20587  1CD6  3FC1               	movwi [1]fsr1
 20588                           
 20589                           ;menu_task.c: 151: data->holdCountY += 1;
 20590  1CD7  0857               	movf	menu_Main@data,w
 20591  1CD8  0086               	movwf	6
 20592  1CD9  0858               	movf	menu_Main@data+1,w
 20593  1CDA  0087               	movwf	7
 20594  1CDB  314A               	addfsr 1,10
 20595  1CDC  3001               	movlw	1
 20596  1CDD  0781               	addwf	1,f
 20597  1CDE  3141               	addfsr 1,1
 20598  1CDF  1803               	skipnc
 20599  1CE0  0A81               	incf	1,f
 20600                           
 20601                           ;menu_task.c: 152: data->noholdCount = 0;
 20602  1CE1  0857               	movf	menu_Main@data,w
 20603  1CE2  0086               	movwf	6
 20604  1CE3  0858               	movf	menu_Main@data+1,w
 20605  1CE4  0087               	movwf	7
 20606  1CE5  314C               	addfsr 1,12
 20607  1CE6  3000               	movlw	0
 20608  1CE7  3FC0               	movwi [0]fsr1
 20609  1CE8  3FC1               	movwi [1]fsr1
 20610                           
 20611                           ;menu_task.c: 153: break;
 20612  1CE9  0008               	return
 20613  1CEA                     l9125:	
 20614                           ;menu_task.c: 155: default:
 20615                           
 20616                           ;menu_task.c: 154: case 1 | 2 | 8:
 20617                           
 20618                           
 20619                           ;menu_task.c: 156: menu_display_option(data);
 20620  1CEA  0858               	movf	menu_Main@data+1,w
 20621  1CEB  00CD               	movwf	menu_display_option@data+1
 20622  1CEC  0857               	movf	menu_Main@data,w
 20623  1CED  00CC               	movwf	menu_display_option@data
 20624  1CEE  31AD  2592  319B   	fcall	_menu_display_option
 20625                           
 20626                           ;menu_task.c: 157: data->holdCountA = 0;
 20627  1CF1  0020               	movlb	0	; select bank0
 20628  1CF2  0857               	movf	menu_Main@data,w
 20629  1CF3  0086               	movwf	6
 20630  1CF4  0858               	movf	menu_Main@data+1,w
 20631  1CF5  0087               	movwf	7
 20632  1CF6  3144               	addfsr 1,4
 20633  1CF7  3000               	movlw	0
 20634  1CF8  3FC0               	movwi [0]fsr1
 20635  1CF9  3FC1               	movwi [1]fsr1
 20636                           
 20637                           ;menu_task.c: 158: data->holdCountB = 0;
 20638  1CFA  0857               	movf	menu_Main@data,w
 20639  1CFB  0086               	movwf	6
 20640  1CFC  0858               	movf	menu_Main@data+1,w
 20641  1CFD  0087               	movwf	7
 20642  1CFE  3146               	addfsr 1,6
 20643  1CFF  3000               	movlw	0
 20644  1D00  3FC0               	movwi [0]fsr1
 20645  1D01  3FC1               	movwi [1]fsr1
 20646                           
 20647                           ;menu_task.c: 159: data->holdCountX = 0;
 20648  1D02  0857               	movf	menu_Main@data,w
 20649  1D03  0086               	movwf	6
 20650  1D04  0858               	movf	menu_Main@data+1,w
 20651  1D05  0087               	movwf	7
 20652  1D06  3148               	addfsr 1,8
 20653  1D07  3000               	movlw	0
 20654  1D08  3FC0               	movwi [0]fsr1
 20655  1D09  3FC1               	movwi [1]fsr1
 20656                           
 20657                           ;menu_task.c: 160: data->holdCountY = 0;
 20658  1D0A  0857               	movf	menu_Main@data,w
 20659  1D0B  0086               	movwf	6
 20660  1D0C  0858               	movf	menu_Main@data+1,w
 20661  1D0D  0087               	movwf	7
 20662  1D0E  314A               	addfsr 1,10
 20663  1D0F  3000               	movlw	0
 20664  1D10  3FC0               	movwi [0]fsr1
 20665  1D11  3FC1               	movwi [1]fsr1
 20666                           
 20667                           ;menu_task.c: 161: data->noholdCount += 1;
 20668  1D12  0857               	movf	menu_Main@data,w
 20669  1D13  0086               	movwf	6
 20670  1D14  0858               	movf	menu_Main@data+1,w
 20671  1D15  0087               	movwf	7
 20672  1D16  314C               	addfsr 1,12
 20673  1D17  3001               	movlw	1
 20674  1D18  0781               	addwf	1,f
 20675  1D19  3141               	addfsr 1,1
 20676  1D1A  1803               	skipnc
 20677  1D1B  0A81               	incf	1,f
 20678                           
 20679                           ;menu_task.c: 162: }
 20680  1D1C  0008               	return
 20681  1D1D                     l9137:	
 20682  1D1D  0856               	movf	menu_Main@buttonPressed,w
 20683                           
 20684                           ; Switch size 1, requested type "space"
 20685                           ; Number of cases is 5, Range of values is 1 to 11
 20686                           ; switch strategies available:
 20687                           ; Name         Instructions Cycles
 20688                           ; simple_byte           16     9 (average)
 20689                           ; direct_byte           31     9 (fixed)
 20690                           ; jumptable            263     9 (fixed)
 20691                           ;	Chosen strategy is simple_byte
 20692  1D1E  3A01               	xorlw	1	; case 1
 20693  1D1F  1903               	skipnz
 20694  1D20  2BC4               	goto	l9055
 20695  1D21  3A03               	xorlw	3	; case 2
 20696  1D22  1903               	skipnz
 20697  1D23  2C11               	goto	l9075
 20698  1D24  3A06               	xorlw	6	; case 4
 20699  1D25  1903               	skipnz
 20700  1D26  2C6D               	goto	l9095
 20701  1D27  3A0C               	xorlw	12	; case 8
 20702  1D28  1903               	skipnz
 20703  1D29  2CAE               	goto	l9111
 20704  1D2A  3A03               	xorlw	3	; case 11
 20705  1D2B  1903               	skipnz
 20706  1D2C  2CEA               	goto	l9125
 20707  1D2D  2CEA               	goto	l9125
 20708  1D2E  0008               	return
 20709  1D2F                     __end_of_menu_Main:	
 20710                           
 20711                           	psect	text18
 20712  0819                     __ptext18:	
 20713 ;; *************** function _flashy_Main *****************
 20714 ;; Defined at:
 20715 ;;		line 121 in file "flashy_task.c"
 20716 ;; Parameters:    Size  Location     Type
 20717 ;;  taskData        2   50[BANK0 ] PTR void 
 20718 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 20719 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 20720 ;; Auto vars:     Size  Location     Type
 20721 ;;  hit_counter     6   54[BANK0 ] unsigned char [6]
 20722 ;;  data            2   62[BANK0 ] PTR struct t_flashy_task
 20723 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 20724 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 20725 ;;  buttonPresse    2   60[BANK0 ] unsigned int 
 20726 ;; Return value:  Size  Location     Type
 20727 ;;                  1    wreg      void 
 20728 ;; Registers used:
 20729 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20730 ;; Tracked objects:
 20731 ;;		On entry : 0/0
 20732 ;;		On exit  : 0/0
 20733 ;;		Unchanged: 0/0
 20734 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20735 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20736 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20737 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20738 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20739 ;;Total ram usage:       14 bytes
 20740 ;; Hardware stack levels used:    1
 20741 ;; Hardware stack levels required when called:   11
 20742 ;; This function calls:
 20743 ;;		_flashy_display_option
 20744 ;;		_led_Parody
 20745 ;;		_led_circle
 20746 ;;		_led_curtain
 20747 ;;		_led_rand
 20748 ;;		_led_roundabout
 20749 ;;		_let_alternate
 20750 ;;		_marquee
 20751 ;;		_nullifyBadge_buttonsGet
 20752 ;;		_nullifyBadge_irGet
 20753 ;;		_nullifyBadge_irTxClr
 20754 ;;		_nullifyBadge_irTxRegister
 20755 ;;		_nullifyBadge_irTxRelease
 20756 ;;		_nullifyBadge_irTxSet
 20757 ;;		_nullifyBadge_segDisplayForceUpdate
 20758 ;;		_nullifyBadge_segDisplayPutStr
 20759 ;;		_nullifyBadge_userLedsSet
 20760 ;;		_sprintf
 20761 ;; This function is called by:
 20762 ;;		_main
 20763 ;;		_scheduler_TaskRun
 20764 ;; This function uses a non-reentrant model
 20765 ;;
 20766                           
 20767                           
 20768                           ;psect for function _flashy_Main
 20769  0819                     _flashy_Main:	
 20770                           
 20771                           ;flashy_task.c: 122: struct t_flashy_taskData *data = (struct t_flashy_taskData *) taskD
      +                          ata;
 20772                           
 20773                           ;incstack = 0
 20774                           ; Regs used in _flashy_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 20775  0819  0020               	movlb	0	; select bank0
 20776  081A  0853               	movf	flashy_Main@taskData+1,w
 20777  081B  00DF               	movwf	flashy_Main@data+1
 20778  081C  0852               	movf	flashy_Main@taskData,w
 20779  081D  00DE               	movwf	flashy_Main@data
 20780                           
 20781                           ;flashy_task.c: 123: u16 buttonPressed;
 20782                           ;flashy_task.c: 124: char hit_counter[6];
 20783                           ;flashy_task.c: 126: if ( currentTask != FLASHY_TASK ){
 20784  081E  3002               	movlw	2
 20785  081F  0021               	movlb	1	; select bank1
 20786  0820  063A               	xorwf	_currentTask^(0+128),w
 20787  0821  043B               	iorwf	(_currentTask+1)^(0+128),w
 20788  0822  1903               	btfsc	3,2
 20789  0823  28C6               	goto	l9175
 20790                           
 20791                           ;flashy_task.c: 127: data->holdCountA = 1;
 20792  0824  0020               	movlb	0	; select bank0
 20793  0825  085E               	movf	flashy_Main@data,w
 20794  0826  0086               	movwf	6
 20795  0827  085F               	movf	flashy_Main@data+1,w
 20796  0828  0087               	movwf	7
 20797  0829  314A               	addfsr 1,10
 20798  082A  3001               	movlw	1
 20799  082B  3FC0               	movwi [0]fsr1
 20800  082C  3000               	movlw	0
 20801  082D  3FC1               	movwi [1]fsr1
 20802                           
 20803                           ;flashy_task.c: 128: data->holdCountB = 1;
 20804  082E  085E               	movf	flashy_Main@data,w
 20805  082F  0086               	movwf	6
 20806  0830  085F               	movf	flashy_Main@data+1,w
 20807  0831  0087               	movwf	7
 20808  0832  314C               	addfsr 1,12
 20809  0833  3001               	movlw	1
 20810  0834  3FC0               	movwi [0]fsr1
 20811  0835  3000               	movlw	0
 20812  0836  3FC1               	movwi [1]fsr1
 20813                           
 20814                           ;flashy_task.c: 129: data->holdCountX = 1;
 20815  0837  085E               	movf	flashy_Main@data,w
 20816  0838  0086               	movwf	6
 20817  0839  085F               	movf	flashy_Main@data+1,w
 20818  083A  0087               	movwf	7
 20819  083B  314E               	addfsr 1,14
 20820  083C  3001               	movlw	1
 20821  083D  3FC0               	movwi [0]fsr1
 20822  083E  3000               	movlw	0
 20823  083F  3FC1               	movwi [1]fsr1
 20824                           
 20825                           ;flashy_task.c: 130: data->holdCountY = 1;
 20826  0840  085E               	movf	flashy_Main@data,w
 20827  0841  0086               	movwf	6
 20828  0842  085F               	movf	flashy_Main@data+1,w
 20829  0843  0087               	movwf	7
 20830  0844  3150               	addfsr 1,16
 20831  0845  3001               	movlw	1
 20832  0846  3FC0               	movwi [0]fsr1
 20833  0847  3000               	movlw	0
 20834  0848  3FC1               	movwi [1]fsr1
 20835                           
 20836                           ;flashy_task.c: 131: data->holdCountXY = 1;
 20837  0849  085E               	movf	flashy_Main@data,w
 20838  084A  0086               	movwf	6
 20839  084B  085F               	movf	flashy_Main@data+1,w
 20840  084C  0087               	movwf	7
 20841  084D  3152               	addfsr 1,18
 20842  084E  3001               	movlw	1
 20843  084F  3FC0               	movwi [0]fsr1
 20844  0850  3000               	movlw	0
 20845  0851  3FC1               	movwi [1]fsr1
 20846                           
 20847                           ;flashy_task.c: 132: data->holdCountAY = 1;
 20848  0852  085E               	movf	flashy_Main@data,w
 20849  0853  0086               	movwf	6
 20850  0854  085F               	movf	flashy_Main@data+1,w
 20851  0855  0087               	movwf	7
 20852  0856  3154               	addfsr 1,20
 20853  0857  3001               	movlw	1
 20854  0858  3FC0               	movwi [0]fsr1
 20855  0859  3000               	movlw	0
 20856  085A  3FC1               	movwi [1]fsr1
 20857                           
 20858                           ;flashy_task.c: 133: data->holdCountAX = 1;
 20859  085B  085E               	movf	flashy_Main@data,w
 20860  085C  0086               	movwf	6
 20861  085D  085F               	movf	flashy_Main@data+1,w
 20862  085E  0087               	movwf	7
 20863  085F  3156               	addfsr 1,22
 20864  0860  3001               	movlw	1
 20865  0861  3FC0               	movwi [0]fsr1
 20866  0862  3000               	movlw	0
 20867  0863  3FC1               	movwi [1]fsr1
 20868                           
 20869                           ;flashy_task.c: 134: return;
 20870  0864  0008               	return
 20871  0865                     l9147:	
 20872                           ;flashy_task.c: 141: case SECRET_VALUE_TEST:
 20873                           
 20874                           ;flashy_task.c: 140: break;
 20875                           
 20876                           ;flashy_task.c: 139: case SECRET_VALUE_INIT:
 20877                           
 20878                           ;flashy_task.c: 135: }
 20879                           ;flashy_task.c: 138: switch (secret_value){
 20880                           
 20881                           
 20882                           ;flashy_task.c: 142: secret_value = SECRET_VALUE_INIT;
 20883  0865  0021               	movlb	1	; select bank1
 20884  0866  01C5               	clrf	_secret_value^(0+128)
 20885  0867  01C6               	clrf	(_secret_value+1)^(0+128)
 20886                           
 20887                           ;flashy_task.c: 143: data->displayTickCount = 0;
 20888  0868  0020               	movlb	0	; select bank0
 20889  0869  085E               	movf	flashy_Main@data,w
 20890  086A  0086               	movwf	6
 20891  086B  085F               	movf	flashy_Main@data+1,w
 20892  086C  0087               	movwf	7
 20893  086D  3144               	addfsr 1,4
 20894  086E  3000               	movlw	0
 20895  086F  3FC0               	movwi [0]fsr1
 20896  0870  3FC1               	movwi [1]fsr1
 20897                           
 20898                           ;flashy_task.c: 144: data->display_state = FLASHY_STATE_DISPLAY_SECRET_TEST;
 20899  0871  085E               	movf	flashy_Main@data,w
 20900  0872  3E06               	addlw	6
 20901  0873  00D4               	movwf	??_flashy_Main
 20902  0874  3000               	movlw	0
 20903  0875  3D5F               	addwfc	flashy_Main@data+1,w
 20904  0876  00D5               	movwf	??_flashy_Main+1
 20905  0877  0854               	movf	??_flashy_Main,w
 20906  0878  0086               	movwf	6
 20907  0879  0855               	movf	??_flashy_Main+1,w
 20908  087A  0087               	movwf	7
 20909  087B  3005               	movlw	5
 20910  087C  0081               	movwf	1
 20911                           
 20912                           ;flashy_task.c: 146: data->holdCountA = 1;
 20913  087D  085E               	movf	flashy_Main@data,w
 20914  087E  0086               	movwf	6
 20915  087F  085F               	movf	flashy_Main@data+1,w
 20916  0880  0087               	movwf	7
 20917  0881  314A               	addfsr 1,10
 20918  0882  3001               	movlw	1
 20919  0883  3FC0               	movwi [0]fsr1
 20920  0884  3000               	movlw	0
 20921  0885  3FC1               	movwi [1]fsr1
 20922                           
 20923                           ;flashy_task.c: 147: data->holdCountB = 1;
 20924  0886  085E               	movf	flashy_Main@data,w
 20925  0887  0086               	movwf	6
 20926  0888  085F               	movf	flashy_Main@data+1,w
 20927  0889  0087               	movwf	7
 20928  088A  314C               	addfsr 1,12
 20929  088B  3001               	movlw	1
 20930  088C  3FC0               	movwi [0]fsr1
 20931  088D  3000               	movlw	0
 20932  088E  3FC1               	movwi [1]fsr1
 20933                           
 20934                           ;flashy_task.c: 148: data->holdCountX = 1;
 20935  088F  085E               	movf	flashy_Main@data,w
 20936  0890  0086               	movwf	6
 20937  0891  085F               	movf	flashy_Main@data+1,w
 20938  0892  0087               	movwf	7
 20939  0893  314E               	addfsr 1,14
 20940  0894  3001               	movlw	1
 20941  0895  3FC0               	movwi [0]fsr1
 20942  0896  3000               	movlw	0
 20943  0897  3FC1               	movwi [1]fsr1
 20944                           
 20945                           ;flashy_task.c: 149: data->holdCountY = 1;
 20946  0898  085E               	movf	flashy_Main@data,w
 20947  0899  0086               	movwf	6
 20948  089A  085F               	movf	flashy_Main@data+1,w
 20949  089B  0087               	movwf	7
 20950  089C  3150               	addfsr 1,16
 20951  089D  3001               	movlw	1
 20952  089E  3FC0               	movwi [0]fsr1
 20953  089F  3000               	movlw	0
 20954  08A0  3FC1               	movwi [1]fsr1
 20955                           
 20956                           ;flashy_task.c: 150: data->holdCountXY = 1;
 20957  08A1  085E               	movf	flashy_Main@data,w
 20958  08A2  0086               	movwf	6
 20959  08A3  085F               	movf	flashy_Main@data+1,w
 20960  08A4  0087               	movwf	7
 20961  08A5  3152               	addfsr 1,18
 20962  08A6  3001               	movlw	1
 20963  08A7  3FC0               	movwi [0]fsr1
 20964  08A8  3000               	movlw	0
 20965  08A9  3FC1               	movwi [1]fsr1
 20966                           
 20967                           ;flashy_task.c: 151: data->holdCountAY = 1;
 20968  08AA  085E               	movf	flashy_Main@data,w
 20969  08AB  0086               	movwf	6
 20970  08AC  085F               	movf	flashy_Main@data+1,w
 20971  08AD  0087               	movwf	7
 20972  08AE  3154               	addfsr 1,20
 20973  08AF  3001               	movlw	1
 20974  08B0  3FC0               	movwi [0]fsr1
 20975  08B1  3000               	movlw	0
 20976  08B2  3FC1               	movwi [1]fsr1
 20977                           
 20978                           ;flashy_task.c: 152: data->holdCountAX = 1;
 20979  08B3  085E               	movf	flashy_Main@data,w
 20980  08B4  0086               	movwf	6
 20981  08B5  085F               	movf	flashy_Main@data+1,w
 20982  08B6  0087               	movwf	7
 20983  08B7  3156               	addfsr 1,22
 20984  08B8  3001               	movlw	1
 20985  08B9  3FC0               	movwi [0]fsr1
 20986  08BA  3000               	movlw	0
 20987  08BB  3FC1               	movwi [1]fsr1
 20988                           
 20989                           ;flashy_task.c: 153: data->noholdCount = 1;
 20990  08BC  085E               	movf	flashy_Main@data,w
 20991  08BD  0086               	movwf	6
 20992  08BE  085F               	movf	flashy_Main@data+1,w
 20993  08BF  0087               	movwf	7
 20994  08C0  315C               	addfsr 1,28
 20995  08C1  3001               	movlw	1
 20996  08C2  3FC0               	movwi [0]fsr1
 20997  08C3  3000               	movlw	0
 20998  08C4  3FC1               	movwi [1]fsr1
 20999                           
 21000                           ;flashy_task.c: 154: return;
 21001  08C5  0008               	return
 21002  08C6                     l9175:	
 21003                           ;flashy_task.c: 156: }
 21004                           
 21005                           ;flashy_task.c: 155: break;
 21006                           
 21007                           
 21008                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 21009                           ; Switch size 1, requested type "space"
 21010                           ; Number of cases is 1, Range of values is 0 to 0
 21011                           ; switch strategies available:
 21012                           ; Name         Instructions Cycles
 21013                           ; simple_byte            4     3 (average)
 21014                           ; direct_byte            8     6 (fixed)
 21015                           ; jumptable            260     6 (fixed)
 21016                           ;	Chosen strategy is simple_byte
 21017  08C6  0021               	movlb	1	; select bank1
 21018  08C7  0846               	movf	(_secret_value+1)^(0+128),w
 21019  08C8  3A00               	xorlw	0	; case 0
 21020  08C9  1903               	skipnz
 21021  08CA  28CC               	goto	l10883
 21022  08CB  29C4               	goto	l9245
 21023  08CC                     l10883:	
 21024                           
 21025                           ; Switch size 1, requested type "space"
 21026                           ; Number of cases is 2, Range of values is 0 to 1
 21027                           ; switch strategies available:
 21028                           ; Name         Instructions Cycles
 21029                           ; simple_byte            7     4 (average)
 21030                           ; direct_byte           10     6 (fixed)
 21031                           ; jumptable            260     6 (fixed)
 21032                           ;	Chosen strategy is simple_byte
 21033  08CC  0845               	movf	_secret_value^(0+128),w
 21034  08CD  3A00               	xorlw	0	; case 0
 21035  08CE  1903               	skipnz
 21036  08CF  29C4               	goto	l9245
 21037  08D0  3A01               	xorlw	1	; case 1
 21038  08D1  1903               	skipnz
 21039  08D2  2865               	goto	l9147
 21040  08D3  29C4               	goto	l9245
 21041                           
 21042                           ;flashy_task.c: 159: switch (data->led_state){
 21043  08D4  29C4               	goto	l9245
 21044  08D5                     l9177:	
 21045                           ;flashy_task.c: 160: case FLASHY_STATE_LED_ROUNDABOUT:
 21046                           
 21047                           
 21048                           ;flashy_task.c: 161: if (data->delayTickCount == 0){
 21049  08D5  0020               	movlb	0	; select bank0
 21050  08D6  085E               	movf	flashy_Main@data,w
 21051  08D7  0086               	movwf	6
 21052  08D8  085F               	movf	flashy_Main@data+1,w
 21053  08D9  0087               	movwf	7
 21054  08DA  3141               	addfsr 1,1
 21055  08DB  0016               	moviw fsr1++
 21056  08DC  0401               	iorwf	1,w
 21057  08DD  1D03               	btfss	3,2
 21058  08DE  29B8               	goto	L7
 21059                           
 21060                           ;flashy_task.c: 162: led_roundabout(flashy_leds_idx);
 21061  08DF  0021               	movlb	1	; select bank1
 21062  08E0  0833               	movf	(_flashy_leds_idx+1)^(0+128),w
 21063  08E1  0020               	movlb	0	; select bank0
 21064  08E2  00B1               	movwf	led_roundabout@counter+1
 21065  08E3  0021               	movlb	1	; select bank1
 21066  08E4  0832               	movf	_flashy_leds_idx^(0+128),w
 21067  08E5  0020               	movlb	0	; select bank0
 21068  08E6  00B0               	movwf	led_roundabout@counter
 21069  08E7  31B7  27BF  3188   	fcall	_led_roundabout
 21070                           
 21071                           ;flashy_task.c: 163: flashy_leds_idx += 1;
 21072  08EA  3001               	movlw	1
 21073  08EB  0021               	movlb	1	; select bank1
 21074  08EC  07B2               	addwf	_flashy_leds_idx^(0+128),f
 21075  08ED  3000               	movlw	0
 21076  08EE  3DB3               	addwfc	(_flashy_leds_idx+1)^(0+128),f
 21077                           
 21078                           ;flashy_task.c: 164: data->delayTickCount = 35;
 21079  08EF  0020               	movlb	0	; select bank0
 21080  08F0  085E               	movf	flashy_Main@data,w
 21081  08F1  0086               	movwf	6
 21082  08F2  085F               	movf	flashy_Main@data+1,w
 21083  08F3  0087               	movwf	7
 21084  08F4  3141               	addfsr 1,1
 21085  08F5  3023               	movlw	35
 21086  08F6  3FC0               	movwi [0]fsr1
 21087  08F7  3000               	movlw	0
 21088  08F8  3FC1               	movwi [1]fsr1
 21089                           
 21090                           ;flashy_task.c: 165: }
 21091  08F9  2A5E               	goto	l9275
 21092  08FA                     l9187:	
 21093                           ;flashy_task.c: 170: case FLASHY_STATE_LED_SHOT:
 21094                           
 21095                           ;flashy_task.c: 168: }
 21096                           ;flashy_task.c: 169: break;
 21097                           
 21098                           ;flashy_task.c: 166: else {
 21099                           ;flashy_task.c: 167: data->delayTickCount -= 1;
 21100                           
 21101                           
 21102                           ;flashy_task.c: 171: if (data->delayTickCount == 0){
 21103  08FA  085E               	movf	flashy_Main@data,w
 21104  08FB  0086               	movwf	6
 21105  08FC  085F               	movf	flashy_Main@data+1,w
 21106  08FD  0087               	movwf	7
 21107  08FE  3141               	addfsr 1,1
 21108  08FF  0016               	moviw fsr1++
 21109  0900  0401               	iorwf	1,w
 21110  0901  1D03               	btfss	3,2
 21111  0902  29B8               	goto	L7
 21112                           
 21113                           ;flashy_task.c: 172: led_curtain(flashy_leds_idx);
 21114  0903  0021               	movlb	1	; select bank1
 21115  0904  0833               	movf	(_flashy_leds_idx+1)^(0+128),w
 21116  0905  0020               	movlb	0	; select bank0
 21117  0906  00B1               	movwf	led_curtain@counter+1
 21118  0907  0021               	movlb	1	; select bank1
 21119  0908  0832               	movf	_flashy_leds_idx^(0+128),w
 21120  0909  0020               	movlb	0	; select bank0
 21121  090A  00B0               	movwf	led_curtain@counter
 21122  090B  31B7  277E  3188   	fcall	_led_curtain
 21123                           
 21124                           ;flashy_task.c: 173: flashy_leds_idx += 1;
 21125  090E  3001               	movlw	1
 21126  090F  0021               	movlb	1	; select bank1
 21127  0910  07B2               	addwf	_flashy_leds_idx^(0+128),f
 21128  0911  3000               	movlw	0
 21129  0912  3DB3               	addwfc	(_flashy_leds_idx+1)^(0+128),f
 21130                           
 21131                           ;flashy_task.c: 174: data->delayTickCount = 5;
 21132  0913  0020               	movlb	0	; select bank0
 21133  0914  085E               	movf	flashy_Main@data,w
 21134  0915  0086               	movwf	6
 21135  0916  085F               	movf	flashy_Main@data+1,w
 21136  0917  0087               	movwf	7
 21137  0918  3141               	addfsr 1,1
 21138  0919  3005               	movlw	5
 21139  091A  3FC0               	movwi [0]fsr1
 21140  091B  3000               	movlw	0
 21141  091C  3FC1               	movwi [1]fsr1
 21142                           
 21143                           ;flashy_task.c: 175: }
 21144  091D  2A5E               	goto	l9275
 21145  091E                     l9197:	
 21146                           ;flashy_task.c: 180: case FLASHY_STATE_SPARKLE:
 21147                           
 21148                           ;flashy_task.c: 178: }
 21149                           ;flashy_task.c: 179: break;
 21150                           
 21151                           ;flashy_task.c: 176: else {
 21152                           ;flashy_task.c: 177: data->delayTickCount -= 1;
 21153                           
 21154                           
 21155                           ;flashy_task.c: 181: if (data->delayTickCount < 1){
 21156  091E  085E               	movf	flashy_Main@data,w
 21157  091F  0086               	movwf	6
 21158  0920  085F               	movf	flashy_Main@data+1,w
 21159  0921  0087               	movwf	7
 21160  0922  3141               	addfsr 1,1
 21161  0923  0016               	moviw fsr1++
 21162  0924  0401               	iorwf	1,w
 21163  0925  1D03               	btfss	3,2
 21164  0926  29B7               	goto	l9241
 21165                           
 21166                           ;flashy_task.c: 182: led_rand();
 21167  0927  31A9  21CB  3188   	fcall	_led_rand
 21168                           
 21169                           ;flashy_task.c: 183: data->delayTickCount = flashy_sparkle_rate;
 21170  092A  0020               	movlb	0	; select bank0
 21171  092B  085E               	movf	flashy_Main@data,w
 21172  092C  0086               	movwf	6
 21173  092D  085F               	movf	flashy_Main@data+1,w
 21174  092E  0087               	movwf	7
 21175  092F  3141               	addfsr 1,1
 21176  0930  0021               	movlb	1	; select bank1
 21177  0931  082E               	movf	_flashy_sparkle_rate^(0+128),w
 21178  0932  3FC0               	movwi [0]fsr1
 21179  0933  082F               	movf	(_flashy_sparkle_rate+1)^(0+128),w
 21180  0934  3FC1               	movwi [1]fsr1
 21181  0935  2A5E               	goto	l9275
 21182  0936                     l9205:	
 21183                           ;flashy_task.c: 189: case FLASHY_STATE_CIRCLE:
 21184                           
 21185                           ;flashy_task.c: 187: }
 21186                           ;flashy_task.c: 188: break;
 21187                           
 21188                           ;flashy_task.c: 185: else {
 21189                           ;flashy_task.c: 186: data->delayTickCount -= 1;
 21190                           
 21191                           ;flashy_task.c: 184: }
 21192                           
 21193                           
 21194                           ;flashy_task.c: 190: if (data->delayTickCount ==0 ){
 21195  0936  085E               	movf	flashy_Main@data,w
 21196  0937  0086               	movwf	6
 21197  0938  085F               	movf	flashy_Main@data+1,w
 21198  0939  0087               	movwf	7
 21199  093A  3141               	addfsr 1,1
 21200  093B  0016               	moviw fsr1++
 21201  093C  0401               	iorwf	1,w
 21202  093D  1D03               	btfss	3,2
 21203  093E  29B7               	goto	l9241
 21204                           
 21205                           ;flashy_task.c: 191: if (flashy_leds_idx == 1024 ){
 21206  093F  3004               	movlw	4
 21207  0940  0021               	movlb	1	; select bank1
 21208  0941  0633               	xorwf	(_flashy_leds_idx+1)^(0+128),w
 21209  0942  0432               	iorwf	_flashy_leds_idx^(0+128),w
 21210  0943  1D03               	btfss	3,2
 21211  0944  2949               	goto	l9211
 21212                           
 21213                           ;flashy_task.c: 192: flashy_leds_idx = flashy_leds_idx << 1;
 21214  0945  3532               	lslf	_flashy_leds_idx^(0+128),w
 21215  0946  00B2               	movwf	_flashy_leds_idx^(0+128)
 21216  0947  0D33               	rlf	(_flashy_leds_idx+1)^(0+128),w
 21217  0948  00B3               	movwf	(_flashy_leds_idx+1)^(0+128)
 21218  0949                     l9211:	
 21219                           
 21220                           ;flashy_task.c: 193: }
 21221                           ;flashy_task.c: 194: led_circle(flashy_leds_idx);
 21222  0949  0833               	movf	(_flashy_leds_idx+1)^(0+128),w
 21223  094A  0020               	movlb	0	; select bank0
 21224  094B  00B1               	movwf	led_circle@count+1
 21225  094C  0021               	movlb	1	; select bank1
 21226  094D  0832               	movf	_flashy_leds_idx^(0+128),w
 21227  094E  0020               	movlb	0	; select bank0
 21228  094F  00B0               	movwf	led_circle@count
 21229  0950  31B2  2203  3188   	fcall	_led_circle
 21230                           
 21231                           ;flashy_task.c: 195: if (flashy_leds_idx < 1 ){
 21232  0953  0021               	movlb	1	; select bank1
 21233  0954  0832               	movf	_flashy_leds_idx^(0+128),w
 21234  0955  0433               	iorwf	(_flashy_leds_idx+1)^(0+128),w
 21235  0956  1D03               	btfss	3,2
 21236  0957  295D               	goto	l9217
 21237                           
 21238                           ;flashy_task.c: 196: flashy_leds_idx = 1;
 21239  0958  3001               	movlw	1
 21240  0959  00B2               	movwf	_flashy_leds_idx^(0+128)
 21241  095A  3000               	movlw	0
 21242  095B  00B3               	movwf	(_flashy_leds_idx^(0+128)+1)
 21243                           
 21244                           ;flashy_task.c: 197: break;
 21245  095C  2A5E               	goto	l9275
 21246  095D                     l9217:	
 21247                           
 21248                           ;flashy_task.c: 198: }
 21249                           ;flashy_task.c: 199: flashy_leds_idx = flashy_leds_idx << 1;
 21250  095D  3532               	lslf	_flashy_leds_idx^(0+128),w
 21251  095E  00B2               	movwf	_flashy_leds_idx^(0+128)
 21252  095F  0D33               	rlf	(_flashy_leds_idx+1)^(0+128),w
 21253  0960  00B3               	movwf	(_flashy_leds_idx+1)^(0+128)
 21254                           
 21255                           ;flashy_task.c: 201: data->delayTickCount = flashy_sparkle_rate;
 21256  0961  0020               	movlb	0	; select bank0
 21257  0962  085E               	movf	flashy_Main@data,w
 21258  0963  0086               	movwf	6
 21259  0964  085F               	movf	flashy_Main@data+1,w
 21260  0965  0087               	movwf	7
 21261  0966  3141               	addfsr 1,1
 21262  0967  0021               	movlb	1	; select bank1
 21263  0968  082E               	movf	_flashy_sparkle_rate^(0+128),w
 21264  0969  3FC0               	movwi [0]fsr1
 21265  096A  082F               	movf	(_flashy_sparkle_rate+1)^(0+128),w
 21266  096B  3FC1               	movwi [1]fsr1
 21267  096C  2A5E               	goto	l9275
 21268  096D                     l9223:	
 21269                           ;flashy_task.c: 207: case FLASHY_STATE_LED_ALT:
 21270                           
 21271                           ;flashy_task.c: 205: }
 21272                           ;flashy_task.c: 206: break;
 21273                           
 21274                           ;flashy_task.c: 203: else {
 21275                           ;flashy_task.c: 204: data->delayTickCount -= 1;
 21276                           
 21277                           ;flashy_task.c: 202: }
 21278                           
 21279                           
 21280                           ;flashy_task.c: 208: if (data->delayTickCount == 0){
 21281  096D  085E               	movf	flashy_Main@data,w
 21282  096E  0086               	movwf	6
 21283  096F  085F               	movf	flashy_Main@data+1,w
 21284  0970  0087               	movwf	7
 21285  0971  3141               	addfsr 1,1
 21286  0972  0016               	moviw fsr1++
 21287  0973  0401               	iorwf	1,w
 21288  0974  1D03               	btfss	3,2
 21289  0975  29B7               	goto	l9241
 21290                           
 21291                           ;flashy_task.c: 209: let_alternate(flashy_leds_idx);
 21292  0976  0021               	movlb	1	; select bank1
 21293  0977  0833               	movf	(_flashy_leds_idx+1)^(0+128),w
 21294  0978  0020               	movlb	0	; select bank0
 21295  0979  00B1               	movwf	let_alternate@count+1
 21296  097A  0021               	movlb	1	; select bank1
 21297  097B  0832               	movf	_flashy_leds_idx^(0+128),w
 21298  097C  0020               	movlb	0	; select bank0
 21299  097D  00B0               	movwf	let_alternate@count
 21300  097E  31A2  2201  3188   	fcall	_let_alternate
 21301                           
 21302                           ;flashy_task.c: 210: flashy_leds_idx += 1;
 21303  0981  3001               	movlw	1
 21304  0982  0021               	movlb	1	; select bank1
 21305  0983  07B2               	addwf	_flashy_leds_idx^(0+128),f
 21306  0984  3000               	movlw	0
 21307  0985  3DB3               	addwfc	(_flashy_leds_idx+1)^(0+128),f
 21308                           
 21309                           ;flashy_task.c: 211: data->delayTickCount = flashy_sparkle_rate;
 21310  0986  0020               	movlb	0	; select bank0
 21311  0987  085E               	movf	flashy_Main@data,w
 21312  0988  0086               	movwf	6
 21313  0989  085F               	movf	flashy_Main@data+1,w
 21314  098A  0087               	movwf	7
 21315  098B  3141               	addfsr 1,1
 21316  098C  0021               	movlb	1	; select bank1
 21317  098D  082E               	movf	_flashy_sparkle_rate^(0+128),w
 21318  098E  3FC0               	movwi [0]fsr1
 21319  098F  082F               	movf	(_flashy_sparkle_rate+1)^(0+128),w
 21320  0990  3FC1               	movwi [1]fsr1
 21321  0991  2A5E               	goto	l9275
 21322  0992                     l9233:	
 21323                           ;flashy_task.c: 217: case FLASHY_STATE_LED_PARODY:
 21324                           
 21325                           ;flashy_task.c: 215: }
 21326                           ;flashy_task.c: 216: break;
 21327                           
 21328                           ;flashy_task.c: 213: else {
 21329                           ;flashy_task.c: 214: data->delayTickCount -= 1;
 21330                           
 21331                           ;flashy_task.c: 212: }
 21332                           
 21333                           
 21334                           ;flashy_task.c: 218: if (data->delayTickCount == 0){
 21335  0992  085E               	movf	flashy_Main@data,w
 21336  0993  0086               	movwf	6
 21337  0994  085F               	movf	flashy_Main@data+1,w
 21338  0995  0087               	movwf	7
 21339  0996  3141               	addfsr 1,1
 21340  0997  0016               	moviw fsr1++
 21341  0998  0401               	iorwf	1,w
 21342  0999  1D03               	btfss	3,2
 21343  099A  29B7               	goto	l9241
 21344                           
 21345                           ;flashy_task.c: 219: led_Parody(flashy_leds_idx);
 21346  099B  0021               	movlb	1	; select bank1
 21347  099C  0833               	movf	(_flashy_leds_idx+1)^(0+128),w
 21348  099D  0020               	movlb	0	; select bank0
 21349  099E  00B1               	movwf	led_Parody@count+1
 21350  099F  0021               	movlb	1	; select bank1
 21351  09A0  0832               	movf	_flashy_leds_idx^(0+128),w
 21352  09A1  0020               	movlb	0	; select bank0
 21353  09A2  00B0               	movwf	led_Parody@count
 21354  09A3  31AE  26BA  3188   	fcall	_led_Parody
 21355                           
 21356                           ;flashy_task.c: 220: flashy_leds_idx += 1;
 21357  09A6  3001               	movlw	1
 21358  09A7  0021               	movlb	1	; select bank1
 21359  09A8  07B2               	addwf	_flashy_leds_idx^(0+128),f
 21360  09A9  3000               	movlw	0
 21361  09AA  3DB3               	addwfc	(_flashy_leds_idx+1)^(0+128),f
 21362                           
 21363                           ;flashy_task.c: 221: data->delayTickCount = flashy_sparkle_rate;
 21364  09AB  0020               	movlb	0	; select bank0
 21365  09AC  085E               	movf	flashy_Main@data,w
 21366  09AD  0086               	movwf	6
 21367  09AE  085F               	movf	flashy_Main@data+1,w
 21368  09AF  0087               	movwf	7
 21369  09B0  3141               	addfsr 1,1
 21370  09B1  0021               	movlb	1	; select bank1
 21371  09B2  082E               	movf	_flashy_sparkle_rate^(0+128),w
 21372  09B3  3FC0               	movwi [0]fsr1
 21373  09B4  082F               	movf	(_flashy_sparkle_rate+1)^(0+128),w
 21374  09B5  3FC1               	movwi [1]fsr1
 21375                           
 21376                           ;flashy_task.c: 222: }
 21377  09B6  2A5E               	goto	l9275
 21378  09B7                     l9241:	
 21379                           
 21380                           ;flashy_task.c: 223: else {
 21381                           ;flashy_task.c: 224: data->delayTickCount -= 1;
 21382  09B7  0020               	movlb	0	; select bank0
 21383  09B8                     L7:	
 21384  09B8  085E               	movf	flashy_Main@data,w
 21385  09B9  0086               	movwf	6
 21386  09BA  085F               	movf	flashy_Main@data+1,w
 21387  09BB  0087               	movwf	7
 21388  09BC  3141               	addfsr 1,1
 21389  09BD  3001               	movlw	1
 21390  09BE  0281               	subwf	1,f
 21391  09BF  3141               	addfsr 1,1
 21392  09C0  3000               	movlw	0
 21393  09C1  3B81               	subwfb	1,f
 21394  09C2  317F               	addfsr 1,-1
 21395                           
 21396                           ;flashy_task.c: 228: }
 21397                           
 21398                           ;flashy_task.c: 225: }
 21399                           ;flashy_task.c: 226: break;
 21400  09C3  2A5E               	goto	l9275
 21401  09C4                     l9245:	
 21402  09C4  0020               	movlb	0	; select bank0
 21403  09C5  085E               	movf	flashy_Main@data,w
 21404  09C6  0086               	movwf	6
 21405  09C7  085F               	movf	flashy_Main@data+1,w
 21406  09C8  0087               	movwf	7
 21407  09C9  3143               	addfsr 1,3
 21408  09CA  0801               	movf	1,w
 21409                           
 21410                           ; Switch size 1, requested type "space"
 21411                           ; Number of cases is 6, Range of values is 0 to 5
 21412                           ; switch strategies available:
 21413                           ; Name         Instructions Cycles
 21414                           ; direct_byte           18     6 (fixed)
 21415                           ; simple_byte           19    10 (average)
 21416                           ; jumptable            260     6 (fixed)
 21417                           ;	Chosen strategy is direct_byte
 21418  09CB  0084               	movwf	4
 21419  09CC  3006               	movlw	6
 21420  09CD  0204               	subwf	4,w
 21421  09CE  1803               	skipnc
 21422  09CF  2A5E               	goto	l9275
 21423  09D0  31B0               	movlp	high S10885
 21424  09D1  3504               	lslf	4,w
 21425  09D2  3E00               	addlw	low S10885
 21426  09D3  0082               	movwf	2
 21427                           
 21428                           ;flashy_task.c: 231: switch (data->display_state){
 21429  09D4  2A5E               	goto	l9275
 21430  09D5                     l9247:	
 21431                           ;flashy_task.c: 232: case FLASHY_STATE_DISPLAY_BLASTER:
 21432                           
 21433                           
 21434                           ;flashy_task.c: 233: nullifyBadge_segDisplayPutStr(data->badge, "PEW ");
 21435  09D5  30EC               	movlw	low (STR_39| (0+32768))
 21436  09D6  00B7               	movwf	nullifyBadge_segDisplayPutStr@str
 21437  09D7  30BB               	movlw	high (STR_39| (0+32768))
 21438  09D8  00B8               	movwf	nullifyBadge_segDisplayPutStr@str+1
 21439  09D9  085E               	movf	flashy_Main@data,w
 21440  09DA  0086               	movwf	6
 21441  09DB  085F               	movf	flashy_Main@data+1,w
 21442  09DC  0087               	movwf	7
 21443  09DD  0801               	movf	1,w
 21444  09DE  31B2  2220  3188   	fcall	_nullifyBadge_segDisplayPutStr
 21445                           
 21446                           ;flashy_task.c: 234: nullifyBadge_segDisplayForceUpdate(data->badge);
 21447  09E1  0020               	movlb	0	; select bank0
 21448  09E2  085E               	movf	flashy_Main@data,w
 21449  09E3  0086               	movwf	6
 21450  09E4  085F               	movf	flashy_Main@data+1,w
 21451  09E5  0087               	movwf	7
 21452  09E6  0801               	movf	1,w
 21453  09E7  31B1  21E4  3188   	fcall	_nullifyBadge_segDisplayForceUpdate
 21454  09EA  2A52               	goto	L10
 21455  09EB                     l9253:	
 21456                           ;flashy_task.c: 237: case FLASHY_STATE_DISPLAY_SHOT:
 21457                           
 21458                           ;flashy_task.c: 236: break;
 21459                           
 21460                           ;flashy_task.c: 235: data->displayTickCount += 1;
 21461                           
 21462                           
 21463                           ;flashy_task.c: 238: sprintf((char *)hit_counter, "%4d", deaths);
 21464  09EB  3056               	movlw	low flashy_Main@hit_counter
 21465  09EC  00AF               	movwf	sprintf@sp
 21466  09ED  3000               	movlw	high flashy_Main@hit_counter
 21467  09EE  00B0               	movwf	sprintf@sp+1
 21468  09EF  3005               	movlw	low (STR_40| (0+32768))
 21469  09F0  00B1               	movwf	sprintf@f
 21470  09F1  30BC               	movlw	high (STR_40| (0+32768))
 21471  09F2  00B2               	movwf	sprintf@f+1
 21472  09F3  0021               	movlb	1	; select bank1
 21473  09F4  082B               	movf	(_deaths+1)^(0+128),w
 21474  09F5  0020               	movlb	0	; select bank0
 21475  09F6  00B4               	movwf	?_sprintf+5
 21476  09F7  0021               	movlb	1	; select bank1
 21477  09F8  082A               	movf	_deaths^(0+128),w
 21478  09F9  0020               	movlb	0	; select bank0
 21479  09FA  00B3               	movwf	?_sprintf+4
 21480  09FB  3199  216B  3188   	fcall	_sprintf
 21481                           
 21482                           ;flashy_task.c: 240: nullifyBadge_segDisplayPutStr(data->badge, hit_counter);
 21483  09FE  3056               	movlw	low flashy_Main@hit_counter
 21484  09FF  0020               	movlb	0	; select bank0
 21485  0A00  00B7               	movwf	nullifyBadge_segDisplayPutStr@str
 21486  0A01  3000               	movlw	high flashy_Main@hit_counter
 21487  0A02  00B8               	movwf	nullifyBadge_segDisplayPutStr@str+1
 21488  0A03  085E               	movf	flashy_Main@data,w
 21489  0A04  0086               	movwf	6
 21490  0A05  085F               	movf	flashy_Main@data+1,w
 21491  0A06  0087               	movwf	7
 21492  0A07  0801               	movf	1,w
 21493  0A08  31B2  2220  3188   	fcall	_nullifyBadge_segDisplayPutStr
 21494                           
 21495                           ;flashy_task.c: 241: nullifyBadge_segDisplayForceUpdate(data->badge);
 21496  0A0B  0020               	movlb	0	; select bank0
 21497  0A0C  085E               	movf	flashy_Main@data,w
 21498  0A0D  0086               	movwf	6
 21499  0A0E  085F               	movf	flashy_Main@data+1,w
 21500  0A0F  0087               	movwf	7
 21501  0A10  0801               	movf	1,w
 21502  0A11  31B1  21E4  3188   	fcall	_nullifyBadge_segDisplayForceUpdate
 21503                           
 21504                           ;flashy_task.c: 242: if (data->displayTickCount == 150){
 21505  0A14  0020               	movlb	0	; select bank0
 21506  0A15  085E               	movf	flashy_Main@data,w
 21507  0A16  0086               	movwf	6
 21508  0A17  085F               	movf	flashy_Main@data+1,w
 21509  0A18  0087               	movwf	7
 21510  0A19  3144               	addfsr 1,4
 21511  0A1A  0016               	moviw fsr1++
 21512  0A1B  3A96               	xorlw	150
 21513  0A1C  00D4               	movwf	??_flashy_Main
 21514  0A1D  0016               	moviw fsr1++
 21515  0A1E  04D4               	iorwf	??_flashy_Main,f
 21516  0A1F  1D03               	btfss	3,2
 21517  0A20  2A53               	goto	L9
 21518                           
 21519                           ;flashy_task.c: 243: data->displayTickCount = 0;
 21520  0A21  085E               	movf	flashy_Main@data,w
 21521  0A22  0086               	movwf	6
 21522  0A23  085F               	movf	flashy_Main@data+1,w
 21523  0A24  0087               	movwf	7
 21524  0A25  3144               	addfsr 1,4
 21525  0A26  3000               	movlw	0
 21526  0A27  3FC0               	movwi [0]fsr1
 21527  0A28  3FC1               	movwi [1]fsr1
 21528                           
 21529                           ;flashy_task.c: 244: data->display_state = 35;
 21530  0A29  085E               	movf	flashy_Main@data,w
 21531  0A2A  3E06               	addlw	6
 21532  0A2B  00D4               	movwf	??_flashy_Main
 21533  0A2C  3000               	movlw	0
 21534  0A2D  3D5F               	addwfc	flashy_Main@data+1,w
 21535  0A2E  00D5               	movwf	??_flashy_Main+1
 21536  0A2F  0854               	movf	??_flashy_Main,w
 21537  0A30  0086               	movwf	6
 21538  0A31  0855               	movf	??_flashy_Main+1,w
 21539  0A32  0087               	movwf	7
 21540  0A33  3023               	movlw	35
 21541  0A34  0081               	movwf	1
 21542  0A35  2A53               	goto	L9
 21543  0A36                     l9265:	
 21544                           ;flashy_task.c: 248: case FLASHY_STATE_DISPLAY_SECRET_TEST:
 21545                           
 21546                           ;flashy_task.c: 247: break;
 21547                           
 21548                           ;flashy_task.c: 245: }
 21549                           ;flashy_task.c: 246: data->displayTickCount += 1;
 21550                           
 21551                           
 21552                           ;flashy_task.c: 249: marquee(FLASHY_TEXT_SECRET_TEST, data->displayTickCount);
 21553  0A36  0021               	movlb	1	; select bank1
 21554  0A37  0855               	movf	(_FLASHY_TEXT_SECRET_TEST+1)^(0+128),w
 21555  0A38  0020               	movlb	0	; select bank0
 21556  0A39  00BB               	movwf	marquee@string+1
 21557  0A3A  0021               	movlb	1	; select bank1
 21558  0A3B  0854               	movf	_FLASHY_TEXT_SECRET_TEST^(0+128),w
 21559  0A3C  0020               	movlb	0	; select bank0
 21560  0A3D  00BA               	movwf	marquee@string
 21561  0A3E  085E               	movf	flashy_Main@data,w
 21562  0A3F  0086               	movwf	6
 21563  0A40  085F               	movf	flashy_Main@data+1,w
 21564  0A41  0087               	movwf	7
 21565  0A42  3144               	addfsr 1,4
 21566  0A43  3F40               	moviw [0]fsr1
 21567  0A44  00BC               	movwf	marquee@count
 21568  0A45  3F41               	moviw [1]fsr1
 21569  0A46  00BD               	movwf	marquee@count+1
 21570  0A47  31A2  2215  3188   	fcall	_marquee
 21571  0A4A  2A52               	goto	L10
 21572  0A4B                     l9269:	
 21573                           ;flashy_task.c: 254: default:
 21574                           
 21575                           ;flashy_task.c: 252: case FLASHY_STATE_DISPLAY:
 21576                           
 21577                           ;flashy_task.c: 251: break;
 21578                           
 21579                           ;flashy_task.c: 250: data->displayTickCount += 1;
 21580                           
 21581                           
 21582                           ;flashy_task.c: 255: flashy_display_option(data);
 21583  0A4B  085F               	movf	flashy_Main@data+1,w
 21584  0A4C  00CD               	movwf	flashy_display_option@data+1
 21585  0A4D  085E               	movf	flashy_Main@data,w
 21586  0A4E  00CC               	movwf	flashy_display_option@data
 21587  0A4F  31AD  2533  3188   	fcall	_flashy_display_option
 21588  0A52                     L10:	
 21589                           
 21590                           ;flashy_task.c: 256: data->displayTickCount += 1;
 21591  0A52  0020               	movlb	0	; select bank0
 21592  0A53                     L9:	
 21593  0A53  085E               	movf	flashy_Main@data,w
 21594  0A54  0086               	movwf	6
 21595  0A55  085F               	movf	flashy_Main@data+1,w
 21596  0A56  0087               	movwf	7
 21597  0A57  3144               	addfsr 1,4
 21598  0A58  3001               	movlw	1
 21599  0A59  0781               	addwf	1,f
 21600  0A5A  3141               	addfsr 1,1
 21601  0A5B  1803               	skipnc
 21602  0A5C  0A81               	incf	1,f
 21603                           
 21604                           ;flashy_task.c: 258: }
 21605                           
 21606                           ;flashy_task.c: 257: break;
 21607  0A5D  2A72               	goto	l9277
 21608  0A5E                     l9275:	
 21609  0A5E  0020               	movlb	0	; select bank0
 21610  0A5F  085E               	movf	flashy_Main@data,w
 21611  0A60  0086               	movwf	6
 21612  0A61  085F               	movf	flashy_Main@data+1,w
 21613  0A62  0087               	movwf	7
 21614  0A63  3146               	addfsr 1,6
 21615  0A64  0801               	movf	1,w
 21616                           
 21617                           ; Switch size 1, requested type "space"
 21618                           ; Number of cases is 4, Range of values is 0 to 5
 21619                           ; switch strategies available:
 21620                           ; Name         Instructions Cycles
 21621                           ; simple_byte           13     7 (average)
 21622                           ; direct_byte           18     6 (fixed)
 21623                           ; jumptable            260     6 (fixed)
 21624                           ;	Chosen strategy is simple_byte
 21625  0A65  3A00               	xorlw	0	; case 0
 21626  0A66  1903               	skipnz
 21627  0A67  2A4B               	goto	l9269
 21628  0A68  3A02               	xorlw	2	; case 2
 21629  0A69  1903               	skipnz
 21630  0A6A  29D5               	goto	l9247
 21631  0A6B  3A01               	xorlw	1	; case 3
 21632  0A6C  1903               	skipnz
 21633  0A6D  29EB               	goto	l9253
 21634  0A6E  3A06               	xorlw	6	; case 5
 21635  0A6F  1903               	skipnz
 21636  0A70  2A36               	goto	l9265
 21637  0A71  2A4B               	goto	l9269
 21638  0A72                     l9277:	
 21639                           
 21640                           ;flashy_task.c: 261: buttonPressed = nullifyBadge_buttonsGet();
 21641  0A72  31B5  25FF  3188   	fcall	_nullifyBadge_buttonsGet
 21642  0A75  0020               	movlb	0	; select bank0
 21643  0A76  00D4               	movwf	??_flashy_Main
 21644  0A77  01D5               	clrf	??_flashy_Main+1
 21645  0A78  0854               	movf	??_flashy_Main,w
 21646  0A79  00DC               	movwf	flashy_Main@buttonPressed
 21647  0A7A  0855               	movf	??_flashy_Main+1,w
 21648  0A7B  00DD               	movwf	flashy_Main@buttonPressed+1
 21649                           
 21650                           ;flashy_task.c: 262: switch (buttonPressed) {
 21651  0A7C  2F36               	goto	l9537
 21652  0A7D                     l9279:	
 21653                           ;flashy_task.c: 263: case 4 | 8:
 21654                           
 21655                           
 21656                           ;flashy_task.c: 264: if (data->holdCountXY == 0 ){
 21657  0A7D  085E               	movf	flashy_Main@data,w
 21658  0A7E  0086               	movwf	6
 21659  0A7F  085F               	movf	flashy_Main@data+1,w
 21660  0A80  0087               	movwf	7
 21661  0A81  3152               	addfsr 1,18
 21662  0A82  0016               	moviw fsr1++
 21663  0A83  0401               	iorwf	1,w
 21664  0A84  1D03               	btfss	3,2
 21665  0A85  2A8C               	goto	l9283
 21666                           
 21667                           ;flashy_task.c: 266: data->display_state = FLASHY_STATE_DISPLAY;
 21668  0A86  085E               	movf	flashy_Main@data,w
 21669  0A87  0086               	movwf	6
 21670  0A88  085F               	movf	flashy_Main@data+1,w
 21671  0A89  0087               	movwf	7
 21672  0A8A  3146               	addfsr 1,6
 21673  0A8B  0181               	clrf	1
 21674  0A8C                     l9283:	
 21675                           
 21676                           ;flashy_task.c: 267: }
 21677                           ;flashy_task.c: 269: data->holdCountA = 0;
 21678  0A8C  085E               	movf	flashy_Main@data,w
 21679  0A8D  0086               	movwf	6
 21680  0A8E  085F               	movf	flashy_Main@data+1,w
 21681  0A8F  0087               	movwf	7
 21682  0A90  314A               	addfsr 1,10
 21683  0A91  3000               	movlw	0
 21684  0A92  3FC0               	movwi [0]fsr1
 21685  0A93  3FC1               	movwi [1]fsr1
 21686                           
 21687                           ;flashy_task.c: 270: data->holdCountB = 0;
 21688  0A94  085E               	movf	flashy_Main@data,w
 21689  0A95  0086               	movwf	6
 21690  0A96  085F               	movf	flashy_Main@data+1,w
 21691  0A97  0087               	movwf	7
 21692  0A98  314C               	addfsr 1,12
 21693  0A99  3000               	movlw	0
 21694  0A9A  3FC0               	movwi [0]fsr1
 21695  0A9B  3FC1               	movwi [1]fsr1
 21696                           
 21697                           ;flashy_task.c: 271: data->holdCountX = 0;
 21698  0A9C  085E               	movf	flashy_Main@data,w
 21699  0A9D  0086               	movwf	6
 21700  0A9E  085F               	movf	flashy_Main@data+1,w
 21701  0A9F  0087               	movwf	7
 21702  0AA0  314E               	addfsr 1,14
 21703  0AA1  3000               	movlw	0
 21704  0AA2  3FC0               	movwi [0]fsr1
 21705  0AA3  3FC1               	movwi [1]fsr1
 21706                           
 21707                           ;flashy_task.c: 272: data->holdCountY = 0;
 21708  0AA4  085E               	movf	flashy_Main@data,w
 21709  0AA5  0086               	movwf	6
 21710  0AA6  085F               	movf	flashy_Main@data+1,w
 21711  0AA7  0087               	movwf	7
 21712  0AA8  3150               	addfsr 1,16
 21713  0AA9  3000               	movlw	0
 21714  0AAA  3FC0               	movwi [0]fsr1
 21715  0AAB  3FC1               	movwi [1]fsr1
 21716                           
 21717                           ;flashy_task.c: 273: data->holdCountXY += 1;
 21718  0AAC  085E               	movf	flashy_Main@data,w
 21719  0AAD  0086               	movwf	6
 21720  0AAE  085F               	movf	flashy_Main@data+1,w
 21721  0AAF  0087               	movwf	7
 21722  0AB0  3152               	addfsr 1,18
 21723  0AB1  3001               	movlw	1
 21724  0AB2  0781               	addwf	1,f
 21725  0AB3  3141               	addfsr 1,1
 21726  0AB4  1803               	skipnc
 21727  0AB5  0A81               	incf	1,f
 21728                           
 21729                           ;flashy_task.c: 274: data->holdCountAY = 0;
 21730  0AB6  085E               	movf	flashy_Main@data,w
 21731  0AB7  0086               	movwf	6
 21732  0AB8  085F               	movf	flashy_Main@data+1,w
 21733  0AB9  0087               	movwf	7
 21734  0ABA  3154               	addfsr 1,20
 21735  0ABB  3000               	movlw	0
 21736  0ABC  3FC0               	movwi [0]fsr1
 21737  0ABD  3FC1               	movwi [1]fsr1
 21738                           
 21739                           ;flashy_task.c: 275: data->holdCountAX = 0;
 21740  0ABE  085E               	movf	flashy_Main@data,w
 21741  0ABF  0086               	movwf	6
 21742  0AC0  085F               	movf	flashy_Main@data+1,w
 21743  0AC1  0087               	movwf	7
 21744  0AC2  3156               	addfsr 1,22
 21745  0AC3  3000               	movlw	0
 21746  0AC4  3FC0               	movwi [0]fsr1
 21747  0AC5  3FC1               	movwi [1]fsr1
 21748                           
 21749                           ;flashy_task.c: 276: data->holdCountBX = 0;
 21750  0AC6  085E               	movf	flashy_Main@data,w
 21751  0AC7  0086               	movwf	6
 21752  0AC8  085F               	movf	flashy_Main@data+1,w
 21753  0AC9  0087               	movwf	7
 21754  0ACA  3158               	addfsr 1,24
 21755  0ACB  3000               	movlw	0
 21756  0ACC  3FC0               	movwi [0]fsr1
 21757  0ACD  3FC1               	movwi [1]fsr1
 21758                           
 21759                           ;flashy_task.c: 277: data->holdCountBY = 0;
 21760  0ACE  085E               	movf	flashy_Main@data,w
 21761  0ACF  0086               	movwf	6
 21762  0AD0  085F               	movf	flashy_Main@data+1,w
 21763  0AD1  0087               	movwf	7
 21764  0AD2  315A               	addfsr 1,26
 21765  0AD3  3000               	movlw	0
 21766  0AD4  3FC0               	movwi [0]fsr1
 21767  0AD5  3FC1               	movwi [1]fsr1
 21768                           
 21769                           ;flashy_task.c: 278: data->noholdCount = 0;
 21770  0AD6  085E               	movf	flashy_Main@data,w
 21771  0AD7  0086               	movwf	6
 21772  0AD8  085F               	movf	flashy_Main@data+1,w
 21773  0AD9  0087               	movwf	7
 21774  0ADA  315C               	addfsr 1,28
 21775  0ADB  3000               	movlw	0
 21776  0ADC  3FC0               	movwi [0]fsr1
 21777  0ADD  3FC1               	movwi [1]fsr1
 21778                           
 21779                           ;flashy_task.c: 279: break;
 21780  0ADE  2FC9               	goto	l9567
 21781  0ADF                     l9303:	
 21782                           ;flashy_task.c: 280: case 1 | 8:
 21783                           
 21784                           
 21785                           ;flashy_task.c: 281: if ( data->holdCountAY == 0 ){
 21786  0ADF  085E               	movf	flashy_Main@data,w
 21787  0AE0  0086               	movwf	6
 21788  0AE1  085F               	movf	flashy_Main@data+1,w
 21789  0AE2  0087               	movwf	7
 21790  0AE3  3154               	addfsr 1,20
 21791  0AE4  0016               	moviw fsr1++
 21792  0AE5  0401               	iorwf	1,w
 21793  0AE6  1D03               	btfss	3,2
 21794  0AE7  2AF8               	goto	l9309
 21795                           
 21796                           ;flashy_task.c: 282: if (flashy_sparkle_rate > 1000){
 21797  0AE8  3003               	movlw	3
 21798  0AE9  0021               	movlb	1	; select bank1
 21799  0AEA  022F               	subwf	(_flashy_sparkle_rate+1)^(0+128),w
 21800  0AEB  30E9               	movlw	233
 21801  0AEC  1903               	skipnz
 21802  0AED  022E               	subwf	_flashy_sparkle_rate^(0+128),w
 21803  0AEE  1C03               	skipc
 21804  0AEF  2AF4               	goto	l1147
 21805                           
 21806                           ;flashy_task.c: 283: flashy_sparkle_rate = 1000;
 21807  0AF0  30E8               	movlw	232
 21808  0AF1  00AE               	movwf	_flashy_sparkle_rate^(0+128)
 21809  0AF2  3003               	movlw	3
 21810  0AF3  00AF               	movwf	(_flashy_sparkle_rate^(0+128)+1)
 21811  0AF4                     l1147:	
 21812                           
 21813                           ;flashy_task.c: 284: }
 21814                           ;flashy_task.c: 285: flashy_sparkle_rate += 5;
 21815  0AF4  3005               	movlw	5
 21816  0AF5  07AE               	addwf	_flashy_sparkle_rate^(0+128),f
 21817  0AF6  3000               	movlw	0
 21818  0AF7  3DAF               	addwfc	(_flashy_sparkle_rate+1)^(0+128),f
 21819  0AF8                     l9309:	
 21820                           
 21821                           ;flashy_task.c: 286: }
 21822                           ;flashy_task.c: 288: data->holdCountA = 0;
 21823  0AF8  0020               	movlb	0	; select bank0
 21824  0AF9  085E               	movf	flashy_Main@data,w
 21825  0AFA  0086               	movwf	6
 21826  0AFB  085F               	movf	flashy_Main@data+1,w
 21827  0AFC  0087               	movwf	7
 21828  0AFD  314A               	addfsr 1,10
 21829  0AFE  3000               	movlw	0
 21830  0AFF  3FC0               	movwi [0]fsr1
 21831  0B00  3FC1               	movwi [1]fsr1
 21832                           
 21833                           ;flashy_task.c: 289: data->holdCountB = 0;
 21834  0B01  085E               	movf	flashy_Main@data,w
 21835  0B02  0086               	movwf	6
 21836  0B03  085F               	movf	flashy_Main@data+1,w
 21837  0B04  0087               	movwf	7
 21838  0B05  314C               	addfsr 1,12
 21839  0B06  3000               	movlw	0
 21840  0B07  3FC0               	movwi [0]fsr1
 21841  0B08  3FC1               	movwi [1]fsr1
 21842                           
 21843                           ;flashy_task.c: 290: data->holdCountX = 0;
 21844  0B09  085E               	movf	flashy_Main@data,w
 21845  0B0A  0086               	movwf	6
 21846  0B0B  085F               	movf	flashy_Main@data+1,w
 21847  0B0C  0087               	movwf	7
 21848  0B0D  314E               	addfsr 1,14
 21849  0B0E  3000               	movlw	0
 21850  0B0F  3FC0               	movwi [0]fsr1
 21851  0B10  3FC1               	movwi [1]fsr1
 21852                           
 21853                           ;flashy_task.c: 291: data->holdCountY = 0;
 21854  0B11  085E               	movf	flashy_Main@data,w
 21855  0B12  0086               	movwf	6
 21856  0B13  085F               	movf	flashy_Main@data+1,w
 21857  0B14  0087               	movwf	7
 21858  0B15  3150               	addfsr 1,16
 21859  0B16  3000               	movlw	0
 21860  0B17  3FC0               	movwi [0]fsr1
 21861  0B18  3FC1               	movwi [1]fsr1
 21862                           
 21863                           ;flashy_task.c: 292: data->holdCountXY = 0;
 21864  0B19  085E               	movf	flashy_Main@data,w
 21865  0B1A  0086               	movwf	6
 21866  0B1B  085F               	movf	flashy_Main@data+1,w
 21867  0B1C  0087               	movwf	7
 21868  0B1D  3152               	addfsr 1,18
 21869  0B1E  3000               	movlw	0
 21870  0B1F  3FC0               	movwi [0]fsr1
 21871  0B20  3FC1               	movwi [1]fsr1
 21872                           
 21873                           ;flashy_task.c: 293: data->holdCountAY += 1;
 21874  0B21  085E               	movf	flashy_Main@data,w
 21875  0B22  0086               	movwf	6
 21876  0B23  085F               	movf	flashy_Main@data+1,w
 21877  0B24  0087               	movwf	7
 21878  0B25  3154               	addfsr 1,20
 21879  0B26  3001               	movlw	1
 21880  0B27  0781               	addwf	1,f
 21881  0B28  3141               	addfsr 1,1
 21882  0B29  1803               	skipnc
 21883  0B2A  0A81               	incf	1,f
 21884                           
 21885                           ;flashy_task.c: 294: data->holdCountAX = 0;
 21886  0B2B  085E               	movf	flashy_Main@data,w
 21887  0B2C  0086               	movwf	6
 21888  0B2D  085F               	movf	flashy_Main@data+1,w
 21889  0B2E  0087               	movwf	7
 21890  0B2F  3156               	addfsr 1,22
 21891  0B30  3000               	movlw	0
 21892  0B31  3FC0               	movwi [0]fsr1
 21893  0B32  3FC1               	movwi [1]fsr1
 21894                           
 21895                           ;flashy_task.c: 295: data->holdCountBX = 0;
 21896  0B33  085E               	movf	flashy_Main@data,w
 21897  0B34  0086               	movwf	6
 21898  0B35  085F               	movf	flashy_Main@data+1,w
 21899  0B36  0087               	movwf	7
 21900  0B37  3158               	addfsr 1,24
 21901  0B38  3000               	movlw	0
 21902  0B39  3FC0               	movwi [0]fsr1
 21903  0B3A  3FC1               	movwi [1]fsr1
 21904                           
 21905                           ;flashy_task.c: 296: data->holdCountBY = 0;
 21906  0B3B  085E               	movf	flashy_Main@data,w
 21907  0B3C  0086               	movwf	6
 21908  0B3D  085F               	movf	flashy_Main@data+1,w
 21909  0B3E  0087               	movwf	7
 21910  0B3F  315A               	addfsr 1,26
 21911  0B40  3000               	movlw	0
 21912  0B41  3FC0               	movwi [0]fsr1
 21913  0B42  3FC1               	movwi [1]fsr1
 21914                           
 21915                           ;flashy_task.c: 297: data->noholdCount = 0;
 21916  0B43  085E               	movf	flashy_Main@data,w
 21917  0B44  0086               	movwf	6
 21918  0B45  085F               	movf	flashy_Main@data+1,w
 21919  0B46  0087               	movwf	7
 21920  0B47  315C               	addfsr 1,28
 21921  0B48  3000               	movlw	0
 21922  0B49  3FC0               	movwi [0]fsr1
 21923  0B4A  3FC1               	movwi [1]fsr1
 21924                           
 21925                           ;flashy_task.c: 298: break;
 21926  0B4B  2FC9               	goto	l9567
 21927  0B4C                     l9329:	
 21928                           ;flashy_task.c: 299: case 1 | 4:
 21929                           
 21930                           
 21931                           ;flashy_task.c: 300: if ( data->holdCountAX == 0 ){
 21932  0B4C  085E               	movf	flashy_Main@data,w
 21933  0B4D  0086               	movwf	6
 21934  0B4E  085F               	movf	flashy_Main@data+1,w
 21935  0B4F  0087               	movwf	7
 21936  0B50  3156               	addfsr 1,22
 21937  0B51  0016               	moviw fsr1++
 21938  0B52  0401               	iorwf	1,w
 21939  0B53  1D03               	btfss	3,2
 21940  0B54  2B65               	goto	l9335
 21941                           
 21942                           ;flashy_task.c: 301: if (flashy_sparkle_rate < 5)
 21943  0B55  3000               	movlw	0
 21944  0B56  0021               	movlb	1	; select bank1
 21945  0B57  022F               	subwf	(_flashy_sparkle_rate+1)^(0+128),w
 21946  0B58  3005               	movlw	5
 21947  0B59  1903               	skipnz
 21948  0B5A  022E               	subwf	_flashy_sparkle_rate^(0+128),w
 21949  0B5B  1803               	skipnc
 21950  0B5C  2B61               	goto	l1150
 21951                           
 21952                           ;flashy_task.c: 302: flashy_sparkle_rate=5;
 21953  0B5D  3005               	movlw	5
 21954  0B5E  00AE               	movwf	_flashy_sparkle_rate^(0+128)
 21955  0B5F  3000               	movlw	0
 21956  0B60  00AF               	movwf	(_flashy_sparkle_rate^(0+128)+1)
 21957  0B61                     l1150:	
 21958                           
 21959                           ;flashy_task.c: 303: flashy_sparkle_rate -= 5;
 21960  0B61  3005               	movlw	5
 21961  0B62  02AE               	subwf	_flashy_sparkle_rate^(0+128),f
 21962  0B63  3000               	movlw	0
 21963  0B64  3BAF               	subwfb	(_flashy_sparkle_rate+1)^(0+128),f
 21964  0B65                     l9335:	
 21965                           
 21966                           ;flashy_task.c: 304: }
 21967                           ;flashy_task.c: 306: data->holdCountA = 0;
 21968  0B65  0020               	movlb	0	; select bank0
 21969  0B66  085E               	movf	flashy_Main@data,w
 21970  0B67  0086               	movwf	6
 21971  0B68  085F               	movf	flashy_Main@data+1,w
 21972  0B69  0087               	movwf	7
 21973  0B6A  314A               	addfsr 1,10
 21974  0B6B  3000               	movlw	0
 21975  0B6C  3FC0               	movwi [0]fsr1
 21976  0B6D  3FC1               	movwi [1]fsr1
 21977                           
 21978                           ;flashy_task.c: 307: data->holdCountB = 0;
 21979  0B6E  085E               	movf	flashy_Main@data,w
 21980  0B6F  0086               	movwf	6
 21981  0B70  085F               	movf	flashy_Main@data+1,w
 21982  0B71  0087               	movwf	7
 21983  0B72  314C               	addfsr 1,12
 21984  0B73  3000               	movlw	0
 21985  0B74  3FC0               	movwi [0]fsr1
 21986  0B75  3FC1               	movwi [1]fsr1
 21987                           
 21988                           ;flashy_task.c: 308: data->holdCountX += 1;
 21989  0B76  085E               	movf	flashy_Main@data,w
 21990  0B77  0086               	movwf	6
 21991  0B78  085F               	movf	flashy_Main@data+1,w
 21992  0B79  0087               	movwf	7
 21993  0B7A  314E               	addfsr 1,14
 21994  0B7B  3001               	movlw	1
 21995  0B7C  0781               	addwf	1,f
 21996  0B7D  3141               	addfsr 1,1
 21997  0B7E  1803               	skipnc
 21998  0B7F  0A81               	incf	1,f
 21999                           
 22000                           ;flashy_task.c: 309: data->holdCountY = 0;
 22001  0B80  085E               	movf	flashy_Main@data,w
 22002  0B81  0086               	movwf	6
 22003  0B82  085F               	movf	flashy_Main@data+1,w
 22004  0B83  0087               	movwf	7
 22005  0B84  3150               	addfsr 1,16
 22006  0B85  3000               	movlw	0
 22007  0B86  3FC0               	movwi [0]fsr1
 22008  0B87  3FC1               	movwi [1]fsr1
 22009                           
 22010                           ;flashy_task.c: 310: data->holdCountXY = 0;
 22011  0B88  085E               	movf	flashy_Main@data,w
 22012  0B89  0086               	movwf	6
 22013  0B8A  085F               	movf	flashy_Main@data+1,w
 22014  0B8B  0087               	movwf	7
 22015  0B8C  3152               	addfsr 1,18
 22016  0B8D  3000               	movlw	0
 22017  0B8E  3FC0               	movwi [0]fsr1
 22018  0B8F  3FC1               	movwi [1]fsr1
 22019                           
 22020                           ;flashy_task.c: 311: data->holdCountAY = 0;
 22021  0B90  085E               	movf	flashy_Main@data,w
 22022  0B91  0086               	movwf	6
 22023  0B92  085F               	movf	flashy_Main@data+1,w
 22024  0B93  0087               	movwf	7
 22025  0B94  3154               	addfsr 1,20
 22026  0B95  3000               	movlw	0
 22027  0B96  3FC0               	movwi [0]fsr1
 22028  0B97  3FC1               	movwi [1]fsr1
 22029                           
 22030                           ;flashy_task.c: 312: data->holdCountAX += 1;
 22031  0B98  085E               	movf	flashy_Main@data,w
 22032  0B99  0086               	movwf	6
 22033  0B9A  085F               	movf	flashy_Main@data+1,w
 22034  0B9B  0087               	movwf	7
 22035  0B9C  3156               	addfsr 1,22
 22036  0B9D  3001               	movlw	1
 22037  0B9E  0781               	addwf	1,f
 22038  0B9F  3141               	addfsr 1,1
 22039  0BA0  1803               	skipnc
 22040  0BA1  0A81               	incf	1,f
 22041                           
 22042                           ;flashy_task.c: 313: data->holdCountBX = 0;
 22043  0BA2  085E               	movf	flashy_Main@data,w
 22044  0BA3  0086               	movwf	6
 22045  0BA4  085F               	movf	flashy_Main@data+1,w
 22046  0BA5  0087               	movwf	7
 22047  0BA6  3158               	addfsr 1,24
 22048  0BA7  3000               	movlw	0
 22049  0BA8  3FC0               	movwi [0]fsr1
 22050  0BA9  3FC1               	movwi [1]fsr1
 22051                           
 22052                           ;flashy_task.c: 314: data->holdCountBY = 0;
 22053  0BAA  085E               	movf	flashy_Main@data,w
 22054  0BAB  0086               	movwf	6
 22055  0BAC  085F               	movf	flashy_Main@data+1,w
 22056  0BAD  0087               	movwf	7
 22057  0BAE  315A               	addfsr 1,26
 22058  0BAF  3000               	movlw	0
 22059  0BB0  3FC0               	movwi [0]fsr1
 22060  0BB1  3FC1               	movwi [1]fsr1
 22061                           
 22062                           ;flashy_task.c: 315: data->noholdCount = 0;
 22063  0BB2  085E               	movf	flashy_Main@data,w
 22064  0BB3  0086               	movwf	6
 22065  0BB4  085F               	movf	flashy_Main@data+1,w
 22066  0BB5  0087               	movwf	7
 22067  0BB6  315C               	addfsr 1,28
 22068  0BB7  3000               	movlw	0
 22069  0BB8  3FC0               	movwi [0]fsr1
 22070  0BB9  3FC1               	movwi [1]fsr1
 22071                           
 22072                           ;flashy_task.c: 316: break;
 22073  0BBA  2FC9               	goto	l9567
 22074  0BBB                     l9355:	
 22075                           ;flashy_task.c: 317: case 2 | 8:
 22076                           
 22077                           
 22078                           ;flashy_task.c: 318: if (data->holdCountBY == 0){
 22079  0BBB  085E               	movf	flashy_Main@data,w
 22080  0BBC  0086               	movwf	6
 22081  0BBD  085F               	movf	flashy_Main@data+1,w
 22082  0BBE  0087               	movwf	7
 22083  0BBF  315A               	addfsr 1,26
 22084  0BC0  0016               	moviw fsr1++
 22085  0BC1  0401               	iorwf	1,w
 22086  0BC2  1D03               	btfss	3,2
 22087  0BC3  2BD8               	goto	l9365
 22088                           
 22089                           ;flashy_task.c: 319: if (flashy_option_idx == 0){
 22090  0BC4  0021               	movlb	1	; select bank1
 22091  0BC5  0828               	movf	_flashy_option_idx^(0+128),w
 22092  0BC6  0429               	iorwf	(_flashy_option_idx+1)^(0+128),w
 22093  0BC7  1903               	btfsc	3,2
 22094  0BC8  2BD8               	goto	l9365
 22095                           
 22096                           ;flashy_task.c: 322: else {
 22097                           ;flashy_task.c: 323: if (flashy_scroll_rate > 150){
 22098                           
 22099                           ;flashy_task.c: 321: }
 22100  0BC9  3000               	movlw	0
 22101  0BCA  022D               	subwf	(_flashy_scroll_rate+1)^(0+128),w
 22102  0BCB  3097               	movlw	151
 22103  0BCC  1903               	skipnz
 22104  0BCD  022C               	subwf	_flashy_scroll_rate^(0+128),w
 22105  0BCE  1C03               	skipc
 22106  0BCF  2BD4               	goto	l1155
 22107                           
 22108                           ;flashy_task.c: 324: flashy_scroll_rate =150;
 22109  0BD0  3096               	movlw	150
 22110  0BD1  00AC               	movwf	_flashy_scroll_rate^(0+128)
 22111  0BD2  3000               	movlw	0
 22112  0BD3  00AD               	movwf	(_flashy_scroll_rate^(0+128)+1)
 22113  0BD4                     l1155:	
 22114                           
 22115                           ;flashy_task.c: 325: }
 22116                           ;flashy_task.c: 326: flashy_scroll_rate +=2;
 22117  0BD4  3002               	movlw	2
 22118  0BD5  07AC               	addwf	_flashy_scroll_rate^(0+128),f
 22119  0BD6  3000               	movlw	0
 22120  0BD7  3DAD               	addwfc	(_flashy_scroll_rate+1)^(0+128),f
 22121  0BD8                     l9365:	
 22122                           
 22123                           ;flashy_task.c: 327: }
 22124                           ;flashy_task.c: 329: }
 22125                           ;flashy_task.c: 330: data->holdCountA = 0;
 22126  0BD8  0020               	movlb	0	; select bank0
 22127  0BD9  085E               	movf	flashy_Main@data,w
 22128  0BDA  0086               	movwf	6
 22129  0BDB  085F               	movf	flashy_Main@data+1,w
 22130  0BDC  0087               	movwf	7
 22131  0BDD  314A               	addfsr 1,10
 22132  0BDE  3000               	movlw	0
 22133  0BDF  3FC0               	movwi [0]fsr1
 22134  0BE0  3FC1               	movwi [1]fsr1
 22135                           
 22136                           ;flashy_task.c: 331: data->holdCountB += 1;
 22137  0BE1  085E               	movf	flashy_Main@data,w
 22138  0BE2  0086               	movwf	6
 22139  0BE3  085F               	movf	flashy_Main@data+1,w
 22140  0BE4  0087               	movwf	7
 22141  0BE5  314C               	addfsr 1,12
 22142  0BE6  3001               	movlw	1
 22143  0BE7  0781               	addwf	1,f
 22144  0BE8  3141               	addfsr 1,1
 22145  0BE9  1803               	skipnc
 22146  0BEA  0A81               	incf	1,f
 22147                           
 22148                           ;flashy_task.c: 332: data->holdCountX = 0;
 22149  0BEB  085E               	movf	flashy_Main@data,w
 22150  0BEC  0086               	movwf	6
 22151  0BED  085F               	movf	flashy_Main@data+1,w
 22152  0BEE  0087               	movwf	7
 22153  0BEF  314E               	addfsr 1,14
 22154  0BF0  3000               	movlw	0
 22155  0BF1  3FC0               	movwi [0]fsr1
 22156  0BF2  3FC1               	movwi [1]fsr1
 22157                           
 22158                           ;flashy_task.c: 333: data->holdCountY += 1;
 22159  0BF3  085E               	movf	flashy_Main@data,w
 22160  0BF4  0086               	movwf	6
 22161  0BF5  085F               	movf	flashy_Main@data+1,w
 22162  0BF6  0087               	movwf	7
 22163  0BF7  3150               	addfsr 1,16
 22164  0BF8  3001               	movlw	1
 22165  0BF9  0781               	addwf	1,f
 22166  0BFA  3141               	addfsr 1,1
 22167  0BFB  1803               	skipnc
 22168  0BFC  0A81               	incf	1,f
 22169                           
 22170                           ;flashy_task.c: 334: data->holdCountXY = 0;
 22171  0BFD  085E               	movf	flashy_Main@data,w
 22172  0BFE  0086               	movwf	6
 22173  0BFF  085F               	movf	flashy_Main@data+1,w
 22174  0C00  0087               	movwf	7
 22175  0C01  3152               	addfsr 1,18
 22176  0C02  3000               	movlw	0
 22177  0C03  3FC0               	movwi [0]fsr1
 22178  0C04  3FC1               	movwi [1]fsr1
 22179                           
 22180                           ;flashy_task.c: 335: data->holdCountAY = 0;
 22181  0C05  085E               	movf	flashy_Main@data,w
 22182  0C06  0086               	movwf	6
 22183  0C07  085F               	movf	flashy_Main@data+1,w
 22184  0C08  0087               	movwf	7
 22185  0C09  3154               	addfsr 1,20
 22186  0C0A  3000               	movlw	0
 22187  0C0B  3FC0               	movwi [0]fsr1
 22188  0C0C  3FC1               	movwi [1]fsr1
 22189                           
 22190                           ;flashy_task.c: 336: data->holdCountAX = 0;
 22191  0C0D  085E               	movf	flashy_Main@data,w
 22192  0C0E  0086               	movwf	6
 22193  0C0F  085F               	movf	flashy_Main@data+1,w
 22194  0C10  0087               	movwf	7
 22195  0C11  3156               	addfsr 1,22
 22196  0C12  3000               	movlw	0
 22197  0C13  3FC0               	movwi [0]fsr1
 22198  0C14  3FC1               	movwi [1]fsr1
 22199                           
 22200                           ;flashy_task.c: 337: data->holdCountBX = 0;
 22201  0C15  085E               	movf	flashy_Main@data,w
 22202  0C16  0086               	movwf	6
 22203  0C17  085F               	movf	flashy_Main@data+1,w
 22204  0C18  0087               	movwf	7
 22205  0C19  3158               	addfsr 1,24
 22206  0C1A  3000               	movlw	0
 22207  0C1B  3FC0               	movwi [0]fsr1
 22208  0C1C  3FC1               	movwi [1]fsr1
 22209                           
 22210                           ;flashy_task.c: 338: data->holdCountBY += 1;
 22211  0C1D  085E               	movf	flashy_Main@data,w
 22212  0C1E  0086               	movwf	6
 22213  0C1F  085F               	movf	flashy_Main@data+1,w
 22214  0C20  0087               	movwf	7
 22215  0C21  315A               	addfsr 1,26
 22216  0C22  3001               	movlw	1
 22217  0C23  0781               	addwf	1,f
 22218  0C24  3141               	addfsr 1,1
 22219  0C25  1803               	skipnc
 22220  0C26  0A81               	incf	1,f
 22221                           
 22222                           ;flashy_task.c: 339: data->noholdCount = 0;
 22223  0C27  085E               	movf	flashy_Main@data,w
 22224  0C28  0086               	movwf	6
 22225  0C29  085F               	movf	flashy_Main@data+1,w
 22226  0C2A  0087               	movwf	7
 22227  0C2B  315C               	addfsr 1,28
 22228  0C2C  3000               	movlw	0
 22229  0C2D  3FC0               	movwi [0]fsr1
 22230  0C2E  3FC1               	movwi [1]fsr1
 22231                           
 22232                           ;flashy_task.c: 340: break;
 22233  0C2F  2FC9               	goto	l9567
 22234  0C30                     l9385:	
 22235                           ;flashy_task.c: 341: case 2 | 4:
 22236                           
 22237                           
 22238                           ;flashy_task.c: 342: if (data-> holdCountBX == 0){
 22239  0C30  085E               	movf	flashy_Main@data,w
 22240  0C31  0086               	movwf	6
 22241  0C32  085F               	movf	flashy_Main@data+1,w
 22242  0C33  0087               	movwf	7
 22243  0C34  3158               	addfsr 1,24
 22244  0C35  0016               	moviw fsr1++
 22245  0C36  0401               	iorwf	1,w
 22246  0C37  1D03               	btfss	3,2
 22247  0C38  2C4D               	goto	l9395
 22248                           
 22249                           ;flashy_task.c: 343: if (flashy_option_idx == 0){
 22250  0C39  0021               	movlb	1	; select bank1
 22251  0C3A  0828               	movf	_flashy_option_idx^(0+128),w
 22252  0C3B  0429               	iorwf	(_flashy_option_idx+1)^(0+128),w
 22253  0C3C  1903               	btfsc	3,2
 22254  0C3D  2C4D               	goto	l9395
 22255                           
 22256                           ;flashy_task.c: 346: else {
 22257                           ;flashy_task.c: 347: if (flashy_scroll_rate < 5){
 22258                           
 22259                           ;flashy_task.c: 345: }
 22260  0C3E  3000               	movlw	0
 22261  0C3F  022D               	subwf	(_flashy_scroll_rate+1)^(0+128),w
 22262  0C40  3005               	movlw	5
 22263  0C41  1903               	skipnz
 22264  0C42  022C               	subwf	_flashy_scroll_rate^(0+128),w
 22265  0C43  1803               	skipnc
 22266  0C44  2C49               	goto	l1160
 22267                           
 22268                           ;flashy_task.c: 348: flashy_scroll_rate =5;
 22269  0C45  3005               	movlw	5
 22270  0C46  00AC               	movwf	_flashy_scroll_rate^(0+128)
 22271  0C47  3000               	movlw	0
 22272  0C48  00AD               	movwf	(_flashy_scroll_rate^(0+128)+1)
 22273  0C49                     l1160:	
 22274                           
 22275                           ;flashy_task.c: 349: }
 22276                           ;flashy_task.c: 350: flashy_scroll_rate -=3;
 22277  0C49  3003               	movlw	3
 22278  0C4A  02AC               	subwf	_flashy_scroll_rate^(0+128),f
 22279  0C4B  3000               	movlw	0
 22280  0C4C  3BAD               	subwfb	(_flashy_scroll_rate+1)^(0+128),f
 22281  0C4D                     l9395:	
 22282                           
 22283                           ;flashy_task.c: 351: }
 22284                           ;flashy_task.c: 353: }
 22285                           ;flashy_task.c: 354: data->holdCountA = 0;
 22286  0C4D  0020               	movlb	0	; select bank0
 22287  0C4E  085E               	movf	flashy_Main@data,w
 22288  0C4F  0086               	movwf	6
 22289  0C50  085F               	movf	flashy_Main@data+1,w
 22290  0C51  0087               	movwf	7
 22291  0C52  314A               	addfsr 1,10
 22292  0C53  3000               	movlw	0
 22293  0C54  3FC0               	movwi [0]fsr1
 22294  0C55  3FC1               	movwi [1]fsr1
 22295                           
 22296                           ;flashy_task.c: 355: data->holdCountB += 1;
 22297  0C56  085E               	movf	flashy_Main@data,w
 22298  0C57  0086               	movwf	6
 22299  0C58  085F               	movf	flashy_Main@data+1,w
 22300  0C59  0087               	movwf	7
 22301  0C5A  314C               	addfsr 1,12
 22302  0C5B  3001               	movlw	1
 22303  0C5C  0781               	addwf	1,f
 22304  0C5D  3141               	addfsr 1,1
 22305  0C5E  1803               	skipnc
 22306  0C5F  0A81               	incf	1,f
 22307                           
 22308                           ;flashy_task.c: 356: data->holdCountX += 1;
 22309  0C60  085E               	movf	flashy_Main@data,w
 22310  0C61  0086               	movwf	6
 22311  0C62  085F               	movf	flashy_Main@data+1,w
 22312  0C63  0087               	movwf	7
 22313  0C64  314E               	addfsr 1,14
 22314  0C65  3001               	movlw	1
 22315  0C66  0781               	addwf	1,f
 22316  0C67  3141               	addfsr 1,1
 22317  0C68  1803               	skipnc
 22318  0C69  0A81               	incf	1,f
 22319                           
 22320                           ;flashy_task.c: 357: data->holdCountY = 0;
 22321  0C6A  085E               	movf	flashy_Main@data,w
 22322  0C6B  0086               	movwf	6
 22323  0C6C  085F               	movf	flashy_Main@data+1,w
 22324  0C6D  0087               	movwf	7
 22325  0C6E  3150               	addfsr 1,16
 22326  0C6F  3000               	movlw	0
 22327  0C70  3FC0               	movwi [0]fsr1
 22328  0C71  3FC1               	movwi [1]fsr1
 22329                           
 22330                           ;flashy_task.c: 358: data->holdCountXY = 0;
 22331  0C72  085E               	movf	flashy_Main@data,w
 22332  0C73  0086               	movwf	6
 22333  0C74  085F               	movf	flashy_Main@data+1,w
 22334  0C75  0087               	movwf	7
 22335  0C76  3152               	addfsr 1,18
 22336  0C77  3000               	movlw	0
 22337  0C78  3FC0               	movwi [0]fsr1
 22338  0C79  3FC1               	movwi [1]fsr1
 22339                           
 22340                           ;flashy_task.c: 359: data->holdCountAY = 0;
 22341  0C7A  085E               	movf	flashy_Main@data,w
 22342  0C7B  0086               	movwf	6
 22343  0C7C  085F               	movf	flashy_Main@data+1,w
 22344  0C7D  0087               	movwf	7
 22345  0C7E  3154               	addfsr 1,20
 22346  0C7F  3000               	movlw	0
 22347  0C80  3FC0               	movwi [0]fsr1
 22348  0C81  3FC1               	movwi [1]fsr1
 22349                           
 22350                           ;flashy_task.c: 360: data->holdCountAX = 0;
 22351  0C82  085E               	movf	flashy_Main@data,w
 22352  0C83  0086               	movwf	6
 22353  0C84  085F               	movf	flashy_Main@data+1,w
 22354  0C85  0087               	movwf	7
 22355  0C86  3156               	addfsr 1,22
 22356  0C87  3000               	movlw	0
 22357  0C88  3FC0               	movwi [0]fsr1
 22358  0C89  3FC1               	movwi [1]fsr1
 22359                           
 22360                           ;flashy_task.c: 361: data->holdCountBX += 1;
 22361  0C8A  085E               	movf	flashy_Main@data,w
 22362  0C8B  0086               	movwf	6
 22363  0C8C  085F               	movf	flashy_Main@data+1,w
 22364  0C8D  0087               	movwf	7
 22365  0C8E  3158               	addfsr 1,24
 22366  0C8F  3001               	movlw	1
 22367  0C90  0781               	addwf	1,f
 22368  0C91  3141               	addfsr 1,1
 22369  0C92  1803               	skipnc
 22370  0C93  0A81               	incf	1,f
 22371                           
 22372                           ;flashy_task.c: 362: data->holdCountBY = 0;
 22373  0C94  085E               	movf	flashy_Main@data,w
 22374  0C95  0086               	movwf	6
 22375  0C96  085F               	movf	flashy_Main@data+1,w
 22376  0C97  0087               	movwf	7
 22377  0C98  315A               	addfsr 1,26
 22378  0C99  3000               	movlw	0
 22379  0C9A  3FC0               	movwi [0]fsr1
 22380  0C9B  3FC1               	movwi [1]fsr1
 22381                           
 22382                           ;flashy_task.c: 363: data->noholdCount = 0;
 22383  0C9C  085E               	movf	flashy_Main@data,w
 22384  0C9D  0086               	movwf	6
 22385  0C9E  085F               	movf	flashy_Main@data+1,w
 22386  0C9F  0087               	movwf	7
 22387  0CA0  315C               	addfsr 1,28
 22388  0CA1  3000               	movlw	0
 22389  0CA2  3FC0               	movwi [0]fsr1
 22390  0CA3  3FC1               	movwi [1]fsr1
 22391                           
 22392                           ;flashy_task.c: 364: break;
 22393  0CA4  2FC9               	goto	l9567
 22394  0CA5                     l9415:	
 22395                           ;flashy_task.c: 365: case 8:
 22396                           
 22397                           
 22398                           ;flashy_task.c: 367: if (data->holdCountY == 0 && data->blasterTickCount == 0){
 22399  0CA5  085E               	movf	flashy_Main@data,w
 22400  0CA6  0086               	movwf	6
 22401  0CA7  085F               	movf	flashy_Main@data+1,w
 22402  0CA8  0087               	movwf	7
 22403  0CA9  3150               	addfsr 1,16
 22404  0CAA  0016               	moviw fsr1++
 22405  0CAB  0401               	iorwf	1,w
 22406  0CAC  1D03               	btfss	3,2
 22407  0CAD  2CFB               	goto	l9433
 22408  0CAE  085E               	movf	flashy_Main@data,w
 22409  0CAF  0086               	movwf	6
 22410  0CB0  085F               	movf	flashy_Main@data+1,w
 22411  0CB1  0087               	movwf	7
 22412  0CB2  3147               	addfsr 1,7
 22413  0CB3  0016               	moviw fsr1++
 22414  0CB4  0401               	iorwf	1,w
 22415  0CB5  1D03               	btfss	3,2
 22416  0CB6  2CFB               	goto	l9433
 22417                           
 22418                           ;flashy_task.c: 369: nullifyBadge_userLedsSet(data->badge, 0x0);
 22419  0CB7  3000               	movlw	0
 22420  0CB8  00AD               	movwf	nullifyBadge_userLedsSet@userLedData
 22421  0CB9  00AE               	movwf	nullifyBadge_userLedsSet@userLedData+1
 22422  0CBA  085E               	movf	flashy_Main@data,w
 22423  0CBB  0086               	movwf	6
 22424  0CBC  085F               	movf	flashy_Main@data+1,w
 22425  0CBD  0087               	movwf	7
 22426  0CBE  0801               	movf	1,w
 22427  0CBF  31B2  22F9  3188   	fcall	_nullifyBadge_userLedsSet
 22428                           
 22429                           ;flashy_task.c: 371: data->displayTickCount = 0;
 22430  0CC2  0020               	movlb	0	; select bank0
 22431  0CC3  085E               	movf	flashy_Main@data,w
 22432  0CC4  0086               	movwf	6
 22433  0CC5  085F               	movf	flashy_Main@data+1,w
 22434  0CC6  0087               	movwf	7
 22435  0CC7  3144               	addfsr 1,4
 22436  0CC8  3000               	movlw	0
 22437  0CC9  3FC0               	movwi [0]fsr1
 22438  0CCA  3FC1               	movwi [1]fsr1
 22439                           
 22440                           ;flashy_task.c: 372: data->blasterTickCount = 100;
 22441  0CCB  085E               	movf	flashy_Main@data,w
 22442  0CCC  0086               	movwf	6
 22443  0CCD  085F               	movf	flashy_Main@data+1,w
 22444  0CCE  0087               	movwf	7
 22445  0CCF  3147               	addfsr 1,7
 22446  0CD0  3064               	movlw	100
 22447  0CD1  3FC0               	movwi [0]fsr1
 22448  0CD2  3000               	movlw	0
 22449  0CD3  3FC1               	movwi [1]fsr1
 22450                           
 22451                           ;flashy_task.c: 373: data->delayTickCount = 5;
 22452  0CD4  085E               	movf	flashy_Main@data,w
 22453  0CD5  0086               	movwf	6
 22454  0CD6  085F               	movf	flashy_Main@data+1,w
 22455  0CD7  0087               	movwf	7
 22456  0CD8  3141               	addfsr 1,1
 22457  0CD9  3005               	movlw	5
 22458  0CDA  3FC0               	movwi [0]fsr1
 22459  0CDB  3000               	movlw	0
 22460  0CDC  3FC1               	movwi [1]fsr1
 22461                           
 22462                           ;flashy_task.c: 375: data->led_state = FLASHY_STATE_LED_SHOT;
 22463  0CDD  085E               	movf	flashy_Main@data,w
 22464  0CDE  3E03               	addlw	3
 22465  0CDF  00D4               	movwf	??_flashy_Main
 22466  0CE0  3000               	movlw	0
 22467  0CE1  3D5F               	addwfc	flashy_Main@data+1,w
 22468  0CE2  00D5               	movwf	??_flashy_Main+1
 22469  0CE3  0854               	movf	??_flashy_Main,w
 22470  0CE4  0086               	movwf	6
 22471  0CE5  0855               	movf	??_flashy_Main+1,w
 22472  0CE6  0087               	movwf	7
 22473  0CE7  3001               	movlw	1
 22474  0CE8  0081               	movwf	1
 22475                           
 22476                           ;flashy_task.c: 376: data->display_state = FLASHY_STATE_DISPLAY_BLASTER;
 22477  0CE9  085E               	movf	flashy_Main@data,w
 22478  0CEA  3E06               	addlw	6
 22479  0CEB  00D4               	movwf	??_flashy_Main
 22480  0CEC  3000               	movlw	0
 22481  0CED  3D5F               	addwfc	flashy_Main@data+1,w
 22482  0CEE  00D5               	movwf	??_flashy_Main+1
 22483  0CEF  0854               	movf	??_flashy_Main,w
 22484  0CF0  0086               	movwf	6
 22485  0CF1  0855               	movf	??_flashy_Main+1,w
 22486  0CF2  0087               	movwf	7
 22487  0CF3  3002               	movlw	2
 22488  0CF4  0081               	movwf	1
 22489                           
 22490                           ;flashy_task.c: 377: data->blaster_state = FLASHY_BLASTER_SHOOTING_STATE;
 22491  0CF5  085E               	movf	flashy_Main@data,w
 22492  0CF6  0086               	movwf	6
 22493  0CF7  085F               	movf	flashy_Main@data+1,w
 22494  0CF8  0087               	movwf	7
 22495  0CF9  3149               	addfsr 1,9
 22496  0CFA  0181               	clrf	1
 22497  0CFB                     l9433:	
 22498                           
 22499                           ;flashy_task.c: 378: }
 22500                           ;flashy_task.c: 380: data->holdCountA = 0;
 22501  0CFB  085E               	movf	flashy_Main@data,w
 22502  0CFC  0086               	movwf	6
 22503  0CFD  085F               	movf	flashy_Main@data+1,w
 22504  0CFE  0087               	movwf	7
 22505  0CFF  314A               	addfsr 1,10
 22506  0D00  3000               	movlw	0
 22507  0D01  3FC0               	movwi [0]fsr1
 22508  0D02  3FC1               	movwi [1]fsr1
 22509                           
 22510                           ;flashy_task.c: 381: data->holdCountB = 0;
 22511  0D03  085E               	movf	flashy_Main@data,w
 22512  0D04  0086               	movwf	6
 22513  0D05  085F               	movf	flashy_Main@data+1,w
 22514  0D06  0087               	movwf	7
 22515  0D07  314C               	addfsr 1,12
 22516  0D08  3000               	movlw	0
 22517  0D09  3FC0               	movwi [0]fsr1
 22518  0D0A  3FC1               	movwi [1]fsr1
 22519                           
 22520                           ;flashy_task.c: 382: data->holdCountX = 0;
 22521  0D0B  085E               	movf	flashy_Main@data,w
 22522  0D0C  0086               	movwf	6
 22523  0D0D  085F               	movf	flashy_Main@data+1,w
 22524  0D0E  0087               	movwf	7
 22525  0D0F  314E               	addfsr 1,14
 22526  0D10  3000               	movlw	0
 22527  0D11  3FC0               	movwi [0]fsr1
 22528  0D12  3FC1               	movwi [1]fsr1
 22529                           
 22530                           ;flashy_task.c: 383: data->holdCountY += 1;
 22531  0D13  085E               	movf	flashy_Main@data,w
 22532  0D14  0086               	movwf	6
 22533  0D15  085F               	movf	flashy_Main@data+1,w
 22534  0D16  0087               	movwf	7
 22535  0D17  3150               	addfsr 1,16
 22536  0D18  3001               	movlw	1
 22537  0D19  0781               	addwf	1,f
 22538  0D1A  3141               	addfsr 1,1
 22539  0D1B  1803               	skipnc
 22540  0D1C  0A81               	incf	1,f
 22541                           
 22542                           ;flashy_task.c: 384: data->holdCountXY = 0;
 22543  0D1D  085E               	movf	flashy_Main@data,w
 22544  0D1E  0086               	movwf	6
 22545  0D1F  085F               	movf	flashy_Main@data+1,w
 22546  0D20  0087               	movwf	7
 22547  0D21  3152               	addfsr 1,18
 22548  0D22  3000               	movlw	0
 22549  0D23  3FC0               	movwi [0]fsr1
 22550  0D24  3FC1               	movwi [1]fsr1
 22551                           
 22552                           ;flashy_task.c: 385: data->holdCountAY = 0;
 22553  0D25  085E               	movf	flashy_Main@data,w
 22554  0D26  0086               	movwf	6
 22555  0D27  085F               	movf	flashy_Main@data+1,w
 22556  0D28  0087               	movwf	7
 22557  0D29  3154               	addfsr 1,20
 22558  0D2A  3000               	movlw	0
 22559  0D2B  3FC0               	movwi [0]fsr1
 22560  0D2C  3FC1               	movwi [1]fsr1
 22561                           
 22562                           ;flashy_task.c: 386: data->holdCountAX = 0;
 22563  0D2D  085E               	movf	flashy_Main@data,w
 22564  0D2E  0086               	movwf	6
 22565  0D2F  085F               	movf	flashy_Main@data+1,w
 22566  0D30  0087               	movwf	7
 22567  0D31  3156               	addfsr 1,22
 22568  0D32  3000               	movlw	0
 22569  0D33  3FC0               	movwi [0]fsr1
 22570  0D34  3FC1               	movwi [1]fsr1
 22571                           
 22572                           ;flashy_task.c: 387: data->holdCountBX = 0;
 22573  0D35  085E               	movf	flashy_Main@data,w
 22574  0D36  0086               	movwf	6
 22575  0D37  085F               	movf	flashy_Main@data+1,w
 22576  0D38  0087               	movwf	7
 22577  0D39  3158               	addfsr 1,24
 22578  0D3A  3000               	movlw	0
 22579  0D3B  3FC0               	movwi [0]fsr1
 22580  0D3C  3FC1               	movwi [1]fsr1
 22581                           
 22582                           ;flashy_task.c: 388: data->holdCountBY = 0;
 22583  0D3D  085E               	movf	flashy_Main@data,w
 22584  0D3E  0086               	movwf	6
 22585  0D3F  085F               	movf	flashy_Main@data+1,w
 22586  0D40  0087               	movwf	7
 22587  0D41  315A               	addfsr 1,26
 22588  0D42  3000               	movlw	0
 22589  0D43  3FC0               	movwi [0]fsr1
 22590  0D44  3FC1               	movwi [1]fsr1
 22591                           
 22592                           ;flashy_task.c: 389: data->noholdCount = 0;
 22593  0D45  085E               	movf	flashy_Main@data,w
 22594  0D46  0086               	movwf	6
 22595  0D47  085F               	movf	flashy_Main@data+1,w
 22596  0D48  0087               	movwf	7
 22597  0D49  315C               	addfsr 1,28
 22598  0D4A  3000               	movlw	0
 22599  0D4B  3FC0               	movwi [0]fsr1
 22600  0D4C  3FC1               	movwi [1]fsr1
 22601                           
 22602                           ;flashy_task.c: 390: break;
 22603  0D4D  2FC9               	goto	l9567
 22604  0D4E                     l9453:	
 22605                           ;flashy_task.c: 391: case 2:
 22606                           
 22607                           
 22608                           ;flashy_task.c: 393: if (data->holdCountB == 0){
 22609  0D4E  085E               	movf	flashy_Main@data,w
 22610  0D4F  0086               	movwf	6
 22611  0D50  085F               	movf	flashy_Main@data+1,w
 22612  0D51  0087               	movwf	7
 22613  0D52  314C               	addfsr 1,12
 22614  0D53  0016               	moviw fsr1++
 22615  0D54  0401               	iorwf	1,w
 22616  0D55  1D03               	btfss	3,2
 22617  0D56  2D7C               	goto	l9463
 22618                           
 22619                           ;flashy_task.c: 394: data->display_state = FLASHY_STATE_DISPLAY;
 22620  0D57  085E               	movf	flashy_Main@data,w
 22621  0D58  0086               	movwf	6
 22622  0D59  085F               	movf	flashy_Main@data+1,w
 22623  0D5A  0087               	movwf	7
 22624  0D5B  3146               	addfsr 1,6
 22625  0D5C  0181               	clrf	1
 22626                           
 22627                           ;flashy_task.c: 395: if (flashy_option_idx == flashy_option_size - 1){
 22628  0D5D  0021               	movlb	1	; select bank1
 22629  0D5E  0826               	movf	_flashy_option_size^(0+128),w
 22630  0D5F  3EFF               	addlw	255
 22631  0D60  0020               	movlb	0	; select bank0
 22632  0D61  00D4               	movwf	??_flashy_Main
 22633  0D62  30FF               	movlw	255
 22634  0D63  0021               	movlb	1	; select bank1
 22635  0D64  3D27               	addwfc	(_flashy_option_size+1)^(0+128),w
 22636  0D65  0020               	movlb	0	; select bank0
 22637  0D66  00D5               	movwf	??_flashy_Main+1
 22638  0D67  0021               	movlb	1	; select bank1
 22639  0D68  0829               	movf	(_flashy_option_idx+1)^(0+128),w
 22640  0D69  0020               	movlb	0	; select bank0
 22641  0D6A  0655               	xorwf	??_flashy_Main+1,w
 22642  0D6B  1D03               	skipz
 22643  0D6C  2D71               	goto	u5945
 22644  0D6D  0021               	movlb	1	; select bank1
 22645  0D6E  0828               	movf	_flashy_option_idx^(0+128),w
 22646  0D6F  0020               	movlb	0	; select bank0
 22647  0D70  0654               	xorwf	??_flashy_Main,w
 22648  0D71                     u5945:	
 22649  0D71  1D03               	skipz
 22650  0D72  2D77               	goto	l9461
 22651                           
 22652                           ;flashy_task.c: 396: flashy_option_idx = 0;
 22653  0D73  0021               	movlb	1	; select bank1
 22654  0D74  01A8               	clrf	_flashy_option_idx^(0+128)
 22655  0D75  01A9               	clrf	(_flashy_option_idx+1)^(0+128)
 22656                           
 22657                           ;flashy_task.c: 397: }
 22658  0D76  2D7C               	goto	l9463
 22659  0D77                     l9461:	
 22660                           
 22661                           ;flashy_task.c: 398: else {
 22662                           ;flashy_task.c: 399: flashy_option_idx += 1;
 22663  0D77  3001               	movlw	1
 22664  0D78  0021               	movlb	1	; select bank1
 22665  0D79  07A8               	addwf	_flashy_option_idx^(0+128),f
 22666  0D7A  3000               	movlw	0
 22667  0D7B  3DA9               	addwfc	(_flashy_option_idx+1)^(0+128),f
 22668  0D7C                     l9463:	
 22669                           
 22670                           ;flashy_task.c: 400: }
 22671                           ;flashy_task.c: 401: }
 22672                           ;flashy_task.c: 402: data->holdCountA = 0;
 22673  0D7C  0020               	movlb	0	; select bank0
 22674  0D7D  085E               	movf	flashy_Main@data,w
 22675  0D7E  0086               	movwf	6
 22676  0D7F  085F               	movf	flashy_Main@data+1,w
 22677  0D80  0087               	movwf	7
 22678  0D81  314A               	addfsr 1,10
 22679  0D82  3000               	movlw	0
 22680  0D83  3FC0               	movwi [0]fsr1
 22681  0D84  3FC1               	movwi [1]fsr1
 22682                           
 22683                           ;flashy_task.c: 403: data->holdCountB += 1;
 22684  0D85  085E               	movf	flashy_Main@data,w
 22685  0D86  0086               	movwf	6
 22686  0D87  085F               	movf	flashy_Main@data+1,w
 22687  0D88  0087               	movwf	7
 22688  0D89  314C               	addfsr 1,12
 22689  0D8A  3001               	movlw	1
 22690  0D8B  0781               	addwf	1,f
 22691  0D8C  3141               	addfsr 1,1
 22692  0D8D  1803               	skipnc
 22693  0D8E  0A81               	incf	1,f
 22694                           
 22695                           ;flashy_task.c: 404: data->holdCountX = 0;
 22696  0D8F  085E               	movf	flashy_Main@data,w
 22697  0D90  0086               	movwf	6
 22698  0D91  085F               	movf	flashy_Main@data+1,w
 22699  0D92  0087               	movwf	7
 22700  0D93  314E               	addfsr 1,14
 22701  0D94  3000               	movlw	0
 22702  0D95  3FC0               	movwi [0]fsr1
 22703  0D96  3FC1               	movwi [1]fsr1
 22704                           
 22705                           ;flashy_task.c: 405: data->holdCountY = 0;
 22706  0D97  085E               	movf	flashy_Main@data,w
 22707  0D98  0086               	movwf	6
 22708  0D99  085F               	movf	flashy_Main@data+1,w
 22709  0D9A  0087               	movwf	7
 22710  0D9B  3150               	addfsr 1,16
 22711  0D9C  3000               	movlw	0
 22712  0D9D  3FC0               	movwi [0]fsr1
 22713  0D9E  3FC1               	movwi [1]fsr1
 22714                           
 22715                           ;flashy_task.c: 406: data->holdCountXY = 0;
 22716  0D9F  085E               	movf	flashy_Main@data,w
 22717  0DA0  0086               	movwf	6
 22718  0DA1  085F               	movf	flashy_Main@data+1,w
 22719  0DA2  0087               	movwf	7
 22720  0DA3  3152               	addfsr 1,18
 22721  0DA4  3000               	movlw	0
 22722  0DA5  3FC0               	movwi [0]fsr1
 22723  0DA6  3FC1               	movwi [1]fsr1
 22724                           
 22725                           ;flashy_task.c: 407: data->holdCountAY = 0;
 22726  0DA7  085E               	movf	flashy_Main@data,w
 22727  0DA8  0086               	movwf	6
 22728  0DA9  085F               	movf	flashy_Main@data+1,w
 22729  0DAA  0087               	movwf	7
 22730  0DAB  3154               	addfsr 1,20
 22731  0DAC  3000               	movlw	0
 22732  0DAD  3FC0               	movwi [0]fsr1
 22733  0DAE  3FC1               	movwi [1]fsr1
 22734                           
 22735                           ;flashy_task.c: 408: data->holdCountAX = 0;
 22736  0DAF  085E               	movf	flashy_Main@data,w
 22737  0DB0  0086               	movwf	6
 22738  0DB1  085F               	movf	flashy_Main@data+1,w
 22739  0DB2  0087               	movwf	7
 22740  0DB3  3156               	addfsr 1,22
 22741  0DB4  3000               	movlw	0
 22742  0DB5  3FC0               	movwi [0]fsr1
 22743  0DB6  3FC1               	movwi [1]fsr1
 22744                           
 22745                           ;flashy_task.c: 409: data->holdCountBX = 0;
 22746  0DB7  085E               	movf	flashy_Main@data,w
 22747  0DB8  0086               	movwf	6
 22748  0DB9  085F               	movf	flashy_Main@data+1,w
 22749  0DBA  0087               	movwf	7
 22750  0DBB  3158               	addfsr 1,24
 22751  0DBC  3000               	movlw	0
 22752  0DBD  3FC0               	movwi [0]fsr1
 22753  0DBE  3FC1               	movwi [1]fsr1
 22754                           
 22755                           ;flashy_task.c: 410: data->holdCountBY = 0;
 22756  0DBF  085E               	movf	flashy_Main@data,w
 22757  0DC0  0086               	movwf	6
 22758  0DC1  085F               	movf	flashy_Main@data+1,w
 22759  0DC2  0087               	movwf	7
 22760  0DC3  315A               	addfsr 1,26
 22761  0DC4  3000               	movlw	0
 22762  0DC5  3FC0               	movwi [0]fsr1
 22763  0DC6  3FC1               	movwi [1]fsr1
 22764                           
 22765                           ;flashy_task.c: 411: data->noholdCount = 0;
 22766  0DC7  085E               	movf	flashy_Main@data,w
 22767  0DC8  0086               	movwf	6
 22768  0DC9  085F               	movf	flashy_Main@data+1,w
 22769  0DCA  0087               	movwf	7
 22770  0DCB  315C               	addfsr 1,28
 22771  0DCC  3000               	movlw	0
 22772  0DCD  3FC0               	movwi [0]fsr1
 22773  0DCE  3FC1               	movwi [1]fsr1
 22774                           
 22775                           ;flashy_task.c: 412: break;
 22776  0DCF  2FC9               	goto	l9567
 22777  0DD0                     l9483:	
 22778                           ;flashy_task.c: 413: case 1:
 22779                           
 22780                           
 22781                           ;flashy_task.c: 414: if ( data->holdCountA == 0){
 22782  0DD0  085E               	movf	flashy_Main@data,w
 22783  0DD1  0086               	movwf	6
 22784  0DD2  085F               	movf	flashy_Main@data+1,w
 22785  0DD3  0087               	movwf	7
 22786  0DD4  314A               	addfsr 1,10
 22787  0DD5  0016               	moviw fsr1++
 22788  0DD6  0401               	iorwf	1,w
 22789  0DD7  1D03               	btfss	3,2
 22790  0DD8  2E3E               	goto	l9511
 22791                           
 22792                           ;flashy_task.c: 417: if (flashy_leds_state_track > 4){
 22793  0DD9  3000               	movlw	0
 22794  0DDA  0021               	movlb	1	; select bank1
 22795  0DDB  0231               	subwf	(_flashy_leds_state_track+1)^(0+128),w
 22796  0DDC  3005               	movlw	5
 22797  0DDD  1903               	skipnz
 22798  0DDE  0230               	subwf	_flashy_leds_state_track^(0+128),w
 22799  0DDF  1C03               	skipc
 22800  0DE0  2DE3               	goto	l9489
 22801                           
 22802                           ;flashy_task.c: 418: flashy_leds_state_track=0;
 22803  0DE1  01B0               	clrf	_flashy_leds_state_track^(0+128)
 22804  0DE2  01B1               	clrf	(_flashy_leds_state_track+1)^(0+128)
 22805  0DE3                     l9489:	
 22806                           
 22807                           ;flashy_task.c: 419: }
 22808                           ;flashy_task.c: 420: if (flashy_leds_state_track== 0){
 22809  0DE3  0830               	movf	_flashy_leds_state_track^(0+128),w
 22810  0DE4  0431               	iorwf	(_flashy_leds_state_track+1)^(0+128),w
 22811  0DE5  1D03               	btfss	3,2
 22812  0DE6  2DF4               	goto	l9493
 22813                           
 22814                           ;flashy_task.c: 421: data->led_state = FLASHY_STATE_LED_ALT;
 22815  0DE7  0020               	movlb	0	; select bank0
 22816  0DE8  085E               	movf	flashy_Main@data,w
 22817  0DE9  3E03               	addlw	3
 22818  0DEA  00D4               	movwf	??_flashy_Main
 22819  0DEB  3000               	movlw	0
 22820  0DEC  3D5F               	addwfc	flashy_Main@data+1,w
 22821  0DED  00D5               	movwf	??_flashy_Main+1
 22822  0DEE  0854               	movf	??_flashy_Main,w
 22823  0DEF  0086               	movwf	6
 22824  0DF0  0855               	movf	??_flashy_Main+1,w
 22825  0DF1  0087               	movwf	7
 22826  0DF2  3004               	movlw	4
 22827  0DF3  0081               	movwf	1
 22828  0DF4                     l9493:	
 22829                           
 22830                           ;flashy_task.c: 422: }
 22831                           ;flashy_task.c: 423: if (flashy_leds_state_track ==1){
 22832  0DF4  0021               	movlb	1	; select bank1
 22833  0DF5  0330               	decf	_flashy_leds_state_track^(0+128),w
 22834  0DF6  0431               	iorwf	(_flashy_leds_state_track+1)^(0+128),w
 22835  0DF7  1D03               	btfss	3,2
 22836  0DF8  2E06               	goto	l9497
 22837                           
 22838                           ;flashy_task.c: 424: data->led_state = FLASHY_STATE_SPARKLE;
 22839  0DF9  0020               	movlb	0	; select bank0
 22840  0DFA  085E               	movf	flashy_Main@data,w
 22841  0DFB  3E03               	addlw	3
 22842  0DFC  00D4               	movwf	??_flashy_Main
 22843  0DFD  3000               	movlw	0
 22844  0DFE  3D5F               	addwfc	flashy_Main@data+1,w
 22845  0DFF  00D5               	movwf	??_flashy_Main+1
 22846  0E00  0854               	movf	??_flashy_Main,w
 22847  0E01  0086               	movwf	6
 22848  0E02  0855               	movf	??_flashy_Main+1,w
 22849  0E03  0087               	movwf	7
 22850  0E04  3002               	movlw	2
 22851  0E05  0081               	movwf	1
 22852  0E06                     l9497:	
 22853                           
 22854                           ;flashy_task.c: 425: }
 22855                           ;flashy_task.c: 426: if (flashy_leds_state_track == 2){
 22856  0E06  3002               	movlw	2
 22857  0E07  0021               	movlb	1	; select bank1
 22858  0E08  0630               	xorwf	_flashy_leds_state_track^(0+128),w
 22859  0E09  0431               	iorwf	(_flashy_leds_state_track+1)^(0+128),w
 22860  0E0A  1D03               	btfss	3,2
 22861  0E0B  2E19               	goto	l9501
 22862                           
 22863                           ;flashy_task.c: 427: data->led_state = FLASHY_STATE_CIRCLE;
 22864  0E0C  0020               	movlb	0	; select bank0
 22865  0E0D  085E               	movf	flashy_Main@data,w
 22866  0E0E  3E03               	addlw	3
 22867  0E0F  00D4               	movwf	??_flashy_Main
 22868  0E10  3000               	movlw	0
 22869  0E11  3D5F               	addwfc	flashy_Main@data+1,w
 22870  0E12  00D5               	movwf	??_flashy_Main+1
 22871  0E13  0854               	movf	??_flashy_Main,w
 22872  0E14  0086               	movwf	6
 22873  0E15  0855               	movf	??_flashy_Main+1,w
 22874  0E16  0087               	movwf	7
 22875  0E17  3003               	movlw	3
 22876  0E18  0081               	movwf	1
 22877  0E19                     l9501:	
 22878                           
 22879                           ;flashy_task.c: 428: }
 22880                           ;flashy_task.c: 429: if (flashy_leds_state_track == 3){
 22881  0E19  3003               	movlw	3
 22882  0E1A  0021               	movlb	1	; select bank1
 22883  0E1B  0630               	xorwf	_flashy_leds_state_track^(0+128),w
 22884  0E1C  0431               	iorwf	(_flashy_leds_state_track+1)^(0+128),w
 22885  0E1D  1D03               	btfss	3,2
 22886  0E1E  2E26               	goto	l9505
 22887                           
 22888                           ;flashy_task.c: 430: data->led_state = FLASHY_STATE_LED_ROUNDABOUT;
 22889  0E1F  0020               	movlb	0	; select bank0
 22890  0E20  085E               	movf	flashy_Main@data,w
 22891  0E21  0086               	movwf	6
 22892  0E22  085F               	movf	flashy_Main@data+1,w
 22893  0E23  0087               	movwf	7
 22894  0E24  3143               	addfsr 1,3
 22895  0E25  0181               	clrf	1
 22896  0E26                     l9505:	
 22897                           
 22898                           ;flashy_task.c: 431: }
 22899                           ;flashy_task.c: 432: if (flashy_leds_state_track ==4 ){
 22900  0E26  3004               	movlw	4
 22901  0E27  0021               	movlb	1	; select bank1
 22902  0E28  0630               	xorwf	_flashy_leds_state_track^(0+128),w
 22903  0E29  0431               	iorwf	(_flashy_leds_state_track+1)^(0+128),w
 22904  0E2A  1D03               	btfss	3,2
 22905  0E2B  2E39               	goto	l9509
 22906                           
 22907                           ;flashy_task.c: 433: data->led_state = FLASHY_STATE_LED_PARODY;
 22908  0E2C  0020               	movlb	0	; select bank0
 22909  0E2D  085E               	movf	flashy_Main@data,w
 22910  0E2E  3E03               	addlw	3
 22911  0E2F  00D4               	movwf	??_flashy_Main
 22912  0E30  3000               	movlw	0
 22913  0E31  3D5F               	addwfc	flashy_Main@data+1,w
 22914  0E32  00D5               	movwf	??_flashy_Main+1
 22915  0E33  0854               	movf	??_flashy_Main,w
 22916  0E34  0086               	movwf	6
 22917  0E35  0855               	movf	??_flashy_Main+1,w
 22918  0E36  0087               	movwf	7
 22919  0E37  3005               	movlw	5
 22920  0E38  0081               	movwf	1
 22921  0E39                     l9509:	
 22922                           
 22923                           ;flashy_task.c: 434: }
 22924                           ;flashy_task.c: 435: flashy_leds_state_track +=1;
 22925  0E39  3001               	movlw	1
 22926  0E3A  0021               	movlb	1	; select bank1
 22927  0E3B  07B0               	addwf	_flashy_leds_state_track^(0+128),f
 22928  0E3C  3000               	movlw	0
 22929  0E3D  3DB1               	addwfc	(_flashy_leds_state_track+1)^(0+128),f
 22930  0E3E                     l9511:	
 22931                           
 22932                           ;flashy_task.c: 436: }
 22933                           ;flashy_task.c: 438: data->holdCountA += 1;
 22934  0E3E  0020               	movlb	0	; select bank0
 22935  0E3F  085E               	movf	flashy_Main@data,w
 22936  0E40  0086               	movwf	6
 22937  0E41  085F               	movf	flashy_Main@data+1,w
 22938  0E42  0087               	movwf	7
 22939  0E43  314A               	addfsr 1,10
 22940  0E44  3001               	movlw	1
 22941  0E45  0781               	addwf	1,f
 22942  0E46  3141               	addfsr 1,1
 22943  0E47  1803               	skipnc
 22944  0E48  0A81               	incf	1,f
 22945                           
 22946                           ;flashy_task.c: 439: data->holdCountB = 0;
 22947  0E49  085E               	movf	flashy_Main@data,w
 22948  0E4A  0086               	movwf	6
 22949  0E4B  085F               	movf	flashy_Main@data+1,w
 22950  0E4C  0087               	movwf	7
 22951  0E4D  314C               	addfsr 1,12
 22952  0E4E  3000               	movlw	0
 22953  0E4F  3FC0               	movwi [0]fsr1
 22954  0E50  3FC1               	movwi [1]fsr1
 22955                           
 22956                           ;flashy_task.c: 440: data->holdCountX = 0;
 22957  0E51  085E               	movf	flashy_Main@data,w
 22958  0E52  0086               	movwf	6
 22959  0E53  085F               	movf	flashy_Main@data+1,w
 22960  0E54  0087               	movwf	7
 22961  0E55  314E               	addfsr 1,14
 22962  0E56  3000               	movlw	0
 22963  0E57  3FC0               	movwi [0]fsr1
 22964  0E58  3FC1               	movwi [1]fsr1
 22965                           
 22966                           ;flashy_task.c: 441: data->holdCountY = 0;
 22967  0E59  085E               	movf	flashy_Main@data,w
 22968  0E5A  0086               	movwf	6
 22969  0E5B  085F               	movf	flashy_Main@data+1,w
 22970  0E5C  0087               	movwf	7
 22971  0E5D  3150               	addfsr 1,16
 22972  0E5E  3000               	movlw	0
 22973  0E5F  3FC0               	movwi [0]fsr1
 22974  0E60  3FC1               	movwi [1]fsr1
 22975                           
 22976                           ;flashy_task.c: 442: data->holdCountXY = 0;
 22977  0E61  085E               	movf	flashy_Main@data,w
 22978  0E62  0086               	movwf	6
 22979  0E63  085F               	movf	flashy_Main@data+1,w
 22980  0E64  0087               	movwf	7
 22981  0E65  3152               	addfsr 1,18
 22982  0E66  3000               	movlw	0
 22983  0E67  3FC0               	movwi [0]fsr1
 22984  0E68  3FC1               	movwi [1]fsr1
 22985                           
 22986                           ;flashy_task.c: 443: data->holdCountAY = 0;
 22987  0E69  085E               	movf	flashy_Main@data,w
 22988  0E6A  0086               	movwf	6
 22989  0E6B  085F               	movf	flashy_Main@data+1,w
 22990  0E6C  0087               	movwf	7
 22991  0E6D  3154               	addfsr 1,20
 22992  0E6E  3000               	movlw	0
 22993  0E6F  3FC0               	movwi [0]fsr1
 22994  0E70  3FC1               	movwi [1]fsr1
 22995                           
 22996                           ;flashy_task.c: 444: data->holdCountAX = 0;
 22997  0E71  085E               	movf	flashy_Main@data,w
 22998  0E72  0086               	movwf	6
 22999  0E73  085F               	movf	flashy_Main@data+1,w
 23000  0E74  0087               	movwf	7
 23001  0E75  3156               	addfsr 1,22
 23002  0E76  3000               	movlw	0
 23003  0E77  3FC0               	movwi [0]fsr1
 23004  0E78  3FC1               	movwi [1]fsr1
 23005                           
 23006                           ;flashy_task.c: 445: data->holdCountBX = 0;
 23007  0E79  085E               	movf	flashy_Main@data,w
 23008  0E7A  0086               	movwf	6
 23009  0E7B  085F               	movf	flashy_Main@data+1,w
 23010  0E7C  0087               	movwf	7
 23011  0E7D  3158               	addfsr 1,24
 23012  0E7E  3000               	movlw	0
 23013  0E7F  3FC0               	movwi [0]fsr1
 23014  0E80  3FC1               	movwi [1]fsr1
 23015                           
 23016                           ;flashy_task.c: 446: data->holdCountBY = 0;
 23017  0E81  085E               	movf	flashy_Main@data,w
 23018  0E82  0086               	movwf	6
 23019  0E83  085F               	movf	flashy_Main@data+1,w
 23020  0E84  0087               	movwf	7
 23021  0E85  315A               	addfsr 1,26
 23022  0E86  3000               	movlw	0
 23023  0E87  3FC0               	movwi [0]fsr1
 23024  0E88  3FC1               	movwi [1]fsr1
 23025                           
 23026                           ;flashy_task.c: 447: data->noholdCount = 0;
 23027  0E89  085E               	movf	flashy_Main@data,w
 23028  0E8A  0086               	movwf	6
 23029  0E8B  085F               	movf	flashy_Main@data+1,w
 23030  0E8C  0087               	movwf	7
 23031  0E8D  315C               	addfsr 1,28
 23032  0E8E  3000               	movlw	0
 23033  0E8F  3FC0               	movwi [0]fsr1
 23034  0E90  3FC1               	movwi [1]fsr1
 23035                           
 23036                           ;flashy_task.c: 448: break;
 23037  0E91  2FC9               	goto	l9567
 23038  0E92                     l9531:	
 23039                           ;flashy_task.c: 449: case 0:
 23040                           
 23041                           
 23042                           ;flashy_task.c: 451: data->holdCountA = 0;
 23043  0E92  085E               	movf	flashy_Main@data,w
 23044  0E93  0086               	movwf	6
 23045  0E94  085F               	movf	flashy_Main@data+1,w
 23046  0E95  0087               	movwf	7
 23047  0E96  314A               	addfsr 1,10
 23048  0E97  3000               	movlw	0
 23049  0E98  3FC0               	movwi [0]fsr1
 23050  0E99  3FC1               	movwi [1]fsr1
 23051                           
 23052                           ;flashy_task.c: 452: data->holdCountB = 0;
 23053  0E9A  085E               	movf	flashy_Main@data,w
 23054  0E9B  0086               	movwf	6
 23055  0E9C  085F               	movf	flashy_Main@data+1,w
 23056  0E9D  0087               	movwf	7
 23057  0E9E  314C               	addfsr 1,12
 23058  0E9F  3000               	movlw	0
 23059  0EA0  3FC0               	movwi [0]fsr1
 23060  0EA1  3FC1               	movwi [1]fsr1
 23061                           
 23062                           ;flashy_task.c: 453: data->holdCountX = 0;
 23063  0EA2  085E               	movf	flashy_Main@data,w
 23064  0EA3  0086               	movwf	6
 23065  0EA4  085F               	movf	flashy_Main@data+1,w
 23066  0EA5  0087               	movwf	7
 23067  0EA6  314E               	addfsr 1,14
 23068  0EA7  3000               	movlw	0
 23069  0EA8  3FC0               	movwi [0]fsr1
 23070  0EA9  3FC1               	movwi [1]fsr1
 23071                           
 23072                           ;flashy_task.c: 454: data->holdCountY = 0;
 23073  0EAA  085E               	movf	flashy_Main@data,w
 23074  0EAB  0086               	movwf	6
 23075  0EAC  085F               	movf	flashy_Main@data+1,w
 23076  0EAD  0087               	movwf	7
 23077  0EAE  3150               	addfsr 1,16
 23078  0EAF  3000               	movlw	0
 23079  0EB0  3FC0               	movwi [0]fsr1
 23080  0EB1  3FC1               	movwi [1]fsr1
 23081                           
 23082                           ;flashy_task.c: 455: data->holdCountXY = 0;
 23083  0EB2  085E               	movf	flashy_Main@data,w
 23084  0EB3  0086               	movwf	6
 23085  0EB4  085F               	movf	flashy_Main@data+1,w
 23086  0EB5  0087               	movwf	7
 23087  0EB6  3152               	addfsr 1,18
 23088  0EB7  3000               	movlw	0
 23089  0EB8  3FC0               	movwi [0]fsr1
 23090  0EB9  3FC1               	movwi [1]fsr1
 23091                           
 23092                           ;flashy_task.c: 456: data->holdCountAY = 0;
 23093  0EBA  085E               	movf	flashy_Main@data,w
 23094  0EBB  0086               	movwf	6
 23095  0EBC  085F               	movf	flashy_Main@data+1,w
 23096  0EBD  0087               	movwf	7
 23097  0EBE  3154               	addfsr 1,20
 23098  0EBF  3000               	movlw	0
 23099  0EC0  3FC0               	movwi [0]fsr1
 23100  0EC1  3FC1               	movwi [1]fsr1
 23101                           
 23102                           ;flashy_task.c: 457: data->holdCountAX = 0;
 23103  0EC2  085E               	movf	flashy_Main@data,w
 23104  0EC3  0086               	movwf	6
 23105  0EC4  085F               	movf	flashy_Main@data+1,w
 23106  0EC5  0087               	movwf	7
 23107  0EC6  3156               	addfsr 1,22
 23108  0EC7  3000               	movlw	0
 23109  0EC8  3FC0               	movwi [0]fsr1
 23110  0EC9  3FC1               	movwi [1]fsr1
 23111                           
 23112                           ;flashy_task.c: 458: data->holdCountBX = 0;
 23113  0ECA  085E               	movf	flashy_Main@data,w
 23114  0ECB  0086               	movwf	6
 23115  0ECC  085F               	movf	flashy_Main@data+1,w
 23116  0ECD  0087               	movwf	7
 23117  0ECE  3158               	addfsr 1,24
 23118  0ECF  3000               	movlw	0
 23119  0ED0  3FC0               	movwi [0]fsr1
 23120  0ED1  3FC1               	movwi [1]fsr1
 23121                           
 23122                           ;flashy_task.c: 459: data->holdCountBY = 0;
 23123  0ED2  085E               	movf	flashy_Main@data,w
 23124  0ED3  0086               	movwf	6
 23125  0ED4  085F               	movf	flashy_Main@data+1,w
 23126  0ED5  0087               	movwf	7
 23127  0ED6  315A               	addfsr 1,26
 23128  0ED7  3000               	movlw	0
 23129  0ED8  3FC0               	movwi [0]fsr1
 23130  0ED9  3FC1               	movwi [1]fsr1
 23131                           
 23132                           ;flashy_task.c: 460: data->noholdCount += 1;
 23133  0EDA  085E               	movf	flashy_Main@data,w
 23134  0EDB  0086               	movwf	6
 23135  0EDC  085F               	movf	flashy_Main@data+1,w
 23136  0EDD  0087               	movwf	7
 23137  0EDE  315C               	addfsr 1,28
 23138  0EDF  3001               	movlw	1
 23139  0EE0  0781               	addwf	1,f
 23140  0EE1  3141               	addfsr 1,1
 23141  0EE2  1803               	skipnc
 23142  0EE3  0A81               	incf	1,f
 23143                           
 23144                           ;flashy_task.c: 461: break;
 23145  0EE4  2FC9               	goto	l9567
 23146  0EE5                     l9535:	
 23147                           ;flashy_task.c: 462: default:
 23148                           
 23149                           
 23150                           ;flashy_task.c: 463: data->holdCountA = 0;
 23151  0EE5  085E               	movf	flashy_Main@data,w
 23152  0EE6  0086               	movwf	6
 23153  0EE7  085F               	movf	flashy_Main@data+1,w
 23154  0EE8  0087               	movwf	7
 23155  0EE9  314A               	addfsr 1,10
 23156  0EEA  3000               	movlw	0
 23157  0EEB  3FC0               	movwi [0]fsr1
 23158  0EEC  3FC1               	movwi [1]fsr1
 23159                           
 23160                           ;flashy_task.c: 464: data->holdCountB = 0;
 23161  0EED  085E               	movf	flashy_Main@data,w
 23162  0EEE  0086               	movwf	6
 23163  0EEF  085F               	movf	flashy_Main@data+1,w
 23164  0EF0  0087               	movwf	7
 23165  0EF1  314C               	addfsr 1,12
 23166  0EF2  3000               	movlw	0
 23167  0EF3  3FC0               	movwi [0]fsr1
 23168  0EF4  3FC1               	movwi [1]fsr1
 23169                           
 23170                           ;flashy_task.c: 465: data->holdCountX = 0;
 23171  0EF5  085E               	movf	flashy_Main@data,w
 23172  0EF6  0086               	movwf	6
 23173  0EF7  085F               	movf	flashy_Main@data+1,w
 23174  0EF8  0087               	movwf	7
 23175  0EF9  314E               	addfsr 1,14
 23176  0EFA  3000               	movlw	0
 23177  0EFB  3FC0               	movwi [0]fsr1
 23178  0EFC  3FC1               	movwi [1]fsr1
 23179                           
 23180                           ;flashy_task.c: 466: data->holdCountY = 0;
 23181  0EFD  085E               	movf	flashy_Main@data,w
 23182  0EFE  0086               	movwf	6
 23183  0EFF  085F               	movf	flashy_Main@data+1,w
 23184  0F00  0087               	movwf	7
 23185  0F01  3150               	addfsr 1,16
 23186  0F02  3000               	movlw	0
 23187  0F03  3FC0               	movwi [0]fsr1
 23188  0F04  3FC1               	movwi [1]fsr1
 23189                           
 23190                           ;flashy_task.c: 467: data->holdCountXY = 0;
 23191  0F05  085E               	movf	flashy_Main@data,w
 23192  0F06  0086               	movwf	6
 23193  0F07  085F               	movf	flashy_Main@data+1,w
 23194  0F08  0087               	movwf	7
 23195  0F09  3152               	addfsr 1,18
 23196  0F0A  3000               	movlw	0
 23197  0F0B  3FC0               	movwi [0]fsr1
 23198  0F0C  3FC1               	movwi [1]fsr1
 23199                           
 23200                           ;flashy_task.c: 468: data->holdCountAY = 0;
 23201  0F0D  085E               	movf	flashy_Main@data,w
 23202  0F0E  0086               	movwf	6
 23203  0F0F  085F               	movf	flashy_Main@data+1,w
 23204  0F10  0087               	movwf	7
 23205  0F11  3154               	addfsr 1,20
 23206  0F12  3000               	movlw	0
 23207  0F13  3FC0               	movwi [0]fsr1
 23208  0F14  3FC1               	movwi [1]fsr1
 23209                           
 23210                           ;flashy_task.c: 469: data->holdCountAX = 0;
 23211  0F15  085E               	movf	flashy_Main@data,w
 23212  0F16  0086               	movwf	6
 23213  0F17  085F               	movf	flashy_Main@data+1,w
 23214  0F18  0087               	movwf	7
 23215  0F19  3156               	addfsr 1,22
 23216  0F1A  3000               	movlw	0
 23217  0F1B  3FC0               	movwi [0]fsr1
 23218  0F1C  3FC1               	movwi [1]fsr1
 23219                           
 23220                           ;flashy_task.c: 470: data->holdCountBX = 0;
 23221  0F1D  085E               	movf	flashy_Main@data,w
 23222  0F1E  0086               	movwf	6
 23223  0F1F  085F               	movf	flashy_Main@data+1,w
 23224  0F20  0087               	movwf	7
 23225  0F21  3158               	addfsr 1,24
 23226  0F22  3000               	movlw	0
 23227  0F23  3FC0               	movwi [0]fsr1
 23228  0F24  3FC1               	movwi [1]fsr1
 23229                           
 23230                           ;flashy_task.c: 471: data->holdCountBY = 0;
 23231  0F25  085E               	movf	flashy_Main@data,w
 23232  0F26  0086               	movwf	6
 23233  0F27  085F               	movf	flashy_Main@data+1,w
 23234  0F28  0087               	movwf	7
 23235  0F29  315A               	addfsr 1,26
 23236  0F2A  3000               	movlw	0
 23237  0F2B  3FC0               	movwi [0]fsr1
 23238  0F2C  3FC1               	movwi [1]fsr1
 23239                           
 23240                           ;flashy_task.c: 472: data->noholdCount = 0;
 23241  0F2D  085E               	movf	flashy_Main@data,w
 23242  0F2E  0086               	movwf	6
 23243  0F2F  085F               	movf	flashy_Main@data+1,w
 23244  0F30  0087               	movwf	7
 23245  0F31  315C               	addfsr 1,28
 23246  0F32  3000               	movlw	0
 23247  0F33  3FC0               	movwi [0]fsr1
 23248  0F34  3FC1               	movwi [1]fsr1
 23249                           
 23250                           ;flashy_task.c: 473: }
 23251  0F35  2FC9               	goto	l9567
 23252  0F36                     l9537:	
 23253                           
 23254                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 23255                           ; Switch size 1, requested type "space"
 23256                           ; Number of cases is 1, Range of values is 0 to 0
 23257                           ; switch strategies available:
 23258                           ; Name         Instructions Cycles
 23259                           ; simple_byte            4     3 (average)
 23260                           ; direct_byte            8     6 (fixed)
 23261                           ; jumptable            260     6 (fixed)
 23262                           ;	Chosen strategy is simple_byte
 23263  0F36  085D               	movf	flashy_Main@buttonPressed+1,w
 23264  0F37  3A00               	xorlw	0	; case 0
 23265  0F38  1903               	skipnz
 23266  0F39  2F3B               	goto	l10887
 23267  0F3A  2EE5               	goto	l9535
 23268  0F3B                     l10887:	
 23269                           
 23270                           ; Switch size 1, requested type "space"
 23271                           ; Number of cases is 9, Range of values is 0 to 12
 23272                           ; switch strategies available:
 23273                           ; Name         Instructions Cycles
 23274                           ; simple_byte           28    15 (average)
 23275                           ; direct_byte           32     6 (fixed)
 23276                           ; jumptable            260     6 (fixed)
 23277                           ;	Chosen strategy is simple_byte
 23278  0F3B  085C               	movf	flashy_Main@buttonPressed,w
 23279  0F3C  3A00               	xorlw	0	; case 0
 23280  0F3D  1903               	skipnz
 23281  0F3E  2E92               	goto	l9531
 23282  0F3F  3A01               	xorlw	1	; case 1
 23283  0F40  1903               	skipnz
 23284  0F41  2DD0               	goto	l9483
 23285  0F42  3A03               	xorlw	3	; case 2
 23286  0F43  1903               	skipnz
 23287  0F44  2D4E               	goto	l9453
 23288  0F45  3A07               	xorlw	7	; case 5
 23289  0F46  1903               	skipnz
 23290  0F47  2B4C               	goto	l9329
 23291  0F48  3A03               	xorlw	3	; case 6
 23292  0F49  1903               	skipnz
 23293  0F4A  2C30               	goto	l9385
 23294  0F4B  3A0E               	xorlw	14	; case 8
 23295  0F4C  1903               	skipnz
 23296  0F4D  2CA5               	goto	l9415
 23297  0F4E  3A01               	xorlw	1	; case 9
 23298  0F4F  1903               	skipnz
 23299  0F50  2ADF               	goto	l9303
 23300  0F51  3A03               	xorlw	3	; case 10
 23301  0F52  1903               	skipnz
 23302  0F53  2BBB               	goto	l9355
 23303  0F54  3A06               	xorlw	6	; case 12
 23304  0F55  1903               	skipnz
 23305  0F56  2A7D               	goto	l9279
 23306  0F57  2EE5               	goto	l9535
 23307                           
 23308                           ;flashy_task.c: 476: switch (data->blaster_state) {
 23309  0F58  2FC9               	goto	l9567
 23310  0F59                     l9539:	
 23311                           ;flashy_task.c: 477: case FLASHY_BLASTER_SHOOTING_STATE:
 23312                           
 23313                           
 23314                           ;flashy_task.c: 479: if (data->blasterTickCount == 100) {
 23315  0F59  085E               	movf	flashy_Main@data,w
 23316  0F5A  0086               	movwf	6
 23317  0F5B  085F               	movf	flashy_Main@data+1,w
 23318  0F5C  0087               	movwf	7
 23319  0F5D  3147               	addfsr 1,7
 23320  0F5E  0016               	moviw fsr1++
 23321  0F5F  3A64               	xorlw	100
 23322  0F60  00D4               	movwf	??_flashy_Main
 23323  0F61  0016               	moviw fsr1++
 23324  0F62  04D4               	iorwf	??_flashy_Main,f
 23325  0F63  1D03               	btfss	3,2
 23326  0F64  2F70               	goto	l9545
 23327                           
 23328                           ;flashy_task.c: 480: nullifyBadge_irTxRegister(data->badge);
 23329  0F65  085E               	movf	flashy_Main@data,w
 23330  0F66  0086               	movwf	6
 23331  0F67  085F               	movf	flashy_Main@data+1,w
 23332  0F68  0087               	movwf	7
 23333  0F69  0801               	movf	1,w
 23334  0F6A  31B2  22BA  3188   	fcall	_nullifyBadge_irTxRegister
 23335                           
 23336                           ;flashy_task.c: 481: nullifyBadge_irTxSet();
 23337  0F6D  31A8  2082  3188   	fcall	_nullifyBadge_irTxSet
 23338  0F70                     l9545:	
 23339                           
 23340                           ;flashy_task.c: 482: }
 23341                           ;flashy_task.c: 483: if (data->blasterTickCount == 100 - 1 ){
 23342  0F70  0020               	movlb	0	; select bank0
 23343  0F71  085E               	movf	flashy_Main@data,w
 23344  0F72  0086               	movwf	6
 23345  0F73  085F               	movf	flashy_Main@data+1,w
 23346  0F74  0087               	movwf	7
 23347  0F75  3147               	addfsr 1,7
 23348  0F76  0016               	moviw fsr1++
 23349  0F77  3A63               	xorlw	99
 23350  0F78  00D4               	movwf	??_flashy_Main
 23351  0F79  0016               	moviw fsr1++
 23352  0F7A  04D4               	iorwf	??_flashy_Main,f
 23353  0F7B  1D03               	btfss	3,2
 23354  0F7C  2F89               	goto	l9551
 23355                           
 23356                           ;flashy_task.c: 484: nullifyBadge_irTxClr();
 23357  0F7D  31B1  21CC  3188   	fcall	_nullifyBadge_irTxClr
 23358                           
 23359                           ;flashy_task.c: 485: nullifyBadge_irTxRelease(data->badge);
 23360  0F80  0020               	movlb	0	; select bank0
 23361  0F81  085E               	movf	flashy_Main@data,w
 23362  0F82  0086               	movwf	6
 23363  0F83  085F               	movf	flashy_Main@data+1,w
 23364  0F84  0087               	movwf	7
 23365  0F85  0801               	movf	1,w
 23366  0F86  31B2  2256  3188   	fcall	_nullifyBadge_irTxRelease
 23367  0F89                     l9551:	
 23368                           
 23369                           ;flashy_task.c: 486: }
 23370                           ;flashy_task.c: 487: if (data->blasterTickCount == 0){
 23371  0F89  0020               	movlb	0	; select bank0
 23372  0F8A  085E               	movf	flashy_Main@data,w
 23373  0F8B  0086               	movwf	6
 23374  0F8C  085F               	movf	flashy_Main@data+1,w
 23375  0F8D  0087               	movwf	7
 23376  0F8E  3147               	addfsr 1,7
 23377  0F8F  0016               	moviw fsr1++
 23378  0F90  0401               	iorwf	1,w
 23379  0F91  1D03               	btfss	3,2
 23380  0F92  2FBD               	goto	l9563
 23381                           
 23382                           ;flashy_task.c: 488: data->displayTickCount = 0;
 23383  0F93  085E               	movf	flashy_Main@data,w
 23384  0F94  0086               	movwf	6
 23385  0F95  085F               	movf	flashy_Main@data+1,w
 23386  0F96  0087               	movwf	7
 23387  0F97  3144               	addfsr 1,4
 23388  0F98  3000               	movlw	0
 23389  0F99  3FC0               	movwi [0]fsr1
 23390  0F9A  3FC1               	movwi [1]fsr1
 23391                           
 23392                           ;flashy_task.c: 489: data->delayTickCount = 5;
 23393  0F9B  085E               	movf	flashy_Main@data,w
 23394  0F9C  0086               	movwf	6
 23395  0F9D  085F               	movf	flashy_Main@data+1,w
 23396  0F9E  0087               	movwf	7
 23397  0F9F  3141               	addfsr 1,1
 23398  0FA0  3005               	movlw	5
 23399  0FA1  3FC0               	movwi [0]fsr1
 23400  0FA2  3000               	movlw	0
 23401  0FA3  3FC1               	movwi [1]fsr1
 23402                           
 23403                           ;flashy_task.c: 491: data->led_state = FLASHY_STATE_LED_ROUNDABOUT;
 23404  0FA4  085E               	movf	flashy_Main@data,w
 23405  0FA5  0086               	movwf	6
 23406  0FA6  085F               	movf	flashy_Main@data+1,w
 23407  0FA7  0087               	movwf	7
 23408  0FA8  3143               	addfsr 1,3
 23409  0FA9  0181               	clrf	1
 23410                           
 23411                           ;flashy_task.c: 492: data->display_state = FLASHY_STATE_DISPLAY;
 23412  0FAA  085E               	movf	flashy_Main@data,w
 23413  0FAB  0086               	movwf	6
 23414  0FAC  085F               	movf	flashy_Main@data+1,w
 23415  0FAD  0087               	movwf	7
 23416  0FAE  3146               	addfsr 1,6
 23417  0FAF  0181               	clrf	1
 23418                           
 23419                           ;flashy_task.c: 493: data->blaster_state = FLASHY_BLASTER_IDLE_STATE;
 23420  0FB0  085E               	movf	flashy_Main@data,w
 23421  0FB1  3E09               	addlw	9
 23422  0FB2  00D4               	movwf	??_flashy_Main
 23423  0FB3  3000               	movlw	0
 23424  0FB4  3D5F               	addwfc	flashy_Main@data+1,w
 23425  0FB5  00D5               	movwf	??_flashy_Main+1
 23426  0FB6  0854               	movf	??_flashy_Main,w
 23427  0FB7  0086               	movwf	6
 23428  0FB8  0855               	movf	??_flashy_Main+1,w
 23429  0FB9  0087               	movwf	7
 23430  0FBA  3001               	movlw	1
 23431  0FBB  0081               	movwf	1
 23432                           
 23433                           ;flashy_task.c: 494: }
 23434  0FBC  2FD6               	goto	l9569
 23435  0FBD                     l9563:	
 23436                           
 23437                           ;flashy_task.c: 495: else {
 23438                           ;flashy_task.c: 496: data->blasterTickCount -= 1;
 23439  0FBD  085E               	movf	flashy_Main@data,w
 23440  0FBE  0086               	movwf	6
 23441  0FBF  085F               	movf	flashy_Main@data+1,w
 23442  0FC0  0087               	movwf	7
 23443  0FC1  3147               	addfsr 1,7
 23444  0FC2  3001               	movlw	1
 23445  0FC3  0281               	subwf	1,f
 23446  0FC4  3141               	addfsr 1,1
 23447  0FC5  3000               	movlw	0
 23448  0FC6  3B81               	subwfb	1,f
 23449  0FC7  317F               	addfsr 1,-1
 23450                           
 23451                           ;flashy_task.c: 501: }
 23452                           
 23453                           ;flashy_task.c: 500: break;
 23454                           
 23455                           ;flashy_task.c: 499: case FLASHY_BLASTER_IDLE_STATE:
 23456                           
 23457                           ;flashy_task.c: 497: }
 23458                           ;flashy_task.c: 498: break;
 23459  0FC8  2FD6               	goto	l9569
 23460  0FC9                     l9567:	
 23461  0FC9  085E               	movf	flashy_Main@data,w
 23462  0FCA  0086               	movwf	6
 23463  0FCB  085F               	movf	flashy_Main@data+1,w
 23464  0FCC  0087               	movwf	7
 23465  0FCD  3149               	addfsr 1,9
 23466  0FCE  0801               	movf	1,w
 23467                           
 23468                           ; Switch size 1, requested type "space"
 23469                           ; Number of cases is 2, Range of values is 0 to 1
 23470                           ; switch strategies available:
 23471                           ; Name         Instructions Cycles
 23472                           ; simple_byte            7     4 (average)
 23473                           ; direct_byte           10     6 (fixed)
 23474                           ; jumptable            260     6 (fixed)
 23475                           ;	Chosen strategy is simple_byte
 23476  0FCF  3A00               	xorlw	0	; case 0
 23477  0FD0  1903               	skipnz
 23478  0FD1  2F59               	goto	l9539
 23479  0FD2  3A01               	xorlw	1	; case 1
 23480  0FD3  1903               	skipnz
 23481  0FD4  2FD6               	goto	l9569
 23482  0FD5  2FD6               	goto	l9569
 23483  0FD6                     l9569:	
 23484                           
 23485                           ;flashy_task.c: 504: if (nullifyBadge_irGet() && (data->blaster_state != FLASHY_BLASTER_
      +                          SHOOTING_STATE)) {
 23486  0FD6  31B1  21D3  3188   	fcall	_nullifyBadge_irGet
 23487  0FD9  3A00               	xorlw	0
 23488  0FDA  1903               	skipnz
 23489  0FDB  0008               	return
 23490  0FDC  0020               	movlb	0	; select bank0
 23491  0FDD  085E               	movf	flashy_Main@data,w
 23492  0FDE  0086               	movwf	6
 23493  0FDF  085F               	movf	flashy_Main@data+1,w
 23494  0FE0  0087               	movwf	7
 23495  0FE1  3149               	addfsr 1,9
 23496  0FE2  0801               	movf	1,w
 23497  0FE3  1903               	btfsc	3,2
 23498  0FE4  0008               	return
 23499                           
 23500                           ;flashy_task.c: 505: data->displayTickCount = 0;
 23501  0FE5  085E               	movf	flashy_Main@data,w
 23502  0FE6  0086               	movwf	6
 23503  0FE7  085F               	movf	flashy_Main@data+1,w
 23504  0FE8  0087               	movwf	7
 23505  0FE9  3144               	addfsr 1,4
 23506  0FEA  3000               	movlw	0
 23507  0FEB  3FC0               	movwi [0]fsr1
 23508  0FEC  3FC1               	movwi [1]fsr1
 23509                           
 23510                           ;flashy_task.c: 506: deaths += 1;
 23511  0FED  3001               	movlw	1
 23512  0FEE  0021               	movlb	1	; select bank1
 23513  0FEF  07AA               	addwf	_deaths^(0+128),f
 23514  0FF0  3000               	movlw	0
 23515  0FF1  3DAB               	addwfc	(_deaths+1)^(0+128),f
 23516                           
 23517                           ;flashy_task.c: 507: data->display_state = FLASHY_STATE_DISPLAY_SHOT;
 23518  0FF2  0020               	movlb	0	; select bank0
 23519  0FF3  085E               	movf	flashy_Main@data,w
 23520  0FF4  3E06               	addlw	6
 23521  0FF5  00D4               	movwf	??_flashy_Main
 23522  0FF6  3000               	movlw	0
 23523  0FF7  3D5F               	addwfc	flashy_Main@data+1,w
 23524  0FF8  00D5               	movwf	??_flashy_Main+1
 23525  0FF9  0854               	movf	??_flashy_Main,w
 23526  0FFA  0086               	movwf	6
 23527  0FFB  0855               	movf	??_flashy_Main+1,w
 23528  0FFC  0087               	movwf	7
 23529  0FFD  3003               	movlw	3
 23530  0FFE  0081               	movwf	1
 23531  0FFF  0008               	return
 23532  1000                     __end_of_flashy_Main:	
 23533                           
 23534                           	psect	swtext1
 23535  3000                     __pswtext1:	
 23536  3000                     S10885:	
 23537  3000  3188  28D5         	ljmp	l9177
 23538  3002  3188  28FA         	ljmp	l9187
 23539  3004  3189  291E         	ljmp	l9197
 23540  3006  3189  2936         	ljmp	l9205
 23541  3008  3189  296D         	ljmp	l9223
 23542  300A  3189  2992         	ljmp	l9233
 23543                           
 23544                           	psect	text19
 23545  00E5                     __ptext19:	
 23546 ;; *************** function _slot_Main *****************
 23547 ;; Defined at:
 23548 ;;		line 96 in file "slot_task.c"
 23549 ;; Parameters:    Size  Location     Type
 23550 ;;  taskData        2   50[BANK0 ] PTR void 
 23551 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 23552 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 23553 ;; Auto vars:     Size  Location     Type
 23554 ;;  data            2   69[BANK0 ] PTR struct t_slot_taskDa
 23555 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 23556 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 23557 ;;  buttonPresse    1   68[BANK0 ] unsigned char 
 23558 ;; Return value:  Size  Location     Type
 23559 ;;                  1    wreg      void 
 23560 ;; Registers used:
 23561 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 23562 ;; Tracked objects:
 23563 ;;		On entry : 0/0
 23564 ;;		On exit  : 0/0
 23565 ;;		Unchanged: 0/0
 23566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23567 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23568 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23569 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23570 ;;      Totals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23571 ;;Total ram usage:       21 bytes
 23572 ;; Hardware stack levels used:    1
 23573 ;; Hardware stack levels required when called:   11
 23574 ;; This function calls:
 23575 ;;		___lwmod
 23576 ;;		_marquee
 23577 ;;		_marquee_speedy
 23578 ;;		_memset
 23579 ;;		_nullifyBadge_buttonsGet
 23580 ;;		_rand
 23581 ;;		_slot_Finished_Animation
 23582 ;;		_slot_Running_Animation
 23583 ;;		_slot_Setup
 23584 ;;		_sprintf
 23585 ;;		_strlen
 23586 ;; This function is called by:
 23587 ;;		_main
 23588 ;;		_scheduler_TaskRun
 23589 ;; This function uses a non-reentrant model
 23590 ;;
 23591                           
 23592                           
 23593                           ;psect for function _slot_Main
 23594  00E5                     _slot_Main:	
 23595                           
 23596                           ;slot_task.c: 97: struct t_slot_taskData *data = (struct t_slot_taskData *) taskData;
 23597                           
 23598                           ;incstack = 0
 23599                           ; Regs used in _slot_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 23600  00E5  0020               	movlb	0	; select bank0
 23601  00E6  0853               	movf	slot_Main@taskData+1,w
 23602  00E7  00E6               	movwf	slot_Main@data+1
 23603  00E8  0852               	movf	slot_Main@taskData,w
 23604  00E9  00E5               	movwf	slot_Main@data
 23605                           
 23606                           ;slot_task.c: 98: u8 buttonPressed;
 23607                           ;slot_task.c: 101: if ( currentTask != SLOT_TASK ){
 23608  00EA  0021               	movlb	1	; select bank1
 23609  00EB  033A               	decf	_currentTask^(0+128),w
 23610  00EC  043B               	iorwf	(_currentTask+1)^(0+128),w
 23611  00ED  1903               	btfsc	3,2
 23612  00EE  291E               	goto	l9835
 23613                           
 23614                           ;slot_task.c: 102: buttonPressed = nullifyBadge_buttonsGet();
 23615  00EF  31B5  25FF  3180   	fcall	_nullifyBadge_buttonsGet
 23616  00F2  0020               	movlb	0	; select bank0
 23617  00F3  00D4               	movwf	??_slot_Main
 23618  00F4  0854               	movf	??_slot_Main,w
 23619  00F5  00E4               	movwf	slot_Main@buttonPressed
 23620                           
 23621                           ;slot_task.c: 106: data->holdCountA = 1;
 23622                           
 23623                           ;slot_task.c: 104: default:
 23624                           
 23625                           ;slot_task.c: 103: switch (buttonPressed) {
 23626  00F6  0865               	movf	slot_Main@data,w
 23627  00F7  0086               	movwf	6
 23628  00F8  0866               	movf	slot_Main@data+1,w
 23629  00F9  0087               	movwf	7
 23630  00FA  315F               	addfsr 1,31
 23631  00FB  3001               	movlw	1
 23632  00FC  3FC0               	movwi [0]fsr1
 23633  00FD  3000               	movlw	0
 23634  00FE  3FC1               	movwi [1]fsr1
 23635                           
 23636                           ;slot_task.c: 107: data->holdCountB = 1;
 23637  00FF  0865               	movf	slot_Main@data,w
 23638  0100  3E21               	addlw	33
 23639  0101  0086               	movwf	6
 23640  0102  3000               	movlw	0
 23641  0103  3D66               	addwfc	slot_Main@data+1,w
 23642  0104  0087               	movwf	7
 23643  0105  3001               	movlw	1
 23644  0106  3FC0               	movwi [0]fsr1
 23645  0107  3000               	movlw	0
 23646  0108  3FC1               	movwi [1]fsr1
 23647                           
 23648                           ;slot_task.c: 108: data->holdCountX = 1;
 23649  0109  0865               	movf	slot_Main@data,w
 23650  010A  3E23               	addlw	35
 23651  010B  0086               	movwf	6
 23652  010C  3000               	movlw	0
 23653  010D  3D66               	addwfc	slot_Main@data+1,w
 23654  010E  0087               	movwf	7
 23655  010F  3001               	movlw	1
 23656  0110  3FC0               	movwi [0]fsr1
 23657  0111  3000               	movlw	0
 23658  0112  3FC1               	movwi [1]fsr1
 23659                           
 23660                           ;slot_task.c: 109: data->holdCountY = 1;
 23661  0113  0865               	movf	slot_Main@data,w
 23662  0114  3E25               	addlw	37
 23663  0115  0086               	movwf	6
 23664  0116  3000               	movlw	0
 23665  0117  3D66               	addwfc	slot_Main@data+1,w
 23666  0118  0087               	movwf	7
 23667  0119  3001               	movlw	1
 23668  011A  3FC0               	movwi [0]fsr1
 23669  011B  3000               	movlw	0
 23670  011C  3FC1               	movwi [1]fsr1
 23671                           
 23672                           ;slot_task.c: 111: }
 23673                           
 23674                           ;slot_task.c: 110: break;
 23675  011D  0008               	return
 23676  011E                     l9835:	
 23677                           ;slot_task.c: 112: return;
 23678                           
 23679                           
 23680                           ;slot_task.c: 113: }
 23681                           ;slot_task.c: 115: buttonPressed = nullifyBadge_buttonsGet();
 23682  011E  31B5  25FF  3180   	fcall	_nullifyBadge_buttonsGet
 23683  0121  0020               	movlb	0	; select bank0
 23684  0122  00D4               	movwf	??_slot_Main
 23685  0123  0854               	movf	??_slot_Main,w
 23686  0124  00E4               	movwf	slot_Main@buttonPressed
 23687                           
 23688                           ;slot_task.c: 119: memset(data->slot_print_buf, 0x00, 20);
 23689                           
 23690                           ;slot_task.c: 117: default:
 23691                           
 23692                           ;slot_task.c: 116: switch (buttonPressed) {
 23693  0125  0865               	movf	slot_Main@data,w
 23694  0126  3E0B               	addlw	11
 23695  0127  00F1               	movwf	memset@p1
 23696  0128  3000               	movlw	0
 23697  0129  3D66               	addwfc	slot_Main@data+1,w
 23698  012A  00F2               	movwf	memset@p1+1
 23699  012B  3000               	movlw	0
 23700  012C  00F3               	movwf	memset@c
 23701  012D  00F4               	movwf	memset@c+1
 23702  012E  3014               	movlw	20
 23703  012F  00F5               	movwf	memset@n
 23704  0130  3000               	movlw	0
 23705  0131  00F6               	movwf	memset@n+1
 23706  0132  31B3  23C2  3180   	fcall	_memset
 23707                           
 23708                           ;slot_task.c: 122: if (data->displayTickCount < 100) {
 23709  0135  0020               	movlb	0	; select bank0
 23710  0136  0865               	movf	slot_Main@data,w
 23711  0137  0086               	movwf	6
 23712  0138  0866               	movf	slot_Main@data+1,w
 23713  0139  0087               	movwf	7
 23714  013A  3143               	addfsr 1,3
 23715  013B  3F40               	moviw [0]fsr1
 23716  013C  00D4               	movwf	??_slot_Main
 23717  013D  3F41               	moviw [1]fsr1
 23718  013E  00D5               	movwf	??_slot_Main+1
 23719  013F  3000               	movlw	0
 23720  0140  0255               	subwf	??_slot_Main+1,w
 23721  0141  3064               	movlw	100
 23722  0142  1903               	skipnz
 23723  0143  0254               	subwf	??_slot_Main,w
 23724  0144  1803               	skipnc
 23725  0145  2A51               	goto	l9855
 23726                           
 23727                           ;slot_task.c: 123: slot_Running_Animation(data);
 23728  0146  0866               	movf	slot_Main@data+1,w
 23729  0147  00B3               	movwf	slot_Running_Animation@taskData+1
 23730  0148  0865               	movf	slot_Main@data,w
 23731  0149  00B2               	movwf	slot_Running_Animation@taskData
 23732  014A  31A9  213E  3180   	fcall	_slot_Running_Animation
 23733                           
 23734                           ;slot_task.c: 124: data->slot_wheel_index[0] = (u8)rand() % strlen(Slot_Wheel);
 23735  014D  3032               	movlw	low _Slot_Wheel
 23736  014E  00F1               	movwf	strlen@s
 23737  014F  3003               	movlw	high _Slot_Wheel
 23738  0150  00F2               	movwf	strlen@s+1
 23739  0151  31B4  2466  3180   	fcall	_strlen
 23740  0154  0872               	movf	?_strlen+1,w
 23741  0155  0020               	movlb	0	; select bank0
 23742  0156  00AC               	movwf	___lwmod@divisor+1
 23743  0157  0871               	movf	?_strlen,w
 23744  0158  00AB               	movwf	___lwmod@divisor
 23745  0159  31A8  20FB  3180   	fcall	_rand
 23746  015C  0020               	movlb	0	; select bank0
 23747  015D  0824               	movf	?_rand,w
 23748  015E  00D4               	movwf	??_slot_Main
 23749  015F  01D5               	clrf	??_slot_Main+1
 23750  0160  0854               	movf	??_slot_Main,w
 23751  0161  00AD               	movwf	___lwmod@dividend
 23752  0162  0855               	movf	??_slot_Main+1,w
 23753  0163  00AE               	movwf	___lwmod@dividend+1
 23754  0164  31B5  25A3  3180   	fcall	___lwmod
 23755  0167  0020               	movlb	0	; select bank0
 23756  0168  082B               	movf	?___lwmod,w
 23757  0169  00D6               	movwf	??_slot_Main+2
 23758  016A  0865               	movf	slot_Main@data,w
 23759  016B  3E07               	addlw	7
 23760  016C  00D7               	movwf	??_slot_Main+3
 23761  016D  3000               	movlw	0
 23762  016E  3D66               	addwfc	slot_Main@data+1,w
 23763  016F  00D8               	movwf	??_slot_Main+4
 23764  0170  0857               	movf	??_slot_Main+3,w
 23765  0171  0086               	movwf	6
 23766  0172  0858               	movf	??_slot_Main+4,w
 23767  0173  0087               	movwf	7
 23768  0174  0856               	movf	??_slot_Main+2,w
 23769  0175  0081               	movwf	1
 23770                           
 23771                           ;slot_task.c: 125: data->slot_wheel_index[1] = (u8)rand() % strlen(Slot_Wheel);
 23772  0176  3032               	movlw	low _Slot_Wheel
 23773  0177  00F1               	movwf	strlen@s
 23774  0178  3003               	movlw	high _Slot_Wheel
 23775  0179  00F2               	movwf	strlen@s+1
 23776  017A  31B4  2466  3180   	fcall	_strlen
 23777  017D  0872               	movf	?_strlen+1,w
 23778  017E  0020               	movlb	0	; select bank0
 23779  017F  00AC               	movwf	___lwmod@divisor+1
 23780  0180  0871               	movf	?_strlen,w
 23781  0181  00AB               	movwf	___lwmod@divisor
 23782  0182  31A8  20FB  3180   	fcall	_rand
 23783  0185  0020               	movlb	0	; select bank0
 23784  0186  0824               	movf	?_rand,w
 23785  0187  00D4               	movwf	??_slot_Main
 23786  0188  01D5               	clrf	??_slot_Main+1
 23787  0189  0854               	movf	??_slot_Main,w
 23788  018A  00AD               	movwf	___lwmod@dividend
 23789  018B  0855               	movf	??_slot_Main+1,w
 23790  018C  00AE               	movwf	___lwmod@dividend+1
 23791  018D  31B5  25A3  3180   	fcall	___lwmod
 23792  0190  0020               	movlb	0	; select bank0
 23793  0191  082B               	movf	?___lwmod,w
 23794  0192  00D6               	movwf	??_slot_Main+2
 23795  0193  0865               	movf	slot_Main@data,w
 23796  0194  3E08               	addlw	8
 23797  0195  00D7               	movwf	??_slot_Main+3
 23798  0196  3000               	movlw	0
 23799  0197  3D66               	addwfc	slot_Main@data+1,w
 23800  0198  00D8               	movwf	??_slot_Main+4
 23801  0199  0857               	movf	??_slot_Main+3,w
 23802  019A  0086               	movwf	6
 23803  019B  0858               	movf	??_slot_Main+4,w
 23804  019C  0087               	movwf	7
 23805  019D  0856               	movf	??_slot_Main+2,w
 23806  019E  0081               	movwf	1
 23807                           
 23808                           ;slot_task.c: 126: data->slot_wheel_index[2] = (u8)rand() % strlen(Slot_Wheel);
 23809  019F  3032               	movlw	low _Slot_Wheel
 23810  01A0  00F1               	movwf	strlen@s
 23811  01A1  3003               	movlw	high _Slot_Wheel
 23812  01A2  00F2               	movwf	strlen@s+1
 23813  01A3  31B4  2466  3180   	fcall	_strlen
 23814  01A6  0872               	movf	?_strlen+1,w
 23815  01A7  0020               	movlb	0	; select bank0
 23816  01A8  00AC               	movwf	___lwmod@divisor+1
 23817  01A9  0871               	movf	?_strlen,w
 23818  01AA  00AB               	movwf	___lwmod@divisor
 23819  01AB  31A8  20FB  3180   	fcall	_rand
 23820  01AE  0020               	movlb	0	; select bank0
 23821  01AF  0824               	movf	?_rand,w
 23822  01B0  00D4               	movwf	??_slot_Main
 23823  01B1  01D5               	clrf	??_slot_Main+1
 23824  01B2  0854               	movf	??_slot_Main,w
 23825  01B3  00AD               	movwf	___lwmod@dividend
 23826  01B4  0855               	movf	??_slot_Main+1,w
 23827  01B5  00AE               	movwf	___lwmod@dividend+1
 23828  01B6  31B5  25A3  3180   	fcall	___lwmod
 23829  01B9  0020               	movlb	0	; select bank0
 23830  01BA  082B               	movf	?___lwmod,w
 23831  01BB  00D6               	movwf	??_slot_Main+2
 23832  01BC  0865               	movf	slot_Main@data,w
 23833  01BD  3E09               	addlw	9
 23834  01BE  00D7               	movwf	??_slot_Main+3
 23835  01BF  3000               	movlw	0
 23836  01C0  3D66               	addwfc	slot_Main@data+1,w
 23837  01C1  00D8               	movwf	??_slot_Main+4
 23838  01C2  0857               	movf	??_slot_Main+3,w
 23839  01C3  0086               	movwf	6
 23840  01C4  0858               	movf	??_slot_Main+4,w
 23841  01C5  0087               	movwf	7
 23842  01C6  0856               	movf	??_slot_Main+2,w
 23843  01C7  0081               	movwf	1
 23844                           
 23845                           ;slot_task.c: 127: data->slot_wheel_index[3] = (u8)rand() % strlen(Slot_Wheel);
 23846  01C8  3032               	movlw	low _Slot_Wheel
 23847  01C9  00F1               	movwf	strlen@s
 23848  01CA  3003               	movlw	high _Slot_Wheel
 23849  01CB  00F2               	movwf	strlen@s+1
 23850  01CC  31B4  2466  3180   	fcall	_strlen
 23851  01CF  0872               	movf	?_strlen+1,w
 23852  01D0  0020               	movlb	0	; select bank0
 23853  01D1  00AC               	movwf	___lwmod@divisor+1
 23854  01D2  0871               	movf	?_strlen,w
 23855  01D3  00AB               	movwf	___lwmod@divisor
 23856  01D4  31A8  20FB  3180   	fcall	_rand
 23857  01D7  0020               	movlb	0	; select bank0
 23858  01D8  0824               	movf	?_rand,w
 23859  01D9  00D4               	movwf	??_slot_Main
 23860  01DA  01D5               	clrf	??_slot_Main+1
 23861  01DB  0854               	movf	??_slot_Main,w
 23862  01DC  00AD               	movwf	___lwmod@dividend
 23863  01DD  0855               	movf	??_slot_Main+1,w
 23864  01DE  00AE               	movwf	___lwmod@dividend+1
 23865  01DF  31B5  25A3  3180   	fcall	___lwmod
 23866  01E2  0020               	movlb	0	; select bank0
 23867  01E3  082B               	movf	?___lwmod,w
 23868  01E4  00D6               	movwf	??_slot_Main+2
 23869  01E5  0865               	movf	slot_Main@data,w
 23870  01E6  3E0A               	addlw	10
 23871  01E7  00D7               	movwf	??_slot_Main+3
 23872  01E8  3000               	movlw	0
 23873  01E9  3D66               	addwfc	slot_Main@data+1,w
 23874  01EA  00D8               	movwf	??_slot_Main+4
 23875  01EB  0857               	movf	??_slot_Main+3,w
 23876  01EC  0086               	movwf	6
 23877  01ED  0858               	movf	??_slot_Main+4,w
 23878  01EE  0087               	movwf	7
 23879  01EF  0856               	movf	??_slot_Main+2,w
 23880  01F0  0081               	movwf	1
 23881                           
 23882                           ;slot_task.c: 128: sprintf(data->slot_print_buf, "%c%c%c%c", Slot_Wheel[data->slot_wheel
      +                          _index[0]], Slot_Wheel[data->slot_wheel_index[1]], Slot_Wheel[data->slot_wheel_index[2]]
      +                          , Slot_Wheel[data->slot_wheel_index[3]]);
 23883  01F1  0865               	movf	slot_Main@data,w
 23884  01F2  3E0B               	addlw	11
 23885  01F3  00AF               	movwf	sprintf@sp
 23886  01F4  3000               	movlw	0
 23887  01F5  3D66               	addwfc	slot_Main@data+1,w
 23888  01F6  00B0               	movwf	sprintf@sp+1
 23889  01F7  301C               	movlw	low (STR_66| (0+32768))
 23890  01F8  00B1               	movwf	sprintf@f
 23891  01F9  30BB               	movlw	high (STR_66| (0+32768))
 23892  01FA  00B2               	movwf	sprintf@f+1
 23893  01FB  0865               	movf	slot_Main@data,w
 23894  01FC  0086               	movwf	6
 23895  01FD  0866               	movf	slot_Main@data+1,w
 23896  01FE  0087               	movwf	7
 23897  01FF  3147               	addfsr 1,7
 23898  0200  0801               	movf	1,w
 23899  0201  3E32               	addlw	(low (_Slot_Wheel| (0+768)))& (0+255)
 23900  0202  0086               	movwf	6
 23901  0203  3003               	movlw	3	; select bank6/7
 23902  0204  0087               	movwf	7
 23903  0205  0801               	movf	1,w
 23904  0206  00D4               	movwf	??_slot_Main
 23905  0207  01D5               	clrf	??_slot_Main+1
 23906  0208  0854               	movf	??_slot_Main,w
 23907  0209  00B3               	movwf	?_sprintf+4
 23908  020A  0855               	movf	??_slot_Main+1,w
 23909  020B  00B4               	movwf	?_sprintf+5
 23910  020C  0865               	movf	slot_Main@data,w
 23911  020D  0086               	movwf	6
 23912  020E  0866               	movf	slot_Main@data+1,w
 23913  020F  0087               	movwf	7
 23914  0210  3148               	addfsr 1,8
 23915  0211  0801               	movf	1,w
 23916  0212  3E32               	addlw	(low (_Slot_Wheel| (0+768)))& (0+255)
 23917  0213  0086               	movwf	6
 23918  0214  3003               	movlw	3	; select bank6/7
 23919  0215  0087               	movwf	7
 23920  0216  0801               	movf	1,w
 23921  0217  00D6               	movwf	??_slot_Main+2
 23922  0218  01D7               	clrf	??_slot_Main+3
 23923  0219  0856               	movf	??_slot_Main+2,w
 23924  021A  00B5               	movwf	?_sprintf+6
 23925  021B  0857               	movf	??_slot_Main+3,w
 23926  021C  00B6               	movwf	?_sprintf+7
 23927  021D  0865               	movf	slot_Main@data,w
 23928  021E  0086               	movwf	6
 23929  021F  0866               	movf	slot_Main@data+1,w
 23930  0220  0087               	movwf	7
 23931  0221  3149               	addfsr 1,9
 23932  0222  0801               	movf	1,w
 23933  0223  3E32               	addlw	(low (_Slot_Wheel| (0+768)))& (0+255)
 23934  0224  0086               	movwf	6
 23935  0225  3003               	movlw	3	; select bank6/7
 23936  0226  0087               	movwf	7
 23937  0227  0801               	movf	1,w
 23938  0228  00D8               	movwf	??_slot_Main+4
 23939  0229  01D9               	clrf	??_slot_Main+5
 23940  022A  0858               	movf	??_slot_Main+4,w
 23941  022B  00B7               	movwf	?_sprintf+8
 23942  022C  0859               	movf	??_slot_Main+5,w
 23943  022D  00B8               	movwf	?_sprintf+9
 23944  022E  0865               	movf	slot_Main@data,w
 23945  022F  0086               	movwf	6
 23946  0230  0866               	movf	slot_Main@data+1,w
 23947  0231  0087               	movwf	7
 23948  0232  314A               	addfsr 1,10
 23949  0233  0801               	movf	1,w
 23950  0234  3E32               	addlw	(low (_Slot_Wheel| (0+768)))& (0+255)
 23951  0235  0086               	movwf	6
 23952  0236  3003               	movlw	3	; select bank6/7
 23953  0237  0087               	movwf	7
 23954  0238  0801               	movf	1,w
 23955  0239  00DA               	movwf	??_slot_Main+6
 23956  023A  01DB               	clrf	??_slot_Main+7
 23957  023B  085A               	movf	??_slot_Main+6,w
 23958  023C  00B9               	movwf	?_sprintf+10
 23959  023D  085B               	movf	??_slot_Main+7,w
 23960  023E  00BA               	movwf	?_sprintf+11
 23961  023F  3199  216B  3180   	fcall	_sprintf
 23962                           
 23963                           ;slot_task.c: 129: marquee(data->slot_print_buf, 1);}
 23964  0242  0020               	movlb	0	; select bank0
 23965  0243  0865               	movf	slot_Main@data,w
 23966  0244  3E0B               	addlw	11
 23967  0245  00BA               	movwf	marquee@string
 23968  0246  3000               	movlw	0
 23969  0247  3D66               	addwfc	slot_Main@data+1,w
 23970  0248  00BB               	movwf	marquee@string+1
 23971  0249  3001               	movlw	1
 23972  024A  00BC               	movwf	marquee@count
 23973  024B  3000               	movlw	0
 23974  024C  00BD               	movwf	marquee@count+1
 23975  024D  31A2  2215  3180   	fcall	_marquee
 23976  0250  2E27               	goto	l9919
 23977  0251                     l9855:	
 23978                           
 23979                           ;slot_task.c: 130: else if (data->displayTickCount < 200) {
 23980  0251  0020               	movlb	0	; select bank0
 23981  0252  0865               	movf	slot_Main@data,w
 23982  0253  0086               	movwf	6
 23983  0254  0866               	movf	slot_Main@data+1,w
 23984  0255  0087               	movwf	7
 23985  0256  3143               	addfsr 1,3
 23986  0257  3F40               	moviw [0]fsr1
 23987  0258  00D4               	movwf	??_slot_Main
 23988  0259  3F41               	moviw [1]fsr1
 23989  025A  00D5               	movwf	??_slot_Main+1
 23990  025B  3000               	movlw	0
 23991  025C  0255               	subwf	??_slot_Main+1,w
 23992  025D  30C8               	movlw	200
 23993  025E  1903               	skipnz
 23994  025F  0254               	subwf	??_slot_Main,w
 23995  0260  1803               	skipnc
 23996  0261  2B47               	goto	l9869
 23997                           
 23998                           ;slot_task.c: 131: slot_Running_Animation(data);
 23999  0262  0866               	movf	slot_Main@data+1,w
 24000  0263  00B3               	movwf	slot_Running_Animation@taskData+1
 24001  0264  0865               	movf	slot_Main@data,w
 24002  0265  00B2               	movwf	slot_Running_Animation@taskData
 24003  0266  31A9  213E  3180   	fcall	_slot_Running_Animation
 24004                           
 24005                           ;slot_task.c: 132: data->slot_wheel_index[1] = (u8)rand() % strlen(Slot_Wheel);
 24006  0269  3032               	movlw	low _Slot_Wheel
 24007  026A  00F1               	movwf	strlen@s
 24008  026B  3003               	movlw	high _Slot_Wheel
 24009  026C  00F2               	movwf	strlen@s+1
 24010  026D  31B4  2466  3180   	fcall	_strlen
 24011  0270  0872               	movf	?_strlen+1,w
 24012  0271  0020               	movlb	0	; select bank0
 24013  0272  00AC               	movwf	___lwmod@divisor+1
 24014  0273  0871               	movf	?_strlen,w
 24015  0274  00AB               	movwf	___lwmod@divisor
 24016  0275  31A8  20FB  3180   	fcall	_rand
 24017  0278  0020               	movlb	0	; select bank0
 24018  0279  0824               	movf	?_rand,w
 24019  027A  00D4               	movwf	??_slot_Main
 24020  027B  01D5               	clrf	??_slot_Main+1
 24021  027C  0854               	movf	??_slot_Main,w
 24022  027D  00AD               	movwf	___lwmod@dividend
 24023  027E  0855               	movf	??_slot_Main+1,w
 24024  027F  00AE               	movwf	___lwmod@dividend+1
 24025  0280  31B5  25A3  3180   	fcall	___lwmod
 24026  0283  0020               	movlb	0	; select bank0
 24027  0284  082B               	movf	?___lwmod,w
 24028  0285  00D6               	movwf	??_slot_Main+2
 24029  0286  0865               	movf	slot_Main@data,w
 24030  0287  3E08               	addlw	8
 24031  0288  00D7               	movwf	??_slot_Main+3
 24032  0289  3000               	movlw	0
 24033  028A  3D66               	addwfc	slot_Main@data+1,w
 24034  028B  00D8               	movwf	??_slot_Main+4
 24035  028C  0857               	movf	??_slot_Main+3,w
 24036  028D  0086               	movwf	6
 24037  028E  0858               	movf	??_slot_Main+4,w
 24038  028F  0087               	movwf	7
 24039  0290  0856               	movf	??_slot_Main+2,w
 24040  0291  0081               	movwf	1
 24041                           
 24042                           ;slot_task.c: 133: data->slot_wheel_index[2] = (u8)rand() % strlen(Slot_Wheel);
 24043  0292  3032               	movlw	low _Slot_Wheel
 24044  0293  00F1               	movwf	strlen@s
 24045  0294  3003               	movlw	high _Slot_Wheel
 24046  0295  00F2               	movwf	strlen@s+1
 24047  0296  31B4  2466  3180   	fcall	_strlen
 24048  0299  0872               	movf	?_strlen+1,w
 24049  029A  0020               	movlb	0	; select bank0
 24050  029B  00AC               	movwf	___lwmod@divisor+1
 24051  029C  0871               	movf	?_strlen,w
 24052  029D  00AB               	movwf	___lwmod@divisor
 24053  029E  31A8  20FB  3180   	fcall	_rand
 24054  02A1  0020               	movlb	0	; select bank0
 24055  02A2  0824               	movf	?_rand,w
 24056  02A3  00D4               	movwf	??_slot_Main
 24057  02A4  01D5               	clrf	??_slot_Main+1
 24058  02A5  0854               	movf	??_slot_Main,w
 24059  02A6  00AD               	movwf	___lwmod@dividend
 24060  02A7  0855               	movf	??_slot_Main+1,w
 24061  02A8  00AE               	movwf	___lwmod@dividend+1
 24062  02A9  31B5  25A3  3180   	fcall	___lwmod
 24063  02AC  0020               	movlb	0	; select bank0
 24064  02AD  082B               	movf	?___lwmod,w
 24065  02AE  00D6               	movwf	??_slot_Main+2
 24066  02AF  0865               	movf	slot_Main@data,w
 24067  02B0  3E09               	addlw	9
 24068  02B1  00D7               	movwf	??_slot_Main+3
 24069  02B2  3000               	movlw	0
 24070  02B3  3D66               	addwfc	slot_Main@data+1,w
 24071  02B4  00D8               	movwf	??_slot_Main+4
 24072  02B5  0857               	movf	??_slot_Main+3,w
 24073  02B6  0086               	movwf	6
 24074  02B7  0858               	movf	??_slot_Main+4,w
 24075  02B8  0087               	movwf	7
 24076  02B9  0856               	movf	??_slot_Main+2,w
 24077  02BA  0081               	movwf	1
 24078                           
 24079                           ;slot_task.c: 134: data->slot_wheel_index[3] = (u8)rand() % strlen(Slot_Wheel);
 24080  02BB  3032               	movlw	low _Slot_Wheel
 24081  02BC  00F1               	movwf	strlen@s
 24082  02BD  3003               	movlw	high _Slot_Wheel
 24083  02BE  00F2               	movwf	strlen@s+1
 24084  02BF  31B4  2466  3180   	fcall	_strlen
 24085  02C2  0872               	movf	?_strlen+1,w
 24086  02C3  0020               	movlb	0	; select bank0
 24087  02C4  00AC               	movwf	___lwmod@divisor+1
 24088  02C5  0871               	movf	?_strlen,w
 24089  02C6  00AB               	movwf	___lwmod@divisor
 24090  02C7  31A8  20FB  3180   	fcall	_rand
 24091  02CA  0020               	movlb	0	; select bank0
 24092  02CB  0824               	movf	?_rand,w
 24093  02CC  00D4               	movwf	??_slot_Main
 24094  02CD  01D5               	clrf	??_slot_Main+1
 24095  02CE  0854               	movf	??_slot_Main,w
 24096  02CF  00AD               	movwf	___lwmod@dividend
 24097  02D0  0855               	movf	??_slot_Main+1,w
 24098  02D1  00AE               	movwf	___lwmod@dividend+1
 24099  02D2  31B5  25A3  3180   	fcall	___lwmod
 24100  02D5  0020               	movlb	0	; select bank0
 24101  02D6  082B               	movf	?___lwmod,w
 24102  02D7  00D6               	movwf	??_slot_Main+2
 24103  02D8  0865               	movf	slot_Main@data,w
 24104  02D9  3E0A               	addlw	10
 24105  02DA  00D7               	movwf	??_slot_Main+3
 24106  02DB  3000               	movlw	0
 24107  02DC  3D66               	addwfc	slot_Main@data+1,w
 24108  02DD  00D8               	movwf	??_slot_Main+4
 24109  02DE  0857               	movf	??_slot_Main+3,w
 24110  02DF  0086               	movwf	6
 24111  02E0  0858               	movf	??_slot_Main+4,w
 24112  02E1  0087               	movwf	7
 24113  02E2  0856               	movf	??_slot_Main+2,w
 24114  02E3  0081               	movwf	1
 24115                           
 24116                           ;slot_task.c: 135: sprintf(data->slot_print_buf, "%c%c%c%c", Shot_Options[Shot_Index][0]
      +                          , Slot_Wheel[data->slot_wheel_index[1]], Slot_Wheel[data->slot_wheel_index[2]], Slot_Whe
      +                          el[data->slot_wheel_index[3]]);
 24117  02E4  0865               	movf	slot_Main@data,w
 24118  02E5  3E0B               	addlw	11
 24119  02E6  00AF               	movwf	sprintf@sp
 24120  02E7  3000               	movlw	0
 24121  02E8  3D66               	addwfc	slot_Main@data+1,w
 24122  02E9  00B0               	movwf	sprintf@sp+1
 24123  02EA  301C               	movlw	low (STR_66| (0+32768))
 24124  02EB  00B1               	movwf	sprintf@f
 24125  02EC  30BB               	movlw	high (STR_66| (0+32768))
 24126  02ED  00B2               	movwf	sprintf@f+1
 24127  02EE  357C               	lslf	_Shot_Index,w
 24128  02EF  3ED1               	addlw	(low (_Shot_Options| (0+256)))& (0+255)
 24129  02F0  0086               	movwf	6
 24130  02F1  3001               	movlw	1	; select bank3/4
 24131  02F2  0087               	movwf	7
 24132  02F3  3F40               	moviw [0]fsr1
 24133  02F4  00D4               	movwf	??_slot_Main
 24134  02F5  3F41               	moviw [1]fsr1
 24135  02F6  00D5               	movwf	??_slot_Main+1
 24136  02F7  0854               	movf	??_slot_Main,w
 24137  02F8  0084               	movwf	4
 24138  02F9  0855               	movf	??_slot_Main+1,w
 24139  02FA  0085               	movwf	5
 24140  02FB  0800               	movf	0,w	;code access
 24141  02FC  00D6               	movwf	??_slot_Main+2
 24142  02FD  01D7               	clrf	??_slot_Main+3
 24143  02FE  0856               	movf	??_slot_Main+2,w
 24144  02FF  00B3               	movwf	?_sprintf+4
 24145  0300  0857               	movf	??_slot_Main+3,w
 24146  0301  00B4               	movwf	?_sprintf+5
 24147  0302  0865               	movf	slot_Main@data,w
 24148  0303  0086               	movwf	6
 24149  0304  0866               	movf	slot_Main@data+1,w
 24150  0305  0087               	movwf	7
 24151  0306  3148               	addfsr 1,8
 24152  0307  0801               	movf	1,w
 24153  0308  3E32               	addlw	(low (_Slot_Wheel| (0+768)))& (0+255)
 24154  0309  0086               	movwf	6
 24155  030A  3003               	movlw	3	; select bank6/7
 24156  030B  0087               	movwf	7
 24157  030C  0801               	movf	1,w
 24158  030D  00D8               	movwf	??_slot_Main+4
 24159  030E  01D9               	clrf	??_slot_Main+5
 24160  030F  0858               	movf	??_slot_Main+4,w
 24161  0310  00B5               	movwf	?_sprintf+6
 24162  0311  0859               	movf	??_slot_Main+5,w
 24163  0312  00B6               	movwf	?_sprintf+7
 24164  0313  0865               	movf	slot_Main@data,w
 24165  0314  0086               	movwf	6
 24166  0315  0866               	movf	slot_Main@data+1,w
 24167  0316  0087               	movwf	7
 24168  0317  3149               	addfsr 1,9
 24169  0318  0801               	movf	1,w
 24170  0319  3E32               	addlw	(low (_Slot_Wheel| (0+768)))& (0+255)
 24171  031A  0086               	movwf	6
 24172  031B  3003               	movlw	3	; select bank6/7
 24173  031C  0087               	movwf	7
 24174  031D  0801               	movf	1,w
 24175  031E  00DA               	movwf	??_slot_Main+6
 24176  031F  01DB               	clrf	??_slot_Main+7
 24177  0320  085A               	movf	??_slot_Main+6,w
 24178  0321  00B7               	movwf	?_sprintf+8
 24179  0322  085B               	movf	??_slot_Main+7,w
 24180  0323  00B8               	movwf	?_sprintf+9
 24181  0324  0865               	movf	slot_Main@data,w
 24182  0325  0086               	movwf	6
 24183  0326  0866               	movf	slot_Main@data+1,w
 24184  0327  0087               	movwf	7
 24185  0328  314A               	addfsr 1,10
 24186  0329  0801               	movf	1,w
 24187  032A  3E32               	addlw	(low (_Slot_Wheel| (0+768)))& (0+255)
 24188  032B  0086               	movwf	6
 24189  032C  3003               	movlw	3	; select bank6/7
 24190  032D  0087               	movwf	7
 24191  032E  0801               	movf	1,w
 24192  032F  00DC               	movwf	??_slot_Main+8
 24193  0330  01DD               	clrf	??_slot_Main+9
 24194  0331  085C               	movf	??_slot_Main+8,w
 24195  0332  00B9               	movwf	?_sprintf+10
 24196  0333  085D               	movf	??_slot_Main+9,w
 24197  0334  00BA               	movwf	?_sprintf+11
 24198  0335  3199  216B  3180   	fcall	_sprintf
 24199                           
 24200                           ;slot_task.c: 136: marquee(data->slot_print_buf, 1);}
 24201  0338  0020               	movlb	0	; select bank0
 24202  0339  0865               	movf	slot_Main@data,w
 24203  033A  3E0B               	addlw	11
 24204  033B  00BA               	movwf	marquee@string
 24205  033C  3000               	movlw	0
 24206  033D  3D66               	addwfc	slot_Main@data+1,w
 24207  033E  00BB               	movwf	marquee@string+1
 24208  033F  3001               	movlw	1
 24209  0340  00BC               	movwf	marquee@count
 24210  0341  3000               	movlw	0
 24211  0342  00BD               	movwf	marquee@count+1
 24212  0343  31A2  2215  3180   	fcall	_marquee
 24213  0346  2E27               	goto	l9919
 24214  0347                     l9869:	
 24215                           
 24216                           ;slot_task.c: 137: else if (data->displayTickCount < 300) {
 24217  0347  0020               	movlb	0	; select bank0
 24218  0348  0865               	movf	slot_Main@data,w
 24219  0349  0086               	movwf	6
 24220  034A  0866               	movf	slot_Main@data+1,w
 24221  034B  0087               	movwf	7
 24222  034C  3143               	addfsr 1,3
 24223  034D  3F40               	moviw [0]fsr1
 24224  034E  00D4               	movwf	??_slot_Main
 24225  034F  3F41               	moviw [1]fsr1
 24226  0350  00D5               	movwf	??_slot_Main+1
 24227  0351  3001               	movlw	1
 24228  0352  0255               	subwf	??_slot_Main+1,w
 24229  0353  302C               	movlw	44
 24230  0354  1903               	skipnz
 24231  0355  0254               	subwf	??_slot_Main,w
 24232  0356  1803               	skipnc
 24233  0357  2C1A               	goto	l9881
 24234                           
 24235                           ;slot_task.c: 138: slot_Running_Animation(data);
 24236  0358  0866               	movf	slot_Main@data+1,w
 24237  0359  00B3               	movwf	slot_Running_Animation@taskData+1
 24238  035A  0865               	movf	slot_Main@data,w
 24239  035B  00B2               	movwf	slot_Running_Animation@taskData
 24240  035C  31A9  213E  3180   	fcall	_slot_Running_Animation
 24241                           
 24242                           ;slot_task.c: 139: data->slot_wheel_index[2] = (u8)rand() % strlen(Slot_Wheel);
 24243  035F  3032               	movlw	low _Slot_Wheel
 24244  0360  00F1               	movwf	strlen@s
 24245  0361  3003               	movlw	high _Slot_Wheel
 24246  0362  00F2               	movwf	strlen@s+1
 24247  0363  31B4  2466  3180   	fcall	_strlen
 24248  0366  0872               	movf	?_strlen+1,w
 24249  0367  0020               	movlb	0	; select bank0
 24250  0368  00AC               	movwf	___lwmod@divisor+1
 24251  0369  0871               	movf	?_strlen,w
 24252  036A  00AB               	movwf	___lwmod@divisor
 24253  036B  31A8  20FB  3180   	fcall	_rand
 24254  036E  0020               	movlb	0	; select bank0
 24255  036F  0824               	movf	?_rand,w
 24256  0370  00D4               	movwf	??_slot_Main
 24257  0371  01D5               	clrf	??_slot_Main+1
 24258  0372  0854               	movf	??_slot_Main,w
 24259  0373  00AD               	movwf	___lwmod@dividend
 24260  0374  0855               	movf	??_slot_Main+1,w
 24261  0375  00AE               	movwf	___lwmod@dividend+1
 24262  0376  31B5  25A3  3180   	fcall	___lwmod
 24263  0379  0020               	movlb	0	; select bank0
 24264  037A  082B               	movf	?___lwmod,w
 24265  037B  00D6               	movwf	??_slot_Main+2
 24266  037C  0865               	movf	slot_Main@data,w
 24267  037D  3E09               	addlw	9
 24268  037E  00D7               	movwf	??_slot_Main+3
 24269  037F  3000               	movlw	0
 24270  0380  3D66               	addwfc	slot_Main@data+1,w
 24271  0381  00D8               	movwf	??_slot_Main+4
 24272  0382  0857               	movf	??_slot_Main+3,w
 24273  0383  0086               	movwf	6
 24274  0384  0858               	movf	??_slot_Main+4,w
 24275  0385  0087               	movwf	7
 24276  0386  0856               	movf	??_slot_Main+2,w
 24277  0387  0081               	movwf	1
 24278                           
 24279                           ;slot_task.c: 140: data->slot_wheel_index[3] = (u8)rand() % strlen(Slot_Wheel);
 24280  0388  3032               	movlw	low _Slot_Wheel
 24281  0389  00F1               	movwf	strlen@s
 24282  038A  3003               	movlw	high _Slot_Wheel
 24283  038B  00F2               	movwf	strlen@s+1
 24284  038C  31B4  2466  3180   	fcall	_strlen
 24285  038F  0872               	movf	?_strlen+1,w
 24286  0390  0020               	movlb	0	; select bank0
 24287  0391  00AC               	movwf	___lwmod@divisor+1
 24288  0392  0871               	movf	?_strlen,w
 24289  0393  00AB               	movwf	___lwmod@divisor
 24290  0394  31A8  20FB  3180   	fcall	_rand
 24291  0397  0020               	movlb	0	; select bank0
 24292  0398  0824               	movf	?_rand,w
 24293  0399  00D4               	movwf	??_slot_Main
 24294  039A  01D5               	clrf	??_slot_Main+1
 24295  039B  0854               	movf	??_slot_Main,w
 24296  039C  00AD               	movwf	___lwmod@dividend
 24297  039D  0855               	movf	??_slot_Main+1,w
 24298  039E  00AE               	movwf	___lwmod@dividend+1
 24299  039F  31B5  25A3  3180   	fcall	___lwmod
 24300  03A2  0020               	movlb	0	; select bank0
 24301  03A3  082B               	movf	?___lwmod,w
 24302  03A4  00D6               	movwf	??_slot_Main+2
 24303  03A5  0865               	movf	slot_Main@data,w
 24304  03A6  3E0A               	addlw	10
 24305  03A7  00D7               	movwf	??_slot_Main+3
 24306  03A8  3000               	movlw	0
 24307  03A9  3D66               	addwfc	slot_Main@data+1,w
 24308  03AA  00D8               	movwf	??_slot_Main+4
 24309  03AB  0857               	movf	??_slot_Main+3,w
 24310  03AC  0086               	movwf	6
 24311  03AD  0858               	movf	??_slot_Main+4,w
 24312  03AE  0087               	movwf	7
 24313  03AF  0856               	movf	??_slot_Main+2,w
 24314  03B0  0081               	movwf	1
 24315                           
 24316                           ;slot_task.c: 141: sprintf(data->slot_print_buf, "%c%c%c%c", Shot_Options[Shot_Index][0]
      +                          , Shot_Options[Shot_Index][1], Slot_Wheel[data->slot_wheel_index[2]], Slot_Wheel[data->s
      +                          lot_wheel_index[3]]);
 24317  03B1  0865               	movf	slot_Main@data,w
 24318  03B2  3E0B               	addlw	11
 24319  03B3  00AF               	movwf	sprintf@sp
 24320  03B4  3000               	movlw	0
 24321  03B5  3D66               	addwfc	slot_Main@data+1,w
 24322  03B6  00B0               	movwf	sprintf@sp+1
 24323  03B7  301C               	movlw	low (STR_66| (0+32768))
 24324  03B8  00B1               	movwf	sprintf@f
 24325  03B9  30BB               	movlw	high (STR_66| (0+32768))
 24326  03BA  00B2               	movwf	sprintf@f+1
 24327  03BB  357C               	lslf	_Shot_Index,w
 24328  03BC  3ED1               	addlw	(low (_Shot_Options| (0+256)))& (0+255)
 24329  03BD  0086               	movwf	6
 24330  03BE  3001               	movlw	1	; select bank3/4
 24331  03BF  0087               	movwf	7
 24332  03C0  3F40               	moviw [0]fsr1
 24333  03C1  00D4               	movwf	??_slot_Main
 24334  03C2  3F41               	moviw [1]fsr1
 24335  03C3  00D5               	movwf	??_slot_Main+1
 24336  03C4  0854               	movf	??_slot_Main,w
 24337  03C5  0084               	movwf	4
 24338  03C6  0855               	movf	??_slot_Main+1,w
 24339  03C7  0085               	movwf	5
 24340  03C8  0800               	movf	0,w	;code access
 24341  03C9  00D6               	movwf	??_slot_Main+2
 24342  03CA  01D7               	clrf	??_slot_Main+3
 24343  03CB  0856               	movf	??_slot_Main+2,w
 24344  03CC  00B3               	movwf	?_sprintf+4
 24345  03CD  0857               	movf	??_slot_Main+3,w
 24346  03CE  00B4               	movwf	?_sprintf+5
 24347  03CF  357C               	lslf	_Shot_Index,w
 24348  03D0  3ED1               	addlw	(low (_Shot_Options| (0+256)))& (0+255)
 24349  03D1  0086               	movwf	6
 24350  03D2  3001               	movlw	1	; select bank3/4
 24351  03D3  0087               	movwf	7
 24352  03D4  3F40               	moviw [0]fsr1
 24353  03D5  00D8               	movwf	??_slot_Main+4
 24354  03D6  3F41               	moviw [1]fsr1
 24355  03D7  00D9               	movwf	??_slot_Main+5
 24356  03D8  3001               	movlw	1
 24357  03D9  0758               	addwf	??_slot_Main+4,w
 24358  03DA  0084               	movwf	4
 24359  03DB  0859               	movf	??_slot_Main+5,w
 24360  03DC  1803               	skipnc
 24361  03DD  0A59               	incf	??_slot_Main+5,w
 24362  03DE  0085               	movwf	5
 24363  03DF  0800               	movf	0,w	;code access
 24364  03E0  00DA               	movwf	??_slot_Main+6
 24365  03E1  01DB               	clrf	??_slot_Main+7
 24366  03E2  085A               	movf	??_slot_Main+6,w
 24367  03E3  00B5               	movwf	?_sprintf+6
 24368  03E4  085B               	movf	??_slot_Main+7,w
 24369  03E5  00B6               	movwf	?_sprintf+7
 24370  03E6  0865               	movf	slot_Main@data,w
 24371  03E7  0086               	movwf	6
 24372  03E8  0866               	movf	slot_Main@data+1,w
 24373  03E9  0087               	movwf	7
 24374  03EA  3149               	addfsr 1,9
 24375  03EB  0801               	movf	1,w
 24376  03EC  3E32               	addlw	(low (_Slot_Wheel| (0+768)))& (0+255)
 24377  03ED  0086               	movwf	6
 24378  03EE  3003               	movlw	3	; select bank6/7
 24379  03EF  0087               	movwf	7
 24380  03F0  0801               	movf	1,w
 24381  03F1  00DC               	movwf	??_slot_Main+8
 24382  03F2  01DD               	clrf	??_slot_Main+9
 24383  03F3  085C               	movf	??_slot_Main+8,w
 24384  03F4  00B7               	movwf	?_sprintf+8
 24385  03F5  085D               	movf	??_slot_Main+9,w
 24386  03F6  00B8               	movwf	?_sprintf+9
 24387  03F7  0865               	movf	slot_Main@data,w
 24388  03F8  0086               	movwf	6
 24389  03F9  0866               	movf	slot_Main@data+1,w
 24390  03FA  0087               	movwf	7
 24391  03FB  314A               	addfsr 1,10
 24392  03FC  0801               	movf	1,w
 24393  03FD  3E32               	addlw	(low (_Slot_Wheel| (0+768)))& (0+255)
 24394  03FE  0086               	movwf	6
 24395  03FF  3003               	movlw	3	; select bank6/7
 24396  0400  0087               	movwf	7
 24397  0401  0801               	movf	1,w
 24398  0402  00DE               	movwf	??_slot_Main+10
 24399  0403  01DF               	clrf	??_slot_Main+11
 24400  0404  085E               	movf	??_slot_Main+10,w
 24401  0405  00B9               	movwf	?_sprintf+10
 24402  0406  085F               	movf	??_slot_Main+11,w
 24403  0407  00BA               	movwf	?_sprintf+11
 24404  0408  3199  216B  3180   	fcall	_sprintf
 24405                           
 24406                           ;slot_task.c: 142: marquee(data->slot_print_buf, 1);}
 24407  040B  0020               	movlb	0	; select bank0
 24408  040C  0865               	movf	slot_Main@data,w
 24409  040D  3E0B               	addlw	11
 24410  040E  00BA               	movwf	marquee@string
 24411  040F  3000               	movlw	0
 24412  0410  3D66               	addwfc	slot_Main@data+1,w
 24413  0411  00BB               	movwf	marquee@string+1
 24414  0412  3001               	movlw	1
 24415  0413  00BC               	movwf	marquee@count
 24416  0414  3000               	movlw	0
 24417  0415  00BD               	movwf	marquee@count+1
 24418  0416  31A2  2215  3180   	fcall	_marquee
 24419  0419  2E27               	goto	l9919
 24420  041A                     l9881:	
 24421                           
 24422                           ;slot_task.c: 143: else if (data->displayTickCount < 400) {
 24423  041A  0020               	movlb	0	; select bank0
 24424  041B  0865               	movf	slot_Main@data,w
 24425  041C  0086               	movwf	6
 24426  041D  0866               	movf	slot_Main@data+1,w
 24427  041E  0087               	movwf	7
 24428  041F  3143               	addfsr 1,3
 24429  0420  3F40               	moviw [0]fsr1
 24430  0421  00D4               	movwf	??_slot_Main
 24431  0422  3F41               	moviw [1]fsr1
 24432  0423  00D5               	movwf	??_slot_Main+1
 24433  0424  3001               	movlw	1
 24434  0425  0255               	subwf	??_slot_Main+1,w
 24435  0426  3090               	movlw	144
 24436  0427  1903               	skipnz
 24437  0428  0254               	subwf	??_slot_Main,w
 24438  0429  1803               	skipnc
 24439  042A  2CCA               	goto	l9891
 24440                           
 24441                           ;slot_task.c: 144: slot_Running_Animation(data);
 24442  042B  0866               	movf	slot_Main@data+1,w
 24443  042C  00B3               	movwf	slot_Running_Animation@taskData+1
 24444  042D  0865               	movf	slot_Main@data,w
 24445  042E  00B2               	movwf	slot_Running_Animation@taskData
 24446  042F  31A9  213E  3180   	fcall	_slot_Running_Animation
 24447                           
 24448                           ;slot_task.c: 145: data->slot_wheel_index[3] = (u8)rand() % strlen(Slot_Wheel);
 24449  0432  3032               	movlw	low _Slot_Wheel
 24450  0433  00F1               	movwf	strlen@s
 24451  0434  3003               	movlw	high _Slot_Wheel
 24452  0435  00F2               	movwf	strlen@s+1
 24453  0436  31B4  2466  3180   	fcall	_strlen
 24454  0439  0872               	movf	?_strlen+1,w
 24455  043A  0020               	movlb	0	; select bank0
 24456  043B  00AC               	movwf	___lwmod@divisor+1
 24457  043C  0871               	movf	?_strlen,w
 24458  043D  00AB               	movwf	___lwmod@divisor
 24459  043E  31A8  20FB  3180   	fcall	_rand
 24460  0441  0020               	movlb	0	; select bank0
 24461  0442  0824               	movf	?_rand,w
 24462  0443  00D4               	movwf	??_slot_Main
 24463  0444  01D5               	clrf	??_slot_Main+1
 24464  0445  0854               	movf	??_slot_Main,w
 24465  0446  00AD               	movwf	___lwmod@dividend
 24466  0447  0855               	movf	??_slot_Main+1,w
 24467  0448  00AE               	movwf	___lwmod@dividend+1
 24468  0449  31B5  25A3  3180   	fcall	___lwmod
 24469  044C  0020               	movlb	0	; select bank0
 24470  044D  082B               	movf	?___lwmod,w
 24471  044E  00D6               	movwf	??_slot_Main+2
 24472  044F  0865               	movf	slot_Main@data,w
 24473  0450  3E0A               	addlw	10
 24474  0451  00D7               	movwf	??_slot_Main+3
 24475  0452  3000               	movlw	0
 24476  0453  3D66               	addwfc	slot_Main@data+1,w
 24477  0454  00D8               	movwf	??_slot_Main+4
 24478  0455  0857               	movf	??_slot_Main+3,w
 24479  0456  0086               	movwf	6
 24480  0457  0858               	movf	??_slot_Main+4,w
 24481  0458  0087               	movwf	7
 24482  0459  0856               	movf	??_slot_Main+2,w
 24483  045A  0081               	movwf	1
 24484                           
 24485                           ;slot_task.c: 146: sprintf(data->slot_print_buf, "%c%c%c%c", Shot_Options[Shot_Index][0]
      +                          , Shot_Options[Shot_Index][1], Shot_Options[Shot_Index][2], Slot_Wheel[data->slot_wheel_
      +                          index[3]]);
 24486  045B  0865               	movf	slot_Main@data,w
 24487  045C  3E0B               	addlw	11
 24488  045D  00AF               	movwf	sprintf@sp
 24489  045E  3000               	movlw	0
 24490  045F  3D66               	addwfc	slot_Main@data+1,w
 24491  0460  00B0               	movwf	sprintf@sp+1
 24492  0461  301C               	movlw	low (STR_66| (0+32768))
 24493  0462  00B1               	movwf	sprintf@f
 24494  0463  30BB               	movlw	high (STR_66| (0+32768))
 24495  0464  00B2               	movwf	sprintf@f+1
 24496  0465  357C               	lslf	_Shot_Index,w
 24497  0466  3ED1               	addlw	(low (_Shot_Options| (0+256)))& (0+255)
 24498  0467  0086               	movwf	6
 24499  0468  3001               	movlw	1	; select bank3/4
 24500  0469  0087               	movwf	7
 24501  046A  3F40               	moviw [0]fsr1
 24502  046B  00D4               	movwf	??_slot_Main
 24503  046C  3F41               	moviw [1]fsr1
 24504  046D  00D5               	movwf	??_slot_Main+1
 24505  046E  0854               	movf	??_slot_Main,w
 24506  046F  0084               	movwf	4
 24507  0470  0855               	movf	??_slot_Main+1,w
 24508  0471  0085               	movwf	5
 24509  0472  0800               	movf	0,w	;code access
 24510  0473  00D6               	movwf	??_slot_Main+2
 24511  0474  01D7               	clrf	??_slot_Main+3
 24512  0475  0856               	movf	??_slot_Main+2,w
 24513  0476  00B3               	movwf	?_sprintf+4
 24514  0477  0857               	movf	??_slot_Main+3,w
 24515  0478  00B4               	movwf	?_sprintf+5
 24516  0479  357C               	lslf	_Shot_Index,w
 24517  047A  3ED1               	addlw	(low (_Shot_Options| (0+256)))& (0+255)
 24518  047B  0086               	movwf	6
 24519  047C  3001               	movlw	1	; select bank3/4
 24520  047D  0087               	movwf	7
 24521  047E  3F40               	moviw [0]fsr1
 24522  047F  00D8               	movwf	??_slot_Main+4
 24523  0480  3F41               	moviw [1]fsr1
 24524  0481  00D9               	movwf	??_slot_Main+5
 24525  0482  3001               	movlw	1
 24526  0483  0758               	addwf	??_slot_Main+4,w
 24527  0484  0084               	movwf	4
 24528  0485  0859               	movf	??_slot_Main+5,w
 24529  0486  1803               	skipnc
 24530  0487  0A59               	incf	??_slot_Main+5,w
 24531  0488  0085               	movwf	5
 24532  0489  0800               	movf	0,w	;code access
 24533  048A  00DA               	movwf	??_slot_Main+6
 24534  048B  01DB               	clrf	??_slot_Main+7
 24535  048C  085A               	movf	??_slot_Main+6,w
 24536  048D  00B5               	movwf	?_sprintf+6
 24537  048E  085B               	movf	??_slot_Main+7,w
 24538  048F  00B6               	movwf	?_sprintf+7
 24539  0490  357C               	lslf	_Shot_Index,w
 24540  0491  3ED1               	addlw	(low (_Shot_Options| (0+256)))& (0+255)
 24541  0492  0086               	movwf	6
 24542  0493  3001               	movlw	1	; select bank3/4
 24543  0494  0087               	movwf	7
 24544  0495  3F40               	moviw [0]fsr1
 24545  0496  00DC               	movwf	??_slot_Main+8
 24546  0497  3F41               	moviw [1]fsr1
 24547  0498  00DD               	movwf	??_slot_Main+9
 24548  0499  3002               	movlw	2
 24549  049A  075C               	addwf	??_slot_Main+8,w
 24550  049B  0084               	movwf	4
 24551  049C  085D               	movf	??_slot_Main+9,w
 24552  049D  1803               	skipnc
 24553  049E  0A5D               	incf	??_slot_Main+9,w
 24554  049F  0085               	movwf	5
 24555  04A0  0800               	movf	0,w	;code access
 24556  04A1  00DE               	movwf	??_slot_Main+10
 24557  04A2  01DF               	clrf	??_slot_Main+11
 24558  04A3  085E               	movf	??_slot_Main+10,w
 24559  04A4  00B7               	movwf	?_sprintf+8
 24560  04A5  085F               	movf	??_slot_Main+11,w
 24561  04A6  00B8               	movwf	?_sprintf+9
 24562  04A7  0865               	movf	slot_Main@data,w
 24563  04A8  0086               	movwf	6
 24564  04A9  0866               	movf	slot_Main@data+1,w
 24565  04AA  0087               	movwf	7
 24566  04AB  314A               	addfsr 1,10
 24567  04AC  0801               	movf	1,w
 24568  04AD  3E32               	addlw	(low (_Slot_Wheel| (0+768)))& (0+255)
 24569  04AE  0086               	movwf	6
 24570  04AF  3003               	movlw	3	; select bank6/7
 24571  04B0  0087               	movwf	7
 24572  04B1  0801               	movf	1,w
 24573  04B2  00E0               	movwf	??_slot_Main+12
 24574  04B3  01E1               	clrf	??_slot_Main+13
 24575  04B4  0860               	movf	??_slot_Main+12,w
 24576  04B5  00B9               	movwf	?_sprintf+10
 24577  04B6  0861               	movf	??_slot_Main+13,w
 24578  04B7  00BA               	movwf	?_sprintf+11
 24579  04B8  3199  216B  3180   	fcall	_sprintf
 24580                           
 24581                           ;slot_task.c: 148: marquee(data->slot_print_buf, 1);}
 24582  04BB  0020               	movlb	0	; select bank0
 24583  04BC  0865               	movf	slot_Main@data,w
 24584  04BD  3E0B               	addlw	11
 24585  04BE  00BA               	movwf	marquee@string
 24586  04BF  3000               	movlw	0
 24587  04C0  3D66               	addwfc	slot_Main@data+1,w
 24588  04C1  00BB               	movwf	marquee@string+1
 24589  04C2  3001               	movlw	1
 24590  04C3  00BC               	movwf	marquee@count
 24591  04C4  3000               	movlw	0
 24592  04C5  00BD               	movwf	marquee@count+1
 24593  04C6  31A2  2215  3180   	fcall	_marquee
 24594  04C9  2E27               	goto	l9919
 24595  04CA                     l9891:	
 24596                           
 24597                           ;slot_task.c: 149: else if (data->displayTickCount < 500) {
 24598  04CA  0020               	movlb	0	; select bank0
 24599  04CB  0865               	movf	slot_Main@data,w
 24600  04CC  0086               	movwf	6
 24601  04CD  0866               	movf	slot_Main@data+1,w
 24602  04CE  0087               	movwf	7
 24603  04CF  3143               	addfsr 1,3
 24604  04D0  3F40               	moviw [0]fsr1
 24605  04D1  00D4               	movwf	??_slot_Main
 24606  04D2  3F41               	moviw [1]fsr1
 24607  04D3  00D5               	movwf	??_slot_Main+1
 24608  04D4  3001               	movlw	1
 24609  04D5  0255               	subwf	??_slot_Main+1,w
 24610  04D6  30F4               	movlw	244
 24611  04D7  1903               	skipnz
 24612  04D8  0254               	subwf	??_slot_Main,w
 24613  04D9  1803               	skipnc
 24614  04DA  2D83               	goto	l9899
 24615                           
 24616                           ;slot_task.c: 150: slot_Finished_Animation(data);
 24617  04DB  0866               	movf	slot_Main@data+1,w
 24618  04DC  00BE               	movwf	slot_Finished_Animation@taskData+1
 24619  04DD  0865               	movf	slot_Main@data,w
 24620  04DE  00BD               	movwf	slot_Finished_Animation@taskData
 24621  04DF  31B5  2552  3180   	fcall	_slot_Finished_Animation
 24622                           
 24623                           ;slot_task.c: 151: if ( data->displayTickCount % 50 <= 25 ) {
 24624  04E2  3032               	movlw	50
 24625  04E3  0020               	movlb	0	; select bank0
 24626  04E4  00AB               	movwf	___lwmod@divisor
 24627  04E5  3000               	movlw	0
 24628  04E6  00AC               	movwf	___lwmod@divisor+1
 24629  04E7  0865               	movf	slot_Main@data,w
 24630  04E8  0086               	movwf	6
 24631  04E9  0866               	movf	slot_Main@data+1,w
 24632  04EA  0087               	movwf	7
 24633  04EB  3143               	addfsr 1,3
 24634  04EC  3F40               	moviw [0]fsr1
 24635  04ED  00AD               	movwf	___lwmod@dividend
 24636  04EE  3F41               	moviw [1]fsr1
 24637  04EF  00AE               	movwf	___lwmod@dividend+1
 24638  04F0  31B5  25A3  3180   	fcall	___lwmod
 24639  04F3  3000               	movlw	0
 24640  04F4  0020               	movlb	0	; select bank0
 24641  04F5  022C               	subwf	?___lwmod+1,w
 24642  04F6  301A               	movlw	26
 24643  04F7  1903               	skipnz
 24644  04F8  022B               	subwf	?___lwmod,w
 24645  04F9  1803               	skipnc
 24646  04FA  2D0D               	goto	l9897
 24647                           
 24648                           ;slot_task.c: 152: memset(data->slot_print_buf, 0x20, 4);
 24649  04FB  0865               	movf	slot_Main@data,w
 24650  04FC  3E0B               	addlw	11
 24651  04FD  00F1               	movwf	memset@p1
 24652  04FE  3000               	movlw	0
 24653  04FF  3D66               	addwfc	slot_Main@data+1,w
 24654  0500  00F2               	movwf	memset@p1+1
 24655  0501  3020               	movlw	32
 24656  0502  00F3               	movwf	memset@c
 24657  0503  3000               	movlw	0
 24658  0504  00F4               	movwf	memset@c+1
 24659  0505  3004               	movlw	4
 24660  0506  00F5               	movwf	memset@n
 24661  0507  3000               	movlw	0
 24662  0508  00F6               	movwf	memset@n+1
 24663  0509  31B3  23C2  3180   	fcall	_memset
 24664                           
 24665                           ;slot_task.c: 153: }
 24666  050C  2D74               	goto	l1462
 24667  050D                     l9897:	
 24668                           
 24669                           ;slot_task.c: 154: else {
 24670                           ;slot_task.c: 155: sprintf(data->slot_print_buf, "%c%c%c%c", Shot_Options[Shot_Index][0]
      +                          , Shot_Options[Shot_Index][1], Shot_Options[Shot_Index][2], Shot_Options[Shot_Index][3])
      +                          ;
 24671  050D  0020               	movlb	0	; select bank0
 24672  050E  0865               	movf	slot_Main@data,w
 24673  050F  3E0B               	addlw	11
 24674  0510  00AF               	movwf	sprintf@sp
 24675  0511  3000               	movlw	0
 24676  0512  3D66               	addwfc	slot_Main@data+1,w
 24677  0513  00B0               	movwf	sprintf@sp+1
 24678  0514  301C               	movlw	low (STR_66| (0+32768))
 24679  0515  00B1               	movwf	sprintf@f
 24680  0516  30BB               	movlw	high (STR_66| (0+32768))
 24681  0517  00B2               	movwf	sprintf@f+1
 24682  0518  357C               	lslf	_Shot_Index,w
 24683  0519  3ED1               	addlw	(low (_Shot_Options| (0+256)))& (0+255)
 24684  051A  0086               	movwf	6
 24685  051B  3001               	movlw	1	; select bank3/4
 24686  051C  0087               	movwf	7
 24687  051D  3F40               	moviw [0]fsr1
 24688  051E  00D4               	movwf	??_slot_Main
 24689  051F  3F41               	moviw [1]fsr1
 24690  0520  00D5               	movwf	??_slot_Main+1
 24691  0521  0854               	movf	??_slot_Main,w
 24692  0522  0084               	movwf	4
 24693  0523  0855               	movf	??_slot_Main+1,w
 24694  0524  0085               	movwf	5
 24695  0525  0800               	movf	0,w	;code access
 24696  0526  00D6               	movwf	??_slot_Main+2
 24697  0527  01D7               	clrf	??_slot_Main+3
 24698  0528  0856               	movf	??_slot_Main+2,w
 24699  0529  00B3               	movwf	?_sprintf+4
 24700  052A  0857               	movf	??_slot_Main+3,w
 24701  052B  00B4               	movwf	?_sprintf+5
 24702  052C  357C               	lslf	_Shot_Index,w
 24703  052D  3ED1               	addlw	(low (_Shot_Options| (0+256)))& (0+255)
 24704  052E  0086               	movwf	6
 24705  052F  3001               	movlw	1	; select bank3/4
 24706  0530  0087               	movwf	7
 24707  0531  3F40               	moviw [0]fsr1
 24708  0532  00D8               	movwf	??_slot_Main+4
 24709  0533  3F41               	moviw [1]fsr1
 24710  0534  00D9               	movwf	??_slot_Main+5
 24711  0535  3001               	movlw	1
 24712  0536  0758               	addwf	??_slot_Main+4,w
 24713  0537  0084               	movwf	4
 24714  0538  0859               	movf	??_slot_Main+5,w
 24715  0539  1803               	skipnc
 24716  053A  0A59               	incf	??_slot_Main+5,w
 24717  053B  0085               	movwf	5
 24718  053C  0800               	movf	0,w	;code access
 24719  053D  00DA               	movwf	??_slot_Main+6
 24720  053E  01DB               	clrf	??_slot_Main+7
 24721  053F  085A               	movf	??_slot_Main+6,w
 24722  0540  00B5               	movwf	?_sprintf+6
 24723  0541  085B               	movf	??_slot_Main+7,w
 24724  0542  00B6               	movwf	?_sprintf+7
 24725  0543  357C               	lslf	_Shot_Index,w
 24726  0544  3ED1               	addlw	(low (_Shot_Options| (0+256)))& (0+255)
 24727  0545  0086               	movwf	6
 24728  0546  3001               	movlw	1	; select bank3/4
 24729  0547  0087               	movwf	7
 24730  0548  3F40               	moviw [0]fsr1
 24731  0549  00DC               	movwf	??_slot_Main+8
 24732  054A  3F41               	moviw [1]fsr1
 24733  054B  00DD               	movwf	??_slot_Main+9
 24734  054C  3002               	movlw	2
 24735  054D  075C               	addwf	??_slot_Main+8,w
 24736  054E  0084               	movwf	4
 24737  054F  085D               	movf	??_slot_Main+9,w
 24738  0550  1803               	skipnc
 24739  0551  0A5D               	incf	??_slot_Main+9,w
 24740  0552  0085               	movwf	5
 24741  0553  0800               	movf	0,w	;code access
 24742  0554  00DE               	movwf	??_slot_Main+10
 24743  0555  01DF               	clrf	??_slot_Main+11
 24744  0556  085E               	movf	??_slot_Main+10,w
 24745  0557  00B7               	movwf	?_sprintf+8
 24746  0558  085F               	movf	??_slot_Main+11,w
 24747  0559  00B8               	movwf	?_sprintf+9
 24748  055A  357C               	lslf	_Shot_Index,w
 24749  055B  3ED1               	addlw	(low (_Shot_Options| (0+256)))& (0+255)
 24750  055C  0086               	movwf	6
 24751  055D  3001               	movlw	1	; select bank3/4
 24752  055E  0087               	movwf	7
 24753  055F  3F40               	moviw [0]fsr1
 24754  0560  00E0               	movwf	??_slot_Main+12
 24755  0561  3F41               	moviw [1]fsr1
 24756  0562  00E1               	movwf	??_slot_Main+13
 24757  0563  3003               	movlw	3
 24758  0564  0760               	addwf	??_slot_Main+12,w
 24759  0565  0084               	movwf	4
 24760  0566  0861               	movf	??_slot_Main+13,w
 24761  0567  1803               	skipnc
 24762  0568  0A61               	incf	??_slot_Main+13,w
 24763  0569  0085               	movwf	5
 24764  056A  0800               	movf	0,w	;code access
 24765  056B  00E2               	movwf	??_slot_Main+14
 24766  056C  01E3               	clrf	??_slot_Main+15
 24767  056D  0862               	movf	??_slot_Main+14,w
 24768  056E  00B9               	movwf	?_sprintf+10
 24769  056F  0863               	movf	??_slot_Main+15,w
 24770  0570  00BA               	movwf	?_sprintf+11
 24771  0571  3199  216B  3180   	fcall	_sprintf
 24772  0574                     l1462:	
 24773                           
 24774                           ;slot_task.c: 156: }
 24775                           ;slot_task.c: 157: marquee(data->slot_print_buf, 1);
 24776  0574  0020               	movlb	0	; select bank0
 24777  0575  0865               	movf	slot_Main@data,w
 24778  0576  3E0B               	addlw	11
 24779  0577  00BA               	movwf	marquee@string
 24780  0578  3000               	movlw	0
 24781  0579  3D66               	addwfc	slot_Main@data+1,w
 24782  057A  00BB               	movwf	marquee@string+1
 24783  057B  3001               	movlw	1
 24784  057C  00BC               	movwf	marquee@count
 24785  057D  3000               	movlw	0
 24786  057E  00BD               	movwf	marquee@count+1
 24787  057F  31A2  2215  3180   	fcall	_marquee
 24788                           
 24789                           ;slot_task.c: 158: }
 24790  0582  2E27               	goto	l9919
 24791  0583                     l9899:	
 24792                           
 24793                           ;slot_task.c: 159: else {
 24794                           ;slot_task.c: 160: slot_Finished_Animation(data);
 24795  0583  0020               	movlb	0	; select bank0
 24796  0584  0866               	movf	slot_Main@data+1,w
 24797  0585  00BE               	movwf	slot_Finished_Animation@taskData+1
 24798  0586  0865               	movf	slot_Main@data,w
 24799  0587  00BD               	movwf	slot_Finished_Animation@taskData
 24800  0588  31B5  2552  3180   	fcall	_slot_Finished_Animation
 24801                           
 24802                           ;slot_task.c: 161: if ( data->displayTickCount % 50 <= 25 ) {
 24803  058B  3032               	movlw	50
 24804  058C  0020               	movlb	0	; select bank0
 24805  058D  00AB               	movwf	___lwmod@divisor
 24806  058E  3000               	movlw	0
 24807  058F  00AC               	movwf	___lwmod@divisor+1
 24808  0590  0865               	movf	slot_Main@data,w
 24809  0591  0086               	movwf	6
 24810  0592  0866               	movf	slot_Main@data+1,w
 24811  0593  0087               	movwf	7
 24812  0594  3143               	addfsr 1,3
 24813  0595  3F40               	moviw [0]fsr1
 24814  0596  00AD               	movwf	___lwmod@dividend
 24815  0597  3F41               	moviw [1]fsr1
 24816  0598  00AE               	movwf	___lwmod@dividend+1
 24817  0599  31B5  25A3  3180   	fcall	___lwmod
 24818  059C  3000               	movlw	0
 24819  059D  0020               	movlb	0	; select bank0
 24820  059E  022C               	subwf	?___lwmod+1,w
 24821  059F  301A               	movlw	26
 24822  05A0  1903               	skipnz
 24823  05A1  022B               	subwf	?___lwmod,w
 24824  05A2  1803               	skipnc
 24825  05A3  2DB6               	goto	l9903
 24826                           
 24827                           ;slot_task.c: 162: memset(data->slot_print_buf, 0x20, 4);
 24828  05A4  0865               	movf	slot_Main@data,w
 24829  05A5  3E0B               	addlw	11
 24830  05A6  00F1               	movwf	memset@p1
 24831  05A7  3000               	movlw	0
 24832  05A8  3D66               	addwfc	slot_Main@data+1,w
 24833  05A9  00F2               	movwf	memset@p1+1
 24834  05AA  3020               	movlw	32
 24835  05AB  00F3               	movwf	memset@c
 24836  05AC  3000               	movlw	0
 24837  05AD  00F4               	movwf	memset@c+1
 24838  05AE  3004               	movlw	4
 24839  05AF  00F5               	movwf	memset@n
 24840  05B0  3000               	movlw	0
 24841  05B1  00F6               	movwf	memset@n+1
 24842  05B2  31B3  23C2  3180   	fcall	_memset
 24843                           
 24844                           ;slot_task.c: 163: }
 24845  05B5  2DCD               	goto	l1465
 24846  05B6                     l9903:	
 24847                           
 24848                           ;slot_task.c: 164: else {
 24849                           ;slot_task.c: 165: sprintf(data->slot_print_buf, "%s", Shot_Options_Long[Shot_Index]);
 24850  05B6  0020               	movlb	0	; select bank0
 24851  05B7  0865               	movf	slot_Main@data,w
 24852  05B8  3E0B               	addlw	11
 24853  05B9  00AF               	movwf	sprintf@sp
 24854  05BA  3000               	movlw	0
 24855  05BB  3D66               	addwfc	slot_Main@data+1,w
 24856  05BC  00B0               	movwf	sprintf@sp+1
 24857  05BD  3009               	movlw	low (STR_71| (0+32768))
 24858  05BE  00B1               	movwf	sprintf@f
 24859  05BF  30BC               	movlw	high (STR_71| (0+32768))
 24860  05C0  00B2               	movwf	sprintf@f+1
 24861  05C1  357C               	lslf	_Shot_Index,w
 24862  05C2  3E20               	addlw	(low (_Shot_Options_Long| (0+768)))& (0+255)
 24863  05C3  0086               	movwf	6
 24864  05C4  3003               	movlw	3	; select bank6/7
 24865  05C5  0087               	movwf	7
 24866  05C6  3F40               	moviw [0]fsr1
 24867  05C7  00B3               	movwf	low ((?_sprintf| 0+4))
 24868  05C8  3F41               	moviw [1]fsr1
 24869  05C9  00B4               	movwf	(low ((?_sprintf| 0+4))+1)
 24870  05CA  3199  216B  3180   	fcall	_sprintf
 24871  05CD                     l1465:	
 24872                           
 24873                           ;slot_task.c: 166: }
 24874                           ;slot_task.c: 168: marquee_speedy(data->slot_print_buf, data->displayTickCount, 20);
 24875  05CD  0020               	movlb	0	; select bank0
 24876  05CE  0865               	movf	slot_Main@data,w
 24877  05CF  3E0B               	addlw	11
 24878  05D0  00BA               	movwf	marquee_speedy@string
 24879  05D1  3000               	movlw	0
 24880  05D2  3D66               	addwfc	slot_Main@data+1,w
 24881  05D3  00BB               	movwf	marquee_speedy@string+1
 24882  05D4  0865               	movf	slot_Main@data,w
 24883  05D5  0086               	movwf	6
 24884  05D6  0866               	movf	slot_Main@data+1,w
 24885  05D7  0087               	movwf	7
 24886  05D8  3143               	addfsr 1,3
 24887  05D9  3F40               	moviw [0]fsr1
 24888  05DA  00BC               	movwf	marquee_speedy@count
 24889  05DB  3F41               	moviw [1]fsr1
 24890  05DC  00BD               	movwf	marquee_speedy@count+1
 24891  05DD  3014               	movlw	20
 24892  05DE  00BE               	movwf	marquee_speedy@multiplier
 24893  05DF  3000               	movlw	0
 24894  05E0  00BF               	movwf	marquee_speedy@multiplier+1
 24895  05E1  31AF  278D  3180   	fcall	_marquee_speedy
 24896                           
 24897                           ;slot_task.c: 169: if (data->displayTickCount == 500 + (50 * 10)) {
 24898  05E4  0020               	movlb	0	; select bank0
 24899  05E5  0865               	movf	slot_Main@data,w
 24900  05E6  0086               	movwf	6
 24901  05E7  0866               	movf	slot_Main@data+1,w
 24902  05E8  0087               	movwf	7
 24903  05E9  3143               	addfsr 1,3
 24904  05EA  0016               	moviw fsr1++
 24905  05EB  3AE8               	xorlw	232
 24906  05EC  00D4               	movwf	??_slot_Main
 24907  05ED  0016               	moviw fsr1++
 24908  05EE  3A03               	xorlw	3
 24909  05EF  04D4               	iorwf	??_slot_Main,f
 24910  05F0  1D03               	btfss	3,2
 24911  05F1  2E27               	goto	l9919
 24912                           
 24913                           ;slot_task.c: 170: currentTask = MENU_TASK;
 24914  05F2  0021               	movlb	1	; select bank1
 24915  05F3  01BA               	clrf	_currentTask^(0+128)
 24916  05F4  01BB               	clrf	(_currentTask+1)^(0+128)
 24917                           
 24918                           ;slot_task.c: 173: slot_Setup(slot_taskData);
 24919  05F5  083D               	movf	(_slot_taskData+1)^(0+128),w
 24920  05F6  0020               	movlb	0	; select bank0
 24921  05F7  00B0               	movwf	slot_Setup@taskData+1
 24922  05F8  0021               	movlb	1	; select bank1
 24923  05F9  083C               	movf	_slot_taskData^(0+128),w
 24924  05FA  0020               	movlb	0	; select bank0
 24925  05FB  00AF               	movwf	slot_Setup@taskData
 24926  05FC  31AB  23DA         	fcall	_slot_Setup
 24927                           
 24928                           ;slot_task.c: 176: data->holdCountA = 1;
 24929  05FE  0020               	movlb	0	; select bank0
 24930  05FF  0865               	movf	slot_Main@data,w
 24931  0600  0086               	movwf	6
 24932  0601  0866               	movf	slot_Main@data+1,w
 24933  0602  0087               	movwf	7
 24934  0603  315F               	addfsr 1,31
 24935  0604  3001               	movlw	1
 24936  0605  3FC0               	movwi [0]fsr1
 24937  0606  3000               	movlw	0
 24938  0607  3FC1               	movwi [1]fsr1
 24939                           
 24940                           ;slot_task.c: 177: data->holdCountB = 1;
 24941  0608  0865               	movf	slot_Main@data,w
 24942  0609  3E21               	addlw	33
 24943  060A  0086               	movwf	6
 24944  060B  3000               	movlw	0
 24945  060C  3D66               	addwfc	slot_Main@data+1,w
 24946  060D  0087               	movwf	7
 24947  060E  3001               	movlw	1
 24948  060F  3FC0               	movwi [0]fsr1
 24949  0610  3000               	movlw	0
 24950  0611  3FC1               	movwi [1]fsr1
 24951                           
 24952                           ;slot_task.c: 178: data->holdCountX = 1;
 24953  0612  0865               	movf	slot_Main@data,w
 24954  0613  3E23               	addlw	35
 24955  0614  0086               	movwf	6
 24956  0615  3000               	movlw	0
 24957  0616  3D66               	addwfc	slot_Main@data+1,w
 24958  0617  0087               	movwf	7
 24959  0618  3001               	movlw	1
 24960  0619  3FC0               	movwi [0]fsr1
 24961  061A  3000               	movlw	0
 24962  061B  3FC1               	movwi [1]fsr1
 24963                           
 24964                           ;slot_task.c: 179: data->holdCountY = 1;
 24965  061C  0865               	movf	slot_Main@data,w
 24966  061D  3E25               	addlw	37
 24967  061E  0086               	movwf	6
 24968  061F  3000               	movlw	0
 24969  0620  3D66               	addwfc	slot_Main@data+1,w
 24970  0621  0087               	movwf	7
 24971  0622  3001               	movlw	1
 24972  0623  3FC0               	movwi [0]fsr1
 24973  0624  3000               	movlw	0
 24974  0625  3FC1               	movwi [1]fsr1
 24975                           
 24976                           ;slot_task.c: 180: break;
 24977  0626  0008               	return
 24978  0627                     l9919:	
 24979                           
 24980                           ;slot_task.c: 181: }
 24981                           ;slot_task.c: 182: }
 24982                           ;slot_task.c: 184: data->displayTickCount += 1;
 24983  0627  0020               	movlb	0	; select bank0
 24984  0628  0865               	movf	slot_Main@data,w
 24985  0629  0086               	movwf	6
 24986  062A  0866               	movf	slot_Main@data+1,w
 24987  062B  0087               	movwf	7
 24988  062C  3143               	addfsr 1,3
 24989  062D  3001               	movlw	1
 24990  062E  0781               	addwf	1,f
 24991  062F  3141               	addfsr 1,1
 24992  0630  1803               	skipnc
 24993  0631  0A81               	incf	1,f
 24994                           
 24995                           ;slot_task.c: 185: data->holdCountA = 0;
 24996  0632  0865               	movf	slot_Main@data,w
 24997  0633  0086               	movwf	6
 24998  0634  0866               	movf	slot_Main@data+1,w
 24999  0635  0087               	movwf	7
 25000  0636  315F               	addfsr 1,31
 25001  0637  3000               	movlw	0
 25002  0638  3FC0               	movwi [0]fsr1
 25003  0639  3FC1               	movwi [1]fsr1
 25004                           
 25005                           ;slot_task.c: 186: data->holdCountB = 0;
 25006  063A  0865               	movf	slot_Main@data,w
 25007  063B  3E21               	addlw	33
 25008  063C  0086               	movwf	6
 25009  063D  3000               	movlw	0
 25010  063E  3D66               	addwfc	slot_Main@data+1,w
 25011  063F  0087               	movwf	7
 25012  0640  3000               	movlw	0
 25013  0641  3FC0               	movwi [0]fsr1
 25014  0642  3FC1               	movwi [1]fsr1
 25015                           
 25016                           ;slot_task.c: 187: data->holdCountX = 0;
 25017  0643  0865               	movf	slot_Main@data,w
 25018  0644  3E23               	addlw	35
 25019  0645  0086               	movwf	6
 25020  0646  3000               	movlw	0
 25021  0647  3D66               	addwfc	slot_Main@data+1,w
 25022  0648  0087               	movwf	7
 25023  0649  3000               	movlw	0
 25024  064A  3FC0               	movwi [0]fsr1
 25025  064B  3FC1               	movwi [1]fsr1
 25026                           
 25027                           ;slot_task.c: 188: data->holdCountY = 0;
 25028  064C  0865               	movf	slot_Main@data,w
 25029  064D  3E25               	addlw	37
 25030  064E  0086               	movwf	6
 25031  064F  3000               	movlw	0
 25032  0650  3D66               	addwfc	slot_Main@data+1,w
 25033  0651  0087               	movwf	7
 25034  0652  3000               	movlw	0
 25035  0653  3FC0               	movwi [0]fsr1
 25036  0654  3FC1               	movwi [1]fsr1
 25037                           
 25038                           ;slot_task.c: 189: data->noholdCount += 1;
 25039  0655  0865               	movf	slot_Main@data,w
 25040  0656  3E27               	addlw	39
 25041  0657  0086               	movwf	6
 25042  0658  3000               	movlw	0
 25043  0659  3D66               	addwfc	slot_Main@data+1,w
 25044  065A  0087               	movwf	7
 25045  065B  3001               	movlw	1
 25046  065C  0781               	addwf	1,f
 25047  065D  3141               	addfsr 1,1
 25048  065E  1803               	skipnc
 25049  065F  0A81               	incf	1,f
 25050                           
 25051                           ;slot_task.c: 190: }
 25052  0660  0008               	return
 25053  0661                     __end_of_slot_Main:	
 25054                           
 25055                           	psect	text20
 25056  293E                     __ptext20:	
 25057 ;; *************** function _slot_Running_Animation *****************
 25058 ;; Defined at:
 25059 ;;		line 64 in file "slot_task.c"
 25060 ;; Parameters:    Size  Location     Type
 25061 ;;  taskData        2   18[BANK0 ] PTR void 
 25062 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 25063 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 25064 ;; Auto vars:     Size  Location     Type
 25065 ;;  data            2   22[BANK0 ] PTR struct t_slot_taskDa
 25066 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 25067 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 25068 ;; Return value:  Size  Location     Type
 25069 ;;                  1    wreg      void 
 25070 ;; Registers used:
 25071 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 25072 ;; Tracked objects:
 25073 ;;		On entry : 0/0
 25074 ;;		On exit  : 0/0
 25075 ;;		Unchanged: 0/0
 25076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25077 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25078 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25079 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25080 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25081 ;;Total ram usage:        6 bytes
 25082 ;; Hardware stack levels used:    1
 25083 ;; Hardware stack levels required when called:   10
 25084 ;; This function calls:
 25085 ;;		_led_circle
 25086 ;; This function is called by:
 25087 ;;		_slot_Main
 25088 ;; This function uses a non-reentrant model
 25089 ;;
 25090                           
 25091                           
 25092                           ;psect for function _slot_Running_Animation
 25093  293E                     _slot_Running_Animation:	
 25094                           
 25095                           ;slot_task.c: 65: struct t_slot_taskData *data = (struct t_slot_taskData *) taskData;
 25096                           
 25097                           ;incstack = 0
 25098                           ; Regs used in _slot_Running_Animation: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 25099  293E  0020               	movlb	0	; select bank0
 25100  293F  0833               	movf	slot_Running_Animation@taskData+1,w
 25101  2940  00B7               	movwf	slot_Running_Animation@data+1
 25102  2941  0832               	movf	slot_Running_Animation@taskData,w
 25103  2942  00B6               	movwf	slot_Running_Animation@data
 25104                           
 25105                           ;slot_task.c: 66: if (data->delayTickCount ==0 ){
 25106  2943  0836               	movf	slot_Running_Animation@data,w
 25107  2944  0086               	movwf	6
 25108  2945  0837               	movf	slot_Running_Animation@data+1,w
 25109  2946  0087               	movwf	7
 25110  2947  3145               	addfsr 1,5
 25111  2948  0016               	moviw fsr1++
 25112  2949  0401               	iorwf	1,w
 25113  294A  1D03               	btfss	3,2
 25114  294B  2978               	goto	l8943
 25115                           
 25116                           ;slot_task.c: 67: if (Leds_idx == 1024 ){
 25117  294C  3004               	movlw	4
 25118  294D  0021               	movlb	1	; select bank1
 25119  294E  0651               	xorwf	(_Leds_idx+1)^(0+128),w
 25120  294F  0450               	iorwf	_Leds_idx^(0+128),w
 25121  2950  1D03               	btfss	3,2
 25122  2951  2956               	goto	l8935
 25123                           
 25124                           ;slot_task.c: 68: Leds_idx = Leds_idx << 1;
 25125  2952  3550               	lslf	_Leds_idx^(0+128),w
 25126  2953  00D0               	movwf	_Leds_idx^(0+128)
 25127  2954  0D51               	rlf	(_Leds_idx+1)^(0+128),w
 25128  2955  00D1               	movwf	(_Leds_idx+1)^(0+128)
 25129  2956                     l8935:	
 25130                           
 25131                           ;slot_task.c: 69: }
 25132                           ;slot_task.c: 70: led_circle(Leds_idx);
 25133  2956  0851               	movf	(_Leds_idx+1)^(0+128),w
 25134  2957  0020               	movlb	0	; select bank0
 25135  2958  00B1               	movwf	led_circle@count+1
 25136  2959  0021               	movlb	1	; select bank1
 25137  295A  0850               	movf	_Leds_idx^(0+128),w
 25138  295B  0020               	movlb	0	; select bank0
 25139  295C  00B0               	movwf	led_circle@count
 25140  295D  31B2  2203  31A9   	fcall	_led_circle
 25141                           
 25142                           ;slot_task.c: 71: if (Leds_idx < 1 ){
 25143  2960  0021               	movlb	1	; select bank1
 25144  2961  0850               	movf	_Leds_idx^(0+128),w
 25145  2962  0451               	iorwf	(_Leds_idx+1)^(0+128),w
 25146  2963  1D03               	btfss	3,2
 25147  2964  2969               	goto	l1435
 25148                           
 25149                           ;slot_task.c: 72: Leds_idx = 1;
 25150  2965  3001               	movlw	1
 25151  2966  00D0               	movwf	_Leds_idx^(0+128)
 25152  2967  3000               	movlw	0
 25153  2968  00D1               	movwf	(_Leds_idx^(0+128)+1)
 25154  2969                     l1435:	
 25155                           
 25156                           ;slot_task.c: 73: }
 25157                           ;slot_task.c: 74: Leds_idx = Leds_idx << 1;
 25158  2969  3550               	lslf	_Leds_idx^(0+128),w
 25159  296A  00D0               	movwf	_Leds_idx^(0+128)
 25160  296B  0D51               	rlf	(_Leds_idx+1)^(0+128),w
 25161  296C  00D1               	movwf	(_Leds_idx+1)^(0+128)
 25162                           
 25163                           ;slot_task.c: 76: data->delayTickCount = 10;
 25164  296D  0020               	movlb	0	; select bank0
 25165  296E  0836               	movf	slot_Running_Animation@data,w
 25166  296F  0086               	movwf	6
 25167  2970  0837               	movf	slot_Running_Animation@data+1,w
 25168  2971  0087               	movwf	7
 25169  2972  3145               	addfsr 1,5
 25170  2973  300A               	movlw	10
 25171  2974  3FC0               	movwi [0]fsr1
 25172  2975  3000               	movlw	0
 25173  2976  3FC1               	movwi [1]fsr1
 25174                           
 25175                           ;slot_task.c: 77: }
 25176  2977  0008               	return
 25177  2978                     l8943:	
 25178                           
 25179                           ;slot_task.c: 78: else {
 25180                           ;slot_task.c: 79: data->delayTickCount -= 1;
 25181  2978  0836               	movf	slot_Running_Animation@data,w
 25182  2979  0086               	movwf	6
 25183  297A  0837               	movf	slot_Running_Animation@data+1,w
 25184  297B  0087               	movwf	7
 25185  297C  3145               	addfsr 1,5
 25186  297D  3001               	movlw	1
 25187  297E  0281               	subwf	1,f
 25188  297F  3141               	addfsr 1,1
 25189  2980  3000               	movlw	0
 25190  2981  3B81               	subwfb	1,f
 25191  2982  317F               	addfsr 1,-1
 25192  2983  0008               	return
 25193  2984                     __end_of_slot_Running_Animation:	
 25194                           
 25195                           	psect	text21
 25196  3552                     __ptext21:	
 25197 ;; *************** function _slot_Finished_Animation *****************
 25198 ;; Defined at:
 25199 ;;		line 84 in file "slot_task.c"
 25200 ;; Parameters:    Size  Location     Type
 25201 ;;  taskData        2   29[BANK0 ] PTR void 
 25202 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 25203 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 25204 ;; Auto vars:     Size  Location     Type
 25205 ;;  data            2   33[BANK0 ] PTR struct t_slot_taskDa
 25206 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 25207 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 25208 ;; Return value:  Size  Location     Type
 25209 ;;                  1    wreg      void 
 25210 ;; Registers used:
 25211 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 25212 ;; Tracked objects:
 25213 ;;		On entry : 0/0
 25214 ;;		On exit  : 0/0
 25215 ;;		Unchanged: 0/0
 25216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25217 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25218 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25219 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25220 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25221 ;;Total ram usage:        6 bytes
 25222 ;; Hardware stack levels used:    1
 25223 ;; Hardware stack levels required when called:   10
 25224 ;; This function calls:
 25225 ;;		_led_rand
 25226 ;; This function is called by:
 25227 ;;		_slot_Main
 25228 ;; This function uses a non-reentrant model
 25229 ;;
 25230                           
 25231                           
 25232                           ;psect for function _slot_Finished_Animation
 25233  3552                     _slot_Finished_Animation:	
 25234                           
 25235                           ;slot_task.c: 85: struct t_slot_taskData *data = (struct t_slot_taskData *) taskData;
 25236                           
 25237                           ;incstack = 0
 25238                           ; Regs used in _slot_Finished_Animation: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 25239  3552  0020               	movlb	0	; select bank0
 25240  3553  083E               	movf	slot_Finished_Animation@taskData+1,w
 25241  3554  00C2               	movwf	slot_Finished_Animation@data+1
 25242  3555  083D               	movf	slot_Finished_Animation@taskData,w
 25243  3556  00C1               	movwf	slot_Finished_Animation@data
 25244                           
 25245                           ;slot_task.c: 86: if (data->delayTickCount < 1){
 25246  3557  0841               	movf	slot_Finished_Animation@data,w
 25247  3558  0086               	movwf	6
 25248  3559  0842               	movf	slot_Finished_Animation@data+1,w
 25249  355A  0087               	movwf	7
 25250  355B  3145               	addfsr 1,5
 25251  355C  0016               	moviw fsr1++
 25252  355D  0401               	iorwf	1,w
 25253  355E  1D03               	btfss	3,2
 25254  355F  2D6D               	goto	l8953
 25255                           
 25256                           ;slot_task.c: 87: led_rand();
 25257  3560  31A9  21CB         	fcall	_led_rand
 25258                           
 25259                           ;slot_task.c: 88: data->delayTickCount = 10;
 25260  3562  0020               	movlb	0	; select bank0
 25261  3563  0841               	movf	slot_Finished_Animation@data,w
 25262  3564  0086               	movwf	6
 25263  3565  0842               	movf	slot_Finished_Animation@data+1,w
 25264  3566  0087               	movwf	7
 25265  3567  3145               	addfsr 1,5
 25266  3568  300A               	movlw	10
 25267  3569  3FC0               	movwi [0]fsr1
 25268  356A  3000               	movlw	0
 25269  356B  3FC1               	movwi [1]fsr1
 25270                           
 25271                           ;slot_task.c: 89: }
 25272  356C  0008               	return
 25273  356D                     l8953:	
 25274                           
 25275                           ;slot_task.c: 90: else {
 25276                           ;slot_task.c: 91: data->delayTickCount -= 1;
 25277  356D  0841               	movf	slot_Finished_Animation@data,w
 25278  356E  0086               	movwf	6
 25279  356F  0842               	movf	slot_Finished_Animation@data+1,w
 25280  3570  0087               	movwf	7
 25281  3571  3145               	addfsr 1,5
 25282  3572  3001               	movlw	1
 25283  3573  0281               	subwf	1,f
 25284  3574  3141               	addfsr 1,1
 25285  3575  3000               	movlw	0
 25286  3576  3B81               	subwfb	1,f
 25287  3577  317F               	addfsr 1,-1
 25288  3578  0008               	return
 25289  3579                     __end_of_slot_Finished_Animation:	
 25290                           
 25291                           	psect	text22
 25292  3662                     __ptext22:	
 25293 ;; *************** function _secret_clear *****************
 25294 ;; Defined at:
 25295 ;;		line 178 in file "secret_task.c"
 25296 ;; Parameters:    Size  Location     Type
 25297 ;;  data            2    1[COMMON] PTR struct t_secret_task
 25298 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 25299 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 25300 ;; Auto vars:     Size  Location     Type
 25301 ;;		None
 25302 ;; Return value:  Size  Location     Type
 25303 ;;                  1    wreg      void 
 25304 ;; Registers used:
 25305 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 25306 ;; Tracked objects:
 25307 ;;		On entry : 0/0
 25308 ;;		On exit  : 0/0
 25309 ;;		Unchanged: 0/0
 25310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25311 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25312 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25313 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25314 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25315 ;;Total ram usage:        2 bytes
 25316 ;; Hardware stack levels used:    1
 25317 ;; Hardware stack levels required when called:    4
 25318 ;; This function calls:
 25319 ;;		Nothing
 25320 ;; This function is called by:
 25321 ;;		_secret_Main
 25322 ;; This function uses a non-reentrant model
 25323 ;;
 25324                           
 25325                           
 25326                           ;psect for function _secret_clear
 25327  3662                     _secret_clear:	
 25328                           
 25329                           ;secret_task.c: 180: data->delayTickCount = 300;
 25330                           
 25331                           ;incstack = 0
 25332                           ; Regs used in _secret_clear: [wreg+fsr1l+fsr1h+status,2+status,0]
 25333  3662  0871               	movf	secret_clear@data,w
 25334  3663  0086               	movwf	6
 25335  3664  0872               	movf	secret_clear@data+1,w
 25336  3665  0087               	movwf	7
 25337  3666  3142               	addfsr 1,2
 25338  3667  302C               	movlw	44
 25339  3668  3FC0               	movwi [0]fsr1
 25340  3669  3001               	movlw	1
 25341  366A  3FC1               	movwi [1]fsr1
 25342                           
 25343                           ;secret_task.c: 181: data->holdCountA = 0;
 25344  366B  0871               	movf	secret_clear@data,w
 25345  366C  0086               	movwf	6
 25346  366D  0872               	movf	secret_clear@data+1,w
 25347  366E  0087               	movwf	7
 25348  366F  3144               	addfsr 1,4
 25349  3670  3000               	movlw	0
 25350  3671  3FC0               	movwi [0]fsr1
 25351  3672  3FC1               	movwi [1]fsr1
 25352                           
 25353                           ;secret_task.c: 182: data->holdCountB = 0;
 25354  3673  0871               	movf	secret_clear@data,w
 25355  3674  0086               	movwf	6
 25356  3675  0872               	movf	secret_clear@data+1,w
 25357  3676  0087               	movwf	7
 25358  3677  3146               	addfsr 1,6
 25359  3678  3000               	movlw	0
 25360  3679  3FC0               	movwi [0]fsr1
 25361  367A  3FC1               	movwi [1]fsr1
 25362                           
 25363                           ;secret_task.c: 183: data->holdCountX = 0;
 25364  367B  0871               	movf	secret_clear@data,w
 25365  367C  0086               	movwf	6
 25366  367D  0872               	movf	secret_clear@data+1,w
 25367  367E  0087               	movwf	7
 25368  367F  3148               	addfsr 1,8
 25369  3680  3000               	movlw	0
 25370  3681  3FC0               	movwi [0]fsr1
 25371  3682  3FC1               	movwi [1]fsr1
 25372                           
 25373                           ;secret_task.c: 184: data->holdCountY = 0;
 25374  3683  0871               	movf	secret_clear@data,w
 25375  3684  0086               	movwf	6
 25376  3685  0872               	movf	secret_clear@data+1,w
 25377  3686  0087               	movwf	7
 25378  3687  314A               	addfsr 1,10
 25379  3688  3000               	movlw	0
 25380  3689  3FC0               	movwi [0]fsr1
 25381  368A  3FC1               	movwi [1]fsr1
 25382                           
 25383                           ;secret_task.c: 185: data->noholdCount = 0;
 25384  368B  0871               	movf	secret_clear@data,w
 25385  368C  0086               	movwf	6
 25386  368D  0872               	movf	secret_clear@data+1,w
 25387  368E  0087               	movwf	7
 25388  368F  314C               	addfsr 1,12
 25389  3690  3000               	movlw	0
 25390  3691  3FC0               	movwi [0]fsr1
 25391  3692  3FC1               	movwi [1]fsr1
 25392  3693  0008               	return
 25393  3694                     __end_of_secret_clear:	
 25394                           
 25395                           	psect	text23
 25396  2588                     __ptext23:	
 25397 ;; *************** function _secret_check *****************
 25398 ;; Defined at:
 25399 ;;		line 69 in file "secret_task.c"
 25400 ;; Parameters:    Size  Location     Type
 25401 ;;  data            2    7[COMMON] PTR struct t_secret_task
 25402 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 25403 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 25404 ;;  buttonPresse    1    9[COMMON] unsigned char 
 25405 ;; Auto vars:     Size  Location     Type
 25406 ;;  i               2    8[BANK0 ] unsigned int 
 25407 ;;  hit_counter     6    0        unsigned char [6]
 25408 ;;  currents_siz    2    5[BANK0 ] unsigned int 
 25409 ;;  size            2    3[BANK0 ] unsigned int 
 25410 ;;  inputs          1    7[BANK0 ] PTR unsigned char 
 25411 ;;		 -> secret_inputs.inputs(20), secret_inputs(25), 
 25412 ;; Return value:  Size  Location     Type
 25413 ;;                  1    wreg      unsigned char 
 25414 ;; Registers used:
 25415 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 25416 ;; Tracked objects:
 25417 ;;		On entry : 0/0
 25418 ;;		On exit  : 0/0
 25419 ;;		Unchanged: 0/0
 25420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25421 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25422 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25423 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25424 ;;      Totals:         3      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25425 ;;Total ram usage:       13 bytes
 25426 ;; Hardware stack levels used:    1
 25427 ;; Hardware stack levels required when called:    5
 25428 ;; This function calls:
 25429 ;;		___bmul
 25430 ;;		_strlen
 25431 ;; This function is called by:
 25432 ;;		_secret_Main
 25433 ;; This function uses a non-reentrant model
 25434 ;;
 25435                           
 25436                           
 25437                           ;psect for function _secret_check
 25438  2588                     _secret_check:	
 25439                           
 25440                           ;secret_task.c: 70: u8 *inputs;
 25441                           ;secret_task.c: 71: u16 size = sizeof(secret_inputs) / sizeof(secret_inputs[0]);
 25442                           
 25443                           ;incstack = 0
 25444                           ; Regs used in _secret_check: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 25445  2588  3001               	movlw	1
 25446  2589  0020               	movlb	0	; select bank0
 25447  258A  00A3               	movwf	secret_check@size
 25448  258B  3000               	movlw	0
 25449  258C  00A4               	movwf	secret_check@size+1
 25450                           
 25451                           ;secret_task.c: 72: u16 currents_size;
 25452                           ;secret_task.c: 73: char hit_counter[6];
 25453                           ;secret_task.c: 75: for (u16 i = 0; i < size; i++){
 25454  258D  01A8               	clrf	secret_check@i
 25455  258E  01A9               	clrf	secret_check@i+1
 25456  258F                     l8909:	
 25457  258F  0824               	movf	secret_check@size+1,w
 25458  2590  0229               	subwf	secret_check@i+1,w
 25459  2591  1D03               	skipz
 25460  2592  2D95               	goto	u5505
 25461  2593  0823               	movf	secret_check@size,w
 25462  2594  0228               	subwf	secret_check@i,w
 25463  2595                     u5505:	
 25464  2595  1803               	btfsc	3,0
 25465  2596  2E41               	goto	l8911
 25466                           
 25467                           ;secret_task.c: 76: inputs = secret_inputs[i].inputs;
 25468  2597  3019               	movlw	25
 25469  2598  00A0               	movwf	??_secret_check
 25470  2599  0820               	movf	??_secret_check,w
 25471  259A  00F1               	movwf	___bmul@multiplicand
 25472  259B  0828               	movf	secret_check@i,w
 25473  259C  31B3  230A  31A5   	fcall	___bmul
 25474  259F  3E36               	addlw	(low (_secret_inputs| (0+512)))& (0+255)
 25475  25A0  0020               	movlb	0	; select bank0
 25476  25A1  00A1               	movwf	??_secret_check+1
 25477  25A2  0821               	movf	??_secret_check+1,w
 25478  25A3  00A7               	movwf	secret_check@inputs
 25479                           
 25480                           ;secret_task.c: 78: if (buttonPressed == inputs[secret_inputs[i].idx]){
 25481  25A4  3019               	movlw	25
 25482  25A5  00A0               	movwf	??_secret_check
 25483  25A6  0820               	movf	??_secret_check,w
 25484  25A7  00F1               	movwf	___bmul@multiplicand
 25485  25A8  0828               	movf	secret_check@i,w
 25486  25A9  31B3  230A  31A5   	fcall	___bmul
 25487  25AC  3E14               	addlw	20
 25488  25AD  3E36               	addlw	(low (_secret_inputs| (0+512)))& (0+255)
 25489  25AE  0086               	movwf	6
 25490  25AF  3002               	movlw	2	; select bank4/5
 25491  25B0  0087               	movwf	7
 25492  25B1  0801               	movf	1,w
 25493  25B2  0020               	movlb	0	; select bank0
 25494  25B3  0727               	addwf	secret_check@inputs,w
 25495  25B4  00A1               	movwf	??_secret_check+1
 25496  25B5  0821               	movf	??_secret_check+1,w
 25497  25B6  0086               	movwf	6
 25498  25B7  3002               	movlw	2	; select bank4/5
 25499  25B8  0087               	movwf	7
 25500  25B9  0801               	movf	1,w
 25501  25BA  0679               	xorwf	secret_check@buttonPressed,w
 25502  25BB  1D03               	skipz
 25503  25BC  2E2A               	goto	l8905
 25504                           
 25505                           ;secret_task.c: 79: currents_size = strlen((const char *)inputs);
 25506  25BD  0827               	movf	secret_check@inputs,w
 25507  25BE  00F1               	movwf	strlen@s
 25508  25BF  3002               	movlw	2
 25509  25C0  00F2               	movwf	strlen@s+1
 25510  25C1  31B4  2466  31A5   	fcall	_strlen
 25511  25C4  0872               	movf	?_strlen+1,w
 25512  25C5  0020               	movlb	0	; select bank0
 25513  25C6  00A6               	movwf	secret_check@currents_size+1
 25514  25C7  0871               	movf	?_strlen,w
 25515  25C8  00A5               	movwf	secret_check@currents_size
 25516                           
 25517                           ;secret_task.c: 80: secret_inputs[i].idx++;
 25518  25C9  3019               	movlw	25
 25519  25CA  00A0               	movwf	??_secret_check
 25520  25CB  0820               	movf	??_secret_check,w
 25521  25CC  00F1               	movwf	___bmul@multiplicand
 25522  25CD  0828               	movf	secret_check@i,w
 25523  25CE  31B3  230A  31A5   	fcall	___bmul
 25524  25D1  3E14               	addlw	20
 25525  25D2  3E36               	addlw	(low (_secret_inputs| (0+512)))& (0+255)
 25526  25D3  0086               	movwf	6
 25527  25D4  3002               	movlw	2	; select bank4/5
 25528  25D5  0087               	movwf	7
 25529  25D6  3001               	movlw	1
 25530  25D7  0781               	addwf	1,f
 25531  25D8  3141               	addfsr 1,1
 25532  25D9  1803               	skipnc
 25533  25DA  0A81               	incf	1,f
 25534                           
 25535                           ;secret_task.c: 82: if (secret_inputs[i].idx == currents_size) {
 25536  25DB  3019               	movlw	25
 25537  25DC  0020               	movlb	0	; select bank0
 25538  25DD  00A0               	movwf	??_secret_check
 25539  25DE  0820               	movf	??_secret_check,w
 25540  25DF  00F1               	movwf	___bmul@multiplicand
 25541  25E0  0828               	movf	secret_check@i,w
 25542  25E1  31B3  230A  31A5   	fcall	___bmul
 25543  25E4  3E14               	addlw	20
 25544  25E5  3E36               	addlw	(low (_secret_inputs| (0+512)))& (0+255)
 25545  25E6  0086               	movwf	6
 25546  25E7  3002               	movlw	2	; select bank4/5
 25547  25E8  0087               	movwf	7
 25548  25E9  3F40               	moviw [0]fsr1
 25549  25EA  0020               	movlb	0	; select bank0
 25550  25EB  00A1               	movwf	??_secret_check+1
 25551  25EC  3F41               	moviw [1]fsr1
 25552  25ED  00A2               	movwf	??_secret_check+2
 25553  25EE  0826               	movf	secret_check@currents_size+1,w
 25554  25EF  0622               	xorwf	??_secret_check+2,w
 25555  25F0  1D03               	skipz
 25556  25F1  2DF4               	goto	u5495
 25557  25F2  0825               	movf	secret_check@currents_size,w
 25558  25F3  0621               	xorwf	??_secret_check+1,w
 25559  25F4                     u5495:	
 25560  25F4  1D03               	skipz
 25561  25F5  2E3B               	goto	l8907
 25562                           
 25563                           ;secret_task.c: 84: secret_inputs[i].idx = 0;
 25564  25F6  3019               	movlw	25
 25565  25F7  00A0               	movwf	??_secret_check
 25566  25F8  0820               	movf	??_secret_check,w
 25567  25F9  00F1               	movwf	___bmul@multiplicand
 25568  25FA  0828               	movf	secret_check@i,w
 25569  25FB  31B3  230A  31A5   	fcall	___bmul
 25570  25FE  3E14               	addlw	20
 25571  25FF  3E36               	addlw	(low (_secret_inputs| (0+512)))& (0+255)
 25572  2600  0086               	movwf	6
 25573  2601  3002               	movlw	2	; select bank4/5
 25574  2602  0087               	movwf	7
 25575  2603  3000               	movlw	0
 25576  2604  3FC0               	movwi [0]fsr1
 25577  2605  3FC1               	movwi [1]fsr1
 25578                           
 25579                           ;secret_task.c: 87: *(secret_inputs[i].variable) = (u16) secret_inputs[i].value;
 25580  2606  3019               	movlw	25
 25581  2607  0020               	movlb	0	; select bank0
 25582  2608  00A0               	movwf	??_secret_check
 25583  2609  0820               	movf	??_secret_check,w
 25584  260A  00F1               	movwf	___bmul@multiplicand
 25585  260B  0828               	movf	secret_check@i,w
 25586  260C  31B3  230A  31A5   	fcall	___bmul
 25587  260F  3E17               	addlw	23
 25588  2610  3E36               	addlw	(low (_secret_inputs| (0+512)))& (0+255)
 25589  2611  0086               	movwf	6
 25590  2612  3002               	movlw	2	; select bank4/5
 25591  2613  0087               	movwf	7
 25592  2614  3019               	movlw	25
 25593  2615  0020               	movlb	0	; select bank0
 25594  2616  00A1               	movwf	??_secret_check+1
 25595  2617  0821               	movf	??_secret_check+1,w
 25596  2618  00F1               	movwf	___bmul@multiplicand
 25597  2619  0828               	movf	secret_check@i,w
 25598  261A  31B3  230A         	fcall	___bmul
 25599  261C  3E16               	addlw	22
 25600  261D  3E36               	addlw	(low (_secret_inputs| (0+512)))& (0+255)
 25601  261E  0084               	movwf	4
 25602  261F  3002               	movlw	2	; select bank4/5
 25603  2620  0085               	movwf	5
 25604  2621  0800               	movf	0,w
 25605  2622  0084               	movwf	4
 25606  2623  0185               	clrf	5
 25607  2624  3F40               	moviw [0]fsr1
 25608  2625  3F80               	movwi [0]fsr0
 25609  2626  3F41               	moviw [1]fsr1
 25610  2627  3F81               	movwi [1]fsr0
 25611                           
 25612                           ;secret_task.c: 89: return 1;
 25613  2628  3001               	movlw	1
 25614  2629  0008               	return
 25615  262A                     l8905:	
 25616                           ;secret_task.c: 90: }
 25617                           ;secret_task.c: 91: } else {
 25618                           
 25619                           
 25620                           ;secret_task.c: 93: secret_inputs[i].idx = 0;
 25621  262A  3019               	movlw	25
 25622  262B  0020               	movlb	0	; select bank0
 25623  262C  00A0               	movwf	??_secret_check
 25624  262D  0820               	movf	??_secret_check,w
 25625  262E  00F1               	movwf	___bmul@multiplicand
 25626  262F  0828               	movf	secret_check@i,w
 25627  2630  31B3  230A  31A5   	fcall	___bmul
 25628  2633  3E14               	addlw	20
 25629  2634  3E36               	addlw	(low (_secret_inputs| (0+512)))& (0+255)
 25630  2635  0086               	movwf	6
 25631  2636  3002               	movlw	2	; select bank4/5
 25632  2637  0087               	movwf	7
 25633  2638  3000               	movlw	0
 25634  2639  3FC0               	movwi [0]fsr1
 25635  263A  3FC1               	movwi [1]fsr1
 25636  263B                     l8907:	
 25637  263B  3001               	movlw	1
 25638  263C  0020               	movlb	0	; select bank0
 25639  263D  07A8               	addwf	secret_check@i,f
 25640  263E  3000               	movlw	0
 25641  263F  3DA9               	addwfc	secret_check@i+1,f
 25642  2640  2D8F               	goto	l8909
 25643  2641                     l8911:	
 25644                           
 25645                           ;secret_task.c: 94: }
 25646                           ;secret_task.c: 95: }
 25647                           ;secret_task.c: 96: return 0;
 25648  2641  3000               	movlw	0
 25649  2642  0008               	return
 25650  2643                     __end_of_secret_check:	
 25651                           
 25652                           	psect	text24
 25653  2AA4                     __ptext24:	
 25654 ;; *************** function _menu_run_option *****************
 25655 ;; Defined at:
 25656 ;;		line 185 in file "menu_task.c"
 25657 ;; Parameters:    Size  Location     Type
 25658 ;;  data            2   27[BANK0 ] PTR struct t_menu_taskDa
 25659 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 25660 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 25661 ;; Auto vars:     Size  Location     Type
 25662 ;;		None
 25663 ;; Return value:  Size  Location     Type
 25664 ;;                  1    wreg      void 
 25665 ;; Registers used:
 25666 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 25667 ;; Tracked objects:
 25668 ;;		On entry : 0/0
 25669 ;;		On exit  : 0/0
 25670 ;;		Unchanged: 0/0
 25671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25672 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25673 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25674 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25675 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25676 ;;Total ram usage:        2 bytes
 25677 ;; Hardware stack levels used:    1
 25678 ;; Hardware stack levels required when called:   11
 25679 ;; This function calls:
 25680 ;;		_menu_clear
 25681 ;; This function is called by:
 25682 ;;		_menu_Main
 25683 ;; This function uses a non-reentrant model
 25684 ;;
 25685                           
 25686                           
 25687                           ;psect for function _menu_run_option
 25688  2AA4                     _menu_run_option:	
 25689                           
 25690                           ;menu_task.c: 186: switch (menu_option_idx){
 25691                           
 25692                           ;incstack = 0
 25693                           ; Regs used in _menu_run_option: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 25694  2AA4  2AD9               	goto	l8665
 25695  2AA5                     l8647:	
 25696                           ;menu_task.c: 187: case 1:
 25697                           
 25698                           
 25699                           ;menu_task.c: 188: menu_clear(data);
 25700  2AA5  0020               	movlb	0	; select bank0
 25701  2AA6  083C               	movf	menu_run_option@data+1,w
 25702  2AA7  00BA               	movwf	menu_clear@data+1
 25703  2AA8  083B               	movf	menu_run_option@data,w
 25704  2AA9  00B9               	movwf	menu_clear@data
 25705  2AAA  31A9  2184         	fcall	_menu_clear
 25706                           
 25707                           ;menu_task.c: 189: currentTask = SLOT_TASK;
 25708  2AAC  3001               	movlw	1
 25709  2AAD  0021               	movlb	1	; select bank1
 25710  2AAE  00BA               	movwf	_currentTask^(0+128)
 25711  2AAF  3000               	movlw	0
 25712  2AB0  00BB               	movwf	(_currentTask^(0+128)+1)
 25713                           
 25714                           ;menu_task.c: 190: break;
 25715  2AB1  0008               	return
 25716  2AB2                     l8651:	
 25717                           ;menu_task.c: 191: case 2:
 25718                           
 25719                           
 25720                           ;menu_task.c: 192: menu_clear(data);
 25721  2AB2  0020               	movlb	0	; select bank0
 25722  2AB3  083C               	movf	menu_run_option@data+1,w
 25723  2AB4  00BA               	movwf	menu_clear@data+1
 25724  2AB5  083B               	movf	menu_run_option@data,w
 25725  2AB6  00B9               	movwf	menu_clear@data
 25726  2AB7  31A9  2184         	fcall	_menu_clear
 25727                           
 25728                           ;menu_task.c: 193: currentTask = LOCKED_TASK;
 25729  2AB9  3003               	movlw	3
 25730  2ABA  0021               	movlb	1	; select bank1
 25731  2ABB  00BA               	movwf	_currentTask^(0+128)
 25732  2ABC  3000               	movlw	0
 25733  2ABD  00BB               	movwf	(_currentTask^(0+128)+1)
 25734                           
 25735                           ;menu_task.c: 194: break;
 25736  2ABE  0008               	return
 25737  2ABF                     l8655:	
 25738                           ;menu_task.c: 195: case 4:
 25739                           
 25740                           
 25741                           ;menu_task.c: 196: menu_clear(data);
 25742  2ABF  0020               	movlb	0	; select bank0
 25743  2AC0  083C               	movf	menu_run_option@data+1,w
 25744  2AC1  00BA               	movwf	menu_clear@data+1
 25745  2AC2  083B               	movf	menu_run_option@data,w
 25746  2AC3  00B9               	movwf	menu_clear@data
 25747  2AC4  31A9  2184         	fcall	_menu_clear
 25748                           
 25749                           ;menu_task.c: 197: currentTask = FLASHY_TASK;
 25750  2AC6  3002               	movlw	2
 25751  2AC7  0021               	movlb	1	; select bank1
 25752  2AC8  00BA               	movwf	_currentTask^(0+128)
 25753  2AC9  3000               	movlw	0
 25754  2ACA  00BB               	movwf	(_currentTask^(0+128)+1)
 25755                           
 25756                           ;menu_task.c: 198: break;
 25757  2ACB  0008               	return
 25758  2ACC                     l8659:	
 25759                           ;menu_task.c: 199: case 3:
 25760                           
 25761                           
 25762                           ;menu_task.c: 200: menu_clear(data);
 25763  2ACC  0020               	movlb	0	; select bank0
 25764  2ACD  083C               	movf	menu_run_option@data+1,w
 25765  2ACE  00BA               	movwf	menu_clear@data+1
 25766  2ACF  083B               	movf	menu_run_option@data,w
 25767  2AD0  00B9               	movwf	menu_clear@data
 25768  2AD1  31A9  2184         	fcall	_menu_clear
 25769                           
 25770                           ;menu_task.c: 201: currentTask = MATRIX_TASK;
 25771  2AD3  3004               	movlw	4
 25772  2AD4  0021               	movlb	1	; select bank1
 25773  2AD5  00BA               	movwf	_currentTask^(0+128)
 25774  2AD6  3000               	movlw	0
 25775  2AD7  00BB               	movwf	(_currentTask^(0+128)+1)
 25776                           
 25777                           ;menu_task.c: 203: }
 25778                           
 25779                           ;menu_task.c: 202: break;
 25780  2AD8  0008               	return
 25781  2AD9                     l8665:	
 25782                           
 25783                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 25784                           ; Switch size 1, requested type "space"
 25785                           ; Number of cases is 1, Range of values is 0 to 0
 25786                           ; switch strategies available:
 25787                           ; Name         Instructions Cycles
 25788                           ; simple_byte            4     3 (average)
 25789                           ; direct_byte            8     6 (fixed)
 25790                           ; jumptable            260     6 (fixed)
 25791                           ;	Chosen strategy is simple_byte
 25792  2AD9  0021               	movlb	1	; select bank1
 25793  2ADA  0837               	movf	(_menu_option_idx+1)^(0+128),w
 25794  2ADB  3A00               	xorlw	0	; case 0
 25795  2ADC  1903               	skipnz
 25796  2ADD  2ADF               	goto	l10889
 25797  2ADE  2AED               	goto	l1010
 25798  2ADF                     l10889:	
 25799                           
 25800                           ; Switch size 1, requested type "space"
 25801                           ; Number of cases is 4, Range of values is 1 to 4
 25802                           ; switch strategies available:
 25803                           ; Name         Instructions Cycles
 25804                           ; simple_byte           13     7 (average)
 25805                           ; direct_byte           17     9 (fixed)
 25806                           ; jumptable            263     9 (fixed)
 25807                           ;	Chosen strategy is simple_byte
 25808  2ADF  0836               	movf	_menu_option_idx^(0+128),w
 25809  2AE0  3A01               	xorlw	1	; case 1
 25810  2AE1  1903               	skipnz
 25811  2AE2  2AA5               	goto	l8647
 25812  2AE3  3A03               	xorlw	3	; case 2
 25813  2AE4  1903               	skipnz
 25814  2AE5  2AB2               	goto	l8651
 25815  2AE6  3A01               	xorlw	1	; case 3
 25816  2AE7  1903               	skipnz
 25817  2AE8  2ACC               	goto	l8659
 25818  2AE9  3A07               	xorlw	7	; case 4
 25819  2AEA  1903               	skipnz
 25820  2AEB  2ABF               	goto	l8655
 25821  2AEC  2AED               	goto	l1010
 25822  2AED                     l1010:	
 25823  2AED  0008               	return
 25824  2AEE                     __end_of_menu_run_option:	
 25825                           
 25826                           	psect	text25
 25827  2984                     __ptext25:	
 25828 ;; *************** function _menu_clear *****************
 25829 ;; Defined at:
 25830 ;;		line 206 in file "menu_task.c"
 25831 ;; Parameters:    Size  Location     Type
 25832 ;;  data            2   25[BANK0 ] PTR struct t_menu_taskDa
 25833 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 25834 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 25835 ;; Auto vars:     Size  Location     Type
 25836 ;;		None
 25837 ;; Return value:  Size  Location     Type
 25838 ;;                  1    wreg      void 
 25839 ;; Registers used:
 25840 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 25841 ;; Tracked objects:
 25842 ;;		On entry : 0/0
 25843 ;;		On exit  : 0/0
 25844 ;;		Unchanged: 0/0
 25845 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25846 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25847 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25848 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25849 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25850 ;;Total ram usage:        2 bytes
 25851 ;; Hardware stack levels used:    1
 25852 ;; Hardware stack levels required when called:   10
 25853 ;; This function calls:
 25854 ;;		_nullifyBadge_segDisplayErase
 25855 ;;		_nullifyBadge_userLedsClr
 25856 ;; This function is called by:
 25857 ;;		_menu_Main
 25858 ;;		_menu_run_option
 25859 ;; This function uses a non-reentrant model
 25860 ;;
 25861                           
 25862                           
 25863                           ;psect for function _menu_clear
 25864  2984                     _menu_clear:	
 25865                           
 25866                           ;menu_task.c: 208: data->delayTickCount = 50;
 25867                           
 25868                           ;incstack = 0
 25869                           ; Regs used in _menu_clear: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 25870  2984  0020               	movlb	0	; select bank0
 25871  2985  0839               	movf	menu_clear@data,w
 25872  2986  0086               	movwf	6
 25873  2987  083A               	movf	menu_clear@data+1,w
 25874  2988  0087               	movwf	7
 25875  2989  3142               	addfsr 1,2
 25876  298A  3032               	movlw	50
 25877  298B  3FC0               	movwi [0]fsr1
 25878  298C  3000               	movlw	0
 25879  298D  3FC1               	movwi [1]fsr1
 25880                           
 25881                           ;menu_task.c: 209: data->holdCountA = 0;
 25882  298E  0839               	movf	menu_clear@data,w
 25883  298F  0086               	movwf	6
 25884  2990  083A               	movf	menu_clear@data+1,w
 25885  2991  0087               	movwf	7
 25886  2992  3144               	addfsr 1,4
 25887  2993  3000               	movlw	0
 25888  2994  3FC0               	movwi [0]fsr1
 25889  2995  3FC1               	movwi [1]fsr1
 25890                           
 25891                           ;menu_task.c: 210: data->holdCountB = 0;
 25892  2996  0839               	movf	menu_clear@data,w
 25893  2997  0086               	movwf	6
 25894  2998  083A               	movf	menu_clear@data+1,w
 25895  2999  0087               	movwf	7
 25896  299A  3146               	addfsr 1,6
 25897  299B  3000               	movlw	0
 25898  299C  3FC0               	movwi [0]fsr1
 25899  299D  3FC1               	movwi [1]fsr1
 25900                           
 25901                           ;menu_task.c: 211: data->holdCountX = 0;
 25902  299E  0839               	movf	menu_clear@data,w
 25903  299F  0086               	movwf	6
 25904  29A0  083A               	movf	menu_clear@data+1,w
 25905  29A1  0087               	movwf	7
 25906  29A2  3148               	addfsr 1,8
 25907  29A3  3000               	movlw	0
 25908  29A4  3FC0               	movwi [0]fsr1
 25909  29A5  3FC1               	movwi [1]fsr1
 25910                           
 25911                           ;menu_task.c: 212: data->holdCountY = 0;
 25912  29A6  0839               	movf	menu_clear@data,w
 25913  29A7  0086               	movwf	6
 25914  29A8  083A               	movf	menu_clear@data+1,w
 25915  29A9  0087               	movwf	7
 25916  29AA  314A               	addfsr 1,10
 25917  29AB  3000               	movlw	0
 25918  29AC  3FC0               	movwi [0]fsr1
 25919  29AD  3FC1               	movwi [1]fsr1
 25920                           
 25921                           ;menu_task.c: 213: data->noholdCount = 0;
 25922  29AE  0839               	movf	menu_clear@data,w
 25923  29AF  0086               	movwf	6
 25924  29B0  083A               	movf	menu_clear@data+1,w
 25925  29B1  0087               	movwf	7
 25926  29B2  314C               	addfsr 1,12
 25927  29B3  3000               	movlw	0
 25928  29B4  3FC0               	movwi [0]fsr1
 25929  29B5  3FC1               	movwi [1]fsr1
 25930                           
 25931                           ;menu_task.c: 215: menu_option_idx = 0;
 25932  29B6  0021               	movlb	1	; select bank1
 25933  29B7  01B6               	clrf	_menu_option_idx^(0+128)
 25934  29B8  01B7               	clrf	(_menu_option_idx+1)^(0+128)
 25935                           
 25936                           ;menu_task.c: 218: nullifyBadge_userLedsClr(data->badge);
 25937  29B9  0020               	movlb	0	; select bank0
 25938  29BA  0839               	movf	menu_clear@data,w
 25939  29BB  0086               	movwf	6
 25940  29BC  083A               	movf	menu_clear@data+1,w
 25941  29BD  0087               	movwf	7
 25942  29BE  0801               	movf	1,w
 25943  29BF  3187  27FA  31A9   	fcall	_nullifyBadge_userLedsClr
 25944                           
 25945                           ;menu_task.c: 219: nullifyBadge_segDisplayErase(data->badge);
 25946  29C2  0020               	movlb	0	; select bank0
 25947  29C3  0839               	movf	menu_clear@data,w
 25948  29C4  0086               	movwf	6
 25949  29C5  083A               	movf	menu_clear@data+1,w
 25950  29C6  0087               	movwf	7
 25951  29C7  0801               	movf	1,w
 25952  29C8  3198  2000         	fcall	_nullifyBadge_segDisplayErase
 25953  29CA  0008               	return
 25954  29CB                     __end_of_menu_clear:	
 25955                           
 25956                           	psect	text26
 25957  2D92                     __ptext26:	
 25958 ;; *************** function _menu_display_option *****************
 25959 ;; Defined at:
 25960 ;;		line 166 in file "menu_task.c"
 25961 ;; Parameters:    Size  Location     Type
 25962 ;;  data            2   44[BANK0 ] PTR struct t_menu_taskDa
 25963 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 25964 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 25965 ;; Auto vars:     Size  Location     Type
 25966 ;;  led             2   48[BANK0 ] unsigned int 
 25967 ;;  size            2   46[BANK0 ] unsigned int 
 25968 ;; Return value:  Size  Location     Type
 25969 ;;                  1    wreg      void 
 25970 ;; Registers used:
 25971 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 25972 ;; Tracked objects:
 25973 ;;		On entry : 0/0
 25974 ;;		On exit  : 0/0
 25975 ;;		Unchanged: 0/0
 25976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25977 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25978 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25979 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25980 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25981 ;;Total ram usage:        6 bytes
 25982 ;; Hardware stack levels used:    1
 25983 ;; Hardware stack levels required when called:   10
 25984 ;; This function calls:
 25985 ;;		___lwmod
 25986 ;;		_marquee
 25987 ;;		_nullifyBadge_segDisplayForceUpdate
 25988 ;;		_nullifyBadge_segDisplayPutStr
 25989 ;;		_nullifyBadge_userLedsSet
 25990 ;; This function is called by:
 25991 ;;		_menu_Main
 25992 ;; This function uses a non-reentrant model
 25993 ;;
 25994                           
 25995                           
 25996                           ;psect for function _menu_display_option
 25997  2D92                     _menu_display_option:	
 25998                           
 25999                           ;menu_task.c: 167: u16 size = sizeof(menu_options_leds)/sizeof(menu_options_leds[0]);
 26000                           
 26001                           ;incstack = 0
 26002                           ; Regs used in _menu_display_option: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 26003  2D92  3005               	movlw	5
 26004  2D93  0020               	movlb	0	; select bank0
 26005  2D94  00CE               	movwf	menu_display_option@size
 26006  2D95  3000               	movlw	0
 26007  2D96  00CF               	movwf	menu_display_option@size+1
 26008                           
 26009                           ;menu_task.c: 168: u16 led = menu_options_leds[menu_option_idx % size];
 26010  2D97  084F               	movf	menu_display_option@size+1,w
 26011  2D98  00AC               	movwf	___lwmod@divisor+1
 26012  2D99  084E               	movf	menu_display_option@size,w
 26013  2D9A  00AB               	movwf	___lwmod@divisor
 26014  2D9B  0021               	movlb	1	; select bank1
 26015  2D9C  0837               	movf	(_menu_option_idx+1)^(0+128),w
 26016  2D9D  0020               	movlb	0	; select bank0
 26017  2D9E  00AE               	movwf	___lwmod@dividend+1
 26018  2D9F  0021               	movlb	1	; select bank1
 26019  2DA0  0836               	movf	_menu_option_idx^(0+128),w
 26020  2DA1  0020               	movlb	0	; select bank0
 26021  2DA2  00AD               	movwf	___lwmod@dividend
 26022  2DA3  31B5  25A3  31AD   	fcall	___lwmod
 26023  2DA6  0020               	movlb	0	; select bank0
 26024  2DA7  082B               	movf	?___lwmod,w
 26025  2DA8  0709               	addwf	9,w
 26026  2DA9  3ECA               	addlw	(low (_menu_options_leds| (0+512)))& (0+255)
 26027  2DAA  0086               	movwf	6
 26028  2DAB  3002               	movlw	2	; select bank5/6
 26029  2DAC  0087               	movwf	7
 26030  2DAD  3F40               	moviw [0]fsr1
 26031  2DAE  00D0               	movwf	menu_display_option@led
 26032  2DAF  3F41               	moviw [1]fsr1
 26033  2DB0  00D1               	movwf	menu_display_option@led+1
 26034                           
 26035                           ;menu_task.c: 174: nullifyBadge_userLedsSet(data->badge, led);
 26036  2DB1  0851               	movf	menu_display_option@led+1,w
 26037  2DB2  00AE               	movwf	nullifyBadge_userLedsSet@userLedData+1
 26038  2DB3  0850               	movf	menu_display_option@led,w
 26039  2DB4  00AD               	movwf	nullifyBadge_userLedsSet@userLedData
 26040  2DB5  084C               	movf	menu_display_option@data,w
 26041  2DB6  0086               	movwf	6
 26042  2DB7  084D               	movf	menu_display_option@data+1,w
 26043  2DB8  0087               	movwf	7
 26044  2DB9  0801               	movf	1,w
 26045  2DBA  31B2  22F9  31AD   	fcall	_nullifyBadge_userLedsSet
 26046                           
 26047                           ;menu_task.c: 176: if (menu_option_idx == 0){
 26048  2DBD  0021               	movlb	1	; select bank1
 26049  2DBE  0836               	movf	_menu_option_idx^(0+128),w
 26050  2DBF  0437               	iorwf	(_menu_option_idx+1)^(0+128),w
 26051  2DC0  1D03               	btfss	3,2
 26052  2DC1  2DDD               	goto	l8643
 26053                           
 26054                           ;menu_task.c: 177: nullifyBadge_segDisplayPutStr(data->badge, menu_option[menu_option_id
      +                          x]);
 26055  2DC2  3536               	lslf	_menu_option_idx^(0+128),w
 26056  2DC3  3E2C               	addlw	(low (_menu_option| (0+512)))& (0+255)
 26057  2DC4  0086               	movwf	6
 26058  2DC5  3002               	movlw	2	; select bank4/5
 26059  2DC6  0087               	movwf	7
 26060  2DC7  3F40               	moviw [0]fsr1
 26061  2DC8  0020               	movlb	0	; select bank0
 26062  2DC9  00B7               	movwf	nullifyBadge_segDisplayPutStr@str
 26063  2DCA  3F41               	moviw [1]fsr1
 26064  2DCB  00B8               	movwf	nullifyBadge_segDisplayPutStr@str+1
 26065  2DCC  084C               	movf	menu_display_option@data,w
 26066  2DCD  0086               	movwf	6
 26067  2DCE  084D               	movf	menu_display_option@data+1,w
 26068  2DCF  0087               	movwf	7
 26069  2DD0  0801               	movf	1,w
 26070  2DD1  31B2  2220  31AD   	fcall	_nullifyBadge_segDisplayPutStr
 26071                           
 26072                           ;menu_task.c: 178: nullifyBadge_segDisplayForceUpdate(data->badge);
 26073  2DD4  0020               	movlb	0	; select bank0
 26074  2DD5  084C               	movf	menu_display_option@data,w
 26075  2DD6  0086               	movwf	6
 26076  2DD7  084D               	movf	menu_display_option@data+1,w
 26077  2DD8  0087               	movwf	7
 26078  2DD9  0801               	movf	1,w
 26079  2DDA  31B1  21E4         	fcall	_nullifyBadge_segDisplayForceUpdate
 26080                           
 26081                           ;menu_task.c: 179: }
 26082  2DDC  0008               	return
 26083  2DDD                     l8643:	
 26084                           
 26085                           ;menu_task.c: 180: else {
 26086                           ;menu_task.c: 181: marquee(menu_option[menu_option_idx], data->noholdCount);
 26087  2DDD  0021               	movlb	1	; select bank1
 26088  2DDE  3536               	lslf	_menu_option_idx^(0+128),w
 26089  2DDF  3E2C               	addlw	(low (_menu_option| (0+512)))& (0+255)
 26090  2DE0  0086               	movwf	6
 26091  2DE1  3002               	movlw	2	; select bank4/5
 26092  2DE2  0087               	movwf	7
 26093  2DE3  3F40               	moviw [0]fsr1
 26094  2DE4  0020               	movlb	0	; select bank0
 26095  2DE5  00BA               	movwf	marquee@string
 26096  2DE6  3F41               	moviw [1]fsr1
 26097  2DE7  00BB               	movwf	marquee@string+1
 26098  2DE8  084C               	movf	menu_display_option@data,w
 26099  2DE9  0086               	movwf	6
 26100  2DEA  084D               	movf	menu_display_option@data+1,w
 26101  2DEB  0087               	movwf	7
 26102  2DEC  314C               	addfsr 1,12
 26103  2DED  3F40               	moviw [0]fsr1
 26104  2DEE  00BC               	movwf	marquee@count
 26105  2DEF  3F41               	moviw [1]fsr1
 26106  2DF0  00BD               	movwf	marquee@count+1
 26107  2DF1  31A2  2215         	fcall	_marquee
 26108  2DF3  0008               	return
 26109  2DF4                     __end_of_menu_display_option:	
 26110                           
 26111                           	psect	text27
 26112  24CD                     __ptext27:	
 26113 ;; *************** function _matrix_secret_check *****************
 26114 ;; Defined at:
 26115 ;;		line 94 in file "matrix_task.c"
 26116 ;; Parameters:    Size  Location     Type
 26117 ;;  data            2    7[COMMON] PTR struct t_matrix_task
 26118 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 26119 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 26120 ;;  buttonPresse    1    9[COMMON] unsigned char 
 26121 ;; Auto vars:     Size  Location     Type
 26122 ;;  i               2    8[BANK0 ] unsigned int 
 26123 ;;  hit_counter     6    0        unsigned char [6]
 26124 ;;  currents_siz    2    5[BANK0 ] unsigned int 
 26125 ;;  size            2    3[BANK0 ] unsigned int 
 26126 ;;  inputs          1    7[BANK0 ] PTR unsigned char 
 26127 ;;		 -> matrix_secret_inputs.inputs(20), matrix_secret_inputs(25), 
 26128 ;; Return value:  Size  Location     Type
 26129 ;;                  1    wreg      unsigned char 
 26130 ;; Registers used:
 26131 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 26132 ;; Tracked objects:
 26133 ;;		On entry : 0/0
 26134 ;;		On exit  : 0/0
 26135 ;;		Unchanged: 0/0
 26136 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26137 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26138 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26139 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26140 ;;      Totals:         3      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26141 ;;Total ram usage:       13 bytes
 26142 ;; Hardware stack levels used:    1
 26143 ;; Hardware stack levels required when called:    5
 26144 ;; This function calls:
 26145 ;;		___bmul
 26146 ;;		_strlen
 26147 ;; This function is called by:
 26148 ;;		_matrix_Main
 26149 ;; This function uses a non-reentrant model
 26150 ;;
 26151                           
 26152                           
 26153                           ;psect for function _matrix_secret_check
 26154  24CD                     _matrix_secret_check:	
 26155                           
 26156                           ;matrix_task.c: 95: u8 *inputs;
 26157                           ;matrix_task.c: 96: u16 size = sizeof(matrix_secret_inputs) / sizeof(matrix_secret_input
      +                          s[0]);
 26158                           
 26159                           ;incstack = 0
 26160                           ; Regs used in _matrix_secret_check: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 26161  24CD  3001               	movlw	1
 26162  24CE  0020               	movlb	0	; select bank0
 26163  24CF  00A3               	movwf	matrix_secret_check@size
 26164  24D0  3000               	movlw	0
 26165  24D1  00A4               	movwf	matrix_secret_check@size+1
 26166                           
 26167                           ;matrix_task.c: 97: u16 currents_size;
 26168                           ;matrix_task.c: 98: char hit_counter[6];
 26169                           ;matrix_task.c: 100: for (u16 i = 0; i < size; i++){
 26170  24D2  01A8               	clrf	matrix_secret_check@i
 26171  24D3  01A9               	clrf	matrix_secret_check@i+1
 26172  24D4                     l8981:	
 26173  24D4  0824               	movf	matrix_secret_check@size+1,w
 26174  24D5  0229               	subwf	matrix_secret_check@i+1,w
 26175  24D6  1D03               	skipz
 26176  24D7  2CDA               	goto	u5575
 26177  24D8  0823               	movf	matrix_secret_check@size,w
 26178  24D9  0228               	subwf	matrix_secret_check@i,w
 26179  24DA                     u5575:	
 26180  24DA  1803               	btfsc	3,0
 26181  24DB  2D86               	goto	l8983
 26182                           
 26183                           ;matrix_task.c: 101: inputs = matrix_secret_inputs[i].inputs;
 26184  24DC  3019               	movlw	25
 26185  24DD  00A0               	movwf	??_matrix_secret_check
 26186  24DE  0820               	movf	??_matrix_secret_check,w
 26187  24DF  00F1               	movwf	___bmul@multiplicand
 26188  24E0  0828               	movf	matrix_secret_check@i,w
 26189  24E1  31B3  230A  31A4   	fcall	___bmul
 26190  24E4  3ED4               	addlw	(low (_matrix_secret_inputs| (0+512)))& (0+255)
 26191  24E5  0020               	movlb	0	; select bank0
 26192  24E6  00A1               	movwf	??_matrix_secret_check+1
 26193  24E7  0821               	movf	??_matrix_secret_check+1,w
 26194  24E8  00A7               	movwf	matrix_secret_check@inputs
 26195                           
 26196                           ;matrix_task.c: 103: if (buttonPressed == inputs[matrix_secret_inputs[i].idx]){
 26197  24E9  3019               	movlw	25
 26198  24EA  00A0               	movwf	??_matrix_secret_check
 26199  24EB  0820               	movf	??_matrix_secret_check,w
 26200  24EC  00F1               	movwf	___bmul@multiplicand
 26201  24ED  0828               	movf	matrix_secret_check@i,w
 26202  24EE  31B3  230A  31A4   	fcall	___bmul
 26203  24F1  3E14               	addlw	20
 26204  24F2  3ED4               	addlw	(low (_matrix_secret_inputs| (0+512)))& (0+255)
 26205  24F3  0086               	movwf	6
 26206  24F4  3002               	movlw	2	; select bank5/6
 26207  24F5  0087               	movwf	7
 26208  24F6  0801               	movf	1,w
 26209  24F7  0020               	movlb	0	; select bank0
 26210  24F8  0727               	addwf	matrix_secret_check@inputs,w
 26211  24F9  00A1               	movwf	??_matrix_secret_check+1
 26212  24FA  0821               	movf	??_matrix_secret_check+1,w
 26213  24FB  0086               	movwf	6
 26214  24FC  3002               	movlw	2	; select bank4/5
 26215  24FD  0087               	movwf	7
 26216  24FE  0801               	movf	1,w
 26217  24FF  0679               	xorwf	matrix_secret_check@buttonPressed,w
 26218  2500  1D03               	skipz
 26219  2501  2D6F               	goto	l8977
 26220                           
 26221                           ;matrix_task.c: 104: currents_size = strlen((const char *)inputs);
 26222  2502  0827               	movf	matrix_secret_check@inputs,w
 26223  2503  00F1               	movwf	strlen@s
 26224  2504  3002               	movlw	2
 26225  2505  00F2               	movwf	strlen@s+1
 26226  2506  31B4  2466  31A4   	fcall	_strlen
 26227  2509  0872               	movf	?_strlen+1,w
 26228  250A  0020               	movlb	0	; select bank0
 26229  250B  00A6               	movwf	matrix_secret_check@currents_size+1
 26230  250C  0871               	movf	?_strlen,w
 26231  250D  00A5               	movwf	matrix_secret_check@currents_size
 26232                           
 26233                           ;matrix_task.c: 105: matrix_secret_inputs[i].idx++;
 26234  250E  3019               	movlw	25
 26235  250F  00A0               	movwf	??_matrix_secret_check
 26236  2510  0820               	movf	??_matrix_secret_check,w
 26237  2511  00F1               	movwf	___bmul@multiplicand
 26238  2512  0828               	movf	matrix_secret_check@i,w
 26239  2513  31B3  230A  31A4   	fcall	___bmul
 26240  2516  3E14               	addlw	20
 26241  2517  3ED4               	addlw	(low (_matrix_secret_inputs| (0+512)))& (0+255)
 26242  2518  0086               	movwf	6
 26243  2519  3002               	movlw	2	; select bank5/6
 26244  251A  0087               	movwf	7
 26245  251B  3001               	movlw	1
 26246  251C  0781               	addwf	1,f
 26247  251D  3141               	addfsr 1,1
 26248  251E  1803               	skipnc
 26249  251F  0A81               	incf	1,f
 26250                           
 26251                           ;matrix_task.c: 107: if (matrix_secret_inputs[i].idx == currents_size) {
 26252  2520  3019               	movlw	25
 26253  2521  0020               	movlb	0	; select bank0
 26254  2522  00A0               	movwf	??_matrix_secret_check
 26255  2523  0820               	movf	??_matrix_secret_check,w
 26256  2524  00F1               	movwf	___bmul@multiplicand
 26257  2525  0828               	movf	matrix_secret_check@i,w
 26258  2526  31B3  230A  31A4   	fcall	___bmul
 26259  2529  3E14               	addlw	20
 26260  252A  3ED4               	addlw	(low (_matrix_secret_inputs| (0+512)))& (0+255)
 26261  252B  0086               	movwf	6
 26262  252C  3002               	movlw	2	; select bank5/6
 26263  252D  0087               	movwf	7
 26264  252E  3F40               	moviw [0]fsr1
 26265  252F  0020               	movlb	0	; select bank0
 26266  2530  00A1               	movwf	??_matrix_secret_check+1
 26267  2531  3F41               	moviw [1]fsr1
 26268  2532  00A2               	movwf	??_matrix_secret_check+2
 26269  2533  0826               	movf	matrix_secret_check@currents_size+1,w
 26270  2534  0622               	xorwf	??_matrix_secret_check+2,w
 26271  2535  1D03               	skipz
 26272  2536  2D39               	goto	u5565
 26273  2537  0825               	movf	matrix_secret_check@currents_size,w
 26274  2538  0621               	xorwf	??_matrix_secret_check+1,w
 26275  2539                     u5565:	
 26276  2539  1D03               	skipz
 26277  253A  2D80               	goto	l8979
 26278                           
 26279                           ;matrix_task.c: 109: matrix_secret_inputs[i].idx = 0;
 26280  253B  3019               	movlw	25
 26281  253C  00A0               	movwf	??_matrix_secret_check
 26282  253D  0820               	movf	??_matrix_secret_check,w
 26283  253E  00F1               	movwf	___bmul@multiplicand
 26284  253F  0828               	movf	matrix_secret_check@i,w
 26285  2540  31B3  230A  31A4   	fcall	___bmul
 26286  2543  3E14               	addlw	20
 26287  2544  3ED4               	addlw	(low (_matrix_secret_inputs| (0+512)))& (0+255)
 26288  2545  0086               	movwf	6
 26289  2546  3002               	movlw	2	; select bank5/6
 26290  2547  0087               	movwf	7
 26291  2548  3000               	movlw	0
 26292  2549  3FC0               	movwi [0]fsr1
 26293  254A  3FC1               	movwi [1]fsr1
 26294                           
 26295                           ;matrix_task.c: 112: *(matrix_secret_inputs[i].variable) = (u16) matrix_secret_inputs[i]
      +                          .value;
 26296  254B  3019               	movlw	25
 26297  254C  0020               	movlb	0	; select bank0
 26298  254D  00A0               	movwf	??_matrix_secret_check
 26299  254E  0820               	movf	??_matrix_secret_check,w
 26300  254F  00F1               	movwf	___bmul@multiplicand
 26301  2550  0828               	movf	matrix_secret_check@i,w
 26302  2551  31B3  230A  31A4   	fcall	___bmul
 26303  2554  3E17               	addlw	23
 26304  2555  3ED4               	addlw	(low (_matrix_secret_inputs| (0+512)))& (0+255)
 26305  2556  0086               	movwf	6
 26306  2557  3002               	movlw	2	; select bank5/6
 26307  2558  0087               	movwf	7
 26308  2559  3019               	movlw	25
 26309  255A  0020               	movlb	0	; select bank0
 26310  255B  00A1               	movwf	??_matrix_secret_check+1
 26311  255C  0821               	movf	??_matrix_secret_check+1,w
 26312  255D  00F1               	movwf	___bmul@multiplicand
 26313  255E  0828               	movf	matrix_secret_check@i,w
 26314  255F  31B3  230A         	fcall	___bmul
 26315  2561  3E16               	addlw	22
 26316  2562  3ED4               	addlw	(low (_matrix_secret_inputs| (0+512)))& (0+255)
 26317  2563  0084               	movwf	4
 26318  2564  3002               	movlw	2	; select bank5/6
 26319  2565  0085               	movwf	5
 26320  2566  0800               	movf	0,w
 26321  2567  0084               	movwf	4
 26322  2568  0185               	clrf	5
 26323  2569  3F40               	moviw [0]fsr1
 26324  256A  3F80               	movwi [0]fsr0
 26325  256B  3F41               	moviw [1]fsr1
 26326  256C  3F81               	movwi [1]fsr0
 26327                           
 26328                           ;matrix_task.c: 114: return 1;
 26329  256D  3001               	movlw	1
 26330  256E  0008               	return
 26331  256F                     l8977:	
 26332                           ;matrix_task.c: 115: }
 26333                           ;matrix_task.c: 116: } else {
 26334                           
 26335                           
 26336                           ;matrix_task.c: 118: matrix_secret_inputs[i].idx = 0;
 26337  256F  3019               	movlw	25
 26338  2570  0020               	movlb	0	; select bank0
 26339  2571  00A0               	movwf	??_matrix_secret_check
 26340  2572  0820               	movf	??_matrix_secret_check,w
 26341  2573  00F1               	movwf	___bmul@multiplicand
 26342  2574  0828               	movf	matrix_secret_check@i,w
 26343  2575  31B3  230A  31A4   	fcall	___bmul
 26344  2578  3E14               	addlw	20
 26345  2579  3ED4               	addlw	(low (_matrix_secret_inputs| (0+512)))& (0+255)
 26346  257A  0086               	movwf	6
 26347  257B  3002               	movlw	2	; select bank5/6
 26348  257C  0087               	movwf	7
 26349  257D  3000               	movlw	0
 26350  257E  3FC0               	movwi [0]fsr1
 26351  257F  3FC1               	movwi [1]fsr1
 26352  2580                     l8979:	
 26353  2580  3001               	movlw	1
 26354  2581  0020               	movlb	0	; select bank0
 26355  2582  07A8               	addwf	matrix_secret_check@i,f
 26356  2583  3000               	movlw	0
 26357  2584  3DA9               	addwfc	matrix_secret_check@i+1,f
 26358  2585  2CD4               	goto	l8981
 26359  2586                     l8983:	
 26360                           
 26361                           ;matrix_task.c: 119: }
 26362                           ;matrix_task.c: 120: }
 26363                           ;matrix_task.c: 121: return 0;
 26364  2586  3000               	movlw	0
 26365  2587  0008               	return
 26366  2588                     __end_of_matrix_secret_check:	
 26367                           
 26368                           	psect	text28
 26369  242A                     __ptext28:	
 26370 ;; *************** function _matrix_display_option *****************
 26371 ;; Defined at:
 26372 ;;		line 124 in file "matrix_task.c"
 26373 ;; Parameters:    Size  Location     Type
 26374 ;;  data            2   44[BANK0 ] PTR struct t_matrix_task
 26375 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 26376 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 26377 ;; Auto vars:     Size  Location     Type
 26378 ;;		None
 26379 ;; Return value:  Size  Location     Type
 26380 ;;                  1    wreg      void 
 26381 ;; Registers used:
 26382 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 26383 ;; Tracked objects:
 26384 ;;		On entry : 0/0
 26385 ;;		On exit  : 0/0
 26386 ;;		Unchanged: 0/0
 26387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26388 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26389 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26390 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26391 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26392 ;;Total ram usage:        4 bytes
 26393 ;; Hardware stack levels used:    1
 26394 ;; Hardware stack levels required when called:   10
 26395 ;; This function calls:
 26396 ;;		_marquee_speedy
 26397 ;; This function is called by:
 26398 ;;		_matrix_Main
 26399 ;; This function uses a non-reentrant model
 26400 ;;
 26401                           
 26402                           
 26403                           ;psect for function _matrix_display_option
 26404  242A                     _matrix_display_option:	
 26405                           
 26406                           ;matrix_task.c: 126: if(badge_locked ==1){
 26407                           
 26408                           ;incstack = 0
 26409                           ; Regs used in _matrix_display_option: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 26410  242A  0021               	movlb	1	; select bank1
 26411  242B  0344               	decf	_badge_locked^(0+128),w
 26412  242C  1D03               	btfss	3,2
 26413  242D  2C5C               	goto	l8997
 26414                           
 26415                           ;matrix_task.c: 127: marquee_speedy("YOU ARE IN TOO DEEP     TAKE THE RED PILL    ", dat
      +                          a->noholdCount, 40);
 26416  242E  302F               	movlw	low (STR_82| (0+32768))
 26417  242F  0020               	movlb	0	; select bank0
 26418  2430  00BA               	movwf	marquee_speedy@string
 26419  2431  30B8               	movlw	high (STR_82| (0+32768))
 26420  2432  00BB               	movwf	marquee_speedy@string+1
 26421  2433  084C               	movf	matrix_display_option@data,w
 26422  2434  0086               	movwf	6
 26423  2435  084D               	movf	matrix_display_option@data+1,w
 26424  2436  0087               	movwf	7
 26425  2437  315D               	addfsr 1,29
 26426  2438  3F40               	moviw [0]fsr1
 26427  2439  00BC               	movwf	marquee_speedy@count
 26428  243A  3F41               	moviw [1]fsr1
 26429  243B  00BD               	movwf	marquee_speedy@count+1
 26430  243C  3028               	movlw	40
 26431  243D  00BE               	movwf	marquee_speedy@multiplier
 26432  243E  3000               	movlw	0
 26433  243F  00BF               	movwf	marquee_speedy@multiplier+1
 26434  2440  31AF  278D         	fcall	_marquee_speedy
 26435                           
 26436                           ;matrix_task.c: 128: data->display_state = MATRIX_STATE_DISPLAY;
 26437  2442  0020               	movlb	0	; select bank0
 26438  2443  084C               	movf	matrix_display_option@data,w
 26439  2444  3E02               	addlw	2
 26440  2445  00CE               	movwf	??_matrix_display_option
 26441  2446  3000               	movlw	0
 26442  2447  3D4D               	addwfc	matrix_display_option@data+1,w
 26443  2448  00CF               	movwf	??_matrix_display_option+1
 26444  2449  084E               	movf	??_matrix_display_option,w
 26445  244A  0086               	movwf	6
 26446  244B  084F               	movf	??_matrix_display_option+1,w
 26447  244C  0087               	movwf	7
 26448  244D  300A               	movlw	10
 26449  244E  0081               	movwf	1
 26450                           
 26451                           ;matrix_task.c: 129: data->martix_state = STILL_IN_MATRIX;
 26452  244F  084C               	movf	matrix_display_option@data,w
 26453  2450  3E01               	addlw	1
 26454  2451  00CE               	movwf	??_matrix_display_option
 26455  2452  3000               	movlw	0
 26456  2453  3D4D               	addwfc	matrix_display_option@data+1,w
 26457  2454  00CF               	movwf	??_matrix_display_option+1
 26458  2455  084E               	movf	??_matrix_display_option,w
 26459  2456  0086               	movwf	6
 26460  2457  084F               	movf	??_matrix_display_option+1,w
 26461  2458  0087               	movwf	7
 26462  2459  3001               	movlw	1
 26463  245A  0081               	movwf	1
 26464                           
 26465                           ;matrix_task.c: 130: return;
 26466  245B  0008               	return
 26467  245C                     l8997:	
 26468                           
 26469                           ;matrix_task.c: 131: }
 26470                           ;matrix_task.c: 133: if (data->display_state == MATRIX_DONE){
 26471  245C  0020               	movlb	0	; select bank0
 26472  245D  084C               	movf	matrix_display_option@data,w
 26473  245E  0086               	movwf	6
 26474  245F  084D               	movf	matrix_display_option@data+1,w
 26475  2460  0087               	movwf	7
 26476  2461  3142               	addfsr 1,2
 26477  2462  300B               	movlw	11
 26478  2463  0601               	xorwf	1,w
 26479  2464  1D03               	btfss	3,2
 26480  2465  2C75               	goto	l9001
 26481                           
 26482                           ;matrix_task.c: 134: marquee_speedy("YOU STAY IN WONDERLAND    ", data->noholdCount, 15)
      +                          ;
 26483  2466  308D               	movlw	low (STR_83| (0+32768))
 26484  2467  00BA               	movwf	marquee_speedy@string
 26485  2468  30B9               	movlw	high (STR_83| (0+32768))
 26486  2469  00BB               	movwf	marquee_speedy@string+1
 26487  246A  084C               	movf	matrix_display_option@data,w
 26488  246B  0086               	movwf	6
 26489  246C  084D               	movf	matrix_display_option@data+1,w
 26490  246D  0087               	movwf	7
 26491  246E  315D               	addfsr 1,29
 26492  246F  3F40               	moviw [0]fsr1
 26493  2470  00BC               	movwf	marquee_speedy@count
 26494  2471  3F41               	moviw [1]fsr1
 26495  2472  00BD               	movwf	marquee_speedy@count+1
 26496  2473  300F               	movlw	15
 26497  2474  2CA7               	goto	L12
 26498  2475                     l9001:	
 26499                           ;matrix_task.c: 135: }
 26500                           
 26501                           
 26502                           ;matrix_task.c: 136: else if (data->display_state != MATRIX_STATE_DISPLAY ){
 26503  2475  0020               	movlb	0	; select bank0
 26504  2476  084C               	movf	matrix_display_option@data,w
 26505  2477  0086               	movwf	6
 26506  2478  084D               	movf	matrix_display_option@data+1,w
 26507  2479  0087               	movwf	7
 26508  247A  3142               	addfsr 1,2
 26509  247B  300A               	movlw	10
 26510  247C  0601               	xorwf	1,w
 26511  247D  1903               	btfsc	3,2
 26512  247E  2C98               	goto	l9005
 26513                           
 26514                           ;matrix_task.c: 138: marquee_speedy(matrix_option[data->display_state], data->noholdCoun
      +                          t, 20);
 26515  247F  084C               	movf	matrix_display_option@data,w
 26516  2480  0086               	movwf	6
 26517  2481  084D               	movf	matrix_display_option@data+1,w
 26518  2482  0087               	movwf	7
 26519  2483  3142               	addfsr 1,2
 26520  2484  3501               	lslf	1,w
 26521  2485  3ED8               	addlw	(low (_matrix_option| (0+768)))& (0+255)
 26522  2486  0086               	movwf	6
 26523  2487  3003               	movlw	3	; select bank7/8
 26524  2488  0087               	movwf	7
 26525  2489  3F40               	moviw [0]fsr1
 26526  248A  00BA               	movwf	marquee_speedy@string
 26527  248B  3F41               	moviw [1]fsr1
 26528  248C  00BB               	movwf	marquee_speedy@string+1
 26529  248D  084C               	movf	matrix_display_option@data,w
 26530  248E  0086               	movwf	6
 26531  248F  084D               	movf	matrix_display_option@data+1,w
 26532  2490  0087               	movwf	7
 26533  2491  315D               	addfsr 1,29
 26534  2492  3F40               	moviw [0]fsr1
 26535  2493  00BC               	movwf	marquee_speedy@count
 26536  2494  3F41               	moviw [1]fsr1
 26537  2495  00BD               	movwf	marquee_speedy@count+1
 26538  2496  3014               	movlw	20
 26539  2497  2CA7               	goto	L12
 26540  2498                     l9005:	
 26541                           ;matrix_task.c: 139: }
 26542                           
 26543                           
 26544                           ;matrix_task.c: 140: else{
 26545                           ;matrix_task.c: 141: marquee_speedy("THE CHOICE IS YOURS   ", data->noholdCount, 30);
 26546  2498  30DD               	movlw	low (STR_84| (0+32768))
 26547  2499  0020               	movlb	0	; select bank0
 26548  249A  00BA               	movwf	marquee_speedy@string
 26549  249B  30B9               	movlw	high (STR_84| (0+32768))
 26550  249C  00BB               	movwf	marquee_speedy@string+1
 26551  249D  084C               	movf	matrix_display_option@data,w
 26552  249E  0086               	movwf	6
 26553  249F  084D               	movf	matrix_display_option@data+1,w
 26554  24A0  0087               	movwf	7
 26555  24A1  315D               	addfsr 1,29
 26556  24A2  3F40               	moviw [0]fsr1
 26557  24A3  00BC               	movwf	marquee_speedy@count
 26558  24A4  3F41               	moviw [1]fsr1
 26559  24A5  00BD               	movwf	marquee_speedy@count+1
 26560  24A6  301E               	movlw	30
 26561  24A7                     L12:	
 26562  24A7  00BE               	movwf	marquee_speedy@multiplier
 26563  24A8  3000               	movlw	0
 26564  24A9  00BF               	movwf	marquee_speedy@multiplier+1
 26565  24AA  31AF  278D  31A4   	fcall	_marquee_speedy
 26566                           
 26567                           ;matrix_task.c: 142: }
 26568                           ;matrix_task.c: 144: if (data -> displayTickdown == 0 && data->display_state != MATRIX_D
      +                          ONE ){
 26569  24AD  0020               	movlb	0	; select bank0
 26570  24AE  084C               	movf	matrix_display_option@data,w
 26571  24AF  0086               	movwf	6
 26572  24B0  084D               	movf	matrix_display_option@data+1,w
 26573  24B1  0087               	movwf	7
 26574  24B2  3147               	addfsr 1,7
 26575  24B3  0016               	moviw fsr1++
 26576  24B4  0401               	iorwf	1,w
 26577  24B5  1D03               	btfss	3,2
 26578  24B6  0008               	return
 26579  24B7  084C               	movf	matrix_display_option@data,w
 26580  24B8  0086               	movwf	6
 26581  24B9  084D               	movf	matrix_display_option@data+1,w
 26582  24BA  0087               	movwf	7
 26583  24BB  3142               	addfsr 1,2
 26584  24BC  300B               	movlw	11
 26585  24BD  0601               	xorwf	1,w
 26586  24BE  1903               	btfsc	3,2
 26587  24BF  0008               	return
 26588                           
 26589                           ;matrix_task.c: 145: data->display_state = MATRIX_STATE_DISPLAY;
 26590  24C0  084C               	movf	matrix_display_option@data,w
 26591  24C1  3E02               	addlw	2
 26592  24C2  00CE               	movwf	??_matrix_display_option
 26593  24C3  3000               	movlw	0
 26594  24C4  3D4D               	addwfc	matrix_display_option@data+1,w
 26595  24C5  00CF               	movwf	??_matrix_display_option+1
 26596  24C6  084E               	movf	??_matrix_display_option,w
 26597  24C7  0086               	movwf	6
 26598  24C8  084F               	movf	??_matrix_display_option+1,w
 26599  24C9  0087               	movwf	7
 26600  24CA  300A               	movlw	10
 26601  24CB  0081               	movwf	1
 26602  24CC  0008               	return
 26603  24CD                     __end_of_matrix_display_option:	
 26604                           
 26605                           	psect	text29
 26606  2BDA                     __ptext29:	
 26607 ;; *************** function _slot_Setup *****************
 26608 ;; Defined at:
 26609 ;;		line 48 in file "slot_task.c"
 26610 ;; Parameters:    Size  Location     Type
 26611 ;;  taskData        2   15[BANK0 ] PTR void 
 26612 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 26613 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 26614 ;; Auto vars:     Size  Location     Type
 26615 ;;  data            2   20[BANK0 ] PTR struct t_slot_taskDa
 26616 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 26617 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 26618 ;; Return value:  Size  Location     Type
 26619 ;;                  1    wreg      void 
 26620 ;; Registers used:
 26621 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 26622 ;; Tracked objects:
 26623 ;;		On entry : 0/0
 26624 ;;		On exit  : 0/0
 26625 ;;		Unchanged: 0/0
 26626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26627 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26628 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26629 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26630 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26631 ;;Total ram usage:        7 bytes
 26632 ;; Hardware stack levels used:    1
 26633 ;; Hardware stack levels required when called:    6
 26634 ;; This function calls:
 26635 ;;		___lwmod
 26636 ;;		_memset
 26637 ;;		_rand
 26638 ;; This function is called by:
 26639 ;;		_menu_Main
 26640 ;;		_locked_Main
 26641 ;;		_slot_Init
 26642 ;;		_slot_Main
 26643 ;; This function uses a non-reentrant model
 26644 ;;
 26645                           
 26646                           
 26647                           ;psect for function _slot_Setup
 26648  2BDA                     _slot_Setup:	
 26649                           
 26650                           ;slot_task.c: 49: struct t_slot_taskData *data = (struct t_slot_taskData *) taskData;
 26651                           
 26652                           ;incstack = 0
 26653                           ; Regs used in _slot_Setup: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 26654  2BDA  0020               	movlb	0	; select bank0
 26655  2BDB  0830               	movf	slot_Setup@taskData+1,w
 26656  2BDC  00B5               	movwf	slot_Setup@data+1
 26657  2BDD  082F               	movf	slot_Setup@taskData,w
 26658  2BDE  00B4               	movwf	slot_Setup@data
 26659                           
 26660                           ;slot_task.c: 50: slot_taskData = data;
 26661  2BDF  0835               	movf	slot_Setup@data+1,w
 26662  2BE0  0021               	movlb	1	; select bank1
 26663  2BE1  00BD               	movwf	(_slot_taskData+1)^(0+128)
 26664  2BE2  0020               	movlb	0	; select bank0
 26665  2BE3  0834               	movf	slot_Setup@data,w
 26666  2BE4  0021               	movlb	1	; select bank1
 26667  2BE5  00BC               	movwf	_slot_taskData^(0+128)
 26668                           
 26669                           ;slot_task.c: 51: data->displayTickCount = 0;
 26670  2BE6  0020               	movlb	0	; select bank0
 26671  2BE7  0834               	movf	slot_Setup@data,w
 26672  2BE8  0086               	movwf	6
 26673  2BE9  0835               	movf	slot_Setup@data+1,w
 26674  2BEA  0087               	movwf	7
 26675  2BEB  3143               	addfsr 1,3
 26676  2BEC  3000               	movlw	0
 26677  2BED  3FC0               	movwi [0]fsr1
 26678  2BEE  3FC1               	movwi [1]fsr1
 26679                           
 26680                           ;slot_task.c: 52: data->delayTickCount = 0;
 26681  2BEF  0834               	movf	slot_Setup@data,w
 26682  2BF0  0086               	movwf	6
 26683  2BF1  0835               	movf	slot_Setup@data+1,w
 26684  2BF2  0087               	movwf	7
 26685  2BF3  3145               	addfsr 1,5
 26686  2BF4  3000               	movlw	0
 26687  2BF5  3FC0               	movwi [0]fsr1
 26688  2BF6  3FC1               	movwi [1]fsr1
 26689                           
 26690                           ;slot_task.c: 53: memset(data->slot_print_buf, 0x00, 20);
 26691  2BF7  0834               	movf	slot_Setup@data,w
 26692  2BF8  3E0B               	addlw	11
 26693  2BF9  00F1               	movwf	memset@p1
 26694  2BFA  3000               	movlw	0
 26695  2BFB  3D35               	addwfc	slot_Setup@data+1,w
 26696  2BFC  00F2               	movwf	memset@p1+1
 26697  2BFD  3000               	movlw	0
 26698  2BFE  00F3               	movwf	memset@c
 26699  2BFF  00F4               	movwf	memset@c+1
 26700  2C00  3014               	movlw	20
 26701  2C01  00F5               	movwf	memset@n
 26702  2C02  3000               	movlw	0
 26703  2C03  00F6               	movwf	memset@n+1
 26704  2C04  31B3  23C2  31AB   	fcall	_memset
 26705                           
 26706                           ;slot_task.c: 54: if (!badge_locked) {
 26707  2C07  0021               	movlb	1	; select bank1
 26708  2C08  0844               	movf	_badge_locked^(0+128),w
 26709  2C09  1D03               	btfss	3,2
 26710  2C0A  2C23               	goto	l8629
 26711                           
 26712                           ;slot_task.c: 55: Shot_Index = (u8)rand() % (sizeof(Shot_Options)/sizeof(Shot_Options[0]
      +                          ));
 26713  2C0B  3009               	movlw	9
 26714  2C0C  0020               	movlb	0	; select bank0
 26715  2C0D  00AB               	movwf	___lwmod@divisor
 26716  2C0E  3000               	movlw	0
 26717  2C0F  00AC               	movwf	___lwmod@divisor+1
 26718  2C10  31A8  20FB  31AB   	fcall	_rand
 26719  2C13  0020               	movlb	0	; select bank0
 26720  2C14  0824               	movf	?_rand,w
 26721  2C15  00B1               	movwf	??_slot_Setup
 26722  2C16  01B2               	clrf	??_slot_Setup+1
 26723  2C17  0831               	movf	??_slot_Setup,w
 26724  2C18  00AD               	movwf	___lwmod@dividend
 26725  2C19  0832               	movf	??_slot_Setup+1,w
 26726  2C1A  00AE               	movwf	___lwmod@dividend+1
 26727  2C1B  31B5  25A3  31AB   	fcall	___lwmod
 26728  2C1E  0020               	movlb	0	; select bank0
 26729  2C1F  082B               	movf	?___lwmod,w
 26730  2C20  00B3               	movwf	??_slot_Setup+2
 26731  2C21  0833               	movf	??_slot_Setup+2,w
 26732  2C22  2C27               	goto	L13
 26733  2C23                     l8629:	
 26734                           ;slot_task.c: 56: }
 26735                           
 26736                           
 26737                           ;slot_task.c: 57: else {
 26738                           ;slot_task.c: 58: Shot_Index = ((sizeof(Shot_Options)/sizeof(Shot_Options[0]))-1);
 26739  2C23  3008               	movlw	8
 26740  2C24  0020               	movlb	0	; select bank0
 26741  2C25  00B1               	movwf	??_slot_Setup
 26742  2C26  0831               	movf	??_slot_Setup,w
 26743  2C27                     L13:	
 26744  2C27  00FC               	movwf	_Shot_Index
 26745                           
 26746                           ;slot_task.c: 59: }
 26747                           ;slot_task.c: 61: Leds_idx = 1;
 26748  2C28  3001               	movlw	1
 26749  2C29  0021               	movlb	1	; select bank1
 26750  2C2A  00D0               	movwf	_Leds_idx^(0+128)
 26751  2C2B  3000               	movlw	0
 26752  2C2C  00D1               	movwf	(_Leds_idx^(0+128)+1)
 26753  2C2D  0008               	return
 26754  2C2E                     __end_of_slot_Setup:	
 26755                           
 26756                           	psect	text30
 26757  3340                     __ptext30:	
 26758 ;; *************** function _locked_unlock_leds *****************
 26759 ;; Defined at:
 26760 ;;		line 71 in file "locked_task.c"
 26761 ;; Parameters:    Size  Location     Type
 26762 ;;		None
 26763 ;; Auto vars:     Size  Location     Type
 26764 ;;		None
 26765 ;; Return value:  Size  Location     Type
 26766 ;;                  2  1249[None  ] unsigned int 
 26767 ;; Registers used:
 26768 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 26769 ;; Tracked objects:
 26770 ;;		On entry : 0/0
 26771 ;;		On exit  : 0/0
 26772 ;;		Unchanged: 0/0
 26773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26775 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26776 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26777 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26778 ;;Total ram usage:        2 bytes
 26779 ;; Hardware stack levels used:    1
 26780 ;; Hardware stack levels required when called:    4
 26781 ;; This function calls:
 26782 ;;		Nothing
 26783 ;; This function is called by:
 26784 ;;		_locked_Main
 26785 ;; This function uses a non-reentrant model
 26786 ;;
 26787                           
 26788                           
 26789                           ;psect for function _locked_unlock_leds
 26790  3340                     _locked_unlock_leds:	
 26791                           
 26792                           ;locked_task.c: 72: locked_locking_leds_idx = 0;
 26793                           
 26794                           ;incstack = 0
 26795                           ; Regs used in _locked_unlock_leds: [wreg+fsr1l+fsr1h+status,2+status,0]
 26796  3340  0021               	movlb	1	; select bank1
 26797  3341  01A4               	clrf	_locked_locking_leds_idx^(0+128)
 26798  3342  01A5               	clrf	(_locked_locking_leds_idx+1)^(0+128)
 26799                           
 26800                           ;locked_task.c: 73: locked_leds = locked_lock_base_leds | locked_locking_leds[locked_loc
      +                          king_leds_idx];
 26801  3343  3524               	lslf	_locked_locking_leds_idx^(0+128),w
 26802  3344  3E20               	addlw	(low (_locked_locking_leds| (0+512)))& (0+255)
 26803  3345  0086               	movwf	6
 26804  3346  3002               	movlw	2	; select bank4/5
 26805  3347  0087               	movwf	7
 26806  3348  3F40               	moviw [0]fsr1
 26807  3349  00F1               	movwf	??_locked_unlock_leds
 26808  334A  3F41               	moviw [1]fsr1
 26809  334B  00F2               	movwf	??_locked_unlock_leds+1
 26810  334C  0852               	movf	_locked_lock_base_leds^(0+128),w
 26811  334D  0471               	iorwf	??_locked_unlock_leds,w
 26812  334E  00A2               	movwf	_locked_leds^(0+128)
 26813  334F  0853               	movf	(_locked_lock_base_leds+1)^(0+128),w
 26814  3350  0472               	iorwf	??_locked_unlock_leds+1,w
 26815  3351  00A3               	movwf	(_locked_leds+1)^(0+128)
 26816  3352  0008               	return
 26817  3353                     __end_of_locked_unlock_leds:	
 26818                           ;locked_task.c: 74: return locked_leds;
 26819                           ;	Return value of _locked_unlock_leds is never used
 26820                           
 26821                           
 26822                           	psect	text31
 26823  100F                     __ptext31:	
 26824 ;; *************** function _locked_secret_check *****************
 26825 ;; Defined at:
 26826 ;;		line 119 in file "locked_task.c"
 26827 ;; Parameters:    Size  Location     Type
 26828 ;;  data            2    7[COMMON] PTR struct t_locked_task
 26829 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 26830 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 26831 ;;  buttonPresse    1    9[COMMON] unsigned char 
 26832 ;; Auto vars:     Size  Location     Type
 26833 ;;  i               2    8[BANK0 ] unsigned int 
 26834 ;;  hit_counter     6    0        unsigned char [6]
 26835 ;;  currents_siz    2    5[BANK0 ] unsigned int 
 26836 ;;  size            2    3[BANK0 ] unsigned int 
 26837 ;;  inputs          1    7[BANK0 ] PTR unsigned char 
 26838 ;;		 -> locked_secret_inputs.inputs(20), locked_secret_inputs(25), 
 26839 ;; Return value:  Size  Location     Type
 26840 ;;                  1    wreg      unsigned char 
 26841 ;; Registers used:
 26842 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 26843 ;; Tracked objects:
 26844 ;;		On entry : 0/0
 26845 ;;		On exit  : 0/0
 26846 ;;		Unchanged: 0/0
 26847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26848 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26849 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26850 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26851 ;;      Totals:         3      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26852 ;;Total ram usage:       13 bytes
 26853 ;; Hardware stack levels used:    1
 26854 ;; Hardware stack levels required when called:    5
 26855 ;; This function calls:
 26856 ;;		___bmul
 26857 ;;		_strlen
 26858 ;; This function is called by:
 26859 ;;		_locked_Main
 26860 ;; This function uses a non-reentrant model
 26861 ;;
 26862                           
 26863                           
 26864                           ;psect for function _locked_secret_check
 26865  100F                     _locked_secret_check:	
 26866                           
 26867                           ;locked_task.c: 120: u8 *inputs;
 26868                           ;locked_task.c: 121: u16 size = sizeof(locked_secret_inputs) / sizeof(locked_secret_inpu
      +                          ts[0]);
 26869                           
 26870                           ;incstack = 0
 26871                           ; Regs used in _locked_secret_check: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 26872  100F  3001               	movlw	1
 26873  1010  0020               	movlb	0	; select bank0
 26874  1011  00A3               	movwf	locked_secret_check@size
 26875  1012  3000               	movlw	0
 26876  1013  00A4               	movwf	locked_secret_check@size+1
 26877                           
 26878                           ;locked_task.c: 122: u16 currents_size;
 26879                           ;locked_task.c: 123: char hit_counter[6];
 26880                           ;locked_task.c: 125: for (u16 i = 0; i < size; i++){
 26881  1014  01A8               	clrf	locked_secret_check@i
 26882  1015  01A9               	clrf	locked_secret_check@i+1
 26883  1016                     l8871:	
 26884  1016  0824               	movf	locked_secret_check@size+1,w
 26885  1017  0229               	subwf	locked_secret_check@i+1,w
 26886  1018  1D03               	skipz
 26887  1019  281C               	goto	u5475
 26888  101A  0823               	movf	locked_secret_check@size,w
 26889  101B  0228               	subwf	locked_secret_check@i,w
 26890  101C                     u5475:	
 26891  101C  1803               	btfsc	3,0
 26892  101D  28C9               	goto	l8873
 26893                           
 26894                           ;locked_task.c: 126: inputs = locked_secret_inputs[i].inputs;
 26895  101E  3019               	movlw	25
 26896  101F  00A0               	movwf	??_locked_secret_check
 26897  1020  0820               	movf	??_locked_secret_check,w
 26898  1021  00F1               	movwf	___bmul@multiplicand
 26899  1022  0828               	movf	locked_secret_check@i,w
 26900  1023  31B3  230A  3190   	fcall	___bmul
 26901  1026  3E4F               	addlw	(low (_locked_secret_inputs| (0+512)))& (0+255)
 26902  1027  0020               	movlb	0	; select bank0
 26903  1028  00A1               	movwf	??_locked_secret_check+1
 26904  1029  0821               	movf	??_locked_secret_check+1,w
 26905  102A  00A7               	movwf	locked_secret_check@inputs
 26906                           
 26907                           ;locked_task.c: 128: if (buttonPressed == inputs[locked_secret_inputs[i].idx]){
 26908  102B  3019               	movlw	25
 26909  102C  00A0               	movwf	??_locked_secret_check
 26910  102D  0820               	movf	??_locked_secret_check,w
 26911  102E  00F1               	movwf	___bmul@multiplicand
 26912  102F  0828               	movf	locked_secret_check@i,w
 26913  1030  31B3  230A  3190   	fcall	___bmul
 26914  1033  3E14               	addlw	20
 26915  1034  3E4F               	addlw	(low (_locked_secret_inputs| (0+512)))& (0+255)
 26916  1035  0086               	movwf	6
 26917  1036  3002               	movlw	2	; select bank4/5
 26918  1037  0087               	movwf	7
 26919  1038  0801               	movf	1,w
 26920  1039  0020               	movlb	0	; select bank0
 26921  103A  0727               	addwf	locked_secret_check@inputs,w
 26922  103B  00A1               	movwf	??_locked_secret_check+1
 26923  103C  0821               	movf	??_locked_secret_check+1,w
 26924  103D  0086               	movwf	6
 26925  103E  3002               	movlw	2	; select bank4/5
 26926  103F  0087               	movwf	7
 26927  1040  0801               	movf	1,w
 26928  1041  0679               	xorwf	locked_secret_check@buttonPressed,w
 26929  1042  1D03               	skipz
 26930  1043  28B2               	goto	l8867
 26931                           
 26932                           ;locked_task.c: 129: currents_size = strlen((const char *)inputs);
 26933  1044  0827               	movf	locked_secret_check@inputs,w
 26934  1045  00F1               	movwf	strlen@s
 26935  1046  3002               	movlw	2
 26936  1047  00F2               	movwf	strlen@s+1
 26937  1048  31B4  2466  3190   	fcall	_strlen
 26938  104B  0872               	movf	?_strlen+1,w
 26939  104C  0020               	movlb	0	; select bank0
 26940  104D  00A6               	movwf	locked_secret_check@currents_size+1
 26941  104E  0871               	movf	?_strlen,w
 26942  104F  00A5               	movwf	locked_secret_check@currents_size
 26943                           
 26944                           ;locked_task.c: 130: locked_secret_inputs[i].idx++;
 26945  1050  3019               	movlw	25
 26946  1051  00A0               	movwf	??_locked_secret_check
 26947  1052  0820               	movf	??_locked_secret_check,w
 26948  1053  00F1               	movwf	___bmul@multiplicand
 26949  1054  0828               	movf	locked_secret_check@i,w
 26950  1055  31B3  230A  3190   	fcall	___bmul
 26951  1058  3E14               	addlw	20
 26952  1059  3E4F               	addlw	(low (_locked_secret_inputs| (0+512)))& (0+255)
 26953  105A  0086               	movwf	6
 26954  105B  3002               	movlw	2	; select bank4/5
 26955  105C  0087               	movwf	7
 26956  105D  3001               	movlw	1
 26957  105E  0781               	addwf	1,f
 26958  105F  3141               	addfsr 1,1
 26959  1060  1803               	skipnc
 26960  1061  0A81               	incf	1,f
 26961                           
 26962                           ;locked_task.c: 132: if (locked_secret_inputs[i].idx == currents_size) {
 26963  1062  3019               	movlw	25
 26964  1063  0020               	movlb	0	; select bank0
 26965  1064  00A0               	movwf	??_locked_secret_check
 26966  1065  0820               	movf	??_locked_secret_check,w
 26967  1066  00F1               	movwf	___bmul@multiplicand
 26968  1067  0828               	movf	locked_secret_check@i,w
 26969  1068  31B3  230A  3190   	fcall	___bmul
 26970  106B  3E14               	addlw	20
 26971  106C  3E4F               	addlw	(low (_locked_secret_inputs| (0+512)))& (0+255)
 26972  106D  0086               	movwf	6
 26973  106E  3002               	movlw	2	; select bank4/5
 26974  106F  0087               	movwf	7
 26975  1070  3F40               	moviw [0]fsr1
 26976  1071  0020               	movlb	0	; select bank0
 26977  1072  00A1               	movwf	??_locked_secret_check+1
 26978  1073  3F41               	moviw [1]fsr1
 26979  1074  00A2               	movwf	??_locked_secret_check+2
 26980  1075  0826               	movf	locked_secret_check@currents_size+1,w
 26981  1076  0622               	xorwf	??_locked_secret_check+2,w
 26982  1077  1D03               	skipz
 26983  1078  287B               	goto	u5465
 26984  1079  0825               	movf	locked_secret_check@currents_size,w
 26985  107A  0621               	xorwf	??_locked_secret_check+1,w
 26986  107B                     u5465:	
 26987  107B  1D03               	skipz
 26988  107C  28C3               	goto	l8869
 26989                           
 26990                           ;locked_task.c: 134: locked_secret_inputs[i].idx = 0;
 26991  107D  3019               	movlw	25
 26992  107E  00A0               	movwf	??_locked_secret_check
 26993  107F  0820               	movf	??_locked_secret_check,w
 26994  1080  00F1               	movwf	___bmul@multiplicand
 26995  1081  0828               	movf	locked_secret_check@i,w
 26996  1082  31B3  230A  3190   	fcall	___bmul
 26997  1085  3E14               	addlw	20
 26998  1086  3E4F               	addlw	(low (_locked_secret_inputs| (0+512)))& (0+255)
 26999  1087  0086               	movwf	6
 27000  1088  3002               	movlw	2	; select bank4/5
 27001  1089  0087               	movwf	7
 27002  108A  3000               	movlw	0
 27003  108B  3FC0               	movwi [0]fsr1
 27004  108C  3FC1               	movwi [1]fsr1
 27005                           
 27006                           ;locked_task.c: 137: *(locked_secret_inputs[i].variable) = (u16) locked_secret_inputs[i]
      +                          .value;
 27007  108D  3019               	movlw	25
 27008  108E  0020               	movlb	0	; select bank0
 27009  108F  00A0               	movwf	??_locked_secret_check
 27010  1090  0820               	movf	??_locked_secret_check,w
 27011  1091  00F1               	movwf	___bmul@multiplicand
 27012  1092  0828               	movf	locked_secret_check@i,w
 27013  1093  31B3  230A  3190   	fcall	___bmul
 27014  1096  3E17               	addlw	23
 27015  1097  3E4F               	addlw	(low (_locked_secret_inputs| (0+512)))& (0+255)
 27016  1098  0086               	movwf	6
 27017  1099  3002               	movlw	2	; select bank4/5
 27018  109A  0087               	movwf	7
 27019  109B  3019               	movlw	25
 27020  109C  0020               	movlb	0	; select bank0
 27021  109D  00A1               	movwf	??_locked_secret_check+1
 27022  109E  0821               	movf	??_locked_secret_check+1,w
 27023  109F  00F1               	movwf	___bmul@multiplicand
 27024  10A0  0828               	movf	locked_secret_check@i,w
 27025  10A1  31B3  230A         	fcall	___bmul
 27026  10A3  3E16               	addlw	22
 27027  10A4  3E4F               	addlw	(low (_locked_secret_inputs| (0+512)))& (0+255)
 27028  10A5  0084               	movwf	4
 27029  10A6  3002               	movlw	2	; select bank4/5
 27030  10A7  0085               	movwf	5
 27031  10A8  0800               	movf	0,w
 27032  10A9  0084               	movwf	4
 27033  10AA  3001               	movlw	1	; select bank2/3
 27034  10AB  0085               	movwf	5
 27035  10AC  3F40               	moviw [0]fsr1
 27036  10AD  3F80               	movwi [0]fsr0
 27037  10AE  3F41               	moviw [1]fsr1
 27038  10AF  3F81               	movwi [1]fsr0
 27039                           
 27040                           ;locked_task.c: 139: return 1;
 27041  10B0  3001               	movlw	1
 27042  10B1  0008               	return
 27043  10B2                     l8867:	
 27044                           ;locked_task.c: 140: }
 27045                           ;locked_task.c: 141: } else {
 27046                           
 27047                           
 27048                           ;locked_task.c: 143: locked_secret_inputs[i].idx = 0;
 27049  10B2  3019               	movlw	25
 27050  10B3  0020               	movlb	0	; select bank0
 27051  10B4  00A0               	movwf	??_locked_secret_check
 27052  10B5  0820               	movf	??_locked_secret_check,w
 27053  10B6  00F1               	movwf	___bmul@multiplicand
 27054  10B7  0828               	movf	locked_secret_check@i,w
 27055  10B8  31B3  230A  3190   	fcall	___bmul
 27056  10BB  3E14               	addlw	20
 27057  10BC  3E4F               	addlw	(low (_locked_secret_inputs| (0+512)))& (0+255)
 27058  10BD  0086               	movwf	6
 27059  10BE  3002               	movlw	2	; select bank4/5
 27060  10BF  0087               	movwf	7
 27061  10C0  3000               	movlw	0
 27062  10C1  3FC0               	movwi [0]fsr1
 27063  10C2  3FC1               	movwi [1]fsr1
 27064  10C3                     l8869:	
 27065  10C3  3001               	movlw	1
 27066  10C4  0020               	movlb	0	; select bank0
 27067  10C5  07A8               	addwf	locked_secret_check@i,f
 27068  10C6  3000               	movlw	0
 27069  10C7  3DA9               	addwfc	locked_secret_check@i+1,f
 27070  10C8  2816               	goto	l8871
 27071  10C9                     l8873:	
 27072                           
 27073                           ;locked_task.c: 144: }
 27074                           ;locked_task.c: 145: }
 27075                           ;locked_task.c: 146: return 0;
 27076  10C9  3000               	movlw	0
 27077  10CA  0008               	return
 27078  10CB                     __end_of_locked_secret_check:	
 27079                           
 27080                           	psect	text32
 27081  330A                     __ptext32:	
 27082 ;; *************** function ___bmul *****************
 27083 ;; Defined at:
 27084 ;;		line 4 in file "/Applications/microchip/xc8/v1.42/sources/common/Umul8.c"
 27085 ;; Parameters:    Size  Location     Type
 27086 ;;  multiplier      1    wreg     unsigned char 
 27087 ;;  multiplicand    1    1[COMMON] unsigned char 
 27088 ;; Auto vars:     Size  Location     Type
 27089 ;;  multiplier      1    4[COMMON] unsigned char 
 27090 ;;  product         1    3[COMMON] unsigned char 
 27091 ;; Return value:  Size  Location     Type
 27092 ;;                  1    wreg      unsigned char 
 27093 ;; Registers used:
 27094 ;;		wreg, status,2, status,0
 27095 ;; Tracked objects:
 27096 ;;		On entry : 0/0
 27097 ;;		On exit  : 0/0
 27098 ;;		Unchanged: 0/0
 27099 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27100 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27101 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27102 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27103 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27104 ;;Total ram usage:        4 bytes
 27105 ;; Hardware stack levels used:    1
 27106 ;; Hardware stack levels required when called:    4
 27107 ;; This function calls:
 27108 ;;		Nothing
 27109 ;; This function is called by:
 27110 ;;		_matrix_secret_check
 27111 ;;		_secret_check
 27112 ;;		_locked_secret_check
 27113 ;; This function uses a non-reentrant model
 27114 ;;
 27115                           
 27116                           
 27117                           ;psect for function ___bmul
 27118  330A                     ___bmul:	
 27119                           
 27120                           ;incstack = 0
 27121                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 27122                           ;___bmul@multiplier stored from wreg
 27123  330A  00F4               	movwf	___bmul@multiplier
 27124  330B  01F3               	clrf	___bmul@product
 27125  330C                     l8545:	
 27126  330C  1C74               	btfss	___bmul@multiplier,0
 27127  330D  2B12               	goto	l8549
 27128  330E  0871               	movf	___bmul@multiplicand,w
 27129  330F  00F2               	movwf	??___bmul
 27130  3310  0872               	movf	??___bmul,w
 27131  3311  07F3               	addwf	___bmul@product,f
 27132  3312                     l8549:	
 27133  3312  1003               	clrc
 27134  3313  0DF1               	rlf	___bmul@multiplicand,f
 27135  3314  1003               	clrc
 27136  3315  0CF4               	rrf	___bmul@multiplier,f
 27137  3316  0874               	movf	___bmul@multiplier,w
 27138  3317  1D03               	btfss	3,2
 27139  3318  2B0C               	goto	l8545
 27140  3319  0873               	movf	___bmul@product,w
 27141  331A  0008               	return
 27142  331B                     __end_of___bmul:	
 27143                           
 27144                           	psect	text33
 27145  33F5                     __ptext33:	
 27146 ;; *************** function _locked_lock_leds *****************
 27147 ;; Defined at:
 27148 ;;		line 63 in file "locked_task.c"
 27149 ;; Parameters:    Size  Location     Type
 27150 ;;		None
 27151 ;; Auto vars:     Size  Location     Type
 27152 ;;  size            2    3[COMMON] unsigned int 
 27153 ;; Return value:  Size  Location     Type
 27154 ;;                  2  1246[None  ] unsigned int 
 27155 ;; Registers used:
 27156 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 27157 ;; Tracked objects:
 27158 ;;		On entry : 0/0
 27159 ;;		On exit  : 0/0
 27160 ;;		Unchanged: 0/0
 27161 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27162 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27163 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27164 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27165 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27166 ;;Total ram usage:        4 bytes
 27167 ;; Hardware stack levels used:    1
 27168 ;; Hardware stack levels required when called:    4
 27169 ;; This function calls:
 27170 ;;		Nothing
 27171 ;; This function is called by:
 27172 ;;		_locked_Init
 27173 ;;		_locked_Main
 27174 ;; This function uses a non-reentrant model
 27175 ;;
 27176                           
 27177                           
 27178                           ;psect for function _locked_lock_leds
 27179  33F5                     _locked_lock_leds:	
 27180                           
 27181                           ;locked_task.c: 64: u16 size = sizeof(locked_locking_leds) / sizeof(locked_locking_leds[
      +                          0]);
 27182                           
 27183                           ;incstack = 0
 27184                           ; Regs used in _locked_lock_leds: [wreg+fsr1l+fsr1h+status,2+status,0]
 27185  33F5  3006               	movlw	6
 27186  33F6  00F3               	movwf	locked_lock_leds@size
 27187  33F7  3000               	movlw	0
 27188  33F8  00F4               	movwf	locked_lock_leds@size+1
 27189                           
 27190                           ;locked_task.c: 65: locked_locking_leds_idx = size - 1;
 27191  33F9  0873               	movf	locked_lock_leds@size,w
 27192  33FA  3EFF               	addlw	255
 27193  33FB  0021               	movlb	1	; select bank1
 27194  33FC  00A4               	movwf	_locked_locking_leds_idx^(0+128)
 27195  33FD  30FF               	movlw	255
 27196  33FE  3D74               	addwfc	locked_lock_leds@size+1,w
 27197  33FF  00A5               	movwf	(_locked_locking_leds_idx+1)^(0+128)
 27198                           
 27199                           ;locked_task.c: 66: locked_leds = locked_lock_base_leds | locked_locking_leds[locked_loc
      +                          king_leds_idx];
 27200  3400  3524               	lslf	_locked_locking_leds_idx^(0+128),w
 27201  3401  3E20               	addlw	(low (_locked_locking_leds| (0+512)))& (0+255)
 27202  3402  0086               	movwf	6
 27203  3403  3002               	movlw	2	; select bank4/5
 27204  3404  0087               	movwf	7
 27205  3405  3F40               	moviw [0]fsr1
 27206  3406  00F1               	movwf	??_locked_lock_leds
 27207  3407  3F41               	moviw [1]fsr1
 27208  3408  00F2               	movwf	??_locked_lock_leds+1
 27209  3409  0852               	movf	_locked_lock_base_leds^(0+128),w
 27210  340A  0471               	iorwf	??_locked_lock_leds,w
 27211  340B  00A2               	movwf	_locked_leds^(0+128)
 27212  340C  0853               	movf	(_locked_lock_base_leds+1)^(0+128),w
 27213  340D  0472               	iorwf	??_locked_lock_leds+1,w
 27214  340E  00A3               	movwf	(_locked_leds+1)^(0+128)
 27215  340F  0008               	return
 27216  3410                     __end_of_locked_lock_leds:	
 27217                           ;locked_task.c: 67: return locked_leds;
 27218                           ;	Return value of _locked_lock_leds is never used
 27219                           
 27220                           
 27221                           	psect	text34
 27222  0800                     __ptext34:	
 27223 ;; *************** function _locked_get_unlock_leds *****************
 27224 ;; Defined at:
 27225 ;;		line 88 in file "locked_task.c"
 27226 ;; Parameters:    Size  Location     Type
 27227 ;;		None
 27228 ;; Auto vars:     Size  Location     Type
 27229 ;;  leds            2    3[COMMON] unsigned int 
 27230 ;; Return value:  Size  Location     Type
 27231 ;;                  2    1[COMMON] unsigned int 
 27232 ;; Registers used:
 27233 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 27234 ;; Tracked objects:
 27235 ;;		On entry : 0/0
 27236 ;;		On exit  : 0/0
 27237 ;;		Unchanged: 0/0
 27238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27239 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27240 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27241 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27242 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27243 ;;Total ram usage:        4 bytes
 27244 ;; Hardware stack levels used:    1
 27245 ;; Hardware stack levels required when called:    4
 27246 ;; This function calls:
 27247 ;;		Nothing
 27248 ;; This function is called by:
 27249 ;;		_locked_Main
 27250 ;; This function uses a non-reentrant model
 27251 ;;
 27252                           
 27253                           
 27254                           ;psect for function _locked_get_unlock_leds
 27255  0800                     _locked_get_unlock_leds:	
 27256                           
 27257                           ;locked_task.c: 89: u16 leds = locked_locking_leds[locked_locking_leds_idx];
 27258                           
 27259                           ;incstack = 0
 27260                           ; Regs used in _locked_get_unlock_leds: [wreg+fsr1l+fsr1h+status,2+status,0]
 27261  0800  0021               	movlb	1	; select bank1
 27262  0801  3524               	lslf	_locked_locking_leds_idx^(0+128),w
 27263  0802  3E20               	addlw	(low (_locked_locking_leds| (0+512)))& (0+255)
 27264  0803  0086               	movwf	6
 27265  0804  3002               	movlw	2	; select bank4/5
 27266  0805  0087               	movwf	7
 27267  0806  3F40               	moviw [0]fsr1
 27268  0807  00F3               	movwf	locked_get_unlock_leds@leds
 27269  0808  3F41               	moviw [1]fsr1
 27270  0809  00F4               	movwf	locked_get_unlock_leds@leds+1
 27271                           
 27272                           ;locked_task.c: 92: if (locked_locking_leds_idx > 0){
 27273  080A  0824               	movf	_locked_locking_leds_idx^(0+128),w
 27274  080B  0425               	iorwf	(_locked_locking_leds_idx+1)^(0+128),w
 27275  080C  1903               	btfsc	3,2
 27276  080D  2812               	goto	l1257
 27277                           
 27278                           ;locked_task.c: 93: locked_locking_leds_idx -= 1;
 27279  080E  3001               	movlw	1
 27280  080F  02A4               	subwf	_locked_locking_leds_idx^(0+128),f
 27281  0810  3000               	movlw	0
 27282  0811  3BA5               	subwfb	(_locked_locking_leds_idx+1)^(0+128),f
 27283  0812                     l1257:	
 27284                           
 27285                           ;locked_task.c: 94: }
 27286                           ;locked_task.c: 95: return locked_lock_base_leds | leds;
 27287  0812  0873               	movf	locked_get_unlock_leds@leds,w
 27288  0813  0452               	iorwf	_locked_lock_base_leds^(0+128),w
 27289  0814  00F1               	movwf	?_locked_get_unlock_leds
 27290  0815  0874               	movf	locked_get_unlock_leds@leds+1,w
 27291  0816  0453               	iorwf	(_locked_lock_base_leds+1)^(0+128),w
 27292  0817  00F2               	movwf	?_locked_get_unlock_leds+1
 27293  0818  0008               	return
 27294  0819                     __end_of_locked_get_unlock_leds:	
 27295                           
 27296                           	psect	text35
 27297  3507                     __ptext35:	
 27298 ;; *************** function _locked_get_lock_leds *****************
 27299 ;; Defined at:
 27300 ;;		line 77 in file "locked_task.c"
 27301 ;; Parameters:    Size  Location     Type
 27302 ;;		None
 27303 ;; Auto vars:     Size  Location     Type
 27304 ;;  leds            2    7[COMMON] unsigned int 
 27305 ;;  size            2    5[COMMON] unsigned int 
 27306 ;; Return value:  Size  Location     Type
 27307 ;;                  2    1[COMMON] unsigned int 
 27308 ;; Registers used:
 27309 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 27310 ;; Tracked objects:
 27311 ;;		On entry : 0/0
 27312 ;;		On exit  : 0/0
 27313 ;;		Unchanged: 0/0
 27314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27315 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27316 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27317 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27318 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27319 ;;Total ram usage:        8 bytes
 27320 ;; Hardware stack levels used:    1
 27321 ;; Hardware stack levels required when called:    4
 27322 ;; This function calls:
 27323 ;;		Nothing
 27324 ;; This function is called by:
 27325 ;;		_locked_Main
 27326 ;; This function uses a non-reentrant model
 27327 ;;
 27328                           
 27329                           
 27330                           ;psect for function _locked_get_lock_leds
 27331  3507                     _locked_get_lock_leds:	
 27332                           
 27333                           ;locked_task.c: 78: u16 size = sizeof(locked_locking_leds) / sizeof(locked_locking_leds[
      +                          0]);
 27334                           
 27335                           ;incstack = 0
 27336                           ; Regs used in _locked_get_lock_leds: [wreg+fsr1l+fsr1h+status,2+status,0]
 27337  3507  3006               	movlw	6
 27338  3508  00F5               	movwf	locked_get_lock_leds@size
 27339  3509  3000               	movlw	0
 27340  350A  00F6               	movwf	locked_get_lock_leds@size+1
 27341                           
 27342                           ;locked_task.c: 79: u16 leds = locked_locking_leds[locked_locking_leds_idx];
 27343  350B  0021               	movlb	1	; select bank1
 27344  350C  3524               	lslf	_locked_locking_leds_idx^(0+128),w
 27345  350D  3E20               	addlw	(low (_locked_locking_leds| (0+512)))& (0+255)
 27346  350E  0086               	movwf	6
 27347  350F  3002               	movlw	2	; select bank4/5
 27348  3510  0087               	movwf	7
 27349  3511  3F40               	moviw [0]fsr1
 27350  3512  00F7               	movwf	locked_get_lock_leds@leds
 27351  3513  3F41               	moviw [1]fsr1
 27352  3514  00F8               	movwf	locked_get_lock_leds@leds+1
 27353                           
 27354                           ;locked_task.c: 82: if (locked_locking_leds_idx < size - 1){
 27355  3515  0875               	movf	locked_get_lock_leds@size,w
 27356  3516  3EFF               	addlw	255
 27357  3517  00F3               	movwf	??_locked_get_lock_leds
 27358  3518  30FF               	movlw	255
 27359  3519  3D76               	addwfc	locked_get_lock_leds@size+1,w
 27360  351A  00F4               	movwf	??_locked_get_lock_leds+1
 27361  351B  0874               	movf	??_locked_get_lock_leds+1,w
 27362  351C  0225               	subwf	(_locked_locking_leds_idx+1)^(0+128),w
 27363  351D  1D03               	skipz
 27364  351E  2D21               	goto	u5435
 27365  351F  0873               	movf	??_locked_get_lock_leds,w
 27366  3520  0224               	subwf	_locked_locking_leds_idx^(0+128),w
 27367  3521                     u5435:	
 27368  3521  1803               	skipnc
 27369  3522  2D27               	goto	l1253
 27370                           
 27371                           ;locked_task.c: 83: locked_locking_leds_idx += 1;
 27372  3523  3001               	movlw	1
 27373  3524  07A4               	addwf	_locked_locking_leds_idx^(0+128),f
 27374  3525  3000               	movlw	0
 27375  3526  3DA5               	addwfc	(_locked_locking_leds_idx+1)^(0+128),f
 27376  3527                     l1253:	
 27377                           
 27378                           ;locked_task.c: 84: }
 27379                           ;locked_task.c: 85: return leds;
 27380  3527  0878               	movf	locked_get_lock_leds@leds+1,w
 27381  3528  00F2               	movwf	?_locked_get_lock_leds+1
 27382  3529  0877               	movf	locked_get_lock_leds@leds,w
 27383  352A  00F1               	movwf	?_locked_get_lock_leds
 27384  352B  0008               	return
 27385  352C                     __end_of_locked_get_lock_leds:	
 27386                           
 27387                           	psect	text36
 27388  28B9                     __ptext36:	
 27389 ;; *************** function _locked_clear *****************
 27390 ;; Defined at:
 27391 ;;		line 287 in file "locked_task.c"
 27392 ;; Parameters:    Size  Location     Type
 27393 ;;  data            2   25[BANK0 ] PTR struct t_locked_task
 27394 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 27395 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 27396 ;; Auto vars:     Size  Location     Type
 27397 ;;		None
 27398 ;; Return value:  Size  Location     Type
 27399 ;;                  1    wreg      void 
 27400 ;; Registers used:
 27401 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 27402 ;; Tracked objects:
 27403 ;;		On entry : 0/0
 27404 ;;		On exit  : 0/0
 27405 ;;		Unchanged: 0/0
 27406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27407 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27408 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27409 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27410 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27411 ;;Total ram usage:        2 bytes
 27412 ;; Hardware stack levels used:    1
 27413 ;; Hardware stack levels required when called:   10
 27414 ;; This function calls:
 27415 ;;		_nullifyBadge_segDisplayErase
 27416 ;;		_nullifyBadge_userLedsClr
 27417 ;; This function is called by:
 27418 ;;		_locked_Main
 27419 ;; This function uses a non-reentrant model
 27420 ;;
 27421                           
 27422                           
 27423                           ;psect for function _locked_clear
 27424  28B9                     _locked_clear:	
 27425                           
 27426                           ;locked_task.c: 289: data->delayTickCount = 0;
 27427                           
 27428                           ;incstack = 0
 27429                           ; Regs used in _locked_clear: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 27430  28B9  0020               	movlb	0	; select bank0
 27431  28BA  0839               	movf	locked_clear@data,w
 27432  28BB  0086               	movwf	6
 27433  28BC  083A               	movf	locked_clear@data+1,w
 27434  28BD  0087               	movwf	7
 27435  28BE  3141               	addfsr 1,1
 27436  28BF  3000               	movlw	0
 27437  28C0  3FC0               	movwi [0]fsr1
 27438  28C1  3FC1               	movwi [1]fsr1
 27439                           
 27440                           ;locked_task.c: 290: data->holdCountA = 0;
 27441  28C2  0839               	movf	locked_clear@data,w
 27442  28C3  0086               	movwf	6
 27443  28C4  083A               	movf	locked_clear@data+1,w
 27444  28C5  0087               	movwf	7
 27445  28C6  3143               	addfsr 1,3
 27446  28C7  3000               	movlw	0
 27447  28C8  3FC0               	movwi [0]fsr1
 27448  28C9  3FC1               	movwi [1]fsr1
 27449                           
 27450                           ;locked_task.c: 291: data->holdCountB = 0;
 27451  28CA  0839               	movf	locked_clear@data,w
 27452  28CB  0086               	movwf	6
 27453  28CC  083A               	movf	locked_clear@data+1,w
 27454  28CD  0087               	movwf	7
 27455  28CE  3145               	addfsr 1,5
 27456  28CF  3000               	movlw	0
 27457  28D0  3FC0               	movwi [0]fsr1
 27458  28D1  3FC1               	movwi [1]fsr1
 27459                           
 27460                           ;locked_task.c: 292: data->holdCountX = 0;
 27461  28D2  0839               	movf	locked_clear@data,w
 27462  28D3  0086               	movwf	6
 27463  28D4  083A               	movf	locked_clear@data+1,w
 27464  28D5  0087               	movwf	7
 27465  28D6  3147               	addfsr 1,7
 27466  28D7  3000               	movlw	0
 27467  28D8  3FC0               	movwi [0]fsr1
 27468  28D9  3FC1               	movwi [1]fsr1
 27469                           
 27470                           ;locked_task.c: 293: data->holdCountY = 0;
 27471  28DA  0839               	movf	locked_clear@data,w
 27472  28DB  0086               	movwf	6
 27473  28DC  083A               	movf	locked_clear@data+1,w
 27474  28DD  0087               	movwf	7
 27475  28DE  3149               	addfsr 1,9
 27476  28DF  3000               	movlw	0
 27477  28E0  3FC0               	movwi [0]fsr1
 27478  28E1  3FC1               	movwi [1]fsr1
 27479                           
 27480                           ;locked_task.c: 294: data->noholdCount = 0;
 27481  28E2  0839               	movf	locked_clear@data,w
 27482  28E3  0086               	movwf	6
 27483  28E4  083A               	movf	locked_clear@data+1,w
 27484  28E5  0087               	movwf	7
 27485  28E6  314B               	addfsr 1,11
 27486  28E7  3000               	movlw	0
 27487  28E8  3FC0               	movwi [0]fsr1
 27488  28E9  3FC1               	movwi [1]fsr1
 27489                           
 27490                           ;locked_task.c: 297: nullifyBadge_userLedsClr(data->badge);
 27491  28EA  0839               	movf	locked_clear@data,w
 27492  28EB  0086               	movwf	6
 27493  28EC  083A               	movf	locked_clear@data+1,w
 27494  28ED  0087               	movwf	7
 27495  28EE  0801               	movf	1,w
 27496  28EF  3187  27FA  31A8   	fcall	_nullifyBadge_userLedsClr
 27497                           
 27498                           ;locked_task.c: 298: nullifyBadge_segDisplayErase(data->badge);
 27499  28F2  0020               	movlb	0	; select bank0
 27500  28F3  0839               	movf	locked_clear@data,w
 27501  28F4  0086               	movwf	6
 27502  28F5  083A               	movf	locked_clear@data+1,w
 27503  28F6  0087               	movwf	7
 27504  28F7  0801               	movf	1,w
 27505  28F8  3198  2000         	fcall	_nullifyBadge_segDisplayErase
 27506  28FA  0008               	return
 27507  28FB                     __end_of_locked_clear:	
 27508                           
 27509                           	psect	text37
 27510  07FA                     __ptext37:	
 27511 ;; *************** function _nullifyBadge_userLedsClr *****************
 27512 ;; Defined at:
 27513 ;;		line 177 in file "nullifyBadge.c"
 27514 ;; Parameters:    Size  Location     Type
 27515 ;;  badge           1    wreg     PTR struct t_nullifyBadg
 27516 ;;		 -> badge_inst(18), 
 27517 ;; Auto vars:     Size  Location     Type
 27518 ;;  badge           1   11[BANK0 ] PTR struct t_nullifyBadg
 27519 ;;		 -> badge_inst(18), 
 27520 ;; Return value:  Size  Location     Type
 27521 ;;                  1    wreg      void 
 27522 ;; Registers used:
 27523 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 27524 ;; Tracked objects:
 27525 ;;		On entry : 0/0
 27526 ;;		On exit  : 0/0
 27527 ;;		Unchanged: 0/0
 27528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27529 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27530 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27532 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27533 ;;Total ram usage:        1 bytes
 27534 ;; Hardware stack levels used:    1
 27535 ;; Hardware stack levels required when called:    8
 27536 ;; This function calls:
 27537 ;;		_displayL2_ClrUserLeds
 27538 ;; This function is called by:
 27539 ;;		_menu_Init
 27540 ;;		_menu_clear
 27541 ;;		_menu_Exit
 27542 ;;		_flashy_Init
 27543 ;;		_flashy_Exit
 27544 ;;		_locked_Init
 27545 ;;		_locked_clear
 27546 ;;		_locked_Exit
 27547 ;;		_secret_Init
 27548 ;;		_secret_Exit
 27549 ;;		_slot_Init
 27550 ;;		_slot_Exit
 27551 ;;		_matrix_Init
 27552 ;;		_matrix_Exit
 27553 ;; This function uses a non-reentrant model
 27554 ;;
 27555                           
 27556                           
 27557                           ;psect for function _nullifyBadge_userLedsClr
 27558  07FA                     _nullifyBadge_userLedsClr:	
 27559                           
 27560                           ;incstack = 0
 27561                           ; Regs used in _nullifyBadge_userLedsClr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 27562                           ;nullifyBadge_userLedsClr@badge stored from wreg
 27563  07FA  0020               	movlb	0	; select bank0
 27564  07FB  00AB               	movwf	nullifyBadge_userLedsClr@badge
 27565                           
 27566                           ;nullifyBadge.c: 178: displayL2_ClrUserLeds(&badge->display);
 27567  07FC  082B               	movf	nullifyBadge_userLedsClr@badge,w
 27568  07FD  31B2  22AC         	fcall	_displayL2_ClrUserLeds
 27569  07FF  0008               	return
 27570  0800                     __end_of_nullifyBadge_userLedsClr:	
 27571                           
 27572                           	psect	text38
 27573  32AC                     __ptext38:	
 27574 ;; *************** function _displayL2_ClrUserLeds *****************
 27575 ;; Defined at:
 27576 ;;		line 94 in file "nullifyBadge_displayL2.c"
 27577 ;; Parameters:    Size  Location     Type
 27578 ;;  display         1    wreg     PTR struct t_nullifyDisp
 27579 ;;		 -> badge_inst(18), 
 27580 ;; Auto vars:     Size  Location     Type
 27581 ;;  display         1   11[COMMON] PTR struct t_nullifyDisp
 27582 ;;		 -> badge_inst(18), 
 27583 ;; Return value:  Size  Location     Type
 27584 ;;                  1    wreg      void 
 27585 ;; Registers used:
 27586 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 27587 ;; Tracked objects:
 27588 ;;		On entry : 0/0
 27589 ;;		On exit  : 0/0
 27590 ;;		Unchanged: 0/0
 27591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27592 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27593 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27594 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27595 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27596 ;;Total ram usage:        1 bytes
 27597 ;; Hardware stack levels used:    1
 27598 ;; Hardware stack levels required when called:    7
 27599 ;; This function calls:
 27600 ;;		_displayL1_SetUserLed
 27601 ;;		_displayL1_Update
 27602 ;; This function is called by:
 27603 ;;		_nullifyBadge_userLedsClr
 27604 ;; This function uses a non-reentrant model
 27605 ;;
 27606                           
 27607                           
 27608                           ;psect for function _displayL2_ClrUserLeds
 27609  32AC                     _displayL2_ClrUserLeds:	
 27610                           
 27611                           ;incstack = 0
 27612                           ; Regs used in _displayL2_ClrUserLeds: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 27613                           ;displayL2_ClrUserLeds@display stored from wreg
 27614  32AC  00FB               	movwf	displayL2_ClrUserLeds@display
 27615                           
 27616                           ;nullifyBadge_displayL2.c: 95: displayL1_SetUserLed(&display->display_l1, 0);
 27617  32AD  3000               	movlw	0
 27618  32AE  00F1               	movwf	displayL1_SetUserLed@userLedVect
 27619  32AF  00F2               	movwf	displayL1_SetUserLed@userLedVect+1
 27620  32B0  087B               	movf	displayL2_ClrUserLeds@display,w
 27621  32B1  3E07               	addlw	7
 27622  32B2  31B3  231B  31B2   	fcall	_displayL1_SetUserLed
 27623                           
 27624                           ;nullifyBadge_displayL2.c: 96: displayL1_Update(&display->display_l1);
 27625  32B5  087B               	movf	displayL2_ClrUserLeds@display,w
 27626  32B6  3E07               	addlw	7
 27627  32B7  31B2  22E8         	fcall	_displayL1_Update
 27628  32B9  0008               	return
 27629  32BA                     __end_of_displayL2_ClrUserLeds:	
 27630                           
 27631                           	psect	text39
 27632  1800                     __ptext39:	
 27633 ;; *************** function _nullifyBadge_segDisplayErase *****************
 27634 ;; Defined at:
 27635 ;;		line 123 in file "nullifyBadge.c"
 27636 ;; Parameters:    Size  Location     Type
 27637 ;;  badge           1    wreg     PTR struct t_nullifyBadg
 27638 ;;		 -> badge_inst(18), 
 27639 ;; Auto vars:     Size  Location     Type
 27640 ;;  badge           1   24[BANK0 ] PTR struct t_nullifyBadg
 27641 ;;		 -> badge_inst(18), 
 27642 ;; Return value:  Size  Location     Type
 27643 ;;                  1    wreg      void 
 27644 ;; Registers used:
 27645 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 27646 ;; Tracked objects:
 27647 ;;		On entry : 0/0
 27648 ;;		On exit  : 0/0
 27649 ;;		Unchanged: 0/0
 27650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27652 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27653 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27654 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27655 ;;Total ram usage:        1 bytes
 27656 ;; Hardware stack levels used:    1
 27657 ;; Hardware stack levels required when called:    9
 27658 ;; This function calls:
 27659 ;;		_displayL2_EraseSegDisplay
 27660 ;; This function is called by:
 27661 ;;		_menu_Init
 27662 ;;		_menu_clear
 27663 ;;		_menu_Exit
 27664 ;;		_flashy_Init
 27665 ;;		_flashy_Exit
 27666 ;;		_locked_Init
 27667 ;;		_locked_clear
 27668 ;;		_locked_Exit
 27669 ;;		_secret_Init
 27670 ;;		_secret_Exit
 27671 ;;		_slot_Init
 27672 ;;		_slot_Exit
 27673 ;;		_matrix_Init
 27674 ;;		_matrix_Exit
 27675 ;;		_fadeDisplay_Init
 27676 ;;		_fadeDisplay_Exit
 27677 ;; This function uses a non-reentrant model
 27678 ;;
 27679                           
 27680                           
 27681                           ;psect for function _nullifyBadge_segDisplayErase
 27682  1800                     _nullifyBadge_segDisplayErase:	
 27683                           
 27684                           ;incstack = 0
 27685                           ; Regs used in _nullifyBadge_segDisplayErase: [wreg-fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 27686                           ;nullifyBadge_segDisplayErase@badge stored from wreg
 27687  1800  0020               	movlb	0	; select bank0
 27688  1801  00B8               	movwf	nullifyBadge_segDisplayErase@badge
 27689                           
 27690                           ;nullifyBadge.c: 124: displayL2_EraseSegDisplay(&badge->display);
 27691  1802  0838               	movf	nullifyBadge_segDisplayErase@badge,w
 27692  1803  31B2  22D8         	fcall	_displayL2_EraseSegDisplay
 27693  1805  0008               	return
 27694  1806                     __end_of_nullifyBadge_segDisplayErase:	
 27695                           
 27696                           	psect	text40
 27697  32D8                     __ptext40:	
 27698 ;; *************** function _displayL2_EraseSegDisplay *****************
 27699 ;; Defined at:
 27700 ;;		line 83 in file "nullifyBadge_displayL2.c"
 27701 ;; Parameters:    Size  Location     Type
 27702 ;;  display         1    wreg     PTR struct t_nullifyDisp
 27703 ;;		 -> badge_inst(18), 
 27704 ;; Auto vars:     Size  Location     Type
 27705 ;;  display         1   23[BANK0 ] PTR struct t_nullifyDisp
 27706 ;;		 -> badge_inst(18), 
 27707 ;; Return value:  Size  Location     Type
 27708 ;;                  1    wreg      void 
 27709 ;; Registers used:
 27710 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 27711 ;; Tracked objects:
 27712 ;;		On entry : 0/0
 27713 ;;		On exit  : 0/0
 27714 ;;		Unchanged: 0/0
 27715 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27716 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27717 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27718 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27719 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27720 ;;Total ram usage:        1 bytes
 27721 ;; Hardware stack levels used:    1
 27722 ;; Hardware stack levels required when called:    8
 27723 ;; This function calls:
 27724 ;;		_displayL1_Update
 27725 ;;		_displayL2_PutStr
 27726 ;; This function is called by:
 27727 ;;		_nullifyBadge_segDisplayErase
 27728 ;; This function uses a non-reentrant model
 27729 ;;
 27730                           
 27731                           
 27732                           ;psect for function _displayL2_EraseSegDisplay
 27733  32D8                     _displayL2_EraseSegDisplay:	
 27734                           
 27735                           ;incstack = 0
 27736                           ; Regs used in _displayL2_EraseSegDisplay: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 27737                           ;displayL2_EraseSegDisplay@display stored from wreg
 27738  32D8  0020               	movlb	0	; select bank0
 27739  32D9  00B7               	movwf	displayL2_EraseSegDisplay@display
 27740                           
 27741                           ;nullifyBadge_displayL2.c: 84: displayL2_PutStr(display, "    ");
 27742  32DA  307D               	movlw	low ((STR_33+115)| (0+32768))
 27743  32DB  00B0               	movwf	displayL2_PutStr@str
 27744  32DC  30A8               	movlw	high ((STR_33+115)| (0+32768))
 27745  32DD  00B1               	movwf	displayL2_PutStr@str+1
 27746  32DE  0837               	movf	displayL2_EraseSegDisplay@display,w
 27747  32DF  31B5  2579  31B2   	fcall	_displayL2_PutStr
 27748                           
 27749                           ;nullifyBadge_displayL2.c: 85: displayL1_Update(&display->display_l1);
 27750  32E2  0020               	movlb	0	; select bank0
 27751  32E3  0837               	movf	displayL2_EraseSegDisplay@display,w
 27752  32E4  3E07               	addlw	7
 27753  32E5  31B2  22E8         	fcall	_displayL1_Update
 27754  32E7  0008               	return
 27755  32E8                     __end_of_displayL2_EraseSegDisplay:	
 27756                           
 27757                           	psect	text41
 27758  196B                     __ptext41:	
 27759 ;; *************** function _sprintf *****************
 27760 ;; Defined at:
 27761 ;;		line 492 in file "/Applications/microchip/xc8/v1.42/sources/common/doprnt.c"
 27762 ;; Parameters:    Size  Location     Type
 27763 ;;  sp              2   15[BANK0 ] PTR unsigned char 
 27764 ;;		 -> flashy_Main@hit_counter(6), matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), 
 27765 ;;		 -> slot_TaskData(40), menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 27766 ;;  f               2   17[BANK0 ] PTR const unsigned char 
 27767 ;;		 -> STR_71(3), STR_70(9), STR_69(9), STR_68(9), 
 27768 ;;		 -> STR_67(9), STR_66(9), STR_40(4), 
 27769 ;; Auto vars:     Size  Location     Type
 27770 ;;  tmpval          4    0        struct .
 27771 ;;  width           2   40[BANK0 ] int 
 27772 ;;  len             2   38[BANK0 ] unsigned int 
 27773 ;;  val             2   36[BANK0 ] unsigned int 
 27774 ;;  cp              2   33[BANK0 ] PTR const unsigned char 
 27775 ;;		 -> STR_85(7), sprintf@c(1), STR_65(9), STR_64(13), 
 27776 ;;		 -> STR_63(12), STR_62(8), STR_61(11), STR_60(11), 
 27777 ;;		 -> STR_59(9), STR_58(8), STR_57(8), 
 27778 ;;  c               1   42[BANK0 ] char 
 27779 ;;  ap              1   35[BANK0 ] PTR void [1]
 27780 ;;		 -> ?_sprintf(2), 
 27781 ;;  flag            1   32[BANK0 ] unsigned char 
 27782 ;;  prec            1   31[BANK0 ] char 
 27783 ;; Return value:  Size  Location     Type
 27784 ;;                  2   15[BANK0 ] int 
 27785 ;; Registers used:
 27786 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 27787 ;; Tracked objects:
 27788 ;;		On entry : 0/0
 27789 ;;		On exit  : 0/0
 27790 ;;		Unchanged: 0/0
 27791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27792 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27793 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27794 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27795 ;;      Totals:         0      28       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27796 ;;Total ram usage:       28 bytes
 27797 ;; Hardware stack levels used:    1
 27798 ;; Hardware stack levels required when called:    5
 27799 ;; This function calls:
 27800 ;;		___lwdiv
 27801 ;;		___lwmod
 27802 ;;		___wmul
 27803 ;;		_isdigit
 27804 ;; This function is called by:
 27805 ;;		_flashy_Main
 27806 ;;		_slot_Main
 27807 ;; This function uses a non-reentrant model
 27808 ;;
 27809                           
 27810                           
 27811                           ;psect for function _sprintf
 27812  196B                     _sprintf:	
 27813                           
 27814                           ;doprnt.c: 494: va_list ap;
 27815                           ;doprnt.c: 499: signed char c;
 27816                           ;doprnt.c: 501: int width;
 27817                           ;doprnt.c: 506: signed char prec;
 27818                           ;doprnt.c: 508: unsigned char flag;
 27819                           ;doprnt.c: 523: union {
 27820                           ;doprnt.c: 524: unsigned long vd;
 27821                           ;doprnt.c: 525: double integ;
 27822                           ;doprnt.c: 526: } tmpval;
 27823                           ;doprnt.c: 528: unsigned int val;
 27824                           ;doprnt.c: 529: unsigned len;
 27825                           ;doprnt.c: 530: const char * cp;
 27826                           ;doprnt.c: 533: *ap = __va_start();
 27827                           
 27828                           ;incstack = 0
 27829                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 27830  196B  3033               	movlw	(low ((?_sprintf| 0+4)))& (0+255)
 27831  196C  0020               	movlb	0	; select bank0
 27832  196D  00BB               	movwf	??_sprintf
 27833  196E  083B               	movf	??_sprintf,w
 27834  196F  00C3               	movwf	sprintf@ap
 27835  1970                     l8807:	
 27836                           ;doprnt.c: 536: while(c = *f++) {
 27837                           
 27838  1970  0832               	movf	sprintf@f+1,w
 27839  1971  00BC               	movwf	??_sprintf+1
 27840  1972  0831               	movf	sprintf@f,w
 27841  1973  00BB               	movwf	??_sprintf
 27842  1974  0AB1               	incf	sprintf@f,f
 27843  1975  1903               	skipnz
 27844  1976  0AB2               	incf	sprintf@f+1,f
 27845  1977  083B               	movf	??_sprintf,w
 27846  1978  0084               	movwf	4
 27847  1979  083C               	movf	??_sprintf+1,w
 27848  197A  0085               	movwf	5
 27849  197B  0800               	movf	0,w	;code access
 27850  197C  00BD               	movwf	??_sprintf+2
 27851  197D  083D               	movf	??_sprintf+2,w
 27852  197E  00CA               	movwf	sprintf@c
 27853  197F  084A               	movf	sprintf@c,w
 27854  1980  1903               	btfsc	3,2
 27855  1981  2B31               	goto	l8809
 27856                           
 27857                           ;doprnt.c: 538: if(c != '%')
 27858  1982  3025               	movlw	37
 27859  1983  064A               	xorwf	sprintf@c,w
 27860  1984  1903               	btfsc	3,2
 27861  1985  2991               	goto	l8691
 27862                           
 27863                           ;doprnt.c: 540: {
 27864                           ;doprnt.c: 541: ((*sp++ = (c)));
 27865  1986  082F               	movf	sprintf@sp,w
 27866  1987  0086               	movwf	6
 27867  1988  0830               	movf	sprintf@sp+1,w
 27868  1989  0087               	movwf	7
 27869  198A  084A               	movf	sprintf@c,w
 27870  198B  0081               	movwf	1
 27871  198C  3001               	movlw	1
 27872  198D  07AF               	addwf	sprintf@sp,f
 27873  198E  3000               	movlw	0
 27874  198F  3DB0               	addwfc	sprintf@sp+1,f
 27875                           
 27876                           ;doprnt.c: 542: continue;
 27877  1990  2970               	goto	l8807
 27878  1991                     l8691:	
 27879                           
 27880                           ;doprnt.c: 543: }
 27881                           ;doprnt.c: 546: width = 0;
 27882  1991  01C8               	clrf	sprintf@width
 27883  1992  01C9               	clrf	sprintf@width+1
 27884                           
 27885                           ;doprnt.c: 548: flag = 0;
 27886  1993  01C0               	clrf	sprintf@flag
 27887                           
 27888                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 27889  1994  0831               	movf	sprintf@f,w
 27890  1995  0084               	movwf	4
 27891  1996  0832               	movf	sprintf@f+1,w
 27892  1997  0085               	movwf	5
 27893  1998  0800               	movf	0,w	;code access
 27894  1999  31B2  229E  3199   	fcall	_isdigit
 27895  199C  1C03               	btfss	3,0
 27896  199D  2A4A               	goto	l8749
 27897                           
 27898                           ;doprnt.c: 598: width = 0;
 27899  199E  0020               	movlb	0	; select bank0
 27900  199F  01C8               	clrf	sprintf@width
 27901  19A0  01C9               	clrf	sprintf@width+1
 27902  19A1                     l8697:	
 27903                           ;doprnt.c: 599: do {
 27904                           
 27905                           
 27906                           ;doprnt.c: 600: width *= 10;
 27907  19A1  300A               	movlw	10
 27908  19A2  00F1               	movwf	___wmul@multiplier
 27909  19A3  3000               	movlw	0
 27910  19A4  00F2               	movwf	___wmul@multiplier+1
 27911  19A5  0020               	movlb	0	; select bank0
 27912  19A6  0849               	movf	sprintf@width+1,w
 27913  19A7  00F4               	movwf	___wmul@multiplicand+1
 27914  19A8  0848               	movf	sprintf@width,w
 27915  19A9  00F3               	movwf	___wmul@multiplicand
 27916  19AA  31B3  23DA  3199   	fcall	___wmul
 27917  19AD  0872               	movf	?___wmul+1,w
 27918  19AE  0020               	movlb	0	; select bank0
 27919  19AF  00C9               	movwf	sprintf@width+1
 27920  19B0  0871               	movf	?___wmul,w
 27921  19B1  00C8               	movwf	sprintf@width
 27922                           
 27923                           ;doprnt.c: 601: width += *f++ - '0';
 27924  19B2  0831               	movf	sprintf@f,w
 27925  19B3  0084               	movwf	4
 27926  19B4  0832               	movf	sprintf@f+1,w
 27927  19B5  0085               	movwf	5
 27928  19B6  0800               	movf	0,w	;code access
 27929  19B7  3ED0               	addlw	208
 27930  19B8  00BB               	movwf	??_sprintf
 27931  19B9  30FF               	movlw	255
 27932  19BA  1803               	skipnc
 27933  19BB  3000               	movlw	0
 27934  19BC  00BC               	movwf	??_sprintf+1
 27935  19BD  083B               	movf	??_sprintf,w
 27936  19BE  07C8               	addwf	sprintf@width,f
 27937  19BF  083C               	movf	??_sprintf+1,w
 27938  19C0  3DC9               	addwfc	sprintf@width+1,f
 27939  19C1  3001               	movlw	1
 27940  19C2  07B1               	addwf	sprintf@f,f
 27941  19C3  3000               	movlw	0
 27942  19C4  3DB2               	addwfc	sprintf@f+1,f
 27943                           
 27944                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 27945  19C5  0831               	movf	sprintf@f,w
 27946  19C6  0084               	movwf	4
 27947  19C7  0832               	movf	sprintf@f+1,w
 27948  19C8  0085               	movwf	5
 27949  19C9  0800               	movf	0,w	;code access
 27950  19CA  31B2  229E  3199   	fcall	_isdigit
 27951  19CD  1C03               	btfss	3,0
 27952  19CE  2A4A               	goto	l8749
 27953  19CF  29A1               	goto	l8697
 27954  19D0                     l8705:	
 27955                           ;doprnt.c: 728: case 's':
 27956                           
 27957                           ;doprnt.c: 698: case 'i':
 27958                           ;doprnt.c: 699: break;
 27959                           
 27960                           ;doprnt.c: 697: case 'd':
 27961                           
 27962                           ;doprnt.c: 638: goto alldone;
 27963                           
 27964                           ;doprnt.c: 637: case 0:
 27965                           
 27966                           ;doprnt.c: 608: }
 27967                           ;doprnt.c: 635: switch(c = *f++) {
 27968                           
 27969                           
 27970                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 27971  19D0  0020               	movlb	0	; select bank0
 27972  19D1  0843               	movf	sprintf@ap,w
 27973  19D2  0086               	movwf	6
 27974  19D3  0187               	clrf	7
 27975  19D4  3F40               	moviw [0]fsr1
 27976  19D5  00C1               	movwf	sprintf@cp
 27977  19D6  3F41               	moviw [1]fsr1
 27978  19D7  00C2               	movwf	sprintf@cp+1
 27979  19D8  3002               	movlw	2
 27980  19D9  00BB               	movwf	??_sprintf
 27981  19DA  083B               	movf	??_sprintf,w
 27982  19DB  07C3               	addwf	sprintf@ap,f
 27983                           
 27984                           ;doprnt.c: 740: if(!cp)
 27985  19DC  0841               	movf	sprintf@cp,w
 27986  19DD  0442               	iorwf	sprintf@cp+1,w
 27987  19DE  1D03               	btfss	3,2
 27988  19DF  29E4               	goto	l8713
 27989                           
 27990                           ;doprnt.c: 741: cp = "(null)";
 27991  19E0  3066               	movlw	low (STR_85| (0+32768))
 27992  19E1  00C1               	movwf	sprintf@cp
 27993  19E2  30BB               	movlw	high (STR_85| (0+32768))
 27994  19E3  00C2               	movwf	sprintf@cp+1
 27995  19E4                     l8713:	
 27996                           
 27997                           ;doprnt.c: 745: len = 0;
 27998  19E4  01C6               	clrf	sprintf@len
 27999  19E5  01C7               	clrf	sprintf@len+1
 28000  19E6                     l8717:	
 28001                           ;doprnt.c: 746: while(cp[len])
 28002                           
 28003  19E6  0841               	movf	sprintf@cp,w
 28004  19E7  0746               	addwf	sprintf@len,w
 28005  19E8  0084               	movwf	4
 28006  19E9  0842               	movf	sprintf@cp+1,w
 28007  19EA  3D47               	addwfc	sprintf@len+1,w
 28008  19EB  0085               	movwf	5
 28009  19EC  0012               	moviw fsr0++
 28010  19ED  1903               	btfsc	3,2
 28011  19EE  29F4               	goto	l8719
 28012                           
 28013                           ;doprnt.c: 747: len++;
 28014  19EF  3001               	movlw	1
 28015  19F0  07C6               	addwf	sprintf@len,f
 28016  19F1  3000               	movlw	0
 28017  19F2  3DC7               	addwfc	sprintf@len+1,f
 28018  19F3  29E6               	goto	l8717
 28019  19F4                     l8719:	
 28020                           ;doprnt.c: 750: dostring:
 28021                           
 28022                           
 28023                           ;doprnt.c: 757: if(width > len)
 28024  19F4  0849               	movf	sprintf@width+1,w
 28025  19F5  0247               	subwf	sprintf@len+1,w
 28026  19F6  1D03               	skipz
 28027  19F7  29FA               	goto	u5285
 28028  19F8  0848               	movf	sprintf@width,w
 28029  19F9  0246               	subwf	sprintf@len,w
 28030  19FA                     u5285:	
 28031  19FA  1803               	skipnc
 28032  19FB  2A01               	goto	l8723
 28033                           
 28034                           ;doprnt.c: 758: width -= len;
 28035  19FC  0846               	movf	sprintf@len,w
 28036  19FD  02C8               	subwf	sprintf@width,f
 28037  19FE  0847               	movf	sprintf@len+1,w
 28038  19FF  3BC9               	subwfb	sprintf@width+1,f
 28039  1A00  2A03               	goto	l8729
 28040  1A01                     l8723:	
 28041                           
 28042                           ;doprnt.c: 759: else
 28043                           ;doprnt.c: 760: width = 0;
 28044  1A01  01C8               	clrf	sprintf@width
 28045  1A02  01C9               	clrf	sprintf@width+1
 28046  1A03                     l8729:	
 28047                           ;doprnt.c: 764: while(width--)
 28048                           
 28049  1A03  30FF               	movlw	255
 28050  1A04  07C8               	addwf	sprintf@width,f
 28051  1A05  30FF               	movlw	255
 28052  1A06  3DC9               	addwfc	sprintf@width+1,f
 28053  1A07  0A48               	incf	sprintf@width,w
 28054  1A08  1903               	btfsc	3,2
 28055  1A09  0A49               	incf	sprintf@width+1,w
 28056  1A0A  1903               	btfsc	3,2
 28057  1A0B  2A2B               	goto	l8737
 28058                           
 28059                           ;doprnt.c: 765: ((*sp++ = (' ')));
 28060  1A0C  082F               	movf	sprintf@sp,w
 28061  1A0D  0086               	movwf	6
 28062  1A0E  0830               	movf	sprintf@sp+1,w
 28063  1A0F  0087               	movwf	7
 28064  1A10  3020               	movlw	32
 28065  1A11  0081               	movwf	1
 28066  1A12  3001               	movlw	1
 28067  1A13  07AF               	addwf	sprintf@sp,f
 28068  1A14  3000               	movlw	0
 28069  1A15  3DB0               	addwfc	sprintf@sp+1,f
 28070  1A16  2A03               	goto	l8729
 28071  1A17                     l8731:	
 28072                           ;doprnt.c: 767: while(len--)
 28073                           
 28074                           
 28075                           ;doprnt.c: 768: ((*sp++ = (*cp++)));
 28076  1A17  0841               	movf	sprintf@cp,w
 28077  1A18  0084               	movwf	4
 28078  1A19  0842               	movf	sprintf@cp+1,w
 28079  1A1A  0085               	movwf	5
 28080  1A1B  0800               	movf	0,w	;code access
 28081  1A1C  00BB               	movwf	??_sprintf
 28082  1A1D  082F               	movf	sprintf@sp,w
 28083  1A1E  0086               	movwf	6
 28084  1A1F  0830               	movf	sprintf@sp+1,w
 28085  1A20  0087               	movwf	7
 28086  1A21  083B               	movf	??_sprintf,w
 28087  1A22  0081               	movwf	1
 28088  1A23  3001               	movlw	1
 28089  1A24  07C1               	addwf	sprintf@cp,f
 28090  1A25  3000               	movlw	0
 28091  1A26  3DC2               	addwfc	sprintf@cp+1,f
 28092  1A27  3001               	movlw	1
 28093  1A28  07AF               	addwf	sprintf@sp,f
 28094  1A29  3000               	movlw	0
 28095  1A2A  3DB0               	addwfc	sprintf@sp+1,f
 28096  1A2B                     l8737:	
 28097  1A2B  3001               	movlw	1
 28098  1A2C  02C6               	subwf	sprintf@len,f
 28099  1A2D  3000               	movlw	0
 28100  1A2E  3BC7               	subwfb	sprintf@len+1,f
 28101  1A2F  0A46               	incf	sprintf@len,w
 28102  1A30  1D03               	skipz
 28103  1A31  2A17               	goto	l8731
 28104  1A32  0A47               	incf	sprintf@len+1,w
 28105  1A33  1903               	btfsc	3,2
 28106  1A34  2970               	goto	l8807
 28107  1A35  2A17               	goto	l8731
 28108  1A36                     l8739:	
 28109                           ;doprnt.c: 784: case 'c':
 28110                           
 28111                           ;doprnt.c: 774: continue;
 28112                           
 28113                           
 28114                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 28115  1A36  0843               	movf	sprintf@ap,w
 28116  1A37  0086               	movwf	6
 28117  1A38  0187               	clrf	7
 28118  1A39  0801               	movf	1,w
 28119  1A3A  00BB               	movwf	??_sprintf
 28120  1A3B  083B               	movf	??_sprintf,w
 28121  1A3C  00CA               	movwf	sprintf@c
 28122  1A3D  3002               	movlw	2
 28123  1A3E  00BB               	movwf	??_sprintf
 28124  1A3F  083B               	movf	??_sprintf,w
 28125  1A40  07C3               	addwf	sprintf@ap,f
 28126  1A41                     l8743:	
 28127                           ;doprnt.c: 802: default:
 28128                           
 28129                           
 28130                           ;doprnt.c: 805: cp = (char *)&c;
 28131  1A41  304A               	movlw	low sprintf@c
 28132  1A42  00C1               	movwf	sprintf@cp
 28133  1A43  3000               	movlw	high sprintf@c
 28134  1A44  00C2               	movwf	sprintf@cp+1
 28135                           
 28136                           ;doprnt.c: 806: len = 1;
 28137  1A45  3001               	movlw	1
 28138  1A46  00C6               	movwf	sprintf@len
 28139  1A47  3000               	movlw	0
 28140  1A48  00C7               	movwf	sprintf@len+1
 28141                           
 28142                           ;doprnt.c: 807: goto dostring;
 28143  1A49  29F4               	goto	l8719
 28144  1A4A                     l8749:	
 28145                           ;doprnt.c: 822: }
 28146                           
 28147  1A4A  0020               	movlb	0	; select bank0
 28148  1A4B  0832               	movf	sprintf@f+1,w
 28149  1A4C  00BC               	movwf	??_sprintf+1
 28150  1A4D  0831               	movf	sprintf@f,w
 28151  1A4E  00BB               	movwf	??_sprintf
 28152  1A4F  0AB1               	incf	sprintf@f,f
 28153  1A50  1903               	skipnz
 28154  1A51  0AB2               	incf	sprintf@f+1,f
 28155  1A52  083B               	movf	??_sprintf,w
 28156  1A53  0084               	movwf	4
 28157  1A54  083C               	movf	??_sprintf+1,w
 28158  1A55  0085               	movwf	5
 28159  1A56  0800               	movf	0,w	;code access
 28160  1A57  00CA               	movwf	sprintf@c
 28161                           
 28162                           ; Switch size 1, requested type "space"
 28163                           ; Number of cases is 5, Range of values is 0 to 115
 28164                           ; switch strategies available:
 28165                           ; Name         Instructions Cycles
 28166                           ; simple_byte           16     9 (average)
 28167                           ; direct_byte          238     6 (fixed)
 28168                           ; jumptable            260     6 (fixed)
 28169                           ;	Chosen strategy is simple_byte
 28170  1A58  3A00               	xorlw	0	; case 0
 28171  1A59  1903               	skipnz
 28172  1A5A  2B31               	goto	l8809
 28173  1A5B  3A63               	xorlw	99	; case 99
 28174  1A5C  1903               	skipnz
 28175  1A5D  2A36               	goto	l8739
 28176  1A5E  3A07               	xorlw	7	; case 100
 28177  1A5F  1903               	skipnz
 28178  1A60  2A68               	goto	l8751
 28179  1A61  3A0D               	xorlw	13	; case 105
 28180  1A62  1903               	skipnz
 28181  1A63  2A68               	goto	l8751
 28182  1A64  3A1A               	xorlw	26	; case 115
 28183  1A65  1903               	skipnz
 28184  1A66  29D0               	goto	l8705
 28185  1A67  2A41               	goto	l8743
 28186  1A68                     l8751:	
 28187                           
 28188                           ;doprnt.c: 1253: {
 28189                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 28190  1A68  0020               	movlb	0	; select bank0
 28191  1A69  0843               	movf	sprintf@ap,w
 28192  1A6A  0086               	movwf	6
 28193  1A6B  0187               	clrf	7
 28194  1A6C  3F40               	moviw [0]fsr1
 28195  1A6D  00C4               	movwf	sprintf@val
 28196  1A6E  3F41               	moviw [1]fsr1
 28197  1A6F  00C5               	movwf	sprintf@val+1
 28198  1A70  3002               	movlw	2
 28199  1A71  00BB               	movwf	??_sprintf
 28200  1A72  083B               	movf	??_sprintf,w
 28201  1A73  07C3               	addwf	sprintf@ap,f
 28202                           
 28203                           ;doprnt.c: 1261: if((int)val < 0) {
 28204  1A74  1FC5               	btfss	sprintf@val+1,7
 28205  1A75  2A7F               	goto	l8761
 28206                           
 28207                           ;doprnt.c: 1262: flag |= 0x03;
 28208  1A76  3003               	movlw	3
 28209  1A77  00BB               	movwf	??_sprintf
 28210  1A78  083B               	movf	??_sprintf,w
 28211  1A79  04C0               	iorwf	sprintf@flag,f
 28212                           
 28213                           ;doprnt.c: 1263: val = -val;
 28214  1A7A  09C4               	comf	sprintf@val,f
 28215  1A7B  09C5               	comf	sprintf@val+1,f
 28216  1A7C  0AC4               	incf	sprintf@val,f
 28217  1A7D  1903               	skipnz
 28218  1A7E  0AC5               	incf	sprintf@val+1,f
 28219  1A7F                     l8761:	
 28220                           
 28221                           ;doprnt.c: 1264: }
 28222                           ;doprnt.c: 1266: }
 28223                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 28224  1A7F  01CA               	clrf	sprintf@c
 28225  1A80  0ACA               	incf	sprintf@c,f
 28226  1A81  3005               	movlw	5
 28227  1A82  064A               	xorwf	sprintf@c,w
 28228  1A83  1903               	btfsc	3,2
 28229  1A84  2AA4               	goto	l8773
 28230  1A85                     l8767:	
 28231                           
 28232                           ;doprnt.c: 1306: if(val < dpowers[c])
 28233  1A85  084A               	movf	sprintf@c,w
 28234  1A86  00BB               	movwf	??_sprintf
 28235  1A87  01BC               	clrf	??_sprintf+1
 28236  1A88  35BB               	lslf	??_sprintf,f
 28237  1A89  0DBC               	rlf	??_sprintf+1,f
 28238  1A8A  3000               	movlw	low (_dpowers| (0+32768))
 28239  1A8B  073B               	addwf	??_sprintf,w
 28240  1A8C  0084               	movwf	4
 28241  1A8D  30A8               	movlw	high (_dpowers| (0+32768))
 28242  1A8E  3D3C               	addwfc	??_sprintf+1,w
 28243  1A8F  0085               	movwf	5
 28244  1A90  3F00               	moviw [0]fsr0
 28245  1A91  00BD               	movwf	??_sprintf+2
 28246  1A92  3F01               	moviw [1]fsr0
 28247  1A93  00BE               	movwf	??_sprintf+3
 28248  1A94  083E               	movf	??_sprintf+3,w
 28249  1A95  0245               	subwf	sprintf@val+1,w
 28250  1A96  1D03               	skipz
 28251  1A97  2A9A               	goto	u5335
 28252  1A98  083D               	movf	??_sprintf+2,w
 28253  1A99  0244               	subwf	sprintf@val,w
 28254  1A9A                     u5335:	
 28255  1A9A  1C03               	btfss	3,0
 28256  1A9B  2AA4               	goto	l8773
 28257                           
 28258                           ;doprnt.c: 1307: break;
 28259  1A9C  3001               	movlw	1
 28260  1A9D  00BB               	movwf	??_sprintf
 28261  1A9E  083B               	movf	??_sprintf,w
 28262  1A9F  07CA               	addwf	sprintf@c,f
 28263  1AA0  3005               	movlw	5
 28264  1AA1  064A               	xorwf	sprintf@c,w
 28265  1AA2  1D03               	btfss	3,2
 28266  1AA3  2A85               	goto	l8767
 28267  1AA4                     l8773:	
 28268                           
 28269                           ;doprnt.c: 1345: if(width && flag & 0x03)
 28270  1AA4  0848               	movf	sprintf@width,w
 28271  1AA5  0449               	iorwf	sprintf@width+1,w
 28272  1AA6  1903               	btfsc	3,2
 28273  1AA7  2AB0               	goto	l1619
 28274  1AA8  0840               	movf	sprintf@flag,w
 28275  1AA9  3903               	andlw	3
 28276  1AAA  1903               	btfsc	3,2
 28277  1AAB  2AB0               	goto	l1619
 28278                           
 28279                           ;doprnt.c: 1346: width--;
 28280  1AAC  30FF               	movlw	255
 28281  1AAD  07C8               	addwf	sprintf@width,f
 28282  1AAE  30FF               	movlw	255
 28283  1AAF  3DC9               	addwfc	sprintf@width+1,f
 28284  1AB0                     l1619:	
 28285                           
 28286                           ;doprnt.c: 1381: if(width > c)
 28287  1AB0  084A               	movf	sprintf@c,w
 28288  1AB1  00BB               	movwf	??_sprintf
 28289  1AB2  01BC               	clrf	??_sprintf+1
 28290  1AB3  1BBB               	btfsc	??_sprintf,7
 28291  1AB4  03BC               	decf	??_sprintf+1,f
 28292  1AB5  083C               	movf	??_sprintf+1,w
 28293  1AB6  3A80               	xorlw	128
 28294  1AB7  00BD               	movwf	??_sprintf+2
 28295  1AB8  0849               	movf	sprintf@width+1,w
 28296  1AB9  3A80               	xorlw	128
 28297  1ABA  023D               	subwf	??_sprintf+2,w
 28298  1ABB  1D03               	skipz
 28299  1ABC  2ABF               	goto	u5375
 28300  1ABD  0848               	movf	sprintf@width,w
 28301  1ABE  023B               	subwf	??_sprintf,w
 28302  1ABF                     u5375:	
 28303  1ABF  1803               	skipnc
 28304  1AC0  2ACC               	goto	l8781
 28305                           
 28306                           ;doprnt.c: 1382: width -= c;
 28307  1AC1  0020               	movlb	0	; select bank0
 28308  1AC2  084A               	movf	sprintf@c,w
 28309  1AC3  00BB               	movwf	??_sprintf
 28310  1AC4  01BC               	clrf	??_sprintf+1
 28311  1AC5  1BBB               	btfsc	??_sprintf,7
 28312  1AC6  03BC               	decf	??_sprintf+1,f
 28313  1AC7  083B               	movf	??_sprintf,w
 28314  1AC8  02C8               	subwf	sprintf@width,f
 28315  1AC9  083C               	movf	??_sprintf+1,w
 28316  1ACA  3BC9               	subwfb	sprintf@width+1,f
 28317  1ACB  2ACF               	goto	l8783
 28318  1ACC                     l8781:	
 28319                           
 28320                           ;doprnt.c: 1383: else
 28321                           ;doprnt.c: 1384: width = 0;
 28322  1ACC  0020               	movlb	0	; select bank0
 28323  1ACD  01C8               	clrf	sprintf@width
 28324  1ACE  01C9               	clrf	sprintf@width+1
 28325  1ACF                     l8783:	
 28326                           
 28327                           ;doprnt.c: 1422: {
 28328                           ;doprnt.c: 1424: if(width
 28329                           ;doprnt.c: 1428: )
 28330  1ACF  0848               	movf	sprintf@width,w
 28331  1AD0  0449               	iorwf	sprintf@width+1,w
 28332  1AD1  1903               	btfsc	3,2
 28333  1AD2  2AE5               	goto	l8791
 28334  1AD3                     l8785:	
 28335                           ;doprnt.c: 1429: do
 28336                           
 28337                           
 28338                           ;doprnt.c: 1430: ((*sp++ = (' ')));
 28339  1AD3  082F               	movf	sprintf@sp,w
 28340  1AD4  0086               	movwf	6
 28341  1AD5  0830               	movf	sprintf@sp+1,w
 28342  1AD6  0087               	movwf	7
 28343  1AD7  3020               	movlw	32
 28344  1AD8  0081               	movwf	1
 28345  1AD9  3001               	movlw	1
 28346  1ADA  07AF               	addwf	sprintf@sp,f
 28347  1ADB  3000               	movlw	0
 28348  1ADC  3DB0               	addwfc	sprintf@sp+1,f
 28349                           
 28350                           ;doprnt.c: 1431: while(--width);
 28351  1ADD  30FF               	movlw	255
 28352  1ADE  07C8               	addwf	sprintf@width,f
 28353  1ADF  30FF               	movlw	255
 28354  1AE0  3DC9               	addwfc	sprintf@width+1,f
 28355  1AE1  0848               	movf	sprintf@width,w
 28356  1AE2  0449               	iorwf	sprintf@width+1,w
 28357  1AE3  1D03               	btfss	3,2
 28358  1AE4  2AD3               	goto	l8785
 28359  1AE5                     l8791:	
 28360                           
 28361                           ;doprnt.c: 1438: if(flag & 0x03)
 28362  1AE5  0840               	movf	sprintf@flag,w
 28363  1AE6  3903               	andlw	3
 28364  1AE7  1903               	btfsc	3,2
 28365  1AE8  2AF3               	goto	l8797
 28366                           
 28367                           ;doprnt.c: 1439: ((*sp++ = ('-')));
 28368  1AE9  082F               	movf	sprintf@sp,w
 28369  1AEA  0086               	movwf	6
 28370  1AEB  0830               	movf	sprintf@sp+1,w
 28371  1AEC  0087               	movwf	7
 28372  1AED  302D               	movlw	45
 28373  1AEE  0081               	movwf	1
 28374  1AEF  3001               	movlw	1
 28375  1AF0  07AF               	addwf	sprintf@sp,f
 28376  1AF1  3000               	movlw	0
 28377  1AF2  3DB0               	addwfc	sprintf@sp+1,f
 28378  1AF3                     l8797:	
 28379                           
 28380                           ;doprnt.c: 1469: }
 28381                           ;doprnt.c: 1472: prec = c;
 28382  1AF3  084A               	movf	sprintf@c,w
 28383  1AF4  00BB               	movwf	??_sprintf
 28384  1AF5  083B               	movf	??_sprintf,w
 28385  1AF6  00BF               	movwf	sprintf@prec
 28386  1AF7                     l8805:	
 28387                           ;doprnt.c: 1474: while(prec--) {
 28388                           
 28389  1AF7  30FF               	movlw	255
 28390  1AF8  00BB               	movwf	??_sprintf
 28391  1AF9  083B               	movf	??_sprintf,w
 28392  1AFA  07BF               	addwf	sprintf@prec,f
 28393  1AFB  0A3F               	incf	sprintf@prec,w
 28394  1AFC  1903               	btfsc	3,2
 28395  1AFD  2970               	goto	l8807
 28396                           
 28397                           ;doprnt.c: 1478: {
 28398                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 28399  1AFE  300A               	movlw	10
 28400  1AFF  00AB               	movwf	___lwmod@divisor
 28401  1B00  3000               	movlw	0
 28402  1B01  00AC               	movwf	___lwmod@divisor+1
 28403  1B02  083F               	movf	sprintf@prec,w
 28404  1B03  00BB               	movwf	??_sprintf
 28405  1B04  01BC               	clrf	??_sprintf+1
 28406  1B05  35BB               	lslf	??_sprintf,f
 28407  1B06  0DBC               	rlf	??_sprintf+1,f
 28408  1B07  3000               	movlw	low (_dpowers| (0+32768))
 28409  1B08  073B               	addwf	??_sprintf,w
 28410  1B09  0084               	movwf	4
 28411  1B0A  30A8               	movlw	high (_dpowers| (0+32768))
 28412  1B0B  3D3C               	addwfc	??_sprintf+1,w
 28413  1B0C  0085               	movwf	5
 28414  1B0D  3F00               	moviw [0]fsr0
 28415  1B0E  00F1               	movwf	___lwdiv@divisor
 28416  1B0F  3F01               	moviw [1]fsr0
 28417  1B10  00F2               	movwf	___lwdiv@divisor+1
 28418  1B11  0845               	movf	sprintf@val+1,w
 28419  1B12  00F4               	movwf	___lwdiv@dividend+1
 28420  1B13  0844               	movf	sprintf@val,w
 28421  1B14  00F3               	movwf	___lwdiv@dividend
 28422  1B15  31A8  2085  3199   	fcall	___lwdiv
 28423  1B18  0872               	movf	?___lwdiv+1,w
 28424  1B19  0020               	movlb	0	; select bank0
 28425  1B1A  00AE               	movwf	___lwmod@dividend+1
 28426  1B1B  0871               	movf	?___lwdiv,w
 28427  1B1C  00AD               	movwf	___lwmod@dividend
 28428  1B1D  31B5  25A3  3199   	fcall	___lwmod
 28429  1B20  0020               	movlb	0	; select bank0
 28430  1B21  082B               	movf	?___lwmod,w
 28431  1B22  3E30               	addlw	48
 28432  1B23  00BD               	movwf	??_sprintf+2
 28433  1B24  083D               	movf	??_sprintf+2,w
 28434  1B25  00CA               	movwf	sprintf@c
 28435                           
 28436                           ;doprnt.c: 1523: }
 28437                           ;doprnt.c: 1524: ((*sp++ = (c)));
 28438  1B26  082F               	movf	sprintf@sp,w
 28439  1B27  0086               	movwf	6
 28440  1B28  0830               	movf	sprintf@sp+1,w
 28441  1B29  0087               	movwf	7
 28442  1B2A  084A               	movf	sprintf@c,w
 28443  1B2B  0081               	movwf	1
 28444  1B2C  3001               	movlw	1
 28445  1B2D  07AF               	addwf	sprintf@sp,f
 28446  1B2E  3000               	movlw	0
 28447  1B2F  3DB0               	addwfc	sprintf@sp+1,f
 28448  1B30  2AF7               	goto	l8805
 28449  1B31                     l8809:	
 28450                           ;doprnt.c: 1525: }
 28451                           ;doprnt.c: 1533: }
 28452                           ;doprnt.c: 1535: alldone:
 28453                           
 28454                           
 28455                           ;doprnt.c: 1538: *sp = 0;
 28456  1B31  0020               	movlb	0	; select bank0
 28457  1B32  082F               	movf	sprintf@sp,w
 28458  1B33  0086               	movwf	6
 28459  1B34  0830               	movf	sprintf@sp+1,w
 28460  1B35  0087               	movwf	7
 28461  1B36  0181               	clrf	1
 28462  1B37  0008               	return
 28463  1B38                     __end_of_sprintf:	
 28464                           ;doprnt.c: 1540: return 0;
 28465                           ;	Return value of _sprintf is never used
 28466                           
 28467                           
 28468                           	psect	text42
 28469  329E                     __ptext42:	
 28470 ;; *************** function _isdigit *****************
 28471 ;; Defined at:
 28472 ;;		line 8 in file "/Applications/microchip/xc8/v1.42/sources/common/isdigit.c"
 28473 ;; Parameters:    Size  Location     Type
 28474 ;;  c               1    wreg     unsigned char 
 28475 ;; Auto vars:     Size  Location     Type
 28476 ;;  c               1    2[COMMON] unsigned char 
 28477 ;; Return value:  Size  Location     Type
 28478 ;;		None               void
 28479 ;; Registers used:
 28480 ;;		wreg, status,2, status,0
 28481 ;; Tracked objects:
 28482 ;;		On entry : 0/0
 28483 ;;		On exit  : 0/0
 28484 ;;		Unchanged: 0/0
 28485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28486 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28487 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28488 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28489 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28490 ;;Total ram usage:        2 bytes
 28491 ;; Hardware stack levels used:    1
 28492 ;; Hardware stack levels required when called:    4
 28493 ;; This function calls:
 28494 ;;		Nothing
 28495 ;; This function is called by:
 28496 ;;		_sprintf
 28497 ;; This function uses a non-reentrant model
 28498 ;;
 28499                           
 28500                           
 28501                           ;psect for function _isdigit
 28502  329E                     _isdigit:	
 28503                           
 28504                           ;incstack = 0
 28505                           ; Regs used in _isdigit: [wreg+status,2+status,0]
 28506                           ;isdigit@c stored from wreg
 28507  329E  00F2               	movwf	isdigit@c
 28508  329F  01F1               	clrf	_isdigit$3645
 28509  32A0  303A               	movlw	58
 28510  32A1  0272               	subwf	isdigit@c,w
 28511  32A2  1803               	skipnc
 28512  32A3  2AAA               	goto	l8525
 28513  32A4  3030               	movlw	48
 28514  32A5  0272               	subwf	isdigit@c,w
 28515  32A6  1C03               	skipc
 28516  32A7  2AAA               	goto	l8525
 28517  32A8  01F1               	clrf	_isdigit$3645
 28518  32A9  0AF1               	incf	_isdigit$3645,f
 28519  32AA                     l8525:	
 28520  32AA  0C71               	rrf	_isdigit$3645,w
 28521  32AB  0008               	return
 28522  32AC                     __end_of_isdigit:	
 28523                           
 28524                           	psect	text43
 28525  33DA                     __ptext43:	
 28526 ;; *************** function ___wmul *****************
 28527 ;; Defined at:
 28528 ;;		line 15 in file "/Applications/microchip/xc8/v1.42/sources/common/Umul16.c"
 28529 ;; Parameters:    Size  Location     Type
 28530 ;;  multiplier      2    1[COMMON] unsigned int 
 28531 ;;  multiplicand    2    3[COMMON] unsigned int 
 28532 ;; Auto vars:     Size  Location     Type
 28533 ;;  product         2    5[COMMON] unsigned int 
 28534 ;; Return value:  Size  Location     Type
 28535 ;;                  2    1[COMMON] unsigned int 
 28536 ;; Registers used:
 28537 ;;		wreg, status,2, status,0
 28538 ;; Tracked objects:
 28539 ;;		On entry : 0/0
 28540 ;;		On exit  : 0/0
 28541 ;;		Unchanged: 0/0
 28542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28543 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28544 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28545 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28546 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28547 ;;Total ram usage:        6 bytes
 28548 ;; Hardware stack levels used:    1
 28549 ;; Hardware stack levels required when called:    4
 28550 ;; This function calls:
 28551 ;;		Nothing
 28552 ;; This function is called by:
 28553 ;;		_locked_secret_check
 28554 ;;		_secret_check
 28555 ;;		_matrix_secret_check
 28556 ;;		_sprintf
 28557 ;; This function uses a non-reentrant model
 28558 ;;
 28559                           
 28560                           
 28561                           ;psect for function ___wmul
 28562  33DA                     ___wmul:	
 28563                           
 28564                           ;incstack = 0
 28565                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 28566  33DA  01F5               	clrf	___wmul@product
 28567  33DB  01F6               	clrf	___wmul@product+1
 28568  33DC                     l8531:	
 28569  33DC  1C71               	btfss	___wmul@multiplier,0
 28570  33DD  2BE2               	goto	l1712
 28571  33DE  0873               	movf	___wmul@multiplicand,w
 28572  33DF  07F5               	addwf	___wmul@product,f
 28573  33E0  0874               	movf	___wmul@multiplicand+1,w
 28574  33E1  3DF6               	addwfc	___wmul@product+1,f
 28575  33E2                     l1712:	
 28576  33E2  3001               	movlw	1
 28577  33E3                     u5085:	
 28578  33E3  35F3               	lslf	___wmul@multiplicand,f
 28579  33E4  0DF4               	rlf	___wmul@multiplicand+1,f
 28580  33E5  0B89               	decfsz	9,f
 28581  33E6  2BE3               	goto	u5085
 28582  33E7  3001               	movlw	1
 28583  33E8                     u5095:	
 28584  33E8  36F2               	lsrf	___wmul@multiplier+1,f
 28585  33E9  0CF1               	rrf	___wmul@multiplier,f
 28586  33EA  0B89               	decfsz	9,f
 28587  33EB  2BE8               	goto	u5095
 28588  33EC  0871               	movf	___wmul@multiplier,w
 28589  33ED  0472               	iorwf	___wmul@multiplier+1,w
 28590  33EE  1D03               	btfss	3,2
 28591  33EF  2BDC               	goto	l8531
 28592  33F0  0876               	movf	___wmul@product+1,w
 28593  33F1  00F2               	movwf	?___wmul+1
 28594  33F2  0875               	movf	___wmul@product,w
 28595  33F3  00F1               	movwf	?___wmul
 28596  33F4  0008               	return
 28597  33F5                     __end_of___wmul:	
 28598                           
 28599                           	psect	text44
 28600  2882                     __ptext44:	
 28601 ;; *************** function _nullifyBadge_irTxSet *****************
 28602 ;; Defined at:
 28603 ;;		line 264 in file "nullifyBadge.c"
 28604 ;; Parameters:    Size  Location     Type
 28605 ;;		None
 28606 ;; Auto vars:     Size  Location     Type
 28607 ;;		None
 28608 ;; Return value:  Size  Location     Type
 28609 ;;                  1    wreg      void 
 28610 ;; Registers used:
 28611 ;;		None
 28612 ;; Tracked objects:
 28613 ;;		On entry : 0/0
 28614 ;;		On exit  : 0/0
 28615 ;;		Unchanged: 0/0
 28616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28617 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28618 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28619 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28620 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28621 ;;Total ram usage:        0 bytes
 28622 ;; Hardware stack levels used:    1
 28623 ;; Hardware stack levels required when called:    4
 28624 ;; This function calls:
 28625 ;;		Nothing
 28626 ;; This function is called by:
 28627 ;;		_flashy_Main
 28628 ;; This function uses a non-reentrant model
 28629 ;;
 28630                           
 28631                           
 28632                           ;psect for function _nullifyBadge_irTxSet
 28633  2882                     _nullifyBadge_irTxSet:	
 28634                           
 28635                           ;incstack = 0
 28636                           ; Regs used in _nullifyBadge_irTxSet: []
 28637                           ;nullifyBadge.c: 266: do { LATBbits.LATB7 = 0; } while(0);
 28638  2882  0022               	movlb	2	; select bank2
 28639  2883  138D               	bcf	13,7	;volatile
 28640  2884  0008               	return
 28641  2885                     __end_of_nullifyBadge_irTxSet:	
 28642                           
 28643                           	psect	text45
 28644  3256                     __ptext45:	
 28645 ;; *************** function _nullifyBadge_irTxRelease *****************
 28646 ;; Defined at:
 28647 ;;		line 254 in file "nullifyBadge.c"
 28648 ;; Parameters:    Size  Location     Type
 28649 ;;  badge           1    wreg     PTR struct t_nullifyBadg
 28650 ;;		 -> badge_inst(18), 
 28651 ;; Auto vars:     Size  Location     Type
 28652 ;;  badge           1    2[COMMON] PTR struct t_nullifyBadg
 28653 ;;		 -> badge_inst(18), 
 28654 ;; Return value:  Size  Location     Type
 28655 ;;                  1    wreg      void 
 28656 ;; Registers used:
 28657 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 28658 ;; Tracked objects:
 28659 ;;		On entry : 0/0
 28660 ;;		On exit  : 0/0
 28661 ;;		Unchanged: 0/0
 28662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28663 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28664 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28665 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28666 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28667 ;;Total ram usage:        2 bytes
 28668 ;; Hardware stack levels used:    1
 28669 ;; Hardware stack levels required when called:    4
 28670 ;; This function calls:
 28671 ;;		Nothing
 28672 ;; This function is called by:
 28673 ;;		_flashy_Main
 28674 ;; This function uses a non-reentrant model
 28675 ;;
 28676                           
 28677                           
 28678                           ;psect for function _nullifyBadge_irTxRelease
 28679  3256                     _nullifyBadge_irTxRelease:	
 28680                           
 28681                           ;incstack = 0
 28682                           ; Regs used in _nullifyBadge_irTxRelease: [wreg+fsr1l+fsr1h+status,2+status,0]
 28683                           ;nullifyBadge_irTxRelease@badge stored from wreg
 28684  3256  00F2               	movwf	nullifyBadge_irTxRelease@badge
 28685                           
 28686                           ;nullifyBadge.c: 255: badge->registeredHw &= ~(1 << HW_IR_TX);
 28687  3257  30FB               	movlw	251
 28688  3258  00F1               	movwf	??_nullifyBadge_irTxRelease
 28689  3259  0872               	movf	nullifyBadge_irTxRelease@badge,w
 28690  325A  3E11               	addlw	17
 28691  325B  0086               	movwf	6
 28692  325C  3001               	movlw	1	; select bank2/3
 28693  325D  0087               	movwf	7
 28694  325E  0871               	movf	??_nullifyBadge_irTxRelease,w
 28695  325F  0581               	andwf	1,f
 28696  3260  0008               	return
 28697  3261                     __end_of_nullifyBadge_irTxRelease:	
 28698                           
 28699                           	psect	text46
 28700  32BA                     __ptext46:	
 28701 ;; *************** function _nullifyBadge_irTxRegister *****************
 28702 ;; Defined at:
 28703 ;;		line 242 in file "nullifyBadge.c"
 28704 ;; Parameters:    Size  Location     Type
 28705 ;;  badge           1    wreg     PTR struct t_nullifyBadg
 28706 ;;		 -> badge_inst(18), 
 28707 ;; Auto vars:     Size  Location     Type
 28708 ;;  badge           1    1[COMMON] PTR struct t_nullifyBadg
 28709 ;;		 -> badge_inst(18), 
 28710 ;; Return value:  Size  Location     Type
 28711 ;;                  1    wreg      char 
 28712 ;; Registers used:
 28713 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 28714 ;; Tracked objects:
 28715 ;;		On entry : 0/0
 28716 ;;		On exit  : 0/0
 28717 ;;		Unchanged: 0/0
 28718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28719 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28720 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28721 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28722 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28723 ;;Total ram usage:        1 bytes
 28724 ;; Hardware stack levels used:    1
 28725 ;; Hardware stack levels required when called:    4
 28726 ;; This function calls:
 28727 ;;		Nothing
 28728 ;; This function is called by:
 28729 ;;		_flashy_Main
 28730 ;; This function uses a non-reentrant model
 28731 ;;
 28732                           
 28733                           
 28734                           ;psect for function _nullifyBadge_irTxRegister
 28735  32BA                     _nullifyBadge_irTxRegister:	
 28736                           
 28737                           ;incstack = 0
 28738                           ; Regs used in _nullifyBadge_irTxRegister: [wreg+fsr1l+fsr1h+status,2+status,0]
 28739                           ;nullifyBadge_irTxRegister@badge stored from wreg
 28740  32BA  00F1               	movwf	nullifyBadge_irTxRegister@badge
 28741                           
 28742                           ;nullifyBadge.c: 243: if (badge->registeredHw & HW_IR_TX) {
 28743  32BB  0871               	movf	nullifyBadge_irTxRegister@badge,w
 28744  32BC  3E11               	addlw	17
 28745  32BD  0086               	movwf	6
 28746  32BE  3001               	movlw	1	; select bank2/3
 28747  32BF  0087               	movwf	7
 28748  32C0  1881               	btfsc	1,1
 28749  32C1  0008               	return
 28750                           
 28751                           ;nullifyBadge.c: 246: else {
 28752                           ;nullifyBadge.c: 247: badge->registeredHw |= (1 << HW_IR_TX);
 28753                           
 28754                           ;nullifyBadge.c: 245: }
 28755                           
 28756                           ;nullifyBadge.c: 244: return -1;
 28757                           ;	Return value of _nullifyBadge_irTxRegister is never used
 28758  32C2  0871               	movf	nullifyBadge_irTxRegister@badge,w
 28759  32C3  3E11               	addlw	17
 28760  32C4  0086               	movwf	6
 28761  32C5  3001               	movlw	1	; select bank2/3
 28762  32C6  0087               	movwf	7
 28763  32C7  1501               	bsf	1,2
 28764                           
 28765                           ;nullifyBadge.c: 248: return 0;
 28766                           ;	Return value of _nullifyBadge_irTxRegister is never used
 28767  32C8  0008               	return
 28768  32C9                     __end_of_nullifyBadge_irTxRegister:	
 28769                           
 28770                           	psect	text47
 28771  31CC                     __ptext47:	
 28772 ;; *************** function _nullifyBadge_irTxClr *****************
 28773 ;; Defined at:
 28774 ;;		line 270 in file "nullifyBadge.c"
 28775 ;; Parameters:    Size  Location     Type
 28776 ;;		None
 28777 ;; Auto vars:     Size  Location     Type
 28778 ;;		None
 28779 ;; Return value:  Size  Location     Type
 28780 ;;                  1    wreg      void 
 28781 ;; Registers used:
 28782 ;;		None
 28783 ;; Tracked objects:
 28784 ;;		On entry : 0/0
 28785 ;;		On exit  : 0/0
 28786 ;;		Unchanged: 0/0
 28787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28788 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28789 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28790 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28791 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28792 ;;Total ram usage:        0 bytes
 28793 ;; Hardware stack levels used:    1
 28794 ;; Hardware stack levels required when called:    4
 28795 ;; This function calls:
 28796 ;;		Nothing
 28797 ;; This function is called by:
 28798 ;;		_flashy_Main
 28799 ;; This function uses a non-reentrant model
 28800 ;;
 28801                           
 28802                           
 28803                           ;psect for function _nullifyBadge_irTxClr
 28804  31CC                     _nullifyBadge_irTxClr:	
 28805                           
 28806                           ;incstack = 0
 28807                           ; Regs used in _nullifyBadge_irTxClr: []
 28808                           ;nullifyBadge.c: 272: do { LATBbits.LATB7 = 1; } while(0);
 28809  31CC  0022               	movlb	2	; select bank2
 28810  31CD  178D               	bsf	13,7	;volatile
 28811  31CE  0008               	return
 28812  31CF                     __end_of_nullifyBadge_irTxClr:	
 28813                           
 28814                           	psect	text48
 28815  31D3                     __ptext48:	
 28816 ;; *************** function _nullifyBadge_irGet *****************
 28817 ;; Defined at:
 28818 ;;		line 232 in file "nullifyBadge.c"
 28819 ;; Parameters:    Size  Location     Type
 28820 ;;		None
 28821 ;; Auto vars:     Size  Location     Type
 28822 ;;		None
 28823 ;; Return value:  Size  Location     Type
 28824 ;;                  1    wreg      unsigned char 
 28825 ;; Registers used:
 28826 ;;		wreg, status,2, status,0
 28827 ;; Tracked objects:
 28828 ;;		On entry : 0/0
 28829 ;;		On exit  : 0/0
 28830 ;;		Unchanged: 0/0
 28831 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28832 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28833 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28834 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28835 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28836 ;;Total ram usage:        0 bytes
 28837 ;; Hardware stack levels used:    1
 28838 ;; Hardware stack levels required when called:    4
 28839 ;; This function calls:
 28840 ;;		Nothing
 28841 ;; This function is called by:
 28842 ;;		_flashy_Main
 28843 ;; This function uses a non-reentrant model
 28844 ;;
 28845                           
 28846                           
 28847                           ;psect for function _nullifyBadge_irGet
 28848  31D3                     _nullifyBadge_irGet:	
 28849                           
 28850                           ;nullifyBadge.c: 233: return PORTBbits.RB5;
 28851                           
 28852                           ;incstack = 0
 28853                           ; Regs used in _nullifyBadge_irGet: [wreg+status,2+status,0]
 28854  31D3  0020               	movlb	0	; select bank0
 28855  31D4  0E0D               	swapf	13,w	;volatile
 28856  31D5  0C89               	rrf	9,f
 28857  31D6  3901               	andlw	1
 28858  31D7  0008               	return
 28859  31D8                     __end_of_nullifyBadge_irGet:	
 28860                           
 28861                           	psect	text49
 28862  35FF                     __ptext49:	
 28863 ;; *************** function _nullifyBadge_buttonsGet *****************
 28864 ;; Defined at:
 28865 ;;		line 187 in file "nullifyBadge.c"
 28866 ;; Parameters:    Size  Location     Type
 28867 ;;		None
 28868 ;; Auto vars:     Size  Location     Type
 28869 ;;  retVal          1    3[COMMON] unsigned char 
 28870 ;; Return value:  Size  Location     Type
 28871 ;;                  1    wreg      unsigned char 
 28872 ;; Registers used:
 28873 ;;		wreg, status,2, status,0
 28874 ;; Tracked objects:
 28875 ;;		On entry : 0/0
 28876 ;;		On exit  : 0/0
 28877 ;;		Unchanged: 0/0
 28878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28879 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28880 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28881 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28882 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28883 ;;Total ram usage:        3 bytes
 28884 ;; Hardware stack levels used:    1
 28885 ;; Hardware stack levels required when called:    4
 28886 ;; This function calls:
 28887 ;;		Nothing
 28888 ;; This function is called by:
 28889 ;;		_menu_Main
 28890 ;;		_flashy_Main
 28891 ;;		_locked_Main
 28892 ;;		_secret_Main
 28893 ;;		_slot_Main
 28894 ;;		_matrix_Main
 28895 ;; This function uses a non-reentrant model
 28896 ;;
 28897                           
 28898                           
 28899                           ;psect for function _nullifyBadge_buttonsGet
 28900  35FF                     _nullifyBadge_buttonsGet:	
 28901                           
 28902                           ;nullifyBadge.c: 188: u8 retVal = 0x0F;
 28903                           
 28904                           ;incstack = 0
 28905                           ; Regs used in _nullifyBadge_buttonsGet: [wreg+status,2+status,0]
 28906  35FF  300F               	movlw	15
 28907  3600  00F1               	movwf	??_nullifyBadge_buttonsGet
 28908  3601  0871               	movf	??_nullifyBadge_buttonsGet,w
 28909  3602  00F3               	movwf	nullifyBadge_buttonsGet@retVal
 28910                           
 28911                           ;nullifyBadge.c: 190: retVal &= ~(PORTCbits.RC5 << 0);
 28912  3603  0020               	movlb	0	; select bank0
 28913  3604  0E0E               	swapf	14,w	;volatile
 28914  3605  0C89               	rrf	9,f
 28915  3606  3901               	andlw	1
 28916  3607  3AFF               	xorlw	255
 28917  3608  00F1               	movwf	??_nullifyBadge_buttonsGet
 28918  3609  0871               	movf	??_nullifyBadge_buttonsGet,w
 28919  360A  05F3               	andwf	nullifyBadge_buttonsGet@retVal,f
 28920                           
 28921                           ;nullifyBadge.c: 191: retVal &= ~(PORTAbits.RA2 << 1);
 28922  360B  0C0C               	rrf	12,w	;volatile
 28923  360C  0C89               	rrf	9,f
 28924  360D  3901               	andlw	1
 28925  360E  0709               	addwf	9,w
 28926  360F  3AFF               	xorlw	255
 28927  3610  00F1               	movwf	??_nullifyBadge_buttonsGet
 28928  3611  0871               	movf	??_nullifyBadge_buttonsGet,w
 28929  3612  05F3               	andwf	nullifyBadge_buttonsGet@retVal,f
 28930                           
 28931                           ;nullifyBadge.c: 192: retVal &= ~(PORTAbits.RA4 << 2);
 28932  3613  0E0C               	swapf	12,w	;volatile
 28933  3614  3901               	andlw	1
 28934  3615  00F1               	movwf	??_nullifyBadge_buttonsGet
 28935  3616  3001               	movlw	1
 28936  3617                     u5165:	
 28937  3617  35F1               	lslf	??_nullifyBadge_buttonsGet,f
 28938  3618  3EFF               	addlw	-1
 28939  3619  1D03               	skipz
 28940  361A  2E17               	goto	u5165
 28941  361B  3571               	lslf	??_nullifyBadge_buttonsGet,w
 28942  361C  3AFF               	xorlw	255
 28943  361D  00F2               	movwf	??_nullifyBadge_buttonsGet+1
 28944  361E  0872               	movf	??_nullifyBadge_buttonsGet+1,w
 28945  361F  05F3               	andwf	nullifyBadge_buttonsGet@retVal,f
 28946                           
 28947                           ;nullifyBadge.c: 193: retVal &= ~(PORTAbits.RA5 << 3);
 28948  3620  0E0C               	swapf	12,w	;volatile
 28949  3621  0C89               	rrf	9,f
 28950  3622  3901               	andlw	1
 28951  3623  00F1               	movwf	??_nullifyBadge_buttonsGet
 28952  3624  3002               	movlw	2
 28953  3625                     u5175:	
 28954  3625  35F1               	lslf	??_nullifyBadge_buttonsGet,f
 28955  3626  3EFF               	addlw	-1
 28956  3627  1D03               	skipz
 28957  3628  2E25               	goto	u5175
 28958  3629  3571               	lslf	??_nullifyBadge_buttonsGet,w
 28959  362A  3AFF               	xorlw	255
 28960  362B  00F2               	movwf	??_nullifyBadge_buttonsGet+1
 28961  362C  0872               	movf	??_nullifyBadge_buttonsGet+1,w
 28962  362D  05F3               	andwf	nullifyBadge_buttonsGet@retVal,f
 28963                           
 28964                           ;nullifyBadge.c: 195: return retVal;
 28965  362E  0873               	movf	nullifyBadge_buttonsGet@retVal,w
 28966  362F  0008               	return
 28967  3630                     __end_of_nullifyBadge_buttonsGet:	
 28968                           
 28969                           	psect	text50
 28970  2201                     __ptext50:	
 28971 ;; *************** function _let_alternate *****************
 28972 ;; Defined at:
 28973 ;;		line 194 in file "main.c"
 28974 ;; Parameters:    Size  Location     Type
 28975 ;;  count           2   16[BANK0 ] unsigned int 
 28976 ;; Auto vars:     Size  Location     Type
 28977 ;;		None
 28978 ;; Return value:  Size  Location     Type
 28979 ;;                  1    wreg      void 
 28980 ;; Registers used:
 28981 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 28982 ;; Tracked objects:
 28983 ;;		On entry : 0/0
 28984 ;;		On exit  : 0/0
 28985 ;;		Unchanged: 0/0
 28986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28987 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28988 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28989 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28990 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28991 ;;Total ram usage:        2 bytes
 28992 ;; Hardware stack levels used:    1
 28993 ;; Hardware stack levels required when called:    9
 28994 ;; This function calls:
 28995 ;;		_nullifyBadge_userLedsSet
 28996 ;; This function is called by:
 28997 ;;		_flashy_Main
 28998 ;; This function uses a non-reentrant model
 28999 ;;
 29000                           
 29001                           
 29002                           ;psect for function _let_alternate
 29003  2201                     _let_alternate:	
 29004                           
 29005                           ;main.c: 195: if(count %2 == 1){
 29006                           
 29007                           ;incstack = 0
 29008                           ; Regs used in _let_alternate: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 29009  2201  0020               	movlb	0	; select bank0
 29010  2202  1C30               	btfss	let_alternate@count,0
 29011  2203  2A0C               	goto	l8573
 29012                           
 29013                           ;main.c: 196: nullifyBadge_userLedsSet(&badge_inst,43349);
 29014  2204  3055               	movlw	85
 29015  2205  00AD               	movwf	nullifyBadge_userLedsSet@userLedData
 29016  2206  30A9               	movlw	169
 29017  2207  00AE               	movwf	nullifyBadge_userLedsSet@userLedData+1
 29018  2208  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 29019  2209  31B2  22F9         	fcall	_nullifyBadge_userLedsSet
 29020                           
 29021                           ;main.c: 197: }
 29022  220B  0008               	return
 29023  220C                     l8573:	
 29024                           
 29025                           ;main.c: 198: else{
 29026                           ;main.c: 199: nullifyBadge_userLedsSet(&badge_inst,21162);
 29027  220C  30AA               	movlw	170
 29028  220D  0020               	movlb	0	; select bank0
 29029  220E  00AD               	movwf	nullifyBadge_userLedsSet@userLedData
 29030  220F  3052               	movlw	82
 29031  2210  00AE               	movwf	nullifyBadge_userLedsSet@userLedData+1
 29032  2211  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 29033  2212  31B2  22F9         	fcall	_nullifyBadge_userLedsSet
 29034  2214  0008               	return
 29035  2215                     __end_of_let_alternate:	
 29036                           
 29037                           	psect	text51
 29038  37BF                     __ptext51:	
 29039 ;; *************** function _led_roundabout *****************
 29040 ;; Defined at:
 29041 ;;		line 159 in file "main.c"
 29042 ;; Parameters:    Size  Location     Type
 29043 ;;  counter         2   16[BANK0 ] unsigned int 
 29044 ;; Auto vars:     Size  Location     Type
 29045 ;;  size            2   22[BANK0 ] unsigned int 
 29046 ;;  leds            2   20[BANK0 ] unsigned int 
 29047 ;; Return value:  Size  Location     Type
 29048 ;;                  1    wreg      void 
 29049 ;; Registers used:
 29050 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 29051 ;; Tracked objects:
 29052 ;;		On entry : 0/0
 29053 ;;		On exit  : 0/0
 29054 ;;		Unchanged: 0/0
 29055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 29056 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29057 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29058 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29059 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29060 ;;Total ram usage:        8 bytes
 29061 ;; Hardware stack levels used:    1
 29062 ;; Hardware stack levels required when called:    9
 29063 ;; This function calls:
 29064 ;;		___lwmod
 29065 ;;		_nullifyBadge_userLedsSet
 29066 ;; This function is called by:
 29067 ;;		_flashy_Main
 29068 ;; This function uses a non-reentrant model
 29069 ;;
 29070                           
 29071                           
 29072                           ;psect for function _led_roundabout
 29073  37BF                     _led_roundabout:	
 29074                           
 29075                           ;main.c: 160: u16 size = sizeof(roundabout_leds) / sizeof(roundabout_leds[0]);
 29076                           
 29077                           ;incstack = 0
 29078                           ; Regs used in _led_roundabout: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 29079  37BF  300E               	movlw	14
 29080  37C0  0020               	movlb	0	; select bank0
 29081  37C1  00B6               	movwf	led_roundabout@size
 29082  37C2  3000               	movlw	0
 29083  37C3  00B7               	movwf	led_roundabout@size+1
 29084                           
 29085                           ;main.c: 161: u16 leds = roundabout_leds[counter % size];
 29086  37C4  0837               	movf	led_roundabout@size+1,w
 29087  37C5  00AC               	movwf	___lwmod@divisor+1
 29088  37C6  0836               	movf	led_roundabout@size,w
 29089  37C7  00AB               	movwf	___lwmod@divisor
 29090  37C8  0831               	movf	led_roundabout@counter+1,w
 29091  37C9  00AE               	movwf	___lwmod@dividend+1
 29092  37CA  0830               	movf	led_roundabout@counter,w
 29093  37CB  00AD               	movwf	___lwmod@dividend
 29094  37CC  31B5  25A3  31B7   	fcall	___lwmod
 29095  37CF  0020               	movlb	0	; select bank0
 29096  37D0  082B               	movf	?___lwmod,w
 29097  37D1  0709               	addwf	9,w
 29098  37D2  3EBC               	addlw	(low (_roundabout_leds| (0+768)))& (0+255)
 29099  37D3  0086               	movwf	6
 29100  37D4  3003               	movlw	3	; select bank7/8
 29101  37D5  0087               	movwf	7
 29102  37D6  3F40               	moviw [0]fsr1
 29103  37D7  00B4               	movwf	led_roundabout@leds
 29104  37D8  3F41               	moviw [1]fsr1
 29105  37D9  00B5               	movwf	led_roundabout@leds+1
 29106                           
 29107                           ;main.c: 163: size = sizeof(roundabout_leds_inverse) / sizeof(roundabout_leds_inverse[0]
      +                          );
 29108  37DA  300E               	movlw	14
 29109  37DB  00B6               	movwf	led_roundabout@size
 29110  37DC  3000               	movlw	0
 29111  37DD  00B7               	movwf	led_roundabout@size+1
 29112                           
 29113                           ;main.c: 164: leds |= roundabout_leds_inverse[counter % size];
 29114  37DE  0837               	movf	led_roundabout@size+1,w
 29115  37DF  00AC               	movwf	___lwmod@divisor+1
 29116  37E0  0836               	movf	led_roundabout@size,w
 29117  37E1  00AB               	movwf	___lwmod@divisor
 29118  37E2  0831               	movf	led_roundabout@counter+1,w
 29119  37E3  00AE               	movwf	___lwmod@dividend+1
 29120  37E4  0830               	movf	led_roundabout@counter,w
 29121  37E5  00AD               	movwf	___lwmod@dividend
 29122  37E6  31B5  25A3  31B7   	fcall	___lwmod
 29123  37E9  0020               	movlb	0	; select bank0
 29124  37EA  082B               	movf	?___lwmod,w
 29125  37EB  0709               	addwf	9,w
 29126  37EC  3EA0               	addlw	(low (_roundabout_leds_inverse| (0+768)))& (0+255)
 29127  37ED  0086               	movwf	6
 29128  37EE  3003               	movlw	3	; select bank7/8
 29129  37EF  0087               	movwf	7
 29130  37F0  3F40               	moviw [0]fsr1
 29131  37F1  00B2               	movwf	??_led_roundabout
 29132  37F2  3F41               	moviw [1]fsr1
 29133  37F3  00B3               	movwf	??_led_roundabout+1
 29134  37F4  0832               	movf	??_led_roundabout,w
 29135  37F5  04B4               	iorwf	led_roundabout@leds,f
 29136  37F6  0833               	movf	??_led_roundabout+1,w
 29137  37F7  04B5               	iorwf	led_roundabout@leds+1,f
 29138                           
 29139                           ;main.c: 166: nullifyBadge_userLedsSet(&badge_inst, leds);
 29140  37F8  0835               	movf	led_roundabout@leds+1,w
 29141  37F9  00AE               	movwf	nullifyBadge_userLedsSet@userLedData+1
 29142  37FA  0834               	movf	led_roundabout@leds,w
 29143  37FB  00AD               	movwf	nullifyBadge_userLedsSet@userLedData
 29144  37FC  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 29145  37FD  31B2  22F9         	fcall	_nullifyBadge_userLedsSet
 29146  37FF  0008               	return
 29147  3800                     __end_of_led_roundabout:	
 29148                           
 29149                           	psect	text52
 29150  29CB                     __ptext52:	
 29151 ;; *************** function _led_rand *****************
 29152 ;; Defined at:
 29153 ;;		line 179 in file "main.c"
 29154 ;; Parameters:    Size  Location     Type
 29155 ;;		None
 29156 ;; Auto vars:     Size  Location     Type
 29157 ;;  spark           2   27[BANK0 ] unsigned int 
 29158 ;; Return value:  Size  Location     Type
 29159 ;;                  1    wreg      void 
 29160 ;; Registers used:
 29161 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 29162 ;; Tracked objects:
 29163 ;;		On entry : 0/0
 29164 ;;		On exit  : 0/0
 29165 ;;		Unchanged: 0/0
 29166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 29167 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29168 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29169 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29170 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29171 ;;Total ram usage:       10 bytes
 29172 ;; Hardware stack levels used:    1
 29173 ;; Hardware stack levels required when called:    9
 29174 ;; This function calls:
 29175 ;;		___almod
 29176 ;;		_nullifyBadge_userLedsSet
 29177 ;;		_rand
 29178 ;; This function is called by:
 29179 ;;		_flashy_Main
 29180 ;;		_slot_Finished_Animation
 29181 ;; This function uses a non-reentrant model
 29182 ;;
 29183                           
 29184                           
 29185                           ;psect for function _led_rand
 29186  29CB                     _led_rand:	
 29187                           
 29188                           ;main.c: 181: u16 spark = rand() % 65535;
 29189                           
 29190                           ;incstack = 0
 29191                           ; Regs used in _led_rand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 29192  29CB  3000               	movlw	0
 29193  29CC  0020               	movlb	0	; select bank0
 29194  29CD  00AE               	movwf	___almod@divisor+3
 29195  29CE  3000               	movlw	0
 29196  29CF  00AD               	movwf	___almod@divisor+2
 29197  29D0  30FF               	movlw	255
 29198  29D1  00AC               	movwf	___almod@divisor+1
 29199  29D2  30FF               	movlw	255
 29200  29D3  00AB               	movwf	___almod@divisor
 29201  29D4  31A8  20FB  31A9   	fcall	_rand
 29202  29D7  0020               	movlb	0	; select bank0
 29203  29D8  0824               	movf	?_rand,w
 29204  29D9  00AF               	movwf	___almod@dividend
 29205  29DA  0825               	movf	?_rand+1,w
 29206  29DB  00B0               	movwf	___almod@dividend+1
 29207  29DC  0D89               	rlf	9,f
 29208  29DD  3B89               	subwfb	9,f
 29209  29DE  0989               	comf	9,f
 29210  29DF  00B1               	movwf	___almod@dividend+2
 29211  29E0  00B2               	movwf	___almod@dividend+3
 29212  29E1  31AF  271F  31A9   	fcall	___almod
 29213  29E4  0020               	movlb	0	; select bank0
 29214  29E5  082C               	movf	?___almod+1,w
 29215  29E6  00BC               	movwf	led_rand@spark+1
 29216  29E7  082B               	movf	?___almod,w
 29217  29E8  00BB               	movwf	led_rand@spark
 29218                           
 29219                           ;main.c: 182: if ( (spark | 64511) == 65535 ){
 29220  29E9  30FF               	movlw	255
 29221  29EA  00B3               	movwf	??_led_rand
 29222  29EB  30FB               	movlw	251
 29223  29EC  00B4               	movwf	??_led_rand+1
 29224  29ED  3000               	movlw	0
 29225  29EE  00B5               	movwf	??_led_rand+2
 29226  29EF  3000               	movlw	0
 29227  29F0  00B6               	movwf	??_led_rand+3
 29228  29F1  083B               	movf	led_rand@spark,w
 29229  29F2  00B7               	movwf	??_led_rand+4
 29230  29F3  083C               	movf	led_rand@spark+1,w
 29231  29F4  00B8               	movwf	??_led_rand+5
 29232  29F5  01B9               	clrf	??_led_rand+6
 29233  29F6  01BA               	clrf	??_led_rand+7
 29234  29F7  0837               	movf	??_led_rand+4,w
 29235  29F8  04B3               	iorwf	??_led_rand,f
 29236  29F9  0838               	movf	??_led_rand+5,w
 29237  29FA  04B4               	iorwf	??_led_rand+1,f
 29238  29FB  0839               	movf	??_led_rand+6,w
 29239  29FC  04B5               	iorwf	??_led_rand+2,f
 29240  29FD  083A               	movf	??_led_rand+7,w
 29241  29FE  04B6               	iorwf	??_led_rand+3,f
 29242  29FF  0A33               	incf	??_led_rand,w
 29243  2A00  1D03               	skipz
 29244  2A01  2A0B               	goto	l8487
 29245  2A02  0A34               	incf	??_led_rand+1,w
 29246  2A03  0435               	iorwf	??_led_rand+2,w
 29247  2A04  0436               	iorwf	??_led_rand+3,w
 29248  2A05  1D03               	btfss	3,2
 29249  2A06  2A0B               	goto	l8487
 29250                           
 29251                           ;main.c: 183: spark ^= 1024 ;
 29252  2A07  3000               	movlw	0
 29253  2A08  06BB               	xorwf	led_rand@spark,f
 29254  2A09  3004               	movlw	4
 29255  2A0A  06BC               	xorwf	led_rand@spark+1,f
 29256  2A0B                     l8487:	
 29257                           
 29258                           ;main.c: 184: }
 29259                           ;main.c: 185: nullifyBadge_userLedsSet(&badge_inst,spark);
 29260  2A0B  083C               	movf	led_rand@spark+1,w
 29261  2A0C  00AE               	movwf	nullifyBadge_userLedsSet@userLedData+1
 29262  2A0D  083B               	movf	led_rand@spark,w
 29263  2A0E  00AD               	movwf	nullifyBadge_userLedsSet@userLedData
 29264  2A0F  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 29265  2A10  31B2  22F9         	fcall	_nullifyBadge_userLedsSet
 29266  2A12  0008               	return
 29267  2A13                     __end_of_led_rand:	
 29268                           
 29269                           	psect	text53
 29270  28FB                     __ptext53:	
 29271 ;; *************** function _rand *****************
 29272 ;; Defined at:
 29273 ;;		line 12 in file "/Applications/microchip/xc8/v1.42/sources/common/rand.c"
 29274 ;; Parameters:    Size  Location     Type
 29275 ;;		None
 29276 ;; Auto vars:     Size  Location     Type
 29277 ;;		None
 29278 ;; Return value:  Size  Location     Type
 29279 ;;                  2    4[BANK0 ] int 
 29280 ;; Registers used:
 29281 ;;		wreg, status,2, status,0, pclath, cstack
 29282 ;; Tracked objects:
 29283 ;;		On entry : 0/0
 29284 ;;		On exit  : 0/0
 29285 ;;		Unchanged: 0/0
 29286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 29287 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29288 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29289 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29290 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29291 ;;Total ram usage:        7 bytes
 29292 ;; Hardware stack levels used:    1
 29293 ;; Hardware stack levels required when called:    5
 29294 ;; This function calls:
 29295 ;;		___lmul
 29296 ;; This function is called by:
 29297 ;;		_led_rand
 29298 ;;		_slot_Setup
 29299 ;;		_slot_Main
 29300 ;; This function uses a non-reentrant model
 29301 ;;
 29302                           
 29303                           
 29304                           ;psect for function _rand
 29305  28FB                     _rand:	
 29306                           
 29307                           ;incstack = 0
 29308                           ; Regs used in _rand: [wreg+status,2+status,0+pclath+cstack]
 29309  28FB  0021               	movlb	1	; select bank1
 29310  28FC  084F               	movf	(_randx+3)^(0+128),w
 29311  28FD  00F4               	movwf	___lmul@multiplier+3
 29312  28FE  084E               	movf	(_randx+2)^(0+128),w
 29313  28FF  00F3               	movwf	___lmul@multiplier+2
 29314  2900  084D               	movf	(_randx+1)^(0+128),w
 29315  2901  00F2               	movwf	___lmul@multiplier+1
 29316  2902  084C               	movf	_randx^(0+128),w
 29317  2903  00F1               	movwf	___lmul@multiplier
 29318  2904  3041               	movlw	65
 29319  2905  00F8               	movwf	___lmul@multiplicand+3
 29320  2906  30C6               	movlw	198
 29321  2907  00F7               	movwf	___lmul@multiplicand+2
 29322  2908  304E               	movlw	78
 29323  2909  00F6               	movwf	___lmul@multiplicand+1
 29324  290A  306D               	movlw	109
 29325  290B  00F5               	movwf	___lmul@multiplicand
 29326  290C  31B6  2630  31A8   	fcall	___lmul
 29327  290F  0874               	movf	?___lmul+3,w
 29328  2910  0021               	movlb	1	; select bank1
 29329  2911  00CF               	movwf	(_randx+3)^(0+128)
 29330  2912  0873               	movf	?___lmul+2,w
 29331  2913  00CE               	movwf	(_randx+2)^(0+128)
 29332  2914  0872               	movf	?___lmul+1,w
 29333  2915  00CD               	movwf	(_randx+1)^(0+128)
 29334  2916  0871               	movf	?___lmul,w
 29335  2917  00CC               	movwf	_randx^(0+128)
 29336  2918  3039               	movlw	57
 29337  2919  07CC               	addwf	_randx^(0+128),f
 29338  291A  3030               	movlw	48
 29339  291B  3DCD               	addwfc	(_randx+1)^(0+128),f
 29340  291C  3000               	movlw	0
 29341  291D  3DCE               	addwfc	(_randx+2)^(0+128),f
 29342  291E  3000               	movlw	0
 29343  291F  3DCF               	addwfc	(_randx+3)^(0+128),f
 29344  2920  084C               	movf	_randx^(0+128),w
 29345  2921  0020               	movlb	0	; select bank0
 29346  2922  00A6               	movwf	??_rand
 29347  2923  0021               	movlb	1	; select bank1
 29348  2924  084D               	movf	(_randx+1)^(0+128),w
 29349  2925  0020               	movlb	0	; select bank0
 29350  2926  00A7               	movwf	??_rand+1
 29351  2927  0021               	movlb	1	; select bank1
 29352  2928  084E               	movf	(_randx+2)^(0+128),w
 29353  2929  0020               	movlb	0	; select bank0
 29354  292A  00A8               	movwf	??_rand+2
 29355  292B  0021               	movlb	1	; select bank1
 29356  292C  084F               	movf	(_randx+3)^(0+128),w
 29357  292D  0020               	movlb	0	; select bank0
 29358  292E  00A9               	movwf	??_rand+3
 29359  292F  3010               	movlw	16
 29360  2930  00AA               	movwf	??_rand+4
 29361  2931                     u4745:	
 29362  2931  37A9               	asrf	??_rand+3,f
 29363  2932  0CA8               	rrf	??_rand+2,f
 29364  2933  0CA7               	rrf	??_rand+1,f
 29365  2934  0CA6               	rrf	??_rand,f
 29366  2935  0BAA               	decfsz	??_rand+4,f
 29367  2936  2931               	goto	u4745
 29368  2937  30FF               	movlw	255
 29369  2938  0526               	andwf	??_rand,w
 29370  2939  00A4               	movwf	?_rand
 29371  293A  307F               	movlw	127
 29372  293B  0527               	andwf	??_rand+1,w
 29373  293C  00A5               	movwf	?_rand+1
 29374  293D  0008               	return
 29375  293E                     __end_of_rand:	
 29376                           
 29377                           	psect	text54
 29378  3630                     __ptext54:	
 29379 ;; *************** function ___lmul *****************
 29380 ;; Defined at:
 29381 ;;		line 15 in file "/Applications/microchip/xc8/v1.42/sources/common/Umul32.c"
 29382 ;; Parameters:    Size  Location     Type
 29383 ;;  multiplier      4    1[COMMON] unsigned long 
 29384 ;;  multiplicand    4    5[COMMON] unsigned long 
 29385 ;; Auto vars:     Size  Location     Type
 29386 ;;  product         4    0[BANK0 ] unsigned long 
 29387 ;; Return value:  Size  Location     Type
 29388 ;;                  4    1[COMMON] unsigned long 
 29389 ;; Registers used:
 29390 ;;		wreg, status,2, status,0
 29391 ;; Tracked objects:
 29392 ;;		On entry : 0/0
 29393 ;;		On exit  : 0/0
 29394 ;;		Unchanged: 0/0
 29395 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 29396 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29397 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29398 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29399 ;;      Totals:         8       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29400 ;;Total ram usage:       12 bytes
 29401 ;; Hardware stack levels used:    1
 29402 ;; Hardware stack levels required when called:    4
 29403 ;; This function calls:
 29404 ;;		Nothing
 29405 ;; This function is called by:
 29406 ;;		_rand
 29407 ;; This function uses a non-reentrant model
 29408 ;;
 29409                           
 29410                           
 29411                           ;psect for function ___lmul
 29412  3630                     ___lmul:	
 29413                           
 29414                           ;incstack = 0
 29415                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 29416  3630  3000               	movlw	0
 29417  3631  0020               	movlb	0	; select bank0
 29418  3632  00A3               	movwf	___lmul@product+3
 29419  3633  3000               	movlw	0
 29420  3634  00A2               	movwf	___lmul@product+2
 29421  3635  3000               	movlw	0
 29422  3636  00A1               	movwf	___lmul@product+1
 29423  3637  3000               	movlw	0
 29424  3638  00A0               	movwf	___lmul@product
 29425  3639                     l8311:	
 29426  3639  1C71               	btfss	___lmul@multiplier,0
 29427  363A  2E44               	goto	l8315
 29428  363B  0875               	movf	___lmul@multiplicand,w
 29429  363C  0020               	movlb	0	; select bank0
 29430  363D  07A0               	addwf	___lmul@product,f
 29431  363E  0876               	movf	___lmul@multiplicand+1,w
 29432  363F  3DA1               	addwfc	___lmul@product+1,f
 29433  3640  0877               	movf	___lmul@multiplicand+2,w
 29434  3641  3DA2               	addwfc	___lmul@product+2,f
 29435  3642  0878               	movf	___lmul@multiplicand+3,w
 29436  3643  3DA3               	addwfc	___lmul@product+3,f
 29437  3644                     l8315:	
 29438  3644  3001               	movlw	1
 29439  3645                     u4695:	
 29440  3645  35F5               	lslf	___lmul@multiplicand,f
 29441  3646  0DF6               	rlf	___lmul@multiplicand+1,f
 29442  3647  0DF7               	rlf	___lmul@multiplicand+2,f
 29443  3648  0DF8               	rlf	___lmul@multiplicand+3,f
 29444  3649  0B89               	decfsz	9,f
 29445  364A  2E45               	goto	u4695
 29446  364B  3001               	movlw	1
 29447  364C                     u4705:	
 29448  364C  36F4               	lsrf	___lmul@multiplier+3,f
 29449  364D  0CF3               	rrf	___lmul@multiplier+2,f
 29450  364E  0CF2               	rrf	___lmul@multiplier+1,f
 29451  364F  0CF1               	rrf	___lmul@multiplier,f
 29452  3650  0B89               	decfsz	9,f
 29453  3651  2E4C               	goto	u4705
 29454  3652  0874               	movf	___lmul@multiplier+3,w
 29455  3653  0473               	iorwf	___lmul@multiplier+2,w
 29456  3654  0472               	iorwf	___lmul@multiplier+1,w
 29457  3655  0471               	iorwf	___lmul@multiplier,w
 29458  3656  1D03               	skipz
 29459  3657  2E39               	goto	l8311
 29460  3658  0020               	movlb	0	; select bank0
 29461  3659  0823               	movf	___lmul@product+3,w
 29462  365A  00F4               	movwf	?___lmul+3
 29463  365B  0822               	movf	___lmul@product+2,w
 29464  365C  00F3               	movwf	?___lmul+2
 29465  365D  0821               	movf	___lmul@product+1,w
 29466  365E  00F2               	movwf	?___lmul+1
 29467  365F  0820               	movf	___lmul@product,w
 29468  3660  00F1               	movwf	?___lmul
 29469  3661  0008               	return
 29470  3662                     __end_of___lmul:	
 29471                           
 29472                           	psect	text55
 29473  2F1F                     __ptext55:	
 29474 ;; *************** function ___almod *****************
 29475 ;; Defined at:
 29476 ;;		line 5 in file "/Applications/microchip/xc8/v1.42/sources/common/almod.c"
 29477 ;; Parameters:    Size  Location     Type
 29478 ;;  divisor         4   11[BANK0 ] long 
 29479 ;;  dividend        4   15[BANK0 ] long 
 29480 ;; Auto vars:     Size  Location     Type
 29481 ;;  sign            1   11[COMMON] unsigned char 
 29482 ;;  counter         1   10[COMMON] unsigned char 
 29483 ;; Return value:  Size  Location     Type
 29484 ;;                  4   11[BANK0 ] long 
 29485 ;; Registers used:
 29486 ;;		wreg, status,2, status,0
 29487 ;; Tracked objects:
 29488 ;;		On entry : 0/0
 29489 ;;		On exit  : 0/0
 29490 ;;		Unchanged: 0/0
 29491 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 29492 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29493 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29494 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29495 ;;      Totals:         3       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29496 ;;Total ram usage:       11 bytes
 29497 ;; Hardware stack levels used:    1
 29498 ;; Hardware stack levels required when called:    4
 29499 ;; This function calls:
 29500 ;;		Nothing
 29501 ;; This function is called by:
 29502 ;;		_led_rand
 29503 ;; This function uses a non-reentrant model
 29504 ;;
 29505                           
 29506                           
 29507                           ;psect for function ___almod
 29508  2F1F                     ___almod:	
 29509                           
 29510                           ;incstack = 0
 29511                           ; Regs used in ___almod: [wreg+status,2+status,0]
 29512  2F1F  01FB               	clrf	___almod@sign
 29513  2F20  0020               	movlb	0	; select bank0
 29514  2F21  1FB2               	btfss	___almod@dividend+3,7
 29515  2F22  2F30               	goto	l1780
 29516  2F23  09AF               	comf	___almod@dividend,f
 29517  2F24  09B0               	comf	___almod@dividend+1,f
 29518  2F25  09B1               	comf	___almod@dividend+2,f
 29519  2F26  09B2               	comf	___almod@dividend+3,f
 29520  2F27  0AAF               	incf	___almod@dividend,f
 29521  2F28  1903               	skipnz
 29522  2F29  0AB0               	incf	___almod@dividend+1,f
 29523  2F2A  1903               	skipnz
 29524  2F2B  0AB1               	incf	___almod@dividend+2,f
 29525  2F2C  1903               	skipnz
 29526  2F2D  0AB2               	incf	___almod@dividend+3,f
 29527  2F2E  01FB               	clrf	___almod@sign
 29528  2F2F  0AFB               	incf	___almod@sign,f
 29529  2F30                     l1780:	
 29530  2F30  1FAE               	btfss	___almod@divisor+3,7
 29531  2F31  2F3D               	goto	l8363
 29532  2F32  09AB               	comf	___almod@divisor,f
 29533  2F33  09AC               	comf	___almod@divisor+1,f
 29534  2F34  09AD               	comf	___almod@divisor+2,f
 29535  2F35  09AE               	comf	___almod@divisor+3,f
 29536  2F36  0AAB               	incf	___almod@divisor,f
 29537  2F37  1903               	skipnz
 29538  2F38  0AAC               	incf	___almod@divisor+1,f
 29539  2F39  1903               	skipnz
 29540  2F3A  0AAD               	incf	___almod@divisor+2,f
 29541  2F3B  1903               	skipnz
 29542  2F3C  0AAE               	incf	___almod@divisor+3,f
 29543  2F3D                     l8363:	
 29544  2F3D  082E               	movf	___almod@divisor+3,w
 29545  2F3E  042D               	iorwf	___almod@divisor+2,w
 29546  2F3F  042C               	iorwf	___almod@divisor+1,w
 29547  2F40  042B               	iorwf	___almod@divisor,w
 29548  2F41  1903               	skipnz
 29549  2F42  2F76               	goto	l8379
 29550  2F43  01FA               	clrf	___almod@counter
 29551  2F44  0AFA               	incf	___almod@counter,f
 29552  2F45                     l8369:	
 29553  2F45  1BAE               	btfsc	___almod@divisor+3,7
 29554  2F46  2F53               	goto	l8371
 29555  2F47  3001               	movlw	1
 29556  2F48                     u4785:	
 29557  2F48  35AB               	lslf	___almod@divisor,f
 29558  2F49  0DAC               	rlf	___almod@divisor+1,f
 29559  2F4A  0DAD               	rlf	___almod@divisor+2,f
 29560  2F4B  0DAE               	rlf	___almod@divisor+3,f
 29561  2F4C  0B89               	decfsz	9,f
 29562  2F4D  2F48               	goto	u4785
 29563  2F4E  3001               	movlw	1
 29564  2F4F  00F9               	movwf	??___almod
 29565  2F50  0879               	movf	??___almod,w
 29566  2F51  07FA               	addwf	___almod@counter,f
 29567  2F52  2F45               	goto	l8369
 29568  2F53                     l8371:	
 29569  2F53  082E               	movf	___almod@divisor+3,w
 29570  2F54  0232               	subwf	___almod@dividend+3,w
 29571  2F55  1D03               	skipz
 29572  2F56  2F61               	goto	u4805
 29573  2F57  082D               	movf	___almod@divisor+2,w
 29574  2F58  0231               	subwf	___almod@dividend+2,w
 29575  2F59  1D03               	skipz
 29576  2F5A  2F61               	goto	u4805
 29577  2F5B  082C               	movf	___almod@divisor+1,w
 29578  2F5C  0230               	subwf	___almod@dividend+1,w
 29579  2F5D  1D03               	skipz
 29580  2F5E  2F61               	goto	u4805
 29581  2F5F  082B               	movf	___almod@divisor,w
 29582  2F60  022F               	subwf	___almod@dividend,w
 29583  2F61                     u4805:	
 29584  2F61  1C03               	skipc
 29585  2F62  2F6B               	goto	l8375
 29586  2F63  082B               	movf	___almod@divisor,w
 29587  2F64  02AF               	subwf	___almod@dividend,f
 29588  2F65  082C               	movf	___almod@divisor+1,w
 29589  2F66  3BB0               	subwfb	___almod@dividend+1,f
 29590  2F67  082D               	movf	___almod@divisor+2,w
 29591  2F68  3BB1               	subwfb	___almod@dividend+2,f
 29592  2F69  082E               	movf	___almod@divisor+3,w
 29593  2F6A  3BB2               	subwfb	___almod@dividend+3,f
 29594  2F6B                     l8375:	
 29595  2F6B  3001               	movlw	1
 29596  2F6C                     u4815:	
 29597  2F6C  36AE               	lsrf	___almod@divisor+3,f
 29598  2F6D  0CAD               	rrf	___almod@divisor+2,f
 29599  2F6E  0CAC               	rrf	___almod@divisor+1,f
 29600  2F6F  0CAB               	rrf	___almod@divisor,f
 29601  2F70  0B89               	decfsz	9,f
 29602  2F71  2F6C               	goto	u4815
 29603  2F72  3001               	movlw	1
 29604  2F73  02FA               	subwf	___almod@counter,f
 29605  2F74  1D03               	btfss	3,2
 29606  2F75  2F53               	goto	l8371
 29607  2F76                     l8379:	
 29608  2F76  087B               	movf	___almod@sign,w
 29609  2F77  1903               	btfsc	3,2
 29610  2F78  2F84               	goto	l8383
 29611  2F79  09AF               	comf	___almod@dividend,f
 29612  2F7A  09B0               	comf	___almod@dividend+1,f
 29613  2F7B  09B1               	comf	___almod@dividend+2,f
 29614  2F7C  09B2               	comf	___almod@dividend+3,f
 29615  2F7D  0AAF               	incf	___almod@dividend,f
 29616  2F7E  1903               	skipnz
 29617  2F7F  0AB0               	incf	___almod@dividend+1,f
 29618  2F80  1903               	skipnz
 29619  2F81  0AB1               	incf	___almod@dividend+2,f
 29620  2F82  1903               	skipnz
 29621  2F83  0AB2               	incf	___almod@dividend+3,f
 29622  2F84                     l8383:	
 29623  2F84  0832               	movf	___almod@dividend+3,w
 29624  2F85  00AE               	movwf	?___almod+3
 29625  2F86  0831               	movf	___almod@dividend+2,w
 29626  2F87  00AD               	movwf	?___almod+2
 29627  2F88  0830               	movf	___almod@dividend+1,w
 29628  2F89  00AC               	movwf	?___almod+1
 29629  2F8A  082F               	movf	___almod@dividend,w
 29630  2F8B  00AB               	movwf	?___almod
 29631  2F8C  0008               	return
 29632  2F8D                     __end_of___almod:	
 29633                           
 29634                           	psect	text56
 29635  377E                     __ptext56:	
 29636 ;; *************** function _led_curtain *****************
 29637 ;; Defined at:
 29638 ;;		line 169 in file "main.c"
 29639 ;; Parameters:    Size  Location     Type
 29640 ;;  counter         2   16[BANK0 ] unsigned int 
 29641 ;; Auto vars:     Size  Location     Type
 29642 ;;  size            2   22[BANK0 ] unsigned int 
 29643 ;;  leds            2   20[BANK0 ] unsigned int 
 29644 ;; Return value:  Size  Location     Type
 29645 ;;                  1    wreg      void 
 29646 ;; Registers used:
 29647 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 29648 ;; Tracked objects:
 29649 ;;		On entry : 0/0
 29650 ;;		On exit  : 0/0
 29651 ;;		Unchanged: 0/0
 29652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 29653 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29654 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29655 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29656 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29657 ;;Total ram usage:        8 bytes
 29658 ;; Hardware stack levels used:    1
 29659 ;; Hardware stack levels required when called:    9
 29660 ;; This function calls:
 29661 ;;		___lwmod
 29662 ;;		_nullifyBadge_userLedsSet
 29663 ;; This function is called by:
 29664 ;;		_flashy_Main
 29665 ;;		_matrix_Main
 29666 ;; This function uses a non-reentrant model
 29667 ;;
 29668                           
 29669                           
 29670                           ;psect for function _led_curtain
 29671  377E                     _led_curtain:	
 29672                           
 29673                           ;main.c: 170: u16 size = sizeof(curtain_leds) / sizeof(curtain_leds[0]);
 29674                           
 29675                           ;incstack = 0
 29676                           ; Regs used in _led_curtain: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 29677  377E  300E               	movlw	14
 29678  377F  0020               	movlb	0	; select bank0
 29679  3780  00B6               	movwf	led_curtain@size
 29680  3781  3000               	movlw	0
 29681  3782  00B7               	movwf	led_curtain@size+1
 29682                           
 29683                           ;main.c: 171: u16 leds = curtain_leds[counter % size];
 29684  3783  0837               	movf	led_curtain@size+1,w
 29685  3784  00AC               	movwf	___lwmod@divisor+1
 29686  3785  0836               	movf	led_curtain@size,w
 29687  3786  00AB               	movwf	___lwmod@divisor
 29688  3787  0831               	movf	led_curtain@counter+1,w
 29689  3788  00AE               	movwf	___lwmod@dividend+1
 29690  3789  0830               	movf	led_curtain@counter,w
 29691  378A  00AD               	movwf	___lwmod@dividend
 29692  378B  31B5  25A3  31B7   	fcall	___lwmod
 29693  378E  0020               	movlb	0	; select bank0
 29694  378F  082B               	movf	?___lwmod,w
 29695  3790  0709               	addwf	9,w
 29696  3791  3E3C               	addlw	(low (_curtain_leds| (0+1024)))& (0+255)
 29697  3792  0086               	movwf	6
 29698  3793  3004               	movlw	4	; select bank8/9
 29699  3794  0087               	movwf	7
 29700  3795  3F40               	moviw [0]fsr1
 29701  3796  00B4               	movwf	led_curtain@leds
 29702  3797  3F41               	moviw [1]fsr1
 29703  3798  00B5               	movwf	led_curtain@leds+1
 29704                           
 29705                           ;main.c: 173: size = sizeof(curtain_leds_inverse) / sizeof(curtain_leds_inverse[0]);
 29706  3799  300E               	movlw	14
 29707  379A  00B6               	movwf	led_curtain@size
 29708  379B  3000               	movlw	0
 29709  379C  00B7               	movwf	led_curtain@size+1
 29710                           
 29711                           ;main.c: 174: leds |= curtain_leds_inverse[counter % size];
 29712  379D  0837               	movf	led_curtain@size+1,w
 29713  379E  00AC               	movwf	___lwmod@divisor+1
 29714  379F  0836               	movf	led_curtain@size,w
 29715  37A0  00AB               	movwf	___lwmod@divisor
 29716  37A1  0831               	movf	led_curtain@counter+1,w
 29717  37A2  00AE               	movwf	___lwmod@dividend+1
 29718  37A3  0830               	movf	led_curtain@counter,w
 29719  37A4  00AD               	movwf	___lwmod@dividend
 29720  37A5  31B5  25A3  31B7   	fcall	___lwmod
 29721  37A8  0020               	movlb	0	; select bank0
 29722  37A9  082B               	movf	?___lwmod,w
 29723  37AA  0709               	addwf	9,w
 29724  37AB  3E20               	addlw	(low (_curtain_leds_inverse| (0+1024)))& (0+255)
 29725  37AC  0086               	movwf	6
 29726  37AD  3004               	movlw	4	; select bank8/9
 29727  37AE  0087               	movwf	7
 29728  37AF  3F40               	moviw [0]fsr1
 29729  37B0  00B2               	movwf	??_led_curtain
 29730  37B1  3F41               	moviw [1]fsr1
 29731  37B2  00B3               	movwf	??_led_curtain+1
 29732  37B3  0832               	movf	??_led_curtain,w
 29733  37B4  04B4               	iorwf	led_curtain@leds,f
 29734  37B5  0833               	movf	??_led_curtain+1,w
 29735  37B6  04B5               	iorwf	led_curtain@leds+1,f
 29736                           
 29737                           ;main.c: 176: nullifyBadge_userLedsSet(&badge_inst, leds);
 29738  37B7  0835               	movf	led_curtain@leds+1,w
 29739  37B8  00AE               	movwf	nullifyBadge_userLedsSet@userLedData+1
 29740  37B9  0834               	movf	led_curtain@leds,w
 29741  37BA  00AD               	movwf	nullifyBadge_userLedsSet@userLedData
 29742  37BB  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 29743  37BC  31B2  22F9         	fcall	_nullifyBadge_userLedsSet
 29744  37BE  0008               	return
 29745  37BF                     __end_of_led_curtain:	
 29746                           
 29747                           	psect	text57
 29748  3203                     __ptext57:	
 29749 ;; *************** function _led_circle *****************
 29750 ;; Defined at:
 29751 ;;		line 188 in file "main.c"
 29752 ;; Parameters:    Size  Location     Type
 29753 ;;  count           2   16[BANK0 ] unsigned int 
 29754 ;; Auto vars:     Size  Location     Type
 29755 ;;		None
 29756 ;; Return value:  Size  Location     Type
 29757 ;;                  1    wreg      void 
 29758 ;; Registers used:
 29759 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 29760 ;; Tracked objects:
 29761 ;;		On entry : 0/0
 29762 ;;		On exit  : 0/0
 29763 ;;		Unchanged: 0/0
 29764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 29765 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29766 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29767 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29768 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29769 ;;Total ram usage:        2 bytes
 29770 ;; Hardware stack levels used:    1
 29771 ;; Hardware stack levels required when called:    9
 29772 ;; This function calls:
 29773 ;;		_nullifyBadge_userLedsSet
 29774 ;; This function is called by:
 29775 ;;		_flashy_Main
 29776 ;;		_slot_Running_Animation
 29777 ;; This function uses a non-reentrant model
 29778 ;;
 29779                           
 29780                           
 29781                           ;psect for function _led_circle
 29782  3203                     _led_circle:	
 29783                           
 29784                           ;main.c: 190: nullifyBadge_userLedsSet(&badge_inst,count);
 29785                           
 29786                           ;incstack = 0
 29787                           ; Regs used in _led_circle: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 29788  3203  0020               	movlb	0	; select bank0
 29789  3204  0831               	movf	led_circle@count+1,w
 29790  3205  00AE               	movwf	nullifyBadge_userLedsSet@userLedData+1
 29791  3206  0830               	movf	led_circle@count,w
 29792  3207  00AD               	movwf	nullifyBadge_userLedsSet@userLedData
 29793  3208  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 29794  3209  31B2  22F9         	fcall	_nullifyBadge_userLedsSet
 29795  320B  0008               	return
 29796  320C                     __end_of_led_circle:	
 29797                           
 29798                           	psect	text58
 29799  2EBA                     __ptext58:	
 29800 ;; *************** function _led_Parody *****************
 29801 ;; Defined at:
 29802 ;;		line 203 in file "main.c"
 29803 ;; Parameters:    Size  Location     Type
 29804 ;;  count           2   16[BANK0 ] unsigned int 
 29805 ;; Auto vars:     Size  Location     Type
 29806 ;;  size            2   22[BANK0 ] unsigned int 
 29807 ;;  leds            2   20[BANK0 ] unsigned int 
 29808 ;; Return value:  Size  Location     Type
 29809 ;;                  1    wreg      void 
 29810 ;; Registers used:
 29811 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 29812 ;; Tracked objects:
 29813 ;;		On entry : 0/0
 29814 ;;		On exit  : 0/0
 29815 ;;		Unchanged: 0/0
 29816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 29817 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29818 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29819 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29820 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29821 ;;Total ram usage:        8 bytes
 29822 ;; Hardware stack levels used:    1
 29823 ;; Hardware stack levels required when called:    9
 29824 ;; This function calls:
 29825 ;;		___lwmod
 29826 ;;		_nullifyBadge_userLedsSet
 29827 ;; This function is called by:
 29828 ;;		_flashy_Main
 29829 ;;		_matrix_Main
 29830 ;; This function uses a non-reentrant model
 29831 ;;
 29832                           
 29833                           
 29834                           ;psect for function _led_Parody
 29835  2EBA                     _led_Parody:	
 29836                           
 29837                           ;main.c: 204: u16 size;
 29838                           ;main.c: 205: u16 leds;
 29839                           ;main.c: 207: if (count % 30 == 0){
 29840                           
 29841                           ;incstack = 0
 29842                           ; Regs used in _led_Parody: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 29843  2EBA  301E               	movlw	30
 29844  2EBB  0020               	movlb	0	; select bank0
 29845  2EBC  00AB               	movwf	___lwmod@divisor
 29846  2EBD  3000               	movlw	0
 29847  2EBE  00AC               	movwf	___lwmod@divisor+1
 29848  2EBF  0831               	movf	led_Parody@count+1,w
 29849  2EC0  00AE               	movwf	___lwmod@dividend+1
 29850  2EC1  0830               	movf	led_Parody@count,w
 29851  2EC2  00AD               	movwf	___lwmod@dividend
 29852  2EC3  31B5  25A3  31AE   	fcall	___lwmod
 29853  2EC6  0020               	movlb	0	; select bank0
 29854  2EC7  082B               	movf	?___lwmod,w
 29855  2EC8  042C               	iorwf	?___lwmod+1,w
 29856  2EC9  1D03               	btfss	3,2
 29857  2ECA  2ED0               	goto	l625
 29858                           
 29859                           ;main.c: 208: oddeven ^= 1 ;
 29860  2ECB  3001               	movlw	1
 29861  2ECC  0021               	movlb	1	; select bank1
 29862  2ECD  06B8               	xorwf	_oddeven^(0+128),f
 29863  2ECE  3000               	movlw	0
 29864  2ECF  06B9               	xorwf	(_oddeven+1)^(0+128),f
 29865  2ED0                     l625:	
 29866                           
 29867                           ;main.c: 209: }
 29868                           ;main.c: 211: if(count %2 == oddeven){
 29869  2ED0  3001               	movlw	1
 29870  2ED1  0020               	movlb	0	; select bank0
 29871  2ED2  0530               	andwf	led_Parody@count,w
 29872  2ED3  00B2               	movwf	??_led_Parody
 29873  2ED4  3000               	movlw	0
 29874  2ED5  0531               	andwf	led_Parody@count+1,w
 29875  2ED6  00B3               	movwf	??_led_Parody+1
 29876  2ED7  0021               	movlb	1	; select bank1
 29877  2ED8  0839               	movf	(_oddeven+1)^(0+128),w
 29878  2ED9  0020               	movlb	0	; select bank0
 29879  2EDA  0633               	xorwf	??_led_Parody+1,w
 29880  2EDB  1D03               	skipz
 29881  2EDC  2EE1               	goto	u5155
 29882  2EDD  0021               	movlb	1	; select bank1
 29883  2EDE  0838               	movf	_oddeven^(0+128),w
 29884  2EDF  0020               	movlb	0	; select bank0
 29885  2EE0  0632               	xorwf	??_led_Parody,w
 29886  2EE1                     u5155:	
 29887  2EE1  1D03               	skipz
 29888  2EE2  2EFD               	goto	l8583
 29889                           
 29890                           ;main.c: 213: size = sizeof(roundabout_leds) / sizeof(roundabout_leds[0]);
 29891  2EE3  300E               	movlw	14
 29892  2EE4  00B6               	movwf	led_Parody@size
 29893  2EE5  3000               	movlw	0
 29894  2EE6  00B7               	movwf	led_Parody@size+1
 29895                           
 29896                           ;main.c: 214: leds = roundabout_leds[count % size];
 29897  2EE7  0837               	movf	led_Parody@size+1,w
 29898  2EE8  00AC               	movwf	___lwmod@divisor+1
 29899  2EE9  0836               	movf	led_Parody@size,w
 29900  2EEA  00AB               	movwf	___lwmod@divisor
 29901  2EEB  0831               	movf	led_Parody@count+1,w
 29902  2EEC  00AE               	movwf	___lwmod@dividend+1
 29903  2EED  0830               	movf	led_Parody@count,w
 29904  2EEE  00AD               	movwf	___lwmod@dividend
 29905  2EEF  31B5  25A3  31AE   	fcall	___lwmod
 29906  2EF2  0020               	movlb	0	; select bank0
 29907  2EF3  082B               	movf	?___lwmod,w
 29908  2EF4  0709               	addwf	9,w
 29909  2EF5  3EBC               	addlw	(low (_roundabout_leds| (0+768)))& (0+255)
 29910  2EF6  0086               	movwf	6
 29911  2EF7  3003               	movlw	3	; select bank7/8
 29912  2EF8  0087               	movwf	7
 29913  2EF9  3F40               	moviw [0]fsr1
 29914  2EFA  00B4               	movwf	led_Parody@leds
 29915  2EFB  3F41               	moviw [1]fsr1
 29916  2EFC  2F16               	goto	L14
 29917  2EFD                     l8583:	
 29918                           ;main.c: 215: }
 29919                           
 29920                           
 29921                           ;main.c: 216: else{
 29922                           ;main.c: 217: size = sizeof(roundabout_leds_inverse) / sizeof(roundabout_leds_inverse[0]
      +                          );
 29923  2EFD  300E               	movlw	14
 29924  2EFE  00B6               	movwf	led_Parody@size
 29925  2EFF  3000               	movlw	0
 29926  2F00  00B7               	movwf	led_Parody@size+1
 29927                           
 29928                           ;main.c: 218: leds = roundabout_leds_inverse[count % size];
 29929  2F01  0837               	movf	led_Parody@size+1,w
 29930  2F02  00AC               	movwf	___lwmod@divisor+1
 29931  2F03  0836               	movf	led_Parody@size,w
 29932  2F04  00AB               	movwf	___lwmod@divisor
 29933  2F05  0831               	movf	led_Parody@count+1,w
 29934  2F06  00AE               	movwf	___lwmod@dividend+1
 29935  2F07  0830               	movf	led_Parody@count,w
 29936  2F08  00AD               	movwf	___lwmod@dividend
 29937  2F09  31B5  25A3  31AE   	fcall	___lwmod
 29938  2F0C  0020               	movlb	0	; select bank0
 29939  2F0D  082B               	movf	?___lwmod,w
 29940  2F0E  0709               	addwf	9,w
 29941  2F0F  3EA0               	addlw	(low (_roundabout_leds_inverse| (0+768)))& (0+255)
 29942  2F10  0086               	movwf	6
 29943  2F11  3003               	movlw	3	; select bank7/8
 29944  2F12  0087               	movwf	7
 29945  2F13  3F40               	moviw [0]fsr1
 29946  2F14  00B4               	movwf	led_Parody@leds
 29947  2F15  3F41               	moviw [1]fsr1
 29948  2F16                     L14:	
 29949  2F16  00B5               	movwf	led_Parody@leds+1
 29950                           
 29951                           ;main.c: 219: }
 29952                           ;main.c: 220: nullifyBadge_userLedsSet(&badge_inst, leds);
 29953  2F17  0835               	movf	led_Parody@leds+1,w
 29954  2F18  00AE               	movwf	nullifyBadge_userLedsSet@userLedData+1
 29955  2F19  0834               	movf	led_Parody@leds,w
 29956  2F1A  00AD               	movwf	nullifyBadge_userLedsSet@userLedData
 29957  2F1B  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 29958  2F1C  31B2  22F9         	fcall	_nullifyBadge_userLedsSet
 29959  2F1E  0008               	return
 29960  2F1F                     __end_of_led_Parody:	
 29961                           
 29962                           	psect	text59
 29963  32F9                     __ptext59:	
 29964 ;; *************** function _nullifyBadge_userLedsSet *****************
 29965 ;; Defined at:
 29966 ;;		line 164 in file "nullifyBadge.c"
 29967 ;; Parameters:    Size  Location     Type
 29968 ;;  badge           1    wreg     PTR struct t_nullifyBadg
 29969 ;;		 -> badge_inst(18), 
 29970 ;;  userLedData     2   13[BANK0 ] unsigned int 
 29971 ;; Auto vars:     Size  Location     Type
 29972 ;;  badge           1   15[BANK0 ] PTR struct t_nullifyBadg
 29973 ;;		 -> badge_inst(18), 
 29974 ;; Return value:  Size  Location     Type
 29975 ;;                  1    wreg      void 
 29976 ;; Registers used:
 29977 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 29978 ;; Tracked objects:
 29979 ;;		On entry : 0/0
 29980 ;;		On exit  : 0/0
 29981 ;;		Unchanged: 0/0
 29982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 29983 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29984 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29985 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29986 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 29987 ;;Total ram usage:        3 bytes
 29988 ;; Hardware stack levels used:    1
 29989 ;; Hardware stack levels required when called:    8
 29990 ;; This function calls:
 29991 ;;		_displayL2_SetUserLeds
 29992 ;; This function is called by:
 29993 ;;		_led_roundabout
 29994 ;;		_led_curtain
 29995 ;;		_led_rand
 29996 ;;		_led_circle
 29997 ;;		_let_alternate
 29998 ;;		_led_Parody
 29999 ;;		_menu_display_option
 30000 ;;		_flashy_Main
 30001 ;;		_locked_Main
 30002 ;; This function uses a non-reentrant model
 30003 ;;
 30004                           
 30005                           
 30006                           ;psect for function _nullifyBadge_userLedsSet
 30007  32F9                     _nullifyBadge_userLedsSet:	
 30008                           
 30009                           ;incstack = 0
 30010                           ; Regs used in _nullifyBadge_userLedsSet: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 30011                           ;nullifyBadge_userLedsSet@badge stored from wreg
 30012  32F9  0020               	movlb	0	; select bank0
 30013  32FA  00AF               	movwf	nullifyBadge_userLedsSet@badge
 30014                           
 30015                           ;nullifyBadge.c: 165: if (badge_locked) {
 30016  32FB  0021               	movlb	1	; select bank1
 30017  32FC  0844               	movf	_badge_locked^(0+128),w
 30018  32FD  1903               	btfsc	3,2
 30019  32FE  2B01               	goto	l8343
 30020                           
 30021                           ;nullifyBadge.c: 166: userLedData |= 1024;
 30022  32FF  0020               	movlb	0	; select bank0
 30023  3300  152E               	bsf	nullifyBadge_userLedsSet@userLedData+1,2
 30024  3301                     l8343:	
 30025                           
 30026                           ;nullifyBadge.c: 167: }
 30027                           ;nullifyBadge.c: 168: displayL2_SetUserLeds(&badge->display, userLedData);
 30028  3301  0020               	movlb	0	; select bank0
 30029  3302  082E               	movf	nullifyBadge_userLedsSet@userLedData+1,w
 30030  3303  00AC               	movwf	displayL2_SetUserLeds@userLedData+1
 30031  3304  082D               	movf	nullifyBadge_userLedsSet@userLedData,w
 30032  3305  00AB               	movwf	displayL2_SetUserLeds@userLedData
 30033  3306  082F               	movf	nullifyBadge_userLedsSet@badge,w
 30034  3307  31B4  2484         	fcall	_displayL2_SetUserLeds
 30035  3309  0008               	return
 30036  330A                     __end_of_nullifyBadge_userLedsSet:	
 30037                           
 30038                           	psect	text60
 30039  3484                     __ptext60:	
 30040 ;; *************** function _displayL2_SetUserLeds *****************
 30041 ;; Defined at:
 30042 ;;		line 88 in file "nullifyBadge_displayL2.c"
 30043 ;; Parameters:    Size  Location     Type
 30044 ;;  display         1    wreg     PTR struct t_nullifyDisp
 30045 ;;		 -> badge_inst(18), 
 30046 ;;  userLedData     2   11[BANK0 ] unsigned int 
 30047 ;; Auto vars:     Size  Location     Type
 30048 ;;  display         1   11[COMMON] PTR struct t_nullifyDisp
 30049 ;;		 -> badge_inst(18), 
 30050 ;; Return value:  Size  Location     Type
 30051 ;;                  1    wreg      void 
 30052 ;; Registers used:
 30053 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 30054 ;; Tracked objects:
 30055 ;;		On entry : 0/0
 30056 ;;		On exit  : 0/0
 30057 ;;		Unchanged: 0/0
 30058 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 30059 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30060 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30061 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30062 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30063 ;;Total ram usage:        3 bytes
 30064 ;; Hardware stack levels used:    1
 30065 ;; Hardware stack levels required when called:    7
 30066 ;; This function calls:
 30067 ;;		_displayL1_SetUserLed
 30068 ;;		_displayL1_Update
 30069 ;; This function is called by:
 30070 ;;		_nullifyBadge_userLedsSet
 30071 ;;		_nullifyBadge_userLedsSetForce
 30072 ;; This function uses a non-reentrant model
 30073 ;;
 30074                           
 30075                           
 30076                           ;psect for function _displayL2_SetUserLeds
 30077  3484                     _displayL2_SetUserLeds:	
 30078                           
 30079                           ;incstack = 0
 30080                           ; Regs used in _displayL2_SetUserLeds: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 30081                           ;displayL2_SetUserLeds@display stored from wreg
 30082  3484  00FB               	movwf	displayL2_SetUserLeds@display
 30083                           
 30084                           ;nullifyBadge_displayL2.c: 89: display->ledVect = userLedData;
 30085  3485  087B               	movf	displayL2_SetUserLeds@display,w
 30086  3486  3E05               	addlw	5
 30087  3487  0086               	movwf	6
 30088  3488  3001               	movlw	1	; select bank2/3
 30089  3489  0087               	movwf	7
 30090  348A  0020               	movlb	0	; select bank0
 30091  348B  082B               	movf	displayL2_SetUserLeds@userLedData,w
 30092  348C  3FC0               	movwi [0]fsr1
 30093  348D  082C               	movf	displayL2_SetUserLeds@userLedData+1,w
 30094  348E  3FC1               	movwi [1]fsr1
 30095                           
 30096                           ;nullifyBadge_displayL2.c: 90: displayL1_SetUserLed(&display->display_l1, display->ledVe
      +                          ct);
 30097  348F  087B               	movf	displayL2_SetUserLeds@display,w
 30098  3490  3E05               	addlw	5
 30099  3491  0086               	movwf	6
 30100  3492  3001               	movlw	1	; select bank2/3
 30101  3493  0087               	movwf	7
 30102  3494  3F40               	moviw [0]fsr1
 30103  3495  00F1               	movwf	displayL1_SetUserLed@userLedVect
 30104  3496  3F41               	moviw [1]fsr1
 30105  3497  00F2               	movwf	displayL1_SetUserLed@userLedVect+1
 30106  3498  087B               	movf	displayL2_SetUserLeds@display,w
 30107  3499  3E07               	addlw	7
 30108  349A  31B3  231B  31B4   	fcall	_displayL1_SetUserLed
 30109                           
 30110                           ;nullifyBadge_displayL2.c: 91: displayL1_Update(&display->display_l1);
 30111  349D  087B               	movf	displayL2_SetUserLeds@display,w
 30112  349E  3E07               	addlw	7
 30113  349F  31B2  22E8         	fcall	_displayL1_Update
 30114  34A1  0008               	return
 30115  34A2                     __end_of_displayL2_SetUserLeds:	
 30116                           
 30117                           	psect	text61
 30118  331B                     __ptext61:	
 30119 ;; *************** function _displayL1_SetUserLed *****************
 30120 ;; Defined at:
 30121 ;;		line 71 in file "nullifyBadge_displayL1.c"
 30122 ;; Parameters:    Size  Location     Type
 30123 ;;  display         1    wreg     PTR struct t_nullifyDisp
 30124 ;;		 -> badge_inst(18), 
 30125 ;;  userLedVect     2    1[COMMON] unsigned int 
 30126 ;; Auto vars:     Size  Location     Type
 30127 ;;  display         1    4[COMMON] PTR struct t_nullifyDisp
 30128 ;;		 -> badge_inst(18), 
 30129 ;; Return value:  Size  Location     Type
 30130 ;;                  1    wreg      void 
 30131 ;; Registers used:
 30132 ;;		wreg, fsr1l, fsr1h, status,2
 30133 ;; Tracked objects:
 30134 ;;		On entry : 0/0
 30135 ;;		On exit  : 0/0
 30136 ;;		Unchanged: 0/0
 30137 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 30138 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30139 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30140 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30141 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30142 ;;Total ram usage:        4 bytes
 30143 ;; Hardware stack levels used:    1
 30144 ;; Hardware stack levels required when called:    4
 30145 ;; This function calls:
 30146 ;;		Nothing
 30147 ;; This function is called by:
 30148 ;;		_displayL2_SetUserLeds
 30149 ;;		_displayL2_ClrUserLeds
 30150 ;; This function uses a non-reentrant model
 30151 ;;
 30152                           
 30153                           
 30154                           ;psect for function _displayL1_SetUserLed
 30155  331B                     _displayL1_SetUserLed:	
 30156                           
 30157                           ;incstack = 0
 30158                           ; Regs used in _displayL1_SetUserLed: [wreg+fsr1l+fsr1h+status,2]
 30159                           ;displayL1_SetUserLed@display stored from wreg
 30160  331B  00F4               	movwf	displayL1_SetUserLed@display
 30161                           
 30162                           ;nullifyBadge_displayL1.c: 73: display->displayVect[0] = (u8) (userLedVect >> 8);
 30163  331C  0872               	movf	displayL1_SetUserLed@userLedVect+1,w
 30164  331D  00F3               	movwf	??_displayL1_SetUserLed
 30165  331E  0874               	movf	displayL1_SetUserLed@display,w
 30166  331F  0086               	movwf	6
 30167  3320  3001               	movlw	1	; select bank2/3
 30168  3321  0087               	movwf	7
 30169  3322  0873               	movf	??_displayL1_SetUserLed,w
 30170  3323  0081               	movwf	1
 30171                           
 30172                           ;nullifyBadge_displayL1.c: 74: display->displayVect[1] = (u8) (userLedVect & 0xFF);
 30173  3324  0871               	movf	displayL1_SetUserLed@userLedVect,w
 30174  3325  00F3               	movwf	??_displayL1_SetUserLed
 30175  3326  0A74               	incf	displayL1_SetUserLed@display,w
 30176  3327  0086               	movwf	6
 30177  3328  3001               	movlw	1	; select bank2/3
 30178  3329  0087               	movwf	7
 30179  332A  0873               	movf	??_displayL1_SetUserLed,w
 30180  332B  0081               	movwf	1
 30181  332C  0008               	return
 30182  332D                     __end_of_displayL1_SetUserLed:	
 30183                           
 30184                           	psect	text62
 30185  2D33                     __ptext62:	
 30186 ;; *************** function _flashy_display_option *****************
 30187 ;; Defined at:
 30188 ;;		line 104 in file "flashy_task.c"
 30189 ;; Parameters:    Size  Location     Type
 30190 ;;  data            2   44[BANK0 ] PTR struct t_flashy_task
 30191 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 30192 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 30193 ;; Auto vars:     Size  Location     Type
 30194 ;;		None
 30195 ;; Return value:  Size  Location     Type
 30196 ;;                  1    wreg      void 
 30197 ;; Registers used:
 30198 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 30199 ;; Tracked objects:
 30200 ;;		On entry : 0/0
 30201 ;;		On exit  : 0/0
 30202 ;;		Unchanged: 0/0
 30203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 30204 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30205 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30207 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30208 ;;Total ram usage:        2 bytes
 30209 ;; Hardware stack levels used:    1
 30210 ;; Hardware stack levels required when called:   10
 30211 ;; This function calls:
 30212 ;;		_marquee
 30213 ;;		_marquee_speedy
 30214 ;;		_nullifyBadge_segDisplayForceUpdate
 30215 ;;		_nullifyBadge_segDisplayPutStr
 30216 ;; This function is called by:
 30217 ;;		_flashy_Main
 30218 ;; This function uses a non-reentrant model
 30219 ;;
 30220                           
 30221                           
 30222                           ;psect for function _flashy_display_option
 30223  2D33                     _flashy_display_option:	
 30224                           
 30225                           ;flashy_task.c: 105: if (flashy_option_idx == 0){
 30226                           
 30227                           ;incstack = 0
 30228                           ; Regs used in _flashy_display_option: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 30229  2D33  0021               	movlb	1	; select bank1
 30230  2D34  0828               	movf	_flashy_option_idx^(0+128),w
 30231  2D35  0429               	iorwf	(_flashy_option_idx+1)^(0+128),w
 30232  2D36  1D03               	btfss	3,2
 30233  2D37  2D53               	goto	l8677
 30234                           
 30235                           ;flashy_task.c: 106: nullifyBadge_segDisplayPutStr(data->badge, flashy_option[flashy_opt
      +                          ion_idx]);
 30236  2D38  3528               	lslf	_flashy_option_idx^(0+128),w
 30237  2D39  3E20               	addlw	(low (_flashy_option| (0+1280)))& (0+255)
 30238  2D3A  0086               	movwf	6
 30239  2D3B  3005               	movlw	5	; select bank10/11
 30240  2D3C  0087               	movwf	7
 30241  2D3D  3F40               	moviw [0]fsr1
 30242  2D3E  0020               	movlb	0	; select bank0
 30243  2D3F  00B7               	movwf	nullifyBadge_segDisplayPutStr@str
 30244  2D40  3F41               	moviw [1]fsr1
 30245  2D41  00B8               	movwf	nullifyBadge_segDisplayPutStr@str+1
 30246  2D42  084C               	movf	flashy_display_option@data,w
 30247  2D43  0086               	movwf	6
 30248  2D44  084D               	movf	flashy_display_option@data+1,w
 30249  2D45  0087               	movwf	7
 30250  2D46  0801               	movf	1,w
 30251  2D47  31B2  2220  31AD   	fcall	_nullifyBadge_segDisplayPutStr
 30252                           
 30253                           ;flashy_task.c: 107: nullifyBadge_segDisplayForceUpdate(data->badge);
 30254  2D4A  0020               	movlb	0	; select bank0
 30255  2D4B  084C               	movf	flashy_display_option@data,w
 30256  2D4C  0086               	movwf	6
 30257  2D4D  084D               	movf	flashy_display_option@data+1,w
 30258  2D4E  0087               	movwf	7
 30259  2D4F  0801               	movf	1,w
 30260  2D50  31B1  21E4         	fcall	_nullifyBadge_segDisplayForceUpdate
 30261                           
 30262                           ;flashy_task.c: 108: }
 30263  2D52  0008               	return
 30264  2D53                     l8677:	
 30265                           
 30266                           ;flashy_task.c: 109: else {
 30267                           ;flashy_task.c: 110: if (data->display_state==FLASHY_STATE_DISPLAY ){
 30268  2D53  0020               	movlb	0	; select bank0
 30269  2D54  084C               	movf	flashy_display_option@data,w
 30270  2D55  0086               	movwf	6
 30271  2D56  084D               	movf	flashy_display_option@data+1,w
 30272  2D57  0087               	movwf	7
 30273  2D58  3146               	addfsr 1,6
 30274  2D59  0801               	movf	1,w
 30275  2D5A  1D03               	btfss	3,2
 30276  2D5B  2D7B               	goto	l8681
 30277                           
 30278                           ;flashy_task.c: 112: marquee_speedy(flashy_option[flashy_option_idx], data->noholdCount,
      +                           flashy_scroll_rate);
 30279  2D5C  0021               	movlb	1	; select bank1
 30280  2D5D  3528               	lslf	_flashy_option_idx^(0+128),w
 30281  2D5E  3E20               	addlw	(low (_flashy_option| (0+1280)))& (0+255)
 30282  2D5F  0086               	movwf	6
 30283  2D60  3005               	movlw	5	; select bank10/11
 30284  2D61  0087               	movwf	7
 30285  2D62  3F40               	moviw [0]fsr1
 30286  2D63  0020               	movlb	0	; select bank0
 30287  2D64  00BA               	movwf	marquee_speedy@string
 30288  2D65  3F41               	moviw [1]fsr1
 30289  2D66  00BB               	movwf	marquee_speedy@string+1
 30290  2D67  084C               	movf	flashy_display_option@data,w
 30291  2D68  0086               	movwf	6
 30292  2D69  084D               	movf	flashy_display_option@data+1,w
 30293  2D6A  0087               	movwf	7
 30294  2D6B  315C               	addfsr 1,28
 30295  2D6C  3F40               	moviw [0]fsr1
 30296  2D6D  00BC               	movwf	marquee_speedy@count
 30297  2D6E  3F41               	moviw [1]fsr1
 30298  2D6F  00BD               	movwf	marquee_speedy@count+1
 30299  2D70  0021               	movlb	1	; select bank1
 30300  2D71  082D               	movf	(_flashy_scroll_rate+1)^(0+128),w
 30301  2D72  0020               	movlb	0	; select bank0
 30302  2D73  00BF               	movwf	marquee_speedy@multiplier+1
 30303  2D74  0021               	movlb	1	; select bank1
 30304  2D75  082C               	movf	_flashy_scroll_rate^(0+128),w
 30305  2D76  0020               	movlb	0	; select bank0
 30306  2D77  00BE               	movwf	marquee_speedy@multiplier
 30307  2D78  31AF  278D         	fcall	_marquee_speedy
 30308                           
 30309                           ;flashy_task.c: 113: }
 30310  2D7A  0008               	return
 30311  2D7B                     l8681:	
 30312                           
 30313                           ;flashy_task.c: 114: else{
 30314                           ;flashy_task.c: 115: marquee(flashy_option[flashy_option_idx], data->noholdCount);
 30315  2D7B  0021               	movlb	1	; select bank1
 30316  2D7C  3528               	lslf	_flashy_option_idx^(0+128),w
 30317  2D7D  3E20               	addlw	(low (_flashy_option| (0+1280)))& (0+255)
 30318  2D7E  0086               	movwf	6
 30319  2D7F  3005               	movlw	5	; select bank10/11
 30320  2D80  0087               	movwf	7
 30321  2D81  3F40               	moviw [0]fsr1
 30322  2D82  0020               	movlb	0	; select bank0
 30323  2D83  00BA               	movwf	marquee@string
 30324  2D84  3F41               	moviw [1]fsr1
 30325  2D85  00BB               	movwf	marquee@string+1
 30326  2D86  084C               	movf	flashy_display_option@data,w
 30327  2D87  0086               	movwf	6
 30328  2D88  084D               	movf	flashy_display_option@data+1,w
 30329  2D89  0087               	movwf	7
 30330  2D8A  315C               	addfsr 1,28
 30331  2D8B  3F40               	moviw [0]fsr1
 30332  2D8C  00BC               	movwf	marquee@count
 30333  2D8D  3F41               	moviw [1]fsr1
 30334  2D8E  00BD               	movwf	marquee@count+1
 30335  2D8F  31A2  2215         	fcall	_marquee
 30336  2D91  0008               	return
 30337  2D92                     __end_of_flashy_display_option:	
 30338                           
 30339                           	psect	text63
 30340  2F8D                     __ptext63:	
 30341 ;; *************** function _marquee_speedy *****************
 30342 ;; Defined at:
 30343 ;;		line 133 in file "main.c"
 30344 ;; Parameters:    Size  Location     Type
 30345 ;;  string          2   26[BANK0 ] PTR unsigned char 
 30346 ;;		 -> STR_84(23), STR_83(27), STR_82(46), STR_81(8), 
 30347 ;;		 -> STR_80(7), STR_79(8), STR_78(6), STR_77(10), 
 30348 ;;		 -> STR_76(5), STR_75(7), STR_74(9), STR_73(7), 
 30349 ;;		 -> STR_72(7), STR_38(5), STR_37(43), STR_36(13), 
 30350 ;;		 -> STR_35(47), STR_34(17), STR_33(120), STR_32(34), 
 30351 ;;		 -> STR_31(16), STR_30(35), STR_29(15), STR_28(12), 
 30352 ;;		 -> STR_27(29), STR_26(19), STR_25(17), STR_24(40), 
 30353 ;;		 -> STR_23(27), STR_22(29), STR_21(30), STR_20(36), 
 30354 ;;		 -> STR_19(28), STR_18(22), STR_17(26), STR_16(21), 
 30355 ;;		 -> STR_15(19), STR_14(6), STR_13(8), STR_12(9), 
 30356 ;;		 -> STR_11(5), matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), 
 30357 ;;		 -> slot_TaskData(40), menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 30358 ;;  count           2   28[BANK0 ] unsigned int 
 30359 ;;  multiplier      2   30[BANK0 ] unsigned int 
 30360 ;; Auto vars:     Size  Location     Type
 30361 ;;  j               2   42[BANK0 ] unsigned int 
 30362 ;;  display_stri    5   33[BANK0 ] unsigned char [5]
 30363 ;;  string_lengt    2   40[BANK0 ] unsigned int 
 30364 ;;  i               2   38[BANK0 ] unsigned int 
 30365 ;; Return value:  Size  Location     Type
 30366 ;;                  1    wreg      void 
 30367 ;; Registers used:
 30368 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 30369 ;; Tracked objects:
 30370 ;;		On entry : 0/0
 30371 ;;		On exit  : 0/0
 30372 ;;		Unchanged: 0/0
 30373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 30374 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30375 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30376 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30377 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30378 ;;Total ram usage:       18 bytes
 30379 ;; Hardware stack levels used:    1
 30380 ;; Hardware stack levels required when called:    9
 30381 ;; This function calls:
 30382 ;;		___lwdiv
 30383 ;;		___lwmod
 30384 ;;		_nullifyBadge_segDisplayForceUpdate
 30385 ;;		_nullifyBadge_segDisplayPutStr
 30386 ;;		_strlen
 30387 ;; This function is called by:
 30388 ;;		_flashy_display_option
 30389 ;;		_slot_Main
 30390 ;;		_matrix_display_option
 30391 ;; This function uses a non-reentrant model
 30392 ;;
 30393                           
 30394                           
 30395                           ;psect for function _marquee_speedy
 30396  2F8D                     _marquee_speedy:	
 30397                           
 30398                           ;main.c: 134: u16 string_length = strlen((const char *) string);
 30399                           
 30400                           ;incstack = 0
 30401                           ; Regs used in _marquee_speedy: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 30402  2F8D  0020               	movlb	0	; select bank0
 30403  2F8E  083B               	movf	marquee_speedy@string+1,w
 30404  2F8F  00F2               	movwf	strlen@s+1
 30405  2F90  083A               	movf	marquee_speedy@string,w
 30406  2F91  00F1               	movwf	strlen@s
 30407  2F92  31B4  2466  31AF   	fcall	_strlen
 30408  2F95  0872               	movf	?_strlen+1,w
 30409  2F96  0020               	movlb	0	; select bank0
 30410  2F97  00C9               	movwf	marquee_speedy@string_length+1
 30411  2F98  0871               	movf	?_strlen,w
 30412  2F99  00C8               	movwf	marquee_speedy@string_length
 30413                           
 30414                           ;main.c: 135: char display_string[] = { ' ', ' ', ' ', ' ', '\0' };
 30415  2F9A  30C7               	movlw	low marquee_speedy@F14093
 30416  2F9B  0086               	movwf	6
 30417  2F9C  3000               	movlw	high marquee_speedy@F14093
 30418  2F9D  0087               	movwf	7
 30419  2F9E  3041               	movlw	low marquee_speedy@display_string
 30420  2F9F  0084               	movwf	4
 30421  2FA0  3000               	movlw	high marquee_speedy@display_string
 30422  2FA1  0085               	movwf	5
 30423  2FA2  3005               	movlw	5
 30424  2FA3  00C0               	movwf	??_marquee_speedy
 30425  2FA4                     u4970:	
 30426  2FA4  0016               	moviw fsr1++
 30427  2FA5  001A               	movwi fsr0++
 30428  2FA6  0BC0               	decfsz	??_marquee_speedy,f
 30429  2FA7  2FA4               	goto	u4970
 30430                           
 30431                           ;main.c: 136: u16 i = (count / multiplier) % string_length;
 30432  2FA8  0849               	movf	marquee_speedy@string_length+1,w
 30433  2FA9  00AC               	movwf	___lwmod@divisor+1
 30434  2FAA  0848               	movf	marquee_speedy@string_length,w
 30435  2FAB  00AB               	movwf	___lwmod@divisor
 30436  2FAC  083F               	movf	marquee_speedy@multiplier+1,w
 30437  2FAD  00F2               	movwf	___lwdiv@divisor+1
 30438  2FAE  083E               	movf	marquee_speedy@multiplier,w
 30439  2FAF  00F1               	movwf	___lwdiv@divisor
 30440  2FB0  083D               	movf	marquee_speedy@count+1,w
 30441  2FB1  00F4               	movwf	___lwdiv@dividend+1
 30442  2FB2  083C               	movf	marquee_speedy@count,w
 30443  2FB3  00F3               	movwf	___lwdiv@dividend
 30444  2FB4  31A8  2085  31AF   	fcall	___lwdiv
 30445  2FB7  0872               	movf	?___lwdiv+1,w
 30446  2FB8  0020               	movlb	0	; select bank0
 30447  2FB9  00AE               	movwf	___lwmod@dividend+1
 30448  2FBA  0871               	movf	?___lwdiv,w
 30449  2FBB  00AD               	movwf	___lwmod@dividend
 30450  2FBC  31B5  25A3  31AF   	fcall	___lwmod
 30451  2FBF  0020               	movlb	0	; select bank0
 30452  2FC0  082C               	movf	?___lwmod+1,w
 30453  2FC1  00C7               	movwf	marquee_speedy@i+1
 30454  2FC2  082B               	movf	?___lwmod,w
 30455  2FC3  00C6               	movwf	marquee_speedy@i
 30456                           
 30457                           ;main.c: 138: for (u16 j=0; j < 4; j++){
 30458  2FC4  01CA               	clrf	marquee_speedy@j
 30459  2FC5  01CB               	clrf	marquee_speedy@j+1
 30460  2FC6  3000               	movlw	0
 30461  2FC7  024B               	subwf	marquee_speedy@j+1,w
 30462  2FC8  3004               	movlw	4
 30463  2FC9  1903               	skipnz
 30464  2FCA  024A               	subwf	marquee_speedy@j,w
 30465  2FCB  1803               	btfsc	3,0
 30466  2FCC  2FF4               	goto	l8453
 30467  2FCD                     l8447:	
 30468                           
 30469                           ;main.c: 139: display_string[j] = string[(i + j) % string_length];
 30470  2FCD  0849               	movf	marquee_speedy@string_length+1,w
 30471  2FCE  00AC               	movwf	___lwmod@divisor+1
 30472  2FCF  0848               	movf	marquee_speedy@string_length,w
 30473  2FD0  00AB               	movwf	___lwmod@divisor
 30474  2FD1  084A               	movf	marquee_speedy@j,w
 30475  2FD2  0746               	addwf	marquee_speedy@i,w
 30476  2FD3  00AD               	movwf	___lwmod@dividend
 30477  2FD4  084B               	movf	marquee_speedy@j+1,w
 30478  2FD5  3D47               	addwfc	marquee_speedy@i+1,w
 30479  2FD6  00AE               	movwf	___lwmod@dividend+1
 30480  2FD7  31B5  25A3  31AF   	fcall	___lwmod
 30481  2FDA  0020               	movlb	0	; select bank0
 30482  2FDB  083A               	movf	marquee_speedy@string,w
 30483  2FDC  072B               	addwf	?___lwmod,w
 30484  2FDD  0084               	movwf	4
 30485  2FDE  083B               	movf	marquee_speedy@string+1,w
 30486  2FDF  3D2C               	addwfc	?___lwmod+1,w
 30487  2FE0  0085               	movwf	5
 30488  2FE1  0800               	movf	0,w	;code access
 30489  2FE2  00C0               	movwf	??_marquee_speedy
 30490  2FE3  084A               	movf	marquee_speedy@j,w
 30491  2FE4  3E41               	addlw	(low (marquee_speedy@display_string| 0))& (0+255)
 30492  2FE5  0086               	movwf	6
 30493  2FE6  0187               	clrf	7
 30494  2FE7  0840               	movf	??_marquee_speedy,w
 30495  2FE8  0081               	movwf	1
 30496  2FE9  3001               	movlw	1
 30497  2FEA  07CA               	addwf	marquee_speedy@j,f
 30498  2FEB  3000               	movlw	0
 30499  2FEC  3DCB               	addwfc	marquee_speedy@j+1,f
 30500  2FED  3000               	movlw	0
 30501  2FEE  024B               	subwf	marquee_speedy@j+1,w
 30502  2FEF  3004               	movlw	4
 30503  2FF0  1903               	skipnz
 30504  2FF1  024A               	subwf	marquee_speedy@j,w
 30505  2FF2  1C03               	skipc
 30506  2FF3  2FCD               	goto	l8447
 30507  2FF4                     l8453:	
 30508                           
 30509                           ;main.c: 140: }
 30510                           ;main.c: 141: nullifyBadge_segDisplayPutStr(&badge_inst, display_string);
 30511  2FF4  3041               	movlw	low marquee_speedy@display_string
 30512  2FF5  00B7               	movwf	nullifyBadge_segDisplayPutStr@str
 30513  2FF6  3000               	movlw	high marquee_speedy@display_string
 30514  2FF7  00B8               	movwf	nullifyBadge_segDisplayPutStr@str+1
 30515  2FF8  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 30516  2FF9  31B2  2220  31AF   	fcall	_nullifyBadge_segDisplayPutStr
 30517                           
 30518                           ;main.c: 142: nullifyBadge_segDisplayForceUpdate(&badge_inst);
 30519  2FFC  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 30520  2FFD  31B1  21E4         	fcall	_nullifyBadge_segDisplayForceUpdate
 30521  2FFF  0008               	return
 30522  3000                     __end_of_marquee_speedy:	
 30523                           
 30524                           	psect	text64
 30525  2215                     __ptext64:	
 30526 ;; *************** function _marquee *****************
 30527 ;; Defined at:
 30528 ;;		line 146 in file "main.c"
 30529 ;; Parameters:    Size  Location     Type
 30530 ;;  string          2   26[BANK0 ] PTR unsigned char 
 30531 ;;		 -> STR_44(5), STR_43(5), STR_42(11), STR_41(13), 
 30532 ;;		 -> STR_38(5), STR_37(43), STR_36(13), STR_35(47), 
 30533 ;;		 -> STR_34(17), STR_33(120), STR_32(34), STR_31(16), 
 30534 ;;		 -> STR_30(35), STR_29(15), STR_28(12), STR_27(29), 
 30535 ;;		 -> STR_26(19), STR_25(17), STR_24(40), STR_23(27), 
 30536 ;;		 -> STR_22(29), STR_21(30), STR_20(36), STR_19(28), 
 30537 ;;		 -> STR_18(22), STR_17(26), STR_16(21), STR_15(19), 
 30538 ;;		 -> STR_14(6), STR_13(8), STR_12(9), STR_11(5), 
 30539 ;;		 -> STR_10(18), STR_8(6), STR_7(8), STR_6(10), 
 30540 ;;		 -> STR_5(6), STR_4(5), matrix_TaskData(31), secret_TaskData(14), 
 30541 ;;		 -> locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), flashy_TaskData(30), 
 30542 ;;		 -> NULL(0), 
 30543 ;;  count           2   28[BANK0 ] unsigned int 
 30544 ;; Auto vars:     Size  Location     Type
 30545 ;;  j               2   42[BANK0 ] unsigned int 
 30546 ;;  display_stri    5   31[BANK0 ] unsigned char [5]
 30547 ;;  string_lengt    2   40[BANK0 ] unsigned int 
 30548 ;;  i               2   38[BANK0 ] unsigned int 
 30549 ;;  multiplier      2   36[BANK0 ] unsigned int 
 30550 ;; Return value:  Size  Location     Type
 30551 ;;                  1    wreg      void 
 30552 ;; Registers used:
 30553 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 30554 ;; Tracked objects:
 30555 ;;		On entry : 0/0
 30556 ;;		On exit  : 0/0
 30557 ;;		Unchanged: 0/0
 30558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 30559 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30560 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30561 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30562 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30563 ;;Total ram usage:       18 bytes
 30564 ;; Hardware stack levels used:    1
 30565 ;; Hardware stack levels required when called:    9
 30566 ;; This function calls:
 30567 ;;		___lwdiv
 30568 ;;		___lwmod
 30569 ;;		_nullifyBadge_segDisplayForceUpdate
 30570 ;;		_nullifyBadge_segDisplayPutStr
 30571 ;;		_strlen
 30572 ;; This function is called by:
 30573 ;;		_menu_display_option
 30574 ;;		_flashy_display_option
 30575 ;;		_flashy_Main
 30576 ;;		_locked_Main
 30577 ;;		_slot_Main
 30578 ;; This function uses a non-reentrant model
 30579 ;;
 30580                           
 30581                           
 30582                           ;psect for function _marquee
 30583  2215                     _marquee:	
 30584                           
 30585                           ;main.c: 147: u16 multiplier = 50;
 30586                           
 30587                           ;incstack = 0
 30588                           ; Regs used in _marquee: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 30589  2215  3032               	movlw	50
 30590  2216  0020               	movlb	0	; select bank0
 30591  2217  00C4               	movwf	marquee@multiplier
 30592  2218  3000               	movlw	0
 30593  2219  00C5               	movwf	marquee@multiplier+1
 30594                           
 30595                           ;main.c: 148: u16 string_length = strlen((const char *) string);
 30596  221A  083B               	movf	marquee@string+1,w
 30597  221B  00F2               	movwf	strlen@s+1
 30598  221C  083A               	movf	marquee@string,w
 30599  221D  00F1               	movwf	strlen@s
 30600  221E  31B4  2466  31A2   	fcall	_strlen
 30601  2221  0872               	movf	?_strlen+1,w
 30602  2222  0020               	movlb	0	; select bank0
 30603  2223  00C9               	movwf	marquee@string_length+1
 30604  2224  0871               	movf	?_strlen,w
 30605  2225  00C8               	movwf	marquee@string_length
 30606                           
 30607                           ;main.c: 149: char display_string[] = { ' ', ' ', ' ', ' ', '\0' };
 30608  2226  30E3               	movlw	low marquee@F14102
 30609  2227  0086               	movwf	6
 30610  2228  3001               	movlw	high marquee@F14102
 30611  2229  0087               	movwf	7
 30612  222A  303F               	movlw	low marquee@display_string
 30613  222B  0084               	movwf	4
 30614  222C  3000               	movlw	high marquee@display_string
 30615  222D  0085               	movwf	5
 30616  222E  3005               	movlw	5
 30617  222F  00BE               	movwf	??_marquee
 30618  2230                     u5000:	
 30619  2230  0016               	moviw fsr1++
 30620  2231  001A               	movwi fsr0++
 30621  2232  0BBE               	decfsz	??_marquee,f
 30622  2233  2A30               	goto	u5000
 30623                           
 30624                           ;main.c: 150: u16 i = (count / multiplier) % string_length;
 30625  2234  0849               	movf	marquee@string_length+1,w
 30626  2235  00AC               	movwf	___lwmod@divisor+1
 30627  2236  0848               	movf	marquee@string_length,w
 30628  2237  00AB               	movwf	___lwmod@divisor
 30629  2238  0845               	movf	marquee@multiplier+1,w
 30630  2239  00F2               	movwf	___lwdiv@divisor+1
 30631  223A  0844               	movf	marquee@multiplier,w
 30632  223B  00F1               	movwf	___lwdiv@divisor
 30633  223C  083D               	movf	marquee@count+1,w
 30634  223D  00F4               	movwf	___lwdiv@dividend+1
 30635  223E  083C               	movf	marquee@count,w
 30636  223F  00F3               	movwf	___lwdiv@dividend
 30637  2240  31A8  2085  31A2   	fcall	___lwdiv
 30638  2243  0872               	movf	?___lwdiv+1,w
 30639  2244  0020               	movlb	0	; select bank0
 30640  2245  00AE               	movwf	___lwmod@dividend+1
 30641  2246  0871               	movf	?___lwdiv,w
 30642  2247  00AD               	movwf	___lwmod@dividend
 30643  2248  31B5  25A3  31A2   	fcall	___lwmod
 30644  224B  0020               	movlb	0	; select bank0
 30645  224C  082C               	movf	?___lwmod+1,w
 30646  224D  00C7               	movwf	marquee@i+1
 30647  224E  082B               	movf	?___lwmod,w
 30648  224F  00C6               	movwf	marquee@i
 30649                           
 30650                           ;main.c: 152: for (u16 j=0; j < 4; j++){
 30651  2250  01CA               	clrf	marquee@j
 30652  2251  01CB               	clrf	marquee@j+1
 30653  2252  3000               	movlw	0
 30654  2253  024B               	subwf	marquee@j+1,w
 30655  2254  3004               	movlw	4
 30656  2255  1903               	skipnz
 30657  2256  024A               	subwf	marquee@j,w
 30658  2257  1803               	btfsc	3,0
 30659  2258  2A80               	goto	l8477
 30660  2259                     l8471:	
 30661                           
 30662                           ;main.c: 153: display_string[j] = string[(i + j) % string_length];
 30663  2259  0849               	movf	marquee@string_length+1,w
 30664  225A  00AC               	movwf	___lwmod@divisor+1
 30665  225B  0848               	movf	marquee@string_length,w
 30666  225C  00AB               	movwf	___lwmod@divisor
 30667  225D  084A               	movf	marquee@j,w
 30668  225E  0746               	addwf	marquee@i,w
 30669  225F  00AD               	movwf	___lwmod@dividend
 30670  2260  084B               	movf	marquee@j+1,w
 30671  2261  3D47               	addwfc	marquee@i+1,w
 30672  2262  00AE               	movwf	___lwmod@dividend+1
 30673  2263  31B5  25A3  31A2   	fcall	___lwmod
 30674  2266  0020               	movlb	0	; select bank0
 30675  2267  083A               	movf	marquee@string,w
 30676  2268  072B               	addwf	?___lwmod,w
 30677  2269  0084               	movwf	4
 30678  226A  083B               	movf	marquee@string+1,w
 30679  226B  3D2C               	addwfc	?___lwmod+1,w
 30680  226C  0085               	movwf	5
 30681  226D  0800               	movf	0,w	;code access
 30682  226E  00BE               	movwf	??_marquee
 30683  226F  084A               	movf	marquee@j,w
 30684  2270  3E3F               	addlw	(low (marquee@display_string| 0))& (0+255)
 30685  2271  0086               	movwf	6
 30686  2272  0187               	clrf	7
 30687  2273  083E               	movf	??_marquee,w
 30688  2274  0081               	movwf	1
 30689  2275  3001               	movlw	1
 30690  2276  07CA               	addwf	marquee@j,f
 30691  2277  3000               	movlw	0
 30692  2278  3DCB               	addwfc	marquee@j+1,f
 30693  2279  3000               	movlw	0
 30694  227A  024B               	subwf	marquee@j+1,w
 30695  227B  3004               	movlw	4
 30696  227C  1903               	skipnz
 30697  227D  024A               	subwf	marquee@j,w
 30698  227E  1C03               	skipc
 30699  227F  2A59               	goto	l8471
 30700  2280                     l8477:	
 30701                           
 30702                           ;main.c: 154: }
 30703                           ;main.c: 155: nullifyBadge_segDisplayPutStr(&badge_inst, display_string);
 30704  2280  303F               	movlw	low marquee@display_string
 30705  2281  00B7               	movwf	nullifyBadge_segDisplayPutStr@str
 30706  2282  3000               	movlw	high marquee@display_string
 30707  2283  00B8               	movwf	nullifyBadge_segDisplayPutStr@str+1
 30708  2284  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 30709  2285  31B2  2220  31A2   	fcall	_nullifyBadge_segDisplayPutStr
 30710                           
 30711                           ;main.c: 156: nullifyBadge_segDisplayForceUpdate(&badge_inst);
 30712  2288  30B2               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 30713  2289  31B1  21E4         	fcall	_nullifyBadge_segDisplayForceUpdate
 30714  228B  0008               	return
 30715  228C                     __end_of_marquee:	
 30716                           
 30717                           	psect	text65
 30718  3466                     __ptext65:	
 30719 ;; *************** function _strlen *****************
 30720 ;; Defined at:
 30721 ;;		line 4 in file "/Applications/microchip/xc8/v1.42/sources/common/strlen.c"
 30722 ;; Parameters:    Size  Location     Type
 30723 ;;  s               2    1[COMMON] PTR const unsigned char 
 30724 ;;		 -> STR_84(23), STR_83(27), STR_82(46), matrix_secret_inputs.inputs(20), 
 30725 ;;		 -> matrix_secret_inputs(25), STR_81(8), STR_80(7), STR_79(8), 
 30726 ;;		 -> STR_78(6), STR_77(10), STR_76(5), STR_75(7), 
 30727 ;;		 -> STR_74(9), STR_73(7), STR_72(7), Slot_Wheel(55), 
 30728 ;;		 -> secret_inputs.inputs(20), secret_inputs(25), STR_44(5), STR_43(5), 
 30729 ;;		 -> STR_42(11), STR_41(13), locked_secret_inputs.inputs(20), locked_secret_inputs(25), 
 30730 ;;		 -> STR_38(5), STR_37(43), STR_36(13), STR_35(47), 
 30731 ;;		 -> STR_34(17), STR_33(120), STR_32(34), STR_31(16), 
 30732 ;;		 -> STR_30(35), STR_29(15), STR_28(12), STR_27(29), 
 30733 ;;		 -> STR_26(19), STR_25(17), STR_24(40), STR_23(27), 
 30734 ;;		 -> STR_22(29), STR_21(30), STR_20(36), STR_19(28), 
 30735 ;;		 -> STR_18(22), STR_17(26), STR_16(21), STR_15(19), 
 30736 ;;		 -> STR_14(6), STR_13(8), STR_12(9), STR_11(5), 
 30737 ;;		 -> STR_10(18), STR_8(6), STR_7(8), STR_6(10), 
 30738 ;;		 -> STR_5(6), STR_4(5), matrix_TaskData(31), secret_TaskData(14), 
 30739 ;;		 -> locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), flashy_TaskData(30), 
 30740 ;;		 -> NULL(0), 
 30741 ;; Auto vars:     Size  Location     Type
 30742 ;;  cp              2    5[COMMON] PTR const unsigned char 
 30743 ;;		 -> STR_84(23), STR_83(27), STR_82(46), matrix_secret_inputs.inputs(20), 
 30744 ;;		 -> matrix_secret_inputs(25), STR_81(8), STR_80(7), STR_79(8), 
 30745 ;;		 -> STR_78(6), STR_77(10), STR_76(5), STR_75(7), 
 30746 ;;		 -> STR_74(9), STR_73(7), STR_72(7), Slot_Wheel(55), 
 30747 ;;		 -> secret_inputs.inputs(20), secret_inputs(25), STR_44(5), STR_43(5), 
 30748 ;;		 -> STR_42(11), STR_41(13), locked_secret_inputs.inputs(20), locked_secret_inputs(25), 
 30749 ;;		 -> STR_38(5), STR_37(43), STR_36(13), STR_35(47), 
 30750 ;;		 -> STR_34(17), STR_33(120), STR_32(34), STR_31(16), 
 30751 ;;		 -> STR_30(35), STR_29(15), STR_28(12), STR_27(29), 
 30752 ;;		 -> STR_26(19), STR_25(17), STR_24(40), STR_23(27), 
 30753 ;;		 -> STR_22(29), STR_21(30), STR_20(36), STR_19(28), 
 30754 ;;		 -> STR_18(22), STR_17(26), STR_16(21), STR_15(19), 
 30755 ;;		 -> STR_14(6), STR_13(8), STR_12(9), STR_11(5), 
 30756 ;;		 -> STR_10(18), STR_8(6), STR_7(8), STR_6(10), 
 30757 ;;		 -> STR_5(6), STR_4(5), matrix_TaskData(31), secret_TaskData(14), 
 30758 ;;		 -> locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), flashy_TaskData(30), 
 30759 ;;		 -> NULL(0), 
 30760 ;; Return value:  Size  Location     Type
 30761 ;;                  2    1[COMMON] unsigned int 
 30762 ;; Registers used:
 30763 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 30764 ;; Tracked objects:
 30765 ;;		On entry : 0/0
 30766 ;;		On exit  : 0/0
 30767 ;;		Unchanged: 0/0
 30768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 30769 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30770 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30771 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30772 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30773 ;;Total ram usage:        6 bytes
 30774 ;; Hardware stack levels used:    1
 30775 ;; Hardware stack levels required when called:    4
 30776 ;; This function calls:
 30777 ;;		Nothing
 30778 ;; This function is called by:
 30779 ;;		_marquee_speedy
 30780 ;;		_marquee
 30781 ;;		_locked_secret_check
 30782 ;;		_secret_check
 30783 ;;		_slot_Main
 30784 ;;		_matrix_secret_check
 30785 ;; This function uses a non-reentrant model
 30786 ;;
 30787                           
 30788                           
 30789                           ;psect for function _strlen
 30790  3466                     _strlen:	
 30791                           
 30792                           ;incstack = 0
 30793                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0]
 30794  3466  0872               	movf	strlen@s+1,w
 30795  3467  00F6               	movwf	strlen@cp+1
 30796  3468  0871               	movf	strlen@s,w
 30797  3469  00F5               	movwf	strlen@cp
 30798  346A                     l8329:	
 30799  346A  0875               	movf	strlen@cp,w
 30800  346B  0084               	movwf	4
 30801  346C  0876               	movf	strlen@cp+1,w
 30802  346D  0085               	movwf	5
 30803  346E  0012               	moviw fsr0++
 30804  346F  1903               	btfsc	3,2
 30805  3470  2C76               	goto	l8331
 30806  3471  3001               	movlw	1
 30807  3472  07F5               	addwf	strlen@cp,f
 30808  3473  3000               	movlw	0
 30809  3474  3DF6               	addwfc	strlen@cp+1,f
 30810  3475  2C6A               	goto	l8329
 30811  3476                     l8331:	
 30812  3476  0971               	comf	strlen@s,w
 30813  3477  00F3               	movwf	??_strlen
 30814  3478  0972               	comf	strlen@s+1,w
 30815  3479  00F4               	movwf	??_strlen+1
 30816  347A  0AF3               	incf	??_strlen,f
 30817  347B  1903               	skipnz
 30818  347C  0AF4               	incf	??_strlen+1,f
 30819  347D  0875               	movf	strlen@cp,w
 30820  347E  0773               	addwf	??_strlen,w
 30821  347F  00F1               	movwf	?_strlen
 30822  3480  0876               	movf	strlen@cp+1,w
 30823  3481  3D74               	addwfc	??_strlen+1,w
 30824  3482  00F2               	movwf	?_strlen+1
 30825  3483  0008               	return
 30826  3484                     __end_of_strlen:	
 30827                           
 30828                           	psect	text66
 30829  3220                     __ptext66:	
 30830 ;; *************** function _nullifyBadge_segDisplayPutStr *****************
 30831 ;; Defined at:
 30832 ;;		line 113 in file "nullifyBadge.c"
 30833 ;; Parameters:    Size  Location     Type
 30834 ;;  badge           1    wreg     PTR struct t_nullifyBadg
 30835 ;;		 -> badge_inst(18), 
 30836 ;;  str             2   23[BANK0 ] PTR unsigned char 
 30837 ;;		 -> STR_47(5), STR_46(5), STR_45(5), flashy_Main@hit_counter(6), 
 30838 ;;		 -> STR_39(5), STR_38(5), STR_37(43), STR_36(13), 
 30839 ;;		 -> STR_35(47), STR_34(17), STR_33(120), STR_32(34), 
 30840 ;;		 -> STR_31(16), STR_30(35), STR_29(15), STR_28(12), 
 30841 ;;		 -> STR_27(29), STR_26(19), STR_25(17), STR_24(40), 
 30842 ;;		 -> STR_23(27), STR_22(29), STR_21(30), STR_20(36), 
 30843 ;;		 -> STR_19(28), STR_18(22), STR_17(26), STR_16(21), 
 30844 ;;		 -> STR_15(19), STR_14(6), STR_13(8), STR_12(9), 
 30845 ;;		 -> STR_11(5), STR_8(6), STR_7(8), STR_6(10), 
 30846 ;;		 -> STR_5(6), STR_4(5), marquee@display_string(5), marquee_speedy@display_string(5), 
 30847 ;; Auto vars:     Size  Location     Type
 30848 ;;  badge           1   25[BANK0 ] PTR struct t_nullifyBadg
 30849 ;;		 -> badge_inst(18), 
 30850 ;; Return value:  Size  Location     Type
 30851 ;;                  1    wreg      void 
 30852 ;; Registers used:
 30853 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 30854 ;; Tracked objects:
 30855 ;;		On entry : 0/0
 30856 ;;		On exit  : 0/0
 30857 ;;		Unchanged: 0/0
 30858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 30859 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30860 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30861 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30862 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30863 ;;Total ram usage:        3 bytes
 30864 ;; Hardware stack levels used:    1
 30865 ;; Hardware stack levels required when called:    8
 30866 ;; This function calls:
 30867 ;;		_displayL2_PutStr
 30868 ;; This function is called by:
 30869 ;;		_marquee_speedy
 30870 ;;		_marquee
 30871 ;;		_menu_display_option
 30872 ;;		_flashy_display_option
 30873 ;;		_flashy_Main
 30874 ;;		_locked_Main
 30875 ;; This function uses a non-reentrant model
 30876 ;;
 30877                           
 30878                           
 30879                           ;psect for function _nullifyBadge_segDisplayPutStr
 30880  3220                     _nullifyBadge_segDisplayPutStr:	
 30881                           
 30882                           ;incstack = 0
 30883                           ; Regs used in _nullifyBadge_segDisplayPutStr: [wreg-fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 30884                           ;nullifyBadge_segDisplayPutStr@badge stored from wreg
 30885  3220  0020               	movlb	0	; select bank0
 30886  3221  00B9               	movwf	nullifyBadge_segDisplayPutStr@badge
 30887                           
 30888                           ;nullifyBadge.c: 114: displayL2_PutStr(&badge->display, str);
 30889  3222  0838               	movf	nullifyBadge_segDisplayPutStr@str+1,w
 30890  3223  00B1               	movwf	displayL2_PutStr@str+1
 30891  3224  0837               	movf	nullifyBadge_segDisplayPutStr@str,w
 30892  3225  00B0               	movwf	displayL2_PutStr@str
 30893  3226  0839               	movf	nullifyBadge_segDisplayPutStr@badge,w
 30894  3227  31B5  2579         	fcall	_displayL2_PutStr
 30895  3229  0008               	return
 30896  322A                     __end_of_nullifyBadge_segDisplayPutStr:	
 30897                           
 30898                           	psect	text67
 30899  3579                     __ptext67:	
 30900 ;; *************** function _displayL2_PutStr *****************
 30901 ;; Defined at:
 30902 ;;		line 55 in file "nullifyBadge_displayL2.c"
 30903 ;; Parameters:    Size  Location     Type
 30904 ;;  display         1    wreg     PTR struct t_nullifyDisp
 30905 ;;		 -> badge_inst(18), 
 30906 ;;  str             2   16[BANK0 ] PTR unsigned char 
 30907 ;;		 -> STR_47(5), STR_46(5), STR_45(5), flashy_Main@hit_counter(6), 
 30908 ;;		 -> STR_39(5), STR_38(5), STR_37(43), STR_36(13), 
 30909 ;;		 -> STR_35(47), STR_34(17), STR_33(120), STR_32(34), 
 30910 ;;		 -> STR_31(16), STR_30(35), STR_29(15), STR_28(12), 
 30911 ;;		 -> STR_27(29), STR_26(19), STR_25(17), STR_24(40), 
 30912 ;;		 -> STR_23(27), STR_22(29), STR_21(30), STR_20(36), 
 30913 ;;		 -> STR_19(28), STR_18(22), STR_17(26), STR_16(21), 
 30914 ;;		 -> STR_15(19), STR_14(6), STR_13(8), STR_12(9), 
 30915 ;;		 -> STR_11(5), STR_8(6), STR_7(8), STR_6(10), 
 30916 ;;		 -> STR_5(6), STR_4(5), STR_3(5), marquee@display_string(5), 
 30917 ;;		 -> marquee_speedy@display_string(5), 
 30918 ;; Auto vars:     Size  Location     Type
 30919 ;;  display         1   21[BANK0 ] PTR struct t_nullifyDisp
 30920 ;;		 -> badge_inst(18), 
 30921 ;;  k               1   22[BANK0 ] unsigned char 
 30922 ;; Return value:  Size  Location     Type
 30923 ;;                  1    wreg      void 
 30924 ;; Registers used:
 30925 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 30926 ;; Tracked objects:
 30927 ;;		On entry : 0/0
 30928 ;;		On exit  : 0/0
 30929 ;;		Unchanged: 0/0
 30930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 30931 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30932 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30933 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30934 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 30935 ;;Total ram usage:        7 bytes
 30936 ;; Hardware stack levels used:    1
 30937 ;; Hardware stack levels required when called:    7
 30938 ;; This function calls:
 30939 ;;		_displayL2_PutChar
 30940 ;; This function is called by:
 30941 ;;		_nullifyBadge_segDisplayPutStr
 30942 ;;		_displayL2_EraseSegDisplay
 30943 ;; This function uses a non-reentrant model
 30944 ;;
 30945                           
 30946                           
 30947                           ;psect for function _displayL2_PutStr
 30948  3579                     _displayL2_PutStr:	
 30949                           
 30950                           ;incstack = 0
 30951                           ; Regs used in _displayL2_PutStr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 30952                           ;displayL2_PutStr@display stored from wreg
 30953  3579  0020               	movlb	0	; select bank0
 30954  357A  00B5               	movwf	displayL2_PutStr@display
 30955                           
 30956                           ;nullifyBadge_displayL2.c: 57: u8 k = 0;
 30957  357B  01B6               	clrf	displayL2_PutStr@k
 30958  357C                     l8283:	
 30959                           ;nullifyBadge_displayL2.c: 59: while (str[k] != '\0') {
 30960                           
 30961  357C  0831               	movf	displayL2_PutStr@str+1,w
 30962  357D  00B3               	movwf	??_displayL2_PutStr+1
 30963  357E  0830               	movf	displayL2_PutStr@str,w
 30964  357F  00B2               	movwf	??_displayL2_PutStr
 30965  3580  0836               	movf	displayL2_PutStr@k,w
 30966  3581  0732               	addwf	??_displayL2_PutStr,w
 30967  3582  0084               	movwf	4
 30968  3583  0833               	movf	??_displayL2_PutStr+1,w
 30969  3584  1803               	skipnc
 30970  3585  0A33               	incf	??_displayL2_PutStr+1,w
 30971  3586  0085               	movwf	5
 30972  3587  0012               	moviw fsr0++
 30973  3588  1903               	btfsc	3,2
 30974  3589  0008               	return
 30975                           
 30976                           ;nullifyBadge_displayL2.c: 60: displayL2_PutChar(display, str[k]);
 30977  358A  0831               	movf	displayL2_PutStr@str+1,w
 30978  358B  00B3               	movwf	??_displayL2_PutStr+1
 30979  358C  0830               	movf	displayL2_PutStr@str,w
 30980  358D  00B2               	movwf	??_displayL2_PutStr
 30981  358E  0836               	movf	displayL2_PutStr@k,w
 30982  358F  0732               	addwf	??_displayL2_PutStr,w
 30983  3590  0084               	movwf	4
 30984  3591  0833               	movf	??_displayL2_PutStr+1,w
 30985  3592  1803               	skipnc
 30986  3593  0A33               	incf	??_displayL2_PutStr+1,w
 30987  3594  0085               	movwf	5
 30988  3595  0800               	movf	0,w	;code access
 30989  3596  00B4               	movwf	??_displayL2_PutStr+2
 30990  3597  0834               	movf	??_displayL2_PutStr+2,w
 30991  3598  00AA               	movwf	displayL2_PutChar@c
 30992  3599  0835               	movf	displayL2_PutStr@display,w
 30993  359A  31AB  2388  31B5   	fcall	_displayL2_PutChar
 30994                           
 30995                           ;nullifyBadge_displayL2.c: 61: k++;
 30996  359D  3001               	movlw	1
 30997  359E  0020               	movlb	0	; select bank0
 30998  359F  00B2               	movwf	??_displayL2_PutStr
 30999  35A0  0832               	movf	??_displayL2_PutStr,w
 31000  35A1  07B6               	addwf	displayL2_PutStr@k,f
 31001  35A2  2D7C               	goto	l8283
 31002  35A3                     __end_of_displayL2_PutStr:	
 31003                           
 31004                           	psect	text68
 31005  2B88                     __ptext68:	
 31006 ;; *************** function _displayL2_PutChar *****************
 31007 ;; Defined at:
 31008 ;;		line 38 in file "nullifyBadge_displayL2.c"
 31009 ;; Parameters:    Size  Location     Type
 31010 ;;  display         1    wreg     PTR struct t_nullifyDisp
 31011 ;;		 -> badge_inst(18), 
 31012 ;;  c               1   10[BANK0 ] unsigned char 
 31013 ;; Auto vars:     Size  Location     Type
 31014 ;;  display         1   15[BANK0 ] PTR struct t_nullifyDisp
 31015 ;;		 -> badge_inst(18), 
 31016 ;;  k               1   14[BANK0 ] unsigned char 
 31017 ;; Return value:  Size  Location     Type
 31018 ;;                  1    wreg      void 
 31019 ;; Registers used:
 31020 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 31021 ;; Tracked objects:
 31022 ;;		On entry : 0/0
 31023 ;;		On exit  : 0/0
 31024 ;;		Unchanged: 0/0
 31025 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 31026 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31027 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31028 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31029 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31030 ;;Total ram usage:        6 bytes
 31031 ;; Hardware stack levels used:    1
 31032 ;; Hardware stack levels required when called:    6
 31033 ;; This function calls:
 31034 ;;		_displayL1_SetSegChar
 31035 ;; This function is called by:
 31036 ;;		_displayL2_PutStr
 31037 ;;		_nullifyBadge_segDisplayPutChar
 31038 ;; This function uses a non-reentrant model
 31039 ;;
 31040                           
 31041                           
 31042                           ;psect for function _displayL2_PutChar
 31043  2B88                     _displayL2_PutChar:	
 31044                           
 31045                           ;incstack = 0
 31046                           ; Regs used in _displayL2_PutChar: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 31047                           ;displayL2_PutChar@display stored from wreg
 31048  2B88  0020               	movlb	0	; select bank0
 31049  2B89  00AF               	movwf	displayL2_PutChar@display
 31050                           
 31051                           ;nullifyBadge_displayL2.c: 40: display->charVect[0] = display->charVect[1];
 31052  2B8A  0A2F               	incf	displayL2_PutChar@display,w
 31053  2B8B  0086               	movwf	6
 31054  2B8C  3001               	movlw	1	; select bank2/3
 31055  2B8D  0087               	movwf	7
 31056  2B8E  0801               	movf	1,w
 31057  2B8F  00AB               	movwf	??_displayL2_PutChar
 31058  2B90  082F               	movf	displayL2_PutChar@display,w
 31059  2B91  0086               	movwf	6
 31060  2B92  3001               	movlw	1	; select bank2/3
 31061  2B93  0087               	movwf	7
 31062  2B94  082B               	movf	??_displayL2_PutChar,w
 31063  2B95  0081               	movwf	1
 31064                           
 31065                           ;nullifyBadge_displayL2.c: 41: display->charVect[1] = display->charVect[2];
 31066  2B96  082F               	movf	displayL2_PutChar@display,w
 31067  2B97  3E02               	addlw	2
 31068  2B98  0086               	movwf	6
 31069  2B99  3001               	movlw	1	; select bank2/3
 31070  2B9A  0087               	movwf	7
 31071  2B9B  0801               	movf	1,w
 31072  2B9C  00AB               	movwf	??_displayL2_PutChar
 31073  2B9D  0A2F               	incf	displayL2_PutChar@display,w
 31074  2B9E  0086               	movwf	6
 31075  2B9F  3001               	movlw	1	; select bank2/3
 31076  2BA0  0087               	movwf	7
 31077  2BA1  082B               	movf	??_displayL2_PutChar,w
 31078  2BA2  0081               	movwf	1
 31079                           
 31080                           ;nullifyBadge_displayL2.c: 42: display->charVect[2] = display->charVect[3];
 31081  2BA3  082F               	movf	displayL2_PutChar@display,w
 31082  2BA4  3E03               	addlw	3
 31083  2BA5  0086               	movwf	6
 31084  2BA6  3001               	movlw	1	; select bank2/3
 31085  2BA7  0087               	movwf	7
 31086  2BA8  0801               	movf	1,w
 31087  2BA9  00AB               	movwf	??_displayL2_PutChar
 31088  2BAA  082F               	movf	displayL2_PutChar@display,w
 31089  2BAB  3E02               	addlw	2
 31090  2BAC  0086               	movwf	6
 31091  2BAD  3001               	movlw	1	; select bank2/3
 31092  2BAE  0087               	movwf	7
 31093  2BAF  082B               	movf	??_displayL2_PutChar,w
 31094  2BB0  0081               	movwf	1
 31095                           
 31096                           ;nullifyBadge_displayL2.c: 45: display->charVect[3] = c;
 31097  2BB1  082A               	movf	displayL2_PutChar@c,w
 31098  2BB2  00AB               	movwf	??_displayL2_PutChar
 31099  2BB3  082F               	movf	displayL2_PutChar@display,w
 31100  2BB4  3E03               	addlw	3
 31101  2BB5  0086               	movwf	6
 31102  2BB6  3001               	movlw	1	; select bank2/3
 31103  2BB7  0087               	movwf	7
 31104  2BB8  082B               	movf	??_displayL2_PutChar,w
 31105  2BB9  0081               	movwf	1
 31106                           
 31107                           ;nullifyBadge_displayL2.c: 48: u8 k = 0;
 31108  2BBA  01AE               	clrf	displayL2_PutChar@k
 31109                           
 31110                           ;nullifyBadge_displayL2.c: 49: for (k = 0; k < 4; k++) {
 31111  2BBB  01AE               	clrf	displayL2_PutChar@k
 31112  2BBC                     L15:	
 31113  2BBC  3004               	movlw	4
 31114  2BBD  022E               	subwf	displayL2_PutChar@k,w
 31115  2BBE  1803               	btfsc	3,0
 31116  2BBF  0008               	return
 31117                           
 31118                           ;nullifyBadge_displayL2.c: 50: displayL1_SetSegChar(&display->display_l1, display->charV
      +                          ect[k], k);
 31119  2BC0  082E               	movf	displayL2_PutChar@k,w
 31120  2BC1  072F               	addwf	displayL2_PutChar@display,w
 31121  2BC2  00AB               	movwf	??_displayL2_PutChar
 31122  2BC3  082B               	movf	??_displayL2_PutChar,w
 31123  2BC4  0086               	movwf	6
 31124  2BC5  3001               	movlw	1	; select bank2/3
 31125  2BC6  0087               	movwf	7
 31126  2BC7  0801               	movf	1,w
 31127  2BC8  00AC               	movwf	??_displayL2_PutChar+1
 31128  2BC9  082C               	movf	??_displayL2_PutChar+1,w
 31129  2BCA  00A0               	movwf	displayL1_SetSegChar@c
 31130  2BCB  082E               	movf	displayL2_PutChar@k,w
 31131  2BCC  00AD               	movwf	??_displayL2_PutChar+2
 31132  2BCD  082D               	movf	??_displayL2_PutChar+2,w
 31133  2BCE  00A1               	movwf	displayL1_SetSegChar@charPos
 31134  2BCF  082F               	movf	displayL2_PutChar@display,w
 31135  2BD0  3E07               	addlw	7
 31136  2BD1  31B7  273D  31AB   	fcall	_displayL1_SetSegChar
 31137  2BD4  3001               	movlw	1
 31138  2BD5  0020               	movlb	0	; select bank0
 31139  2BD6  00AB               	movwf	??_displayL2_PutChar
 31140  2BD7  082B               	movf	??_displayL2_PutChar,w
 31141  2BD8  07AE               	addwf	displayL2_PutChar@k,f
 31142  2BD9  2BBC               	goto	L15
 31143  2BDA                     __end_of_displayL2_PutChar:	
 31144                           
 31145                           	psect	text69
 31146  373D                     __ptext69:	
 31147 ;; *************** function _displayL1_SetSegChar *****************
 31148 ;; Defined at:
 31149 ;;		line 18 in file "nullifyBadge_displayL1.c"
 31150 ;; Parameters:    Size  Location     Type
 31151 ;;  display         1    wreg     PTR struct t_nullifyDisp
 31152 ;;		 -> badge_inst(18), 
 31153 ;;  c               1    0[BANK0 ] unsigned char 
 31154 ;;  charPos         1    1[BANK0 ] unsigned char 
 31155 ;; Auto vars:     Size  Location     Type
 31156 ;;  display         1    7[BANK0 ] PTR struct t_nullifyDisp
 31157 ;;		 -> badge_inst(18), 
 31158 ;;  charData        2    8[BANK0 ] unsigned int 
 31159 ;;  dispDataVect    1    6[BANK0 ] unsigned char 
 31160 ;; Return value:  Size  Location     Type
 31161 ;;                  1    wreg      void 
 31162 ;; Registers used:
 31163 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 31164 ;; Tracked objects:
 31165 ;;		On entry : 0/0
 31166 ;;		On exit  : 0/0
 31167 ;;		Unchanged: 0/0
 31168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 31169 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31170 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31171 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31172 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31173 ;;Total ram usage:       10 bytes
 31174 ;; Hardware stack levels used:    1
 31175 ;; Hardware stack levels required when called:    5
 31176 ;; This function calls:
 31177 ;;		_displayCharReverse
 31178 ;; This function is called by:
 31179 ;;		_displayL2_PutChar
 31180 ;;		_nullifyBadge_segDisplayPutCharPos
 31181 ;;		_displayL2_PrintChar
 31182 ;; This function uses a non-reentrant model
 31183 ;;
 31184                           
 31185                           
 31186                           ;psect for function _displayL1_SetSegChar
 31187  373D                     _displayL1_SetSegChar:	
 31188                           
 31189                           ;incstack = 0
 31190                           ; Regs used in _displayL1_SetSegChar: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 31191                           ;displayL1_SetSegChar@display stored from wreg
 31192  373D  0020               	movlb	0	; select bank0
 31193  373E  00A7               	movwf	displayL1_SetSegChar@display
 31194                           
 31195                           ;nullifyBadge_displayL1.c: 23: u16 charData = asciiCharTableLookup[(u8) c];
 31196  373F  0820               	movf	displayL1_SetSegChar@c,w
 31197  3740  00A2               	movwf	??_displayL1_SetSegChar
 31198  3741  01A3               	clrf	??_displayL1_SetSegChar+1
 31199  3742  35A2               	lslf	??_displayL1_SetSegChar,f
 31200  3743  0DA3               	rlf	??_displayL1_SetSegChar+1,f
 31201  3744  30F0               	movlw	240
 31202  3745  00A4               	movwf	??_displayL1_SetSegChar+2
 31203  3746  3026               	movlw	38
 31204  3747  00A5               	movwf	??_displayL1_SetSegChar+3
 31205  3748  0822               	movf	??_displayL1_SetSegChar,w
 31206  3749  0724               	addwf	??_displayL1_SetSegChar+2,w
 31207  374A  0086               	movwf	6
 31208  374B  0823               	movf	??_displayL1_SetSegChar+1,w
 31209  374C  3D25               	addwfc	??_displayL1_SetSegChar+3,w
 31210  374D  0087               	movwf	7
 31211  374E  3F40               	moviw [0]fsr1
 31212  374F  00A8               	movwf	displayL1_SetSegChar@charData
 31213  3750  3F41               	moviw [1]fsr1
 31214  3751  00A9               	movwf	displayL1_SetSegChar@charData+1
 31215                           
 31216                           ;nullifyBadge_displayL1.c: 29: if (charPos & 0x1) {
 31217  3752  1C21               	btfss	displayL1_SetSegChar@charPos,0
 31218  3753  2F5F               	goto	l8221
 31219                           
 31220                           ;nullifyBadge_displayL1.c: 30: charData = displayCharReverse(charData);
 31221  3754  0829               	movf	displayL1_SetSegChar@charData+1,w
 31222  3755  00F2               	movwf	displayCharReverse@cVal+1
 31223  3756  0828               	movf	displayL1_SetSegChar@charData,w
 31224  3757  00F1               	movwf	displayCharReverse@cVal
 31225  3758  31B5  25D0         	fcall	_displayCharReverse
 31226  375A  0872               	movf	?_displayCharReverse+1,w
 31227  375B  0020               	movlb	0	; select bank0
 31228  375C  00A9               	movwf	displayL1_SetSegChar@charData+1
 31229  375D  0871               	movf	?_displayCharReverse,w
 31230  375E  00A8               	movwf	displayL1_SetSegChar@charData
 31231  375F                     l8221:	
 31232                           
 31233                           ;nullifyBadge_displayL1.c: 31: }
 31234                           ;nullifyBadge_displayL1.c: 61: u8 dispDataVectBaseIdx = 8 - ( charPos << 1 );
 31235  375F  3521               	lslf	displayL1_SetSegChar@charPos,w
 31236  3760  3AFF               	xorlw	255
 31237  3761  3E01               	addlw	1
 31238  3762  3E08               	addlw	8
 31239  3763  00A2               	movwf	??_displayL1_SetSegChar
 31240  3764  0822               	movf	??_displayL1_SetSegChar,w
 31241  3765  00A6               	movwf	displayL1_SetSegChar@dispDataVectBaseIdx
 31242                           
 31243                           ;nullifyBadge_displayL1.c: 64: display->displayVect[dispDataVectBaseIdx] = (u8) (charDat
      +                          a >> 8);
 31244  3766  0829               	movf	displayL1_SetSegChar@charData+1,w
 31245  3767  00A2               	movwf	??_displayL1_SetSegChar
 31246  3768  0826               	movf	displayL1_SetSegChar@dispDataVectBaseIdx,w
 31247  3769  0727               	addwf	displayL1_SetSegChar@display,w
 31248  376A  00A3               	movwf	??_displayL1_SetSegChar+1
 31249  376B  0823               	movf	??_displayL1_SetSegChar+1,w
 31250  376C  0086               	movwf	6
 31251  376D  3001               	movlw	1	; select bank2/3
 31252  376E  0087               	movwf	7
 31253  376F  0822               	movf	??_displayL1_SetSegChar,w
 31254  3770  0081               	movwf	1
 31255                           
 31256                           ;nullifyBadge_displayL1.c: 67: display->displayVect[dispDataVectBaseIdx+1] = (u8) (charD
      +                          ata & 0xFF);
 31257  3771  0828               	movf	displayL1_SetSegChar@charData,w
 31258  3772  00A2               	movwf	??_displayL1_SetSegChar
 31259  3773  0826               	movf	displayL1_SetSegChar@dispDataVectBaseIdx,w
 31260  3774  3E01               	addlw	1
 31261  3775  0727               	addwf	displayL1_SetSegChar@display,w
 31262  3776  00A3               	movwf	??_displayL1_SetSegChar+1
 31263  3777  0823               	movf	??_displayL1_SetSegChar+1,w
 31264  3778  0086               	movwf	6
 31265  3779  3001               	movlw	1	; select bank2/3
 31266  377A  0087               	movwf	7
 31267  377B  0822               	movf	??_displayL1_SetSegChar,w
 31268  377C  0081               	movwf	1
 31269  377D  0008               	return
 31270  377E                     __end_of_displayL1_SetSegChar:	
 31271                           
 31272                           	psect	text70
 31273  35D0                     __ptext70:	
 31274 ;; *************** function _displayCharReverse *****************
 31275 ;; Defined at:
 31276 ;;		line 105 in file "nullifyBadge_displayL1.c"
 31277 ;; Parameters:    Size  Location     Type
 31278 ;;  cVal            2    1[COMMON] unsigned int 
 31279 ;; Auto vars:     Size  Location     Type
 31280 ;;  k               1   11[COMMON] unsigned char 
 31281 ;;  retValUpperR    1   10[COMMON] unsigned char 
 31282 ;;  retValUpper     1    9[COMMON] unsigned char 
 31283 ;;  retValLower     1    8[COMMON] unsigned char 
 31284 ;; Return value:  Size  Location     Type
 31285 ;;                  2    1[COMMON] unsigned int 
 31286 ;; Registers used:
 31287 ;;		wreg, status,2, status,0
 31288 ;; Tracked objects:
 31289 ;;		On entry : 0/0
 31290 ;;		On exit  : 0/0
 31291 ;;		Unchanged: 0/0
 31292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 31293 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31294 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31295 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31296 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31297 ;;Total ram usage:       11 bytes
 31298 ;; Hardware stack levels used:    1
 31299 ;; Hardware stack levels required when called:    4
 31300 ;; This function calls:
 31301 ;;		Nothing
 31302 ;; This function is called by:
 31303 ;;		_displayL1_SetSegChar
 31304 ;; This function uses a non-reentrant model
 31305 ;;
 31306                           
 31307                           
 31308                           ;psect for function _displayCharReverse
 31309  35D0                     _displayCharReverse:	
 31310                           
 31311                           ;nullifyBadge_displayL1.c: 106: u8 retValUpper, retValLower, retValUpperRev;
 31312                           ;nullifyBadge_displayL1.c: 108: u8 k;
 31313                           ;nullifyBadge_displayL1.c: 111: retValUpper = cVal >> 8;
 31314                           
 31315                           ;incstack = 0
 31316                           ; Regs used in _displayCharReverse: [wreg+status,2+status,0]
 31317  35D0  0872               	movf	displayCharReverse@cVal+1,w
 31318  35D1  00F3               	movwf	??_displayCharReverse
 31319  35D2  0873               	movf	??_displayCharReverse,w
 31320  35D3  00F9               	movwf	displayCharReverse@retValUpper
 31321                           
 31322                           ;nullifyBadge_displayL1.c: 112: retValLower = cVal & 0xFF;
 31323  35D4  0871               	movf	displayCharReverse@cVal,w
 31324  35D5  00F3               	movwf	??_displayCharReverse
 31325  35D6  0873               	movf	??_displayCharReverse,w
 31326  35D7  00F8               	movwf	displayCharReverse@retValLower
 31327                           
 31328                           ;nullifyBadge_displayL1.c: 115: retValUpperRev = 0;
 31329  35D8  01FA               	clrf	displayCharReverse@retValUpperRev
 31330                           
 31331                           ;nullifyBadge_displayL1.c: 117: for (k = 0; k < 7; k++) {
 31332  35D9  01FB               	clrf	displayCharReverse@k
 31333  35DA  3007               	movlw	7
 31334  35DB  027B               	subwf	displayCharReverse@k,w
 31335  35DC  1803               	btfsc	3,0
 31336  35DD  2DEF               	goto	l8203
 31337  35DE                     l8195:	
 31338                           
 31339                           ;nullifyBadge_displayL1.c: 118: retValUpperRev |= (retValUpper & 0x1);
 31340  35DE  0879               	movf	displayCharReverse@retValUpper,w
 31341  35DF  3901               	andlw	1
 31342  35E0  00F3               	movwf	??_displayCharReverse
 31343  35E1  0873               	movf	??_displayCharReverse,w
 31344  35E2  04FA               	iorwf	displayCharReverse@retValUpperRev,f
 31345                           
 31346                           ;nullifyBadge_displayL1.c: 119: retValUpper >>= 1;
 31347  35E3  1003               	clrc
 31348  35E4  0CF9               	rrf	displayCharReverse@retValUpper,f
 31349                           
 31350                           ;nullifyBadge_displayL1.c: 120: retValUpperRev <<= 1;
 31351  35E5  1003               	clrc
 31352  35E6  0DFA               	rlf	displayCharReverse@retValUpperRev,f
 31353  35E7  3001               	movlw	1
 31354  35E8  00F3               	movwf	??_displayCharReverse
 31355  35E9  0873               	movf	??_displayCharReverse,w
 31356  35EA  07FB               	addwf	displayCharReverse@k,f
 31357  35EB  3007               	movlw	7
 31358  35EC  027B               	subwf	displayCharReverse@k,w
 31359  35ED  1C03               	skipc
 31360  35EE  2DDE               	goto	l8195
 31361  35EF                     l8203:	
 31362                           
 31363                           ;nullifyBadge_displayL1.c: 121: }
 31364                           ;nullifyBadge_displayL1.c: 123: return (retValLower << 8) | (retValUpperRev);
 31365  35EF  087A               	movf	displayCharReverse@retValUpperRev,w
 31366  35F0  00F3               	movwf	??_displayCharReverse
 31367  35F1  01F4               	clrf	??_displayCharReverse+1
 31368  35F2  0878               	movf	displayCharReverse@retValLower,w
 31369  35F3  00F5               	movwf	??_displayCharReverse+2
 31370  35F4  01F6               	clrf	??_displayCharReverse+3
 31371  35F5  0875               	movf	??_displayCharReverse+2,w
 31372  35F6  00F6               	movwf	??_displayCharReverse+3
 31373  35F7  01F5               	clrf	??_displayCharReverse+2
 31374  35F8  0873               	movf	??_displayCharReverse,w
 31375  35F9  0475               	iorwf	??_displayCharReverse+2,w
 31376  35FA  00F1               	movwf	?_displayCharReverse
 31377  35FB  0874               	movf	??_displayCharReverse+1,w
 31378  35FC  0476               	iorwf	??_displayCharReverse+3,w
 31379  35FD  00F2               	movwf	?_displayCharReverse+1
 31380  35FE  0008               	return
 31381  35FF                     __end_of_displayCharReverse:	
 31382                           
 31383                           	psect	text71
 31384  31E4                     __ptext71:	
 31385 ;; *************** function _nullifyBadge_segDisplayForceUpdate *****************
 31386 ;; Defined at:
 31387 ;;		line 108 in file "nullifyBadge.c"
 31388 ;; Parameters:    Size  Location     Type
 31389 ;;  badge           1    wreg     PTR struct t_nullifyBadg
 31390 ;;		 -> badge_inst(18), 
 31391 ;; Auto vars:     Size  Location     Type
 31392 ;;  badge           1   11[BANK0 ] PTR struct t_nullifyBadg
 31393 ;;		 -> badge_inst(18), 
 31394 ;; Return value:  Size  Location     Type
 31395 ;;                  1    wreg      void 
 31396 ;; Registers used:
 31397 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 31398 ;; Tracked objects:
 31399 ;;		On entry : 0/0
 31400 ;;		On exit  : 0/0
 31401 ;;		Unchanged: 0/0
 31402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 31403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31404 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31405 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31406 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31407 ;;Total ram usage:        1 bytes
 31408 ;; Hardware stack levels used:    1
 31409 ;; Hardware stack levels required when called:    8
 31410 ;; This function calls:
 31411 ;;		_displayL2_ForceUpdate
 31412 ;; This function is called by:
 31413 ;;		_marquee_speedy
 31414 ;;		_marquee
 31415 ;;		_menu_display_option
 31416 ;;		_flashy_display_option
 31417 ;;		_flashy_Main
 31418 ;;		_locked_Main
 31419 ;; This function uses a non-reentrant model
 31420 ;;
 31421                           
 31422                           
 31423                           ;psect for function _nullifyBadge_segDisplayForceUpdate
 31424  31E4                     _nullifyBadge_segDisplayForceUpdate:	
 31425                           
 31426                           ;incstack = 0
 31427                           ; Regs used in _nullifyBadge_segDisplayForceUpdate: [wreg+fsr1l+fsr1h+status,2+status,0+
      +                          pclath+cstack]
 31428                           ;nullifyBadge_segDisplayForceUpdate@badge stored from wreg
 31429  31E4  0020               	movlb	0	; select bank0
 31430  31E5  00AB               	movwf	nullifyBadge_segDisplayForceUpdate@badge
 31431                           
 31432                           ;nullifyBadge.c: 109: displayL2_ForceUpdate(&badge->display);
 31433  31E6  082B               	movf	nullifyBadge_segDisplayForceUpdate@badge,w
 31434  31E7  31B1  21DE         	fcall	_displayL2_ForceUpdate
 31435  31E9  0008               	return
 31436  31EA                     __end_of_nullifyBadge_segDisplayForceUpdate:	
 31437                           
 31438                           	psect	text72
 31439  31DE                     __ptext72:	
 31440 ;; *************** function _displayL2_ForceUpdate *****************
 31441 ;; Defined at:
 31442 ;;		line 79 in file "nullifyBadge_displayL2.c"
 31443 ;; Parameters:    Size  Location     Type
 31444 ;;  display         1    wreg     PTR struct t_nullifyDisp
 31445 ;;		 -> badge_inst(18), 
 31446 ;; Auto vars:     Size  Location     Type
 31447 ;;  display         1   11[COMMON] PTR struct t_nullifyDisp
 31448 ;;		 -> badge_inst(18), 
 31449 ;; Return value:  Size  Location     Type
 31450 ;;                  1    wreg      void 
 31451 ;; Registers used:
 31452 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 31453 ;; Tracked objects:
 31454 ;;		On entry : 0/0
 31455 ;;		On exit  : 0/0
 31456 ;;		Unchanged: 0/0
 31457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 31458 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31459 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31460 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31461 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31462 ;;Total ram usage:        1 bytes
 31463 ;; Hardware stack levels used:    1
 31464 ;; Hardware stack levels required when called:    7
 31465 ;; This function calls:
 31466 ;;		_displayL1_Update
 31467 ;; This function is called by:
 31468 ;;		_nullifyBadge_segDisplayForceUpdate
 31469 ;; This function uses a non-reentrant model
 31470 ;;
 31471                           
 31472                           
 31473                           ;psect for function _displayL2_ForceUpdate
 31474  31DE                     _displayL2_ForceUpdate:	
 31475                           
 31476                           ;incstack = 0
 31477                           ; Regs used in _displayL2_ForceUpdate: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 31478                           ;displayL2_ForceUpdate@display stored from wreg
 31479  31DE  00FB               	movwf	displayL2_ForceUpdate@display
 31480                           
 31481                           ;nullifyBadge_displayL2.c: 80: displayL1_Update(&display->display_l1);
 31482  31DF  087B               	movf	displayL2_ForceUpdate@display,w
 31483  31E0  3E07               	addlw	7
 31484  31E1  31B2  22E8         	fcall	_displayL1_Update
 31485  31E3  0008               	return
 31486  31E4                     __end_of_displayL2_ForceUpdate:	
 31487                           
 31488                           	psect	text73
 31489  35A3                     __ptext73:	
 31490 ;; *************** function ___lwmod *****************
 31491 ;; Defined at:
 31492 ;;		line 6 in file "/Applications/microchip/xc8/v1.42/sources/common/lwmod.c"
 31493 ;; Parameters:    Size  Location     Type
 31494 ;;  divisor         2   11[BANK0 ] unsigned int 
 31495 ;;  dividend        2   13[BANK0 ] unsigned int 
 31496 ;; Auto vars:     Size  Location     Type
 31497 ;;  counter         1   10[COMMON] unsigned char 
 31498 ;; Return value:  Size  Location     Type
 31499 ;;                  2   11[BANK0 ] unsigned int 
 31500 ;; Registers used:
 31501 ;;		wreg, status,2, status,0
 31502 ;; Tracked objects:
 31503 ;;		On entry : 0/0
 31504 ;;		On exit  : 0/0
 31505 ;;		Unchanged: 0/0
 31506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 31507 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31508 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31509 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31510 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31511 ;;Total ram usage:        6 bytes
 31512 ;; Hardware stack levels used:    1
 31513 ;; Hardware stack levels required when called:    4
 31514 ;; This function calls:
 31515 ;;		Nothing
 31516 ;; This function is called by:
 31517 ;;		_marquee_speedy
 31518 ;;		_marquee
 31519 ;;		_led_roundabout
 31520 ;;		_led_curtain
 31521 ;;		_led_Parody
 31522 ;;		_menu_display_option
 31523 ;;		_locked_Main
 31524 ;;		_slot_Setup
 31525 ;;		_slot_Main
 31526 ;;		_sprintf
 31527 ;; This function uses a non-reentrant model
 31528 ;;
 31529                           
 31530                           
 31531                           ;psect for function ___lwmod
 31532  35A3                     ___lwmod:	
 31533                           
 31534                           ;incstack = 0
 31535                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
 31536  35A3  0020               	movlb	0	; select bank0
 31537  35A4  082B               	movf	___lwmod@divisor,w
 31538  35A5  042C               	iorwf	___lwmod@divisor+1,w
 31539  35A6  1903               	btfsc	3,2
 31540  35A7  2DCB               	goto	l8431
 31541  35A8  01FA               	clrf	___lwmod@counter
 31542  35A9  0AFA               	incf	___lwmod@counter,f
 31543  35AA                     l8421:	
 31544  35AA  1BAC               	btfsc	___lwmod@divisor+1,7
 31545  35AB  2DB6               	goto	l8423
 31546  35AC  3001               	movlw	1
 31547  35AD                     u4925:	
 31548  35AD  35AB               	lslf	___lwmod@divisor,f
 31549  35AE  0DAC               	rlf	___lwmod@divisor+1,f
 31550  35AF  0B89               	decfsz	9,f
 31551  35B0  2DAD               	goto	u4925
 31552  35B1  3001               	movlw	1
 31553  35B2  00F9               	movwf	??___lwmod
 31554  35B3  0879               	movf	??___lwmod,w
 31555  35B4  07FA               	addwf	___lwmod@counter,f
 31556  35B5  2DAA               	goto	l8421
 31557  35B6                     l8423:	
 31558  35B6  082C               	movf	___lwmod@divisor+1,w
 31559  35B7  022E               	subwf	___lwmod@dividend+1,w
 31560  35B8  1D03               	skipz
 31561  35B9  2DBC               	goto	u4945
 31562  35BA  082B               	movf	___lwmod@divisor,w
 31563  35BB  022D               	subwf	___lwmod@dividend,w
 31564  35BC                     u4945:	
 31565  35BC  1C03               	skipc
 31566  35BD  2DC2               	goto	l8427
 31567  35BE  082B               	movf	___lwmod@divisor,w
 31568  35BF  02AD               	subwf	___lwmod@dividend,f
 31569  35C0  082C               	movf	___lwmod@divisor+1,w
 31570  35C1  3BAE               	subwfb	___lwmod@dividend+1,f
 31571  35C2                     l8427:	
 31572  35C2  3001               	movlw	1
 31573  35C3                     u4955:	
 31574  35C3  36AC               	lsrf	___lwmod@divisor+1,f
 31575  35C4  0CAB               	rrf	___lwmod@divisor,f
 31576  35C5  0B89               	decfsz	9,f
 31577  35C6  2DC3               	goto	u4955
 31578  35C7  3001               	movlw	1
 31579  35C8  02FA               	subwf	___lwmod@counter,f
 31580  35C9  1D03               	btfss	3,2
 31581  35CA  2DB6               	goto	l8423
 31582  35CB                     l8431:	
 31583  35CB  082E               	movf	___lwmod@dividend+1,w
 31584  35CC  00AC               	movwf	?___lwmod+1
 31585  35CD  082D               	movf	___lwmod@dividend,w
 31586  35CE  00AB               	movwf	?___lwmod
 31587  35CF  0008               	return
 31588  35D0                     __end_of___lwmod:	
 31589                           
 31590                           	psect	text74
 31591  2885                     __ptext74:	
 31592 ;; *************** function ___lwdiv *****************
 31593 ;; Defined at:
 31594 ;;		line 6 in file "/Applications/microchip/xc8/v1.42/sources/common/lwdiv.c"
 31595 ;; Parameters:    Size  Location     Type
 31596 ;;  divisor         2    1[COMMON] unsigned int 
 31597 ;;  dividend        2    3[COMMON] unsigned int 
 31598 ;; Auto vars:     Size  Location     Type
 31599 ;;  quotient        2    7[COMMON] unsigned int 
 31600 ;;  counter         1    6[COMMON] unsigned char 
 31601 ;; Return value:  Size  Location     Type
 31602 ;;                  2    1[COMMON] unsigned int 
 31603 ;; Registers used:
 31604 ;;		wreg, status,2, status,0
 31605 ;; Tracked objects:
 31606 ;;		On entry : 0/0
 31607 ;;		On exit  : 0/0
 31608 ;;		Unchanged: 0/0
 31609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 31610 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31611 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31612 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31613 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31614 ;;Total ram usage:        8 bytes
 31615 ;; Hardware stack levels used:    1
 31616 ;; Hardware stack levels required when called:    4
 31617 ;; This function calls:
 31618 ;;		Nothing
 31619 ;; This function is called by:
 31620 ;;		_marquee_speedy
 31621 ;;		_marquee
 31622 ;;		_sprintf
 31623 ;; This function uses a non-reentrant model
 31624 ;;
 31625                           
 31626                           
 31627                           ;psect for function ___lwdiv
 31628  2885                     ___lwdiv:	
 31629                           
 31630                           ;incstack = 0
 31631                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 31632  2885  01F7               	clrf	___lwdiv@quotient
 31633  2886  01F8               	clrf	___lwdiv@quotient+1
 31634  2887  0871               	movf	___lwdiv@divisor,w
 31635  2888  0472               	iorwf	___lwdiv@divisor+1,w
 31636  2889  1903               	btfsc	3,2
 31637  288A  28B4               	goto	l8409
 31638  288B  01F6               	clrf	___lwdiv@counter
 31639  288C  0AF6               	incf	___lwdiv@counter,f
 31640  288D                     l8397:	
 31641  288D  1BF2               	btfsc	___lwdiv@divisor+1,7
 31642  288E  2899               	goto	l8399
 31643  288F  3001               	movlw	1
 31644  2890                     u4855:	
 31645  2890  35F1               	lslf	___lwdiv@divisor,f
 31646  2891  0DF2               	rlf	___lwdiv@divisor+1,f
 31647  2892  0B89               	decfsz	9,f
 31648  2893  2890               	goto	u4855
 31649  2894  3001               	movlw	1
 31650  2895  00F5               	movwf	??___lwdiv
 31651  2896  0875               	movf	??___lwdiv,w
 31652  2897  07F6               	addwf	___lwdiv@counter,f
 31653  2898  288D               	goto	l8397
 31654  2899                     l8399:	
 31655  2899  3001               	movlw	1
 31656  289A                     u4875:	
 31657  289A  35F7               	lslf	___lwdiv@quotient,f
 31658  289B  0DF8               	rlf	___lwdiv@quotient+1,f
 31659  289C  0B89               	decfsz	9,f
 31660  289D  289A               	goto	u4875
 31661  289E  0872               	movf	___lwdiv@divisor+1,w
 31662  289F  0274               	subwf	___lwdiv@dividend+1,w
 31663  28A0  1D03               	skipz
 31664  28A1  28A4               	goto	u4885
 31665  28A2  0871               	movf	___lwdiv@divisor,w
 31666  28A3  0273               	subwf	___lwdiv@dividend,w
 31667  28A4                     u4885:	
 31668  28A4  1C03               	skipc
 31669  28A5  28AB               	goto	l8405
 31670  28A6  0871               	movf	___lwdiv@divisor,w
 31671  28A7  02F3               	subwf	___lwdiv@dividend,f
 31672  28A8  0872               	movf	___lwdiv@divisor+1,w
 31673  28A9  3BF4               	subwfb	___lwdiv@dividend+1,f
 31674  28AA  1477               	bsf	___lwdiv@quotient,0
 31675  28AB                     l8405:	
 31676  28AB  3001               	movlw	1
 31677  28AC                     u4895:	
 31678  28AC  36F2               	lsrf	___lwdiv@divisor+1,f
 31679  28AD  0CF1               	rrf	___lwdiv@divisor,f
 31680  28AE  0B89               	decfsz	9,f
 31681  28AF  28AC               	goto	u4895
 31682  28B0  3001               	movlw	1
 31683  28B1  02F6               	subwf	___lwdiv@counter,f
 31684  28B2  1D03               	btfss	3,2
 31685  28B3  2899               	goto	l8399
 31686  28B4                     l8409:	
 31687  28B4  0878               	movf	___lwdiv@quotient+1,w
 31688  28B5  00F2               	movwf	?___lwdiv+1
 31689  28B6  0877               	movf	___lwdiv@quotient,w
 31690  28B7  00F1               	movwf	?___lwdiv
 31691  28B8  0008               	return
 31692  28B9                     __end_of___lwdiv:	
 31693                           
 31694                           	psect	text75
 31695  342B                     __ptext75:	
 31696 ;; *************** function _TMR0_Read16bitTimer *****************
 31697 ;; Defined at:
 31698 ;;		line 109 in file "mcc_generated_files/tmr0.c"
 31699 ;; Parameters:    Size  Location     Type
 31700 ;;		None
 31701 ;; Auto vars:     Size  Location     Type
 31702 ;;  readVal         2    8[COMMON] unsigned int 
 31703 ;;  readValHigh     1   11[COMMON] unsigned char 
 31704 ;;  readValLow      1   10[COMMON] unsigned char 
 31705 ;; Return value:  Size  Location     Type
 31706 ;;                  2    1[COMMON] unsigned int 
 31707 ;; Registers used:
 31708 ;;		wreg, status,2, status,0
 31709 ;; Tracked objects:
 31710 ;;		On entry : 0/0
 31711 ;;		On exit  : 0/0
 31712 ;;		Unchanged: 0/0
 31713 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 31714 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31715 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31716 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31717 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31718 ;;Total ram usage:       11 bytes
 31719 ;; Hardware stack levels used:    1
 31720 ;; Hardware stack levels required when called:    4
 31721 ;; This function calls:
 31722 ;;		Nothing
 31723 ;; This function is called by:
 31724 ;;		_scheduler_TaskRun
 31725 ;;		_schedulerExecute
 31726 ;; This function uses a non-reentrant model
 31727 ;;
 31728                           
 31729                           
 31730                           ;psect for function _TMR0_Read16bitTimer
 31731  342B                     _TMR0_Read16bitTimer:	
 31732                           
 31733                           ;tmr0.c: 111: uint16_t readVal;
 31734                           ;tmr0.c: 112: uint8_t readValLow;
 31735                           ;tmr0.c: 113: uint8_t readValHigh;
 31736                           ;tmr0.c: 115: readValLow = TMR0L;
 31737                           
 31738                           ;incstack = 0
 31739                           ; Regs used in _TMR0_Read16bitTimer: [wreg+status,2+status,0]
 31740  342B  0020               	movlb	0	; select bank0
 31741  342C  0815               	movf	21,w	;volatile
 31742  342D  00F3               	movwf	??_TMR0_Read16bitTimer
 31743  342E  0873               	movf	??_TMR0_Read16bitTimer,w
 31744  342F  00FA               	movwf	TMR0_Read16bitTimer@readValLow
 31745                           
 31746                           ;tmr0.c: 116: readValHigh = TMR0H;
 31747  3430  0816               	movf	22,w	;volatile
 31748  3431  00F3               	movwf	??_TMR0_Read16bitTimer
 31749  3432  0873               	movf	??_TMR0_Read16bitTimer,w
 31750  3433  00FB               	movwf	TMR0_Read16bitTimer@readValHigh
 31751                           
 31752                           ;tmr0.c: 117: readVal = ((uint16_t)readValHigh << 8) + readValLow;
 31753  3434  087A               	movf	TMR0_Read16bitTimer@readValLow,w
 31754  3435  00F3               	movwf	??_TMR0_Read16bitTimer
 31755  3436  01F4               	clrf	??_TMR0_Read16bitTimer+1
 31756  3437  087B               	movf	TMR0_Read16bitTimer@readValHigh,w
 31757  3438  00F5               	movwf	??_TMR0_Read16bitTimer+2
 31758  3439  01F6               	clrf	??_TMR0_Read16bitTimer+3
 31759  343A  0875               	movf	??_TMR0_Read16bitTimer+2,w
 31760  343B  00F6               	movwf	??_TMR0_Read16bitTimer+3
 31761  343C  01F5               	clrf	??_TMR0_Read16bitTimer+2
 31762  343D  0873               	movf	??_TMR0_Read16bitTimer,w
 31763  343E  0775               	addwf	??_TMR0_Read16bitTimer+2,w
 31764  343F  00F8               	movwf	TMR0_Read16bitTimer@readVal
 31765  3440  0874               	movf	??_TMR0_Read16bitTimer+1,w
 31766  3441  3D76               	addwfc	??_TMR0_Read16bitTimer+3,w
 31767  3442  00F9               	movwf	TMR0_Read16bitTimer@readVal+1
 31768                           
 31769                           ;tmr0.c: 119: return readVal;
 31770  3443  0879               	movf	TMR0_Read16bitTimer@readVal+1,w
 31771  3444  00F2               	movwf	?_TMR0_Read16bitTimer+1
 31772  3445  0878               	movf	TMR0_Read16bitTimer@readVal,w
 31773  3446  00F1               	movwf	?_TMR0_Read16bitTimer
 31774  3447  0008               	return
 31775  3448                     __end_of_TMR0_Read16bitTimer:	
 31776                           
 31777                           	psect	text76
 31778  2C83                     __ptext76:	
 31779 ;; *************** function _nullifyBadge_platformInit *****************
 31780 ;; Defined at:
 31781 ;;		line 13 in file "nullifyBadge.c"
 31782 ;; Parameters:    Size  Location     Type
 31783 ;;  badge           1    wreg     PTR struct t_nullifyBadg
 31784 ;;		 -> badge_inst(18), 
 31785 ;; Auto vars:     Size  Location     Type
 31786 ;;  badge           1   12[BANK0 ] PTR struct t_nullifyBadg
 31787 ;;		 -> badge_inst(18), 
 31788 ;; Return value:  Size  Location     Type
 31789 ;;                  1    wreg      void 
 31790 ;; Registers used:
 31791 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 31792 ;; Tracked objects:
 31793 ;;		On entry : 0/0
 31794 ;;		On exit  : 0/0
 31795 ;;		Unchanged: 0/0
 31796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 31797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31798 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31799 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31800 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31801 ;;Total ram usage:        1 bytes
 31802 ;; Hardware stack levels used:    1
 31803 ;; Hardware stack levels required when called:    9
 31804 ;; This function calls:
 31805 ;;		_OSCILLATOR_Initialize
 31806 ;;		_PIN_MANAGER_Initialize
 31807 ;;		_PWM1_Initialize
 31808 ;;		_PWM1_LoadDutyValue
 31809 ;;		_PWM2_Initialize
 31810 ;;		_PWM2_LoadDutyValue
 31811 ;;		_PWM5_Initialize
 31812 ;;		_PWM5_LoadDutyValue
 31813 ;;		_PWM6_Initialize
 31814 ;;		_PWM6_LoadDutyValue
 31815 ;;		_SPI1_Initialize
 31816 ;;		_SYSTEM_Initialize
 31817 ;;		_TMR0_Initialize
 31818 ;;		_TMR2_Initialize
 31819 ;;		_TMR4_Initialize
 31820 ;;		_displayL2_Initialize
 31821 ;; This function is called by:
 31822 ;;		_main
 31823 ;; This function uses a non-reentrant model
 31824 ;;
 31825                           
 31826                           
 31827                           ;psect for function _nullifyBadge_platformInit
 31828  2C83                     _nullifyBadge_platformInit:	
 31829                           
 31830                           ;incstack = 0
 31831                           ; Regs used in _nullifyBadge_platformInit: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 31832                           ;nullifyBadge_platformInit@badge stored from wreg
 31833  2C83  0020               	movlb	0	; select bank0
 31834  2C84  00AC               	movwf	nullifyBadge_platformInit@badge
 31835                           
 31836                           ;nullifyBadge.c: 15: SYSTEM_Initialize();
 31837  2C85  31B4  24A2  31AC   	fcall	_SYSTEM_Initialize
 31838                           
 31839                           ;nullifyBadge.c: 16: OSCILLATOR_Initialize();
 31840  2C88  31B2  220C  31AC   	fcall	_OSCILLATOR_Initialize
 31841                           
 31842                           ;nullifyBadge.c: 19: TMR0_Initialize();
 31843  2C8B  31B4  2448  31AC   	fcall	_TMR0_Initialize
 31844                           
 31845                           ;nullifyBadge.c: 20: TMR2_Initialize();
 31846  2C8E  31B2  2216  31AC   	fcall	_TMR2_Initialize
 31847                           
 31848                           ;nullifyBadge.c: 21: TMR4_Initialize();
 31849  2C91  31B2  224B  31AC   	fcall	_TMR4_Initialize
 31850                           
 31851                           ;nullifyBadge.c: 23: PIN_MANAGER_Initialize();
 31852  2C94  31AC  242E  31AC   	fcall	_PIN_MANAGER_Initialize
 31853                           
 31854                           ;nullifyBadge.c: 24: PWM1_Initialize();
 31855  2C97  31B2  2235  31AC   	fcall	_PWM1_Initialize
 31856                           
 31857                           ;nullifyBadge.c: 26: PWM2_Initialize();
 31858  2C9A  31B2  2240  31AC   	fcall	_PWM2_Initialize
 31859                           
 31860                           ;nullifyBadge.c: 27: PWM5_Initialize();
 31861  2C9D  31B2  2261  31AC   	fcall	_PWM5_Initialize
 31862                           
 31863                           ;nullifyBadge.c: 28: PWM6_Initialize();
 31864  2CA0  31B2  226D  31AC   	fcall	_PWM6_Initialize
 31865                           
 31866                           ;nullifyBadge.c: 29: SPI1_Initialize();
 31867  2CA3  31B1  21EA  31AC   	fcall	_SPI1_Initialize
 31868                           
 31869                           ;nullifyBadge.c: 32: PWM1_LoadDutyValue(128);
 31870  2CA6  3080               	movlw	128
 31871  2CA7  00F1               	movwf	PWM1_LoadDutyValue@dutyValue
 31872  2CA8  3000               	movlw	0
 31873  2CA9  00F2               	movwf	PWM1_LoadDutyValue@dutyValue+1
 31874  2CAA  31B3  2353  31AC   	fcall	_PWM1_LoadDutyValue
 31875                           
 31876                           ;nullifyBadge.c: 44: do { LATBbits.LATB7 = 1; } while(0);
 31877  2CAD  0022               	movlb	2	; select bank2
 31878  2CAE  178D               	bsf	13,7	;volatile
 31879                           
 31880                           ;nullifyBadge.c: 45: PWM2_LoadDutyValue(192);
 31881  2CAF  30C0               	movlw	192
 31882  2CB0  00F1               	movwf	PWM2_LoadDutyValue@dutyValue
 31883  2CB1  3000               	movlw	0
 31884  2CB2  00F2               	movwf	PWM2_LoadDutyValue@dutyValue+1
 31885  2CB3  31B3  2369  31AC   	fcall	_PWM2_LoadDutyValue
 31886                           
 31887                           ;nullifyBadge.c: 50: PWM5_LoadDutyValue(gamma_table_256x1k[128]);
 31888  2CB6  3000               	movlw	low ((_gamma_table_256x1k+256)| (0+32768))
 31889  2CB7  0084               	movwf	4
 31890  2CB8  30A1               	movlw	high ((_gamma_table_256x1k+256)| (0+32768))
 31891  2CB9  0085               	movwf	5
 31892  2CBA  3F00               	moviw [0]fsr0
 31893  2CBB  00F1               	movwf	PWM5_LoadDutyValue@dutyValue
 31894  2CBC  3F01               	moviw [1]fsr0
 31895  2CBD  00F2               	movwf	PWM5_LoadDutyValue@dutyValue+1
 31896  2CBE  31B3  237F  31AC   	fcall	_PWM5_LoadDutyValue
 31897                           
 31898                           ;nullifyBadge.c: 51: PWM6_LoadDutyValue(gamma_table_256x1k[128]);
 31899  2CC1  3000               	movlw	low ((_gamma_table_256x1k+256)| (0+32768))
 31900  2CC2  0084               	movwf	4
 31901  2CC3  30A1               	movlw	high ((_gamma_table_256x1k+256)| (0+32768))
 31902  2CC4  0085               	movwf	5
 31903  2CC5  3F00               	moviw [0]fsr0
 31904  2CC6  00F1               	movwf	PWM6_LoadDutyValue@dutyValue
 31905  2CC7  3F01               	moviw [1]fsr0
 31906  2CC8  00F2               	movwf	PWM6_LoadDutyValue@dutyValue+1
 31907  2CC9  31B3  2395  31AC   	fcall	_PWM6_LoadDutyValue
 31908                           
 31909                           ;nullifyBadge.c: 54: displayL2_Initialize(&badge->display);
 31910  2CCC  0020               	movlb	0	; select bank0
 31911  2CCD  082C               	movf	nullifyBadge_platformInit@badge,w
 31912  2CCE  31B5  252C         	fcall	_displayL2_Initialize
 31913                           
 31914                           ;nullifyBadge.c: 57: badge->registeredHw = 0x0;
 31915  2CD0  0020               	movlb	0	; select bank0
 31916  2CD1  082C               	movf	nullifyBadge_platformInit@badge,w
 31917  2CD2  3E11               	addlw	17
 31918  2CD3  0086               	movwf	6
 31919  2CD4  3001               	movlw	1	; select bank2/3
 31920  2CD5  0087               	movwf	7
 31921  2CD6  0181               	clrf	1
 31922  2CD7  0008               	return
 31923  2CD8                     __end_of_nullifyBadge_platformInit:	
 31924                           
 31925                           	psect	text77
 31926  352C                     __ptext77:	
 31927 ;; *************** function _displayL2_Initialize *****************
 31928 ;; Defined at:
 31929 ;;		line 12 in file "nullifyBadge_displayL2.c"
 31930 ;; Parameters:    Size  Location     Type
 31931 ;;  display         1    wreg     PTR struct t_nullifyDisp
 31932 ;;		 -> badge_inst(18), 
 31933 ;; Auto vars:     Size  Location     Type
 31934 ;;  display         1   11[BANK0 ] PTR struct t_nullifyDisp
 31935 ;;		 -> badge_inst(18), 
 31936 ;; Return value:  Size  Location     Type
 31937 ;;                  1    wreg      void 
 31938 ;; Registers used:
 31939 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 31940 ;; Tracked objects:
 31941 ;;		On entry : 0/0
 31942 ;;		On exit  : 0/0
 31943 ;;		Unchanged: 0/0
 31944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 31945 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31946 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31947 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31948 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 31949 ;;Total ram usage:        1 bytes
 31950 ;; Hardware stack levels used:    1
 31951 ;; Hardware stack levels required when called:    8
 31952 ;; This function calls:
 31953 ;;		_displayL1_Initialize
 31954 ;;		_memset
 31955 ;; This function is called by:
 31956 ;;		_nullifyBadge_platformInit
 31957 ;; This function uses a non-reentrant model
 31958 ;;
 31959                           
 31960                           
 31961                           ;psect for function _displayL2_Initialize
 31962  352C                     _displayL2_Initialize:	
 31963                           
 31964                           ;incstack = 0
 31965                           ; Regs used in _displayL2_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 31966                           ;displayL2_Initialize@display stored from wreg
 31967  352C  0020               	movlb	0	; select bank0
 31968  352D  00AB               	movwf	displayL2_Initialize@display
 31969                           
 31970                           ;nullifyBadge_displayL2.c: 13: displayL1_Initialize(&display->display_l1);
 31971  352E  082B               	movf	displayL2_Initialize@display,w
 31972  352F  3E07               	addlw	7
 31973  3530  31B3  232D  31B5   	fcall	_displayL1_Initialize
 31974                           
 31975                           ;nullifyBadge_displayL2.c: 14: memset(display->charVect, ' ', sizeof(display->charVect))
      +                          ;
 31976  3533  0020               	movlb	0	; select bank0
 31977  3534  082B               	movf	displayL2_Initialize@display,w
 31978  3535  00F1               	movwf	memset@p1
 31979  3536  3001               	movlw	1
 31980  3537  00F2               	movwf	memset@p1+1
 31981  3538  3020               	movlw	32
 31982  3539  00F3               	movwf	memset@c
 31983  353A  3000               	movlw	0
 31984  353B  00F4               	movwf	memset@c+1
 31985  353C  3004               	movlw	4
 31986  353D  00F5               	movwf	memset@n
 31987  353E  3000               	movlw	0
 31988  353F  00F6               	movwf	memset@n+1
 31989  3540  31B3  23C2         	fcall	_memset
 31990                           
 31991                           ;nullifyBadge_displayL2.c: 15: display->dpVect = 0;
 31992  3542  0020               	movlb	0	; select bank0
 31993  3543  082B               	movf	displayL2_Initialize@display,w
 31994  3544  3E04               	addlw	4
 31995  3545  0086               	movwf	6
 31996  3546  3001               	movlw	1	; select bank2/3
 31997  3547  0087               	movwf	7
 31998  3548  0181               	clrf	1
 31999                           
 32000                           ;nullifyBadge_displayL2.c: 16: display->ledVect = 0;
 32001  3549  082B               	movf	displayL2_Initialize@display,w
 32002  354A  3E05               	addlw	5
 32003  354B  0086               	movwf	6
 32004  354C  3001               	movlw	1	; select bank2/3
 32005  354D  0087               	movwf	7
 32006  354E  3000               	movlw	0
 32007  354F  3FC0               	movwi [0]fsr1
 32008  3550  3FC1               	movwi [1]fsr1
 32009  3551  0008               	return
 32010  3552                     __end_of_displayL2_Initialize:	
 32011                           
 32012                           	psect	text78
 32013  332D                     __ptext78:	
 32014 ;; *************** function _displayL1_Initialize *****************
 32015 ;; Defined at:
 32016 ;;		line 13 in file "nullifyBadge_displayL1.c"
 32017 ;; Parameters:    Size  Location     Type
 32018 ;;  display         1    wreg     PTR struct t_nullifyDisp
 32019 ;;		 -> badge_inst(18), 
 32020 ;; Auto vars:     Size  Location     Type
 32021 ;;  display         1   11[COMMON] PTR struct t_nullifyDisp
 32022 ;;		 -> badge_inst(18), 
 32023 ;; Return value:  Size  Location     Type
 32024 ;;                  1    wreg      void 
 32025 ;; Registers used:
 32026 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 32027 ;; Tracked objects:
 32028 ;;		On entry : 0/0
 32029 ;;		On exit  : 0/0
 32030 ;;		Unchanged: 0/0
 32031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32033 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32035 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32036 ;;Total ram usage:        1 bytes
 32037 ;; Hardware stack levels used:    1
 32038 ;; Hardware stack levels required when called:    7
 32039 ;; This function calls:
 32040 ;;		_displayL1_Update
 32041 ;;		_memset
 32042 ;; This function is called by:
 32043 ;;		_displayL2_Initialize
 32044 ;; This function uses a non-reentrant model
 32045 ;;
 32046                           
 32047                           
 32048                           ;psect for function _displayL1_Initialize
 32049  332D                     _displayL1_Initialize:	
 32050                           
 32051                           ;incstack = 0
 32052                           ; Regs used in _displayL1_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 32053                           ;displayL1_Initialize@display stored from wreg
 32054  332D  00FB               	movwf	displayL1_Initialize@display
 32055                           
 32056                           ;nullifyBadge_displayL1.c: 14: memset(display->displayVect, 0, sizeof(struct t_nullifyDi
      +                          splay_l1));
 32057  332E  087B               	movf	displayL1_Initialize@display,w
 32058  332F  00F1               	movwf	memset@p1
 32059  3330  3001               	movlw	1
 32060  3331  00F2               	movwf	memset@p1+1
 32061  3332  3000               	movlw	0
 32062  3333  00F3               	movwf	memset@c
 32063  3334  00F4               	movwf	memset@c+1
 32064  3335  300A               	movlw	10
 32065  3336  00F5               	movwf	memset@n
 32066  3337  3000               	movlw	0
 32067  3338  00F6               	movwf	memset@n+1
 32068  3339  31B3  23C2  31B3   	fcall	_memset
 32069                           
 32070                           ;nullifyBadge_displayL1.c: 15: displayL1_Update(display);
 32071  333C  087B               	movf	displayL1_Initialize@display,w
 32072  333D  31B2  22E8         	fcall	_displayL1_Update
 32073  333F  0008               	return
 32074  3340                     __end_of_displayL1_Initialize:	
 32075                           
 32076                           	psect	text79
 32077  33C2                     __ptext79:	
 32078 ;; *************** function _memset *****************
 32079 ;; Defined at:
 32080 ;;		line 8 in file "/Applications/microchip/xc8/v1.42/sources/common/memset.c"
 32081 ;; Parameters:    Size  Location     Type
 32082 ;;  p1              2    1[COMMON] PTR void 
 32083 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 32084 ;;		 -> menu_TaskData(14), flashy_TaskData(30), badge_inst(18), NULL(0), 
 32085 ;;  c               2    3[COMMON] int 
 32086 ;;  n               2    5[COMMON] unsigned int 
 32087 ;; Auto vars:     Size  Location     Type
 32088 ;;  p               2    7[COMMON] PTR unsigned char 
 32089 ;;		 -> matrix_TaskData(31), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 32090 ;;		 -> menu_TaskData(14), flashy_TaskData(30), badge_inst(18), NULL(0), 
 32091 ;; Return value:  Size  Location     Type
 32092 ;;                  2    1[COMMON] PTR void 
 32093 ;; Registers used:
 32094 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 32095 ;; Tracked objects:
 32096 ;;		On entry : 0/0
 32097 ;;		On exit  : 0/0
 32098 ;;		Unchanged: 0/0
 32099 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32100 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32101 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32102 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32103 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32104 ;;Total ram usage:        8 bytes
 32105 ;; Hardware stack levels used:    1
 32106 ;; Hardware stack levels required when called:    4
 32107 ;; This function calls:
 32108 ;;		Nothing
 32109 ;; This function is called by:
 32110 ;;		_displayL1_Initialize
 32111 ;;		_displayL2_Initialize
 32112 ;;		_slot_Setup
 32113 ;;		_slot_Main
 32114 ;; This function uses a non-reentrant model
 32115 ;;
 32116                           
 32117                           
 32118                           ;psect for function _memset
 32119  33C2                     _memset:	
 32120                           
 32121                           ;incstack = 0
 32122                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
 32123  33C2  0872               	movf	memset@p1+1,w
 32124  33C3  00F8               	movwf	memset@p+1
 32125  33C4  0871               	movf	memset@p1,w
 32126  33C5  00F7               	movwf	memset@p
 32127  33C6                     l8497:	
 32128  33C6  3001               	movlw	1
 32129  33C7  02F5               	subwf	memset@n,f
 32130  33C8  3000               	movlw	0
 32131  33C9  3BF6               	subwfb	memset@n+1,f
 32132  33CA  0A75               	incf	memset@n,w
 32133  33CB  1903               	btfsc	3,2
 32134  33CC  0A76               	incf	memset@n+1,w
 32135  33CD  1903               	btfsc	3,2
 32136  33CE  0008               	return
 32137  33CF  0877               	movf	memset@p,w
 32138  33D0  0086               	movwf	6
 32139  33D1  0878               	movf	memset@p+1,w
 32140  33D2  0087               	movwf	7
 32141  33D3  0873               	movf	memset@c,w
 32142  33D4  0081               	movwf	1
 32143  33D5  3001               	movlw	1
 32144  33D6  07F7               	addwf	memset@p,f
 32145  33D7  3000               	movlw	0
 32146  33D8  3DF8               	addwfc	memset@p+1,f
 32147  33D9  2BC6               	goto	l8497
 32148  33DA                     __end_of_memset:	
 32149                           ;	Return value of _memset is never used
 32150                           
 32151                           
 32152                           	psect	text80
 32153  32E8                     __ptext80:	
 32154 ;; *************** function _displayL1_Update *****************
 32155 ;; Defined at:
 32156 ;;		line 97 in file "nullifyBadge_displayL1.c"
 32157 ;; Parameters:    Size  Location     Type
 32158 ;;  display         1    wreg     PTR struct t_nullifyDisp
 32159 ;;		 -> badge_inst(18), 
 32160 ;; Auto vars:     Size  Location     Type
 32161 ;;  display         1   10[BANK0 ] PTR struct t_nullifyDisp
 32162 ;;		 -> badge_inst(18), 
 32163 ;;  tmpRxBuf       10    0[BANK0 ] unsigned char [10]
 32164 ;; Return value:  Size  Location     Type
 32165 ;;                  1    wreg      void 
 32166 ;; Registers used:
 32167 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 32168 ;; Tracked objects:
 32169 ;;		On entry : 0/0
 32170 ;;		On exit  : 0/0
 32171 ;;		Unchanged: 0/0
 32172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32173 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32174 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32175 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32176 ;;      Totals:         2      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32177 ;;Total ram usage:       13 bytes
 32178 ;; Hardware stack levels used:    1
 32179 ;; Hardware stack levels required when called:    6
 32180 ;; This function calls:
 32181 ;;		_SPI1_Exchange8bitBuffer
 32182 ;; This function is called by:
 32183 ;;		_displayL1_Initialize
 32184 ;;		_displayL2_ForceUpdate
 32185 ;;		_displayL2_EraseSegDisplay
 32186 ;;		_displayL2_SetUserLeds
 32187 ;;		_displayL2_ClrUserLeds
 32188 ;;		_displayL2_PrintChar
 32189 ;;		_displayL2_PrintStr
 32190 ;; This function uses a non-reentrant model
 32191 ;;
 32192                           
 32193                           
 32194                           ;psect for function _displayL1_Update
 32195  32E8                     _displayL1_Update:	
 32196                           
 32197                           ;incstack = 0
 32198                           ; Regs used in _displayL1_Update: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 32199                           ;displayL1_Update@display stored from wreg
 32200  32E8  0020               	movlb	0	; select bank0
 32201  32E9  00AA               	movwf	displayL1_Update@display
 32202                           
 32203                           ;nullifyBadge_displayL1.c: 98: u8 tmpRxBuf[10];
 32204                           ;nullifyBadge_displayL1.c: 100: SPI1_Exchange8bitBuffer(display->displayVect, 10, tmpRxB
      +                          uf);
 32205  32EA  300A               	movlw	10
 32206  32EB  00F9               	movwf	??_displayL1_Update
 32207  32EC  0879               	movf	??_displayL1_Update,w
 32208  32ED  00F2               	movwf	SPI1_Exchange8bitBuffer@bufLen
 32209  32EE  3020               	movlw	(low (displayL1_Update@tmpRxBuf| 0))& (0+255)
 32210  32EF  00FA               	movwf	??_displayL1_Update+1
 32211  32F0  087A               	movf	??_displayL1_Update+1,w
 32212  32F1  00F3               	movwf	SPI1_Exchange8bitBuffer@dataOut
 32213  32F2  082A               	movf	displayL1_Update@display,w
 32214  32F3  31AB  233A         	fcall	_SPI1_Exchange8bitBuffer
 32215                           
 32216                           ;nullifyBadge_displayL1.c: 101: do { LATCbits.LATC7 = 1; } while(0);
 32217  32F5  0022               	movlb	2	; select bank2
 32218  32F6  178E               	bsf	14,7	;volatile
 32219                           
 32220                           ;nullifyBadge_displayL1.c: 102: do { LATCbits.LATC7 = 0; } while(0);
 32221  32F7  138E               	bcf	14,7	;volatile
 32222  32F8  0008               	return
 32223  32F9                     __end_of_displayL1_Update:	
 32224                           
 32225                           	psect	text81
 32226  2B3A                     __ptext81:	
 32227 ;; *************** function _SPI1_Exchange8bitBuffer *****************
 32228 ;; Defined at:
 32229 ;;		line 91 in file "mcc_generated_files/spi1.c"
 32230 ;; Parameters:    Size  Location     Type
 32231 ;;  dataIn          1    wreg     PTR unsigned char 
 32232 ;;		 -> badge_inst(18), 
 32233 ;;  bufLen          1    2[COMMON] unsigned char 
 32234 ;;  dataOut         1    3[COMMON] PTR unsigned char 
 32235 ;;		 -> displayL1_Update@tmpRxBuf(10), 
 32236 ;; Auto vars:     Size  Location     Type
 32237 ;;  dataIn          1    7[COMMON] PTR unsigned char 
 32238 ;;		 -> badge_inst(18), 
 32239 ;;  bytesWritten    1    8[COMMON] unsigned char 
 32240 ;; Return value:  Size  Location     Type
 32241 ;;                  1    wreg      unsigned char 
 32242 ;; Registers used:
 32243 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 32244 ;; Tracked objects:
 32245 ;;		On entry : 0/0
 32246 ;;		On exit  : 0/0
 32247 ;;		Unchanged: 0/0
 32248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32249 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32250 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32251 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32252 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32253 ;;Total ram usage:        7 bytes
 32254 ;; Hardware stack levels used:    1
 32255 ;; Hardware stack levels required when called:    5
 32256 ;; This function calls:
 32257 ;;		_SPI1_Exchange8bit
 32258 ;; This function is called by:
 32259 ;;		_displayL1_Update
 32260 ;; This function uses a non-reentrant model
 32261 ;;
 32262                           
 32263                           
 32264                           ;psect for function _SPI1_Exchange8bitBuffer
 32265  2B3A                     _SPI1_Exchange8bitBuffer:	
 32266                           
 32267                           ;incstack = 0
 32268                           ; Regs used in _SPI1_Exchange8bitBuffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 32269                           ;SPI1_Exchange8bitBuffer@dataIn stored from wreg
 32270  2B3A  00F7               	movwf	SPI1_Exchange8bitBuffer@dataIn
 32271                           
 32272                           ;spi1.c: 93: uint8_t bytesWritten = 0;
 32273  2B3B  01F8               	clrf	SPI1_Exchange8bitBuffer@bytesWritten
 32274                           
 32275                           ;spi1.c: 95: if(bufLen != 0)
 32276  2B3C  0872               	movf	SPI1_Exchange8bitBuffer@bufLen,w
 32277  2B3D  1903               	btfsc	3,2
 32278  2B3E  0008               	return
 32279                           
 32280                           ;spi1.c: 96: {
 32281                           ;spi1.c: 97: if(dataIn != (0))
 32282  2B3F  0877               	movf	SPI1_Exchange8bitBuffer@dataIn,w
 32283  2B40  1D03               	btfss	3,2
 32284  2B41  2B6A               	goto	l8243
 32285  2B42  2B6F               	goto	l8245
 32286  2B43                     l8235:	
 32287                           ;spi1.c: 98: {
 32288                           ;spi1.c: 99: while(bytesWritten < bufLen)
 32289                           
 32290                           
 32291                           ;spi1.c: 100: {
 32292                           ;spi1.c: 101: if(dataOut == (0))
 32293  2B43  0873               	movf	SPI1_Exchange8bitBuffer@dataOut,w
 32294  2B44  1D03               	btfss	3,2
 32295  2B45  2B52               	goto	l8239
 32296                           
 32297                           ;spi1.c: 102: {
 32298                           ;spi1.c: 103: SPI1_Exchange8bit(dataIn[bytesWritten]);
 32299  2B46  0878               	movf	SPI1_Exchange8bitBuffer@bytesWritten,w
 32300  2B47  0777               	addwf	SPI1_Exchange8bitBuffer@dataIn,w
 32301  2B48  00F4               	movwf	??_SPI1_Exchange8bitBuffer
 32302  2B49  0874               	movf	??_SPI1_Exchange8bitBuffer,w
 32303  2B4A  0086               	movwf	6
 32304  2B4B  3001               	movlw	1	; select bank2/3
 32305  2B4C  0087               	movwf	7
 32306  2B4D  0801               	movf	1,w
 32307  2B4E  31B1  21FA  31AB   	fcall	_SPI1_Exchange8bit
 32308                           
 32309                           ;spi1.c: 104: }
 32310  2B51  2B66               	goto	l8241
 32311  2B52                     l8239:	
 32312                           
 32313                           ;spi1.c: 105: else
 32314                           ;spi1.c: 106: {
 32315                           ;spi1.c: 107: dataOut[bytesWritten] = SPI1_Exchange8bit(dataIn[bytesWritten]);
 32316  2B52  0878               	movf	SPI1_Exchange8bitBuffer@bytesWritten,w
 32317  2B53  0777               	addwf	SPI1_Exchange8bitBuffer@dataIn,w
 32318  2B54  00F4               	movwf	??_SPI1_Exchange8bitBuffer
 32319  2B55  0874               	movf	??_SPI1_Exchange8bitBuffer,w
 32320  2B56  0086               	movwf	6
 32321  2B57  3001               	movlw	1	; select bank2/3
 32322  2B58  0087               	movwf	7
 32323  2B59  0801               	movf	1,w
 32324  2B5A  31B1  21FA  31AB   	fcall	_SPI1_Exchange8bit
 32325  2B5D  00F5               	movwf	??_SPI1_Exchange8bitBuffer+1
 32326  2B5E  0878               	movf	SPI1_Exchange8bitBuffer@bytesWritten,w
 32327  2B5F  0773               	addwf	SPI1_Exchange8bitBuffer@dataOut,w
 32328  2B60  00F6               	movwf	??_SPI1_Exchange8bitBuffer+2
 32329  2B61  0876               	movf	??_SPI1_Exchange8bitBuffer+2,w
 32330  2B62  0086               	movwf	6
 32331  2B63  0187               	clrf	7
 32332  2B64  0875               	movf	??_SPI1_Exchange8bitBuffer+1,w
 32333  2B65  0081               	movwf	1
 32334  2B66                     l8241:	
 32335                           
 32336                           ;spi1.c: 108: }
 32337                           ;spi1.c: 110: bytesWritten++;
 32338  2B66  3001               	movlw	1
 32339  2B67  00F4               	movwf	??_SPI1_Exchange8bitBuffer
 32340  2B68  0874               	movf	??_SPI1_Exchange8bitBuffer,w
 32341  2B69  07F8               	addwf	SPI1_Exchange8bitBuffer@bytesWritten,f
 32342  2B6A                     l8243:	
 32343  2B6A  0872               	movf	SPI1_Exchange8bitBuffer@bufLen,w
 32344  2B6B  0278               	subwf	SPI1_Exchange8bitBuffer@bytesWritten,w
 32345  2B6C  1803               	btfsc	3,0
 32346  2B6D  0008               	return
 32347  2B6E  2B43               	goto	l8235
 32348  2B6F                     l8245:	
 32349                           ;spi1.c: 111: }
 32350                           ;spi1.c: 112: }
 32351                           
 32352                           
 32353                           ;spi1.c: 113: else
 32354                           ;spi1.c: 114: {
 32355                           ;spi1.c: 115: if(dataOut != (0))
 32356  2B6F  0873               	movf	SPI1_Exchange8bitBuffer@dataOut,w
 32357  2B70  1903               	btfsc	3,2
 32358  2B71  0008               	return
 32359  2B72                     l8253:	
 32360  2B72  0872               	movf	SPI1_Exchange8bitBuffer@bufLen,w
 32361  2B73  0278               	subwf	SPI1_Exchange8bitBuffer@bytesWritten,w
 32362  2B74  1803               	btfsc	3,0
 32363  2B75  0008               	return
 32364                           
 32365                           ;spi1.c: 118: {
 32366                           ;spi1.c: 119: dataOut[bytesWritten] = SPI1_Exchange8bit(0x0);
 32367                           
 32368                           ;spi1.c: 116: {
 32369                           ;spi1.c: 117: while(bytesWritten < bufLen )
 32370  2B76  3000               	movlw	0
 32371  2B77  31B1  21FA  31AB   	fcall	_SPI1_Exchange8bit
 32372  2B7A  00F4               	movwf	??_SPI1_Exchange8bitBuffer
 32373  2B7B  0878               	movf	SPI1_Exchange8bitBuffer@bytesWritten,w
 32374  2B7C  0773               	addwf	SPI1_Exchange8bitBuffer@dataOut,w
 32375  2B7D  00F5               	movwf	??_SPI1_Exchange8bitBuffer+1
 32376  2B7E  0875               	movf	??_SPI1_Exchange8bitBuffer+1,w
 32377  2B7F  0086               	movwf	6
 32378  2B80  0187               	clrf	7
 32379  2B81  0874               	movf	??_SPI1_Exchange8bitBuffer,w
 32380  2B82  0081               	movwf	1
 32381                           
 32382                           ;spi1.c: 121: bytesWritten++;
 32383  2B83  3001               	movlw	1
 32384  2B84  00F4               	movwf	??_SPI1_Exchange8bitBuffer
 32385  2B85  0874               	movf	??_SPI1_Exchange8bitBuffer,w
 32386  2B86  07F8               	addwf	SPI1_Exchange8bitBuffer@bytesWritten,f
 32387  2B87  2B72               	goto	l8253
 32388  2B88                     __end_of_SPI1_Exchange8bitBuffer:	
 32389                           ;spi1.c: 122: }
 32390                           ;spi1.c: 123: }
 32391                           ;spi1.c: 124: }
 32392                           ;spi1.c: 125: }
 32393                           ;spi1.c: 127: return bytesWritten;
 32394                           ;	Return value of _SPI1_Exchange8bitBuffer is never used
 32395                           
 32396                           
 32397                           	psect	text82
 32398  31FA                     __ptext82:	
 32399 ;; *************** function _SPI1_Exchange8bit *****************
 32400 ;; Defined at:
 32401 ;;		line 77 in file "mcc_generated_files/spi1.c"
 32402 ;; Parameters:    Size  Location     Type
 32403 ;;  data            1    wreg     unsigned char 
 32404 ;; Auto vars:     Size  Location     Type
 32405 ;;  data            1    1[COMMON] unsigned char 
 32406 ;; Return value:  Size  Location     Type
 32407 ;;                  1    wreg      unsigned char 
 32408 ;; Registers used:
 32409 ;;		wreg
 32410 ;; Tracked objects:
 32411 ;;		On entry : 0/0
 32412 ;;		On exit  : 0/0
 32413 ;;		Unchanged: 0/0
 32414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32415 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32416 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32417 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32418 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32419 ;;Total ram usage:        1 bytes
 32420 ;; Hardware stack levels used:    1
 32421 ;; Hardware stack levels required when called:    4
 32422 ;; This function calls:
 32423 ;;		Nothing
 32424 ;; This function is called by:
 32425 ;;		_SPI1_Exchange8bitBuffer
 32426 ;; This function uses a non-reentrant model
 32427 ;;
 32428                           
 32429                           
 32430                           ;psect for function _SPI1_Exchange8bit
 32431  31FA                     _SPI1_Exchange8bit:	
 32432                           
 32433                           ;incstack = 0
 32434                           ; Regs used in _SPI1_Exchange8bit: [wreg]
 32435                           ;SPI1_Exchange8bit@data stored from wreg
 32436  31FA  00F1               	movwf	SPI1_Exchange8bit@data
 32437                           
 32438                           ;spi1.c: 80: SSP1CON1bits.WCOL = 0;
 32439  31FB  0024               	movlb	4	; select bank4
 32440  31FC  1395               	bcf	21,7	;volatile
 32441                           
 32442                           ;spi1.c: 82: SSP1BUF = data;
 32443  31FD  0871               	movf	SPI1_Exchange8bit@data,w
 32444  31FE  0091               	movwf	17	;volatile
 32445  31FF                     l18:	
 32446                           ;spi1.c: 85: {
 32447                           
 32448                           ;spi1.c: 84: while(SSP1STATbits.BF == 0x0)
 32449                           
 32450  31FF  1C14               	btfss	20,0	;volatile
 32451  3200  29FF               	goto	l18
 32452                           
 32453                           ;spi1.c: 86: }
 32454                           ;spi1.c: 88: return (SSP1BUF);
 32455  3201  0811               	movf	17,w	;volatile
 32456  3202  0008               	return
 32457  3203                     __end_of_SPI1_Exchange8bit:	
 32458                           
 32459                           	psect	text83
 32460  34A2                     __ptext83:	
 32461 ;; *************** function _SYSTEM_Initialize *****************
 32462 ;; Defined at:
 32463 ;;		line 76 in file "mcc_generated_files/mcc.c"
 32464 ;; Parameters:    Size  Location     Type
 32465 ;;		None
 32466 ;; Auto vars:     Size  Location     Type
 32467 ;;		None
 32468 ;; Return value:  Size  Location     Type
 32469 ;;                  1    wreg      void 
 32470 ;; Registers used:
 32471 ;;		wreg, status,2, status,0, pclath, cstack
 32472 ;; Tracked objects:
 32473 ;;		On entry : 0/0
 32474 ;;		On exit  : 0/0
 32475 ;;		Unchanged: 0/0
 32476 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32477 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32478 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32479 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32480 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32481 ;;Total ram usage:        0 bytes
 32482 ;; Hardware stack levels used:    1
 32483 ;; Hardware stack levels required when called:    6
 32484 ;; This function calls:
 32485 ;;		_OSCILLATOR_Initialize
 32486 ;;		_PIN_MANAGER_Initialize
 32487 ;;		_PWM1_Initialize
 32488 ;;		_PWM2_Initialize
 32489 ;;		_PWM5_Initialize
 32490 ;;		_PWM6_Initialize
 32491 ;;		_SPI1_Initialize
 32492 ;;		_TMR0_Initialize
 32493 ;;		_TMR2_Initialize
 32494 ;;		_TMR4_Initialize
 32495 ;;		_WDT_Initialize
 32496 ;; This function is called by:
 32497 ;;		_nullifyBadge_platformInit
 32498 ;; This function uses a non-reentrant model
 32499 ;;
 32500                           
 32501                           
 32502                           ;psect for function _SYSTEM_Initialize
 32503  34A2                     _SYSTEM_Initialize:	
 32504                           
 32505                           ;mcc.c: 79: PIN_MANAGER_Initialize();
 32506                           
 32507                           ;incstack = 0
 32508                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
 32509  34A2  31AC  242E  31B4   	fcall	_PIN_MANAGER_Initialize
 32510                           
 32511                           ;mcc.c: 80: OSCILLATOR_Initialize();
 32512  34A5  31B2  220C  31B4   	fcall	_OSCILLATOR_Initialize
 32513                           
 32514                           ;mcc.c: 81: WDT_Initialize();
 32515  34A8  31B1  21CF  31B4   	fcall	_WDT_Initialize
 32516                           
 32517                           ;mcc.c: 82: SPI1_Initialize();
 32518  34AB  31B1  21EA  31B4   	fcall	_SPI1_Initialize
 32519                           
 32520                           ;mcc.c: 83: PWM6_Initialize();
 32521  34AE  31B2  226D  31B4   	fcall	_PWM6_Initialize
 32522                           
 32523                           ;mcc.c: 84: PWM1_Initialize();
 32524  34B1  31B2  2235  31B4   	fcall	_PWM1_Initialize
 32525                           
 32526                           ;mcc.c: 85: PWM2_Initialize();
 32527  34B4  31B2  2240  31B4   	fcall	_PWM2_Initialize
 32528                           
 32529                           ;mcc.c: 86: TMR4_Initialize();
 32530  34B7  31B2  224B  31B4   	fcall	_TMR4_Initialize
 32531                           
 32532                           ;mcc.c: 87: TMR2_Initialize();
 32533  34BA  31B2  2216  31B4   	fcall	_TMR2_Initialize
 32534                           
 32535                           ;mcc.c: 88: PWM5_Initialize();
 32536  34BD  31B2  2261  31B4   	fcall	_PWM5_Initialize
 32537                           
 32538                           ;mcc.c: 89: TMR0_Initialize();
 32539  34C0  31B4  2448         	fcall	_TMR0_Initialize
 32540  34C2  0008               	return
 32541  34C3                     __end_of_SYSTEM_Initialize:	
 32542                           
 32543                           	psect	text84
 32544  31CF                     __ptext84:	
 32545 ;; *************** function _WDT_Initialize *****************
 32546 ;; Defined at:
 32547 ;;		line 110 in file "mcc_generated_files/mcc.c"
 32548 ;; Parameters:    Size  Location     Type
 32549 ;;		None
 32550 ;; Auto vars:     Size  Location     Type
 32551 ;;		None
 32552 ;; Return value:  Size  Location     Type
 32553 ;;                  1    wreg      void 
 32554 ;; Registers used:
 32555 ;;		wreg
 32556 ;; Tracked objects:
 32557 ;;		On entry : 0/0
 32558 ;;		On exit  : 0/0
 32559 ;;		Unchanged: 0/0
 32560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32561 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32562 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32563 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32564 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32565 ;;Total ram usage:        0 bytes
 32566 ;; Hardware stack levels used:    1
 32567 ;; Hardware stack levels required when called:    4
 32568 ;; This function calls:
 32569 ;;		Nothing
 32570 ;; This function is called by:
 32571 ;;		_SYSTEM_Initialize
 32572 ;; This function uses a non-reentrant model
 32573 ;;
 32574                           
 32575                           
 32576                           ;psect for function _WDT_Initialize
 32577  31CF                     _WDT_Initialize:	
 32578                           
 32579                           ;mcc.c: 113: WDTCON = 0x16;
 32580                           
 32581                           ;incstack = 0
 32582                           ; Regs used in _WDT_Initialize: [wreg]
 32583  31CF  3016               	movlw	22
 32584  31D0  0021               	movlb	1	; select bank1
 32585  31D1  0097               	movwf	23	;volatile
 32586  31D2  0008               	return
 32587  31D3                     __end_of_WDT_Initialize:	
 32588                           
 32589                           	psect	text85
 32590  324B                     __ptext85:	
 32591 ;; *************** function _TMR4_Initialize *****************
 32592 ;; Defined at:
 32593 ;;		line 63 in file "mcc_generated_files/tmr4.c"
 32594 ;; Parameters:    Size  Location     Type
 32595 ;;		None
 32596 ;; Auto vars:     Size  Location     Type
 32597 ;;		None
 32598 ;; Return value:  Size  Location     Type
 32599 ;;                  1    wreg      void 
 32600 ;; Registers used:
 32601 ;;		wreg, status,2, status,0, pclath, cstack
 32602 ;; Tracked objects:
 32603 ;;		On entry : 0/0
 32604 ;;		On exit  : 0/0
 32605 ;;		Unchanged: 0/0
 32606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32607 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32608 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32609 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32610 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32611 ;;Total ram usage:        0 bytes
 32612 ;; Hardware stack levels used:    1
 32613 ;; Hardware stack levels required when called:    5
 32614 ;; This function calls:
 32615 ;;		_TMR4_StartTimer
 32616 ;; This function is called by:
 32617 ;;		_SYSTEM_Initialize
 32618 ;;		_nullifyBadge_platformInit
 32619 ;; This function uses a non-reentrant model
 32620 ;;
 32621                           
 32622                           
 32623                           ;psect for function _TMR4_Initialize
 32624  324B                     _TMR4_Initialize:	
 32625                           
 32626                           ;tmr4.c: 68: T4CON = 0x7B;
 32627                           
 32628                           ;incstack = 0
 32629                           ; Regs used in _TMR4_Initialize: [wreg+status,2+status,0+pclath+cstack]
 32630  324B  307B               	movlw	123
 32631  324C  0028               	movlb	8	; select bank8
 32632  324D  0097               	movwf	23	;volatile
 32633                           
 32634                           ;tmr4.c: 71: PR4 = 0xFF;
 32635  324E  30FF               	movlw	255
 32636  324F  0096               	movwf	22	;volatile
 32637                           
 32638                           ;tmr4.c: 74: TMR4 = 0x00;
 32639  3250  0195               	clrf	21	;volatile
 32640                           
 32641                           ;tmr4.c: 77: PIR2bits.TMR4IF = 0;
 32642  3251  0020               	movlb	0	; select bank0
 32643  3252  1092               	bcf	18,1	;volatile
 32644                           
 32645                           ;tmr4.c: 80: TMR4_StartTimer();
 32646  3253  31B1  21C9         	fcall	_TMR4_StartTimer
 32647  3255  0008               	return
 32648  3256                     __end_of_TMR4_Initialize:	
 32649                           
 32650                           	psect	text86
 32651  31C9                     __ptext86:	
 32652 ;; *************** function _TMR4_StartTimer *****************
 32653 ;; Defined at:
 32654 ;;		line 83 in file "mcc_generated_files/tmr4.c"
 32655 ;; Parameters:    Size  Location     Type
 32656 ;;		None
 32657 ;; Auto vars:     Size  Location     Type
 32658 ;;		None
 32659 ;; Return value:  Size  Location     Type
 32660 ;;                  1    wreg      void 
 32661 ;; Registers used:
 32662 ;;		None
 32663 ;; Tracked objects:
 32664 ;;		On entry : 0/0
 32665 ;;		On exit  : 0/0
 32666 ;;		Unchanged: 0/0
 32667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32669 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32670 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32671 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32672 ;;Total ram usage:        0 bytes
 32673 ;; Hardware stack levels used:    1
 32674 ;; Hardware stack levels required when called:    4
 32675 ;; This function calls:
 32676 ;;		Nothing
 32677 ;; This function is called by:
 32678 ;;		_TMR4_Initialize
 32679 ;; This function uses a non-reentrant model
 32680 ;;
 32681                           
 32682                           
 32683                           ;psect for function _TMR4_StartTimer
 32684  31C9                     _TMR4_StartTimer:	
 32685                           
 32686                           ;tmr4.c: 86: T4CONbits.TMR4ON = 1;
 32687                           
 32688                           ;incstack = 0
 32689                           ; Regs used in _TMR4_StartTimer: []
 32690  31C9  0028               	movlb	8	; select bank8
 32691  31CA  1517               	bsf	23,2	;volatile
 32692  31CB  0008               	return
 32693  31CC                     __end_of_TMR4_StartTimer:	
 32694                           
 32695                           	psect	text87
 32696  3216                     __ptext87:	
 32697 ;; *************** function _TMR2_Initialize *****************
 32698 ;; Defined at:
 32699 ;;		line 63 in file "mcc_generated_files/tmr2.c"
 32700 ;; Parameters:    Size  Location     Type
 32701 ;;		None
 32702 ;; Auto vars:     Size  Location     Type
 32703 ;;		None
 32704 ;; Return value:  Size  Location     Type
 32705 ;;                  1    wreg      void 
 32706 ;; Registers used:
 32707 ;;		wreg, status,2, status,0, pclath, cstack
 32708 ;; Tracked objects:
 32709 ;;		On entry : 0/0
 32710 ;;		On exit  : 0/0
 32711 ;;		Unchanged: 0/0
 32712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32713 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32714 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32715 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32716 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32717 ;;Total ram usage:        0 bytes
 32718 ;; Hardware stack levels used:    1
 32719 ;; Hardware stack levels required when called:    5
 32720 ;; This function calls:
 32721 ;;		_TMR2_StartTimer
 32722 ;; This function is called by:
 32723 ;;		_SYSTEM_Initialize
 32724 ;;		_nullifyBadge_platformInit
 32725 ;; This function uses a non-reentrant model
 32726 ;;
 32727                           
 32728                           
 32729                           ;psect for function _TMR2_Initialize
 32730  3216                     _TMR2_Initialize:	
 32731                           
 32732                           ;tmr2.c: 68: T2CON = 0x01;
 32733                           
 32734                           ;incstack = 0
 32735                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
 32736  3216  3001               	movlw	1
 32737  3217  0020               	movlb	0	; select bank0
 32738  3218  009F               	movwf	31	;volatile
 32739                           
 32740                           ;tmr2.c: 71: PR2 = 0x4A;
 32741  3219  304A               	movlw	74
 32742  321A  009E               	movwf	30	;volatile
 32743                           
 32744                           ;tmr2.c: 74: TMR2 = 0x00;
 32745  321B  019D               	clrf	29	;volatile
 32746                           
 32747                           ;tmr2.c: 77: PIR1bits.TMR2IF = 0;
 32748  321C  1091               	bcf	17,1	;volatile
 32749                           
 32750                           ;tmr2.c: 80: TMR2_StartTimer();
 32751  321D  31B1  21C6         	fcall	_TMR2_StartTimer
 32752  321F  0008               	return
 32753  3220                     __end_of_TMR2_Initialize:	
 32754                           
 32755                           	psect	text88
 32756  31C6                     __ptext88:	
 32757 ;; *************** function _TMR2_StartTimer *****************
 32758 ;; Defined at:
 32759 ;;		line 83 in file "mcc_generated_files/tmr2.c"
 32760 ;; Parameters:    Size  Location     Type
 32761 ;;		None
 32762 ;; Auto vars:     Size  Location     Type
 32763 ;;		None
 32764 ;; Return value:  Size  Location     Type
 32765 ;;                  1    wreg      void 
 32766 ;; Registers used:
 32767 ;;		None
 32768 ;; Tracked objects:
 32769 ;;		On entry : 0/0
 32770 ;;		On exit  : 0/0
 32771 ;;		Unchanged: 0/0
 32772 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32773 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32774 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32775 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32776 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32777 ;;Total ram usage:        0 bytes
 32778 ;; Hardware stack levels used:    1
 32779 ;; Hardware stack levels required when called:    4
 32780 ;; This function calls:
 32781 ;;		Nothing
 32782 ;; This function is called by:
 32783 ;;		_TMR2_Initialize
 32784 ;; This function uses a non-reentrant model
 32785 ;;
 32786                           
 32787                           
 32788                           ;psect for function _TMR2_StartTimer
 32789  31C6                     _TMR2_StartTimer:	
 32790                           
 32791                           ;tmr2.c: 86: T2CONbits.TMR2ON = 1;
 32792                           
 32793                           ;incstack = 0
 32794                           ; Regs used in _TMR2_StartTimer: []
 32795  31C6  0020               	movlb	0	; select bank0
 32796  31C7  151F               	bsf	31,2	;volatile
 32797  31C8  0008               	return
 32798  31C9                     __end_of_TMR2_StartTimer:	
 32799                           
 32800                           	psect	text89
 32801  3448                     __ptext89:	
 32802 ;; *************** function _TMR0_Initialize *****************
 32803 ;; Defined at:
 32804 ;;		line 65 in file "mcc_generated_files/tmr0.c"
 32805 ;; Parameters:    Size  Location     Type
 32806 ;;		None
 32807 ;; Auto vars:     Size  Location     Type
 32808 ;;		None
 32809 ;; Return value:  Size  Location     Type
 32810 ;;                  1    wreg      void 
 32811 ;; Registers used:
 32812 ;;		wreg, status,2, status,0, pclath, cstack
 32813 ;; Tracked objects:
 32814 ;;		On entry : 0/0
 32815 ;;		On exit  : 0/0
 32816 ;;		Unchanged: 0/0
 32817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32818 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32819 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32820 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32821 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32822 ;;Total ram usage:        0 bytes
 32823 ;; Hardware stack levels used:    1
 32824 ;; Hardware stack levels required when called:    5
 32825 ;; This function calls:
 32826 ;;		_TMR0_SetInterruptHandler
 32827 ;;		_TMR0_StartTimer
 32828 ;; This function is called by:
 32829 ;;		_SYSTEM_Initialize
 32830 ;;		_nullifyBadge_platformInit
 32831 ;; This function uses a non-reentrant model
 32832 ;;
 32833                           
 32834                           
 32835                           ;psect for function _TMR0_Initialize
 32836  3448                     _TMR0_Initialize:	
 32837                           
 32838                           ;tmr0.c: 70: T0CON0 = 0x10;
 32839                           
 32840                           ;incstack = 0
 32841                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
 32842  3448  3010               	movlw	16
 32843  3449  0020               	movlb	0	; select bank0
 32844  344A  0097               	movwf	23	;volatile
 32845                           
 32846                           ;tmr0.c: 73: T0CON1 = 0x4D;
 32847  344B  304D               	movlw	77
 32848  344C  0098               	movwf	24	;volatile
 32849                           
 32850                           ;tmr0.c: 76: TMR0H = 0xFF;
 32851  344D  30FF               	movlw	255
 32852  344E  0096               	movwf	22	;volatile
 32853                           
 32854                           ;tmr0.c: 79: TMR0L = 0xFF;
 32855  344F  30FF               	movlw	255
 32856  3450  0095               	movwf	21	;volatile
 32857                           
 32858                           ;tmr0.c: 82: timer0ReloadVal16bit = (TMR0H << 8) | TMR0L;
 32859  3451  0816               	movf	22,w	;volatile
 32860  3452  0021               	movlb	1	; select bank1
 32861  3453  00C1               	movwf	(_timer0ReloadVal16bit+1)^(0+128)	;volatile
 32862  3454  0020               	movlb	0	; select bank0
 32863  3455  0815               	movf	21,w	;volatile
 32864  3456  0021               	movlb	1	; select bank1
 32865  3457  00C0               	movwf	_timer0ReloadVal16bit^(0+128)	;volatile
 32866                           
 32867                           ;tmr0.c: 85: PIR0bits.TMR0IF = 0;
 32868  3458  0020               	movlb	0	; select bank0
 32869  3459  1290               	bcf	16,5	;volatile
 32870                           
 32871                           ;tmr0.c: 88: PIE0bits.TMR0IE = 1;
 32872  345A  0021               	movlb	1	; select bank1
 32873  345B  1690               	bsf	16,5	;volatile
 32874                           
 32875                           ;tmr0.c: 91: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
 32876  345C  3000               	movlw	low _TMR0_DefaultInterruptHandler
 32877  345D  00F1               	movwf	TMR0_SetInterruptHandler@InterruptHandler
 32878  345E  3022               	movlw	high _TMR0_DefaultInterruptHandler
 32879  345F  00F2               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
 32880  3460  31B1  21D8  31B4   	fcall	_TMR0_SetInterruptHandler
 32881                           
 32882                           ;tmr0.c: 94: TMR0_StartTimer();
 32883  3463  31B1  21C3         	fcall	_TMR0_StartTimer
 32884  3465  0008               	return
 32885  3466                     __end_of_TMR0_Initialize:	
 32886                           
 32887                           	psect	text90
 32888  31C3                     __ptext90:	
 32889 ;; *************** function _TMR0_StartTimer *****************
 32890 ;; Defined at:
 32891 ;;		line 97 in file "mcc_generated_files/tmr0.c"
 32892 ;; Parameters:    Size  Location     Type
 32893 ;;		None
 32894 ;; Auto vars:     Size  Location     Type
 32895 ;;		None
 32896 ;; Return value:  Size  Location     Type
 32897 ;;                  1    wreg      void 
 32898 ;; Registers used:
 32899 ;;		None
 32900 ;; Tracked objects:
 32901 ;;		On entry : 0/0
 32902 ;;		On exit  : 0/0
 32903 ;;		Unchanged: 0/0
 32904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32905 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32906 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32907 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32908 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32909 ;;Total ram usage:        0 bytes
 32910 ;; Hardware stack levels used:    1
 32911 ;; Hardware stack levels required when called:    4
 32912 ;; This function calls:
 32913 ;;		Nothing
 32914 ;; This function is called by:
 32915 ;;		_TMR0_Initialize
 32916 ;; This function uses a non-reentrant model
 32917 ;;
 32918                           
 32919                           
 32920                           ;psect for function _TMR0_StartTimer
 32921  31C3                     _TMR0_StartTimer:	
 32922                           
 32923                           ;tmr0.c: 100: T0CON0bits.T0EN = 1;
 32924                           
 32925                           ;incstack = 0
 32926                           ; Regs used in _TMR0_StartTimer: []
 32927  31C3  0020               	movlb	0	; select bank0
 32928  31C4  1797               	bsf	23,7	;volatile
 32929  31C5  0008               	return
 32930  31C6                     __end_of_TMR0_StartTimer:	
 32931                           
 32932                           	psect	text91
 32933  31D8                     __ptext91:	
 32934 ;; *************** function _TMR0_SetInterruptHandler *****************
 32935 ;; Defined at:
 32936 ;;		line 161 in file "mcc_generated_files/tmr0.c"
 32937 ;; Parameters:    Size  Location     Type
 32938 ;;  InterruptHan    2    1[COMMON] PTR void 
 32939 ;;		 -> TMR0_DefaultInterruptHandler(1), 
 32940 ;; Auto vars:     Size  Location     Type
 32941 ;;		None
 32942 ;; Return value:  Size  Location     Type
 32943 ;;                  1    wreg      void 
 32944 ;; Registers used:
 32945 ;;		wreg
 32946 ;; Tracked objects:
 32947 ;;		On entry : 0/0
 32948 ;;		On exit  : 0/0
 32949 ;;		Unchanged: 0/0
 32950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32951 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32952 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32953 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32954 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 32955 ;;Total ram usage:        2 bytes
 32956 ;; Hardware stack levels used:    1
 32957 ;; Hardware stack levels required when called:    4
 32958 ;; This function calls:
 32959 ;;		Nothing
 32960 ;; This function is called by:
 32961 ;;		_TMR0_Initialize
 32962 ;; This function uses a non-reentrant model
 32963 ;;
 32964                           
 32965                           
 32966                           ;psect for function _TMR0_SetInterruptHandler
 32967  31D8                     _TMR0_SetInterruptHandler:	
 32968                           
 32969                           ;tmr0.c: 162: TMR0_InterruptHandler = InterruptHandler;
 32970                           
 32971                           ;incstack = 0
 32972                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
 32973  31D8  0872               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
 32974  31D9  0021               	movlb	1	; select bank1
 32975  31DA  00BF               	movwf	(_TMR0_InterruptHandler+1)^(0+128)
 32976  31DB  0871               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
 32977  31DC  00BE               	movwf	_TMR0_InterruptHandler^(0+128)
 32978  31DD  0008               	return
 32979  31DE                     __end_of_TMR0_SetInterruptHandler:	
 32980                           
 32981                           	psect	text92
 32982  31EA                     __ptext92:	
 32983 ;; *************** function _SPI1_Initialize *****************
 32984 ;; Defined at:
 32985 ;;		line 63 in file "mcc_generated_files/spi1.c"
 32986 ;; Parameters:    Size  Location     Type
 32987 ;;		None
 32988 ;; Auto vars:     Size  Location     Type
 32989 ;;		None
 32990 ;; Return value:  Size  Location     Type
 32991 ;;                  1    wreg      void 
 32992 ;; Registers used:
 32993 ;;		wreg
 32994 ;; Tracked objects:
 32995 ;;		On entry : 0/0
 32996 ;;		On exit  : 0/0
 32997 ;;		Unchanged: 0/0
 32998 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 32999 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33000 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33001 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33002 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33003 ;;Total ram usage:        0 bytes
 33004 ;; Hardware stack levels used:    1
 33005 ;; Hardware stack levels required when called:    4
 33006 ;; This function calls:
 33007 ;;		Nothing
 33008 ;; This function is called by:
 33009 ;;		_SYSTEM_Initialize
 33010 ;;		_nullifyBadge_platformInit
 33011 ;; This function uses a non-reentrant model
 33012 ;;
 33013                           
 33014                           
 33015                           ;psect for function _SPI1_Initialize
 33016  31EA                     _SPI1_Initialize:	
 33017                           
 33018                           ;spi1.c: 68: SSP1STAT = 0x40;
 33019                           
 33020                           ;incstack = 0
 33021                           ; Regs used in _SPI1_Initialize: [wreg]
 33022  31EA  3040               	movlw	64
 33023  31EB  0024               	movlb	4	; select bank4
 33024  31EC  0094               	movwf	20	;volatile
 33025                           
 33026                           ;spi1.c: 71: SSP1CON1 = 0x22;
 33027  31ED  3022               	movlw	34
 33028  31EE  0095               	movwf	21	;volatile
 33029                           
 33030                           ;spi1.c: 74: SSP1ADD = 0x01;
 33031  31EF  3001               	movlw	1
 33032  31F0  0092               	movwf	18	;volatile
 33033  31F1  0008               	return
 33034  31F2                     __end_of_SPI1_Initialize:	
 33035                           
 33036                           	psect	text93
 33037  326D                     __ptext93:	
 33038 ;; *************** function _PWM6_Initialize *****************
 33039 ;; Defined at:
 33040 ;;		line 57 in file "mcc_generated_files/pwm6.c"
 33041 ;; Parameters:    Size  Location     Type
 33042 ;;		None
 33043 ;; Auto vars:     Size  Location     Type
 33044 ;;		None
 33045 ;; Return value:  Size  Location     Type
 33046 ;;                  1    wreg      void 
 33047 ;; Registers used:
 33048 ;;		wreg, status,2, status,0
 33049 ;; Tracked objects:
 33050 ;;		On entry : 0/0
 33051 ;;		On exit  : 0/0
 33052 ;;		Unchanged: 0/0
 33053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 33054 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33055 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33056 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33057 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33058 ;;Total ram usage:        0 bytes
 33059 ;; Hardware stack levels used:    1
 33060 ;; Hardware stack levels required when called:    4
 33061 ;; This function calls:
 33062 ;;		Nothing
 33063 ;; This function is called by:
 33064 ;;		_SYSTEM_Initialize
 33065 ;;		_nullifyBadge_platformInit
 33066 ;; This function uses a non-reentrant model
 33067 ;;
 33068                           
 33069                           
 33070                           ;psect for function _PWM6_Initialize
 33071  326D                     _PWM6_Initialize:	
 33072                           
 33073                           ;pwm6.c: 61: PWM6CON = 0x90;
 33074                           
 33075                           ;incstack = 0
 33076                           ; Regs used in _PWM6_Initialize: [wreg+status,2+status,0]
 33077  326D  3090               	movlw	144
 33078  326E  002C               	movlb	12	; select bank12
 33079  326F  009C               	movwf	28	;volatile
 33080                           
 33081                           ;pwm6.c: 64: PWM6DCH = 0x7F;
 33082  3270  307F               	movlw	127
 33083  3271  009B               	movwf	27	;volatile
 33084                           
 33085                           ;pwm6.c: 67: PWM6DCL = 0xC0;
 33086  3272  30C0               	movlw	192
 33087  3273  009A               	movwf	26	;volatile
 33088                           
 33089                           ;pwm6.c: 71: PWMTMRSbits.P6TSEL = 0x2;
 33090  3274  081F               	movf	31,w	;volatile
 33091  3275  39F3               	andlw	-13
 33092  3276  3808               	iorlw	8
 33093  3277  009F               	movwf	31	;volatile
 33094  3278  0008               	return
 33095  3279                     __end_of_PWM6_Initialize:	
 33096                           
 33097                           	psect	text94
 33098  3261                     __ptext94:	
 33099 ;; *************** function _PWM5_Initialize *****************
 33100 ;; Defined at:
 33101 ;;		line 57 in file "mcc_generated_files/pwm5.c"
 33102 ;; Parameters:    Size  Location     Type
 33103 ;;		None
 33104 ;; Auto vars:     Size  Location     Type
 33105 ;;		None
 33106 ;; Return value:  Size  Location     Type
 33107 ;;                  1    wreg      void 
 33108 ;; Registers used:
 33109 ;;		wreg, status,2, status,0
 33110 ;; Tracked objects:
 33111 ;;		On entry : 0/0
 33112 ;;		On exit  : 0/0
 33113 ;;		Unchanged: 0/0
 33114 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 33115 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33116 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33117 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33118 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33119 ;;Total ram usage:        0 bytes
 33120 ;; Hardware stack levels used:    1
 33121 ;; Hardware stack levels required when called:    4
 33122 ;; This function calls:
 33123 ;;		Nothing
 33124 ;; This function is called by:
 33125 ;;		_SYSTEM_Initialize
 33126 ;;		_nullifyBadge_platformInit
 33127 ;; This function uses a non-reentrant model
 33128 ;;
 33129                           
 33130                           
 33131                           ;psect for function _PWM5_Initialize
 33132  3261                     _PWM5_Initialize:	
 33133                           
 33134                           ;pwm5.c: 61: PWM5CON = 0x90;
 33135                           
 33136                           ;incstack = 0
 33137                           ; Regs used in _PWM5_Initialize: [wreg+status,2+status,0]
 33138  3261  3090               	movlw	144
 33139  3262  002C               	movlb	12	; select bank12
 33140  3263  0099               	movwf	25	;volatile
 33141                           
 33142                           ;pwm5.c: 64: PWM5DCH = 0x7F;
 33143  3264  307F               	movlw	127
 33144  3265  0098               	movwf	24	;volatile
 33145                           
 33146                           ;pwm5.c: 67: PWM5DCL = 0xC0;
 33147  3266  30C0               	movlw	192
 33148  3267  0097               	movwf	23	;volatile
 33149                           
 33150                           ;pwm5.c: 71: PWMTMRSbits.P5TSEL = 0x2;
 33151  3268  081F               	movf	31,w	;volatile
 33152  3269  39FC               	andlw	-4
 33153  326A  3802               	iorlw	2
 33154  326B  009F               	movwf	31	;volatile
 33155  326C  0008               	return
 33156  326D                     __end_of_PWM5_Initialize:	
 33157                           
 33158                           	psect	text95
 33159  3240                     __ptext95:	
 33160 ;; *************** function _PWM2_Initialize *****************
 33161 ;; Defined at:
 33162 ;;		line 63 in file "mcc_generated_files/pwm2.c"
 33163 ;; Parameters:    Size  Location     Type
 33164 ;;		None
 33165 ;; Auto vars:     Size  Location     Type
 33166 ;;		None
 33167 ;; Return value:  Size  Location     Type
 33168 ;;                  1    wreg      void 
 33169 ;; Registers used:
 33170 ;;		wreg, status,2, status,0
 33171 ;; Tracked objects:
 33172 ;;		On entry : 0/0
 33173 ;;		On exit  : 0/0
 33174 ;;		Unchanged: 0/0
 33175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 33176 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33177 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33178 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33179 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33180 ;;Total ram usage:        0 bytes
 33181 ;; Hardware stack levels used:    1
 33182 ;; Hardware stack levels required when called:    4
 33183 ;; This function calls:
 33184 ;;		Nothing
 33185 ;; This function is called by:
 33186 ;;		_SYSTEM_Initialize
 33187 ;;		_nullifyBadge_platformInit
 33188 ;; This function uses a non-reentrant model
 33189 ;;
 33190                           
 33191                           
 33192                           ;psect for function _PWM2_Initialize
 33193  3240                     _PWM2_Initialize:	
 33194                           
 33195                           ;pwm2.c: 68: CCP2CON = 0x8F;
 33196                           
 33197                           ;incstack = 0
 33198                           ; Regs used in _PWM2_Initialize: [wreg+status,2+status,0]
 33199  3240  308F               	movlw	143
 33200  3241  0025               	movlb	5	; select bank5
 33201  3242  0097               	movwf	23	;volatile
 33202                           
 33203                           ;pwm2.c: 71: CCPR2H = 0x00;
 33204  3243  0196               	clrf	22	;volatile
 33205                           
 33206                           ;pwm2.c: 74: CCPR2L = 0xE0;
 33207  3244  30E0               	movlw	224
 33208  3245  0095               	movwf	21	;volatile
 33209                           
 33210                           ;pwm2.c: 77: CCPTMRSbits.C2TSEL = 0x1;
 33211  3246  081F               	movf	31,w	;volatile
 33212  3247  39F3               	andlw	-13
 33213  3248  3804               	iorlw	4
 33214  3249  009F               	movwf	31	;volatile
 33215  324A  0008               	return
 33216  324B                     __end_of_PWM2_Initialize:	
 33217                           
 33218                           	psect	text96
 33219  3235                     __ptext96:	
 33220 ;; *************** function _PWM1_Initialize *****************
 33221 ;; Defined at:
 33222 ;;		line 63 in file "mcc_generated_files/pwm1.c"
 33223 ;; Parameters:    Size  Location     Type
 33224 ;;		None
 33225 ;; Auto vars:     Size  Location     Type
 33226 ;;		None
 33227 ;; Return value:  Size  Location     Type
 33228 ;;                  1    wreg      void 
 33229 ;; Registers used:
 33230 ;;		wreg, status,2, status,0
 33231 ;; Tracked objects:
 33232 ;;		On entry : 0/0
 33233 ;;		On exit  : 0/0
 33234 ;;		Unchanged: 0/0
 33235 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 33236 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33237 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33238 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33239 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33240 ;;Total ram usage:        0 bytes
 33241 ;; Hardware stack levels used:    1
 33242 ;; Hardware stack levels required when called:    4
 33243 ;; This function calls:
 33244 ;;		Nothing
 33245 ;; This function is called by:
 33246 ;;		_SYSTEM_Initialize
 33247 ;;		_nullifyBadge_platformInit
 33248 ;; This function uses a non-reentrant model
 33249 ;;
 33250                           
 33251                           
 33252                           ;psect for function _PWM1_Initialize
 33253  3235                     _PWM1_Initialize:	
 33254                           
 33255                           ;pwm1.c: 68: CCP1CON = 0x8F;
 33256                           
 33257                           ;incstack = 0
 33258                           ; Regs used in _PWM1_Initialize: [wreg+status,2+status,0]
 33259  3235  308F               	movlw	143
 33260  3236  0025               	movlb	5	; select bank5
 33261  3237  0093               	movwf	19	;volatile
 33262                           
 33263                           ;pwm1.c: 71: CCPR1H = 0x00;
 33264  3238  0192               	clrf	18	;volatile
 33265                           
 33266                           ;pwm1.c: 74: CCPR1L = 0x95;
 33267  3239  3095               	movlw	149
 33268  323A  0091               	movwf	17	;volatile
 33269                           
 33270                           ;pwm1.c: 77: CCPTMRSbits.C1TSEL = 0x1;
 33271  323B  081F               	movf	31,w	;volatile
 33272  323C  39FC               	andlw	-4
 33273  323D  3801               	iorlw	1
 33274  323E  009F               	movwf	31	;volatile
 33275  323F  0008               	return
 33276  3240                     __end_of_PWM1_Initialize:	
 33277                           
 33278                           	psect	text97
 33279  2C2E                     __ptext97:	
 33280 ;; *************** function _PIN_MANAGER_Initialize *****************
 33281 ;; Defined at:
 33282 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
 33283 ;; Parameters:    Size  Location     Type
 33284 ;;		None
 33285 ;; Auto vars:     Size  Location     Type
 33286 ;;  state           1    1[COMMON] unsigned char 
 33287 ;; Return value:  Size  Location     Type
 33288 ;;                  1    wreg      void 
 33289 ;; Registers used:
 33290 ;;		wreg, status,2, status,0
 33291 ;; Tracked objects:
 33292 ;;		On entry : 0/0
 33293 ;;		On exit  : 0/0
 33294 ;;		Unchanged: 0/0
 33295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 33296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33297 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33298 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33299 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33300 ;;Total ram usage:        1 bytes
 33301 ;; Hardware stack levels used:    1
 33302 ;; Hardware stack levels required when called:    4
 33303 ;; This function calls:
 33304 ;;		Nothing
 33305 ;; This function is called by:
 33306 ;;		_SYSTEM_Initialize
 33307 ;;		_nullifyBadge_platformInit
 33308 ;; This function uses a non-reentrant model
 33309 ;;
 33310                           
 33311                           
 33312                           ;psect for function _PIN_MANAGER_Initialize
 33313  2C2E                     _PIN_MANAGER_Initialize:	
 33314                           
 33315                           ;pin_manager.c: 56: LATA = 0x00;
 33316                           
 33317                           ;incstack = 0
 33318                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0]
 33319  2C2E  0022               	movlb	2	; select bank2
 33320  2C2F  018C               	clrf	12	;volatile
 33321                           
 33322                           ;pin_manager.c: 57: LATB = 0x80;
 33323  2C30  3080               	movlw	128
 33324  2C31  008D               	movwf	13	;volatile
 33325                           
 33326                           ;pin_manager.c: 58: LATC = 0x1A;
 33327  2C32  301A               	movlw	26
 33328  2C33  008E               	movwf	14	;volatile
 33329                           
 33330                           ;pin_manager.c: 63: TRISA = 0x37;
 33331  2C34  3037               	movlw	55
 33332  2C35  0021               	movlb	1	; select bank1
 33333  2C36  008C               	movwf	12	;volatile
 33334                           
 33335                           ;pin_manager.c: 64: TRISB = 0x30;
 33336  2C37  3030               	movlw	48
 33337  2C38  008D               	movwf	13	;volatile
 33338                           
 33339                           ;pin_manager.c: 65: TRISC = 0x60;
 33340  2C39  3060               	movlw	96
 33341  2C3A  008E               	movwf	14	;volatile
 33342                           
 33343                           ;pin_manager.c: 70: ANSELC = 0x40;
 33344  2C3B  3040               	movlw	64
 33345  2C3C  0023               	movlb	3	; select bank3
 33346  2C3D  008E               	movwf	14	;volatile
 33347                           
 33348                           ;pin_manager.c: 71: ANSELB = 0x00;
 33349  2C3E  018D               	clrf	13	;volatile
 33350                           
 33351                           ;pin_manager.c: 72: ANSELA = 0x03;
 33352  2C3F  3003               	movlw	3
 33353  2C40  008C               	movwf	12	;volatile
 33354                           
 33355                           ;pin_manager.c: 77: WPUB = 0x00;
 33356  2C41  0024               	movlb	4	; select bank4
 33357  2C42  018D               	clrf	13	;volatile
 33358                           
 33359                           ;pin_manager.c: 78: WPUA = 0x00;
 33360  2C43  018C               	clrf	12	;volatile
 33361                           
 33362                           ;pin_manager.c: 79: WPUC = 0x00;
 33363  2C44  018E               	clrf	14	;volatile
 33364                           
 33365                           ;pin_manager.c: 84: ODCONA = 0x00;
 33366  2C45  0025               	movlb	5	; select bank5
 33367  2C46  018C               	clrf	12	;volatile
 33368                           
 33369                           ;pin_manager.c: 85: ODCONB = 0x00;
 33370  2C47  018D               	clrf	13	;volatile
 33371                           
 33372                           ;pin_manager.c: 86: ODCONC = 0x00;
 33373  2C48  018E               	clrf	14	;volatile
 33374                           
 33375                           ;pin_manager.c: 93: bool state = GIE;
 33376  2C49  3000               	movlw	0
 33377  2C4A  1B8B               	btfsc	11,7	;volatile
 33378  2C4B  3001               	movlw	1
 33379  2C4C  00F1               	movwf	PIN_MANAGER_Initialize@state
 33380                           
 33381                           ;pin_manager.c: 94: GIE = 0;
 33382  2C4D  138B               	bcf	11,7	;volatile
 33383                           
 33384                           ;pin_manager.c: 95: PPSLOCK = 0x55;
 33385  2C4E  3055               	movlw	85
 33386  2C4F  003C               	movlb	28	; select bank28
 33387  2C50  008F               	movwf	15	;volatile
 33388                           
 33389                           ;pin_manager.c: 96: PPSLOCK = 0xAA;
 33390  2C51  30AA               	movlw	170
 33391  2C52  008F               	movwf	15	;volatile
 33392                           
 33393                           ;pin_manager.c: 97: PPSLOCKbits.PPSLOCKED = 0x00;
 33394  2C53  100F               	bcf	15,0	;volatile
 33395                           
 33396                           ;pin_manager.c: 99: RC1PPSbits.RC1PPS = 0x0D;
 33397  2C54  003D               	movlb	29	; select bank29
 33398  2C55  0821               	movf	33,w	;volatile
 33399  2C56  39E0               	andlw	-32
 33400  2C57  380D               	iorlw	13
 33401  2C58  00A1               	movwf	33	;volatile
 33402                           
 33403                           ;pin_manager.c: 100: SSP1DATPPSbits.SSP1DATPPS = 0x0C;
 33404  2C59  003C               	movlb	28	; select bank28
 33405  2C5A  0821               	movf	33,w	;volatile
 33406  2C5B  39E0               	andlw	-32
 33407  2C5C  380C               	iorlw	12
 33408  2C5D  00A1               	movwf	33	;volatile
 33409                           
 33410                           ;pin_manager.c: 101: SSP1CLKPPSbits.SSP1CLKPPS = 0x0E;
 33411  2C5E  0820               	movf	32,w	;volatile
 33412  2C5F  39E0               	andlw	-32
 33413  2C60  380E               	iorlw	14
 33414  2C61  00A0               	movwf	32	;volatile
 33415                           
 33416                           ;pin_manager.c: 102: RC4PPSbits.RC4PPS = 0x02;
 33417  2C62  003D               	movlb	29	; select bank29
 33418  2C63  0824               	movf	36,w	;volatile
 33419  2C64  39E0               	andlw	-32
 33420  2C65  3802               	iorlw	2
 33421  2C66  00A4               	movwf	36	;volatile
 33422                           
 33423                           ;pin_manager.c: 103: RC0PPSbits.RC0PPS = 0x0C;
 33424  2C67  0820               	movf	32,w	;volatile
 33425  2C68  39E0               	andlw	-32
 33426  2C69  380C               	iorlw	12
 33427  2C6A  00A0               	movwf	32	;volatile
 33428                           
 33429                           ;pin_manager.c: 104: RC3PPSbits.RC3PPS = 0x03;
 33430  2C6B  0823               	movf	35,w	;volatile
 33431  2C6C  39E0               	andlw	-32
 33432  2C6D  3803               	iorlw	3
 33433  2C6E  00A3               	movwf	35	;volatile
 33434                           
 33435                           ;pin_manager.c: 105: RB6PPSbits.RB6PPS = 0x18;
 33436  2C6F  081E               	movf	30,w	;volatile
 33437  2C70  39E0               	andlw	-32
 33438  2C71  3818               	iorlw	24
 33439  2C72  009E               	movwf	30	;volatile
 33440                           
 33441                           ;pin_manager.c: 106: RC2PPSbits.RC2PPS = 0x19;
 33442  2C73  0822               	movf	34,w	;volatile
 33443  2C74  39E0               	andlw	-32
 33444  2C75  3819               	iorlw	25
 33445  2C76  00A2               	movwf	34	;volatile
 33446                           
 33447                           ;pin_manager.c: 108: PPSLOCK = 0x55;
 33448  2C77  3055               	movlw	85
 33449  2C78  003C               	movlb	28	; select bank28
 33450  2C79  008F               	movwf	15	;volatile
 33451                           
 33452                           ;pin_manager.c: 109: PPSLOCK = 0xAA;
 33453  2C7A  30AA               	movlw	170
 33454  2C7B  008F               	movwf	15	;volatile
 33455                           
 33456                           ;pin_manager.c: 110: PPSLOCKbits.PPSLOCKED = 0x01;
 33457  2C7C  140F               	bsf	15,0	;volatile
 33458                           
 33459                           ;pin_manager.c: 112: GIE = state;
 33460  2C7D  1C71               	btfss	PIN_MANAGER_Initialize@state,0
 33461  2C7E  2C81               	goto	u3390
 33462  2C7F  178B               	bsf	11,7	;volatile
 33463  2C80  0008               	return
 33464  2C81                     u3390:	
 33465  2C81  138B               	bcf	11,7	;volatile
 33466  2C82  0008               	return
 33467  2C83                     __end_of_PIN_MANAGER_Initialize:	
 33468                           
 33469                           	psect	text98
 33470  320C                     __ptext98:	
 33471 ;; *************** function _OSCILLATOR_Initialize *****************
 33472 ;; Defined at:
 33473 ;;		line 92 in file "mcc_generated_files/mcc.c"
 33474 ;; Parameters:    Size  Location     Type
 33475 ;;		None
 33476 ;; Auto vars:     Size  Location     Type
 33477 ;;		None
 33478 ;; Return value:  Size  Location     Type
 33479 ;;                  1    wreg      void 
 33480 ;; Registers used:
 33481 ;;		wreg, status,2
 33482 ;; Tracked objects:
 33483 ;;		On entry : 0/0
 33484 ;;		On exit  : 0/0
 33485 ;;		Unchanged: 0/0
 33486 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 33487 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33488 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33489 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33490 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33491 ;;Total ram usage:        0 bytes
 33492 ;; Hardware stack levels used:    1
 33493 ;; Hardware stack levels required when called:    4
 33494 ;; This function calls:
 33495 ;;		Nothing
 33496 ;; This function is called by:
 33497 ;;		_SYSTEM_Initialize
 33498 ;;		_nullifyBadge_platformInit
 33499 ;; This function uses a non-reentrant model
 33500 ;;
 33501                           
 33502                           
 33503                           ;psect for function _OSCILLATOR_Initialize
 33504  320C                     _OSCILLATOR_Initialize:	
 33505                           
 33506                           ;mcc.c: 95: OSCCON1 = 0x00;
 33507                           
 33508                           ;incstack = 0
 33509                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 33510  320C  0032               	movlb	18	; select bank18
 33511  320D  0199               	clrf	25	;volatile
 33512                           
 33513                           ;mcc.c: 97: OSCCON3 = 0x00;
 33514  320E  019B               	clrf	27	;volatile
 33515                           
 33516                           ;mcc.c: 99: OSCEN = 0x00;
 33517  320F  019D               	clrf	29	;volatile
 33518                           
 33519                           ;mcc.c: 101: OSCFRQ = 0x06;
 33520  3210  3006               	movlw	6
 33521  3211  009F               	movwf	31	;volatile
 33522                           
 33523                           ;mcc.c: 103: OSCTUNE = 0x00;
 33524  3212  019E               	clrf	30	;volatile
 33525  3213                     l208:	
 33526                           ;mcc.c: 106: {
 33527                           
 33528                           ;mcc.c: 105: while(PLLR == 0)
 33529                           
 33530  3213  181C               	btfsc	28,0	;volatile
 33531  3214  0008               	return
 33532  3215  2A13               	goto	l208
 33533  3216                     __end_of_OSCILLATOR_Initialize:	
 33534                           
 33535                           	psect	text99
 33536  3395                     __ptext99:	
 33537 ;; *************** function _PWM6_LoadDutyValue *****************
 33538 ;; Defined at:
 33539 ;;		line 74 in file "mcc_generated_files/pwm6.c"
 33540 ;; Parameters:    Size  Location     Type
 33541 ;;  dutyValue       2    1[COMMON] unsigned int 
 33542 ;; Auto vars:     Size  Location     Type
 33543 ;;		None
 33544 ;; Return value:  Size  Location     Type
 33545 ;;                  1    wreg      void 
 33546 ;; Registers used:
 33547 ;;		wreg, status,2, status,0
 33548 ;; Tracked objects:
 33549 ;;		On entry : 0/0
 33550 ;;		On exit  : 0/0
 33551 ;;		Unchanged: 0/0
 33552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 33553 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33554 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33555 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33556 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33557 ;;Total ram usage:        4 bytes
 33558 ;; Hardware stack levels used:    1
 33559 ;; Hardware stack levels required when called:    4
 33560 ;; This function calls:
 33561 ;;		Nothing
 33562 ;; This function is called by:
 33563 ;;		_nullifyBadge_platformInit
 33564 ;;		_nullifyBadge_userLedsSetBrightness
 33565 ;; This function uses a non-reentrant model
 33566 ;;
 33567                           
 33568                           
 33569                           ;psect for function _PWM6_LoadDutyValue
 33570  3395                     _PWM6_LoadDutyValue:	
 33571                           
 33572                           ;pwm6.c: 77: PWM6DCH = (dutyValue & 0x03FC)>>2;
 33573                           
 33574                           ;incstack = 0
 33575                           ; Regs used in _PWM6_LoadDutyValue: [wreg+status,2+status,0]
 33576  3395  0872               	movf	PWM6_LoadDutyValue@dutyValue+1,w
 33577  3396  00F4               	movwf	??_PWM6_LoadDutyValue+1
 33578  3397  0871               	movf	PWM6_LoadDutyValue@dutyValue,w
 33579  3398  00F3               	movwf	??_PWM6_LoadDutyValue
 33580  3399  36F4               	lsrf	??_PWM6_LoadDutyValue+1,f
 33581  339A  0CF3               	rrf	??_PWM6_LoadDutyValue,f
 33582  339B  36F4               	lsrf	??_PWM6_LoadDutyValue+1,f
 33583  339C  0CF3               	rrf	??_PWM6_LoadDutyValue,f
 33584  339D  0873               	movf	??_PWM6_LoadDutyValue,w
 33585  339E  002C               	movlb	12	; select bank12
 33586  339F  009B               	movwf	27	;volatile
 33587                           
 33588                           ;pwm6.c: 80: PWM6DCL = (dutyValue & 0x0003)<<6;
 33589  33A0  0871               	movf	PWM6_LoadDutyValue@dutyValue,w
 33590  33A1  3903               	andlw	3
 33591  33A2  00F3               	movwf	??_PWM6_LoadDutyValue
 33592  33A3  3005               	movlw	5
 33593  33A4                     u4315:	
 33594  33A4  35F3               	lslf	??_PWM6_LoadDutyValue,f
 33595  33A5  3EFF               	addlw	-1
 33596  33A6  1D03               	skipz
 33597  33A7  2BA4               	goto	u4315
 33598  33A8  3573               	lslf	??_PWM6_LoadDutyValue,w
 33599  33A9  009A               	movwf	26	;volatile
 33600  33AA  0008               	return
 33601  33AB                     __end_of_PWM6_LoadDutyValue:	
 33602                           
 33603                           	psect	text100
 33604  337F                     __ptext100:	
 33605 ;; *************** function _PWM5_LoadDutyValue *****************
 33606 ;; Defined at:
 33607 ;;		line 74 in file "mcc_generated_files/pwm5.c"
 33608 ;; Parameters:    Size  Location     Type
 33609 ;;  dutyValue       2    1[COMMON] unsigned int 
 33610 ;; Auto vars:     Size  Location     Type
 33611 ;;		None
 33612 ;; Return value:  Size  Location     Type
 33613 ;;                  1    wreg      void 
 33614 ;; Registers used:
 33615 ;;		wreg, status,2, status,0
 33616 ;; Tracked objects:
 33617 ;;		On entry : 0/0
 33618 ;;		On exit  : 0/0
 33619 ;;		Unchanged: 0/0
 33620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 33621 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33622 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33623 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33624 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33625 ;;Total ram usage:        4 bytes
 33626 ;; Hardware stack levels used:    1
 33627 ;; Hardware stack levels required when called:    4
 33628 ;; This function calls:
 33629 ;;		Nothing
 33630 ;; This function is called by:
 33631 ;;		_nullifyBadge_platformInit
 33632 ;;		_fadeDisplay_Init
 33633 ;;		_nullifyBadge_segDisplaySetBrightness
 33634 ;; This function uses a non-reentrant model
 33635 ;;
 33636                           
 33637                           
 33638                           ;psect for function _PWM5_LoadDutyValue
 33639  337F                     _PWM5_LoadDutyValue:	
 33640                           
 33641                           ;pwm5.c: 77: PWM5DCH = (dutyValue & 0x03FC)>>2;
 33642                           
 33643                           ;incstack = 0
 33644                           ; Regs used in _PWM5_LoadDutyValue: [wreg+status,2+status,0]
 33645  337F  0872               	movf	PWM5_LoadDutyValue@dutyValue+1,w
 33646  3380  00F4               	movwf	??_PWM5_LoadDutyValue+1
 33647  3381  0871               	movf	PWM5_LoadDutyValue@dutyValue,w
 33648  3382  00F3               	movwf	??_PWM5_LoadDutyValue
 33649  3383  36F4               	lsrf	??_PWM5_LoadDutyValue+1,f
 33650  3384  0CF3               	rrf	??_PWM5_LoadDutyValue,f
 33651  3385  36F4               	lsrf	??_PWM5_LoadDutyValue+1,f
 33652  3386  0CF3               	rrf	??_PWM5_LoadDutyValue,f
 33653  3387  0873               	movf	??_PWM5_LoadDutyValue,w
 33654  3388  002C               	movlb	12	; select bank12
 33655  3389  0098               	movwf	24	;volatile
 33656                           
 33657                           ;pwm5.c: 80: PWM5DCL = (dutyValue & 0x0003)<<6;
 33658  338A  0871               	movf	PWM5_LoadDutyValue@dutyValue,w
 33659  338B  3903               	andlw	3
 33660  338C  00F3               	movwf	??_PWM5_LoadDutyValue
 33661  338D  3005               	movlw	5
 33662  338E                     u4305:	
 33663  338E  35F3               	lslf	??_PWM5_LoadDutyValue,f
 33664  338F  3EFF               	addlw	-1
 33665  3390  1D03               	skipz
 33666  3391  2B8E               	goto	u4305
 33667  3392  3573               	lslf	??_PWM5_LoadDutyValue,w
 33668  3393  0097               	movwf	23	;volatile
 33669  3394  0008               	return
 33670  3395                     __end_of_PWM5_LoadDutyValue:	
 33671                           
 33672                           	psect	text101
 33673  3369                     __ptext101:	
 33674 ;; *************** function _PWM2_LoadDutyValue *****************
 33675 ;; Defined at:
 33676 ;;		line 80 in file "mcc_generated_files/pwm2.c"
 33677 ;; Parameters:    Size  Location     Type
 33678 ;;  dutyValue       2    1[COMMON] unsigned int 
 33679 ;; Auto vars:     Size  Location     Type
 33680 ;;		None
 33681 ;; Return value:  Size  Location     Type
 33682 ;;                  1    wreg      void 
 33683 ;; Registers used:
 33684 ;;		wreg, status,2
 33685 ;; Tracked objects:
 33686 ;;		On entry : 0/0
 33687 ;;		On exit  : 0/0
 33688 ;;		Unchanged: 0/0
 33689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 33690 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33691 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33692 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33693 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33694 ;;Total ram usage:        2 bytes
 33695 ;; Hardware stack levels used:    1
 33696 ;; Hardware stack levels required when called:    4
 33697 ;; This function calls:
 33698 ;;		Nothing
 33699 ;; This function is called by:
 33700 ;;		_nullifyBadge_platformInit
 33701 ;; This function uses a non-reentrant model
 33702 ;;
 33703                           
 33704                           
 33705                           ;psect for function _PWM2_LoadDutyValue
 33706  3369                     _PWM2_LoadDutyValue:	
 33707                           
 33708                           ;pwm2.c: 82: dutyValue &= 0x03FF;
 33709                           
 33710                           ;incstack = 0
 33711                           ; Regs used in _PWM2_LoadDutyValue: [wreg+status,2]
 33712  3369  30FF               	movlw	255
 33713  336A  05F1               	andwf	PWM2_LoadDutyValue@dutyValue,f
 33714  336B  3003               	movlw	3
 33715  336C  05F2               	andwf	PWM2_LoadDutyValue@dutyValue+1,f
 33716                           
 33717                           ;pwm2.c: 85: if(CCP2CONbits.CCP2FMT)
 33718  336D  0025               	movlb	5	; select bank5
 33719  336E  1E17               	btfss	23,4	;volatile
 33720  336F  2B7A               	goto	l7549
 33721                           
 33722                           ;pwm2.c: 86: {
 33723                           ;pwm2.c: 87: dutyValue <<= 6;
 33724  3370  3006               	movlw	6
 33725  3371                     u4355:	
 33726  3371  35F1               	lslf	PWM2_LoadDutyValue@dutyValue,f
 33727  3372  0DF2               	rlf	PWM2_LoadDutyValue@dutyValue+1,f
 33728  3373  0B89               	decfsz	9,f
 33729  3374  2B71               	goto	u4355
 33730                           
 33731                           ;pwm2.c: 88: CCPR2H = dutyValue >> 8;
 33732  3375  0872               	movf	PWM2_LoadDutyValue@dutyValue+1,w
 33733  3376  0096               	movwf	22	;volatile
 33734                           
 33735                           ;pwm2.c: 89: CCPR2L = dutyValue;
 33736  3377  0871               	movf	PWM2_LoadDutyValue@dutyValue,w
 33737  3378  0095               	movwf	21	;volatile
 33738                           
 33739                           ;pwm2.c: 90: }
 33740  3379  0008               	return
 33741  337A                     l7549:	
 33742                           
 33743                           ;pwm2.c: 91: else
 33744                           ;pwm2.c: 92: {
 33745                           ;pwm2.c: 93: CCPR2H = dutyValue >> 8;
 33746  337A  0872               	movf	PWM2_LoadDutyValue@dutyValue+1,w
 33747  337B  0096               	movwf	22	;volatile
 33748                           
 33749                           ;pwm2.c: 94: CCPR2L = dutyValue;
 33750  337C  0871               	movf	PWM2_LoadDutyValue@dutyValue,w
 33751  337D  0095               	movwf	21	;volatile
 33752  337E  0008               	return
 33753  337F                     __end_of_PWM2_LoadDutyValue:	
 33754                           
 33755                           	psect	text102
 33756  3353                     __ptext102:	
 33757 ;; *************** function _PWM1_LoadDutyValue *****************
 33758 ;; Defined at:
 33759 ;;		line 80 in file "mcc_generated_files/pwm1.c"
 33760 ;; Parameters:    Size  Location     Type
 33761 ;;  dutyValue       2    1[COMMON] unsigned int 
 33762 ;; Auto vars:     Size  Location     Type
 33763 ;;		None
 33764 ;; Return value:  Size  Location     Type
 33765 ;;                  1    wreg      void 
 33766 ;; Registers used:
 33767 ;;		wreg, status,2
 33768 ;; Tracked objects:
 33769 ;;		On entry : 0/0
 33770 ;;		On exit  : 0/0
 33771 ;;		Unchanged: 0/0
 33772 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 33773 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33774 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33775 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33776 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33777 ;;Total ram usage:        2 bytes
 33778 ;; Hardware stack levels used:    1
 33779 ;; Hardware stack levels required when called:    4
 33780 ;; This function calls:
 33781 ;;		Nothing
 33782 ;; This function is called by:
 33783 ;;		_nullifyBadge_platformInit
 33784 ;; This function uses a non-reentrant model
 33785 ;;
 33786                           
 33787                           
 33788                           ;psect for function _PWM1_LoadDutyValue
 33789  3353                     _PWM1_LoadDutyValue:	
 33790                           
 33791                           ;pwm1.c: 82: dutyValue &= 0x03FF;
 33792                           
 33793                           ;incstack = 0
 33794                           ; Regs used in _PWM1_LoadDutyValue: [wreg+status,2]
 33795  3353  30FF               	movlw	255
 33796  3354  05F1               	andwf	PWM1_LoadDutyValue@dutyValue,f
 33797  3355  3003               	movlw	3
 33798  3356  05F2               	andwf	PWM1_LoadDutyValue@dutyValue+1,f
 33799                           
 33800                           ;pwm1.c: 85: if(CCP1CONbits.CCP1FMT)
 33801  3357  0025               	movlb	5	; select bank5
 33802  3358  1E13               	btfss	19,4	;volatile
 33803  3359  2B64               	goto	l7533
 33804                           
 33805                           ;pwm1.c: 86: {
 33806                           ;pwm1.c: 87: dutyValue <<= 6;
 33807  335A  3006               	movlw	6
 33808  335B                     u4335:	
 33809  335B  35F1               	lslf	PWM1_LoadDutyValue@dutyValue,f
 33810  335C  0DF2               	rlf	PWM1_LoadDutyValue@dutyValue+1,f
 33811  335D  0B89               	decfsz	9,f
 33812  335E  2B5B               	goto	u4335
 33813                           
 33814                           ;pwm1.c: 88: CCPR1H = dutyValue >> 8;
 33815  335F  0872               	movf	PWM1_LoadDutyValue@dutyValue+1,w
 33816  3360  0092               	movwf	18	;volatile
 33817                           
 33818                           ;pwm1.c: 89: CCPR1L = dutyValue;
 33819  3361  0871               	movf	PWM1_LoadDutyValue@dutyValue,w
 33820  3362  0091               	movwf	17	;volatile
 33821                           
 33822                           ;pwm1.c: 90: }
 33823  3363  0008               	return
 33824  3364                     l7533:	
 33825                           
 33826                           ;pwm1.c: 91: else
 33827                           ;pwm1.c: 92: {
 33828                           ;pwm1.c: 93: CCPR1H = dutyValue >> 8;
 33829  3364  0872               	movf	PWM1_LoadDutyValue@dutyValue+1,w
 33830  3365  0092               	movwf	18	;volatile
 33831                           
 33832                           ;pwm1.c: 94: CCPR1L = dutyValue;
 33833  3366  0871               	movf	PWM1_LoadDutyValue@dutyValue,w
 33834  3367  0091               	movwf	17	;volatile
 33835  3368  0008               	return
 33836  3369                     __end_of_PWM1_LoadDutyValue:	
 33837                           
 33838                           	psect	intentry
 33839  0004                     __pintentry:	
 33840 ;; *************** function _INTERRUPT_InterruptManager *****************
 33841 ;; Defined at:
 33842 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
 33843 ;; Parameters:    Size  Location     Type
 33844 ;;		None
 33845 ;; Auto vars:     Size  Location     Type
 33846 ;;		None
 33847 ;; Return value:  Size  Location     Type
 33848 ;;                  1    wreg      void 
 33849 ;; Registers used:
 33850 ;;		wreg, status,2, status,0, pclath, cstack
 33851 ;; Tracked objects:
 33852 ;;		On entry : 0/0
 33853 ;;		On exit  : 0/0
 33854 ;;		Unchanged: 0/0
 33855 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 33856 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33857 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33858 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33859 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33860 ;;Total ram usage:        1 bytes
 33861 ;; Hardware stack levels used:    1
 33862 ;; Hardware stack levels required when called:    3
 33863 ;; This function calls:
 33864 ;;		_TMR0_ISR
 33865 ;; This function is called by:
 33866 ;;		Interrupt level 1
 33867 ;; This function uses a non-reentrant model
 33868 ;;
 33869                           
 33870  0004                     _INTERRUPT_InterruptManager:	
 33871                           
 33872                           ;incstack = 0
 33873  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 33874                           
 33875                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+status,2+status,0+pclath+cstack]
 33876  0005  3180               	pagesel	$
 33877  0006  0020               	movlb	0	; select bank0
 33878  0007  087F               	movf	127,w
 33879  0008  00F0               	movwf	??_INTERRUPT_InterruptManager
 33880                           
 33881                           ;interrupt_manager.c: 54: if(PIE0bits.TMR0IE == 1 && PIR0bits.TMR0IF == 1)
 33882  0009  0021               	movlb	1	; select bank1
 33883  000A  1E90               	btfss	16,5	;volatile
 33884  000B  2811               	goto	i1l363
 33885  000C  0020               	movlb	0	; select bank0
 33886  000D  1E90               	btfss	16,5	;volatile
 33887  000E  2811               	goto	i1l363
 33888                           
 33889                           ;interrupt_manager.c: 55: {
 33890                           ;interrupt_manager.c: 56: TMR0_ISR();
 33891  000F  31B2  2291         	fcall	_TMR0_ISR
 33892  0011                     i1l363:	
 33893                           ;interrupt_manager.c: 58: else
 33894                           ;interrupt_manager.c: 59: {
 33895                           
 33896                           ;interrupt_manager.c: 57: }
 33897                           
 33898  0011  0870               	movf	??_INTERRUPT_InterruptManager,w
 33899  0012  0020               	movlb	0	; select bank0
 33900  0013  00FF               	movwf	127
 33901  0014  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 33902  0015  0009               	retfie
 33903  0016                     __end_of_INTERRUPT_InterruptManager:	
 33904                           
 33905                           	psect	text104
 33906  3291                     __ptext104:	
 33907 ;; *************** function _TMR0_ISR *****************
 33908 ;; Defined at:
 33909 ;;		line 136 in file "mcc_generated_files/tmr0.c"
 33910 ;; Parameters:    Size  Location     Type
 33911 ;;		None
 33912 ;; Auto vars:     Size  Location     Type
 33913 ;;		None
 33914 ;; Return value:  Size  Location     Type
 33915 ;;                  1    wreg      void 
 33916 ;; Registers used:
 33917 ;;		wreg, status,2, status,0, pclath, cstack
 33918 ;; Tracked objects:
 33919 ;;		On entry : 0/0
 33920 ;;		On exit  : 0/0
 33921 ;;		Unchanged: 0/0
 33922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 33923 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33924 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33925 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33926 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33927 ;;Total ram usage:        0 bytes
 33928 ;; Hardware stack levels used:    1
 33929 ;; Hardware stack levels required when called:    2
 33930 ;; This function calls:
 33931 ;;		_TMR0_CallBack
 33932 ;; This function is called by:
 33933 ;;		_INTERRUPT_InterruptManager
 33934 ;; This function uses a non-reentrant model
 33935 ;;
 33936                           
 33937                           
 33938                           ;psect for function _TMR0_ISR
 33939  3291                     _TMR0_ISR:	
 33940                           
 33941                           ;tmr0.c: 139: PIR0bits.TMR0IF = 0;
 33942                           
 33943                           ;incstack = 0
 33944                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
 33945  3291  0020               	movlb	0	; select bank0
 33946  3292  1290               	bcf	16,5	;volatile
 33947                           
 33948                           ;tmr0.c: 141: TMR0H = timer0ReloadVal16bit >> 8;
 33949  3293  0021               	movlb	1	; select bank1
 33950  3294  0841               	movf	(_timer0ReloadVal16bit+1)^(0+128),w	;volatile
 33951  3295  0020               	movlb	0	; select bank0
 33952  3296  0096               	movwf	22	;volatile
 33953                           
 33954                           ;tmr0.c: 142: TMR0L = (uint8_t) timer0ReloadVal16bit;
 33955  3297  0021               	movlb	1	; select bank1
 33956  3298  0840               	movf	_timer0ReloadVal16bit^(0+128),w	;volatile
 33957  3299  0020               	movlb	0	; select bank0
 33958  329A  0095               	movwf	21	;volatile
 33959                           
 33960                           ;tmr0.c: 146: TMR0_CallBack();
 33961  329B  31B2  222A         	fcall	_TMR0_CallBack
 33962  329D  0008               	return
 33963  329E                     __end_of_TMR0_ISR:	
 33964                           
 33965                           	psect	text105
 33966  322A                     __ptext105:	
 33967 ;; *************** function _TMR0_CallBack *****************
 33968 ;; Defined at:
 33969 ;;		line 151 in file "mcc_generated_files/tmr0.c"
 33970 ;; Parameters:    Size  Location     Type
 33971 ;;		None
 33972 ;; Auto vars:     Size  Location     Type
 33973 ;;		None
 33974 ;; Return value:  Size  Location     Type
 33975 ;;                  1    wreg      void 
 33976 ;; Registers used:
 33977 ;;		wreg, status,2, status,0, pclath, cstack
 33978 ;; Tracked objects:
 33979 ;;		On entry : 0/0
 33980 ;;		On exit  : 0/0
 33981 ;;		Unchanged: 0/0
 33982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 33983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33984 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33985 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33986 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 33987 ;;Total ram usage:        0 bytes
 33988 ;; Hardware stack levels used:    1
 33989 ;; Hardware stack levels required when called:    1
 33990 ;; This function calls:
 33991 ;;		Absolute function
 33992 ;;		_TMR0_DefaultInterruptHandler
 33993 ;; This function is called by:
 33994 ;;		_TMR0_ISR
 33995 ;; This function uses a non-reentrant model
 33996 ;;
 33997                           
 33998                           
 33999                           ;psect for function _TMR0_CallBack
 34000  322A                     _TMR0_CallBack:	
 34001                           
 34002                           ;tmr0.c: 155: if(TMR0_InterruptHandler)
 34003                           
 34004                           ;incstack = 0
 34005                           ; Regs used in _TMR0_CallBack: [wreg+status,2+status,0+pclath+cstack]
 34006  322A  0021               	movlb	1	; select bank1
 34007  322B  083E               	movf	_TMR0_InterruptHandler^(0+128),w
 34008  322C  043F               	iorwf	(_TMR0_InterruptHandler+1)^(0+128),w
 34009  322D  1903               	btfsc	3,2
 34010  322E  0008               	return
 34011                           
 34012                           ;tmr0.c: 156: {
 34013                           ;tmr0.c: 157: TMR0_InterruptHandler();
 34014  322F  083F               	movf	(_TMR0_InterruptHandler+1)^(0+128),w
 34015  3230  008A               	movwf	10
 34016  3231  083E               	movf	_TMR0_InterruptHandler^(0+128),w
 34017  3232  000A               	callw
 34018  3233  31B2               	pagesel	$
 34019  3234  0008               	return
 34020  3235                     __end_of_TMR0_CallBack:	
 34021                           
 34022                           	psect	text106
 34023  2200                     __ptext106:	
 34024 ;; *************** function _TMR0_DefaultInterruptHandler *****************
 34025 ;; Defined at:
 34026 ;;		line 165 in file "mcc_generated_files/tmr0.c"
 34027 ;; Parameters:    Size  Location     Type
 34028 ;;		None
 34029 ;; Auto vars:     Size  Location     Type
 34030 ;;		None
 34031 ;; Return value:  Size  Location     Type
 34032 ;;                  1    wreg      void 
 34033 ;; Registers used:
 34034 ;;		None
 34035 ;; Tracked objects:
 34036 ;;		On entry : 0/0
 34037 ;;		On exit  : 0/0
 34038 ;;		Unchanged: 0/0
 34039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 34040 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 34041 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 34042 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 34043 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 34044 ;;Total ram usage:        0 bytes
 34045 ;; Hardware stack levels used:    1
 34046 ;; This function calls:
 34047 ;;		Nothing
 34048 ;; This function is called by:
 34049 ;;		_TMR0_Initialize
 34050 ;;		_TMR0_CallBack
 34051 ;; This function uses a non-reentrant model
 34052 ;;
 34053                           
 34054                           
 34055                           ;psect for function _TMR0_DefaultInterruptHandler
 34056  2200                     _TMR0_DefaultInterruptHandler:	
 34057                           
 34058                           ;incstack = 0
 34059                           ; Regs used in _TMR0_DefaultInterruptHandler: []
 34060  2200  0008               	return
 34061  2201                     __end_of_TMR0_DefaultInterruptHandler:	
 34062  007E                     btemp	set	126	;btemp
 34063  007E                     int$flags	set	126
 34064  007E                     wtemp0	set	126


Data Sizes:
    Strings     1156
    Constant    522
    Data        664
    BSS         307
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80     79      79
    BANK1            80      8      62
    BANK2            80      0      77
    BANK3            80      0      72
    BANK4            80      0      72
    BANK5            80      0      77
    BANK6            80      0      73
    BANK7            80      0      76
    BANK8            80      0      56
    BANK9            80      0      61
    BANK10           80      0      56
    BANK11           80      0      40
    BANK12           80      0       0
    BANK13           80      0       0
    BANK14           80      0       0
    BANK15           80      0       0
    BANK16           80      0       0
    BANK17           80      0       0
    BANK18           80      0       0
    BANK19           80      0       0
    BANK20           80      0       0
    BANK21           80      0       0
    BANK22           16      0       0
    BANK23            0      0       0
    BANK24            0      0       0
    BANK25            0      0       0

Pointer List with Targets:

    menu_run_option@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    flashy_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    menu_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    slot_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    locked_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    secret_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    flashy_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    menu_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    slot_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    locked_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    secret_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    matrix_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    flashy_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    menu_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    slot_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    locked_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    matrix_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    flashy_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    menu_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    slot_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    secret_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    matrix_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    menu_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    slot_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    locked_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    secret_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    matrix_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    flashy_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    slot_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    locked_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    secret_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    matrix_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    schedulerInst.tasks.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 0
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    schedulerInst.tasks.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 0
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    schedulerInst.tasks.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 0
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    schedulerInst.tasks.taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    schedulerExecute$4109	PTR struct t_schedulerTask size(1) Largest target is 13
		 -> matrix_task(BANK3[13]), secret_task(BANK2[13]), locked_task(BANK2[13]), slot_task(BANK2[13]), 
		 -> menu_task(BANK2[13]), flashy_task(BANK2[13]), NULL(NULL[0]), 

    matrix_secret_check@data	PTR struct t_matrix_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    secret_check@data	PTR struct t_secret_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    locked_secret_check@data	PTR struct t_locked_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    S902$3$0	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    S902$2$0	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    S902$4$0	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    TMR4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 120
		 -> STR_84(CODE[23]), STR_83(CODE[27]), STR_82(CODE[46]), matrix_secret_inputs.inputs(BANK5[20]), 
		 -> matrix_secret_inputs(BANK5[25]), STR_81(CODE[8]), STR_80(CODE[7]), STR_79(CODE[8]), 
		 -> STR_78(CODE[6]), STR_77(CODE[10]), STR_76(CODE[5]), STR_75(CODE[7]), 
		 -> STR_74(CODE[9]), STR_73(CODE[7]), STR_72(CODE[7]), Slot_Wheel(BANK6[55]), 
		 -> secret_inputs.inputs(BANK4[20]), secret_inputs(BANK4[25]), STR_44(CODE[5]), STR_43(CODE[5]), 
		 -> STR_42(CODE[11]), STR_41(CODE[13]), locked_secret_inputs.inputs(BANK4[20]), locked_secret_inputs(BANK4[25]), 
		 -> STR_38(CODE[5]), STR_37(CODE[43]), STR_36(CODE[13]), STR_35(CODE[47]), 
		 -> STR_34(CODE[17]), STR_33(CODE[120]), STR_32(CODE[34]), STR_31(CODE[16]), 
		 -> STR_30(CODE[35]), STR_29(CODE[15]), STR_28(CODE[12]), STR_27(CODE[29]), 
		 -> STR_26(CODE[19]), STR_25(CODE[17]), STR_24(CODE[40]), STR_23(CODE[27]), 
		 -> STR_22(CODE[29]), STR_21(CODE[30]), STR_20(CODE[36]), STR_19(CODE[28]), 
		 -> STR_18(CODE[22]), STR_17(CODE[26]), STR_16(CODE[21]), STR_15(CODE[19]), 
		 -> STR_14(CODE[6]), STR_13(CODE[8]), STR_12(CODE[9]), STR_11(CODE[5]), 
		 -> STR_10(CODE[18]), STR_8(CODE[6]), STR_7(CODE[8]), STR_6(CODE[10]), 
		 -> STR_5(CODE[6]), STR_4(CODE[5]), matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), 
		 -> locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), 
		 -> NULL(NULL[0]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 120
		 -> STR_84(CODE[23]), STR_83(CODE[27]), STR_82(CODE[46]), matrix_secret_inputs.inputs(BANK5[20]), 
		 -> matrix_secret_inputs(BANK5[25]), STR_81(CODE[8]), STR_80(CODE[7]), STR_79(CODE[8]), 
		 -> STR_78(CODE[6]), STR_77(CODE[10]), STR_76(CODE[5]), STR_75(CODE[7]), 
		 -> STR_74(CODE[9]), STR_73(CODE[7]), STR_72(CODE[7]), Slot_Wheel(BANK6[55]), 
		 -> secret_inputs.inputs(BANK4[20]), secret_inputs(BANK4[25]), STR_44(CODE[5]), STR_43(CODE[5]), 
		 -> STR_42(CODE[11]), STR_41(CODE[13]), locked_secret_inputs.inputs(BANK4[20]), locked_secret_inputs(BANK4[25]), 
		 -> STR_38(CODE[5]), STR_37(CODE[43]), STR_36(CODE[13]), STR_35(CODE[47]), 
		 -> STR_34(CODE[17]), STR_33(CODE[120]), STR_32(CODE[34]), STR_31(CODE[16]), 
		 -> STR_30(CODE[35]), STR_29(CODE[15]), STR_28(CODE[12]), STR_27(CODE[29]), 
		 -> STR_26(CODE[19]), STR_25(CODE[17]), STR_24(CODE[40]), STR_23(CODE[27]), 
		 -> STR_22(CODE[29]), STR_21(CODE[30]), STR_20(CODE[36]), STR_19(CODE[28]), 
		 -> STR_18(CODE[22]), STR_17(CODE[26]), STR_16(CODE[21]), STR_15(CODE[19]), 
		 -> STR_14(CODE[6]), STR_13(CODE[8]), STR_12(CODE[9]), STR_11(CODE[5]), 
		 -> STR_10(CODE[18]), STR_8(CODE[6]), STR_7(CODE[8]), STR_6(CODE[10]), 
		 -> STR_5(CODE[6]), STR_4(CODE[5]), matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), 
		 -> locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), 
		 -> NULL(NULL[0]), 

    memset@p1	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), badge_inst(BANK3[18]), NULL(NULL[0]), 

    memset@p	PTR unsigned char  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), badge_inst(BANK3[18]), NULL(NULL[0]), 

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_85(CODE[7]), sprintf@c(BANK0[1]), STR_65(CODE[9]), STR_64(CODE[13]), 
		 -> STR_63(CODE[12]), STR_62(CODE[8]), STR_61(CODE[11]), STR_60(CODE[11]), 
		 -> STR_59(CODE[9]), STR_58(CODE[8]), STR_57(CODE[8]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_71(CODE[3]), STR_70(CODE[9]), STR_69(CODE[9]), STR_68(CODE[9]), 
		 -> STR_67(CODE[9]), STR_66(CODE[9]), STR_40(CODE[4]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 41
		 -> flashy_Main@hit_counter(BANK0[6]), matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), 
		 -> slot_TaskData(BANK11[40]), menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    matrix_Exit@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    matrix_secret_clear@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    matrix_Main@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    matrix_Main@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    matrix_Main@data	PTR struct t_matrix_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    matrix_display_option@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    matrix_display_option@data	PTR struct t_matrix_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    matrix_secret_check@inputs	PTR unsigned char  size(1) Largest target is 26
		 -> matrix_secret_inputs.inputs(BANK5[20]), matrix_secret_inputs(BANK5[25]), 

    matrix_Init@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    matrix_Init@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    matrix_Init@data	PTR struct t_matrix_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    S3173matrix_secret_input$variable	PTR unsigned int  size(1) Largest target is 2
		 -> secret_value(BANK1[2]), 

    matrix_secret_inputs.variable	PTR unsigned int  size(1) Largest target is 2
		 -> secret_value(BANK1[2]), 

    matrix_option	PTR unsigned char [10] size(2) Largest target is 10
		 -> STR_81(CODE[8]), STR_80(CODE[7]), STR_79(CODE[8]), STR_78(CODE[6]), 
		 -> STR_77(CODE[10]), STR_76(CODE[5]), STR_75(CODE[7]), STR_74(CODE[9]), 
		 -> STR_73(CODE[7]), STR_72(CODE[7]), 

    slot_Exit@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    slot_Main@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    slot_Main@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    slot_Main@data	PTR struct t_slot_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    slot_Finished_Animation@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    slot_Finished_Animation@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    slot_Finished_Animation@data	PTR struct t_slot_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    slot_Running_Animation@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    slot_Running_Animation@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    slot_Running_Animation@data	PTR struct t_slot_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    slot_Setup@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    slot_taskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    slot_Setup@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    slot_Setup@data	PTR struct t_slot_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    S2374t_slot_taskData$badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    slot_Init@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    slot_Init@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    slot_Init@data	PTR struct t_slot_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    Shot_Options_Long	PTR unsigned char [9] size(2) Largest target is 13
		 -> STR_65(CODE[9]), STR_64(CODE[13]), STR_63(CODE[12]), STR_62(CODE[8]), 
		 -> STR_61(CODE[11]), STR_60(CODE[11]), STR_59(CODE[9]), STR_58(CODE[8]), 
		 -> STR_57(CODE[8]), 

    Shot_Options	PTR unsigned char [9] size(2) Largest target is 5
		 -> STR_56(CODE[5]), STR_55(CODE[5]), STR_54(CODE[5]), STR_53(CODE[5]), 
		 -> STR_52(CODE[5]), STR_51(CODE[5]), STR_50(CODE[5]), STR_49(CODE[5]), 
		 -> STR_48(CODE[5]), 

    secret_Exit@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    secret_clear@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    secret_clear@data	PTR struct t_secret_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    secret_Main@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    secret_Main@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    secret_Main@data	PTR struct t_secret_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    secret_check@inputs	PTR unsigned char  size(1) Largest target is 26
		 -> secret_inputs.inputs(BANK4[20]), secret_inputs(BANK4[25]), 

    secret_Init@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    secret_Init@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    secret_Init@data	PTR struct t_secret_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    S2882secret_input$variable	PTR unsigned int  size(1) Largest target is 2
		 -> secret_value(BANK1[2]), 

    secret_inputs.variable	PTR unsigned int  size(1) Largest target is 2
		 -> secret_value(BANK1[2]), 

    locked_Exit@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    locked_clear@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    locked_clear@data	PTR struct t_locked_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    locked_Main@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    locked_Main@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    locked_Main@data	PTR struct t_locked_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    locked_secret_check@inputs	PTR unsigned char  size(1) Largest target is 26
		 -> locked_secret_inputs.inputs(BANK4[20]), locked_secret_inputs(BANK4[25]), 

    locked_Init@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    locked_Init@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    locked_Init@data	PTR struct t_locked_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    S2733locked_secret_input$variable	PTR unsigned int  size(1) Largest target is 2
		 -> locked_secret_value(BANK2[2]), 

    locked_secret_inputs.variable	PTR unsigned int  size(1) Largest target is 2
		 -> locked_secret_value(BANK2[2]), 

    flashy_Exit@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    flashy_Main@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    flashy_Main@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    flashy_Main@data	PTR struct t_flashy_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    flashy_display_option@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    flashy_display_option@data	PTR struct t_flashy_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    flashy_Init@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    flashy_Init@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    flashy_Init@data	PTR struct t_flashy_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    flashy_option	PTR unsigned char [28] size(2) Largest target is 120
		 -> STR_38(CODE[5]), STR_37(CODE[43]), STR_36(CODE[13]), STR_35(CODE[47]), 
		 -> STR_34(CODE[17]), STR_33(CODE[120]), STR_32(CODE[34]), STR_31(CODE[16]), 
		 -> STR_30(CODE[35]), STR_29(CODE[15]), STR_28(CODE[12]), STR_27(CODE[29]), 
		 -> STR_26(CODE[19]), STR_25(CODE[17]), STR_24(CODE[40]), STR_23(CODE[27]), 
		 -> STR_22(CODE[29]), STR_21(CODE[30]), STR_20(CODE[36]), STR_19(CODE[28]), 
		 -> STR_18(CODE[22]), STR_17(CODE[26]), STR_16(CODE[21]), STR_15(CODE[19]), 
		 -> STR_14(CODE[6]), STR_13(CODE[8]), STR_12(CODE[9]), STR_11(CODE[5]), 

    FLASHY_TEXT_SECRET_TEST	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_10(CODE[18]), 

    FLASHY_TEXT	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_9(CODE[5]), 

    menu_Exit@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    menu_clear@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    menu_clear@data	PTR struct t_menu_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    menu_run_option@data	PTR struct t_menu_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    menu_display_option@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    menu_display_option@data	PTR struct t_menu_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    menu_Main@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    slot_taskData	PTR struct t_slot_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    menu_Main@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    menu_Main@data	PTR struct t_menu_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    menu_Init@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    menu_Init@taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    menu_Init@data	PTR struct t_menu_taskData size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    menu_option	PTR unsigned char [5] size(2) Largest target is 10
		 -> STR_8(CODE[6]), STR_7(CODE[8]), STR_6(CODE[10]), STR_5(CODE[6]), 
		 -> STR_4(CODE[5]), 

    displayL2_ClrUserLeds@display	PTR struct t_nullifyDisplay_l2 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    displayL2_SetUserLeds@display	PTR struct t_nullifyDisplay_l2 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    displayL2_EraseSegDisplay@display	PTR struct t_nullifyDisplay_l2 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    displayL2_ForceUpdate@display	PTR struct t_nullifyDisplay_l2 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    displayL2_PutStr@str	PTR unsigned char  size(2) Largest target is 120
		 -> STR_47(CODE[5]), STR_46(CODE[5]), STR_45(CODE[5]), flashy_Main@hit_counter(BANK0[6]), 
		 -> STR_39(CODE[5]), STR_38(CODE[5]), STR_37(CODE[43]), STR_36(CODE[13]), 
		 -> STR_35(CODE[47]), STR_34(CODE[17]), STR_33(CODE[120]), STR_32(CODE[34]), 
		 -> STR_31(CODE[16]), STR_30(CODE[35]), STR_29(CODE[15]), STR_28(CODE[12]), 
		 -> STR_27(CODE[29]), STR_26(CODE[19]), STR_25(CODE[17]), STR_24(CODE[40]), 
		 -> STR_23(CODE[27]), STR_22(CODE[29]), STR_21(CODE[30]), STR_20(CODE[36]), 
		 -> STR_19(CODE[28]), STR_18(CODE[22]), STR_17(CODE[26]), STR_16(CODE[21]), 
		 -> STR_15(CODE[19]), STR_14(CODE[6]), STR_13(CODE[8]), STR_12(CODE[9]), 
		 -> STR_11(CODE[5]), STR_8(CODE[6]), STR_7(CODE[8]), STR_6(CODE[10]), 
		 -> STR_5(CODE[6]), STR_4(CODE[5]), STR_3(CODE[5]), marquee@display_string(BANK0[5]), 
		 -> marquee_speedy@display_string(BANK0[5]), 

    displayL2_PutStr@display	PTR struct t_nullifyDisplay_l2 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    displayL2_PutChar@display	PTR struct t_nullifyDisplay_l2 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    displayL2_Initialize@display	PTR struct t_nullifyDisplay_l2 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    displayL1_Update@display	PTR struct t_nullifyDisplay_l1 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    displayL1_SetUserLed@display	PTR struct t_nullifyDisplay_l1 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    displayL1_SetSegChar@display	PTR struct t_nullifyDisplay_l1 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    sp__memset	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), badge_inst(BANK3[18]), NULL(NULL[0]), 

    displayL1_Initialize@display	PTR struct t_nullifyDisplay_l1 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    nullifyBadge_irTxRelease@badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    nullifyBadge_irTxRegister@badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    nullifyBadge_userLedsClr@badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    nullifyBadge_userLedsSet@badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    nullifyBadge_userLedsRegister@badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    nullifyBadge_segDisplayErase@badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    nullifyBadge_segDisplayPutStr@str	PTR unsigned char  size(2) Largest target is 120
		 -> STR_47(CODE[5]), STR_46(CODE[5]), STR_45(CODE[5]), flashy_Main@hit_counter(BANK0[6]), 
		 -> STR_39(CODE[5]), STR_38(CODE[5]), STR_37(CODE[43]), STR_36(CODE[13]), 
		 -> STR_35(CODE[47]), STR_34(CODE[17]), STR_33(CODE[120]), STR_32(CODE[34]), 
		 -> STR_31(CODE[16]), STR_30(CODE[35]), STR_29(CODE[15]), STR_28(CODE[12]), 
		 -> STR_27(CODE[29]), STR_26(CODE[19]), STR_25(CODE[17]), STR_24(CODE[40]), 
		 -> STR_23(CODE[27]), STR_22(CODE[29]), STR_21(CODE[30]), STR_20(CODE[36]), 
		 -> STR_19(CODE[28]), STR_18(CODE[22]), STR_17(CODE[26]), STR_16(CODE[21]), 
		 -> STR_15(CODE[19]), STR_14(CODE[6]), STR_13(CODE[8]), STR_12(CODE[9]), 
		 -> STR_11(CODE[5]), STR_8(CODE[6]), STR_7(CODE[8]), STR_6(CODE[10]), 
		 -> STR_5(CODE[6]), STR_4(CODE[5]), marquee@display_string(BANK0[5]), marquee_speedy@display_string(BANK0[5]), 

    nullifyBadge_segDisplayPutStr@badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    nullifyBadge_segDisplayForceUpdate@badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    nullifyBadge_segDisplayRegister@badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    nullifyBadge_platformInit@badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    matrix_task.taskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    secret_task.taskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    locked_task.taskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    slot_task.taskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    menu_task.taskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    flashy_task.taskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    marquee@string	PTR unsigned char  size(2) Largest target is 120
		 -> STR_44(CODE[5]), STR_43(CODE[5]), STR_42(CODE[11]), STR_41(CODE[13]), 
		 -> STR_38(CODE[5]), STR_37(CODE[43]), STR_36(CODE[13]), STR_35(CODE[47]), 
		 -> STR_34(CODE[17]), STR_33(CODE[120]), STR_32(CODE[34]), STR_31(CODE[16]), 
		 -> STR_30(CODE[35]), STR_29(CODE[15]), STR_28(CODE[12]), STR_27(CODE[29]), 
		 -> STR_26(CODE[19]), STR_25(CODE[17]), STR_24(CODE[40]), STR_23(CODE[27]), 
		 -> STR_22(CODE[29]), STR_21(CODE[30]), STR_20(CODE[36]), STR_19(CODE[28]), 
		 -> STR_18(CODE[22]), STR_17(CODE[26]), STR_16(CODE[21]), STR_15(CODE[19]), 
		 -> STR_14(CODE[6]), STR_13(CODE[8]), STR_12(CODE[9]), STR_11(CODE[5]), 
		 -> STR_10(CODE[18]), STR_8(CODE[6]), STR_7(CODE[8]), STR_6(CODE[10]), 
		 -> STR_5(CODE[6]), STR_4(CODE[5]), matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), 
		 -> locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), 
		 -> NULL(NULL[0]), 

    marquee_speedy@string	PTR unsigned char  size(2) Largest target is 120
		 -> STR_84(CODE[23]), STR_83(CODE[27]), STR_82(CODE[46]), STR_81(CODE[8]), 
		 -> STR_80(CODE[7]), STR_79(CODE[8]), STR_78(CODE[6]), STR_77(CODE[10]), 
		 -> STR_76(CODE[5]), STR_75(CODE[7]), STR_74(CODE[9]), STR_73(CODE[7]), 
		 -> STR_72(CODE[7]), STR_38(CODE[5]), STR_37(CODE[43]), STR_36(CODE[13]), 
		 -> STR_35(CODE[47]), STR_34(CODE[17]), STR_33(CODE[120]), STR_32(CODE[34]), 
		 -> STR_31(CODE[16]), STR_30(CODE[35]), STR_29(CODE[15]), STR_28(CODE[12]), 
		 -> STR_27(CODE[29]), STR_26(CODE[19]), STR_25(CODE[17]), STR_24(CODE[40]), 
		 -> STR_23(CODE[27]), STR_22(CODE[29]), STR_21(CODE[30]), STR_20(CODE[36]), 
		 -> STR_19(CODE[28]), STR_18(CODE[22]), STR_17(CODE[26]), STR_16(CODE[21]), 
		 -> STR_15(CODE[19]), STR_14(CODE[6]), STR_13(CODE[8]), STR_12(CODE[9]), 
		 -> STR_11(CODE[5]), matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), 
		 -> slot_TaskData(BANK11[40]), menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    schedulerInst.tasks	PTR struct t_schedulerTask[16] size(1) Largest target is 13
		 -> matrix_task(BANK3[13]), secret_task(BANK2[13]), locked_task(BANK2[13]), slot_task(BANK2[13]), 
		 -> menu_task(BANK2[13]), flashy_task(BANK2[13]), NULL(NULL[0]), 

    S1198t_matrix_taskData$badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    matrix_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    S1173t_secret_taskData$badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    secret_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    S1164t_locked_taskData$badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    locked_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    S1067t_slot_taskData$badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    slot_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    S1136t_menu_taskData$badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    menu_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    S1118t_flashy_taskData$badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    flashy_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    matrix_task.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    matrix_task.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    matrix_task.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    matrix_task.taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    secret_task.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    secret_task.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    secret_task.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    secret_task.taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    locked_task.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    locked_task.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    locked_task.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    locked_task.taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    slot_task.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    slot_task.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    slot_task.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    slot_task.taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    menu_task.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    menu_task.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    menu_task.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    menu_task.taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    flashy_task.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    flashy_task.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    flashy_task.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    flashy_task.taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    fadeDisplay_Exit@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    fadeDisplay_Main@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    S1013t_fadeDisplay_taskData$badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    fadeDisplay_Init@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    schedulerExecute@scheduler.tasks.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    schedulerExecute@scheduler.tasks.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    schedulerExecute@scheduler.tasks.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    schedulerExecute@scheduler.tasks.taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    schedulerExecute@scheduler.tasks	PTR struct t_schedulerTask[16] size(1) Largest target is 13
		 -> matrix_task(BANK3[13]), secret_task(BANK2[13]), locked_task(BANK2[13]), slot_task(BANK2[13]), 
		 -> menu_task(BANK2[13]), flashy_task(BANK2[13]), NULL(NULL[0]), 

    schedulerExecute@scheduler	PTR struct t_scheduler size(1) Largest target is 34
		 -> schedulerInst(BANK3[18]), 

    scheduler_TaskRemove@task.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    scheduler_TaskRemove@task.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    scheduler_TaskRemove@task.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    scheduler_TaskRemove@task.taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    scheduler_TaskRemove@scheduler.tasks	PTR struct t_schedulerTask[16] size(1) Largest target is 13
		 -> matrix_task(BANK3[13]), secret_task(BANK2[13]), locked_task(BANK2[13]), slot_task(BANK2[13]), 
		 -> menu_task(BANK2[13]), flashy_task(BANK2[13]), NULL(NULL[0]), 

    scheduler_TaskAdd@task.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    scheduler_TaskAdd@task.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    scheduler_TaskAdd@task.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    scheduler_TaskAdd@task.taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    scheduler_TaskAdd@scheduler.tasks.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    scheduler_TaskAdd@scheduler.tasks.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    scheduler_TaskAdd@scheduler.tasks.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    scheduler_TaskAdd@scheduler.tasks.taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    scheduler_TaskAdd@task	PTR struct t_schedulerTask size(1) Largest target is 13
		 -> matrix_task(BANK3[13]), secret_task(BANK2[13]), locked_task(BANK2[13]), slot_task(BANK2[13]), 
		 -> menu_task(BANK2[13]), flashy_task(BANK2[13]), 

    scheduler_TaskAdd@scheduler.tasks	PTR struct t_schedulerTask[16] size(1) Largest target is 13
		 -> matrix_task(BANK3[13]), secret_task(BANK2[13]), locked_task(BANK2[13]), slot_task(BANK2[13]), 
		 -> menu_task(BANK2[13]), flashy_task(BANK2[13]), NULL(NULL[0]), 

    scheduler_TaskAdd@scheduler	PTR struct t_scheduler size(1) Largest target is 34
		 -> schedulerInst(BANK3[18]), 

    scheduler_TaskInit@task.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    scheduler_TaskInit@task.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    scheduler_TaskInit@task.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    scheduler_TaskInit@task.taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    scheduler_TaskInit@task	PTR struct t_schedulerTask size(1) Largest target is 13
		 -> matrix_task(BANK3[13]), secret_task(BANK2[13]), locked_task(BANK2[13]), slot_task(BANK2[13]), 
		 -> menu_task(BANK2[13]), flashy_task(BANK2[13]), 

    S923t_scheduler$tasks	PTR struct t_schedulerTask[16] size(1) Largest target is 13
		 -> matrix_task(BANK3[13]), secret_task(BANK2[13]), locked_task(BANK2[13]), slot_task(BANK2[13]), 
		 -> menu_task(BANK2[13]), flashy_task(BANK2[13]), NULL(NULL[0]), 

    scheduler_Init@scheduler.tasks	PTR struct t_schedulerTask[16] size(1) Largest target is 13
		 -> matrix_task(BANK3[13]), secret_task(BANK2[13]), locked_task(BANK2[13]), slot_task(BANK2[13]), 
		 -> menu_task(BANK2[13]), flashy_task(BANK2[13]), NULL(NULL[0]), 

    scheduler_Init@scheduler	PTR struct t_scheduler size(1) Largest target is 34
		 -> schedulerInst(BANK3[18]), 

    S902t_schedulerTask$taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    scheduler_TaskRun@task.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Main(), secret_Main(), locked_Main(), slot_Main(), 
		 -> menu_Main(), flashy_Main(), Absolute function(), 

    S902t_schedulerTask$taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    scheduler_TaskRun@task.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Exit(), secret_Exit(), locked_Exit(), slot_Exit(), 
		 -> menu_Exit(), flashy_Exit(), Absolute function(), 

    S902t_schedulerTask$taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    scheduler_TaskRun@task.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> matrix_Init(), secret_Init(), locked_Init(), slot_Init(), 
		 -> menu_Init(), flashy_Init(), Absolute function(), 

    S902t_schedulerTask$taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    scheduler_TaskRun@task.taskData	PTR void  size(2) Largest target is 41
		 -> matrix_TaskData(BANK9[31]), secret_TaskData(BANK5[14]), locked_TaskData(BANK5[14]), slot_TaskData(BANK11[40]), 
		 -> menu_TaskData(BANK5[14]), flashy_TaskData(BANK9[30]), NULL(NULL[0]), 

    scheduler_TaskRun@task	PTR struct t_schedulerTask size(1) Largest target is 13
		 -> matrix_task(BANK3[13]), secret_task(BANK2[13]), locked_task(BANK2[13]), slot_task(BANK2[13]), 
		 -> menu_task(BANK2[13]), flashy_task(BANK2[13]), NULL(NULL[0]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR0_DefaultInterruptHandler(), 

    SPI1_Exchange8bitBuffer@dataOut	PTR unsigned char  size(1) Largest target is 10
		 -> displayL1_Update@tmpRxBuf(BANK0[10]), 

    SPI1_Exchange8bitBuffer@dataIn	PTR unsigned char  size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 


Critical Paths under _main in COMMON

    _schedulerExecute->_TMR0_Read16bitTimer
    _scheduler_TaskRun->_TMR0_Read16bitTimer
    _secret_check->_strlen
    _matrix_secret_check->_strlen
    _slot_Setup->___lwmod
    _locked_secret_check->_strlen
    _nullifyBadge_userLedsClr->_displayL2_ClrUserLeds
    _displayL2_ClrUserLeds->_displayL1_Update
    _sprintf->___lwmod
    _led_rand->___almod
    _rand->___lmul
    _nullifyBadge_userLedsSet->_displayL2_SetUserLeds
    _displayL2_SetUserLeds->_displayL1_Update
    _displayL1_SetSegChar->_displayCharReverse
    _nullifyBadge_segDisplayForceUpdate->_displayL2_ForceUpdate
    _displayL2_ForceUpdate->_displayL1_Update
    ___lwmod->___lwdiv
    _displayL2_Initialize->_displayL1_Initialize
    _displayL1_Initialize->_displayL1_Update
    _displayL1_Update->_SPI1_Exchange8bitBuffer
    _SPI1_Exchange8bitBuffer->_SPI1_Exchange8bit
    _TMR0_Initialize->_TMR0_SetInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_schedulerExecute
    _scheduler_TaskAdd->_matrix_Init
    _slot_Init->_nullifyBadge_segDisplayErase
    _secret_Init->_nullifyBadge_segDisplayErase
    _menu_Init->_nullifyBadge_segDisplayErase
    _matrix_Init->_nullifyBadge_segDisplayErase
    _locked_Init->_nullifyBadge_segDisplayErase
    _flashy_Init->_nullifyBadge_segDisplayErase
    _schedulerExecute->_scheduler_TaskRun
    _scheduler_TaskRun->_slot_Main
    _slot_Running_Animation->_led_circle
    _slot_Finished_Animation->_led_rand
    _menu_Main->_menu_display_option
    _menu_run_option->_menu_clear
    _menu_clear->_nullifyBadge_segDisplayErase
    _menu_display_option->_marquee
    _matrix_display_option->_marquee_speedy
    _slot_Setup->___lwmod
    _locked_clear->_nullifyBadge_segDisplayErase
    _displayL2_ClrUserLeds->_displayL1_Update
    _nullifyBadge_segDisplayErase->_displayL2_EraseSegDisplay
    _displayL2_EraseSegDisplay->_displayL2_PutStr
    _sprintf->___lwmod
    _let_alternate->_nullifyBadge_userLedsSet
    _led_roundabout->_nullifyBadge_userLedsSet
    _led_rand->___almod
    _rand->___lmul
    ___almod->_rand
    _led_curtain->_nullifyBadge_userLedsSet
    _led_circle->_nullifyBadge_userLedsSet
    _led_Parody->_nullifyBadge_userLedsSet
    _nullifyBadge_userLedsSet->_displayL2_SetUserLeds
    _displayL2_SetUserLeds->_displayL1_Update
    _flashy_display_option->_marquee
    _flashy_display_option->_marquee_speedy
    _marquee_speedy->_nullifyBadge_segDisplayPutStr
    _marquee->_nullifyBadge_segDisplayPutStr
    _nullifyBadge_segDisplayPutStr->_displayL2_PutStr
    _displayL2_PutStr->_displayL2_PutChar
    _displayL2_PutChar->_displayL1_SetSegChar
    _displayL2_ForceUpdate->_displayL1_Update
    ___lwmod->_rand
    _nullifyBadge_platformInit->_displayL2_Initialize
    _displayL1_Initialize->_displayL1_Update

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_schedulerExecute

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK15

    None.

Critical Paths under _main in BANK16

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK16

    None.

Critical Paths under _main in BANK17

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK17

    None.

Critical Paths under _main in BANK18

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK18

    None.

Critical Paths under _main in BANK19

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK19

    None.

Critical Paths under _main in BANK20

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK20

    None.

Critical Paths under _main in BANK21

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK21

    None.

Critical Paths under _main in BANK22

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK22

    None.

Critical Paths under _main in BANK23

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK23

    None.

Critical Paths under _main in BANK24

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK24

    None.

Critical Paths under _main in BANK25

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK25

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0  399826
                                             78 BANK0      1     1      0
          _nullifyBadge_platformInit
                   _schedulerExecute
                     _scheduler_Init
                  _scheduler_TaskAdd
                 _scheduler_TaskInit
 ---------------------------------------------------------------------------------
 (1) _scheduler_TaskInit                                   1     1      0     352
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _scheduler_TaskAdd                                    9     8      1   51944
                                             31 BANK0      9     8      1
                   Absolute function *
                        _flashy_Init *
                        _locked_Init *
                        _matrix_Init *
                          _menu_Init *
                        _secret_Init *
                          _slot_Init *
 ---------------------------------------------------------------------------------
 (2) _slot_Init                                            4     2      2   14563
                                             25 BANK0      4     2      2
       _nullifyBadge_segDisplayErase
    _nullifyBadge_segDisplayRegister
           _nullifyBadge_userLedsClr
      _nullifyBadge_userLedsRegister
                         _slot_Setup
 ---------------------------------------------------------------------------------
 (2) _secret_Init                                          4     2      2    7129
                                             25 BANK0      4     2      2
       _nullifyBadge_segDisplayErase
    _nullifyBadge_segDisplayRegister
           _nullifyBadge_userLedsClr
      _nullifyBadge_userLedsRegister
 ---------------------------------------------------------------------------------
 (2) _menu_Init                                            4     2      2    7129
                                             25 BANK0      4     2      2
       _nullifyBadge_segDisplayErase
    _nullifyBadge_segDisplayRegister
           _nullifyBadge_userLedsClr
      _nullifyBadge_userLedsRegister
 ---------------------------------------------------------------------------------
 (2) _matrix_Init                                          6     4      2    7411
                                             25 BANK0      6     4      2
       _nullifyBadge_segDisplayErase
    _nullifyBadge_segDisplayRegister
           _nullifyBadge_userLedsClr
      _nullifyBadge_userLedsRegister
 ---------------------------------------------------------------------------------
 (2) _locked_Init                                          4     2      2    7194
                                             25 BANK0      4     2      2
                   _locked_lock_leds
       _nullifyBadge_segDisplayErase
    _nullifyBadge_segDisplayRegister
           _nullifyBadge_userLedsClr
      _nullifyBadge_userLedsRegister
 ---------------------------------------------------------------------------------
 (2) _flashy_Init                                          4     2      2    7284
                                             25 BANK0      4     2      2
       _nullifyBadge_segDisplayErase
    _nullifyBadge_segDisplayRegister
           _nullifyBadge_userLedsClr
      _nullifyBadge_userLedsRegister
 ---------------------------------------------------------------------------------
 (3) _nullifyBadge_userLedsRegister                        1     1      0     242
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _nullifyBadge_segDisplayRegister                      1     1      0     253
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _scheduler_Init                                       3     3      0     145
                                              1 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _schedulerExecute                                    14    14      0  341988
                                             72 BANK0      6     6      0
                                              0 BANK1      8     8      0
                _TMR0_Read16bitTimer
                  _scheduler_TaskRun
 ---------------------------------------------------------------------------------
 (2) _scheduler_TaskRun                                    1     1      0  341432
                                             71 BANK0      1     1      0
                   Absolute function *
                _TMR0_Read16bitTimer
                        _flashy_Main *
                        _locked_Main *
                        _matrix_Main *
                          _menu_Main *
                        _secret_Main *
                          _slot_Main *
 ---------------------------------------------------------------------------------
 (3) _slot_Main                                           21    19      2   73336
                                             50 BANK0     21    19      2
                            ___lwmod
                            _marquee
                     _marquee_speedy
                             _memset
            _nullifyBadge_buttonsGet
                               _rand
            _slot_Finished_Animation
             _slot_Running_Animation
                         _slot_Setup
                            _sprintf
                             _strlen
 ---------------------------------------------------------------------------------
 (4) _slot_Running_Animation                               6     4      2    3731
                                             18 BANK0      6     4      2
                         _led_circle
 ---------------------------------------------------------------------------------
 (4) _slot_Finished_Animation                              6     4      2    4417
                                             29 BANK0      6     4      2
                           _led_rand
 ---------------------------------------------------------------------------------
 (3) _secret_Main                                          8     6      2    4833
                                             50 BANK0      8     6      2
            _nullifyBadge_buttonsGet
                       _secret_check
                       _secret_clear
 ---------------------------------------------------------------------------------
 (4) _secret_clear                                         2     0      2     286
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (4) _secret_check                                        19    16      3    2899
                                              7 COMMON     3     0      3
                                              0 BANK0     10    10      0
                             ___bmul
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _menu_Main                                            7     5      2   52406
                                             50 BANK0      7     5      2
                         _menu_clear
                _menu_display_option
                    _menu_run_option
            _nullifyBadge_buttonsGet
                         _slot_Setup
 ---------------------------------------------------------------------------------
 (4) _menu_run_option                                      2     0      2    7012
                                             27 BANK0      2     0      2
                         _menu_clear
 ---------------------------------------------------------------------------------
 (5) _menu_clear                                           2     0      2    6838
                                             25 BANK0      2     0      2
       _nullifyBadge_segDisplayErase
           _nullifyBadge_userLedsClr
 ---------------------------------------------------------------------------------
 (4) _menu_display_option                                  6     4      2   29641
                                             44 BANK0      6     4      2
                            ___lwmod
                            _marquee
 _nullifyBadge_segDisplayForceUpdate
      _nullifyBadge_segDisplayPutStr
           _nullifyBadge_userLedsSet
 ---------------------------------------------------------------------------------
 (3) _matrix_Main                                         10     8      2   42934
                                             50 BANK0     10     8      2
                         _led_Parody
                        _led_curtain
              _matrix_display_option
                _matrix_secret_check
            _nullifyBadge_buttonsGet
 ---------------------------------------------------------------------------------
 (4) _matrix_secret_check                                 19    16      3    3495
                                              7 COMMON     3     0      3
                                              0 BANK0     10    10      0
                             ___bmul
                             _strlen
 ---------------------------------------------------------------------------------
 (4) _matrix_display_option                                4     2      2   15554
                                             44 BANK0      4     2      2
                     _marquee_speedy
 ---------------------------------------------------------------------------------
 (3) _locked_Main                                          7     5      2   47678
                                             50 BANK0      7     5      2
                            ___lwmod
                       _locked_clear
               _locked_get_lock_leds
             _locked_get_unlock_leds
                   _locked_lock_leds
                _locked_secret_check
                 _locked_unlock_leds
                            _marquee
            _nullifyBadge_buttonsGet
 _nullifyBadge_segDisplayForceUpdate
      _nullifyBadge_segDisplayPutStr
           _nullifyBadge_userLedsSet
                         _slot_Setup
 ---------------------------------------------------------------------------------
 (3) _slot_Setup                                           7     5      2    7403
                                             15 BANK0      7     5      2
                            ___lwmod
                             _memset
                               _rand
 ---------------------------------------------------------------------------------
 (4) _locked_unlock_leds                                   2     2      0       0
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _locked_secret_check                                 19    16      3    2452
                                              7 COMMON     3     0      3
                                              0 BANK0     10    10      0
                             ___bmul
                             _strlen
 ---------------------------------------------------------------------------------
 (5) ___bmul                                               4     3      1      76
                                              1 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (3) _locked_lock_leds                                     4     4      0      34
                                              1 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (4) _locked_get_unlock_leds                               4     2      2      34
                                              1 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (4) _locked_get_lock_leds                                 8     6      2      68
                                              1 COMMON     8     6      2
 ---------------------------------------------------------------------------------
 (4) _locked_clear                                         2     0      2    6588
                                             25 BANK0      2     0      2
       _nullifyBadge_segDisplayErase
           _nullifyBadge_userLedsClr
 ---------------------------------------------------------------------------------
 (3) _nullifyBadge_userLedsClr                             1     1      0    2094
                                             11 BANK0      1     1      0
              _displayL2_ClrUserLeds
 ---------------------------------------------------------------------------------
 (4) _displayL2_ClrUserLeds                                1     1      0    1559
                                             11 COMMON     1     1      0
               _displayL1_SetUserLed
                   _displayL1_Update
 ---------------------------------------------------------------------------------
 (3) _nullifyBadge_segDisplayErase                         1     1      0    4196
                                             24 BANK0      1     1      0
          _displayL2_EraseSegDisplay
 ---------------------------------------------------------------------------------
 (4) _displayL2_EraseSegDisplay                            1     1      0    3589
                                             23 BANK0      1     1      0
                   _displayL1_Update
                   _displayL2_PutStr
 ---------------------------------------------------------------------------------
 (3) _flashy_Main                                         14    12      2  120014
                                             50 BANK0     14    12      2
              _flashy_display_option
                         _led_Parody
                         _led_circle
                        _led_curtain
                           _led_rand
                     _led_roundabout
                      _let_alternate
                            _marquee
            _nullifyBadge_buttonsGet
                 _nullifyBadge_irGet
               _nullifyBadge_irTxClr
          _nullifyBadge_irTxRegister
           _nullifyBadge_irTxRelease
               _nullifyBadge_irTxSet
 _nullifyBadge_segDisplayForceUpdate
      _nullifyBadge_segDisplayPutStr
           _nullifyBadge_userLedsSet
                            _sprintf
 ---------------------------------------------------------------------------------
 (4) _sprintf                                             32    20     12   16383
                                             15 BANK0     28    16     12
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              2     2      0      99
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    7304
                                              1 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (4) _nullifyBadge_irTxSet                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _nullifyBadge_irTxRelease                             2     2      0      67
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _nullifyBadge_irTxRegister                            1     1      0      98
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _nullifyBadge_irTxClr                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _nullifyBadge_irGet                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _nullifyBadge_buttonsGet                              3     3      0      46
                                              1 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (4) _let_alternate                                        2     0      2    3314
                                             16 BANK0      2     0      2
           _nullifyBadge_userLedsSet
 ---------------------------------------------------------------------------------
 (4) _led_roundabout                                       8     6      2    8722
                                             16 BANK0      8     6      2
                            ___lwmod
           _nullifyBadge_userLedsSet
 ---------------------------------------------------------------------------------
 (5) _led_rand                                            10    10      0    4190
                                             19 BANK0     10    10      0
                            ___almod
           _nullifyBadge_userLedsSet
                               _rand
 ---------------------------------------------------------------------------------
 (4) _rand                                                 7     5      2     316
                                              4 BANK0      7     5      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (5) ___lmul                                              12     4      8     316
                                              1 COMMON     8     0      8
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (6) ___almod                                             11     3      8     613
                                              9 COMMON     3     3      0
                                             11 BANK0      8     0      8
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (4) _led_curtain                                          8     6      2    8812
                                             16 BANK0      8     6      2
                            ___lwmod
           _nullifyBadge_userLedsSet
 ---------------------------------------------------------------------------------
 (5) _led_circle                                           2     0      2    3404
                                             16 BANK0      2     0      2
           _nullifyBadge_userLedsSet
 ---------------------------------------------------------------------------------
 (4) _led_Parody                                           8     6      2    8874
                                             16 BANK0      8     6      2
                            ___lwmod
           _nullifyBadge_userLedsSet
 ---------------------------------------------------------------------------------
 (6) _nullifyBadge_userLedsSet                             3     1      2    3193
                                             13 BANK0      3     1      2
              _displayL2_SetUserLeds
 ---------------------------------------------------------------------------------
 (7) _displayL2_SetUserLeds                                3     1      2    1868
                                             11 COMMON     1     1      0
                                             11 BANK0      2     0      2
               _displayL1_SetUserLed
                   _displayL1_Update
 ---------------------------------------------------------------------------------
 (5) _displayL1_SetUserLed                                 4     2      2     376
                                              1 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (4) _flashy_display_option                                2     0      2   36121
                                             44 BANK0      2     0      2
                            _marquee
                     _marquee_speedy
 _nullifyBadge_segDisplayForceUpdate
      _nullifyBadge_segDisplayPutStr
 ---------------------------------------------------------------------------------
 (4) _marquee_speedy                                      18    12      6   15132
                                             26 BANK0     18    12      6
                            ___lwdiv
                            ___lwmod
 _nullifyBadge_segDisplayForceUpdate
      _nullifyBadge_segDisplayPutStr
                             _strlen
 ---------------------------------------------------------------------------------
 (4) _marquee                                             18    14      4   15675
                                             26 BANK0     18    14      4
                            ___lwdiv
                            ___lwmod
 _nullifyBadge_segDisplayForceUpdate
      _nullifyBadge_segDisplayPutStr
                             _strlen
 ---------------------------------------------------------------------------------
 (4) _strlen                                               6     4      2    1480
                                              1 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (5) _nullifyBadge_segDisplayPutStr                        3     1      2    3602
                                             23 BANK0      3     1      2
                   _displayL2_PutStr
 ---------------------------------------------------------------------------------
 (5) _displayL2_PutStr                                     7     5      2    2406
                                             16 BANK0      7     5      2
                  _displayL2_PutChar
 ---------------------------------------------------------------------------------
 (6) _displayL2_PutChar                                    6     5      1    1993
                                             10 BANK0      6     5      1
               _displayL1_SetSegChar
 ---------------------------------------------------------------------------------
 (7) _displayL1_SetSegChar                                10     8      2    1298
                                              0 BANK0     10     8      2
                 _displayCharReverse
 ---------------------------------------------------------------------------------
 (8) _displayCharReverse                                  11     9      2     331
                                              1 COMMON    11     9      2
 ---------------------------------------------------------------------------------
 (5) _nullifyBadge_segDisplayForceUpdate                   1     1      0    1507
                                             11 BANK0      1     1      0
              _displayL2_ForceUpdate
 ---------------------------------------------------------------------------------
 (6) _displayL2_ForceUpdate                                1     1      0    1152
                                             11 COMMON     1     1      0
                   _displayL1_Update
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              6     2      4    5272
                                              9 COMMON     2     2      0
                                             11 BANK0      4     0      4
                            ___lwdiv (ARG)
                               _rand (ARG)
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              8     4      4    1221
                                              1 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (3) _TMR0_Read16bitTimer                                 11     9      2     102
                                              1 COMMON    11     9      2
 ---------------------------------------------------------------------------------
 (15) Absolute function(Fake)                              2     0      2       0
 ---------------------------------------------------------------------------------
 (1) _nullifyBadge_platformInit                            1     1      0    5397
                                             12 BANK0      1     1      0
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM1_Initialize
                 _PWM1_LoadDutyValue
                    _PWM2_Initialize
                 _PWM2_LoadDutyValue
                    _PWM5_Initialize
                 _PWM5_LoadDutyValue
                    _PWM6_Initialize
                 _PWM6_LoadDutyValue
                    _SPI1_Initialize
                  _SYSTEM_Initialize
                    _TMR0_Initialize
                    _TMR2_Initialize
                    _TMR4_Initialize
               _displayL2_Initialize
 ---------------------------------------------------------------------------------
 (2) _displayL2_Initialize                                 1     1      0    4257
                                             11 BANK0      1     1      0
               _displayL1_Initialize
                             _memset
 ---------------------------------------------------------------------------------
 (3) _displayL1_Initialize                                 1     1      0    2640
                                             11 COMMON     1     1      0
                   _displayL1_Update
                             _memset
 ---------------------------------------------------------------------------------
 (4) _memset                                               8     2      6    1457
                                              1 COMMON     8     2      6
 ---------------------------------------------------------------------------------
 (5) _displayL1_Update                                    13    13      0    1085
                                              9 COMMON     2     2      0
                                              0 BANK0     11    11      0
            _SPI1_Exchange8bitBuffer
 ---------------------------------------------------------------------------------
 (6) _SPI1_Exchange8bitBuffer                              7     5      2     759
                                              2 COMMON     7     5      2
                  _SPI1_Exchange8bit
 ---------------------------------------------------------------------------------
 (7) _SPI1_Exchange8bit                                    1     1      0      31
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _SYSTEM_Initialize                                    0     0      0     121
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM1_Initialize
                    _PWM2_Initialize
                    _PWM5_Initialize
                    _PWM6_Initialize
                    _SPI1_Initialize
                    _TMR0_Initialize
                    _TMR2_Initialize
                    _TMR4_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (3) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR4_Initialize                                      0     0      0       0
                    _TMR4_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR4_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0      98
           _TMR0_SetInterruptHandler
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR0_SetInterruptHandler                             2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _SPI1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _PWM6_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _PWM5_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _PWM2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _PWM1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _PIN_MANAGER_Initialize                               1     1      0      23
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM6_LoadDutyValue                                   4     2      2     196
                                              1 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (2) _PWM5_LoadDutyValue                                   4     2      2     272
                                              1 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (2) _PWM2_LoadDutyValue                                   2     0      2     166
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PWM1_LoadDutyValue                                   2     0      2     166
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _INTERRUPT_InterruptManager                          1     1      0       0
                                              0 COMMON     1     1      0
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (13) _TMR0_ISR                                            0     0      0       0
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (14) _TMR0_CallBack                                       0     0      0       0
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (15) _TMR0_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (15) Absolute function(Fake)                              2     0      2       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _nullifyBadge_platformInit
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM1_Initialize
     _PWM1_LoadDutyValue
     _PWM2_Initialize
     _PWM2_LoadDutyValue
     _PWM5_Initialize
     _PWM5_LoadDutyValue
     _PWM6_Initialize
     _PWM6_LoadDutyValue
     _SPI1_Initialize
     _SYSTEM_Initialize
       _OSCILLATOR_Initialize
       _PIN_MANAGER_Initialize
       _PWM1_Initialize
       _PWM2_Initialize
       _PWM5_Initialize
       _PWM6_Initialize
       _SPI1_Initialize
       _TMR0_Initialize
         _TMR0_SetInterruptHandler
         _TMR0_StartTimer
       _TMR2_Initialize
         _TMR2_StartTimer
       _TMR4_Initialize
         _TMR4_StartTimer
       _WDT_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
       _TMR0_StartTimer
     _TMR2_Initialize
       _TMR2_StartTimer
     _TMR4_Initialize
       _TMR4_StartTimer
     _displayL2_Initialize
       _displayL1_Initialize
         _displayL1_Update
           _SPI1_Exchange8bitBuffer
             _SPI1_Exchange8bit
         _memset
       _memset
   _schedulerExecute
     _TMR0_Read16bitTimer
     _scheduler_TaskRun
       Absolute function(Fake) *
       _TMR0_Read16bitTimer *
       _flashy_Main *
         _flashy_display_option
           _marquee
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
               _rand (ARG)
                 ___lmul
               _strlen (ARG)
             _nullifyBadge_segDisplayForceUpdate
               _displayL2_ForceUpdate
                 _displayL1_Update
                   _SPI1_Exchange8bitBuffer
                     _SPI1_Exchange8bit
             _nullifyBadge_segDisplayPutStr
               _displayL2_PutStr
                 _displayL2_PutChar
                   _displayL1_SetSegChar
                     _displayCharReverse
             _strlen
           _marquee_speedy
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
               _rand (ARG)
                 ___lmul
               _strlen (ARG)
             _nullifyBadge_segDisplayForceUpdate
               _displayL2_ForceUpdate
                 _displayL1_Update
                   _SPI1_Exchange8bitBuffer
                     _SPI1_Exchange8bit
             _nullifyBadge_segDisplayPutStr
               _displayL2_PutStr
                 _displayL2_PutChar
                   _displayL1_SetSegChar
                     _displayCharReverse
             _strlen
           _nullifyBadge_segDisplayForceUpdate
             _displayL2_ForceUpdate
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
           _nullifyBadge_segDisplayPutStr
             _displayL2_PutStr
               _displayL2_PutChar
                 _displayL1_SetSegChar
                   _displayCharReverse
         _led_Parody
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _nullifyBadge_userLedsSet
             _displayL2_SetUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
         _led_circle
           _nullifyBadge_userLedsSet
             _displayL2_SetUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
         _led_curtain
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _nullifyBadge_userLedsSet
             _displayL2_SetUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
         _led_rand
           ___almod
             _rand (ARG)
               ___lmul
           _nullifyBadge_userLedsSet
             _displayL2_SetUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
           _rand
             ___lmul
         _led_roundabout
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _nullifyBadge_userLedsSet
             _displayL2_SetUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
         _let_alternate
           _nullifyBadge_userLedsSet
             _displayL2_SetUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
         _marquee
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _nullifyBadge_segDisplayForceUpdate
             _displayL2_ForceUpdate
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
           _nullifyBadge_segDisplayPutStr
             _displayL2_PutStr
               _displayL2_PutChar
                 _displayL1_SetSegChar
                   _displayCharReverse
           _strlen
         _nullifyBadge_buttonsGet
         _nullifyBadge_irGet
         _nullifyBadge_irTxClr
         _nullifyBadge_irTxRegister
         _nullifyBadge_irTxRelease
         _nullifyBadge_irTxSet
         _nullifyBadge_segDisplayForceUpdate
           _displayL2_ForceUpdate
             _displayL1_Update
               _SPI1_Exchange8bitBuffer
                 _SPI1_Exchange8bit
         _nullifyBadge_segDisplayPutStr
           _displayL2_PutStr
             _displayL2_PutChar
               _displayL1_SetSegChar
                 _displayCharReverse
         _nullifyBadge_userLedsSet
           _displayL2_SetUserLeds
             _displayL1_SetUserLed
             _displayL1_Update
               _SPI1_Exchange8bitBuffer
                 _SPI1_Exchange8bit
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           ___wmul
           _isdigit
       _locked_Main *
         ___lwmod
           ___lwdiv (ARG)
           _rand (ARG)
             ___lmul
           _strlen (ARG)
         _locked_clear
           _nullifyBadge_segDisplayErase
             _displayL2_EraseSegDisplay
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
               _displayL2_PutStr
                 _displayL2_PutChar
                   _displayL1_SetSegChar
                     _displayCharReverse
           _nullifyBadge_userLedsClr
             _displayL2_ClrUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
         _locked_get_lock_leds
         _locked_get_unlock_leds
         _locked_lock_leds
         _locked_secret_check
           ___bmul
           _strlen
         _locked_unlock_leds
         _marquee
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _nullifyBadge_segDisplayForceUpdate
             _displayL2_ForceUpdate
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
           _nullifyBadge_segDisplayPutStr
             _displayL2_PutStr
               _displayL2_PutChar
                 _displayL1_SetSegChar
                   _displayCharReverse
           _strlen
         _nullifyBadge_buttonsGet
         _nullifyBadge_segDisplayForceUpdate
           _displayL2_ForceUpdate
             _displayL1_Update
               _SPI1_Exchange8bitBuffer
                 _SPI1_Exchange8bit
         _nullifyBadge_segDisplayPutStr
           _displayL2_PutStr
             _displayL2_PutChar
               _displayL1_SetSegChar
                 _displayCharReverse
         _nullifyBadge_userLedsSet
           _displayL2_SetUserLeds
             _displayL1_SetUserLed
             _displayL1_Update
               _SPI1_Exchange8bitBuffer
                 _SPI1_Exchange8bit
         _slot_Setup
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _memset
           _rand
             ___lmul
       _matrix_Main *
         _led_Parody
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _nullifyBadge_userLedsSet
             _displayL2_SetUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
         _led_curtain
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _nullifyBadge_userLedsSet
             _displayL2_SetUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
         _matrix_display_option
           _marquee_speedy
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
               _rand (ARG)
                 ___lmul
               _strlen (ARG)
             _nullifyBadge_segDisplayForceUpdate
               _displayL2_ForceUpdate
                 _displayL1_Update
                   _SPI1_Exchange8bitBuffer
                     _SPI1_Exchange8bit
             _nullifyBadge_segDisplayPutStr
               _displayL2_PutStr
                 _displayL2_PutChar
                   _displayL1_SetSegChar
                     _displayCharReverse
             _strlen
         _matrix_secret_check
           ___bmul
           _strlen
         _nullifyBadge_buttonsGet
       _menu_Main *
         _menu_clear
           _nullifyBadge_segDisplayErase
             _displayL2_EraseSegDisplay
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
               _displayL2_PutStr
                 _displayL2_PutChar
                   _displayL1_SetSegChar
                     _displayCharReverse
           _nullifyBadge_userLedsClr
             _displayL2_ClrUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
         _menu_display_option
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _marquee
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
               _rand (ARG)
                 ___lmul
               _strlen (ARG)
             _nullifyBadge_segDisplayForceUpdate
               _displayL2_ForceUpdate
                 _displayL1_Update
                   _SPI1_Exchange8bitBuffer
                     _SPI1_Exchange8bit
             _nullifyBadge_segDisplayPutStr
               _displayL2_PutStr
                 _displayL2_PutChar
                   _displayL1_SetSegChar
                     _displayCharReverse
             _strlen
           _nullifyBadge_segDisplayForceUpdate
             _displayL2_ForceUpdate
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
           _nullifyBadge_segDisplayPutStr
             _displayL2_PutStr
               _displayL2_PutChar
                 _displayL1_SetSegChar
                   _displayCharReverse
           _nullifyBadge_userLedsSet
             _displayL2_SetUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
         _menu_run_option
           _menu_clear
             _nullifyBadge_segDisplayErase
               _displayL2_EraseSegDisplay
                 _displayL1_Update
                   _SPI1_Exchange8bitBuffer
                     _SPI1_Exchange8bit
                 _displayL2_PutStr
                   _displayL2_PutChar
                     _displayL1_SetSegChar
                       _displayCharReverse
             _nullifyBadge_userLedsClr
               _displayL2_ClrUserLeds
                 _displayL1_SetUserLed
                 _displayL1_Update
                   _SPI1_Exchange8bitBuffer
                     _SPI1_Exchange8bit
         _nullifyBadge_buttonsGet
         _slot_Setup
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _memset
           _rand
             ___lmul
       _secret_Main *
         _nullifyBadge_buttonsGet
         _secret_check
           ___bmul
           _strlen
         _secret_clear
       _slot_Main *
         ___lwmod
           ___lwdiv (ARG)
           _rand (ARG)
             ___lmul
           _strlen (ARG)
         _marquee
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _nullifyBadge_segDisplayForceUpdate
             _displayL2_ForceUpdate
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
           _nullifyBadge_segDisplayPutStr
             _displayL2_PutStr
               _displayL2_PutChar
                 _displayL1_SetSegChar
                   _displayCharReverse
           _strlen
         _marquee_speedy
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _nullifyBadge_segDisplayForceUpdate
             _displayL2_ForceUpdate
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
           _nullifyBadge_segDisplayPutStr
             _displayL2_PutStr
               _displayL2_PutChar
                 _displayL1_SetSegChar
                   _displayCharReverse
           _strlen
         _memset
         _nullifyBadge_buttonsGet
         _rand
           ___lmul
         _slot_Finished_Animation
           _led_rand
             ___almod
               _rand (ARG)
                 ___lmul
             _nullifyBadge_userLedsSet
               _displayL2_SetUserLeds
                 _displayL1_SetUserLed
                 _displayL1_Update
                   _SPI1_Exchange8bitBuffer
                     _SPI1_Exchange8bit
             _rand
               ___lmul
         _slot_Running_Animation
           _led_circle
             _nullifyBadge_userLedsSet
               _displayL2_SetUserLeds
                 _displayL1_SetUserLed
                 _displayL1_Update
                   _SPI1_Exchange8bitBuffer
                     _SPI1_Exchange8bit
         _slot_Setup
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _memset
           _rand
             ___lmul
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           ___wmul
           _isdigit
         _strlen
   _scheduler_Init
   _scheduler_TaskAdd
     Absolute function(Fake) *
     _flashy_Init *
       _nullifyBadge_segDisplayErase
         _displayL2_EraseSegDisplay
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
           _displayL2_PutStr
             _displayL2_PutChar
               _displayL1_SetSegChar
                 _displayCharReverse
       _nullifyBadge_segDisplayRegister
       _nullifyBadge_userLedsClr
         _displayL2_ClrUserLeds
           _displayL1_SetUserLed
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
       _nullifyBadge_userLedsRegister
     _locked_Init *
       _locked_lock_leds
       _nullifyBadge_segDisplayErase
         _displayL2_EraseSegDisplay
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
           _displayL2_PutStr
             _displayL2_PutChar
               _displayL1_SetSegChar
                 _displayCharReverse
       _nullifyBadge_segDisplayRegister
       _nullifyBadge_userLedsClr
         _displayL2_ClrUserLeds
           _displayL1_SetUserLed
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
       _nullifyBadge_userLedsRegister
     _matrix_Init *
       _nullifyBadge_segDisplayErase
         _displayL2_EraseSegDisplay
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
           _displayL2_PutStr
             _displayL2_PutChar
               _displayL1_SetSegChar
                 _displayCharReverse
       _nullifyBadge_segDisplayRegister
       _nullifyBadge_userLedsClr
         _displayL2_ClrUserLeds
           _displayL1_SetUserLed
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
       _nullifyBadge_userLedsRegister
     _menu_Init *
       _nullifyBadge_segDisplayErase
         _displayL2_EraseSegDisplay
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
           _displayL2_PutStr
             _displayL2_PutChar
               _displayL1_SetSegChar
                 _displayCharReverse
       _nullifyBadge_segDisplayRegister
       _nullifyBadge_userLedsClr
         _displayL2_ClrUserLeds
           _displayL1_SetUserLed
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
       _nullifyBadge_userLedsRegister
     _secret_Init *
       _nullifyBadge_segDisplayErase
         _displayL2_EraseSegDisplay
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
           _displayL2_PutStr
             _displayL2_PutChar
               _displayL1_SetSegChar
                 _displayCharReverse
       _nullifyBadge_segDisplayRegister
       _nullifyBadge_userLedsClr
         _displayL2_ClrUserLeds
           _displayL1_SetUserLed
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
       _nullifyBadge_userLedsRegister
     _slot_Init *
       _nullifyBadge_segDisplayErase
         _displayL2_EraseSegDisplay
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
           _displayL2_PutStr
             _displayL2_PutChar
               _displayL1_SetSegChar
                 _displayCharReverse
       _nullifyBadge_segDisplayRegister
       _nullifyBadge_userLedsClr
         _displayL2_ClrUserLeds
           _displayL1_SetUserLed
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
       _nullifyBadge_userLedsRegister
       _slot_Setup
         ___lwmod
           ___lwdiv (ARG)
           _rand (ARG)
             ___lmul
           _strlen (ARG)
         _memset
         _rand
           ___lmul
   _scheduler_TaskInit

 _INTERRUPT_InterruptManager (ROOT)
   _TMR0_ISR
     _TMR0_CallBack
       Absolute function(Fake) *
       _TMR0_DefaultInterruptHandler *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4F      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      8      3E       7       77.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4D       9       96.2%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      48      11       90.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      48      13       90.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
ABS                  0      0     32E      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0      4D      16       96.2%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0      49      18       91.2%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0      4C      20       95.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0      38      22       70.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0      3D      24       76.2%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0      38      26       70.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
DATA                 0      0     32E      28        0.0%
BANK11              50      0      28      29       50.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITBANK12           50      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12              50      0       0      31        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITBANK13           50      0       0      32        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BANK13              50      0       0      33        0.0%
BITBANK14           50      0       0      34        0.0%
BANK14              50      0       0      35        0.0%
BITBANK15           50      0       0      36        0.0%
BANK15              50      0       0      37        0.0%
BITBANK16           50      0       0      38        0.0%
BANK16              50      0       0      39        0.0%
BITBANK17           50      0       0      40        0.0%
BANK17              50      0       0      41        0.0%
BITBANK18           50      0       0      42        0.0%
BANK18              50      0       0      43        0.0%
BITBANK19           50      0       0      44        0.0%
BANK19              50      0       0      45        0.0%
BITBANK20           50      0       0      46        0.0%
BANK20              50      0       0      47        0.0%
BITBANK21           50      0       0      48        0.0%
BANK21              50      0       0      49        0.0%
BITBANK22           50      0       0      50        0.0%
BANK22              10      0       0      51        0.0%
BITBANK23           50      0       0      52        0.0%
BANK23               0      0       0      53        0.0%
BITBANK24           50      0       0      54        0.0%
BANK24               0      0       0      55        0.0%
BITBANK25           20      0       0      56        0.0%
BANK25               0      0       0      57        0.0%


Microchip Technology PIC Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Wed Jul 26 15:12:08 2017

                          _SPI1_Exchange8bit 31FA                                            pc 0002  
           __size_of_slot_Finished_Animation 0027                               ___bmul@product 0073  
                 __end_of_gamma_table_256x1k 2200                           ?_SPI1_Exchange8bit 0070  
                                __CFG_CP$OFF 0000                                           l18 31FF  
                      _displayL2_ClrUserLeds 32AC                          ___wmul@multiplicand 0073  
                   marquee_speedy@multiplier 003E                                 ?_led_curtain 0030  
              nullifyBadge_buttonsGet@retVal 0073                  __size_of_PWM6_LoadDutyValue 0016  
                                __CFG_LVP$ON 0000                   ??_nullifyBadge_userLedsClr 007C  
                 ??_nullifyBadge_userLedsSet 007C                                          l208 3213  
                                        l625 2ED0                                          _GIE 005F  
                             led_Parody@leds 0034              ??_nullifyBadge_segDisplayPutStr 007C  
                                        _PR2 001E                                          _PR4 0416  
                               __CFG_CPD$OFF 0000                               _scheduler_Init 3410  
                             led_Parody@size 0036                          ??_SPI1_Exchange8bit 0071  
                   ??_slot_Running_Animation 0034                           _locked_unlock_leds 3340  
                marquee_speedy@string_length 0048                              _TMR2_Initialize 3216  
             SPI1_Exchange8bitBuffer@dataOut 0073                     displayL1_Update@tmpRxBuf 0020  
                                        wreg 0009                                _slot_taskData 00BC  
               marquee_speedy@display_string 0041                  displayL1_Initialize@display 007B  
        nullifyBadge_userLedsSet@userLedData 002D                              led_curtain@leds 0034  
                    secret_Main@secret_found 0056                              led_curtain@size 0036  
                       _displayL1_Initialize 332D                  slot_Finished_Animation@data 0041  
                                       l1010 2AED                                         l1150 0B61  
                                       l1160 0C49                                         l1155 0BD4  
                                       l1147 0AF4                                         l1253 3527  
                                       l1257 0812                                         l1435 2969  
                                       l1462 0574                                         l1287 1E42  
                                       l1712 33E2                                         l1465 05CD  
                                       l1619 1AB0                                         l1780 2F30  
                                       l9001 2475                                         l8203 35EF  
                                       l8221 375F                                         l9005 2498  
                                       l9101 1C82                                         l8311 3639  
                                       l9111 1CAE                                         l8241 2B66  
                                       l8235 2B43                                         l8243 2B6A  
                                       l8331 3476                                         l8315 3644  
                                       l9211 0949                                         l9115 1CBE  
                                       l9051 1BB6                                         l7533 3364  
                                       l8253 2B72                                         l8245 2B6F  
                                       l8405 28AB                                         l8421 35AA  
                                       l9205 0936                                         l9125 1CEA  
                                       l9061 1BD9                                         l9029 1B4A  
                                       l9053 1BBC                                         l8239 2B52  
                                       l8423 35B6                                         l8431 35CB  
                                       l8343 3301                                         l9303 0ADF  
                                       l9223 096D                                         l9063 1BDD  
                                       l9055 1BC4                                         l9047 1B90  
                                       l8409 28B4                                         l8329 346A  
                                       l9241 09B7                                         l9233 0992  
                                       l9217 095D                                         l9081 1C34  
                                       l9137 1D1D                                         l8427 35C2  
                                       l8195 35DE                                         l8283 357C  
                                       l8371 2F53                                         l8363 2F3D  
                                       l8531 33DC                                         l9147 0865  
                                       l9083 1C39                                         l9075 1C11  
                                       l7549 337A                                         l8453 2FF4  
                                       l8525 32AA                                         l9501 0E19  
                                       l9309 0AF8                                         l9253 09EB  
                                       l9245 09C4                                         l8471 2259  
                                       l8447 2FCD                                         l8383 2F84  
                                       l8375 2F6B                                         l9511 0E3E  
                                       l9415 0CA5                                         l9335 0B65  
                                       l9247 09D5                                         l9175 08C6  
                                       l9095 1C6D                                         l8369 2F45  
                                       l8713 19E4                                         l8705 19D0  
                                       l8545 330C                                         l9505 0E26  
                                       l9433 0CFB                                         l9329 0B4C  
                                       l9265 0A36                                         l9177 08D5  
                                       l9601 1D61                                         l8379 2F76  
                                       l8731 1A17                                         l8723 1A01  
                                       l8643 2DDD                                         l8651 2AB2  
                                       l9531 0E92                                         l9355 0BBB  
                                       l9283 0A8C                                         l9187 08FA  
                                       l9275 0A5E                                         l8397 288D  
                                       l8477 2280                                         l8573 220C  
                                       l8805 1AF7                                         l8717 19E6  
                                       l8549 3312                                         l8629 2C23  
                                       l9509 0E39                                         l9461 0D77  
                                       l9453 0D4E                                         l9365 0BD8  
                                       l9269 0A4B                                         l9277 0A72  
                                       l9197 091E                                         l9605 1D73  
                                       l8399 2899                                         l8583 2EFD  
                                       l8487 2A0B                                         l8743 1A41  
                                       l8719 19F4                                         l8751 1A68  
                                       l8807 1970                                         l8655 2ABF  
                                       l8647 2AA5                                         l8911 2641  
                                       l9551 0F89                                         l9535 0EE5  
                                       l9463 0D7C                                         l9279 0A7D  
                                       l9703 1F78                                         l9623 1DD3  
                                       l9615 1DB0                                         l8497 33C6  
                                       l8681 2D7B                                         l8761 1A7F  
                                       l8737 1A2B                                         l8729 1A03  
                                       l8809 1B31                                         l8665 2AD9  
                                       l8905 262A                                         l9545 0F70  
                                       l9385 0C30                                         l9537 0F36  
                                       l9713 1FA4                                         l8739 1A36  
                                       l8691 1991                                         l8659 2ACC  
                                       l8907 263B                                         l9563 0FBD  
                                       l9539 0F59                                         l9483 0DD0  
                                       l9395 0C4D                                         l9635 1E20  
                                       l9651 1E6E                                         l9803 279E  
                                       l8677 2D53                                         l8781 1ACC  
                                       l8773 1AA4                                         l8749 1A4A  
                                       l8909 258F                                         l9493 0DF4  
                                       l9725 1FF2                                         l9717 1FCF  
                                       l9637 1E2B                                         l9629 1E03  
                                       l9821 27F5                                         l9733 2651  
                                       l8791 1AE5                                         l8783 1ACF  
                                       l8767 1A85                                         l8871 1016  
                                       l8935 2956                                         l8943 2978  
                                       l9903 05B6                                         l9567 0FC9  
                                       l9663 1EAC                                         l9719 1FDD  
                                       l9655 1E86                                         l9815 27D2  
                                       l9751 26A2                                         l8785 1AD3  
                                       l8697 19A1                                         l8873 10C9  
                                       l8953 356D                                         l9569 0FD6  
                                       l9497 0E06                                         l9489 0DE3  
                                       l9681 1F08                                         l9649 1E5A  
                                       l8867 10B2                                         l9835 011E  
                                       l9667 1EC2                                         l9659 1E91  
                                       l9771 2706                                         l9755 26BA  
                                       l9739 266B                                         l9819 27E3  
                                       l8797 1AF3                                         l8869 10C3  
                                       l8981 24D4                                         l9685 1F1E  
                                       l9677 1EEE                                         l8983 2586  
                                       l9919 0627                                         l9855 0251  
                                       l9695 1F4A                                         l9783 273A  
                                       l9767 26EE                                         l9943 1101  
                                       STR_1 3C00                                         STR_2 3BFB  
                                       l8977 256F                                         l9881 041A  
                                       l9953 112E                          ?_locked_unlock_leds 0070  
                                       STR_3 287D                                         STR_4 3BF6  
                                       l8979 2580                                         l9891 04CA  
                                       l9699 1F62                                         l9787 2752  
                                       l9963 116C                                         l9955 1139  
                                       STR_5 3B9B                                         STR_6 3AF7  
                                       l8997 245C                                         l9869 0347  
                                       l9957 1141                                         STR_7 3B5E  
                                       STR_8 3B95                                         l9799 2786  
                                       STR_9 3BF1                                         l9897 050D  
                                       l9993 1201                                         l9899 0583  
                                       l9987 11D0                      __end_of_PWM1_Initialize 3240  
                                       _LATA 010C                                         _LATB 010D  
                                       _LATC 010E                                         u5000 2230  
                                       u4305 338E                                         u4315 33A4  
                                       u3390 2C81                                         u4335 335B  
                                       u4355 3371                                         u5155 2EE1  
                            led_Parody@count 0030                                         u5165 3617  
                                       u5085 33E3                                         u5175 3625  
                                       u5095 33E8                                         u5335 1A9A  
                                       u4705 364C                                         u5505 2595  
                                       u5435 3521                                         u4805 2F61  
                                       u5285 19FA                                         u6405 13A1  
                                       u4815 2F6C                                         u5375 1ABF  
                                       u6415 1436                                         u4745 2931  
                                       u5465 107B                                         u6425 14CB  
                                       u6514 22A4                                         u5475 101C  
                                       u6435 1560                                         u6515 22A2  
                                       u4925 35AD                                         u5565 2539  
                                       u6445 15F5                                         u6365 1153  
                                       u6534 22C3                                         u4855 2890  
                                       u4695 3645                                         u5575 24DA  
                                       u5495 25F4                                         u6455 168A  
                                       u6375 11E2                                         u6535 22C1  
                                       u4945 35BC                                         u4785 2F48  
                                       u6385 1277                                         u4970 2FA4  
                                       u4875 289A                                         u4955 35C3  
                                       u5675 1C2E                                         u6395 130C  
                                       u4885 28A4                                         u6574 2321  
                                       u4895 28AC                                         u6575 231F  
                                       u5945 0D71                                         u6595 2375  
                                       _PLLR 48E0                                         _TMR2 001D  
                                       _TMR4 0415                                         _WPUA 020C  
                                       _WPUB 020D                                         _WPUC 020E  
                               __CFG_WRT$OFF 0000                                __CFG_FCMEN$ON 0000  
                     ?_matrix_display_option 004C                                         _main 0661  
                                       _rand 28FB                              _TMR0_StartTimer 31C3  
                                       fsr0h 0005                                         fsr1h 0007  
                                       indf0 0000                                         fsr0l 0004  
                                       indf1 0001                                         fsr1l 0006  
                                       btemp 007E                                __CFG_BOREN$ON 0000  
                           ??_marquee_speedy 0040                                __CFG_BORV$LOW 0000  
                                       start 0016                    __end_of_SPI1_Exchange8bit 3203  
                        _menu_display_option 2D92                              _PWM5_Initialize 3261  
                        matrix_Main@taskData 0052                          locked_Main@taskData 0052  
               displayL2_ClrUserLeds@display 007B                      displayL2_PutStr@display 0035  
                              __CFG_CSWEN$ON 0000                            ___bmul@multiplier 0074  
                              __CFG_MCLRE$ON 0000                         _displayL1_SetSegChar 373D  
                 __end_of_PWM5_LoadDutyValue 3395                                        S10885 3000  
                        menu_run_option@data 003B                         _displayL2_Initialize 352C  
                       ??_locked_unlock_leds 0071                      __end_of_PWM2_Initialize 324B  
                    __end_of_TMR0_Initialize 3466               ??_TMR0_DefaultInterruptHandler 0070  
             __size_of_OSCILLATOR_Initialize 000A                       __end_of_scheduler_Init 342B  
                       _displayL1_SetUserLed 331B                        marquee@display_string 003F  
              __end_of_OSCILLATOR_Initialize 3216                                        l10023 1296  
                                      l10113 1455                                        l10017 1265  
                                      l10203 1614                                        l10107 1424  
                                      l10053 132B                                        l10143 14EA  
                                      l10047 12FA                                        l10305 17F4  
                                      l10233 16A9                                        l10137 14B9  
                                      l10227 1678                                        l10083 13C0  
                                      l10173 157F                                        l10077 138F  
                                      l10167 154E                                        l10257 170D  
                                      l10513 22EB                                        l10521 22FE  
                                      l10291 17B4                                        l10507 2293  
                                      l10285 177F                                        l10197 15E3  
                                      l10517 22F6                                        l10297 17CB  
                                      l10289 1793                                        l10545 2383  
                                      l10723 075F                                        l10883 08CC  
                    ?_locked_get_unlock_leds 0071                                        l10887 0F3B  
                                      l10889 2ADF                      _locked_locking_leds_idx 00A4  
                            __end_of___almod 2F8D                                        ?_main 0070  
                                      ?_rand 0024                                        STR_10 3A45  
                                      STR_11 3BF1                                        STR_20 38B0  
                                      STR_12 3B25                                        STR_21 3919  
                                      STR_13 3B56                                        STR_30 38D4  
                                      STR_22 3954                                        STR_14 3B8F  
                                      STR_31 3A79                                        STR_23 39A8  
                                      STR_15 3A32                                        STR_40 3C05  
                                      STR_32 38F7                                        STR_24 3888  
                                      STR_16 3A0A                                        STR_41 3AA5  
                                      STR_33 280A                                        STR_25 3A57  
                                      STR_17 39C3                                __CFG_WDTE$OFF 0000  
                                      STR_42 3AA7                                        STR_34 3A68  
                                      STR_26 3A1F                                        STR_18 39F4  
                                      STR_50 3BA6                                        STR_43 3BE7  
                                      STR_35 3800                                        STR_27 3937  
                                      STR_19 3971                                        STR_51 3BCE  
                                      STR_44 3BDD                                        STR_36 3AB2  
                                      STR_28 3ACB                                        STR_60 3AE2  
                                      STR_52 3BAB                                        STR_45 3BD8  
                                      STR_37 385D                                        STR_29 3A89  
                                      STR_61 3AD7                                        STR_53 3BB5  
                                      STR_70 3B1C                                        STR_46 3BD3  
                                      STR_38 287D                                        STR_62 3B3E  
                                      STR_54 3BBA                                        STR_71 3C09  
                                      STR_39 3BEC                                        STR_47 3BE2  
                                      STR_63 3ABF                                        STR_55 3BB0  
                                      STR_80 3B7B                                        STR_72 3B82  
                                      STR_64 3A98                                        STR_56 3BC4  
                                      STR_48 3BC9                                        STR_81 3B36  
                                      STR_73 3B6D                                        STR_65 3B13  
                                      STR_57 3B4E                                        STR_49 3BBF  
                                      STR_66 3B1C                                        STR_82 382F  
                                      STR_74 3B01                                        STR_58 3B46  
                                      STR_67 3B1C                                        STR_83 398D  
                                      STR_75 3B74                                        STR_59 3B0A  
                                      STR_68 3B1C                                        STR_84 39DD  
                                      STR_76 3BA1                                        STR_69 3B1C  
                                      STR_85 3B66                                        STR_77 3AED  
                                      STR_78 3B89                                        STR_79 3B2E  
                           _schedulerExecute 2306                                        _T2CON 001F  
                    _flashy_leds_state_track 00B0                                        _T4CON 0417  
                             __CFG_DEBUG$OFF 0000                              __end_of___lwdiv 28B9  
                            __end_of___lwmod 35D0                                        i1l363 0011  
                                      _OSCEN 091D                                        _TMR0H 0016  
                                      _TMR0L 0015                               _led_roundabout 37BF  
                       ?_menu_display_option 004C               nullifyBadge_irTxRegister@badge 0071  
                 __end_of_scheduler_TaskInit 373D                                        _TRISA 008C  
                                      _TRISB 008D                                        _TRISC 008E  
           __size_of_nullifyBadge_buttonsGet 0031            __size_of_TMR0_SetInterruptHandler 0006  
                            _TMR4_Initialize 324B                              _PWM6_Initialize 326D  
                        ___lmul@multiplicand 0075                    ?_TMR0_SetInterruptHandler 0071  
                      _displayL2_ForceUpdate 31DE                       ??_locked_get_lock_leds 0073  
                           __end_of_TMR0_ISR 329E                                 _badge_locked 00C4  
                               ?_matrix_Main 0052                                 ?_locked_Main 0052  
                               ?_matrix_Init 0039                                 ?_locked_Init 0039  
                      ?_displayL1_Initialize 0070                              __end_of_dpowers 280A  
                    _SPI1_Exchange8bitBuffer 2B3A                               _WDT_Initialize 31CF  
                            __end_of_isdigit 32AC                              __end_of_marquee 228C  
                                      _randx 00CC                         matrix_Main@holdvalue 0059  
                                      pclath 000A           __size_of_nullifyBadge_platformInit 0055  
                                      status 0003                                        wtemp0 007E  
                            __end_of_sprintf 1B38                              _TMR2_StartTimer 31C6  
          __size_of_nullifyBadge_irTxRelease 000B                             _menu_option_size 00B4  
                  ?_nullifyBadge_irTxRelease 0070                     __size_of_SPI1_Initialize 0008  
                     menu_Main@buttonPressed 0056                 displayL1_SetSegChar@charData 0028  
                      ?_displayL1_SetSegChar 0020                              __initialization 0018  
                          ?_displayL1_Update 0070                                 __end_of_main 0764  
                               __end_of_rand 293E                        ?_displayL2_Initialize 0070  
                          ?_displayL2_PutStr 0030                       __size_of_let_alternate 0014  
                     ?_displayL2_ClrUserLeds 0070               __end_of_locked_get_unlock_leds 0819  
                         ??_displayL1_Update 0079                      __end_of_TMR2_Initialize 3220  
                      ?_displayL1_SetUserLed 0071                  ?_INTERRUPT_InterruptManager 0070  
                         ??_displayL2_PutStr 0032             displayCharReverse@retValUpperRev 007A  
                            ?_scheduler_Init 0070                       __end_of_led_roundabout 3800  
                                     ??_main 006E                                       ??_rand 0026  
                              slot_Main@data 0065                         _nullifyBadge_irTxClr 31CC  
                      ??_menu_display_option 007C                         _nullifyBadge_irTxSet 2882  
                               ?_secret_Main 0052                                 ?_secret_Init 0039  
            __size_of_slot_Running_Animation 0046                       __end_of_WDT_Initialize 31D3  
                              slot_Init@data 003B        __end_of_nullifyBadge_segDisplayPutStr 322A  
     __size_of_nullifyBadge_segDisplayPutStr 000A                _nullifyBadge_segDisplayPutStr 3220  
                    __end_of_TMR0_StartTimer 31C6                              scheduler_Init@k 0073  
             nullifyBadge_platformInit@badge 002C                                       _CCPR1H 0292  
                                     _CCPR2H 0296                                       _CCPR1L 0291  
                                     _CCPR2L 0295                                       _ANSELA 018C  
                                     _ANSELB 018D                                       _ANSELC 018E  
                                     _T0CON0 0017                                       _T0CON1 0018  
                           ?_PWM1_Initialize 0070                                       _ODCONA 028C  
                                     _ODCONB 028D                                       _ODCONC 028E  
                    __end_of_PWM5_Initialize 326D                  __end_of_TMR0_Read16bitTimer 3448  
                                     _OSCFRQ 091F                                       _WDTCON 0097  
                  matrix_secret_check@inputs 0027                    locked_secret_check@inputs 0027  
                            _TMR4_StartTimer 31C9                        SPI1_Exchange8bit@data 0071  
                          _scheduler_TaskAdd 228C                     __size_of_menu_run_option 004A  
                   __end_of_locked_lock_leds 3410            __end_of_nullifyBadge_platformInit 2CD8  
                 __size_of_SPI1_Exchange8bit 0009                            _scheduler_TaskRun 34C3  
                             __CFG_PWRTE$OFF 0000                  __end_of_locked_secret_check 10CB  
                __end_of_matrix_secret_check 2588                           ?_scheduler_TaskAdd 003F  
                         ?_scheduler_TaskRun 0070                      _slot_Finished_Animation 3552  
                                     ___bmul 330A                             __end_of_led_rand 2A13  
                                     ___lmul 3630                                    ??___almod 0079  
                   locked_get_lock_leds@leds 0077                                   _Shot_Index 007C  
                                     ___wmul 33DA                               __CFG_STVREN$ON 0000  
                   locked_get_lock_leds@size 0075                                       _deaths 00AA  
                       __size_of_flashy_Main 07E7                         __size_of_flashy_Init 0096  
                                  ??___lwdiv 0075                                    ??___lwmod 0079  
                      _flashy_display_option 2D33                             ?_TMR0_Initialize 0070  
                           ?_PWM2_Initialize 0070                                ?_locked_clear 0039  
                                     _memset 33C2                      __end_of_PWM6_Initialize 3279  
                    __end_of_TMR4_Initialize 3256                          ??_scheduler_TaskAdd 0040  
           nullifyBadge_segDisplayPutStr@str 0037             __end_of_nullifyBadge_userLedsClr 0800  
           __end_of_nullifyBadge_userLedsSet 330A                          ??_scheduler_TaskRun 007C  
                            ?_led_roundabout 0030                        ?_nullifyBadge_irTxClr 0070  
                               __pdataBANK10 0520                        ?_nullifyBadge_irTxSet 0070  
                                     _strlen 3466                                 __pdataBIGRAM 26F0  
                       __size_of_led_curtain 0041                                   _Slot_Wheel 0332  
                     ?_displayL2_ForceUpdate 0070                                    ??_isdigit 0071  
                                  ??_marquee 003E                    ??_SPI1_Exchange8bitBuffer 0074  
                            ?_WDT_Initialize 0070                       ??_displayL1_Initialize 007B  
                      _displayL2_SetUserLeds 3484                TMR0_Read16bitTimer@readValLow 007A  
                      __end_of_TMR0_CallBack 3235                                _let_alternate 2201  
                    __end_of_TMR2_StartTimer 31C9     TMR0_SetInterruptHandler@InterruptHandler 0071  
                                  ??_sprintf 003B                   ?_displayL2_EraseSegDisplay 0070  
                 __end_of_nullifyBadge_irGet 31D8                         locked_lock_leds@size 0073  
                          _SYSTEM_Initialize 34A2             displayL2_EraseSegDisplay@display 0037  
                 ?_nullifyBadge_irTxRegister 0070                            _menu_options_leds 02CA  
                  __end_of_scheduler_TaskAdd 2306                      __end_of__initialization 00E1  
                  secret_check@buttonPressed 0079                    __end_of_scheduler_TaskRun 34E4  
                     menu_display_option@led 0050                      _roundabout_leds_inverse 03A0  
                         ?_SYSTEM_Initialize 0070                   __end_of_PWM2_LoadDutyValue 337F  
                     _slot_Running_Animation 293E                       ??_displayL1_SetSegChar 0022  
                PWM1_LoadDutyValue@dutyValue 0071                    secret_check@currents_size 0025  
                        ___bmul@multiplicand 0071                                led_rand@spark 003B  
                     ??_displayL2_Initialize 007C                            _displayL2_PutChar 2B88  
                             __pcstackCOMMON 0070                  displayL1_SetSegChar@charPos 0021  
                __size_of_displayCharReverse 002F                                 __pidataBANK1 1000  
                               __pidataBANK2 0002                                 __pidataBANK3 33AB  
                               __pidataBANK4 2A13                                 __pidataBANK5 34E4  
                               __pidataBANK6 2A5B                                 __pidataBANK7 2AEE  
                               __pidataBANK8 36CC                          ??_SYSTEM_Initialize 0073  
                                  ?_TMR0_ISR 0070                       ??_displayL1_SetUserLed 0073  
                         ?_displayL2_PutChar 002A                                   _badge_inst 01B2  
                             ??_locked_clear 007C                            ??_SPI1_Initialize 0071  
                displayL1_SetSegChar@display 0027                           _PWM1_LoadDutyValue 3353  
                      scheduler_TaskAdd@task 003F                             ?_TMR2_Initialize 0070  
                        matrix_Init@taskData 0039                          locked_Init@taskData 0039  
                        _flashy_sparkle_rate 00AE         __end_of_nullifyBadge_segDisplayErase 1806  
      __size_of_nullifyBadge_segDisplayErase 0006                 _nullifyBadge_segDisplayErase 1800  
                    _nullifyBadge_buttonsGet 35FF                          ??_displayL2_PutChar 002B  
                        ?_PWM1_LoadDutyValue 0071                               ?_let_alternate 0030  
                         _gamma_table_256x1k 2000                             ?_TMR0_StartTimer 0070  
                    ??_matrix_display_option 004E                      __end_of_TMR4_StartTimer 31CC  
                  __end_of_SYSTEM_Initialize 34C3                           led_curtain@counter 0030  
                               sprintf@width 0048                                _menu_TaskData 02BC  
                                 __pbssBANK1 00A0                                   __pbssBANK2 0120  
                                 __pbssBANK3 01A0                                   __pbssBANK5 02A0  
                                 __pbssBANK9 04A0                         __size_of_locked_Main 02D1  
                       __size_of_matrix_Main 0735                         __size_of_locked_Init 0065  
                       __size_of_matrix_Init 00A0                          secret_Main@taskData 0052  
                           ?_PWM5_Initialize 0070               ?_nullifyBadge_segDisplayPutStr 0037  
                          _flashy_option_idx 00A8                     __end_of_schedulerExecute 238A  
                      _TMR4_InterruptHandler 0124           nullifyBadge_userLedsRegister@badge 0071  
                         __size_of_menu_Main 01F7                           __size_of_menu_Init 0062  
                  __end_of_displayL2_PutChar 2BDA                    ??_slot_Finished_Animation 003F  
                              ?_secret_check 0077                         ??_PWM1_LoadDutyValue 0073  
                              ?_secret_clear 0071                               _SSP1DATPPSbits 0E21  
                            _secret_TaskData 02A0                                   __pmaintext 0661  
                                    ?___bmul 0071             __end_of_TMR0_SetInterruptHandler 31DE  
                                    ?___lmul 0071                       ?_flashy_display_option 004C  
                                    ?___wmul 0071                        scheduler_TaskRun@task 0067  
                                 ??_TMR0_ISR 0070                              __CFG_PPS1WAY$ON 0000  
                 __end_of_PWM6_LoadDutyValue 33AB                                   __pintentry 0004  
                          ??_menu_run_option 007C                                      _CCP1CON 0293  
                                    _CCP2CON 0297                                      ?_memset 0071  
                             ___lmul@product 0020                       ??_nullifyBadge_irTxClr 0071  
                           ?_TMR4_Initialize 0070                             ?_PWM6_Initialize 0070  
                     ??_nullifyBadge_irTxSet 0071                               _SSP1CLKPPSbits 0E20  
                        __CFG_RSTOSC$HFINT32 0000                                      ?_strlen 0071  
                                 _led_Parody 2EBA                ?_nullifyBadge_segDisplayErase 0070  
                     ?_displayL2_SetUserLeds 002B                           _PWM5_LoadDutyValue 337F  
                                    _OSCCON1 0919                     displayL2_PutChar@display 002F  
                                    _OSCCON3 091B                           __size_of_slot_Main 057C  
                         __size_of_slot_Init 0064                                      _NVMADRH 0892  
                  matrix_display_option@data 004C                                      _NVMADRL 0891  
                                    _NVMDATH 0894                                      _OSCTUNE 091E  
                                    _NVMDATL 0893                                      _NVMCON2 0896  
                                    _PWM5DCH 0618                                      _PWM5DCL 0617  
                                    _PWM6DCH 061B                                      _PWM6DCL 061A  
                                    _PWM5CON 0619                                      _PWM6CON 061C  
                                    _SSP1ADD 0212                         __size_of_secret_Main 01BD  
                                    _PPSLOCK 0E0F                                      _SSP1BUF 0211  
                                 _led_circle 3203                         __size_of_secret_Init 005B  
                           ?_TMR2_StartTimer 0070                                _matrix_option 03D8  
                                  ?_led_rand 0070                          ?_PWM5_LoadDutyValue 0071  
                    _FLASHY_TEXT_SECRET_TEST 00D4                     flashy_Main@buttonPressed 005C  
                 __size_of_scheduler_TaskAdd 007A            __size_of_nullifyBadge_userLedsClr 0006  
                 __size_of_scheduler_TaskRun 0021            __size_of_nullifyBadge_userLedsSet 0011  
                         _scheduler_TaskInit 3704                    ?_nullifyBadge_userLedsClr 0070  
                  ?_nullifyBadge_userLedsSet 002D                               ??_secret_check 0020  
                             ??_secret_clear 0073                      ??_displayL2_ClrUserLeds 007B  
               displayL2_SetUserLeds@display 007B                             ??_scheduler_Init 0071  
                        ?_scheduler_TaskInit 0070                              __size_of___bmul 0011  
                                    ___almod 2F1F                              __size_of___lmul 0032  
                            __size_of___wmul 001B              ??_nullifyBadge_userLedsRegister 0071  
                                    ___lwdiv 2885                           scheduler_TaskAdd@k 0047  
                                    ___lwmod 35A3                         ??_PWM5_LoadDutyValue 0073  
                __size_of_locked_unlock_leds 0013                    ??_nullifyBadge_buttonsGet 0071  
                            _roundabout_leds 03BC                      scheduler_Init@scheduler 0072  
                            __size_of_memset 0018                        displayL1_SetSegChar@c 0020  
                            _matrix_TaskData 04A0                              _locked_TaskData 02AE  
                                 _menu_clear 2984                                      __ptext1 3704  
                                    __ptext2 228C                                      __ptext3 238A  
                                    __ptext4 2CD8                                      __ptext5 1806  
                                    __ptext6 2DF4                                      __ptext7 0764  
                                    __ptext8 2E56                                      __ptext9 32C9  
                            __size_of_strlen 001E              __end_of_slot_Finished_Animation 3579  
                                    _dpowers 2800                               slot_Setup@data 0034  
                      _OSCILLATOR_Initialize 320C                                      _oddeven 00B8  
                                  _T2CONbits 001F                            __end_of_menu_Main 1D2F  
                          __end_of_menu_Init 2E56                                      _isdigit 329E  
                            ??_let_alternate 007C                                      _marquee 2215  
                                  _T4CONbits 0417                     ??_PIN_MANAGER_Initialize 0071  
    nullifyBadge_segDisplayForceUpdate@badge 002B                    __size_of_displayL1_Update 0011  
                       ??_scheduler_TaskInit 0071                    __size_of_displayL2_PutStr 002A  
                 __size_of_SYSTEM_Initialize 0021                                      _sprintf 196B  
                                    clrloop0 327A                             ?_TMR4_StartTimer 0070  
              __size_of_locked_get_lock_leds 0025                          displayL2_PutStr@str 0030  
                                 ??_led_rand 0033                         end_of_initialization 00E1  
                       __end_of_locked_clear 28FB                                      init_ram 3285  
                                    memset@c 0073                                      memset@n 0075  
                                    memset@p 0077                                secret_check@i 0028  
                                    initloop 3286                                 marquee@count 003C  
                 __size_of_displayL2_PutChar 0052                            ?_locked_lock_leds 0070  
                          __end_of_slot_Main 0661                            __end_of_slot_Init 2EBA  
                           ??_led_roundabout 0032                           ??_locked_lock_leds 0071  
                            _matrix_leds_idx 00A0               TMR0_Read16bitTimer@readValHigh 007B  
                __end_of_menu_display_option 2DF4                       slot_Main@buttonPressed 0064  
                                    strlen@s 0071                      ??_displayL2_ForceUpdate 007B  
                    __size_of_marquee_speedy 0073                           secret_check@inputs 0027  
                           ??_WDT_Initialize 0071                     _TMR0_SetInterruptHandler 31D8  
                                  _PORTAbits 000C                                    _PORTBbits 000D  
                                  _PORTCbits 000E                nullifyBadge_userLedsClr@badge 002B  
                                ?_led_Parody 0030                                   _slot_Setup 2BDA  
                    displayL1_Update@display 002A                                  ?_led_circle 0030  
                    menu_display_option@data 004C               ??_nullifyBadge_segDisplayErase 007C  
                    menu_display_option@size 004E                             __CFG_FEXTOSC$OFF 0000  
                ??_displayL2_EraseSegDisplay 007C              __end_of_nullifyBadge_buttonsGet 3630  
                              _schedulerInst 01A0                     _nullifyBadge_irTxRelease 3256  
                    ?_slot_Running_Animation 0032                  ??_nullifyBadge_irTxRegister 0071  
                                _CCP1CONbits 0293                              _SPI1_Initialize 31EA  
                                _CCP2CONbits 0297                            slot_Main@taskData 0052  
                              ??_flashy_Main 0054                                ??_flashy_Init 007C  
                 ?_nullifyBadge_platformInit 0070                 __size_of_TMR0_Read16bitTimer 001D  
                   __size_of_PWM1_Initialize 000B                          secret_Init@taskData 0039  
                       _timer0ReloadVal16bit 00C0                           _nullifyBadge_irGet 31D3  
                            flashy_Main@data 005E                                __pidataBANK10 3694  
                             __end_of___bmul 331B                nullifyBadge_userLedsSet@badge 002F  
                             __end_of___lmul 3662                                __pidataBIGRAM 186B  
                              ??_led_curtain 0032                               __end_of___wmul 33F5  
            slot_Finished_Animation@taskData 003D                       flashy_Main@hit_counter 0056  
                          __size_of_TMR0_ISR 000D                           _PWM2_LoadDutyValue 3369  
               __size_of_locked_secret_check 00BC                 __size_of_matrix_secret_check 00BB  
                                ?_menu_clear 0039                       ?_OSCILLATOR_Initialize 0070  
                             __end_of_memset 33DA                          ?_nullifyBadge_irGet 0070  
                            flashy_Init@data 003B        __end_of_nullifyBadge_userLedsRegister 32D8  
     __size_of_nullifyBadge_userLedsRegister 000F                _nullifyBadge_userLedsRegister 32C9  
                       __end_of_secret_check 2643                              _menu_option_idx 00B6  
                       __end_of_secret_clear 3694                               __end_of_strlen 3484  
                        start_initialization 0018                     __size_of_PWM2_Initialize 000B  
                   __size_of_TMR0_Initialize 001E                          ?_PWM2_LoadDutyValue 0071  
            __size_of_PIN_MANAGER_Initialize 0055                         marquee_speedy@F14093 00C7  
              __size_of_displayL1_Initialize 0013               __end_of_slot_Running_Animation 2984  
                       _matrix_secret_inputs 02D4                         _locked_secret_inputs 024F  
             __size_of_matrix_display_option 00A3                __end_of_matrix_display_option 24CD  
                       ??_nullifyBadge_irGet 0071                              _menu_run_option 2AA4  
                          ?_schedulerExecute 0070                      ??_flashy_display_option 007C  
                 __end_of_displayCharReverse 35FF                     ??_locked_get_unlock_leds 0073  
                        __size_of_led_Parody 0065                           led_roundabout@leds 0034  
                           __CFG_LPBOREN$OFF 0000                           led_roundabout@size 0036  
                         _flashy_scroll_rate 00AC                         ??_PWM2_LoadDutyValue 0073  
                              _secret_inputs 0236                           ??_schedulerExecute 0068  
                  flashy_display_option@data 004C                __size_of_displayL1_SetSegChar 0041  
                                   ??___bmul 0072                  PWM2_LoadDutyValue@dutyValue 0071  
                                   ??___lmul 0079                   slot_Running_Animation@data 0036  
                                   ??___wmul 0075                    _displayL2_EraseSegDisplay 32D8  
                                _CCPTMRSbits 029F                          __size_of_led_circle 0009  
              __size_of_displayL2_Initialize 0026                       __size_of_TMR0_CallBack 000B  
                                __pdataBANK1 00C7                                  __pdataBANK2 016B  
                                __pdataBANK3 01D1                                  __pdataBANK4 0220  
                                __pdataBANK5 02CA                                  __pdataBANK6 0320  
                                __pdataBANK7 03A0                                  __pdataBANK8 0420  
                                   ??_memset 0077                    _nullifyBadge_irTxRegister 32BA  
              __size_of_displayL1_SetUserLed 0012                          __end_of_flashy_Main 1000  
                        __end_of_flashy_Init 07FA                     ?_SPI1_Exchange8bitBuffer 0072  
                    ??_displayL2_SetUserLeds 007B                             secret_check@data 0077  
                                   ??_strlen 0073                             secret_check@size 0023  
                                __pbssBANK11 05A0                    schedulerExecute@scheduler 00DC  
         nullifyBadge_segDisplayPutStr@badge 0039                  PWM5_LoadDutyValue@dutyValue 0071  
                       marquee_speedy@string 003A                                  __pbssCOMMON 007C  
                                ?_slot_Setup 002F                    schedulerExecute@tickDelta 00DA  
                                  ___latbits 0003                          __end_of_led_curtain 37BF  
                              __pcstackBANK0 0020                                __pcstackBANK1 00D6  
                      __size_of_locked_clear 0042                             _displayL1_Update 32E8  
                         _PWM6_LoadDutyValue 3395                     __size_of_TMR2_Initialize 000A  
                              ??_matrix_Main 0054                                ??_locked_Main 0054  
                           _displayL2_PutStr 3579                                ??_matrix_Init 003B  
                              ??_locked_Init 007C                       scheduler_TaskInit@task 0071  
                           secret_clear@data 0071                      __end_of_SPI1_Initialize 31F2  
                               _isdigit$3645 0071                         _asciiCharTableLookup 26F0  
                      _locked_lock_base_leds 00D2                           _flashy_option_size 00A6  
           matrix_secret_check@buttonPressed 0079             locked_secret_check@buttonPressed 0079  
                    matrix_secret_check@data 0077                      locked_secret_check@data 0077  
                               _curtain_leds 043C                          ?_PWM6_LoadDutyValue 0071  
                    matrix_secret_check@size 0023                      locked_secret_check@size 0023  
           displayL2_SetUserLeds@userLedData 002B                                  sprintf@flag 0040  
                          __size_of_led_rand 0048                                  sprintf@prec 003F  
           matrix_secret_check@currents_size 0025             locked_secret_check@currents_size 0025  
                        __size_of_menu_clear 0047                        _TMR0_InterruptHandler 00BE  
                   __size_of_TMR0_StartTimer 0003                  __size_of_PWM1_LoadDutyValue 0016  
                           ___lwdiv@dividend 0073                       _PIN_MANAGER_Initialize 2C2E  
                                _FLASHY_TEXT 016B                     __size_of_PWM5_Initialize 000C  
                          menu_Main@taskData 0052               __size_of_displayL2_ClrUserLeds 000E  
              __end_of_displayL2_ClrUserLeds 32BA                  displayL1_SetUserLed@display 0074  
                                   ?___almod 002B                                    __ptext100 337F  
                                  __ptext101 3369                                    __ptext102 3353  
                                  __ptext104 3291                                    __ptext105 322A  
                                  __ptext106 2200                            schedulerExecute@k 00DD  
                                   ?___lwdiv 0071                                     ?___lwmod 002B  
                             _marquee_speedy 2F8D                         ??_PWM6_LoadDutyValue 0073  
                               _locked_clear 28B9                            ??_PWM1_Initialize 0071  
               ??_INTERRUPT_InterruptManager 0070                             ___almod@dividend 002F  
                               _matrix_found 00C2                            marquee@multiplier 0044  
                                  __pswtext1 3000                       displayCharReverse@cVal 0071  
              __size_of_nullifyBadge_irTxClr 0003                __size_of_nullifyBadge_irTxSet 0003  
                              ??_secret_Main 0054                                ??_secret_Init 007C  
                        _locked_locking_leds 0220                                     ?_isdigit 0070  
                                   ?_marquee 003A                     __size_of_PWM6_Initialize 000C  
                   __size_of_TMR4_Initialize 000B               ?_nullifyBadge_userLedsRegister 0070  
                displayL2_Initialize@display 002B                      __end_of_menu_run_option 2AEE  
                           ___lwdiv@quotient 0077                              secret_Main@data 0058  
                                  _menu_Main 1B38                         matrix_secret_check@i 0028  
                       locked_secret_check@i 0028                                    _menu_Init 2DF4  
              nullifyBadge_irTxRelease@badge 0072                                    _menu_Exit 0000  
                                   ?_sprintf 002F                          flashy_Main@taskData 0052  
                              _TMR0_CallBack 322A                           displayL2_PutChar@c 002A  
                         displayL2_PutChar@k 002E                                    _menu_task 014F  
    displayL1_SetSegChar@dispDataVectBaseIdx 0026                     ?_slot_Finished_Animation 003D  
                          ??_TMR0_Initialize 0073                            ??_PWM2_Initialize 0071  
                            secret_Init@data 003B                SPI1_Exchange8bitBuffer@dataIn 0077  
                             ___wmul@product 0075                          __end_of_locked_Main 2000  
                        __end_of_matrix_Main 1800                          __end_of_locked_Init 186B  
                        __end_of_matrix_Init 242A                                     _LATBbits 010D  
                                   _LATCbits 010E                SPI1_Exchange8bitBuffer@bufLen 0072  
                                  clear_ram0 3279                                     _PIE0bits 0090  
                   __size_of_TMR2_StartTimer 0003          __size_of_INTERRUPT_InterruptManager 0012  
                 ??_TMR0_SetInterruptHandler 0073              __size_of_locked_get_unlock_leds 0019  
                                   _PIR0bits 0010                                     _PIR1bits 0011  
                                   _PIR2bits 0012                                  _flashy_Main 0819  
                                _flashy_Init 0764                                  _flashy_Exit 0000  
                        __size_of_slot_Setup 0054                   TMR0_Read16bitTimer@readVal 0078  
                 __end_of_locked_unlock_leds 3353                   scheduler_TaskAdd@scheduler 0046  
            __end_of_SPI1_Exchange8bitBuffer 2B88                 __end_of_locked_get_lock_leds 352C  
                     __end_of_marquee_speedy 3000                                  _flashy_task 015C  
                                   _SSP1CON1 0215                                     _TMR0_ISR 3291  
                                   _SSP1STAT 0214                            slot_Init@taskData 0039  
                __size_of_PWM5_LoadDutyValue 0016                        __size_of_secret_check 00BB  
                                  _slot_Main 00E5                        __size_of_secret_clear 0032  
                                  _slot_Init 2E56                                    _slot_Exit 0000  
                                _led_curtain 377E              displayL1_SetUserLed@userLedVect 0071  
                            _flashy_TaskData 04BF                                    _slot_task 0142  
          schedulerExecute@currentSystemTick 00D6                            ___wmul@multiplier 0071  
             __size_of_displayL2_ForceUpdate 0006                __end_of_displayL2_ForceUpdate 31E4  
                          _Shot_Options_Long 0320                                 ??_led_Parody 0032  
                 ??_nullifyBadge_irTxRelease 0071                    __size_of_locked_lock_leds 001B  
          nullifyBadge_segDisplayErase@badge 0038                     matrix_Main@buttonPressed 0058  
                   locked_Main@buttonPressed 0056                          _TMR0_Read16bitTimer 342B  
                      __end_of_let_alternate 2215                                 ??_led_circle 007C  
                            led_circle@count 0030                  __size_of_scheduler_TaskInit 0039  
                             ?_TMR0_CallBack 0070                                   ?_menu_Main 0052  
                                 ?_menu_Init 0039                             ?_SPI1_Initialize 0070  
                   _nullifyBadge_userLedsClr 07FA                            ___lmul@multiplier 0071  
                      led_roundabout@counter 0030                     _nullifyBadge_userLedsSet 32F9  
                        __end_of_secret_Main 2800                          __end_of_secret_Init 2D33  
                                   _Leds_idx 00D0                          _locked_secret_check 100F  
                        _matrix_secret_check 24CD                            ??_TMR2_Initialize 0071  
                        _locked_secret_value 0169                     secret_Main@buttonPressed 0057  
                 locked_get_unlock_leds@leds 0073                     __size_of_TMR4_StartTimer 0003  
                               _secret_check 2588                                 _secret_clear 3662  
                       ?_TMR0_Read16bitTimer 0071                           __end_of_led_Parody 2F1F  
                            marquee_speedy@i 0046                              marquee_speedy@j 004A  
                ??_nullifyBadge_platformInit 007C                     ?_nullifyBadge_buttonsGet 0070  
                               _secret_value 00C5                              _flashy_leds_idx 00B2  
 __end_of_nullifyBadge_segDisplayForceUpdate 31EA  __size_of_nullifyBadge_segDisplayForceUpdate 0006  
       ??_nullifyBadge_segDisplayForceUpdate 007C          ?_nullifyBadge_segDisplayForceUpdate 0070  
         _nullifyBadge_segDisplayForceUpdate 31E4                              ?_marquee_speedy 003A  
                    ??_OSCILLATOR_Initialize 0071                          marquee_speedy@count 003C  
                          ??_TMR0_StartTimer 0071                             __size_of___almod 006E  
                         __end_of_led_circle 320C                                   ?_slot_Main 0052  
                                 ?_slot_Init 0039                             __size_of___lwdiv 0034  
                           __size_of___lwmod 002D                         ?_matrix_secret_check 0077  
                       ?_locked_secret_check 0077                                 ??_menu_clear 007C  
                          ??_PWM5_Initialize 0071                      __size_of_scheduler_Init 001B  
                                 sprintf@len 0046                                  _currentTask 00BA  
                                 sprintf@val 0044                 __size_of_menu_display_option 0062  
         __size_of_displayL2_EraseSegDisplay 0010                                   _T0CON0bits 0017  
                     _locked_get_unlock_leds 0800                             __size_of_isdigit 000E  
                           __size_of_marquee 0077                              ___lwdiv@divisor 0071  
                            ___lwdiv@counter 0076                                 _Shot_Options 01D1  
                        displayCharReverse@k 007B           __size_of_nullifyBadge_irTxRegister 000F  
                                   __ptext10 31F2                                     __ptext11 3410  
                                   __ptext20 293E                                     __ptext12 2306  
                                   __ptext21 3552                                     __ptext13 34C3  
                                   __ptext30 3340                                     __ptext22 3662  
                                   __ptext14 10CB                                     __ptext31 100F  
                                   __ptext23 2588                                     __ptext15 2643  
                                   __ptext40 32D8                                     __ptext32 330A  
                                   __ptext24 2AA4                                     __ptext16 1D2F  
                                   __ptext41 196B                                     __ptext33 33F5  
                                   __ptext25 2984                                     __ptext17 1B38  
                                   __ptext50 2201                                     __ptext42 329E  
                                   __ptext34 0800                                     __ptext26 2D92  
                                   __ptext18 0819                                     __ptext51 37BF  
                                   __ptext43 33DA                                     __ptext35 3507  
                                   __ptext27 24CD                                     __ptext19 00E5  
                                   __ptext60 3484                                     __ptext52 29CB  
                                   __ptext44 2882                                     __ptext36 28B9  
                                   __ptext28 242A                                     __ptext61 331B  
                                   __ptext53 28FB                                     __ptext45 3256  
                                   __ptext37 07FA                                     __ptext29 2BDA  
                                   __ptext70 35D0                                     __ptext62 2D33  
                                   __ptext54 3630                                     __ptext46 32BA  
                                   __ptext38 32AC                                     __ptext71 31E4  
                                   __ptext63 2F8D                                     __ptext55 2F1F  
                                   __ptext47 31CC                                     __ptext39 1800  
                                   __ptext80 32E8                                     __ptext72 31DE  
                                   __ptext64 2215                                     __ptext56 377E  
                                   __ptext48 31D3                                     __ptext81 2B3A  
                                   __ptext73 35A3                                     __ptext65 3466  
                                   __ptext57 3203                                     __ptext49 35FF  
                                   __ptext90 31C3                                     __ptext82 31FA  
                                   __ptext74 2885                                     __ptext66 3220  
                                   __ptext58 2EBA                                     __ptext91 31D8  
                                   __ptext83 34A2                                     __ptext75 342B  
                                   __ptext67 3579                                     __ptext59 32F9  
                                   __ptext92 31EA                                     __ptext84 31CF  
                                   __ptext76 2C83                                     __ptext68 2B88  
                                   __ptext93 326D                                     __ptext85 324B  
                                   __ptext77 352C                                     __ptext69 373D  
                                   __ptext94 3261                                     __ptext86 31C9  
                                   __ptext78 332D                                     __ptext95 3240  
                                   __ptext87 3216                                     __ptext79 33C2  
                                   __ptext96 3235                                     __ptext88 31C6  
                                   __ptext97 2C2E                                     __ptext89 3448  
                                   __ptext98 320C                                     __ptext99 3395  
                                _matrix_Main 10CB                                  _locked_Main 1D2F  
                                _matrix_Init 238A                                  _locked_Init 1806  
                         slot_Setup@taskData 002F                                  _matrix_Exit 0000  
                                _locked_Exit 0000                                 _SSP1CON1bits 0215  
                           ?_menu_run_option 003B                                  _locked_leds 00A2  
                                _matrix_task 01C4                                  _locked_task 0135  
                            ___almod@divisor 002B                                     _led_rand 29CB  
                           __size_of_sprintf 01CD                              ___almod@counter 007A  
             slot_Running_Animation@taskData 0032                                  _menu_option 022C  
    __end_of_nullifyBadge_segDisplayRegister 31FA     __size_of_nullifyBadge_segDisplayRegister 0008  
          ??_nullifyBadge_segDisplayRegister 0071             ?_nullifyBadge_segDisplayRegister 0070  
            _nullifyBadge_segDisplayRegister 31F2                         marquee@string_length 0048  
                              menu_Main@data 0057                            ??_TMR4_Initialize 0071  
                          ??_PWM6_Initialize 0071                                __size_of_main 0103  
                              __size_of_rand 0043         __end_of_TMR0_DefaultInterruptHandler 2201  
      __size_of_TMR0_DefaultInterruptHandler 0001                 _TMR0_DefaultInterruptHandler 2200  
                         __end_of_menu_clear 29CB                            displayL2_PutStr@k 0036  
                      ??_TMR0_Read16bitTimer 0073                                   _RC0PPSbits 0EA0  
                              marquee@F14102 01E3                                   _RC1PPSbits 0EA1  
                              menu_Init@data 003B                     __end_of_displayL1_Update 32F9  
                         let_alternate@count 0030                                   _RC2PPSbits 0EA2  
             __size_of_flashy_display_option 005F                     __end_of_displayL2_PutStr 35A3  
              __end_of_flashy_display_option 2D92                                   _RC3PPSbits 0EA3  
               __end_of_displayL1_Initialize 3340                         _curtain_leds_inverse 0420  
                                   _pw_found 00C3                                   _RC4PPSbits 0EA4  
                                 _RB6PPSbits 0E9E                                     int$flags 007E  
               displayL2_ForceUpdate@display 007B                              matrix_Main@data 005A  
                            locked_Main@data 0057                            ??_TMR2_StartTimer 0071  
         __end_of_INTERRUPT_InterruptManager 0016                   _INTERRUPT_InterruptManager 0004  
                      ??_matrix_secret_check 0020                        ??_locked_secret_check 0020  
                               _SSP1STATbits 0214         nullifyBadge_segDisplayRegister@badge 0071  
                PIN_MANAGER_Initialize@state 0071           schedulerExecute@taskLastSystemTick 00D8  
                         _displayCharReverse 35D0                            menu_Init@taskData 0039  
                  __size_of_schedulerExecute 0084               __size_of_displayL2_SetUserLeds 001E  
                            matrix_Init@data 003D                              locked_Init@data 003B  
              __end_of_displayL2_SetUserLeds 34A2                displayCharReverse@retValLower 0078  
              displayCharReverse@retValUpper 0079                                   _INTCONbits 000B  
                                _secret_Main 2643                      __size_of_led_roundabout 0041  
                                _secret_Init 2CD8                                 ??_slot_Setup 0031  
                                _secret_Exit 0000                              ??_TMR0_CallBack 0070  
                                _NVMCON1bits 0895                    _nullifyBadge_platformInit 2C83  
               __end_of_displayL1_SetSegChar 377E                                  _secret_task 0128  
                             __pstringtext10 3919                               __pstringtext11 3937  
                             __pstringtext20 3A1F                               __pstringtext12 3954  
                             __pstringtext21 3A32                               __pstringtext13 3971  
                             __pstringtext30 3ABF                               __pstringtext22 3A45  
                             __pstringtext14 398D                               __pstringtext31 3ACB  
                             __pstringtext23 3A57                               __pstringtext15 39A8  
                             __pstringtext40 3B25                               __pstringtext32 3AD7  
                             __pstringtext24 3A68                               __pstringtext16 39C3  
                             __pstringtext41 3B2E                               __pstringtext33 3AE2  
                             __pstringtext25 3A79                               __pstringtext17 39DD  
                             __pstringtext50 3B74                               __pstringtext42 3B36  
                             __pstringtext34 3AED                               __pstringtext26 3A89  
                             __pstringtext18 39F4                               __pstringtext51 3B7B  
                             __pstringtext43 3B3E                               __pstringtext35 3AF7  
                             __pstringtext27 3A98                               __pstringtext19 3A0A  
                             __pstringtext60 3BB0                               __pstringtext52 3B82  
                             __pstringtext44 3B46                               __pstringtext36 3B01  
                             __pstringtext28 3AA5                               __pstringtext61 3BB5  
                             __pstringtext53 3B89                               __pstringtext45 3B4E  
                             __pstringtext37 3B0A                               __pstringtext29 3AB2  
                             __pstringtext70 3BE2                               __pstringtext62 3BBA  
                             __pstringtext54 3B8F                               __pstringtext46 3B56  
                             __pstringtext38 3B13                               __pstringtext71 3BE7  
                             __pstringtext63 3BBF                               __pstringtext55 3B95  
                             __pstringtext47 3B5E                               __pstringtext39 3B1C  
                             __pstringtext72 3BEC                               __pstringtext64 3BC4  
                             __pstringtext56 3B9B                               __pstringtext48 3B66  
                             __pstringtext73 3BF1                               __pstringtext65 3BC9  
                             __pstringtext57 3BA1                               __pstringtext49 3B6D  
                             __pstringtext74 3BF6                               __pstringtext66 3BCE  
                             __pstringtext58 3BA6                               __pstringtext75 3BFB  
                             __pstringtext67 3BD3                               __pstringtext59 3BAB  
                             __pstringtext76 3C00                               __pstringtext68 3BD8  
                             __pstringtext77 3C05                               __pstringtext69 3BDD  
                             __pstringtext78 3C09                               __pstringtext79 0000  
          __end_of_displayL2_EraseSegDisplay 32E8                                     isdigit@c 0072  
                                   marquee@i 0046                                     marquee@j 004A  
                                   memset@p1 0071                 __end_of_displayL2_Initialize 3552  
                        ?_displayCharReverse 0071                                  ??_menu_Main 0054  
                                ??_menu_Init 007C                      __size_of_WDT_Initialize 0004  
                       _locked_get_lock_leds 3507            __end_of_nullifyBadge_irTxRegister 32C9  
           __size_of_SPI1_Exchange8bitBuffer 004E                 __end_of_displayL1_SetUserLed 332D  
                                   intlevel1 0000                                    sprintf@ap 0043  
                                  sprintf@cp 0041                                    sprintf@sp 002F  
                           ___lwmod@dividend 002D                      ?_PIN_MANAGER_Initialize 0070  
                              marquee@string 003A                  __size_of_nullifyBadge_irGet 0005  
                          __CFG_CLKOUTEN$OFF 0000                        _matrix_display_option 242A  
        SPI1_Exchange8bitBuffer@bytesWritten 0078                                  _PPSLOCKbits 0E0F  
                            _PWM1_Initialize 3235                          flashy_Init@taskData 0039  
                             menu_clear@data 0039                ?_TMR0_DefaultInterruptHandler 0070  
                __size_of_PWM2_LoadDutyValue 0016                         ??_displayCharReverse 0073  
                         __end_of_slot_Setup 2C2E                            ??_TMR4_StartTimer 0071  
                                ??_slot_Main 0054                                  ??_slot_Init 007C  
                              __pstringtext1 2000                                __pstringtext2 2800  
                              __pstringtext3 3800                                __pstringtext4 382F  
                              __pstringtext5 385D                                __pstringtext6 3888  
                              __pstringtext7 38B0                                __pstringtext8 38D4  
                              __pstringtext9 38F7             __end_of_nullifyBadge_irTxRelease 3261  
                                   sprintf@c 004A                                     sprintf@f 0031  
                              _flashy_option 0520                             _locked_lock_leds 33F5  
                            ___lwmod@divisor 002B                              _TMR0_Initialize 3448  
                            _PWM2_Initialize 3240                                     strlen@cp 0075  
                              _slot_TaskData 05A0                              ___lwmod@counter 007A  
                PWM6_LoadDutyValue@dutyValue 0071                        ?_locked_get_lock_leds 0071  
             __end_of_PIN_MANAGER_Initialize 2C83                           _matrix_option_size 0120  
                           locked_clear@data 0039                                 ___almod@sign 007B  
                                _PWMTMRSbits 061F                 __end_of_nullifyBadge_irTxClr 31CF  
               __end_of_nullifyBadge_irTxSet 2885                   __end_of_PWM1_LoadDutyValue 3369  
                          _matrix_option_idx 0122                        _TMR2_InterruptHandler 0126  
                               ?_flashy_Main 0052                                 ?_flashy_Init 0039  
