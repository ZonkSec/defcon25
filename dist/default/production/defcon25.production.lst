

Microchip Technology PIC LITE Macro Assembler V1.42 build -159332390 
                                                                                               Tue Jul 25 01:25:02 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	16F18346
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	idataBANK3,global,class=CODE,delta=2
     7                           	psect	idataBANK4,global,class=CODE,delta=2
     8                           	psect	idataBANK5,global,class=CODE,delta=2
     9                           	psect	idataBANK6,global,class=CODE,delta=2
    10                           	psect	idataBANK7,global,class=CODE,delta=2
    11                           	psect	idataBANK8,global,class=CODE,delta=2
    12                           	psect	idataBIGRAM,global,class=CODE,delta=2
    13                           	psect	stringtext1,global,class=STRCODE,delta=2
    14                           	psect	stringtext2,global,class=STRCODE,delta=2
    15                           	psect	stringtext3,global,class=STRCODE,delta=2
    16                           	psect	stringtext4,global,class=STRCODE,delta=2
    17                           	psect	stringtext5,global,class=STRCODE,delta=2
    18                           	psect	stringtext6,global,class=STRCODE,delta=2
    19                           	psect	stringtext7,global,class=STRCODE,delta=2
    20                           	psect	stringtext8,global,class=STRCODE,delta=2
    21                           	psect	stringtext9,global,class=STRCODE,delta=2
    22                           	psect	stringtext10,global,class=STRCODE,delta=2
    23                           	psect	stringtext11,global,class=STRCODE,delta=2
    24                           	psect	stringtext12,global,class=STRCODE,delta=2
    25                           	psect	stringtext13,global,class=STRCODE,delta=2
    26                           	psect	stringtext14,global,class=STRCODE,delta=2
    27                           	psect	stringtext15,global,class=STRCODE,delta=2
    28                           	psect	stringtext16,global,class=STRCODE,delta=2
    29                           	psect	stringtext17,global,class=STRCODE,delta=2
    30                           	psect	stringtext18,global,class=STRCODE,delta=2
    31                           	psect	stringtext19,global,class=STRCODE,delta=2
    32                           	psect	stringtext20,global,class=STRCODE,delta=2
    33                           	psect	stringtext21,global,class=STRCODE,delta=2
    34                           	psect	stringtext22,global,class=STRCODE,delta=2
    35                           	psect	stringtext23,global,class=STRCODE,delta=2
    36                           	psect	stringtext24,global,class=STRCODE,delta=2
    37                           	psect	stringtext25,global,class=STRCODE,delta=2
    38                           	psect	stringtext26,global,class=STRCODE,delta=2
    39                           	psect	stringtext27,global,class=STRCODE,delta=2
    40                           	psect	stringtext28,global,class=STRCODE,delta=2
    41                           	psect	stringtext29,global,class=STRCODE,delta=2
    42                           	psect	stringtext30,global,class=STRCODE,delta=2
    43                           	psect	stringtext31,global,class=STRCODE,delta=2
    44                           	psect	stringtext32,global,class=STRCODE,delta=2
    45                           	psect	stringtext33,global,class=STRCODE,delta=2
    46                           	psect	stringtext34,global,class=STRCODE,delta=2
    47                           	psect	stringtext35,global,class=STRCODE,delta=2
    48                           	psect	stringtext36,global,class=STRCODE,delta=2
    49                           	psect	stringtext37,global,class=STRCODE,delta=2
    50                           	psect	stringtext38,global,class=STRCODE,delta=2
    51                           	psect	stringtext39,global,class=STRCODE,delta=2
    52                           	psect	stringtext40,global,class=STRCODE,delta=2
    53                           	psect	stringtext41,global,class=STRCODE,delta=2
    54                           	psect	stringtext42,global,class=STRCODE,delta=2
    55                           	psect	stringtext43,global,class=STRCODE,delta=2
    56                           	psect	stringtext44,global,class=STRCODE,delta=2
    57                           	psect	stringtext45,global,class=STRCODE,delta=2
    58                           	psect	stringtext46,global,class=STRCODE,delta=2
    59                           	psect	stringtext47,global,class=STRCODE,delta=2
    60                           	psect	stringtext48,global,class=STRCODE,delta=2
    61                           	psect	stringtext49,global,class=STRCODE,delta=2
    62                           	psect	cinit,global,class=CODE,merge=1,delta=2
    63                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    64                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    65                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    66                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    67                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    68                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    69                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    70                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    71                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    72                           	psect	dataBANK5,global,class=BANK5,space=1,delta=1
    73                           	psect	dataBANK6,global,class=BANK6,space=1,delta=1
    74                           	psect	dataBANK7,global,class=BANK7,space=1,delta=1
    75                           	psect	bssBANK8,global,class=BANK8,space=1,delta=1
    76                           	psect	dataBANK8,global,class=BANK8,space=1,delta=1
    77                           	psect	bssBANK9,global,class=BANK9,space=1,delta=1
    78                           	psect	inittext,global,class=CODE,delta=2
    79                           	psect	clrtext,global,class=CODE,delta=2
    80                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    81                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    82                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    83                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    84                           	psect	text1,local,class=CODE,merge=1,delta=2
    85                           	psect	text2,local,class=CODE,merge=1,delta=2
    86                           	psect	text3,local,class=CODE,merge=1,delta=2
    87                           	psect	text4,local,class=CODE,merge=1,delta=2
    88                           	psect	text5,local,class=CODE,merge=1,delta=2
    89                           	psect	text6,local,class=CODE,merge=1,delta=2
    90                           	psect	text7,local,class=CODE,merge=1,delta=2
    91                           	psect	text8,local,class=CODE,merge=1,delta=2
    92                           	psect	text9,local,class=CODE,merge=1,delta=2
    93                           	psect	text10,local,class=CODE,merge=1,delta=2
    94                           	psect	text11,local,class=CODE,merge=1,delta=2
    95                           	psect	text12,local,class=CODE,merge=1,delta=2
    96                           	psect	text13,local,class=CODE,merge=1,delta=2
    97                           	psect	text14,local,class=CODE,merge=1,delta=2
    98                           	psect	text15,local,class=CODE,merge=1,delta=2
    99                           	psect	text16,local,class=CODE,merge=1,delta=2
   100                           	psect	swtext1,local,class=CONST,delta=2
   101                           	psect	text17,local,class=CODE,merge=1,delta=2
   102                           	psect	text18,local,class=CODE,merge=1,delta=2
   103                           	psect	text19,local,class=CODE,merge=1,delta=2
   104                           	psect	text20,local,class=CODE,merge=1,delta=2
   105                           	psect	text21,local,class=CODE,merge=1,delta=2
   106                           	psect	text22,local,class=CODE,merge=1,delta=2,group=2
   107                           	psect	text23,local,class=CODE,merge=1,delta=2
   108                           	psect	text24,local,class=CODE,merge=1,delta=2
   109                           	psect	text25,local,class=CODE,merge=1,delta=2
   110                           	psect	text26,local,class=CODE,merge=1,delta=2
   111                           	psect	text27,local,class=CODE,merge=1,delta=2
   112                           	psect	text28,local,class=CODE,merge=1,delta=2
   113                           	psect	text29,local,class=CODE,merge=1,delta=2
   114                           	psect	text30,local,class=CODE,merge=1,delta=2
   115                           	psect	text31,local,class=CODE,merge=1,delta=2
   116                           	psect	text32,local,class=CODE,merge=1,delta=2
   117                           	psect	text33,local,class=CODE,merge=1,delta=2
   118                           	psect	text34,local,class=CODE,merge=1,delta=2
   119                           	psect	text35,local,class=CODE,merge=1,delta=2
   120                           	psect	text36,local,class=CODE,merge=1,delta=2
   121                           	psect	text37,local,class=CODE,merge=1,delta=2,group=2
   122                           	psect	text38,local,class=CODE,merge=1,delta=2,group=2
   123                           	psect	text39,local,class=CODE,merge=1,delta=2
   124                           	psect	text40,local,class=CODE,merge=1,delta=2
   125                           	psect	text41,local,class=CODE,merge=1,delta=2
   126                           	psect	text42,local,class=CODE,merge=1,delta=2
   127                           	psect	text43,local,class=CODE,merge=1,delta=2
   128                           	psect	text44,local,class=CODE,merge=1,delta=2
   129                           	psect	text45,local,class=CODE,merge=1,delta=2
   130                           	psect	text46,local,class=CODE,merge=1,delta=2
   131                           	psect	text47,local,class=CODE,merge=1,delta=2
   132                           	psect	text48,local,class=CODE,merge=1,delta=2,group=2
   133                           	psect	text49,local,class=CODE,merge=1,delta=2,group=2
   134                           	psect	text50,local,class=CODE,merge=1,delta=2,group=2
   135                           	psect	text51,local,class=CODE,merge=1,delta=2
   136                           	psect	text52,local,class=CODE,merge=1,delta=2
   137                           	psect	text53,local,class=CODE,merge=1,delta=2
   138                           	psect	text54,local,class=CODE,merge=1,delta=2
   139                           	psect	text55,local,class=CODE,merge=1,delta=2
   140                           	psect	text56,local,class=CODE,merge=1,delta=2
   141                           	psect	text57,local,class=CODE,merge=1,delta=2
   142                           	psect	text58,local,class=CODE,merge=1,delta=2
   143                           	psect	text59,local,class=CODE,merge=1,delta=2
   144                           	psect	text60,local,class=CODE,merge=1,delta=2,group=2
   145                           	psect	text61,local,class=CODE,merge=1,delta=2
   146                           	psect	text62,local,class=CODE,merge=1,delta=2
   147                           	psect	text63,local,class=CODE,merge=1,delta=2
   148                           	psect	text64,local,class=CODE,merge=1,delta=2
   149                           	psect	text65,local,class=CODE,merge=1,delta=2
   150                           	psect	text66,local,class=CODE,merge=1,delta=2
   151                           	psect	text67,local,class=CODE,merge=1,delta=2
   152                           	psect	text68,local,class=CODE,merge=1,delta=2,group=2
   153                           	psect	text69,local,class=CODE,merge=1,delta=2,group=2
   154                           	psect	text70,local,class=CODE,merge=1,delta=2
   155                           	psect	text71,local,class=CODE,merge=1,delta=2
   156                           	psect	text72,local,class=CODE,merge=1,delta=2
   157                           	psect	text73,local,class=CODE,merge=1,delta=2
   158                           	psect	text74,local,class=CODE,merge=1,delta=2,group=2
   159                           	psect	text75,local,class=CODE,merge=1,delta=2
   160                           	psect	text76,local,class=CODE,merge=1,delta=2
   161                           	psect	text77,local,class=CODE,merge=1,delta=2
   162                           	psect	text78,local,class=CODE,merge=1,delta=2
   163                           	psect	text79,local,class=CODE,merge=1,delta=2
   164                           	psect	text80,local,class=CODE,merge=1,delta=2
   165                           	psect	text81,local,class=CODE,merge=1,delta=2
   166                           	psect	text82,local,class=CODE,merge=1,delta=2
   167                           	psect	text83,local,class=CODE,merge=1,delta=2
   168                           	psect	text84,local,class=CODE,merge=1,delta=2
   169                           	psect	text85,local,class=CODE,merge=1,delta=2
   170                           	psect	text86,local,class=CODE,merge=1,delta=2
   171                           	psect	text87,local,class=CODE,merge=1,delta=2
   172                           	psect	text88,local,class=CODE,merge=1,delta=2
   173                           	psect	text89,local,class=CODE,merge=1,delta=2
   174                           	psect	text90,local,class=CODE,merge=1,delta=2
   175                           	psect	text91,local,class=CODE,merge=1,delta=2
   176                           	psect	text92,local,class=CODE,merge=1,delta=2
   177                           	psect	text93,local,class=CODE,merge=1,delta=2
   178                           	psect	text94,local,class=CODE,merge=1,delta=2
   179                           	psect	text95,local,class=CODE,merge=1,delta=2
   180                           	psect	text96,local,class=CODE,merge=1,delta=2
   181                           	psect	text97,local,class=CODE,merge=1,delta=2
   182                           	psect	intentry,global,class=CODE,delta=2
   183                           	psect	text99,local,class=CODE,merge=1,delta=2
   184                           	psect	text100,local,class=CODE,merge=1,delta=2
   185                           	psect	text101,local,class=CODE,merge=1,delta=2
   186                           	dabs	1,0xCA0,32
   187                           	dabs	1,0xC20,80
   188                           	dabs	1,0xBA0,80
   189                           	dabs	1,0xB30,64
   190                           	dabs	1,0x26F0,0,_asciiCharTableLookup
   191                           	dabs	1,0x7E,2
   192  0000                     
   193                           ; Version 1.42
   194                           ; Generated 13/04/2017 GMT
   195                           ; 
   196                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   197                           ; All rights reserved.
   198                           ; 
   199                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   200                           ; 
   201                           ; Redistribution and use in source and binary forms, with or without modification, are
   202                           ; permitted provided that the following conditions are met:
   203                           ; 
   204                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   205                           ;        conditions and the following disclaimer.
   206                           ; 
   207                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   208                           ;        of conditions and the following disclaimer in the documentation and/or other
   209                           ;        materials provided with the distribution.
   210                           ; 
   211                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   212                           ;        software without specific prior written permission.
   213                           ; 
   214                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   215                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   216                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   217                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   218                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   219                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   220                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   221                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   222                           ; 
   223                           ; 
   224                           ; Code-generator required, PIC16F18346 Definitions
   225                           ; 
   226                           ; SFR Addresses
   227  0000                     	;# 
   228  0001                     	;# 
   229  0002                     	;# 
   230  0003                     	;# 
   231  0004                     	;# 
   232  0005                     	;# 
   233  0006                     	;# 
   234  0007                     	;# 
   235  0008                     	;# 
   236  0009                     	;# 
   237  000A                     	;# 
   238  000B                     	;# 
   239  000C                     	;# 
   240  000D                     	;# 
   241  000E                     	;# 
   242  0010                     	;# 
   243  0011                     	;# 
   244  0012                     	;# 
   245  0013                     	;# 
   246  0014                     	;# 
   247  0015                     	;# 
   248  0015                     	;# 
   249  0016                     	;# 
   250  0016                     	;# 
   251  0017                     	;# 
   252  0018                     	;# 
   253  0019                     	;# 
   254  0019                     	;# 
   255  001A                     	;# 
   256  001B                     	;# 
   257  001C                     	;# 
   258  001D                     	;# 
   259  001E                     	;# 
   260  001F                     	;# 
   261  008C                     	;# 
   262  008D                     	;# 
   263  008E                     	;# 
   264  0090                     	;# 
   265  0091                     	;# 
   266  0092                     	;# 
   267  0093                     	;# 
   268  0094                     	;# 
   269  0097                     	;# 
   270  009B                     	;# 
   271  009B                     	;# 
   272  009C                     	;# 
   273  009D                     	;# 
   274  009E                     	;# 
   275  009F                     	;# 
   276  010C                     	;# 
   277  010D                     	;# 
   278  010E                     	;# 
   279  0111                     	;# 
   280  0112                     	;# 
   281  0113                     	;# 
   282  0114                     	;# 
   283  0115                     	;# 
   284  0116                     	;# 
   285  0117                     	;# 
   286  0118                     	;# 
   287  0119                     	;# 
   288  018C                     	;# 
   289  018D                     	;# 
   290  018E                     	;# 
   291  0197                     	;# 
   292  0199                     	;# 
   293  0199                     	;# 
   294  0199                     	;# 
   295  019A                     	;# 
   296  019A                     	;# 
   297  019A                     	;# 
   298  019B                     	;# 
   299  019B                     	;# 
   300  019B                     	;# 
   301  019B                     	;# 
   302  019B                     	;# 
   303  019C                     	;# 
   304  019C                     	;# 
   305  019C                     	;# 
   306  019D                     	;# 
   307  019D                     	;# 
   308  019D                     	;# 
   309  019E                     	;# 
   310  019E                     	;# 
   311  019E                     	;# 
   312  019F                     	;# 
   313  019F                     	;# 
   314  019F                     	;# 
   315  019F                     	;# 
   316  019F                     	;# 
   317  020C                     	;# 
   318  020D                     	;# 
   319  020E                     	;# 
   320  0211                     	;# 
   321  0211                     	;# 
   322  0212                     	;# 
   323  0212                     	;# 
   324  0213                     	;# 
   325  0213                     	;# 
   326  0214                     	;# 
   327  0214                     	;# 
   328  0215                     	;# 
   329  0215                     	;# 
   330  0215                     	;# 
   331  0215                     	;# 
   332  0216                     	;# 
   333  0216                     	;# 
   334  0217                     	;# 
   335  0217                     	;# 
   336  0219                     	;# 
   337  021A                     	;# 
   338  021B                     	;# 
   339  021C                     	;# 
   340  021D                     	;# 
   341  021D                     	;# 
   342  021E                     	;# 
   343  021F                     	;# 
   344  028C                     	;# 
   345  028D                     	;# 
   346  028E                     	;# 
   347  0291                     	;# 
   348  0291                     	;# 
   349  0292                     	;# 
   350  0293                     	;# 
   351  0294                     	;# 
   352  0295                     	;# 
   353  0295                     	;# 
   354  0296                     	;# 
   355  0297                     	;# 
   356  0298                     	;# 
   357  029F                     	;# 
   358  030C                     	;# 
   359  030D                     	;# 
   360  030E                     	;# 
   361  0311                     	;# 
   362  0311                     	;# 
   363  0312                     	;# 
   364  0313                     	;# 
   365  0314                     	;# 
   366  0315                     	;# 
   367  0315                     	;# 
   368  0316                     	;# 
   369  0317                     	;# 
   370  0318                     	;# 
   371  038C                     	;# 
   372  038D                     	;# 
   373  038E                     	;# 
   374  0391                     	;# 
   375  0392                     	;# 
   376  0393                     	;# 
   377  0394                     	;# 
   378  0395                     	;# 
   379  0396                     	;# 
   380  0397                     	;# 
   381  0398                     	;# 
   382  0399                     	;# 
   383  039A                     	;# 
   384  039C                     	;# 
   385  039D                     	;# 
   386  039E                     	;# 
   387  039F                     	;# 
   388  0411                     	;# 
   389  0411                     	;# 
   390  0412                     	;# 
   391  0413                     	;# 
   392  0414                     	;# 
   393  0415                     	;# 
   394  0416                     	;# 
   395  0417                     	;# 
   396  0418                     	;# 
   397  0418                     	;# 
   398  0419                     	;# 
   399  041A                     	;# 
   400  041B                     	;# 
   401  041C                     	;# 
   402  041D                     	;# 
   403  041E                     	;# 
   404  041F                     	;# 
   405  0498                     	;# 
   406  0498                     	;# 
   407  0499                     	;# 
   408  049A                     	;# 
   409  049B                     	;# 
   410  049B                     	;# 
   411  049C                     	;# 
   412  049D                     	;# 
   413  049E                     	;# 
   414  049F                     	;# 
   415  0617                     	;# 
   416  0618                     	;# 
   417  0619                     	;# 
   418  0619                     	;# 
   419  061A                     	;# 
   420  061B                     	;# 
   421  061C                     	;# 
   422  061C                     	;# 
   423  061F                     	;# 
   424  0691                     	;# 
   425  0692                     	;# 
   426  0693                     	;# 
   427  0694                     	;# 
   428  0695                     	;# 
   429  0696                     	;# 
   430  0697                     	;# 
   431  0698                     	;# 
   432  0699                     	;# 
   433  0711                     	;# 
   434  0712                     	;# 
   435  0713                     	;# 
   436  0714                     	;# 
   437  0715                     	;# 
   438  0716                     	;# 
   439  0717                     	;# 
   440  0718                     	;# 
   441  0719                     	;# 
   442  0891                     	;# 
   443  0891                     	;# 
   444  0891                     	;# 
   445  0891                     	;# 
   446  0891                     	;# 
   447  0891                     	;# 
   448  0892                     	;# 
   449  0892                     	;# 
   450  0892                     	;# 
   451  0893                     	;# 
   452  0893                     	;# 
   453  0893                     	;# 
   454  0893                     	;# 
   455  0893                     	;# 
   456  0893                     	;# 
   457  0894                     	;# 
   458  0894                     	;# 
   459  0894                     	;# 
   460  0895                     	;# 
   461  0895                     	;# 
   462  0895                     	;# 
   463  0896                     	;# 
   464  0896                     	;# 
   465  0896                     	;# 
   466  089B                     	;# 
   467  0911                     	;# 
   468  0912                     	;# 
   469  0913                     	;# 
   470  0914                     	;# 
   471  0915                     	;# 
   472  0916                     	;# 
   473  0918                     	;# 
   474  0919                     	;# 
   475  091A                     	;# 
   476  091B                     	;# 
   477  091C                     	;# 
   478  091D                     	;# 
   479  091E                     	;# 
   480  091F                     	;# 
   481  0E0F                     	;# 
   482  0E10                     	;# 
   483  0E11                     	;# 
   484  0E12                     	;# 
   485  0E13                     	;# 
   486  0E14                     	;# 
   487  0E15                     	;# 
   488  0E16                     	;# 
   489  0E17                     	;# 
   490  0E18                     	;# 
   491  0E19                     	;# 
   492  0E1A                     	;# 
   493  0E1B                     	;# 
   494  0E1C                     	;# 
   495  0E1D                     	;# 
   496  0E1E                     	;# 
   497  0E1F                     	;# 
   498  0E20                     	;# 
   499  0E21                     	;# 
   500  0E22                     	;# 
   501  0E24                     	;# 
   502  0E25                     	;# 
   503  0E28                     	;# 
   504  0E29                     	;# 
   505  0E2A                     	;# 
   506  0E2B                     	;# 
   507  0E2C                     	;# 
   508  0E2D                     	;# 
   509  0E2E                     	;# 
   510  0E2F                     	;# 
   511  0E90                     	;# 
   512  0E91                     	;# 
   513  0E92                     	;# 
   514  0E94                     	;# 
   515  0E95                     	;# 
   516  0E9C                     	;# 
   517  0E9D                     	;# 
   518  0E9E                     	;# 
   519  0E9F                     	;# 
   520  0EA0                     	;# 
   521  0EA1                     	;# 
   522  0EA2                     	;# 
   523  0EA3                     	;# 
   524  0EA4                     	;# 
   525  0EA5                     	;# 
   526  0EA6                     	;# 
   527  0EA7                     	;# 
   528  0F0F                     	;# 
   529  0F10                     	;# 
   530  0F11                     	;# 
   531  0F12                     	;# 
   532  0F13                     	;# 
   533  0F14                     	;# 
   534  0F15                     	;# 
   535  0F16                     	;# 
   536  0F17                     	;# 
   537  0F18                     	;# 
   538  0F19                     	;# 
   539  0F1A                     	;# 
   540  0F1B                     	;# 
   541  0F1C                     	;# 
   542  0F1D                     	;# 
   543  0F1E                     	;# 
   544  0F1F                     	;# 
   545  0F20                     	;# 
   546  0F21                     	;# 
   547  0F22                     	;# 
   548  0F23                     	;# 
   549  0F24                     	;# 
   550  0F25                     	;# 
   551  0F26                     	;# 
   552  0F27                     	;# 
   553  0F28                     	;# 
   554  0F29                     	;# 
   555  0F2A                     	;# 
   556  0F2B                     	;# 
   557  0F2C                     	;# 
   558  0F2D                     	;# 
   559  0F2E                     	;# 
   560  0F2F                     	;# 
   561  0F30                     	;# 
   562  0F31                     	;# 
   563  0F32                     	;# 
   564  0F33                     	;# 
   565  0F34                     	;# 
   566  0F35                     	;# 
   567  0F36                     	;# 
   568  0F37                     	;# 
   569  0FE4                     	;# 
   570  0FE5                     	;# 
   571  0FE6                     	;# 
   572  0FE7                     	;# 
   573  0FE8                     	;# 
   574  0FE9                     	;# 
   575  0FEA                     	;# 
   576  0FEB                     	;# 
   577  0FED                     	;# 
   578  0FEE                     	;# 
   579  0FEF                     	;# 
   580  0000                     	;# 
   581  0001                     	;# 
   582  0002                     	;# 
   583  0003                     	;# 
   584  0004                     	;# 
   585  0005                     	;# 
   586  0006                     	;# 
   587  0007                     	;# 
   588  0008                     	;# 
   589  0009                     	;# 
   590  000A                     	;# 
   591  000B                     	;# 
   592  000C                     	;# 
   593  000D                     	;# 
   594  000E                     	;# 
   595  0010                     	;# 
   596  0011                     	;# 
   597  0012                     	;# 
   598  0013                     	;# 
   599  0014                     	;# 
   600  0015                     	;# 
   601  0015                     	;# 
   602  0016                     	;# 
   603  0016                     	;# 
   604  0017                     	;# 
   605  0018                     	;# 
   606  0019                     	;# 
   607  0019                     	;# 
   608  001A                     	;# 
   609  001B                     	;# 
   610  001C                     	;# 
   611  001D                     	;# 
   612  001E                     	;# 
   613  001F                     	;# 
   614  008C                     	;# 
   615  008D                     	;# 
   616  008E                     	;# 
   617  0090                     	;# 
   618  0091                     	;# 
   619  0092                     	;# 
   620  0093                     	;# 
   621  0094                     	;# 
   622  0097                     	;# 
   623  009B                     	;# 
   624  009B                     	;# 
   625  009C                     	;# 
   626  009D                     	;# 
   627  009E                     	;# 
   628  009F                     	;# 
   629  010C                     	;# 
   630  010D                     	;# 
   631  010E                     	;# 
   632  0111                     	;# 
   633  0112                     	;# 
   634  0113                     	;# 
   635  0114                     	;# 
   636  0115                     	;# 
   637  0116                     	;# 
   638  0117                     	;# 
   639  0118                     	;# 
   640  0119                     	;# 
   641  018C                     	;# 
   642  018D                     	;# 
   643  018E                     	;# 
   644  0197                     	;# 
   645  0199                     	;# 
   646  0199                     	;# 
   647  0199                     	;# 
   648  019A                     	;# 
   649  019A                     	;# 
   650  019A                     	;# 
   651  019B                     	;# 
   652  019B                     	;# 
   653  019B                     	;# 
   654  019B                     	;# 
   655  019B                     	;# 
   656  019C                     	;# 
   657  019C                     	;# 
   658  019C                     	;# 
   659  019D                     	;# 
   660  019D                     	;# 
   661  019D                     	;# 
   662  019E                     	;# 
   663  019E                     	;# 
   664  019E                     	;# 
   665  019F                     	;# 
   666  019F                     	;# 
   667  019F                     	;# 
   668  019F                     	;# 
   669  019F                     	;# 
   670  020C                     	;# 
   671  020D                     	;# 
   672  020E                     	;# 
   673  0211                     	;# 
   674  0211                     	;# 
   675  0212                     	;# 
   676  0212                     	;# 
   677  0213                     	;# 
   678  0213                     	;# 
   679  0214                     	;# 
   680  0214                     	;# 
   681  0215                     	;# 
   682  0215                     	;# 
   683  0215                     	;# 
   684  0215                     	;# 
   685  0216                     	;# 
   686  0216                     	;# 
   687  0217                     	;# 
   688  0217                     	;# 
   689  0219                     	;# 
   690  021A                     	;# 
   691  021B                     	;# 
   692  021C                     	;# 
   693  021D                     	;# 
   694  021D                     	;# 
   695  021E                     	;# 
   696  021F                     	;# 
   697  028C                     	;# 
   698  028D                     	;# 
   699  028E                     	;# 
   700  0291                     	;# 
   701  0291                     	;# 
   702  0292                     	;# 
   703  0293                     	;# 
   704  0294                     	;# 
   705  0295                     	;# 
   706  0295                     	;# 
   707  0296                     	;# 
   708  0297                     	;# 
   709  0298                     	;# 
   710  029F                     	;# 
   711  030C                     	;# 
   712  030D                     	;# 
   713  030E                     	;# 
   714  0311                     	;# 
   715  0311                     	;# 
   716  0312                     	;# 
   717  0313                     	;# 
   718  0314                     	;# 
   719  0315                     	;# 
   720  0315                     	;# 
   721  0316                     	;# 
   722  0317                     	;# 
   723  0318                     	;# 
   724  038C                     	;# 
   725  038D                     	;# 
   726  038E                     	;# 
   727  0391                     	;# 
   728  0392                     	;# 
   729  0393                     	;# 
   730  0394                     	;# 
   731  0395                     	;# 
   732  0396                     	;# 
   733  0397                     	;# 
   734  0398                     	;# 
   735  0399                     	;# 
   736  039A                     	;# 
   737  039C                     	;# 
   738  039D                     	;# 
   739  039E                     	;# 
   740  039F                     	;# 
   741  0411                     	;# 
   742  0411                     	;# 
   743  0412                     	;# 
   744  0413                     	;# 
   745  0414                     	;# 
   746  0415                     	;# 
   747  0416                     	;# 
   748  0417                     	;# 
   749  0418                     	;# 
   750  0418                     	;# 
   751  0419                     	;# 
   752  041A                     	;# 
   753  041B                     	;# 
   754  041C                     	;# 
   755  041D                     	;# 
   756  041E                     	;# 
   757  041F                     	;# 
   758  0498                     	;# 
   759  0498                     	;# 
   760  0499                     	;# 
   761  049A                     	;# 
   762  049B                     	;# 
   763  049B                     	;# 
   764  049C                     	;# 
   765  049D                     	;# 
   766  049E                     	;# 
   767  049F                     	;# 
   768  0617                     	;# 
   769  0618                     	;# 
   770  0619                     	;# 
   771  0619                     	;# 
   772  061A                     	;# 
   773  061B                     	;# 
   774  061C                     	;# 
   775  061C                     	;# 
   776  061F                     	;# 
   777  0691                     	;# 
   778  0692                     	;# 
   779  0693                     	;# 
   780  0694                     	;# 
   781  0695                     	;# 
   782  0696                     	;# 
   783  0697                     	;# 
   784  0698                     	;# 
   785  0699                     	;# 
   786  0711                     	;# 
   787  0712                     	;# 
   788  0713                     	;# 
   789  0714                     	;# 
   790  0715                     	;# 
   791  0716                     	;# 
   792  0717                     	;# 
   793  0718                     	;# 
   794  0719                     	;# 
   795  0891                     	;# 
   796  0891                     	;# 
   797  0891                     	;# 
   798  0891                     	;# 
   799  0891                     	;# 
   800  0891                     	;# 
   801  0892                     	;# 
   802  0892                     	;# 
   803  0892                     	;# 
   804  0893                     	;# 
   805  0893                     	;# 
   806  0893                     	;# 
   807  0893                     	;# 
   808  0893                     	;# 
   809  0893                     	;# 
   810  0894                     	;# 
   811  0894                     	;# 
   812  0894                     	;# 
   813  0895                     	;# 
   814  0895                     	;# 
   815  0895                     	;# 
   816  0896                     	;# 
   817  0896                     	;# 
   818  0896                     	;# 
   819  089B                     	;# 
   820  0911                     	;# 
   821  0912                     	;# 
   822  0913                     	;# 
   823  0914                     	;# 
   824  0915                     	;# 
   825  0916                     	;# 
   826  0918                     	;# 
   827  0919                     	;# 
   828  091A                     	;# 
   829  091B                     	;# 
   830  091C                     	;# 
   831  091D                     	;# 
   832  091E                     	;# 
   833  091F                     	;# 
   834  0E0F                     	;# 
   835  0E10                     	;# 
   836  0E11                     	;# 
   837  0E12                     	;# 
   838  0E13                     	;# 
   839  0E14                     	;# 
   840  0E15                     	;# 
   841  0E16                     	;# 
   842  0E17                     	;# 
   843  0E18                     	;# 
   844  0E19                     	;# 
   845  0E1A                     	;# 
   846  0E1B                     	;# 
   847  0E1C                     	;# 
   848  0E1D                     	;# 
   849  0E1E                     	;# 
   850  0E1F                     	;# 
   851  0E20                     	;# 
   852  0E21                     	;# 
   853  0E22                     	;# 
   854  0E24                     	;# 
   855  0E25                     	;# 
   856  0E28                     	;# 
   857  0E29                     	;# 
   858  0E2A                     	;# 
   859  0E2B                     	;# 
   860  0E2C                     	;# 
   861  0E2D                     	;# 
   862  0E2E                     	;# 
   863  0E2F                     	;# 
   864  0E90                     	;# 
   865  0E91                     	;# 
   866  0E92                     	;# 
   867  0E94                     	;# 
   868  0E95                     	;# 
   869  0E9C                     	;# 
   870  0E9D                     	;# 
   871  0E9E                     	;# 
   872  0E9F                     	;# 
   873  0EA0                     	;# 
   874  0EA1                     	;# 
   875  0EA2                     	;# 
   876  0EA3                     	;# 
   877  0EA4                     	;# 
   878  0EA5                     	;# 
   879  0EA6                     	;# 
   880  0EA7                     	;# 
   881  0F0F                     	;# 
   882  0F10                     	;# 
   883  0F11                     	;# 
   884  0F12                     	;# 
   885  0F13                     	;# 
   886  0F14                     	;# 
   887  0F15                     	;# 
   888  0F16                     	;# 
   889  0F17                     	;# 
   890  0F18                     	;# 
   891  0F19                     	;# 
   892  0F1A                     	;# 
   893  0F1B                     	;# 
   894  0F1C                     	;# 
   895  0F1D                     	;# 
   896  0F1E                     	;# 
   897  0F1F                     	;# 
   898  0F20                     	;# 
   899  0F21                     	;# 
   900  0F22                     	;# 
   901  0F23                     	;# 
   902  0F24                     	;# 
   903  0F25                     	;# 
   904  0F26                     	;# 
   905  0F27                     	;# 
   906  0F28                     	;# 
   907  0F29                     	;# 
   908  0F2A                     	;# 
   909  0F2B                     	;# 
   910  0F2C                     	;# 
   911  0F2D                     	;# 
   912  0F2E                     	;# 
   913  0F2F                     	;# 
   914  0F30                     	;# 
   915  0F31                     	;# 
   916  0F32                     	;# 
   917  0F33                     	;# 
   918  0F34                     	;# 
   919  0F35                     	;# 
   920  0F36                     	;# 
   921  0F37                     	;# 
   922  0FE4                     	;# 
   923  0FE5                     	;# 
   924  0FE6                     	;# 
   925  0FE7                     	;# 
   926  0FE8                     	;# 
   927  0FE9                     	;# 
   928  0FEA                     	;# 
   929  0FEB                     	;# 
   930  0FED                     	;# 
   931  0FEE                     	;# 
   932  0FEF                     	;# 
   933  0000                     	;# 
   934  0001                     	;# 
   935  0002                     	;# 
   936  0003                     	;# 
   937  0004                     	;# 
   938  0005                     	;# 
   939  0006                     	;# 
   940  0007                     	;# 
   941  0008                     	;# 
   942  0009                     	;# 
   943  000A                     	;# 
   944  000B                     	;# 
   945  000C                     	;# 
   946  000D                     	;# 
   947  000E                     	;# 
   948  0010                     	;# 
   949  0011                     	;# 
   950  0012                     	;# 
   951  0013                     	;# 
   952  0014                     	;# 
   953  0015                     	;# 
   954  0015                     	;# 
   955  0016                     	;# 
   956  0016                     	;# 
   957  0017                     	;# 
   958  0018                     	;# 
   959  0019                     	;# 
   960  0019                     	;# 
   961  001A                     	;# 
   962  001B                     	;# 
   963  001C                     	;# 
   964  001D                     	;# 
   965  001E                     	;# 
   966  001F                     	;# 
   967  008C                     	;# 
   968  008D                     	;# 
   969  008E                     	;# 
   970  0090                     	;# 
   971  0091                     	;# 
   972  0092                     	;# 
   973  0093                     	;# 
   974  0094                     	;# 
   975  0097                     	;# 
   976  009B                     	;# 
   977  009B                     	;# 
   978  009C                     	;# 
   979  009D                     	;# 
   980  009E                     	;# 
   981  009F                     	;# 
   982  010C                     	;# 
   983  010D                     	;# 
   984  010E                     	;# 
   985  0111                     	;# 
   986  0112                     	;# 
   987  0113                     	;# 
   988  0114                     	;# 
   989  0115                     	;# 
   990  0116                     	;# 
   991  0117                     	;# 
   992  0118                     	;# 
   993  0119                     	;# 
   994  018C                     	;# 
   995  018D                     	;# 
   996  018E                     	;# 
   997  0197                     	;# 
   998  0199                     	;# 
   999  0199                     	;# 
  1000  0199                     	;# 
  1001  019A                     	;# 
  1002  019A                     	;# 
  1003  019A                     	;# 
  1004  019B                     	;# 
  1005  019B                     	;# 
  1006  019B                     	;# 
  1007  019B                     	;# 
  1008  019B                     	;# 
  1009  019C                     	;# 
  1010  019C                     	;# 
  1011  019C                     	;# 
  1012  019D                     	;# 
  1013  019D                     	;# 
  1014  019D                     	;# 
  1015  019E                     	;# 
  1016  019E                     	;# 
  1017  019E                     	;# 
  1018  019F                     	;# 
  1019  019F                     	;# 
  1020  019F                     	;# 
  1021  019F                     	;# 
  1022  019F                     	;# 
  1023  020C                     	;# 
  1024  020D                     	;# 
  1025  020E                     	;# 
  1026  0211                     	;# 
  1027  0211                     	;# 
  1028  0212                     	;# 
  1029  0212                     	;# 
  1030  0213                     	;# 
  1031  0213                     	;# 
  1032  0214                     	;# 
  1033  0214                     	;# 
  1034  0215                     	;# 
  1035  0215                     	;# 
  1036  0215                     	;# 
  1037  0215                     	;# 
  1038  0216                     	;# 
  1039  0216                     	;# 
  1040  0217                     	;# 
  1041  0217                     	;# 
  1042  0219                     	;# 
  1043  021A                     	;# 
  1044  021B                     	;# 
  1045  021C                     	;# 
  1046  021D                     	;# 
  1047  021D                     	;# 
  1048  021E                     	;# 
  1049  021F                     	;# 
  1050  028C                     	;# 
  1051  028D                     	;# 
  1052  028E                     	;# 
  1053  0291                     	;# 
  1054  0291                     	;# 
  1055  0292                     	;# 
  1056  0293                     	;# 
  1057  0294                     	;# 
  1058  0295                     	;# 
  1059  0295                     	;# 
  1060  0296                     	;# 
  1061  0297                     	;# 
  1062  0298                     	;# 
  1063  029F                     	;# 
  1064  030C                     	;# 
  1065  030D                     	;# 
  1066  030E                     	;# 
  1067  0311                     	;# 
  1068  0311                     	;# 
  1069  0312                     	;# 
  1070  0313                     	;# 
  1071  0314                     	;# 
  1072  0315                     	;# 
  1073  0315                     	;# 
  1074  0316                     	;# 
  1075  0317                     	;# 
  1076  0318                     	;# 
  1077  038C                     	;# 
  1078  038D                     	;# 
  1079  038E                     	;# 
  1080  0391                     	;# 
  1081  0392                     	;# 
  1082  0393                     	;# 
  1083  0394                     	;# 
  1084  0395                     	;# 
  1085  0396                     	;# 
  1086  0397                     	;# 
  1087  0398                     	;# 
  1088  0399                     	;# 
  1089  039A                     	;# 
  1090  039C                     	;# 
  1091  039D                     	;# 
  1092  039E                     	;# 
  1093  039F                     	;# 
  1094  0411                     	;# 
  1095  0411                     	;# 
  1096  0412                     	;# 
  1097  0413                     	;# 
  1098  0414                     	;# 
  1099  0415                     	;# 
  1100  0416                     	;# 
  1101  0417                     	;# 
  1102  0418                     	;# 
  1103  0418                     	;# 
  1104  0419                     	;# 
  1105  041A                     	;# 
  1106  041B                     	;# 
  1107  041C                     	;# 
  1108  041D                     	;# 
  1109  041E                     	;# 
  1110  041F                     	;# 
  1111  0498                     	;# 
  1112  0498                     	;# 
  1113  0499                     	;# 
  1114  049A                     	;# 
  1115  049B                     	;# 
  1116  049B                     	;# 
  1117  049C                     	;# 
  1118  049D                     	;# 
  1119  049E                     	;# 
  1120  049F                     	;# 
  1121  0617                     	;# 
  1122  0618                     	;# 
  1123  0619                     	;# 
  1124  0619                     	;# 
  1125  061A                     	;# 
  1126  061B                     	;# 
  1127  061C                     	;# 
  1128  061C                     	;# 
  1129  061F                     	;# 
  1130  0691                     	;# 
  1131  0692                     	;# 
  1132  0693                     	;# 
  1133  0694                     	;# 
  1134  0695                     	;# 
  1135  0696                     	;# 
  1136  0697                     	;# 
  1137  0698                     	;# 
  1138  0699                     	;# 
  1139  0711                     	;# 
  1140  0712                     	;# 
  1141  0713                     	;# 
  1142  0714                     	;# 
  1143  0715                     	;# 
  1144  0716                     	;# 
  1145  0717                     	;# 
  1146  0718                     	;# 
  1147  0719                     	;# 
  1148  0891                     	;# 
  1149  0891                     	;# 
  1150  0891                     	;# 
  1151  0891                     	;# 
  1152  0891                     	;# 
  1153  0891                     	;# 
  1154  0892                     	;# 
  1155  0892                     	;# 
  1156  0892                     	;# 
  1157  0893                     	;# 
  1158  0893                     	;# 
  1159  0893                     	;# 
  1160  0893                     	;# 
  1161  0893                     	;# 
  1162  0893                     	;# 
  1163  0894                     	;# 
  1164  0894                     	;# 
  1165  0894                     	;# 
  1166  0895                     	;# 
  1167  0895                     	;# 
  1168  0895                     	;# 
  1169  0896                     	;# 
  1170  0896                     	;# 
  1171  0896                     	;# 
  1172  089B                     	;# 
  1173  0911                     	;# 
  1174  0912                     	;# 
  1175  0913                     	;# 
  1176  0914                     	;# 
  1177  0915                     	;# 
  1178  0916                     	;# 
  1179  0918                     	;# 
  1180  0919                     	;# 
  1181  091A                     	;# 
  1182  091B                     	;# 
  1183  091C                     	;# 
  1184  091D                     	;# 
  1185  091E                     	;# 
  1186  091F                     	;# 
  1187  0E0F                     	;# 
  1188  0E10                     	;# 
  1189  0E11                     	;# 
  1190  0E12                     	;# 
  1191  0E13                     	;# 
  1192  0E14                     	;# 
  1193  0E15                     	;# 
  1194  0E16                     	;# 
  1195  0E17                     	;# 
  1196  0E18                     	;# 
  1197  0E19                     	;# 
  1198  0E1A                     	;# 
  1199  0E1B                     	;# 
  1200  0E1C                     	;# 
  1201  0E1D                     	;# 
  1202  0E1E                     	;# 
  1203  0E1F                     	;# 
  1204  0E20                     	;# 
  1205  0E21                     	;# 
  1206  0E22                     	;# 
  1207  0E24                     	;# 
  1208  0E25                     	;# 
  1209  0E28                     	;# 
  1210  0E29                     	;# 
  1211  0E2A                     	;# 
  1212  0E2B                     	;# 
  1213  0E2C                     	;# 
  1214  0E2D                     	;# 
  1215  0E2E                     	;# 
  1216  0E2F                     	;# 
  1217  0E90                     	;# 
  1218  0E91                     	;# 
  1219  0E92                     	;# 
  1220  0E94                     	;# 
  1221  0E95                     	;# 
  1222  0E9C                     	;# 
  1223  0E9D                     	;# 
  1224  0E9E                     	;# 
  1225  0E9F                     	;# 
  1226  0EA0                     	;# 
  1227  0EA1                     	;# 
  1228  0EA2                     	;# 
  1229  0EA3                     	;# 
  1230  0EA4                     	;# 
  1231  0EA5                     	;# 
  1232  0EA6                     	;# 
  1233  0EA7                     	;# 
  1234  0F0F                     	;# 
  1235  0F10                     	;# 
  1236  0F11                     	;# 
  1237  0F12                     	;# 
  1238  0F13                     	;# 
  1239  0F14                     	;# 
  1240  0F15                     	;# 
  1241  0F16                     	;# 
  1242  0F17                     	;# 
  1243  0F18                     	;# 
  1244  0F19                     	;# 
  1245  0F1A                     	;# 
  1246  0F1B                     	;# 
  1247  0F1C                     	;# 
  1248  0F1D                     	;# 
  1249  0F1E                     	;# 
  1250  0F1F                     	;# 
  1251  0F20                     	;# 
  1252  0F21                     	;# 
  1253  0F22                     	;# 
  1254  0F23                     	;# 
  1255  0F24                     	;# 
  1256  0F25                     	;# 
  1257  0F26                     	;# 
  1258  0F27                     	;# 
  1259  0F28                     	;# 
  1260  0F29                     	;# 
  1261  0F2A                     	;# 
  1262  0F2B                     	;# 
  1263  0F2C                     	;# 
  1264  0F2D                     	;# 
  1265  0F2E                     	;# 
  1266  0F2F                     	;# 
  1267  0F30                     	;# 
  1268  0F31                     	;# 
  1269  0F32                     	;# 
  1270  0F33                     	;# 
  1271  0F34                     	;# 
  1272  0F35                     	;# 
  1273  0F36                     	;# 
  1274  0F37                     	;# 
  1275  0FE4                     	;# 
  1276  0FE5                     	;# 
  1277  0FE6                     	;# 
  1278  0FE7                     	;# 
  1279  0FE8                     	;# 
  1280  0FE9                     	;# 
  1281  0FEA                     	;# 
  1282  0FEB                     	;# 
  1283  0FED                     	;# 
  1284  0FEE                     	;# 
  1285  0FEF                     	;# 
  1286  0000                     	;# 
  1287  0001                     	;# 
  1288  0002                     	;# 
  1289  0003                     	;# 
  1290  0004                     	;# 
  1291  0005                     	;# 
  1292  0006                     	;# 
  1293  0007                     	;# 
  1294  0008                     	;# 
  1295  0009                     	;# 
  1296  000A                     	;# 
  1297  000B                     	;# 
  1298  000C                     	;# 
  1299  000D                     	;# 
  1300  000E                     	;# 
  1301  0010                     	;# 
  1302  0011                     	;# 
  1303  0012                     	;# 
  1304  0013                     	;# 
  1305  0014                     	;# 
  1306  0015                     	;# 
  1307  0015                     	;# 
  1308  0016                     	;# 
  1309  0016                     	;# 
  1310  0017                     	;# 
  1311  0018                     	;# 
  1312  0019                     	;# 
  1313  0019                     	;# 
  1314  001A                     	;# 
  1315  001B                     	;# 
  1316  001C                     	;# 
  1317  001D                     	;# 
  1318  001E                     	;# 
  1319  001F                     	;# 
  1320  008C                     	;# 
  1321  008D                     	;# 
  1322  008E                     	;# 
  1323  0090                     	;# 
  1324  0091                     	;# 
  1325  0092                     	;# 
  1326  0093                     	;# 
  1327  0094                     	;# 
  1328  0097                     	;# 
  1329  009B                     	;# 
  1330  009B                     	;# 
  1331  009C                     	;# 
  1332  009D                     	;# 
  1333  009E                     	;# 
  1334  009F                     	;# 
  1335  010C                     	;# 
  1336  010D                     	;# 
  1337  010E                     	;# 
  1338  0111                     	;# 
  1339  0112                     	;# 
  1340  0113                     	;# 
  1341  0114                     	;# 
  1342  0115                     	;# 
  1343  0116                     	;# 
  1344  0117                     	;# 
  1345  0118                     	;# 
  1346  0119                     	;# 
  1347  018C                     	;# 
  1348  018D                     	;# 
  1349  018E                     	;# 
  1350  0197                     	;# 
  1351  0199                     	;# 
  1352  0199                     	;# 
  1353  0199                     	;# 
  1354  019A                     	;# 
  1355  019A                     	;# 
  1356  019A                     	;# 
  1357  019B                     	;# 
  1358  019B                     	;# 
  1359  019B                     	;# 
  1360  019B                     	;# 
  1361  019B                     	;# 
  1362  019C                     	;# 
  1363  019C                     	;# 
  1364  019C                     	;# 
  1365  019D                     	;# 
  1366  019D                     	;# 
  1367  019D                     	;# 
  1368  019E                     	;# 
  1369  019E                     	;# 
  1370  019E                     	;# 
  1371  019F                     	;# 
  1372  019F                     	;# 
  1373  019F                     	;# 
  1374  019F                     	;# 
  1375  019F                     	;# 
  1376  020C                     	;# 
  1377  020D                     	;# 
  1378  020E                     	;# 
  1379  0211                     	;# 
  1380  0211                     	;# 
  1381  0212                     	;# 
  1382  0212                     	;# 
  1383  0213                     	;# 
  1384  0213                     	;# 
  1385  0214                     	;# 
  1386  0214                     	;# 
  1387  0215                     	;# 
  1388  0215                     	;# 
  1389  0215                     	;# 
  1390  0215                     	;# 
  1391  0216                     	;# 
  1392  0216                     	;# 
  1393  0217                     	;# 
  1394  0217                     	;# 
  1395  0219                     	;# 
  1396  021A                     	;# 
  1397  021B                     	;# 
  1398  021C                     	;# 
  1399  021D                     	;# 
  1400  021D                     	;# 
  1401  021E                     	;# 
  1402  021F                     	;# 
  1403  028C                     	;# 
  1404  028D                     	;# 
  1405  028E                     	;# 
  1406  0291                     	;# 
  1407  0291                     	;# 
  1408  0292                     	;# 
  1409  0293                     	;# 
  1410  0294                     	;# 
  1411  0295                     	;# 
  1412  0295                     	;# 
  1413  0296                     	;# 
  1414  0297                     	;# 
  1415  0298                     	;# 
  1416  029F                     	;# 
  1417  030C                     	;# 
  1418  030D                     	;# 
  1419  030E                     	;# 
  1420  0311                     	;# 
  1421  0311                     	;# 
  1422  0312                     	;# 
  1423  0313                     	;# 
  1424  0314                     	;# 
  1425  0315                     	;# 
  1426  0315                     	;# 
  1427  0316                     	;# 
  1428  0317                     	;# 
  1429  0318                     	;# 
  1430  038C                     	;# 
  1431  038D                     	;# 
  1432  038E                     	;# 
  1433  0391                     	;# 
  1434  0392                     	;# 
  1435  0393                     	;# 
  1436  0394                     	;# 
  1437  0395                     	;# 
  1438  0396                     	;# 
  1439  0397                     	;# 
  1440  0398                     	;# 
  1441  0399                     	;# 
  1442  039A                     	;# 
  1443  039C                     	;# 
  1444  039D                     	;# 
  1445  039E                     	;# 
  1446  039F                     	;# 
  1447  0411                     	;# 
  1448  0411                     	;# 
  1449  0412                     	;# 
  1450  0413                     	;# 
  1451  0414                     	;# 
  1452  0415                     	;# 
  1453  0416                     	;# 
  1454  0417                     	;# 
  1455  0418                     	;# 
  1456  0418                     	;# 
  1457  0419                     	;# 
  1458  041A                     	;# 
  1459  041B                     	;# 
  1460  041C                     	;# 
  1461  041D                     	;# 
  1462  041E                     	;# 
  1463  041F                     	;# 
  1464  0498                     	;# 
  1465  0498                     	;# 
  1466  0499                     	;# 
  1467  049A                     	;# 
  1468  049B                     	;# 
  1469  049B                     	;# 
  1470  049C                     	;# 
  1471  049D                     	;# 
  1472  049E                     	;# 
  1473  049F                     	;# 
  1474  0617                     	;# 
  1475  0618                     	;# 
  1476  0619                     	;# 
  1477  0619                     	;# 
  1478  061A                     	;# 
  1479  061B                     	;# 
  1480  061C                     	;# 
  1481  061C                     	;# 
  1482  061F                     	;# 
  1483  0691                     	;# 
  1484  0692                     	;# 
  1485  0693                     	;# 
  1486  0694                     	;# 
  1487  0695                     	;# 
  1488  0696                     	;# 
  1489  0697                     	;# 
  1490  0698                     	;# 
  1491  0699                     	;# 
  1492  0711                     	;# 
  1493  0712                     	;# 
  1494  0713                     	;# 
  1495  0714                     	;# 
  1496  0715                     	;# 
  1497  0716                     	;# 
  1498  0717                     	;# 
  1499  0718                     	;# 
  1500  0719                     	;# 
  1501  0891                     	;# 
  1502  0891                     	;# 
  1503  0891                     	;# 
  1504  0891                     	;# 
  1505  0891                     	;# 
  1506  0891                     	;# 
  1507  0892                     	;# 
  1508  0892                     	;# 
  1509  0892                     	;# 
  1510  0893                     	;# 
  1511  0893                     	;# 
  1512  0893                     	;# 
  1513  0893                     	;# 
  1514  0893                     	;# 
  1515  0893                     	;# 
  1516  0894                     	;# 
  1517  0894                     	;# 
  1518  0894                     	;# 
  1519  0895                     	;# 
  1520  0895                     	;# 
  1521  0895                     	;# 
  1522  0896                     	;# 
  1523  0896                     	;# 
  1524  0896                     	;# 
  1525  089B                     	;# 
  1526  0911                     	;# 
  1527  0912                     	;# 
  1528  0913                     	;# 
  1529  0914                     	;# 
  1530  0915                     	;# 
  1531  0916                     	;# 
  1532  0918                     	;# 
  1533  0919                     	;# 
  1534  091A                     	;# 
  1535  091B                     	;# 
  1536  091C                     	;# 
  1537  091D                     	;# 
  1538  091E                     	;# 
  1539  091F                     	;# 
  1540  0E0F                     	;# 
  1541  0E10                     	;# 
  1542  0E11                     	;# 
  1543  0E12                     	;# 
  1544  0E13                     	;# 
  1545  0E14                     	;# 
  1546  0E15                     	;# 
  1547  0E16                     	;# 
  1548  0E17                     	;# 
  1549  0E18                     	;# 
  1550  0E19                     	;# 
  1551  0E1A                     	;# 
  1552  0E1B                     	;# 
  1553  0E1C                     	;# 
  1554  0E1D                     	;# 
  1555  0E1E                     	;# 
  1556  0E1F                     	;# 
  1557  0E20                     	;# 
  1558  0E21                     	;# 
  1559  0E22                     	;# 
  1560  0E24                     	;# 
  1561  0E25                     	;# 
  1562  0E28                     	;# 
  1563  0E29                     	;# 
  1564  0E2A                     	;# 
  1565  0E2B                     	;# 
  1566  0E2C                     	;# 
  1567  0E2D                     	;# 
  1568  0E2E                     	;# 
  1569  0E2F                     	;# 
  1570  0E90                     	;# 
  1571  0E91                     	;# 
  1572  0E92                     	;# 
  1573  0E94                     	;# 
  1574  0E95                     	;# 
  1575  0E9C                     	;# 
  1576  0E9D                     	;# 
  1577  0E9E                     	;# 
  1578  0E9F                     	;# 
  1579  0EA0                     	;# 
  1580  0EA1                     	;# 
  1581  0EA2                     	;# 
  1582  0EA3                     	;# 
  1583  0EA4                     	;# 
  1584  0EA5                     	;# 
  1585  0EA6                     	;# 
  1586  0EA7                     	;# 
  1587  0F0F                     	;# 
  1588  0F10                     	;# 
  1589  0F11                     	;# 
  1590  0F12                     	;# 
  1591  0F13                     	;# 
  1592  0F14                     	;# 
  1593  0F15                     	;# 
  1594  0F16                     	;# 
  1595  0F17                     	;# 
  1596  0F18                     	;# 
  1597  0F19                     	;# 
  1598  0F1A                     	;# 
  1599  0F1B                     	;# 
  1600  0F1C                     	;# 
  1601  0F1D                     	;# 
  1602  0F1E                     	;# 
  1603  0F1F                     	;# 
  1604  0F20                     	;# 
  1605  0F21                     	;# 
  1606  0F22                     	;# 
  1607  0F23                     	;# 
  1608  0F24                     	;# 
  1609  0F25                     	;# 
  1610  0F26                     	;# 
  1611  0F27                     	;# 
  1612  0F28                     	;# 
  1613  0F29                     	;# 
  1614  0F2A                     	;# 
  1615  0F2B                     	;# 
  1616  0F2C                     	;# 
  1617  0F2D                     	;# 
  1618  0F2E                     	;# 
  1619  0F2F                     	;# 
  1620  0F30                     	;# 
  1621  0F31                     	;# 
  1622  0F32                     	;# 
  1623  0F33                     	;# 
  1624  0F34                     	;# 
  1625  0F35                     	;# 
  1626  0F36                     	;# 
  1627  0F37                     	;# 
  1628  0FE4                     	;# 
  1629  0FE5                     	;# 
  1630  0FE6                     	;# 
  1631  0FE7                     	;# 
  1632  0FE8                     	;# 
  1633  0FE9                     	;# 
  1634  0FEA                     	;# 
  1635  0FEB                     	;# 
  1636  0FED                     	;# 
  1637  0FEE                     	;# 
  1638  0FEF                     	;# 
  1639  0000                     	;# 
  1640  0001                     	;# 
  1641  0002                     	;# 
  1642  0003                     	;# 
  1643  0004                     	;# 
  1644  0005                     	;# 
  1645  0006                     	;# 
  1646  0007                     	;# 
  1647  0008                     	;# 
  1648  0009                     	;# 
  1649  000A                     	;# 
  1650  000B                     	;# 
  1651  000C                     	;# 
  1652  000D                     	;# 
  1653  000E                     	;# 
  1654  0010                     	;# 
  1655  0011                     	;# 
  1656  0012                     	;# 
  1657  0013                     	;# 
  1658  0014                     	;# 
  1659  0015                     	;# 
  1660  0015                     	;# 
  1661  0016                     	;# 
  1662  0016                     	;# 
  1663  0017                     	;# 
  1664  0018                     	;# 
  1665  0019                     	;# 
  1666  0019                     	;# 
  1667  001A                     	;# 
  1668  001B                     	;# 
  1669  001C                     	;# 
  1670  001D                     	;# 
  1671  001E                     	;# 
  1672  001F                     	;# 
  1673  008C                     	;# 
  1674  008D                     	;# 
  1675  008E                     	;# 
  1676  0090                     	;# 
  1677  0091                     	;# 
  1678  0092                     	;# 
  1679  0093                     	;# 
  1680  0094                     	;# 
  1681  0097                     	;# 
  1682  009B                     	;# 
  1683  009B                     	;# 
  1684  009C                     	;# 
  1685  009D                     	;# 
  1686  009E                     	;# 
  1687  009F                     	;# 
  1688  010C                     	;# 
  1689  010D                     	;# 
  1690  010E                     	;# 
  1691  0111                     	;# 
  1692  0112                     	;# 
  1693  0113                     	;# 
  1694  0114                     	;# 
  1695  0115                     	;# 
  1696  0116                     	;# 
  1697  0117                     	;# 
  1698  0118                     	;# 
  1699  0119                     	;# 
  1700  018C                     	;# 
  1701  018D                     	;# 
  1702  018E                     	;# 
  1703  0197                     	;# 
  1704  0199                     	;# 
  1705  0199                     	;# 
  1706  0199                     	;# 
  1707  019A                     	;# 
  1708  019A                     	;# 
  1709  019A                     	;# 
  1710  019B                     	;# 
  1711  019B                     	;# 
  1712  019B                     	;# 
  1713  019B                     	;# 
  1714  019B                     	;# 
  1715  019C                     	;# 
  1716  019C                     	;# 
  1717  019C                     	;# 
  1718  019D                     	;# 
  1719  019D                     	;# 
  1720  019D                     	;# 
  1721  019E                     	;# 
  1722  019E                     	;# 
  1723  019E                     	;# 
  1724  019F                     	;# 
  1725  019F                     	;# 
  1726  019F                     	;# 
  1727  019F                     	;# 
  1728  019F                     	;# 
  1729  020C                     	;# 
  1730  020D                     	;# 
  1731  020E                     	;# 
  1732  0211                     	;# 
  1733  0211                     	;# 
  1734  0212                     	;# 
  1735  0212                     	;# 
  1736  0213                     	;# 
  1737  0213                     	;# 
  1738  0214                     	;# 
  1739  0214                     	;# 
  1740  0215                     	;# 
  1741  0215                     	;# 
  1742  0215                     	;# 
  1743  0215                     	;# 
  1744  0216                     	;# 
  1745  0216                     	;# 
  1746  0217                     	;# 
  1747  0217                     	;# 
  1748  0219                     	;# 
  1749  021A                     	;# 
  1750  021B                     	;# 
  1751  021C                     	;# 
  1752  021D                     	;# 
  1753  021D                     	;# 
  1754  021E                     	;# 
  1755  021F                     	;# 
  1756  028C                     	;# 
  1757  028D                     	;# 
  1758  028E                     	;# 
  1759  0291                     	;# 
  1760  0291                     	;# 
  1761  0292                     	;# 
  1762  0293                     	;# 
  1763  0294                     	;# 
  1764  0295                     	;# 
  1765  0295                     	;# 
  1766  0296                     	;# 
  1767  0297                     	;# 
  1768  0298                     	;# 
  1769  029F                     	;# 
  1770  030C                     	;# 
  1771  030D                     	;# 
  1772  030E                     	;# 
  1773  0311                     	;# 
  1774  0311                     	;# 
  1775  0312                     	;# 
  1776  0313                     	;# 
  1777  0314                     	;# 
  1778  0315                     	;# 
  1779  0315                     	;# 
  1780  0316                     	;# 
  1781  0317                     	;# 
  1782  0318                     	;# 
  1783  038C                     	;# 
  1784  038D                     	;# 
  1785  038E                     	;# 
  1786  0391                     	;# 
  1787  0392                     	;# 
  1788  0393                     	;# 
  1789  0394                     	;# 
  1790  0395                     	;# 
  1791  0396                     	;# 
  1792  0397                     	;# 
  1793  0398                     	;# 
  1794  0399                     	;# 
  1795  039A                     	;# 
  1796  039C                     	;# 
  1797  039D                     	;# 
  1798  039E                     	;# 
  1799  039F                     	;# 
  1800  0411                     	;# 
  1801  0411                     	;# 
  1802  0412                     	;# 
  1803  0413                     	;# 
  1804  0414                     	;# 
  1805  0415                     	;# 
  1806  0416                     	;# 
  1807  0417                     	;# 
  1808  0418                     	;# 
  1809  0418                     	;# 
  1810  0419                     	;# 
  1811  041A                     	;# 
  1812  041B                     	;# 
  1813  041C                     	;# 
  1814  041D                     	;# 
  1815  041E                     	;# 
  1816  041F                     	;# 
  1817  0498                     	;# 
  1818  0498                     	;# 
  1819  0499                     	;# 
  1820  049A                     	;# 
  1821  049B                     	;# 
  1822  049B                     	;# 
  1823  049C                     	;# 
  1824  049D                     	;# 
  1825  049E                     	;# 
  1826  049F                     	;# 
  1827  0617                     	;# 
  1828  0618                     	;# 
  1829  0619                     	;# 
  1830  0619                     	;# 
  1831  061A                     	;# 
  1832  061B                     	;# 
  1833  061C                     	;# 
  1834  061C                     	;# 
  1835  061F                     	;# 
  1836  0691                     	;# 
  1837  0692                     	;# 
  1838  0693                     	;# 
  1839  0694                     	;# 
  1840  0695                     	;# 
  1841  0696                     	;# 
  1842  0697                     	;# 
  1843  0698                     	;# 
  1844  0699                     	;# 
  1845  0711                     	;# 
  1846  0712                     	;# 
  1847  0713                     	;# 
  1848  0714                     	;# 
  1849  0715                     	;# 
  1850  0716                     	;# 
  1851  0717                     	;# 
  1852  0718                     	;# 
  1853  0719                     	;# 
  1854  0891                     	;# 
  1855  0891                     	;# 
  1856  0891                     	;# 
  1857  0891                     	;# 
  1858  0891                     	;# 
  1859  0891                     	;# 
  1860  0892                     	;# 
  1861  0892                     	;# 
  1862  0892                     	;# 
  1863  0893                     	;# 
  1864  0893                     	;# 
  1865  0893                     	;# 
  1866  0893                     	;# 
  1867  0893                     	;# 
  1868  0893                     	;# 
  1869  0894                     	;# 
  1870  0894                     	;# 
  1871  0894                     	;# 
  1872  0895                     	;# 
  1873  0895                     	;# 
  1874  0895                     	;# 
  1875  0896                     	;# 
  1876  0896                     	;# 
  1877  0896                     	;# 
  1878  089B                     	;# 
  1879  0911                     	;# 
  1880  0912                     	;# 
  1881  0913                     	;# 
  1882  0914                     	;# 
  1883  0915                     	;# 
  1884  0916                     	;# 
  1885  0918                     	;# 
  1886  0919                     	;# 
  1887  091A                     	;# 
  1888  091B                     	;# 
  1889  091C                     	;# 
  1890  091D                     	;# 
  1891  091E                     	;# 
  1892  091F                     	;# 
  1893  0E0F                     	;# 
  1894  0E10                     	;# 
  1895  0E11                     	;# 
  1896  0E12                     	;# 
  1897  0E13                     	;# 
  1898  0E14                     	;# 
  1899  0E15                     	;# 
  1900  0E16                     	;# 
  1901  0E17                     	;# 
  1902  0E18                     	;# 
  1903  0E19                     	;# 
  1904  0E1A                     	;# 
  1905  0E1B                     	;# 
  1906  0E1C                     	;# 
  1907  0E1D                     	;# 
  1908  0E1E                     	;# 
  1909  0E1F                     	;# 
  1910  0E20                     	;# 
  1911  0E21                     	;# 
  1912  0E22                     	;# 
  1913  0E24                     	;# 
  1914  0E25                     	;# 
  1915  0E28                     	;# 
  1916  0E29                     	;# 
  1917  0E2A                     	;# 
  1918  0E2B                     	;# 
  1919  0E2C                     	;# 
  1920  0E2D                     	;# 
  1921  0E2E                     	;# 
  1922  0E2F                     	;# 
  1923  0E90                     	;# 
  1924  0E91                     	;# 
  1925  0E92                     	;# 
  1926  0E94                     	;# 
  1927  0E95                     	;# 
  1928  0E9C                     	;# 
  1929  0E9D                     	;# 
  1930  0E9E                     	;# 
  1931  0E9F                     	;# 
  1932  0EA0                     	;# 
  1933  0EA1                     	;# 
  1934  0EA2                     	;# 
  1935  0EA3                     	;# 
  1936  0EA4                     	;# 
  1937  0EA5                     	;# 
  1938  0EA6                     	;# 
  1939  0EA7                     	;# 
  1940  0F0F                     	;# 
  1941  0F10                     	;# 
  1942  0F11                     	;# 
  1943  0F12                     	;# 
  1944  0F13                     	;# 
  1945  0F14                     	;# 
  1946  0F15                     	;# 
  1947  0F16                     	;# 
  1948  0F17                     	;# 
  1949  0F18                     	;# 
  1950  0F19                     	;# 
  1951  0F1A                     	;# 
  1952  0F1B                     	;# 
  1953  0F1C                     	;# 
  1954  0F1D                     	;# 
  1955  0F1E                     	;# 
  1956  0F1F                     	;# 
  1957  0F20                     	;# 
  1958  0F21                     	;# 
  1959  0F22                     	;# 
  1960  0F23                     	;# 
  1961  0F24                     	;# 
  1962  0F25                     	;# 
  1963  0F26                     	;# 
  1964  0F27                     	;# 
  1965  0F28                     	;# 
  1966  0F29                     	;# 
  1967  0F2A                     	;# 
  1968  0F2B                     	;# 
  1969  0F2C                     	;# 
  1970  0F2D                     	;# 
  1971  0F2E                     	;# 
  1972  0F2F                     	;# 
  1973  0F30                     	;# 
  1974  0F31                     	;# 
  1975  0F32                     	;# 
  1976  0F33                     	;# 
  1977  0F34                     	;# 
  1978  0F35                     	;# 
  1979  0F36                     	;# 
  1980  0F37                     	;# 
  1981  0FE4                     	;# 
  1982  0FE5                     	;# 
  1983  0FE6                     	;# 
  1984  0FE7                     	;# 
  1985  0FE8                     	;# 
  1986  0FE9                     	;# 
  1987  0FEA                     	;# 
  1988  0FEB                     	;# 
  1989  0FED                     	;# 
  1990  0FEE                     	;# 
  1991  0FEF                     	;# 
  1992  0000                     	;# 
  1993  0001                     	;# 
  1994  0002                     	;# 
  1995  0003                     	;# 
  1996  0004                     	;# 
  1997  0005                     	;# 
  1998  0006                     	;# 
  1999  0007                     	;# 
  2000  0008                     	;# 
  2001  0009                     	;# 
  2002  000A                     	;# 
  2003  000B                     	;# 
  2004  000C                     	;# 
  2005  000D                     	;# 
  2006  000E                     	;# 
  2007  0010                     	;# 
  2008  0011                     	;# 
  2009  0012                     	;# 
  2010  0013                     	;# 
  2011  0014                     	;# 
  2012  0015                     	;# 
  2013  0015                     	;# 
  2014  0016                     	;# 
  2015  0016                     	;# 
  2016  0017                     	;# 
  2017  0018                     	;# 
  2018  0019                     	;# 
  2019  0019                     	;# 
  2020  001A                     	;# 
  2021  001B                     	;# 
  2022  001C                     	;# 
  2023  001D                     	;# 
  2024  001E                     	;# 
  2025  001F                     	;# 
  2026  008C                     	;# 
  2027  008D                     	;# 
  2028  008E                     	;# 
  2029  0090                     	;# 
  2030  0091                     	;# 
  2031  0092                     	;# 
  2032  0093                     	;# 
  2033  0094                     	;# 
  2034  0097                     	;# 
  2035  009B                     	;# 
  2036  009B                     	;# 
  2037  009C                     	;# 
  2038  009D                     	;# 
  2039  009E                     	;# 
  2040  009F                     	;# 
  2041  010C                     	;# 
  2042  010D                     	;# 
  2043  010E                     	;# 
  2044  0111                     	;# 
  2045  0112                     	;# 
  2046  0113                     	;# 
  2047  0114                     	;# 
  2048  0115                     	;# 
  2049  0116                     	;# 
  2050  0117                     	;# 
  2051  0118                     	;# 
  2052  0119                     	;# 
  2053  018C                     	;# 
  2054  018D                     	;# 
  2055  018E                     	;# 
  2056  0197                     	;# 
  2057  0199                     	;# 
  2058  0199                     	;# 
  2059  0199                     	;# 
  2060  019A                     	;# 
  2061  019A                     	;# 
  2062  019A                     	;# 
  2063  019B                     	;# 
  2064  019B                     	;# 
  2065  019B                     	;# 
  2066  019B                     	;# 
  2067  019B                     	;# 
  2068  019C                     	;# 
  2069  019C                     	;# 
  2070  019C                     	;# 
  2071  019D                     	;# 
  2072  019D                     	;# 
  2073  019D                     	;# 
  2074  019E                     	;# 
  2075  019E                     	;# 
  2076  019E                     	;# 
  2077  019F                     	;# 
  2078  019F                     	;# 
  2079  019F                     	;# 
  2080  019F                     	;# 
  2081  019F                     	;# 
  2082  020C                     	;# 
  2083  020D                     	;# 
  2084  020E                     	;# 
  2085  0211                     	;# 
  2086  0211                     	;# 
  2087  0212                     	;# 
  2088  0212                     	;# 
  2089  0213                     	;# 
  2090  0213                     	;# 
  2091  0214                     	;# 
  2092  0214                     	;# 
  2093  0215                     	;# 
  2094  0215                     	;# 
  2095  0215                     	;# 
  2096  0215                     	;# 
  2097  0216                     	;# 
  2098  0216                     	;# 
  2099  0217                     	;# 
  2100  0217                     	;# 
  2101  0219                     	;# 
  2102  021A                     	;# 
  2103  021B                     	;# 
  2104  021C                     	;# 
  2105  021D                     	;# 
  2106  021D                     	;# 
  2107  021E                     	;# 
  2108  021F                     	;# 
  2109  028C                     	;# 
  2110  028D                     	;# 
  2111  028E                     	;# 
  2112  0291                     	;# 
  2113  0291                     	;# 
  2114  0292                     	;# 
  2115  0293                     	;# 
  2116  0294                     	;# 
  2117  0295                     	;# 
  2118  0295                     	;# 
  2119  0296                     	;# 
  2120  0297                     	;# 
  2121  0298                     	;# 
  2122  029F                     	;# 
  2123  030C                     	;# 
  2124  030D                     	;# 
  2125  030E                     	;# 
  2126  0311                     	;# 
  2127  0311                     	;# 
  2128  0312                     	;# 
  2129  0313                     	;# 
  2130  0314                     	;# 
  2131  0315                     	;# 
  2132  0315                     	;# 
  2133  0316                     	;# 
  2134  0317                     	;# 
  2135  0318                     	;# 
  2136  038C                     	;# 
  2137  038D                     	;# 
  2138  038E                     	;# 
  2139  0391                     	;# 
  2140  0392                     	;# 
  2141  0393                     	;# 
  2142  0394                     	;# 
  2143  0395                     	;# 
  2144  0396                     	;# 
  2145  0397                     	;# 
  2146  0398                     	;# 
  2147  0399                     	;# 
  2148  039A                     	;# 
  2149  039C                     	;# 
  2150  039D                     	;# 
  2151  039E                     	;# 
  2152  039F                     	;# 
  2153  0411                     	;# 
  2154  0411                     	;# 
  2155  0412                     	;# 
  2156  0413                     	;# 
  2157  0414                     	;# 
  2158  0415                     	;# 
  2159  0416                     	;# 
  2160  0417                     	;# 
  2161  0418                     	;# 
  2162  0418                     	;# 
  2163  0419                     	;# 
  2164  041A                     	;# 
  2165  041B                     	;# 
  2166  041C                     	;# 
  2167  041D                     	;# 
  2168  041E                     	;# 
  2169  041F                     	;# 
  2170  0498                     	;# 
  2171  0498                     	;# 
  2172  0499                     	;# 
  2173  049A                     	;# 
  2174  049B                     	;# 
  2175  049B                     	;# 
  2176  049C                     	;# 
  2177  049D                     	;# 
  2178  049E                     	;# 
  2179  049F                     	;# 
  2180  0617                     	;# 
  2181  0618                     	;# 
  2182  0619                     	;# 
  2183  0619                     	;# 
  2184  061A                     	;# 
  2185  061B                     	;# 
  2186  061C                     	;# 
  2187  061C                     	;# 
  2188  061F                     	;# 
  2189  0691                     	;# 
  2190  0692                     	;# 
  2191  0693                     	;# 
  2192  0694                     	;# 
  2193  0695                     	;# 
  2194  0696                     	;# 
  2195  0697                     	;# 
  2196  0698                     	;# 
  2197  0699                     	;# 
  2198  0711                     	;# 
  2199  0712                     	;# 
  2200  0713                     	;# 
  2201  0714                     	;# 
  2202  0715                     	;# 
  2203  0716                     	;# 
  2204  0717                     	;# 
  2205  0718                     	;# 
  2206  0719                     	;# 
  2207  0891                     	;# 
  2208  0891                     	;# 
  2209  0891                     	;# 
  2210  0891                     	;# 
  2211  0891                     	;# 
  2212  0891                     	;# 
  2213  0892                     	;# 
  2214  0892                     	;# 
  2215  0892                     	;# 
  2216  0893                     	;# 
  2217  0893                     	;# 
  2218  0893                     	;# 
  2219  0893                     	;# 
  2220  0893                     	;# 
  2221  0893                     	;# 
  2222  0894                     	;# 
  2223  0894                     	;# 
  2224  0894                     	;# 
  2225  0895                     	;# 
  2226  0895                     	;# 
  2227  0895                     	;# 
  2228  0896                     	;# 
  2229  0896                     	;# 
  2230  0896                     	;# 
  2231  089B                     	;# 
  2232  0911                     	;# 
  2233  0912                     	;# 
  2234  0913                     	;# 
  2235  0914                     	;# 
  2236  0915                     	;# 
  2237  0916                     	;# 
  2238  0918                     	;# 
  2239  0919                     	;# 
  2240  091A                     	;# 
  2241  091B                     	;# 
  2242  091C                     	;# 
  2243  091D                     	;# 
  2244  091E                     	;# 
  2245  091F                     	;# 
  2246  0E0F                     	;# 
  2247  0E10                     	;# 
  2248  0E11                     	;# 
  2249  0E12                     	;# 
  2250  0E13                     	;# 
  2251  0E14                     	;# 
  2252  0E15                     	;# 
  2253  0E16                     	;# 
  2254  0E17                     	;# 
  2255  0E18                     	;# 
  2256  0E19                     	;# 
  2257  0E1A                     	;# 
  2258  0E1B                     	;# 
  2259  0E1C                     	;# 
  2260  0E1D                     	;# 
  2261  0E1E                     	;# 
  2262  0E1F                     	;# 
  2263  0E20                     	;# 
  2264  0E21                     	;# 
  2265  0E22                     	;# 
  2266  0E24                     	;# 
  2267  0E25                     	;# 
  2268  0E28                     	;# 
  2269  0E29                     	;# 
  2270  0E2A                     	;# 
  2271  0E2B                     	;# 
  2272  0E2C                     	;# 
  2273  0E2D                     	;# 
  2274  0E2E                     	;# 
  2275  0E2F                     	;# 
  2276  0E90                     	;# 
  2277  0E91                     	;# 
  2278  0E92                     	;# 
  2279  0E94                     	;# 
  2280  0E95                     	;# 
  2281  0E9C                     	;# 
  2282  0E9D                     	;# 
  2283  0E9E                     	;# 
  2284  0E9F                     	;# 
  2285  0EA0                     	;# 
  2286  0EA1                     	;# 
  2287  0EA2                     	;# 
  2288  0EA3                     	;# 
  2289  0EA4                     	;# 
  2290  0EA5                     	;# 
  2291  0EA6                     	;# 
  2292  0EA7                     	;# 
  2293  0F0F                     	;# 
  2294  0F10                     	;# 
  2295  0F11                     	;# 
  2296  0F12                     	;# 
  2297  0F13                     	;# 
  2298  0F14                     	;# 
  2299  0F15                     	;# 
  2300  0F16                     	;# 
  2301  0F17                     	;# 
  2302  0F18                     	;# 
  2303  0F19                     	;# 
  2304  0F1A                     	;# 
  2305  0F1B                     	;# 
  2306  0F1C                     	;# 
  2307  0F1D                     	;# 
  2308  0F1E                     	;# 
  2309  0F1F                     	;# 
  2310  0F20                     	;# 
  2311  0F21                     	;# 
  2312  0F22                     	;# 
  2313  0F23                     	;# 
  2314  0F24                     	;# 
  2315  0F25                     	;# 
  2316  0F26                     	;# 
  2317  0F27                     	;# 
  2318  0F28                     	;# 
  2319  0F29                     	;# 
  2320  0F2A                     	;# 
  2321  0F2B                     	;# 
  2322  0F2C                     	;# 
  2323  0F2D                     	;# 
  2324  0F2E                     	;# 
  2325  0F2F                     	;# 
  2326  0F30                     	;# 
  2327  0F31                     	;# 
  2328  0F32                     	;# 
  2329  0F33                     	;# 
  2330  0F34                     	;# 
  2331  0F35                     	;# 
  2332  0F36                     	;# 
  2333  0F37                     	;# 
  2334  0FE4                     	;# 
  2335  0FE5                     	;# 
  2336  0FE6                     	;# 
  2337  0FE7                     	;# 
  2338  0FE8                     	;# 
  2339  0FE9                     	;# 
  2340  0FEA                     	;# 
  2341  0FEB                     	;# 
  2342  0FED                     	;# 
  2343  0FEE                     	;# 
  2344  0FEF                     	;# 
  2345  0000                     	;# 
  2346  0001                     	;# 
  2347  0002                     	;# 
  2348  0003                     	;# 
  2349  0004                     	;# 
  2350  0005                     	;# 
  2351  0006                     	;# 
  2352  0007                     	;# 
  2353  0008                     	;# 
  2354  0009                     	;# 
  2355  000A                     	;# 
  2356  000B                     	;# 
  2357  000C                     	;# 
  2358  000D                     	;# 
  2359  000E                     	;# 
  2360  0010                     	;# 
  2361  0011                     	;# 
  2362  0012                     	;# 
  2363  0013                     	;# 
  2364  0014                     	;# 
  2365  0015                     	;# 
  2366  0015                     	;# 
  2367  0016                     	;# 
  2368  0016                     	;# 
  2369  0017                     	;# 
  2370  0018                     	;# 
  2371  0019                     	;# 
  2372  0019                     	;# 
  2373  001A                     	;# 
  2374  001B                     	;# 
  2375  001C                     	;# 
  2376  001D                     	;# 
  2377  001E                     	;# 
  2378  001F                     	;# 
  2379  008C                     	;# 
  2380  008D                     	;# 
  2381  008E                     	;# 
  2382  0090                     	;# 
  2383  0091                     	;# 
  2384  0092                     	;# 
  2385  0093                     	;# 
  2386  0094                     	;# 
  2387  0097                     	;# 
  2388  009B                     	;# 
  2389  009B                     	;# 
  2390  009C                     	;# 
  2391  009D                     	;# 
  2392  009E                     	;# 
  2393  009F                     	;# 
  2394  010C                     	;# 
  2395  010D                     	;# 
  2396  010E                     	;# 
  2397  0111                     	;# 
  2398  0112                     	;# 
  2399  0113                     	;# 
  2400  0114                     	;# 
  2401  0115                     	;# 
  2402  0116                     	;# 
  2403  0117                     	;# 
  2404  0118                     	;# 
  2405  0119                     	;# 
  2406  018C                     	;# 
  2407  018D                     	;# 
  2408  018E                     	;# 
  2409  0197                     	;# 
  2410  0199                     	;# 
  2411  0199                     	;# 
  2412  0199                     	;# 
  2413  019A                     	;# 
  2414  019A                     	;# 
  2415  019A                     	;# 
  2416  019B                     	;# 
  2417  019B                     	;# 
  2418  019B                     	;# 
  2419  019B                     	;# 
  2420  019B                     	;# 
  2421  019C                     	;# 
  2422  019C                     	;# 
  2423  019C                     	;# 
  2424  019D                     	;# 
  2425  019D                     	;# 
  2426  019D                     	;# 
  2427  019E                     	;# 
  2428  019E                     	;# 
  2429  019E                     	;# 
  2430  019F                     	;# 
  2431  019F                     	;# 
  2432  019F                     	;# 
  2433  019F                     	;# 
  2434  019F                     	;# 
  2435  020C                     	;# 
  2436  020D                     	;# 
  2437  020E                     	;# 
  2438  0211                     	;# 
  2439  0211                     	;# 
  2440  0212                     	;# 
  2441  0212                     	;# 
  2442  0213                     	;# 
  2443  0213                     	;# 
  2444  0214                     	;# 
  2445  0214                     	;# 
  2446  0215                     	;# 
  2447  0215                     	;# 
  2448  0215                     	;# 
  2449  0215                     	;# 
  2450  0216                     	;# 
  2451  0216                     	;# 
  2452  0217                     	;# 
  2453  0217                     	;# 
  2454  0219                     	;# 
  2455  021A                     	;# 
  2456  021B                     	;# 
  2457  021C                     	;# 
  2458  021D                     	;# 
  2459  021D                     	;# 
  2460  021E                     	;# 
  2461  021F                     	;# 
  2462  028C                     	;# 
  2463  028D                     	;# 
  2464  028E                     	;# 
  2465  0291                     	;# 
  2466  0291                     	;# 
  2467  0292                     	;# 
  2468  0293                     	;# 
  2469  0294                     	;# 
  2470  0295                     	;# 
  2471  0295                     	;# 
  2472  0296                     	;# 
  2473  0297                     	;# 
  2474  0298                     	;# 
  2475  029F                     	;# 
  2476  030C                     	;# 
  2477  030D                     	;# 
  2478  030E                     	;# 
  2479  0311                     	;# 
  2480  0311                     	;# 
  2481  0312                     	;# 
  2482  0313                     	;# 
  2483  0314                     	;# 
  2484  0315                     	;# 
  2485  0315                     	;# 
  2486  0316                     	;# 
  2487  0317                     	;# 
  2488  0318                     	;# 
  2489  038C                     	;# 
  2490  038D                     	;# 
  2491  038E                     	;# 
  2492  0391                     	;# 
  2493  0392                     	;# 
  2494  0393                     	;# 
  2495  0394                     	;# 
  2496  0395                     	;# 
  2497  0396                     	;# 
  2498  0397                     	;# 
  2499  0398                     	;# 
  2500  0399                     	;# 
  2501  039A                     	;# 
  2502  039C                     	;# 
  2503  039D                     	;# 
  2504  039E                     	;# 
  2505  039F                     	;# 
  2506  0411                     	;# 
  2507  0411                     	;# 
  2508  0412                     	;# 
  2509  0413                     	;# 
  2510  0414                     	;# 
  2511  0415                     	;# 
  2512  0416                     	;# 
  2513  0417                     	;# 
  2514  0418                     	;# 
  2515  0418                     	;# 
  2516  0419                     	;# 
  2517  041A                     	;# 
  2518  041B                     	;# 
  2519  041C                     	;# 
  2520  041D                     	;# 
  2521  041E                     	;# 
  2522  041F                     	;# 
  2523  0498                     	;# 
  2524  0498                     	;# 
  2525  0499                     	;# 
  2526  049A                     	;# 
  2527  049B                     	;# 
  2528  049B                     	;# 
  2529  049C                     	;# 
  2530  049D                     	;# 
  2531  049E                     	;# 
  2532  049F                     	;# 
  2533  0617                     	;# 
  2534  0618                     	;# 
  2535  0619                     	;# 
  2536  0619                     	;# 
  2537  061A                     	;# 
  2538  061B                     	;# 
  2539  061C                     	;# 
  2540  061C                     	;# 
  2541  061F                     	;# 
  2542  0691                     	;# 
  2543  0692                     	;# 
  2544  0693                     	;# 
  2545  0694                     	;# 
  2546  0695                     	;# 
  2547  0696                     	;# 
  2548  0697                     	;# 
  2549  0698                     	;# 
  2550  0699                     	;# 
  2551  0711                     	;# 
  2552  0712                     	;# 
  2553  0713                     	;# 
  2554  0714                     	;# 
  2555  0715                     	;# 
  2556  0716                     	;# 
  2557  0717                     	;# 
  2558  0718                     	;# 
  2559  0719                     	;# 
  2560  0891                     	;# 
  2561  0891                     	;# 
  2562  0891                     	;# 
  2563  0891                     	;# 
  2564  0891                     	;# 
  2565  0891                     	;# 
  2566  0892                     	;# 
  2567  0892                     	;# 
  2568  0892                     	;# 
  2569  0893                     	;# 
  2570  0893                     	;# 
  2571  0893                     	;# 
  2572  0893                     	;# 
  2573  0893                     	;# 
  2574  0893                     	;# 
  2575  0894                     	;# 
  2576  0894                     	;# 
  2577  0894                     	;# 
  2578  0895                     	;# 
  2579  0895                     	;# 
  2580  0895                     	;# 
  2581  0896                     	;# 
  2582  0896                     	;# 
  2583  0896                     	;# 
  2584  089B                     	;# 
  2585  0911                     	;# 
  2586  0912                     	;# 
  2587  0913                     	;# 
  2588  0914                     	;# 
  2589  0915                     	;# 
  2590  0916                     	;# 
  2591  0918                     	;# 
  2592  0919                     	;# 
  2593  091A                     	;# 
  2594  091B                     	;# 
  2595  091C                     	;# 
  2596  091D                     	;# 
  2597  091E                     	;# 
  2598  091F                     	;# 
  2599  0E0F                     	;# 
  2600  0E10                     	;# 
  2601  0E11                     	;# 
  2602  0E12                     	;# 
  2603  0E13                     	;# 
  2604  0E14                     	;# 
  2605  0E15                     	;# 
  2606  0E16                     	;# 
  2607  0E17                     	;# 
  2608  0E18                     	;# 
  2609  0E19                     	;# 
  2610  0E1A                     	;# 
  2611  0E1B                     	;# 
  2612  0E1C                     	;# 
  2613  0E1D                     	;# 
  2614  0E1E                     	;# 
  2615  0E1F                     	;# 
  2616  0E20                     	;# 
  2617  0E21                     	;# 
  2618  0E22                     	;# 
  2619  0E24                     	;# 
  2620  0E25                     	;# 
  2621  0E28                     	;# 
  2622  0E29                     	;# 
  2623  0E2A                     	;# 
  2624  0E2B                     	;# 
  2625  0E2C                     	;# 
  2626  0E2D                     	;# 
  2627  0E2E                     	;# 
  2628  0E2F                     	;# 
  2629  0E90                     	;# 
  2630  0E91                     	;# 
  2631  0E92                     	;# 
  2632  0E94                     	;# 
  2633  0E95                     	;# 
  2634  0E9C                     	;# 
  2635  0E9D                     	;# 
  2636  0E9E                     	;# 
  2637  0E9F                     	;# 
  2638  0EA0                     	;# 
  2639  0EA1                     	;# 
  2640  0EA2                     	;# 
  2641  0EA3                     	;# 
  2642  0EA4                     	;# 
  2643  0EA5                     	;# 
  2644  0EA6                     	;# 
  2645  0EA7                     	;# 
  2646  0F0F                     	;# 
  2647  0F10                     	;# 
  2648  0F11                     	;# 
  2649  0F12                     	;# 
  2650  0F13                     	;# 
  2651  0F14                     	;# 
  2652  0F15                     	;# 
  2653  0F16                     	;# 
  2654  0F17                     	;# 
  2655  0F18                     	;# 
  2656  0F19                     	;# 
  2657  0F1A                     	;# 
  2658  0F1B                     	;# 
  2659  0F1C                     	;# 
  2660  0F1D                     	;# 
  2661  0F1E                     	;# 
  2662  0F1F                     	;# 
  2663  0F20                     	;# 
  2664  0F21                     	;# 
  2665  0F22                     	;# 
  2666  0F23                     	;# 
  2667  0F24                     	;# 
  2668  0F25                     	;# 
  2669  0F26                     	;# 
  2670  0F27                     	;# 
  2671  0F28                     	;# 
  2672  0F29                     	;# 
  2673  0F2A                     	;# 
  2674  0F2B                     	;# 
  2675  0F2C                     	;# 
  2676  0F2D                     	;# 
  2677  0F2E                     	;# 
  2678  0F2F                     	;# 
  2679  0F30                     	;# 
  2680  0F31                     	;# 
  2681  0F32                     	;# 
  2682  0F33                     	;# 
  2683  0F34                     	;# 
  2684  0F35                     	;# 
  2685  0F36                     	;# 
  2686  0F37                     	;# 
  2687  0FE4                     	;# 
  2688  0FE5                     	;# 
  2689  0FE6                     	;# 
  2690  0FE7                     	;# 
  2691  0FE8                     	;# 
  2692  0FE9                     	;# 
  2693  0FEA                     	;# 
  2694  0FEB                     	;# 
  2695  0FED                     	;# 
  2696  0FEE                     	;# 
  2697  0FEF                     	;# 
  2698  0000                     	;# 
  2699  0001                     	;# 
  2700  0002                     	;# 
  2701  0003                     	;# 
  2702  0004                     	;# 
  2703  0005                     	;# 
  2704  0006                     	;# 
  2705  0007                     	;# 
  2706  0008                     	;# 
  2707  0009                     	;# 
  2708  000A                     	;# 
  2709  000B                     	;# 
  2710  000C                     	;# 
  2711  000D                     	;# 
  2712  000E                     	;# 
  2713  0010                     	;# 
  2714  0011                     	;# 
  2715  0012                     	;# 
  2716  0013                     	;# 
  2717  0014                     	;# 
  2718  0015                     	;# 
  2719  0015                     	;# 
  2720  0016                     	;# 
  2721  0016                     	;# 
  2722  0017                     	;# 
  2723  0018                     	;# 
  2724  0019                     	;# 
  2725  0019                     	;# 
  2726  001A                     	;# 
  2727  001B                     	;# 
  2728  001C                     	;# 
  2729  001D                     	;# 
  2730  001E                     	;# 
  2731  001F                     	;# 
  2732  008C                     	;# 
  2733  008D                     	;# 
  2734  008E                     	;# 
  2735  0090                     	;# 
  2736  0091                     	;# 
  2737  0092                     	;# 
  2738  0093                     	;# 
  2739  0094                     	;# 
  2740  0097                     	;# 
  2741  009B                     	;# 
  2742  009B                     	;# 
  2743  009C                     	;# 
  2744  009D                     	;# 
  2745  009E                     	;# 
  2746  009F                     	;# 
  2747  010C                     	;# 
  2748  010D                     	;# 
  2749  010E                     	;# 
  2750  0111                     	;# 
  2751  0112                     	;# 
  2752  0113                     	;# 
  2753  0114                     	;# 
  2754  0115                     	;# 
  2755  0116                     	;# 
  2756  0117                     	;# 
  2757  0118                     	;# 
  2758  0119                     	;# 
  2759  018C                     	;# 
  2760  018D                     	;# 
  2761  018E                     	;# 
  2762  0197                     	;# 
  2763  0199                     	;# 
  2764  0199                     	;# 
  2765  0199                     	;# 
  2766  019A                     	;# 
  2767  019A                     	;# 
  2768  019A                     	;# 
  2769  019B                     	;# 
  2770  019B                     	;# 
  2771  019B                     	;# 
  2772  019B                     	;# 
  2773  019B                     	;# 
  2774  019C                     	;# 
  2775  019C                     	;# 
  2776  019C                     	;# 
  2777  019D                     	;# 
  2778  019D                     	;# 
  2779  019D                     	;# 
  2780  019E                     	;# 
  2781  019E                     	;# 
  2782  019E                     	;# 
  2783  019F                     	;# 
  2784  019F                     	;# 
  2785  019F                     	;# 
  2786  019F                     	;# 
  2787  019F                     	;# 
  2788  020C                     	;# 
  2789  020D                     	;# 
  2790  020E                     	;# 
  2791  0211                     	;# 
  2792  0211                     	;# 
  2793  0212                     	;# 
  2794  0212                     	;# 
  2795  0213                     	;# 
  2796  0213                     	;# 
  2797  0214                     	;# 
  2798  0214                     	;# 
  2799  0215                     	;# 
  2800  0215                     	;# 
  2801  0215                     	;# 
  2802  0215                     	;# 
  2803  0216                     	;# 
  2804  0216                     	;# 
  2805  0217                     	;# 
  2806  0217                     	;# 
  2807  0219                     	;# 
  2808  021A                     	;# 
  2809  021B                     	;# 
  2810  021C                     	;# 
  2811  021D                     	;# 
  2812  021D                     	;# 
  2813  021E                     	;# 
  2814  021F                     	;# 
  2815  028C                     	;# 
  2816  028D                     	;# 
  2817  028E                     	;# 
  2818  0291                     	;# 
  2819  0291                     	;# 
  2820  0292                     	;# 
  2821  0293                     	;# 
  2822  0294                     	;# 
  2823  0295                     	;# 
  2824  0295                     	;# 
  2825  0296                     	;# 
  2826  0297                     	;# 
  2827  0298                     	;# 
  2828  029F                     	;# 
  2829  030C                     	;# 
  2830  030D                     	;# 
  2831  030E                     	;# 
  2832  0311                     	;# 
  2833  0311                     	;# 
  2834  0312                     	;# 
  2835  0313                     	;# 
  2836  0314                     	;# 
  2837  0315                     	;# 
  2838  0315                     	;# 
  2839  0316                     	;# 
  2840  0317                     	;# 
  2841  0318                     	;# 
  2842  038C                     	;# 
  2843  038D                     	;# 
  2844  038E                     	;# 
  2845  0391                     	;# 
  2846  0392                     	;# 
  2847  0393                     	;# 
  2848  0394                     	;# 
  2849  0395                     	;# 
  2850  0396                     	;# 
  2851  0397                     	;# 
  2852  0398                     	;# 
  2853  0399                     	;# 
  2854  039A                     	;# 
  2855  039C                     	;# 
  2856  039D                     	;# 
  2857  039E                     	;# 
  2858  039F                     	;# 
  2859  0411                     	;# 
  2860  0411                     	;# 
  2861  0412                     	;# 
  2862  0413                     	;# 
  2863  0414                     	;# 
  2864  0415                     	;# 
  2865  0416                     	;# 
  2866  0417                     	;# 
  2867  0418                     	;# 
  2868  0418                     	;# 
  2869  0419                     	;# 
  2870  041A                     	;# 
  2871  041B                     	;# 
  2872  041C                     	;# 
  2873  041D                     	;# 
  2874  041E                     	;# 
  2875  041F                     	;# 
  2876  0498                     	;# 
  2877  0498                     	;# 
  2878  0499                     	;# 
  2879  049A                     	;# 
  2880  049B                     	;# 
  2881  049B                     	;# 
  2882  049C                     	;# 
  2883  049D                     	;# 
  2884  049E                     	;# 
  2885  049F                     	;# 
  2886  0617                     	;# 
  2887  0618                     	;# 
  2888  0619                     	;# 
  2889  0619                     	;# 
  2890  061A                     	;# 
  2891  061B                     	;# 
  2892  061C                     	;# 
  2893  061C                     	;# 
  2894  061F                     	;# 
  2895  0691                     	;# 
  2896  0692                     	;# 
  2897  0693                     	;# 
  2898  0694                     	;# 
  2899  0695                     	;# 
  2900  0696                     	;# 
  2901  0697                     	;# 
  2902  0698                     	;# 
  2903  0699                     	;# 
  2904  0711                     	;# 
  2905  0712                     	;# 
  2906  0713                     	;# 
  2907  0714                     	;# 
  2908  0715                     	;# 
  2909  0716                     	;# 
  2910  0717                     	;# 
  2911  0718                     	;# 
  2912  0719                     	;# 
  2913  0891                     	;# 
  2914  0891                     	;# 
  2915  0891                     	;# 
  2916  0891                     	;# 
  2917  0891                     	;# 
  2918  0891                     	;# 
  2919  0892                     	;# 
  2920  0892                     	;# 
  2921  0892                     	;# 
  2922  0893                     	;# 
  2923  0893                     	;# 
  2924  0893                     	;# 
  2925  0893                     	;# 
  2926  0893                     	;# 
  2927  0893                     	;# 
  2928  0894                     	;# 
  2929  0894                     	;# 
  2930  0894                     	;# 
  2931  0895                     	;# 
  2932  0895                     	;# 
  2933  0895                     	;# 
  2934  0896                     	;# 
  2935  0896                     	;# 
  2936  0896                     	;# 
  2937  089B                     	;# 
  2938  0911                     	;# 
  2939  0912                     	;# 
  2940  0913                     	;# 
  2941  0914                     	;# 
  2942  0915                     	;# 
  2943  0916                     	;# 
  2944  0918                     	;# 
  2945  0919                     	;# 
  2946  091A                     	;# 
  2947  091B                     	;# 
  2948  091C                     	;# 
  2949  091D                     	;# 
  2950  091E                     	;# 
  2951  091F                     	;# 
  2952  0E0F                     	;# 
  2953  0E10                     	;# 
  2954  0E11                     	;# 
  2955  0E12                     	;# 
  2956  0E13                     	;# 
  2957  0E14                     	;# 
  2958  0E15                     	;# 
  2959  0E16                     	;# 
  2960  0E17                     	;# 
  2961  0E18                     	;# 
  2962  0E19                     	;# 
  2963  0E1A                     	;# 
  2964  0E1B                     	;# 
  2965  0E1C                     	;# 
  2966  0E1D                     	;# 
  2967  0E1E                     	;# 
  2968  0E1F                     	;# 
  2969  0E20                     	;# 
  2970  0E21                     	;# 
  2971  0E22                     	;# 
  2972  0E24                     	;# 
  2973  0E25                     	;# 
  2974  0E28                     	;# 
  2975  0E29                     	;# 
  2976  0E2A                     	;# 
  2977  0E2B                     	;# 
  2978  0E2C                     	;# 
  2979  0E2D                     	;# 
  2980  0E2E                     	;# 
  2981  0E2F                     	;# 
  2982  0E90                     	;# 
  2983  0E91                     	;# 
  2984  0E92                     	;# 
  2985  0E94                     	;# 
  2986  0E95                     	;# 
  2987  0E9C                     	;# 
  2988  0E9D                     	;# 
  2989  0E9E                     	;# 
  2990  0E9F                     	;# 
  2991  0EA0                     	;# 
  2992  0EA1                     	;# 
  2993  0EA2                     	;# 
  2994  0EA3                     	;# 
  2995  0EA4                     	;# 
  2996  0EA5                     	;# 
  2997  0EA6                     	;# 
  2998  0EA7                     	;# 
  2999  0F0F                     	;# 
  3000  0F10                     	;# 
  3001  0F11                     	;# 
  3002  0F12                     	;# 
  3003  0F13                     	;# 
  3004  0F14                     	;# 
  3005  0F15                     	;# 
  3006  0F16                     	;# 
  3007  0F17                     	;# 
  3008  0F18                     	;# 
  3009  0F19                     	;# 
  3010  0F1A                     	;# 
  3011  0F1B                     	;# 
  3012  0F1C                     	;# 
  3013  0F1D                     	;# 
  3014  0F1E                     	;# 
  3015  0F1F                     	;# 
  3016  0F20                     	;# 
  3017  0F21                     	;# 
  3018  0F22                     	;# 
  3019  0F23                     	;# 
  3020  0F24                     	;# 
  3021  0F25                     	;# 
  3022  0F26                     	;# 
  3023  0F27                     	;# 
  3024  0F28                     	;# 
  3025  0F29                     	;# 
  3026  0F2A                     	;# 
  3027  0F2B                     	;# 
  3028  0F2C                     	;# 
  3029  0F2D                     	;# 
  3030  0F2E                     	;# 
  3031  0F2F                     	;# 
  3032  0F30                     	;# 
  3033  0F31                     	;# 
  3034  0F32                     	;# 
  3035  0F33                     	;# 
  3036  0F34                     	;# 
  3037  0F35                     	;# 
  3038  0F36                     	;# 
  3039  0F37                     	;# 
  3040  0FE4                     	;# 
  3041  0FE5                     	;# 
  3042  0FE6                     	;# 
  3043  0FE7                     	;# 
  3044  0FE8                     	;# 
  3045  0FE9                     	;# 
  3046  0FEA                     	;# 
  3047  0FEB                     	;# 
  3048  0FED                     	;# 
  3049  0FEE                     	;# 
  3050  0FEF                     	;# 
  3051  0000                     	;# 
  3052  0001                     	;# 
  3053  0002                     	;# 
  3054  0003                     	;# 
  3055  0004                     	;# 
  3056  0005                     	;# 
  3057  0006                     	;# 
  3058  0007                     	;# 
  3059  0008                     	;# 
  3060  0009                     	;# 
  3061  000A                     	;# 
  3062  000B                     	;# 
  3063  000C                     	;# 
  3064  000D                     	;# 
  3065  000E                     	;# 
  3066  0010                     	;# 
  3067  0011                     	;# 
  3068  0012                     	;# 
  3069  0013                     	;# 
  3070  0014                     	;# 
  3071  0015                     	;# 
  3072  0015                     	;# 
  3073  0016                     	;# 
  3074  0016                     	;# 
  3075  0017                     	;# 
  3076  0018                     	;# 
  3077  0019                     	;# 
  3078  0019                     	;# 
  3079  001A                     	;# 
  3080  001B                     	;# 
  3081  001C                     	;# 
  3082  001D                     	;# 
  3083  001E                     	;# 
  3084  001F                     	;# 
  3085  008C                     	;# 
  3086  008D                     	;# 
  3087  008E                     	;# 
  3088  0090                     	;# 
  3089  0091                     	;# 
  3090  0092                     	;# 
  3091  0093                     	;# 
  3092  0094                     	;# 
  3093  0097                     	;# 
  3094  009B                     	;# 
  3095  009B                     	;# 
  3096  009C                     	;# 
  3097  009D                     	;# 
  3098  009E                     	;# 
  3099  009F                     	;# 
  3100  010C                     	;# 
  3101  010D                     	;# 
  3102  010E                     	;# 
  3103  0111                     	;# 
  3104  0112                     	;# 
  3105  0113                     	;# 
  3106  0114                     	;# 
  3107  0115                     	;# 
  3108  0116                     	;# 
  3109  0117                     	;# 
  3110  0118                     	;# 
  3111  0119                     	;# 
  3112  018C                     	;# 
  3113  018D                     	;# 
  3114  018E                     	;# 
  3115  0197                     	;# 
  3116  0199                     	;# 
  3117  0199                     	;# 
  3118  0199                     	;# 
  3119  019A                     	;# 
  3120  019A                     	;# 
  3121  019A                     	;# 
  3122  019B                     	;# 
  3123  019B                     	;# 
  3124  019B                     	;# 
  3125  019B                     	;# 
  3126  019B                     	;# 
  3127  019C                     	;# 
  3128  019C                     	;# 
  3129  019C                     	;# 
  3130  019D                     	;# 
  3131  019D                     	;# 
  3132  019D                     	;# 
  3133  019E                     	;# 
  3134  019E                     	;# 
  3135  019E                     	;# 
  3136  019F                     	;# 
  3137  019F                     	;# 
  3138  019F                     	;# 
  3139  019F                     	;# 
  3140  019F                     	;# 
  3141  020C                     	;# 
  3142  020D                     	;# 
  3143  020E                     	;# 
  3144  0211                     	;# 
  3145  0211                     	;# 
  3146  0212                     	;# 
  3147  0212                     	;# 
  3148  0213                     	;# 
  3149  0213                     	;# 
  3150  0214                     	;# 
  3151  0214                     	;# 
  3152  0215                     	;# 
  3153  0215                     	;# 
  3154  0215                     	;# 
  3155  0215                     	;# 
  3156  0216                     	;# 
  3157  0216                     	;# 
  3158  0217                     	;# 
  3159  0217                     	;# 
  3160  0219                     	;# 
  3161  021A                     	;# 
  3162  021B                     	;# 
  3163  021C                     	;# 
  3164  021D                     	;# 
  3165  021D                     	;# 
  3166  021E                     	;# 
  3167  021F                     	;# 
  3168  028C                     	;# 
  3169  028D                     	;# 
  3170  028E                     	;# 
  3171  0291                     	;# 
  3172  0291                     	;# 
  3173  0292                     	;# 
  3174  0293                     	;# 
  3175  0294                     	;# 
  3176  0295                     	;# 
  3177  0295                     	;# 
  3178  0296                     	;# 
  3179  0297                     	;# 
  3180  0298                     	;# 
  3181  029F                     	;# 
  3182  030C                     	;# 
  3183  030D                     	;# 
  3184  030E                     	;# 
  3185  0311                     	;# 
  3186  0311                     	;# 
  3187  0312                     	;# 
  3188  0313                     	;# 
  3189  0314                     	;# 
  3190  0315                     	;# 
  3191  0315                     	;# 
  3192  0316                     	;# 
  3193  0317                     	;# 
  3194  0318                     	;# 
  3195  038C                     	;# 
  3196  038D                     	;# 
  3197  038E                     	;# 
  3198  0391                     	;# 
  3199  0392                     	;# 
  3200  0393                     	;# 
  3201  0394                     	;# 
  3202  0395                     	;# 
  3203  0396                     	;# 
  3204  0397                     	;# 
  3205  0398                     	;# 
  3206  0399                     	;# 
  3207  039A                     	;# 
  3208  039C                     	;# 
  3209  039D                     	;# 
  3210  039E                     	;# 
  3211  039F                     	;# 
  3212  0411                     	;# 
  3213  0411                     	;# 
  3214  0412                     	;# 
  3215  0413                     	;# 
  3216  0414                     	;# 
  3217  0415                     	;# 
  3218  0416                     	;# 
  3219  0417                     	;# 
  3220  0418                     	;# 
  3221  0418                     	;# 
  3222  0419                     	;# 
  3223  041A                     	;# 
  3224  041B                     	;# 
  3225  041C                     	;# 
  3226  041D                     	;# 
  3227  041E                     	;# 
  3228  041F                     	;# 
  3229  0498                     	;# 
  3230  0498                     	;# 
  3231  0499                     	;# 
  3232  049A                     	;# 
  3233  049B                     	;# 
  3234  049B                     	;# 
  3235  049C                     	;# 
  3236  049D                     	;# 
  3237  049E                     	;# 
  3238  049F                     	;# 
  3239  0617                     	;# 
  3240  0618                     	;# 
  3241  0619                     	;# 
  3242  0619                     	;# 
  3243  061A                     	;# 
  3244  061B                     	;# 
  3245  061C                     	;# 
  3246  061C                     	;# 
  3247  061F                     	;# 
  3248  0691                     	;# 
  3249  0692                     	;# 
  3250  0693                     	;# 
  3251  0694                     	;# 
  3252  0695                     	;# 
  3253  0696                     	;# 
  3254  0697                     	;# 
  3255  0698                     	;# 
  3256  0699                     	;# 
  3257  0711                     	;# 
  3258  0712                     	;# 
  3259  0713                     	;# 
  3260  0714                     	;# 
  3261  0715                     	;# 
  3262  0716                     	;# 
  3263  0717                     	;# 
  3264  0718                     	;# 
  3265  0719                     	;# 
  3266  0891                     	;# 
  3267  0891                     	;# 
  3268  0891                     	;# 
  3269  0891                     	;# 
  3270  0891                     	;# 
  3271  0891                     	;# 
  3272  0892                     	;# 
  3273  0892                     	;# 
  3274  0892                     	;# 
  3275  0893                     	;# 
  3276  0893                     	;# 
  3277  0893                     	;# 
  3278  0893                     	;# 
  3279  0893                     	;# 
  3280  0893                     	;# 
  3281  0894                     	;# 
  3282  0894                     	;# 
  3283  0894                     	;# 
  3284  0895                     	;# 
  3285  0895                     	;# 
  3286  0895                     	;# 
  3287  0896                     	;# 
  3288  0896                     	;# 
  3289  0896                     	;# 
  3290  089B                     	;# 
  3291  0911                     	;# 
  3292  0912                     	;# 
  3293  0913                     	;# 
  3294  0914                     	;# 
  3295  0915                     	;# 
  3296  0916                     	;# 
  3297  0918                     	;# 
  3298  0919                     	;# 
  3299  091A                     	;# 
  3300  091B                     	;# 
  3301  091C                     	;# 
  3302  091D                     	;# 
  3303  091E                     	;# 
  3304  091F                     	;# 
  3305  0E0F                     	;# 
  3306  0E10                     	;# 
  3307  0E11                     	;# 
  3308  0E12                     	;# 
  3309  0E13                     	;# 
  3310  0E14                     	;# 
  3311  0E15                     	;# 
  3312  0E16                     	;# 
  3313  0E17                     	;# 
  3314  0E18                     	;# 
  3315  0E19                     	;# 
  3316  0E1A                     	;# 
  3317  0E1B                     	;# 
  3318  0E1C                     	;# 
  3319  0E1D                     	;# 
  3320  0E1E                     	;# 
  3321  0E1F                     	;# 
  3322  0E20                     	;# 
  3323  0E21                     	;# 
  3324  0E22                     	;# 
  3325  0E24                     	;# 
  3326  0E25                     	;# 
  3327  0E28                     	;# 
  3328  0E29                     	;# 
  3329  0E2A                     	;# 
  3330  0E2B                     	;# 
  3331  0E2C                     	;# 
  3332  0E2D                     	;# 
  3333  0E2E                     	;# 
  3334  0E2F                     	;# 
  3335  0E90                     	;# 
  3336  0E91                     	;# 
  3337  0E92                     	;# 
  3338  0E94                     	;# 
  3339  0E95                     	;# 
  3340  0E9C                     	;# 
  3341  0E9D                     	;# 
  3342  0E9E                     	;# 
  3343  0E9F                     	;# 
  3344  0EA0                     	;# 
  3345  0EA1                     	;# 
  3346  0EA2                     	;# 
  3347  0EA3                     	;# 
  3348  0EA4                     	;# 
  3349  0EA5                     	;# 
  3350  0EA6                     	;# 
  3351  0EA7                     	;# 
  3352  0F0F                     	;# 
  3353  0F10                     	;# 
  3354  0F11                     	;# 
  3355  0F12                     	;# 
  3356  0F13                     	;# 
  3357  0F14                     	;# 
  3358  0F15                     	;# 
  3359  0F16                     	;# 
  3360  0F17                     	;# 
  3361  0F18                     	;# 
  3362  0F19                     	;# 
  3363  0F1A                     	;# 
  3364  0F1B                     	;# 
  3365  0F1C                     	;# 
  3366  0F1D                     	;# 
  3367  0F1E                     	;# 
  3368  0F1F                     	;# 
  3369  0F20                     	;# 
  3370  0F21                     	;# 
  3371  0F22                     	;# 
  3372  0F23                     	;# 
  3373  0F24                     	;# 
  3374  0F25                     	;# 
  3375  0F26                     	;# 
  3376  0F27                     	;# 
  3377  0F28                     	;# 
  3378  0F29                     	;# 
  3379  0F2A                     	;# 
  3380  0F2B                     	;# 
  3381  0F2C                     	;# 
  3382  0F2D                     	;# 
  3383  0F2E                     	;# 
  3384  0F2F                     	;# 
  3385  0F30                     	;# 
  3386  0F31                     	;# 
  3387  0F32                     	;# 
  3388  0F33                     	;# 
  3389  0F34                     	;# 
  3390  0F35                     	;# 
  3391  0F36                     	;# 
  3392  0F37                     	;# 
  3393  0FE4                     	;# 
  3394  0FE5                     	;# 
  3395  0FE6                     	;# 
  3396  0FE7                     	;# 
  3397  0FE8                     	;# 
  3398  0FE9                     	;# 
  3399  0FEA                     	;# 
  3400  0FEB                     	;# 
  3401  0FED                     	;# 
  3402  0FEE                     	;# 
  3403  0FEF                     	;# 
  3404  0000                     	;# 
  3405  0001                     	;# 
  3406  0002                     	;# 
  3407  0003                     	;# 
  3408  0004                     	;# 
  3409  0005                     	;# 
  3410  0006                     	;# 
  3411  0007                     	;# 
  3412  0008                     	;# 
  3413  0009                     	;# 
  3414  000A                     	;# 
  3415  000B                     	;# 
  3416  000C                     	;# 
  3417  000D                     	;# 
  3418  000E                     	;# 
  3419  0010                     	;# 
  3420  0011                     	;# 
  3421  0012                     	;# 
  3422  0013                     	;# 
  3423  0014                     	;# 
  3424  0015                     	;# 
  3425  0015                     	;# 
  3426  0016                     	;# 
  3427  0016                     	;# 
  3428  0017                     	;# 
  3429  0018                     	;# 
  3430  0019                     	;# 
  3431  0019                     	;# 
  3432  001A                     	;# 
  3433  001B                     	;# 
  3434  001C                     	;# 
  3435  001D                     	;# 
  3436  001E                     	;# 
  3437  001F                     	;# 
  3438  008C                     	;# 
  3439  008D                     	;# 
  3440  008E                     	;# 
  3441  0090                     	;# 
  3442  0091                     	;# 
  3443  0092                     	;# 
  3444  0093                     	;# 
  3445  0094                     	;# 
  3446  0097                     	;# 
  3447  009B                     	;# 
  3448  009B                     	;# 
  3449  009C                     	;# 
  3450  009D                     	;# 
  3451  009E                     	;# 
  3452  009F                     	;# 
  3453  010C                     	;# 
  3454  010D                     	;# 
  3455  010E                     	;# 
  3456  0111                     	;# 
  3457  0112                     	;# 
  3458  0113                     	;# 
  3459  0114                     	;# 
  3460  0115                     	;# 
  3461  0116                     	;# 
  3462  0117                     	;# 
  3463  0118                     	;# 
  3464  0119                     	;# 
  3465  018C                     	;# 
  3466  018D                     	;# 
  3467  018E                     	;# 
  3468  0197                     	;# 
  3469  0199                     	;# 
  3470  0199                     	;# 
  3471  0199                     	;# 
  3472  019A                     	;# 
  3473  019A                     	;# 
  3474  019A                     	;# 
  3475  019B                     	;# 
  3476  019B                     	;# 
  3477  019B                     	;# 
  3478  019B                     	;# 
  3479  019B                     	;# 
  3480  019C                     	;# 
  3481  019C                     	;# 
  3482  019C                     	;# 
  3483  019D                     	;# 
  3484  019D                     	;# 
  3485  019D                     	;# 
  3486  019E                     	;# 
  3487  019E                     	;# 
  3488  019E                     	;# 
  3489  019F                     	;# 
  3490  019F                     	;# 
  3491  019F                     	;# 
  3492  019F                     	;# 
  3493  019F                     	;# 
  3494  020C                     	;# 
  3495  020D                     	;# 
  3496  020E                     	;# 
  3497  0211                     	;# 
  3498  0211                     	;# 
  3499  0212                     	;# 
  3500  0212                     	;# 
  3501  0213                     	;# 
  3502  0213                     	;# 
  3503  0214                     	;# 
  3504  0214                     	;# 
  3505  0215                     	;# 
  3506  0215                     	;# 
  3507  0215                     	;# 
  3508  0215                     	;# 
  3509  0216                     	;# 
  3510  0216                     	;# 
  3511  0217                     	;# 
  3512  0217                     	;# 
  3513  0219                     	;# 
  3514  021A                     	;# 
  3515  021B                     	;# 
  3516  021C                     	;# 
  3517  021D                     	;# 
  3518  021D                     	;# 
  3519  021E                     	;# 
  3520  021F                     	;# 
  3521  028C                     	;# 
  3522  028D                     	;# 
  3523  028E                     	;# 
  3524  0291                     	;# 
  3525  0291                     	;# 
  3526  0292                     	;# 
  3527  0293                     	;# 
  3528  0294                     	;# 
  3529  0295                     	;# 
  3530  0295                     	;# 
  3531  0296                     	;# 
  3532  0297                     	;# 
  3533  0298                     	;# 
  3534  029F                     	;# 
  3535  030C                     	;# 
  3536  030D                     	;# 
  3537  030E                     	;# 
  3538  0311                     	;# 
  3539  0311                     	;# 
  3540  0312                     	;# 
  3541  0313                     	;# 
  3542  0314                     	;# 
  3543  0315                     	;# 
  3544  0315                     	;# 
  3545  0316                     	;# 
  3546  0317                     	;# 
  3547  0318                     	;# 
  3548  038C                     	;# 
  3549  038D                     	;# 
  3550  038E                     	;# 
  3551  0391                     	;# 
  3552  0392                     	;# 
  3553  0393                     	;# 
  3554  0394                     	;# 
  3555  0395                     	;# 
  3556  0396                     	;# 
  3557  0397                     	;# 
  3558  0398                     	;# 
  3559  0399                     	;# 
  3560  039A                     	;# 
  3561  039C                     	;# 
  3562  039D                     	;# 
  3563  039E                     	;# 
  3564  039F                     	;# 
  3565  0411                     	;# 
  3566  0411                     	;# 
  3567  0412                     	;# 
  3568  0413                     	;# 
  3569  0414                     	;# 
  3570  0415                     	;# 
  3571  0416                     	;# 
  3572  0417                     	;# 
  3573  0418                     	;# 
  3574  0418                     	;# 
  3575  0419                     	;# 
  3576  041A                     	;# 
  3577  041B                     	;# 
  3578  041C                     	;# 
  3579  041D                     	;# 
  3580  041E                     	;# 
  3581  041F                     	;# 
  3582  0498                     	;# 
  3583  0498                     	;# 
  3584  0499                     	;# 
  3585  049A                     	;# 
  3586  049B                     	;# 
  3587  049B                     	;# 
  3588  049C                     	;# 
  3589  049D                     	;# 
  3590  049E                     	;# 
  3591  049F                     	;# 
  3592  0617                     	;# 
  3593  0618                     	;# 
  3594  0619                     	;# 
  3595  0619                     	;# 
  3596  061A                     	;# 
  3597  061B                     	;# 
  3598  061C                     	;# 
  3599  061C                     	;# 
  3600  061F                     	;# 
  3601  0691                     	;# 
  3602  0692                     	;# 
  3603  0693                     	;# 
  3604  0694                     	;# 
  3605  0695                     	;# 
  3606  0696                     	;# 
  3607  0697                     	;# 
  3608  0698                     	;# 
  3609  0699                     	;# 
  3610  0711                     	;# 
  3611  0712                     	;# 
  3612  0713                     	;# 
  3613  0714                     	;# 
  3614  0715                     	;# 
  3615  0716                     	;# 
  3616  0717                     	;# 
  3617  0718                     	;# 
  3618  0719                     	;# 
  3619  0891                     	;# 
  3620  0891                     	;# 
  3621  0891                     	;# 
  3622  0891                     	;# 
  3623  0891                     	;# 
  3624  0891                     	;# 
  3625  0892                     	;# 
  3626  0892                     	;# 
  3627  0892                     	;# 
  3628  0893                     	;# 
  3629  0893                     	;# 
  3630  0893                     	;# 
  3631  0893                     	;# 
  3632  0893                     	;# 
  3633  0893                     	;# 
  3634  0894                     	;# 
  3635  0894                     	;# 
  3636  0894                     	;# 
  3637  0895                     	;# 
  3638  0895                     	;# 
  3639  0895                     	;# 
  3640  0896                     	;# 
  3641  0896                     	;# 
  3642  0896                     	;# 
  3643  089B                     	;# 
  3644  0911                     	;# 
  3645  0912                     	;# 
  3646  0913                     	;# 
  3647  0914                     	;# 
  3648  0915                     	;# 
  3649  0916                     	;# 
  3650  0918                     	;# 
  3651  0919                     	;# 
  3652  091A                     	;# 
  3653  091B                     	;# 
  3654  091C                     	;# 
  3655  091D                     	;# 
  3656  091E                     	;# 
  3657  091F                     	;# 
  3658  0E0F                     	;# 
  3659  0E10                     	;# 
  3660  0E11                     	;# 
  3661  0E12                     	;# 
  3662  0E13                     	;# 
  3663  0E14                     	;# 
  3664  0E15                     	;# 
  3665  0E16                     	;# 
  3666  0E17                     	;# 
  3667  0E18                     	;# 
  3668  0E19                     	;# 
  3669  0E1A                     	;# 
  3670  0E1B                     	;# 
  3671  0E1C                     	;# 
  3672  0E1D                     	;# 
  3673  0E1E                     	;# 
  3674  0E1F                     	;# 
  3675  0E20                     	;# 
  3676  0E21                     	;# 
  3677  0E22                     	;# 
  3678  0E24                     	;# 
  3679  0E25                     	;# 
  3680  0E28                     	;# 
  3681  0E29                     	;# 
  3682  0E2A                     	;# 
  3683  0E2B                     	;# 
  3684  0E2C                     	;# 
  3685  0E2D                     	;# 
  3686  0E2E                     	;# 
  3687  0E2F                     	;# 
  3688  0E90                     	;# 
  3689  0E91                     	;# 
  3690  0E92                     	;# 
  3691  0E94                     	;# 
  3692  0E95                     	;# 
  3693  0E9C                     	;# 
  3694  0E9D                     	;# 
  3695  0E9E                     	;# 
  3696  0E9F                     	;# 
  3697  0EA0                     	;# 
  3698  0EA1                     	;# 
  3699  0EA2                     	;# 
  3700  0EA3                     	;# 
  3701  0EA4                     	;# 
  3702  0EA5                     	;# 
  3703  0EA6                     	;# 
  3704  0EA7                     	;# 
  3705  0F0F                     	;# 
  3706  0F10                     	;# 
  3707  0F11                     	;# 
  3708  0F12                     	;# 
  3709  0F13                     	;# 
  3710  0F14                     	;# 
  3711  0F15                     	;# 
  3712  0F16                     	;# 
  3713  0F17                     	;# 
  3714  0F18                     	;# 
  3715  0F19                     	;# 
  3716  0F1A                     	;# 
  3717  0F1B                     	;# 
  3718  0F1C                     	;# 
  3719  0F1D                     	;# 
  3720  0F1E                     	;# 
  3721  0F1F                     	;# 
  3722  0F20                     	;# 
  3723  0F21                     	;# 
  3724  0F22                     	;# 
  3725  0F23                     	;# 
  3726  0F24                     	;# 
  3727  0F25                     	;# 
  3728  0F26                     	;# 
  3729  0F27                     	;# 
  3730  0F28                     	;# 
  3731  0F29                     	;# 
  3732  0F2A                     	;# 
  3733  0F2B                     	;# 
  3734  0F2C                     	;# 
  3735  0F2D                     	;# 
  3736  0F2E                     	;# 
  3737  0F2F                     	;# 
  3738  0F30                     	;# 
  3739  0F31                     	;# 
  3740  0F32                     	;# 
  3741  0F33                     	;# 
  3742  0F34                     	;# 
  3743  0F35                     	;# 
  3744  0F36                     	;# 
  3745  0F37                     	;# 
  3746  0FE4                     	;# 
  3747  0FE5                     	;# 
  3748  0FE6                     	;# 
  3749  0FE7                     	;# 
  3750  0FE8                     	;# 
  3751  0FE9                     	;# 
  3752  0FEA                     	;# 
  3753  0FEB                     	;# 
  3754  0FED                     	;# 
  3755  0FEE                     	;# 
  3756  0FEF                     	;# 
  3757  0000                     	;# 
  3758  0001                     	;# 
  3759  0002                     	;# 
  3760  0003                     	;# 
  3761  0004                     	;# 
  3762  0005                     	;# 
  3763  0006                     	;# 
  3764  0007                     	;# 
  3765  0008                     	;# 
  3766  0009                     	;# 
  3767  000A                     	;# 
  3768  000B                     	;# 
  3769  000C                     	;# 
  3770  000D                     	;# 
  3771  000E                     	;# 
  3772  0010                     	;# 
  3773  0011                     	;# 
  3774  0012                     	;# 
  3775  0013                     	;# 
  3776  0014                     	;# 
  3777  0015                     	;# 
  3778  0015                     	;# 
  3779  0016                     	;# 
  3780  0016                     	;# 
  3781  0017                     	;# 
  3782  0018                     	;# 
  3783  0019                     	;# 
  3784  0019                     	;# 
  3785  001A                     	;# 
  3786  001B                     	;# 
  3787  001C                     	;# 
  3788  001D                     	;# 
  3789  001E                     	;# 
  3790  001F                     	;# 
  3791  008C                     	;# 
  3792  008D                     	;# 
  3793  008E                     	;# 
  3794  0090                     	;# 
  3795  0091                     	;# 
  3796  0092                     	;# 
  3797  0093                     	;# 
  3798  0094                     	;# 
  3799  0097                     	;# 
  3800  009B                     	;# 
  3801  009B                     	;# 
  3802  009C                     	;# 
  3803  009D                     	;# 
  3804  009E                     	;# 
  3805  009F                     	;# 
  3806  010C                     	;# 
  3807  010D                     	;# 
  3808  010E                     	;# 
  3809  0111                     	;# 
  3810  0112                     	;# 
  3811  0113                     	;# 
  3812  0114                     	;# 
  3813  0115                     	;# 
  3814  0116                     	;# 
  3815  0117                     	;# 
  3816  0118                     	;# 
  3817  0119                     	;# 
  3818  018C                     	;# 
  3819  018D                     	;# 
  3820  018E                     	;# 
  3821  0197                     	;# 
  3822  0199                     	;# 
  3823  0199                     	;# 
  3824  0199                     	;# 
  3825  019A                     	;# 
  3826  019A                     	;# 
  3827  019A                     	;# 
  3828  019B                     	;# 
  3829  019B                     	;# 
  3830  019B                     	;# 
  3831  019B                     	;# 
  3832  019B                     	;# 
  3833  019C                     	;# 
  3834  019C                     	;# 
  3835  019C                     	;# 
  3836  019D                     	;# 
  3837  019D                     	;# 
  3838  019D                     	;# 
  3839  019E                     	;# 
  3840  019E                     	;# 
  3841  019E                     	;# 
  3842  019F                     	;# 
  3843  019F                     	;# 
  3844  019F                     	;# 
  3845  019F                     	;# 
  3846  019F                     	;# 
  3847  020C                     	;# 
  3848  020D                     	;# 
  3849  020E                     	;# 
  3850  0211                     	;# 
  3851  0211                     	;# 
  3852  0212                     	;# 
  3853  0212                     	;# 
  3854  0213                     	;# 
  3855  0213                     	;# 
  3856  0214                     	;# 
  3857  0214                     	;# 
  3858  0215                     	;# 
  3859  0215                     	;# 
  3860  0215                     	;# 
  3861  0215                     	;# 
  3862  0216                     	;# 
  3863  0216                     	;# 
  3864  0217                     	;# 
  3865  0217                     	;# 
  3866  0219                     	;# 
  3867  021A                     	;# 
  3868  021B                     	;# 
  3869  021C                     	;# 
  3870  021D                     	;# 
  3871  021D                     	;# 
  3872  021E                     	;# 
  3873  021F                     	;# 
  3874  028C                     	;# 
  3875  028D                     	;# 
  3876  028E                     	;# 
  3877  0291                     	;# 
  3878  0291                     	;# 
  3879  0292                     	;# 
  3880  0293                     	;# 
  3881  0294                     	;# 
  3882  0295                     	;# 
  3883  0295                     	;# 
  3884  0296                     	;# 
  3885  0297                     	;# 
  3886  0298                     	;# 
  3887  029F                     	;# 
  3888  030C                     	;# 
  3889  030D                     	;# 
  3890  030E                     	;# 
  3891  0311                     	;# 
  3892  0311                     	;# 
  3893  0312                     	;# 
  3894  0313                     	;# 
  3895  0314                     	;# 
  3896  0315                     	;# 
  3897  0315                     	;# 
  3898  0316                     	;# 
  3899  0317                     	;# 
  3900  0318                     	;# 
  3901  038C                     	;# 
  3902  038D                     	;# 
  3903  038E                     	;# 
  3904  0391                     	;# 
  3905  0392                     	;# 
  3906  0393                     	;# 
  3907  0394                     	;# 
  3908  0395                     	;# 
  3909  0396                     	;# 
  3910  0397                     	;# 
  3911  0398                     	;# 
  3912  0399                     	;# 
  3913  039A                     	;# 
  3914  039C                     	;# 
  3915  039D                     	;# 
  3916  039E                     	;# 
  3917  039F                     	;# 
  3918  0411                     	;# 
  3919  0411                     	;# 
  3920  0412                     	;# 
  3921  0413                     	;# 
  3922  0414                     	;# 
  3923  0415                     	;# 
  3924  0416                     	;# 
  3925  0417                     	;# 
  3926  0418                     	;# 
  3927  0418                     	;# 
  3928  0419                     	;# 
  3929  041A                     	;# 
  3930  041B                     	;# 
  3931  041C                     	;# 
  3932  041D                     	;# 
  3933  041E                     	;# 
  3934  041F                     	;# 
  3935  0498                     	;# 
  3936  0498                     	;# 
  3937  0499                     	;# 
  3938  049A                     	;# 
  3939  049B                     	;# 
  3940  049B                     	;# 
  3941  049C                     	;# 
  3942  049D                     	;# 
  3943  049E                     	;# 
  3944  049F                     	;# 
  3945  0617                     	;# 
  3946  0618                     	;# 
  3947  0619                     	;# 
  3948  0619                     	;# 
  3949  061A                     	;# 
  3950  061B                     	;# 
  3951  061C                     	;# 
  3952  061C                     	;# 
  3953  061F                     	;# 
  3954  0691                     	;# 
  3955  0692                     	;# 
  3956  0693                     	;# 
  3957  0694                     	;# 
  3958  0695                     	;# 
  3959  0696                     	;# 
  3960  0697                     	;# 
  3961  0698                     	;# 
  3962  0699                     	;# 
  3963  0711                     	;# 
  3964  0712                     	;# 
  3965  0713                     	;# 
  3966  0714                     	;# 
  3967  0715                     	;# 
  3968  0716                     	;# 
  3969  0717                     	;# 
  3970  0718                     	;# 
  3971  0719                     	;# 
  3972  0891                     	;# 
  3973  0891                     	;# 
  3974  0891                     	;# 
  3975  0891                     	;# 
  3976  0891                     	;# 
  3977  0891                     	;# 
  3978  0892                     	;# 
  3979  0892                     	;# 
  3980  0892                     	;# 
  3981  0893                     	;# 
  3982  0893                     	;# 
  3983  0893                     	;# 
  3984  0893                     	;# 
  3985  0893                     	;# 
  3986  0893                     	;# 
  3987  0894                     	;# 
  3988  0894                     	;# 
  3989  0894                     	;# 
  3990  0895                     	;# 
  3991  0895                     	;# 
  3992  0895                     	;# 
  3993  0896                     	;# 
  3994  0896                     	;# 
  3995  0896                     	;# 
  3996  089B                     	;# 
  3997  0911                     	;# 
  3998  0912                     	;# 
  3999  0913                     	;# 
  4000  0914                     	;# 
  4001  0915                     	;# 
  4002  0916                     	;# 
  4003  0918                     	;# 
  4004  0919                     	;# 
  4005  091A                     	;# 
  4006  091B                     	;# 
  4007  091C                     	;# 
  4008  091D                     	;# 
  4009  091E                     	;# 
  4010  091F                     	;# 
  4011  0E0F                     	;# 
  4012  0E10                     	;# 
  4013  0E11                     	;# 
  4014  0E12                     	;# 
  4015  0E13                     	;# 
  4016  0E14                     	;# 
  4017  0E15                     	;# 
  4018  0E16                     	;# 
  4019  0E17                     	;# 
  4020  0E18                     	;# 
  4021  0E19                     	;# 
  4022  0E1A                     	;# 
  4023  0E1B                     	;# 
  4024  0E1C                     	;# 
  4025  0E1D                     	;# 
  4026  0E1E                     	;# 
  4027  0E1F                     	;# 
  4028  0E20                     	;# 
  4029  0E21                     	;# 
  4030  0E22                     	;# 
  4031  0E24                     	;# 
  4032  0E25                     	;# 
  4033  0E28                     	;# 
  4034  0E29                     	;# 
  4035  0E2A                     	;# 
  4036  0E2B                     	;# 
  4037  0E2C                     	;# 
  4038  0E2D                     	;# 
  4039  0E2E                     	;# 
  4040  0E2F                     	;# 
  4041  0E90                     	;# 
  4042  0E91                     	;# 
  4043  0E92                     	;# 
  4044  0E94                     	;# 
  4045  0E95                     	;# 
  4046  0E9C                     	;# 
  4047  0E9D                     	;# 
  4048  0E9E                     	;# 
  4049  0E9F                     	;# 
  4050  0EA0                     	;# 
  4051  0EA1                     	;# 
  4052  0EA2                     	;# 
  4053  0EA3                     	;# 
  4054  0EA4                     	;# 
  4055  0EA5                     	;# 
  4056  0EA6                     	;# 
  4057  0EA7                     	;# 
  4058  0F0F                     	;# 
  4059  0F10                     	;# 
  4060  0F11                     	;# 
  4061  0F12                     	;# 
  4062  0F13                     	;# 
  4063  0F14                     	;# 
  4064  0F15                     	;# 
  4065  0F16                     	;# 
  4066  0F17                     	;# 
  4067  0F18                     	;# 
  4068  0F19                     	;# 
  4069  0F1A                     	;# 
  4070  0F1B                     	;# 
  4071  0F1C                     	;# 
  4072  0F1D                     	;# 
  4073  0F1E                     	;# 
  4074  0F1F                     	;# 
  4075  0F20                     	;# 
  4076  0F21                     	;# 
  4077  0F22                     	;# 
  4078  0F23                     	;# 
  4079  0F24                     	;# 
  4080  0F25                     	;# 
  4081  0F26                     	;# 
  4082  0F27                     	;# 
  4083  0F28                     	;# 
  4084  0F29                     	;# 
  4085  0F2A                     	;# 
  4086  0F2B                     	;# 
  4087  0F2C                     	;# 
  4088  0F2D                     	;# 
  4089  0F2E                     	;# 
  4090  0F2F                     	;# 
  4091  0F30                     	;# 
  4092  0F31                     	;# 
  4093  0F32                     	;# 
  4094  0F33                     	;# 
  4095  0F34                     	;# 
  4096  0F35                     	;# 
  4097  0F36                     	;# 
  4098  0F37                     	;# 
  4099  0FE4                     	;# 
  4100  0FE5                     	;# 
  4101  0FE6                     	;# 
  4102  0FE7                     	;# 
  4103  0FE8                     	;# 
  4104  0FE9                     	;# 
  4105  0FEA                     	;# 
  4106  0FEB                     	;# 
  4107  0FED                     	;# 
  4108  0FEE                     	;# 
  4109  0FEF                     	;# 
  4110  0000                     	;# 
  4111  0001                     	;# 
  4112  0002                     	;# 
  4113  0003                     	;# 
  4114  0004                     	;# 
  4115  0005                     	;# 
  4116  0006                     	;# 
  4117  0007                     	;# 
  4118  0008                     	;# 
  4119  0009                     	;# 
  4120  000A                     	;# 
  4121  000B                     	;# 
  4122  000C                     	;# 
  4123  000D                     	;# 
  4124  000E                     	;# 
  4125  0010                     	;# 
  4126  0011                     	;# 
  4127  0012                     	;# 
  4128  0013                     	;# 
  4129  0014                     	;# 
  4130  0015                     	;# 
  4131  0015                     	;# 
  4132  0016                     	;# 
  4133  0016                     	;# 
  4134  0017                     	;# 
  4135  0018                     	;# 
  4136  0019                     	;# 
  4137  0019                     	;# 
  4138  001A                     	;# 
  4139  001B                     	;# 
  4140  001C                     	;# 
  4141  001D                     	;# 
  4142  001E                     	;# 
  4143  001F                     	;# 
  4144  008C                     	;# 
  4145  008D                     	;# 
  4146  008E                     	;# 
  4147  0090                     	;# 
  4148  0091                     	;# 
  4149  0092                     	;# 
  4150  0093                     	;# 
  4151  0094                     	;# 
  4152  0097                     	;# 
  4153  009B                     	;# 
  4154  009B                     	;# 
  4155  009C                     	;# 
  4156  009D                     	;# 
  4157  009E                     	;# 
  4158  009F                     	;# 
  4159  010C                     	;# 
  4160  010D                     	;# 
  4161  010E                     	;# 
  4162  0111                     	;# 
  4163  0112                     	;# 
  4164  0113                     	;# 
  4165  0114                     	;# 
  4166  0115                     	;# 
  4167  0116                     	;# 
  4168  0117                     	;# 
  4169  0118                     	;# 
  4170  0119                     	;# 
  4171  018C                     	;# 
  4172  018D                     	;# 
  4173  018E                     	;# 
  4174  0197                     	;# 
  4175  0199                     	;# 
  4176  0199                     	;# 
  4177  0199                     	;# 
  4178  019A                     	;# 
  4179  019A                     	;# 
  4180  019A                     	;# 
  4181  019B                     	;# 
  4182  019B                     	;# 
  4183  019B                     	;# 
  4184  019B                     	;# 
  4185  019B                     	;# 
  4186  019C                     	;# 
  4187  019C                     	;# 
  4188  019C                     	;# 
  4189  019D                     	;# 
  4190  019D                     	;# 
  4191  019D                     	;# 
  4192  019E                     	;# 
  4193  019E                     	;# 
  4194  019E                     	;# 
  4195  019F                     	;# 
  4196  019F                     	;# 
  4197  019F                     	;# 
  4198  019F                     	;# 
  4199  019F                     	;# 
  4200  020C                     	;# 
  4201  020D                     	;# 
  4202  020E                     	;# 
  4203  0211                     	;# 
  4204  0211                     	;# 
  4205  0212                     	;# 
  4206  0212                     	;# 
  4207  0213                     	;# 
  4208  0213                     	;# 
  4209  0214                     	;# 
  4210  0214                     	;# 
  4211  0215                     	;# 
  4212  0215                     	;# 
  4213  0215                     	;# 
  4214  0215                     	;# 
  4215  0216                     	;# 
  4216  0216                     	;# 
  4217  0217                     	;# 
  4218  0217                     	;# 
  4219  0219                     	;# 
  4220  021A                     	;# 
  4221  021B                     	;# 
  4222  021C                     	;# 
  4223  021D                     	;# 
  4224  021D                     	;# 
  4225  021E                     	;# 
  4226  021F                     	;# 
  4227  028C                     	;# 
  4228  028D                     	;# 
  4229  028E                     	;# 
  4230  0291                     	;# 
  4231  0291                     	;# 
  4232  0292                     	;# 
  4233  0293                     	;# 
  4234  0294                     	;# 
  4235  0295                     	;# 
  4236  0295                     	;# 
  4237  0296                     	;# 
  4238  0297                     	;# 
  4239  0298                     	;# 
  4240  029F                     	;# 
  4241  030C                     	;# 
  4242  030D                     	;# 
  4243  030E                     	;# 
  4244  0311                     	;# 
  4245  0311                     	;# 
  4246  0312                     	;# 
  4247  0313                     	;# 
  4248  0314                     	;# 
  4249  0315                     	;# 
  4250  0315                     	;# 
  4251  0316                     	;# 
  4252  0317                     	;# 
  4253  0318                     	;# 
  4254  038C                     	;# 
  4255  038D                     	;# 
  4256  038E                     	;# 
  4257  0391                     	;# 
  4258  0392                     	;# 
  4259  0393                     	;# 
  4260  0394                     	;# 
  4261  0395                     	;# 
  4262  0396                     	;# 
  4263  0397                     	;# 
  4264  0398                     	;# 
  4265  0399                     	;# 
  4266  039A                     	;# 
  4267  039C                     	;# 
  4268  039D                     	;# 
  4269  039E                     	;# 
  4270  039F                     	;# 
  4271  0411                     	;# 
  4272  0411                     	;# 
  4273  0412                     	;# 
  4274  0413                     	;# 
  4275  0414                     	;# 
  4276  0415                     	;# 
  4277  0416                     	;# 
  4278  0417                     	;# 
  4279  0418                     	;# 
  4280  0418                     	;# 
  4281  0419                     	;# 
  4282  041A                     	;# 
  4283  041B                     	;# 
  4284  041C                     	;# 
  4285  041D                     	;# 
  4286  041E                     	;# 
  4287  041F                     	;# 
  4288  0498                     	;# 
  4289  0498                     	;# 
  4290  0499                     	;# 
  4291  049A                     	;# 
  4292  049B                     	;# 
  4293  049B                     	;# 
  4294  049C                     	;# 
  4295  049D                     	;# 
  4296  049E                     	;# 
  4297  049F                     	;# 
  4298  0617                     	;# 
  4299  0618                     	;# 
  4300  0619                     	;# 
  4301  0619                     	;# 
  4302  061A                     	;# 
  4303  061B                     	;# 
  4304  061C                     	;# 
  4305  061C                     	;# 
  4306  061F                     	;# 
  4307  0691                     	;# 
  4308  0692                     	;# 
  4309  0693                     	;# 
  4310  0694                     	;# 
  4311  0695                     	;# 
  4312  0696                     	;# 
  4313  0697                     	;# 
  4314  0698                     	;# 
  4315  0699                     	;# 
  4316  0711                     	;# 
  4317  0712                     	;# 
  4318  0713                     	;# 
  4319  0714                     	;# 
  4320  0715                     	;# 
  4321  0716                     	;# 
  4322  0717                     	;# 
  4323  0718                     	;# 
  4324  0719                     	;# 
  4325  0891                     	;# 
  4326  0891                     	;# 
  4327  0891                     	;# 
  4328  0891                     	;# 
  4329  0891                     	;# 
  4330  0891                     	;# 
  4331  0892                     	;# 
  4332  0892                     	;# 
  4333  0892                     	;# 
  4334  0893                     	;# 
  4335  0893                     	;# 
  4336  0893                     	;# 
  4337  0893                     	;# 
  4338  0893                     	;# 
  4339  0893                     	;# 
  4340  0894                     	;# 
  4341  0894                     	;# 
  4342  0894                     	;# 
  4343  0895                     	;# 
  4344  0895                     	;# 
  4345  0895                     	;# 
  4346  0896                     	;# 
  4347  0896                     	;# 
  4348  0896                     	;# 
  4349  089B                     	;# 
  4350  0911                     	;# 
  4351  0912                     	;# 
  4352  0913                     	;# 
  4353  0914                     	;# 
  4354  0915                     	;# 
  4355  0916                     	;# 
  4356  0918                     	;# 
  4357  0919                     	;# 
  4358  091A                     	;# 
  4359  091B                     	;# 
  4360  091C                     	;# 
  4361  091D                     	;# 
  4362  091E                     	;# 
  4363  091F                     	;# 
  4364  0E0F                     	;# 
  4365  0E10                     	;# 
  4366  0E11                     	;# 
  4367  0E12                     	;# 
  4368  0E13                     	;# 
  4369  0E14                     	;# 
  4370  0E15                     	;# 
  4371  0E16                     	;# 
  4372  0E17                     	;# 
  4373  0E18                     	;# 
  4374  0E19                     	;# 
  4375  0E1A                     	;# 
  4376  0E1B                     	;# 
  4377  0E1C                     	;# 
  4378  0E1D                     	;# 
  4379  0E1E                     	;# 
  4380  0E1F                     	;# 
  4381  0E20                     	;# 
  4382  0E21                     	;# 
  4383  0E22                     	;# 
  4384  0E24                     	;# 
  4385  0E25                     	;# 
  4386  0E28                     	;# 
  4387  0E29                     	;# 
  4388  0E2A                     	;# 
  4389  0E2B                     	;# 
  4390  0E2C                     	;# 
  4391  0E2D                     	;# 
  4392  0E2E                     	;# 
  4393  0E2F                     	;# 
  4394  0E90                     	;# 
  4395  0E91                     	;# 
  4396  0E92                     	;# 
  4397  0E94                     	;# 
  4398  0E95                     	;# 
  4399  0E9C                     	;# 
  4400  0E9D                     	;# 
  4401  0E9E                     	;# 
  4402  0E9F                     	;# 
  4403  0EA0                     	;# 
  4404  0EA1                     	;# 
  4405  0EA2                     	;# 
  4406  0EA3                     	;# 
  4407  0EA4                     	;# 
  4408  0EA5                     	;# 
  4409  0EA6                     	;# 
  4410  0EA7                     	;# 
  4411  0F0F                     	;# 
  4412  0F10                     	;# 
  4413  0F11                     	;# 
  4414  0F12                     	;# 
  4415  0F13                     	;# 
  4416  0F14                     	;# 
  4417  0F15                     	;# 
  4418  0F16                     	;# 
  4419  0F17                     	;# 
  4420  0F18                     	;# 
  4421  0F19                     	;# 
  4422  0F1A                     	;# 
  4423  0F1B                     	;# 
  4424  0F1C                     	;# 
  4425  0F1D                     	;# 
  4426  0F1E                     	;# 
  4427  0F1F                     	;# 
  4428  0F20                     	;# 
  4429  0F21                     	;# 
  4430  0F22                     	;# 
  4431  0F23                     	;# 
  4432  0F24                     	;# 
  4433  0F25                     	;# 
  4434  0F26                     	;# 
  4435  0F27                     	;# 
  4436  0F28                     	;# 
  4437  0F29                     	;# 
  4438  0F2A                     	;# 
  4439  0F2B                     	;# 
  4440  0F2C                     	;# 
  4441  0F2D                     	;# 
  4442  0F2E                     	;# 
  4443  0F2F                     	;# 
  4444  0F30                     	;# 
  4445  0F31                     	;# 
  4446  0F32                     	;# 
  4447  0F33                     	;# 
  4448  0F34                     	;# 
  4449  0F35                     	;# 
  4450  0F36                     	;# 
  4451  0F37                     	;# 
  4452  0FE4                     	;# 
  4453  0FE5                     	;# 
  4454  0FE6                     	;# 
  4455  0FE7                     	;# 
  4456  0FE8                     	;# 
  4457  0FE9                     	;# 
  4458  0FEA                     	;# 
  4459  0FEB                     	;# 
  4460  0FED                     	;# 
  4461  0FEE                     	;# 
  4462  0FEF                     	;# 
  4463  0000                     	;# 
  4464  0001                     	;# 
  4465  0002                     	;# 
  4466  0003                     	;# 
  4467  0004                     	;# 
  4468  0005                     	;# 
  4469  0006                     	;# 
  4470  0007                     	;# 
  4471  0008                     	;# 
  4472  0009                     	;# 
  4473  000A                     	;# 
  4474  000B                     	;# 
  4475  000C                     	;# 
  4476  000D                     	;# 
  4477  000E                     	;# 
  4478  0010                     	;# 
  4479  0011                     	;# 
  4480  0012                     	;# 
  4481  0013                     	;# 
  4482  0014                     	;# 
  4483  0015                     	;# 
  4484  0015                     	;# 
  4485  0016                     	;# 
  4486  0016                     	;# 
  4487  0017                     	;# 
  4488  0018                     	;# 
  4489  0019                     	;# 
  4490  0019                     	;# 
  4491  001A                     	;# 
  4492  001B                     	;# 
  4493  001C                     	;# 
  4494  001D                     	;# 
  4495  001E                     	;# 
  4496  001F                     	;# 
  4497  008C                     	;# 
  4498  008D                     	;# 
  4499  008E                     	;# 
  4500  0090                     	;# 
  4501  0091                     	;# 
  4502  0092                     	;# 
  4503  0093                     	;# 
  4504  0094                     	;# 
  4505  0097                     	;# 
  4506  009B                     	;# 
  4507  009B                     	;# 
  4508  009C                     	;# 
  4509  009D                     	;# 
  4510  009E                     	;# 
  4511  009F                     	;# 
  4512  010C                     	;# 
  4513  010D                     	;# 
  4514  010E                     	;# 
  4515  0111                     	;# 
  4516  0112                     	;# 
  4517  0113                     	;# 
  4518  0114                     	;# 
  4519  0115                     	;# 
  4520  0116                     	;# 
  4521  0117                     	;# 
  4522  0118                     	;# 
  4523  0119                     	;# 
  4524  018C                     	;# 
  4525  018D                     	;# 
  4526  018E                     	;# 
  4527  0197                     	;# 
  4528  0199                     	;# 
  4529  0199                     	;# 
  4530  0199                     	;# 
  4531  019A                     	;# 
  4532  019A                     	;# 
  4533  019A                     	;# 
  4534  019B                     	;# 
  4535  019B                     	;# 
  4536  019B                     	;# 
  4537  019B                     	;# 
  4538  019B                     	;# 
  4539  019C                     	;# 
  4540  019C                     	;# 
  4541  019C                     	;# 
  4542  019D                     	;# 
  4543  019D                     	;# 
  4544  019D                     	;# 
  4545  019E                     	;# 
  4546  019E                     	;# 
  4547  019E                     	;# 
  4548  019F                     	;# 
  4549  019F                     	;# 
  4550  019F                     	;# 
  4551  019F                     	;# 
  4552  019F                     	;# 
  4553  020C                     	;# 
  4554  020D                     	;# 
  4555  020E                     	;# 
  4556  0211                     	;# 
  4557  0211                     	;# 
  4558  0212                     	;# 
  4559  0212                     	;# 
  4560  0213                     	;# 
  4561  0213                     	;# 
  4562  0214                     	;# 
  4563  0214                     	;# 
  4564  0215                     	;# 
  4565  0215                     	;# 
  4566  0215                     	;# 
  4567  0215                     	;# 
  4568  0216                     	;# 
  4569  0216                     	;# 
  4570  0217                     	;# 
  4571  0217                     	;# 
  4572  0219                     	;# 
  4573  021A                     	;# 
  4574  021B                     	;# 
  4575  021C                     	;# 
  4576  021D                     	;# 
  4577  021D                     	;# 
  4578  021E                     	;# 
  4579  021F                     	;# 
  4580  028C                     	;# 
  4581  028D                     	;# 
  4582  028E                     	;# 
  4583  0291                     	;# 
  4584  0291                     	;# 
  4585  0292                     	;# 
  4586  0293                     	;# 
  4587  0294                     	;# 
  4588  0295                     	;# 
  4589  0295                     	;# 
  4590  0296                     	;# 
  4591  0297                     	;# 
  4592  0298                     	;# 
  4593  029F                     	;# 
  4594  030C                     	;# 
  4595  030D                     	;# 
  4596  030E                     	;# 
  4597  0311                     	;# 
  4598  0311                     	;# 
  4599  0312                     	;# 
  4600  0313                     	;# 
  4601  0314                     	;# 
  4602  0315                     	;# 
  4603  0315                     	;# 
  4604  0316                     	;# 
  4605  0317                     	;# 
  4606  0318                     	;# 
  4607  038C                     	;# 
  4608  038D                     	;# 
  4609  038E                     	;# 
  4610  0391                     	;# 
  4611  0392                     	;# 
  4612  0393                     	;# 
  4613  0394                     	;# 
  4614  0395                     	;# 
  4615  0396                     	;# 
  4616  0397                     	;# 
  4617  0398                     	;# 
  4618  0399                     	;# 
  4619  039A                     	;# 
  4620  039C                     	;# 
  4621  039D                     	;# 
  4622  039E                     	;# 
  4623  039F                     	;# 
  4624  0411                     	;# 
  4625  0411                     	;# 
  4626  0412                     	;# 
  4627  0413                     	;# 
  4628  0414                     	;# 
  4629  0415                     	;# 
  4630  0416                     	;# 
  4631  0417                     	;# 
  4632  0418                     	;# 
  4633  0418                     	;# 
  4634  0419                     	;# 
  4635  041A                     	;# 
  4636  041B                     	;# 
  4637  041C                     	;# 
  4638  041D                     	;# 
  4639  041E                     	;# 
  4640  041F                     	;# 
  4641  0498                     	;# 
  4642  0498                     	;# 
  4643  0499                     	;# 
  4644  049A                     	;# 
  4645  049B                     	;# 
  4646  049B                     	;# 
  4647  049C                     	;# 
  4648  049D                     	;# 
  4649  049E                     	;# 
  4650  049F                     	;# 
  4651  0617                     	;# 
  4652  0618                     	;# 
  4653  0619                     	;# 
  4654  0619                     	;# 
  4655  061A                     	;# 
  4656  061B                     	;# 
  4657  061C                     	;# 
  4658  061C                     	;# 
  4659  061F                     	;# 
  4660  0691                     	;# 
  4661  0692                     	;# 
  4662  0693                     	;# 
  4663  0694                     	;# 
  4664  0695                     	;# 
  4665  0696                     	;# 
  4666  0697                     	;# 
  4667  0698                     	;# 
  4668  0699                     	;# 
  4669  0711                     	;# 
  4670  0712                     	;# 
  4671  0713                     	;# 
  4672  0714                     	;# 
  4673  0715                     	;# 
  4674  0716                     	;# 
  4675  0717                     	;# 
  4676  0718                     	;# 
  4677  0719                     	;# 
  4678  0891                     	;# 
  4679  0891                     	;# 
  4680  0891                     	;# 
  4681  0891                     	;# 
  4682  0891                     	;# 
  4683  0891                     	;# 
  4684  0892                     	;# 
  4685  0892                     	;# 
  4686  0892                     	;# 
  4687  0893                     	;# 
  4688  0893                     	;# 
  4689  0893                     	;# 
  4690  0893                     	;# 
  4691  0893                     	;# 
  4692  0893                     	;# 
  4693  0894                     	;# 
  4694  0894                     	;# 
  4695  0894                     	;# 
  4696  0895                     	;# 
  4697  0895                     	;# 
  4698  0895                     	;# 
  4699  0896                     	;# 
  4700  0896                     	;# 
  4701  0896                     	;# 
  4702  089B                     	;# 
  4703  0911                     	;# 
  4704  0912                     	;# 
  4705  0913                     	;# 
  4706  0914                     	;# 
  4707  0915                     	;# 
  4708  0916                     	;# 
  4709  0918                     	;# 
  4710  0919                     	;# 
  4711  091A                     	;# 
  4712  091B                     	;# 
  4713  091C                     	;# 
  4714  091D                     	;# 
  4715  091E                     	;# 
  4716  091F                     	;# 
  4717  0E0F                     	;# 
  4718  0E10                     	;# 
  4719  0E11                     	;# 
  4720  0E12                     	;# 
  4721  0E13                     	;# 
  4722  0E14                     	;# 
  4723  0E15                     	;# 
  4724  0E16                     	;# 
  4725  0E17                     	;# 
  4726  0E18                     	;# 
  4727  0E19                     	;# 
  4728  0E1A                     	;# 
  4729  0E1B                     	;# 
  4730  0E1C                     	;# 
  4731  0E1D                     	;# 
  4732  0E1E                     	;# 
  4733  0E1F                     	;# 
  4734  0E20                     	;# 
  4735  0E21                     	;# 
  4736  0E22                     	;# 
  4737  0E24                     	;# 
  4738  0E25                     	;# 
  4739  0E28                     	;# 
  4740  0E29                     	;# 
  4741  0E2A                     	;# 
  4742  0E2B                     	;# 
  4743  0E2C                     	;# 
  4744  0E2D                     	;# 
  4745  0E2E                     	;# 
  4746  0E2F                     	;# 
  4747  0E90                     	;# 
  4748  0E91                     	;# 
  4749  0E92                     	;# 
  4750  0E94                     	;# 
  4751  0E95                     	;# 
  4752  0E9C                     	;# 
  4753  0E9D                     	;# 
  4754  0E9E                     	;# 
  4755  0E9F                     	;# 
  4756  0EA0                     	;# 
  4757  0EA1                     	;# 
  4758  0EA2                     	;# 
  4759  0EA3                     	;# 
  4760  0EA4                     	;# 
  4761  0EA5                     	;# 
  4762  0EA6                     	;# 
  4763  0EA7                     	;# 
  4764  0F0F                     	;# 
  4765  0F10                     	;# 
  4766  0F11                     	;# 
  4767  0F12                     	;# 
  4768  0F13                     	;# 
  4769  0F14                     	;# 
  4770  0F15                     	;# 
  4771  0F16                     	;# 
  4772  0F17                     	;# 
  4773  0F18                     	;# 
  4774  0F19                     	;# 
  4775  0F1A                     	;# 
  4776  0F1B                     	;# 
  4777  0F1C                     	;# 
  4778  0F1D                     	;# 
  4779  0F1E                     	;# 
  4780  0F1F                     	;# 
  4781  0F20                     	;# 
  4782  0F21                     	;# 
  4783  0F22                     	;# 
  4784  0F23                     	;# 
  4785  0F24                     	;# 
  4786  0F25                     	;# 
  4787  0F26                     	;# 
  4788  0F27                     	;# 
  4789  0F28                     	;# 
  4790  0F29                     	;# 
  4791  0F2A                     	;# 
  4792  0F2B                     	;# 
  4793  0F2C                     	;# 
  4794  0F2D                     	;# 
  4795  0F2E                     	;# 
  4796  0F2F                     	;# 
  4797  0F30                     	;# 
  4798  0F31                     	;# 
  4799  0F32                     	;# 
  4800  0F33                     	;# 
  4801  0F34                     	;# 
  4802  0F35                     	;# 
  4803  0F36                     	;# 
  4804  0F37                     	;# 
  4805  0FE4                     	;# 
  4806  0FE5                     	;# 
  4807  0FE6                     	;# 
  4808  0FE7                     	;# 
  4809  0FE8                     	;# 
  4810  0FE9                     	;# 
  4811  0FEA                     	;# 
  4812  0FEB                     	;# 
  4813  0FED                     	;# 
  4814  0FEE                     	;# 
  4815  0FEF                     	;# 
  4816  0000                     	;# 
  4817  0001                     	;# 
  4818  0002                     	;# 
  4819  0003                     	;# 
  4820  0004                     	;# 
  4821  0005                     	;# 
  4822  0006                     	;# 
  4823  0007                     	;# 
  4824  0008                     	;# 
  4825  0009                     	;# 
  4826  000A                     	;# 
  4827  000B                     	;# 
  4828  000C                     	;# 
  4829  000D                     	;# 
  4830  000E                     	;# 
  4831  0010                     	;# 
  4832  0011                     	;# 
  4833  0012                     	;# 
  4834  0013                     	;# 
  4835  0014                     	;# 
  4836  0015                     	;# 
  4837  0015                     	;# 
  4838  0016                     	;# 
  4839  0016                     	;# 
  4840  0017                     	;# 
  4841  0018                     	;# 
  4842  0019                     	;# 
  4843  0019                     	;# 
  4844  001A                     	;# 
  4845  001B                     	;# 
  4846  001C                     	;# 
  4847  001D                     	;# 
  4848  001E                     	;# 
  4849  001F                     	;# 
  4850  008C                     	;# 
  4851  008D                     	;# 
  4852  008E                     	;# 
  4853  0090                     	;# 
  4854  0091                     	;# 
  4855  0092                     	;# 
  4856  0093                     	;# 
  4857  0094                     	;# 
  4858  0097                     	;# 
  4859  009B                     	;# 
  4860  009B                     	;# 
  4861  009C                     	;# 
  4862  009D                     	;# 
  4863  009E                     	;# 
  4864  009F                     	;# 
  4865  010C                     	;# 
  4866  010D                     	;# 
  4867  010E                     	;# 
  4868  0111                     	;# 
  4869  0112                     	;# 
  4870  0113                     	;# 
  4871  0114                     	;# 
  4872  0115                     	;# 
  4873  0116                     	;# 
  4874  0117                     	;# 
  4875  0118                     	;# 
  4876  0119                     	;# 
  4877  018C                     	;# 
  4878  018D                     	;# 
  4879  018E                     	;# 
  4880  0197                     	;# 
  4881  0199                     	;# 
  4882  0199                     	;# 
  4883  0199                     	;# 
  4884  019A                     	;# 
  4885  019A                     	;# 
  4886  019A                     	;# 
  4887  019B                     	;# 
  4888  019B                     	;# 
  4889  019B                     	;# 
  4890  019B                     	;# 
  4891  019B                     	;# 
  4892  019C                     	;# 
  4893  019C                     	;# 
  4894  019C                     	;# 
  4895  019D                     	;# 
  4896  019D                     	;# 
  4897  019D                     	;# 
  4898  019E                     	;# 
  4899  019E                     	;# 
  4900  019E                     	;# 
  4901  019F                     	;# 
  4902  019F                     	;# 
  4903  019F                     	;# 
  4904  019F                     	;# 
  4905  019F                     	;# 
  4906  020C                     	;# 
  4907  020D                     	;# 
  4908  020E                     	;# 
  4909  0211                     	;# 
  4910  0211                     	;# 
  4911  0212                     	;# 
  4912  0212                     	;# 
  4913  0213                     	;# 
  4914  0213                     	;# 
  4915  0214                     	;# 
  4916  0214                     	;# 
  4917  0215                     	;# 
  4918  0215                     	;# 
  4919  0215                     	;# 
  4920  0215                     	;# 
  4921  0216                     	;# 
  4922  0216                     	;# 
  4923  0217                     	;# 
  4924  0217                     	;# 
  4925  0219                     	;# 
  4926  021A                     	;# 
  4927  021B                     	;# 
  4928  021C                     	;# 
  4929  021D                     	;# 
  4930  021D                     	;# 
  4931  021E                     	;# 
  4932  021F                     	;# 
  4933  028C                     	;# 
  4934  028D                     	;# 
  4935  028E                     	;# 
  4936  0291                     	;# 
  4937  0291                     	;# 
  4938  0292                     	;# 
  4939  0293                     	;# 
  4940  0294                     	;# 
  4941  0295                     	;# 
  4942  0295                     	;# 
  4943  0296                     	;# 
  4944  0297                     	;# 
  4945  0298                     	;# 
  4946  029F                     	;# 
  4947  030C                     	;# 
  4948  030D                     	;# 
  4949  030E                     	;# 
  4950  0311                     	;# 
  4951  0311                     	;# 
  4952  0312                     	;# 
  4953  0313                     	;# 
  4954  0314                     	;# 
  4955  0315                     	;# 
  4956  0315                     	;# 
  4957  0316                     	;# 
  4958  0317                     	;# 
  4959  0318                     	;# 
  4960  038C                     	;# 
  4961  038D                     	;# 
  4962  038E                     	;# 
  4963  0391                     	;# 
  4964  0392                     	;# 
  4965  0393                     	;# 
  4966  0394                     	;# 
  4967  0395                     	;# 
  4968  0396                     	;# 
  4969  0397                     	;# 
  4970  0398                     	;# 
  4971  0399                     	;# 
  4972  039A                     	;# 
  4973  039C                     	;# 
  4974  039D                     	;# 
  4975  039E                     	;# 
  4976  039F                     	;# 
  4977  0411                     	;# 
  4978  0411                     	;# 
  4979  0412                     	;# 
  4980  0413                     	;# 
  4981  0414                     	;# 
  4982  0415                     	;# 
  4983  0416                     	;# 
  4984  0417                     	;# 
  4985  0418                     	;# 
  4986  0418                     	;# 
  4987  0419                     	;# 
  4988  041A                     	;# 
  4989  041B                     	;# 
  4990  041C                     	;# 
  4991  041D                     	;# 
  4992  041E                     	;# 
  4993  041F                     	;# 
  4994  0498                     	;# 
  4995  0498                     	;# 
  4996  0499                     	;# 
  4997  049A                     	;# 
  4998  049B                     	;# 
  4999  049B                     	;# 
  5000  049C                     	;# 
  5001  049D                     	;# 
  5002  049E                     	;# 
  5003  049F                     	;# 
  5004  0617                     	;# 
  5005  0618                     	;# 
  5006  0619                     	;# 
  5007  0619                     	;# 
  5008  061A                     	;# 
  5009  061B                     	;# 
  5010  061C                     	;# 
  5011  061C                     	;# 
  5012  061F                     	;# 
  5013  0691                     	;# 
  5014  0692                     	;# 
  5015  0693                     	;# 
  5016  0694                     	;# 
  5017  0695                     	;# 
  5018  0696                     	;# 
  5019  0697                     	;# 
  5020  0698                     	;# 
  5021  0699                     	;# 
  5022  0711                     	;# 
  5023  0712                     	;# 
  5024  0713                     	;# 
  5025  0714                     	;# 
  5026  0715                     	;# 
  5027  0716                     	;# 
  5028  0717                     	;# 
  5029  0718                     	;# 
  5030  0719                     	;# 
  5031  0891                     	;# 
  5032  0891                     	;# 
  5033  0891                     	;# 
  5034  0891                     	;# 
  5035  0891                     	;# 
  5036  0891                     	;# 
  5037  0892                     	;# 
  5038  0892                     	;# 
  5039  0892                     	;# 
  5040  0893                     	;# 
  5041  0893                     	;# 
  5042  0893                     	;# 
  5043  0893                     	;# 
  5044  0893                     	;# 
  5045  0893                     	;# 
  5046  0894                     	;# 
  5047  0894                     	;# 
  5048  0894                     	;# 
  5049  0895                     	;# 
  5050  0895                     	;# 
  5051  0895                     	;# 
  5052  0896                     	;# 
  5053  0896                     	;# 
  5054  0896                     	;# 
  5055  089B                     	;# 
  5056  0911                     	;# 
  5057  0912                     	;# 
  5058  0913                     	;# 
  5059  0914                     	;# 
  5060  0915                     	;# 
  5061  0916                     	;# 
  5062  0918                     	;# 
  5063  0919                     	;# 
  5064  091A                     	;# 
  5065  091B                     	;# 
  5066  091C                     	;# 
  5067  091D                     	;# 
  5068  091E                     	;# 
  5069  091F                     	;# 
  5070  0E0F                     	;# 
  5071  0E10                     	;# 
  5072  0E11                     	;# 
  5073  0E12                     	;# 
  5074  0E13                     	;# 
  5075  0E14                     	;# 
  5076  0E15                     	;# 
  5077  0E16                     	;# 
  5078  0E17                     	;# 
  5079  0E18                     	;# 
  5080  0E19                     	;# 
  5081  0E1A                     	;# 
  5082  0E1B                     	;# 
  5083  0E1C                     	;# 
  5084  0E1D                     	;# 
  5085  0E1E                     	;# 
  5086  0E1F                     	;# 
  5087  0E20                     	;# 
  5088  0E21                     	;# 
  5089  0E22                     	;# 
  5090  0E24                     	;# 
  5091  0E25                     	;# 
  5092  0E28                     	;# 
  5093  0E29                     	;# 
  5094  0E2A                     	;# 
  5095  0E2B                     	;# 
  5096  0E2C                     	;# 
  5097  0E2D                     	;# 
  5098  0E2E                     	;# 
  5099  0E2F                     	;# 
  5100  0E90                     	;# 
  5101  0E91                     	;# 
  5102  0E92                     	;# 
  5103  0E94                     	;# 
  5104  0E95                     	;# 
  5105  0E9C                     	;# 
  5106  0E9D                     	;# 
  5107  0E9E                     	;# 
  5108  0E9F                     	;# 
  5109  0EA0                     	;# 
  5110  0EA1                     	;# 
  5111  0EA2                     	;# 
  5112  0EA3                     	;# 
  5113  0EA4                     	;# 
  5114  0EA5                     	;# 
  5115  0EA6                     	;# 
  5116  0EA7                     	;# 
  5117  0F0F                     	;# 
  5118  0F10                     	;# 
  5119  0F11                     	;# 
  5120  0F12                     	;# 
  5121  0F13                     	;# 
  5122  0F14                     	;# 
  5123  0F15                     	;# 
  5124  0F16                     	;# 
  5125  0F17                     	;# 
  5126  0F18                     	;# 
  5127  0F19                     	;# 
  5128  0F1A                     	;# 
  5129  0F1B                     	;# 
  5130  0F1C                     	;# 
  5131  0F1D                     	;# 
  5132  0F1E                     	;# 
  5133  0F1F                     	;# 
  5134  0F20                     	;# 
  5135  0F21                     	;# 
  5136  0F22                     	;# 
  5137  0F23                     	;# 
  5138  0F24                     	;# 
  5139  0F25                     	;# 
  5140  0F26                     	;# 
  5141  0F27                     	;# 
  5142  0F28                     	;# 
  5143  0F29                     	;# 
  5144  0F2A                     	;# 
  5145  0F2B                     	;# 
  5146  0F2C                     	;# 
  5147  0F2D                     	;# 
  5148  0F2E                     	;# 
  5149  0F2F                     	;# 
  5150  0F30                     	;# 
  5151  0F31                     	;# 
  5152  0F32                     	;# 
  5153  0F33                     	;# 
  5154  0F34                     	;# 
  5155  0F35                     	;# 
  5156  0F36                     	;# 
  5157  0F37                     	;# 
  5158  0FE4                     	;# 
  5159  0FE5                     	;# 
  5160  0FE6                     	;# 
  5161  0FE7                     	;# 
  5162  0FE8                     	;# 
  5163  0FE9                     	;# 
  5164  0FEA                     	;# 
  5165  0FEB                     	;# 
  5166  0FED                     	;# 
  5167  0FEE                     	;# 
  5168  0FEF                     	;# 
  5169  0000                     	;# 
  5170  0001                     	;# 
  5171  0002                     	;# 
  5172  0003                     	;# 
  5173  0004                     	;# 
  5174  0005                     	;# 
  5175  0006                     	;# 
  5176  0007                     	;# 
  5177  0008                     	;# 
  5178  0009                     	;# 
  5179  000A                     	;# 
  5180  000B                     	;# 
  5181  000C                     	;# 
  5182  000D                     	;# 
  5183  000E                     	;# 
  5184  0010                     	;# 
  5185  0011                     	;# 
  5186  0012                     	;# 
  5187  0013                     	;# 
  5188  0014                     	;# 
  5189  0015                     	;# 
  5190  0015                     	;# 
  5191  0016                     	;# 
  5192  0016                     	;# 
  5193  0017                     	;# 
  5194  0018                     	;# 
  5195  0019                     	;# 
  5196  0019                     	;# 
  5197  001A                     	;# 
  5198  001B                     	;# 
  5199  001C                     	;# 
  5200  001D                     	;# 
  5201  001E                     	;# 
  5202  001F                     	;# 
  5203  008C                     	;# 
  5204  008D                     	;# 
  5205  008E                     	;# 
  5206  0090                     	;# 
  5207  0091                     	;# 
  5208  0092                     	;# 
  5209  0093                     	;# 
  5210  0094                     	;# 
  5211  0097                     	;# 
  5212  009B                     	;# 
  5213  009B                     	;# 
  5214  009C                     	;# 
  5215  009D                     	;# 
  5216  009E                     	;# 
  5217  009F                     	;# 
  5218  010C                     	;# 
  5219  010D                     	;# 
  5220  010E                     	;# 
  5221  0111                     	;# 
  5222  0112                     	;# 
  5223  0113                     	;# 
  5224  0114                     	;# 
  5225  0115                     	;# 
  5226  0116                     	;# 
  5227  0117                     	;# 
  5228  0118                     	;# 
  5229  0119                     	;# 
  5230  018C                     	;# 
  5231  018D                     	;# 
  5232  018E                     	;# 
  5233  0197                     	;# 
  5234  0199                     	;# 
  5235  0199                     	;# 
  5236  0199                     	;# 
  5237  019A                     	;# 
  5238  019A                     	;# 
  5239  019A                     	;# 
  5240  019B                     	;# 
  5241  019B                     	;# 
  5242  019B                     	;# 
  5243  019B                     	;# 
  5244  019B                     	;# 
  5245  019C                     	;# 
  5246  019C                     	;# 
  5247  019C                     	;# 
  5248  019D                     	;# 
  5249  019D                     	;# 
  5250  019D                     	;# 
  5251  019E                     	;# 
  5252  019E                     	;# 
  5253  019E                     	;# 
  5254  019F                     	;# 
  5255  019F                     	;# 
  5256  019F                     	;# 
  5257  019F                     	;# 
  5258  019F                     	;# 
  5259  020C                     	;# 
  5260  020D                     	;# 
  5261  020E                     	;# 
  5262  0211                     	;# 
  5263  0211                     	;# 
  5264  0212                     	;# 
  5265  0212                     	;# 
  5266  0213                     	;# 
  5267  0213                     	;# 
  5268  0214                     	;# 
  5269  0214                     	;# 
  5270  0215                     	;# 
  5271  0215                     	;# 
  5272  0215                     	;# 
  5273  0215                     	;# 
  5274  0216                     	;# 
  5275  0216                     	;# 
  5276  0217                     	;# 
  5277  0217                     	;# 
  5278  0219                     	;# 
  5279  021A                     	;# 
  5280  021B                     	;# 
  5281  021C                     	;# 
  5282  021D                     	;# 
  5283  021D                     	;# 
  5284  021E                     	;# 
  5285  021F                     	;# 
  5286  028C                     	;# 
  5287  028D                     	;# 
  5288  028E                     	;# 
  5289  0291                     	;# 
  5290  0291                     	;# 
  5291  0292                     	;# 
  5292  0293                     	;# 
  5293  0294                     	;# 
  5294  0295                     	;# 
  5295  0295                     	;# 
  5296  0296                     	;# 
  5297  0297                     	;# 
  5298  0298                     	;# 
  5299  029F                     	;# 
  5300  030C                     	;# 
  5301  030D                     	;# 
  5302  030E                     	;# 
  5303  0311                     	;# 
  5304  0311                     	;# 
  5305  0312                     	;# 
  5306  0313                     	;# 
  5307  0314                     	;# 
  5308  0315                     	;# 
  5309  0315                     	;# 
  5310  0316                     	;# 
  5311  0317                     	;# 
  5312  0318                     	;# 
  5313  038C                     	;# 
  5314  038D                     	;# 
  5315  038E                     	;# 
  5316  0391                     	;# 
  5317  0392                     	;# 
  5318  0393                     	;# 
  5319  0394                     	;# 
  5320  0395                     	;# 
  5321  0396                     	;# 
  5322  0397                     	;# 
  5323  0398                     	;# 
  5324  0399                     	;# 
  5325  039A                     	;# 
  5326  039C                     	;# 
  5327  039D                     	;# 
  5328  039E                     	;# 
  5329  039F                     	;# 
  5330  0411                     	;# 
  5331  0411                     	;# 
  5332  0412                     	;# 
  5333  0413                     	;# 
  5334  0414                     	;# 
  5335  0415                     	;# 
  5336  0416                     	;# 
  5337  0417                     	;# 
  5338  0418                     	;# 
  5339  0418                     	;# 
  5340  0419                     	;# 
  5341  041A                     	;# 
  5342  041B                     	;# 
  5343  041C                     	;# 
  5344  041D                     	;# 
  5345  041E                     	;# 
  5346  041F                     	;# 
  5347  0498                     	;# 
  5348  0498                     	;# 
  5349  0499                     	;# 
  5350  049A                     	;# 
  5351  049B                     	;# 
  5352  049B                     	;# 
  5353  049C                     	;# 
  5354  049D                     	;# 
  5355  049E                     	;# 
  5356  049F                     	;# 
  5357  0617                     	;# 
  5358  0618                     	;# 
  5359  0619                     	;# 
  5360  0619                     	;# 
  5361  061A                     	;# 
  5362  061B                     	;# 
  5363  061C                     	;# 
  5364  061C                     	;# 
  5365  061F                     	;# 
  5366  0691                     	;# 
  5367  0692                     	;# 
  5368  0693                     	;# 
  5369  0694                     	;# 
  5370  0695                     	;# 
  5371  0696                     	;# 
  5372  0697                     	;# 
  5373  0698                     	;# 
  5374  0699                     	;# 
  5375  0711                     	;# 
  5376  0712                     	;# 
  5377  0713                     	;# 
  5378  0714                     	;# 
  5379  0715                     	;# 
  5380  0716                     	;# 
  5381  0717                     	;# 
  5382  0718                     	;# 
  5383  0719                     	;# 
  5384  0891                     	;# 
  5385  0891                     	;# 
  5386  0891                     	;# 
  5387  0891                     	;# 
  5388  0891                     	;# 
  5389  0891                     	;# 
  5390  0892                     	;# 
  5391  0892                     	;# 
  5392  0892                     	;# 
  5393  0893                     	;# 
  5394  0893                     	;# 
  5395  0893                     	;# 
  5396  0893                     	;# 
  5397  0893                     	;# 
  5398  0893                     	;# 
  5399  0894                     	;# 
  5400  0894                     	;# 
  5401  0894                     	;# 
  5402  0895                     	;# 
  5403  0895                     	;# 
  5404  0895                     	;# 
  5405  0896                     	;# 
  5406  0896                     	;# 
  5407  0896                     	;# 
  5408  089B                     	;# 
  5409  0911                     	;# 
  5410  0912                     	;# 
  5411  0913                     	;# 
  5412  0914                     	;# 
  5413  0915                     	;# 
  5414  0916                     	;# 
  5415  0918                     	;# 
  5416  0919                     	;# 
  5417  091A                     	;# 
  5418  091B                     	;# 
  5419  091C                     	;# 
  5420  091D                     	;# 
  5421  091E                     	;# 
  5422  091F                     	;# 
  5423  0E0F                     	;# 
  5424  0E10                     	;# 
  5425  0E11                     	;# 
  5426  0E12                     	;# 
  5427  0E13                     	;# 
  5428  0E14                     	;# 
  5429  0E15                     	;# 
  5430  0E16                     	;# 
  5431  0E17                     	;# 
  5432  0E18                     	;# 
  5433  0E19                     	;# 
  5434  0E1A                     	;# 
  5435  0E1B                     	;# 
  5436  0E1C                     	;# 
  5437  0E1D                     	;# 
  5438  0E1E                     	;# 
  5439  0E1F                     	;# 
  5440  0E20                     	;# 
  5441  0E21                     	;# 
  5442  0E22                     	;# 
  5443  0E24                     	;# 
  5444  0E25                     	;# 
  5445  0E28                     	;# 
  5446  0E29                     	;# 
  5447  0E2A                     	;# 
  5448  0E2B                     	;# 
  5449  0E2C                     	;# 
  5450  0E2D                     	;# 
  5451  0E2E                     	;# 
  5452  0E2F                     	;# 
  5453  0E90                     	;# 
  5454  0E91                     	;# 
  5455  0E92                     	;# 
  5456  0E94                     	;# 
  5457  0E95                     	;# 
  5458  0E9C                     	;# 
  5459  0E9D                     	;# 
  5460  0E9E                     	;# 
  5461  0E9F                     	;# 
  5462  0EA0                     	;# 
  5463  0EA1                     	;# 
  5464  0EA2                     	;# 
  5465  0EA3                     	;# 
  5466  0EA4                     	;# 
  5467  0EA5                     	;# 
  5468  0EA6                     	;# 
  5469  0EA7                     	;# 
  5470  0F0F                     	;# 
  5471  0F10                     	;# 
  5472  0F11                     	;# 
  5473  0F12                     	;# 
  5474  0F13                     	;# 
  5475  0F14                     	;# 
  5476  0F15                     	;# 
  5477  0F16                     	;# 
  5478  0F17                     	;# 
  5479  0F18                     	;# 
  5480  0F19                     	;# 
  5481  0F1A                     	;# 
  5482  0F1B                     	;# 
  5483  0F1C                     	;# 
  5484  0F1D                     	;# 
  5485  0F1E                     	;# 
  5486  0F1F                     	;# 
  5487  0F20                     	;# 
  5488  0F21                     	;# 
  5489  0F22                     	;# 
  5490  0F23                     	;# 
  5491  0F24                     	;# 
  5492  0F25                     	;# 
  5493  0F26                     	;# 
  5494  0F27                     	;# 
  5495  0F28                     	;# 
  5496  0F29                     	;# 
  5497  0F2A                     	;# 
  5498  0F2B                     	;# 
  5499  0F2C                     	;# 
  5500  0F2D                     	;# 
  5501  0F2E                     	;# 
  5502  0F2F                     	;# 
  5503  0F30                     	;# 
  5504  0F31                     	;# 
  5505  0F32                     	;# 
  5506  0F33                     	;# 
  5507  0F34                     	;# 
  5508  0F35                     	;# 
  5509  0F36                     	;# 
  5510  0F37                     	;# 
  5511  0FE4                     	;# 
  5512  0FE5                     	;# 
  5513  0FE6                     	;# 
  5514  0FE7                     	;# 
  5515  0FE8                     	;# 
  5516  0FE9                     	;# 
  5517  0FEA                     	;# 
  5518  0FEB                     	;# 
  5519  0FED                     	;# 
  5520  0FEE                     	;# 
  5521  0FEF                     	;# 
  5522  0000                     	;# 
  5523  0001                     	;# 
  5524  0002                     	;# 
  5525  0003                     	;# 
  5526  0004                     	;# 
  5527  0005                     	;# 
  5528  0006                     	;# 
  5529  0007                     	;# 
  5530  0008                     	;# 
  5531  0009                     	;# 
  5532  000A                     	;# 
  5533  000B                     	;# 
  5534  000C                     	;# 
  5535  000D                     	;# 
  5536  000E                     	;# 
  5537  0010                     	;# 
  5538  0011                     	;# 
  5539  0012                     	;# 
  5540  0013                     	;# 
  5541  0014                     	;# 
  5542  0015                     	;# 
  5543  0015                     	;# 
  5544  0016                     	;# 
  5545  0016                     	;# 
  5546  0017                     	;# 
  5547  0018                     	;# 
  5548  0019                     	;# 
  5549  0019                     	;# 
  5550  001A                     	;# 
  5551  001B                     	;# 
  5552  001C                     	;# 
  5553  001D                     	;# 
  5554  001E                     	;# 
  5555  001F                     	;# 
  5556  008C                     	;# 
  5557  008D                     	;# 
  5558  008E                     	;# 
  5559  0090                     	;# 
  5560  0091                     	;# 
  5561  0092                     	;# 
  5562  0093                     	;# 
  5563  0094                     	;# 
  5564  0097                     	;# 
  5565  009B                     	;# 
  5566  009B                     	;# 
  5567  009C                     	;# 
  5568  009D                     	;# 
  5569  009E                     	;# 
  5570  009F                     	;# 
  5571  010C                     	;# 
  5572  010D                     	;# 
  5573  010E                     	;# 
  5574  0111                     	;# 
  5575  0112                     	;# 
  5576  0113                     	;# 
  5577  0114                     	;# 
  5578  0115                     	;# 
  5579  0116                     	;# 
  5580  0117                     	;# 
  5581  0118                     	;# 
  5582  0119                     	;# 
  5583  018C                     	;# 
  5584  018D                     	;# 
  5585  018E                     	;# 
  5586  0197                     	;# 
  5587  0199                     	;# 
  5588  0199                     	;# 
  5589  0199                     	;# 
  5590  019A                     	;# 
  5591  019A                     	;# 
  5592  019A                     	;# 
  5593  019B                     	;# 
  5594  019B                     	;# 
  5595  019B                     	;# 
  5596  019B                     	;# 
  5597  019B                     	;# 
  5598  019C                     	;# 
  5599  019C                     	;# 
  5600  019C                     	;# 
  5601  019D                     	;# 
  5602  019D                     	;# 
  5603  019D                     	;# 
  5604  019E                     	;# 
  5605  019E                     	;# 
  5606  019E                     	;# 
  5607  019F                     	;# 
  5608  019F                     	;# 
  5609  019F                     	;# 
  5610  019F                     	;# 
  5611  019F                     	;# 
  5612  020C                     	;# 
  5613  020D                     	;# 
  5614  020E                     	;# 
  5615  0211                     	;# 
  5616  0211                     	;# 
  5617  0212                     	;# 
  5618  0212                     	;# 
  5619  0213                     	;# 
  5620  0213                     	;# 
  5621  0214                     	;# 
  5622  0214                     	;# 
  5623  0215                     	;# 
  5624  0215                     	;# 
  5625  0215                     	;# 
  5626  0215                     	;# 
  5627  0216                     	;# 
  5628  0216                     	;# 
  5629  0217                     	;# 
  5630  0217                     	;# 
  5631  0219                     	;# 
  5632  021A                     	;# 
  5633  021B                     	;# 
  5634  021C                     	;# 
  5635  021D                     	;# 
  5636  021D                     	;# 
  5637  021E                     	;# 
  5638  021F                     	;# 
  5639  028C                     	;# 
  5640  028D                     	;# 
  5641  028E                     	;# 
  5642  0291                     	;# 
  5643  0291                     	;# 
  5644  0292                     	;# 
  5645  0293                     	;# 
  5646  0294                     	;# 
  5647  0295                     	;# 
  5648  0295                     	;# 
  5649  0296                     	;# 
  5650  0297                     	;# 
  5651  0298                     	;# 
  5652  029F                     	;# 
  5653  030C                     	;# 
  5654  030D                     	;# 
  5655  030E                     	;# 
  5656  0311                     	;# 
  5657  0311                     	;# 
  5658  0312                     	;# 
  5659  0313                     	;# 
  5660  0314                     	;# 
  5661  0315                     	;# 
  5662  0315                     	;# 
  5663  0316                     	;# 
  5664  0317                     	;# 
  5665  0318                     	;# 
  5666  038C                     	;# 
  5667  038D                     	;# 
  5668  038E                     	;# 
  5669  0391                     	;# 
  5670  0392                     	;# 
  5671  0393                     	;# 
  5672  0394                     	;# 
  5673  0395                     	;# 
  5674  0396                     	;# 
  5675  0397                     	;# 
  5676  0398                     	;# 
  5677  0399                     	;# 
  5678  039A                     	;# 
  5679  039C                     	;# 
  5680  039D                     	;# 
  5681  039E                     	;# 
  5682  039F                     	;# 
  5683  0411                     	;# 
  5684  0411                     	;# 
  5685  0412                     	;# 
  5686  0413                     	;# 
  5687  0414                     	;# 
  5688  0415                     	;# 
  5689  0416                     	;# 
  5690  0417                     	;# 
  5691  0418                     	;# 
  5692  0418                     	;# 
  5693  0419                     	;# 
  5694  041A                     	;# 
  5695  041B                     	;# 
  5696  041C                     	;# 
  5697  041D                     	;# 
  5698  041E                     	;# 
  5699  041F                     	;# 
  5700  0498                     	;# 
  5701  0498                     	;# 
  5702  0499                     	;# 
  5703  049A                     	;# 
  5704  049B                     	;# 
  5705  049B                     	;# 
  5706  049C                     	;# 
  5707  049D                     	;# 
  5708  049E                     	;# 
  5709  049F                     	;# 
  5710  0617                     	;# 
  5711  0618                     	;# 
  5712  0619                     	;# 
  5713  0619                     	;# 
  5714  061A                     	;# 
  5715  061B                     	;# 
  5716  061C                     	;# 
  5717  061C                     	;# 
  5718  061F                     	;# 
  5719  0691                     	;# 
  5720  0692                     	;# 
  5721  0693                     	;# 
  5722  0694                     	;# 
  5723  0695                     	;# 
  5724  0696                     	;# 
  5725  0697                     	;# 
  5726  0698                     	;# 
  5727  0699                     	;# 
  5728  0711                     	;# 
  5729  0712                     	;# 
  5730  0713                     	;# 
  5731  0714                     	;# 
  5732  0715                     	;# 
  5733  0716                     	;# 
  5734  0717                     	;# 
  5735  0718                     	;# 
  5736  0719                     	;# 
  5737  0891                     	;# 
  5738  0891                     	;# 
  5739  0891                     	;# 
  5740  0891                     	;# 
  5741  0891                     	;# 
  5742  0891                     	;# 
  5743  0892                     	;# 
  5744  0892                     	;# 
  5745  0892                     	;# 
  5746  0893                     	;# 
  5747  0893                     	;# 
  5748  0893                     	;# 
  5749  0893                     	;# 
  5750  0893                     	;# 
  5751  0893                     	;# 
  5752  0894                     	;# 
  5753  0894                     	;# 
  5754  0894                     	;# 
  5755  0895                     	;# 
  5756  0895                     	;# 
  5757  0895                     	;# 
  5758  0896                     	;# 
  5759  0896                     	;# 
  5760  0896                     	;# 
  5761  089B                     	;# 
  5762  0911                     	;# 
  5763  0912                     	;# 
  5764  0913                     	;# 
  5765  0914                     	;# 
  5766  0915                     	;# 
  5767  0916                     	;# 
  5768  0918                     	;# 
  5769  0919                     	;# 
  5770  091A                     	;# 
  5771  091B                     	;# 
  5772  091C                     	;# 
  5773  091D                     	;# 
  5774  091E                     	;# 
  5775  091F                     	;# 
  5776  0E0F                     	;# 
  5777  0E10                     	;# 
  5778  0E11                     	;# 
  5779  0E12                     	;# 
  5780  0E13                     	;# 
  5781  0E14                     	;# 
  5782  0E15                     	;# 
  5783  0E16                     	;# 
  5784  0E17                     	;# 
  5785  0E18                     	;# 
  5786  0E19                     	;# 
  5787  0E1A                     	;# 
  5788  0E1B                     	;# 
  5789  0E1C                     	;# 
  5790  0E1D                     	;# 
  5791  0E1E                     	;# 
  5792  0E1F                     	;# 
  5793  0E20                     	;# 
  5794  0E21                     	;# 
  5795  0E22                     	;# 
  5796  0E24                     	;# 
  5797  0E25                     	;# 
  5798  0E28                     	;# 
  5799  0E29                     	;# 
  5800  0E2A                     	;# 
  5801  0E2B                     	;# 
  5802  0E2C                     	;# 
  5803  0E2D                     	;# 
  5804  0E2E                     	;# 
  5805  0E2F                     	;# 
  5806  0E90                     	;# 
  5807  0E91                     	;# 
  5808  0E92                     	;# 
  5809  0E94                     	;# 
  5810  0E95                     	;# 
  5811  0E9C                     	;# 
  5812  0E9D                     	;# 
  5813  0E9E                     	;# 
  5814  0E9F                     	;# 
  5815  0EA0                     	;# 
  5816  0EA1                     	;# 
  5817  0EA2                     	;# 
  5818  0EA3                     	;# 
  5819  0EA4                     	;# 
  5820  0EA5                     	;# 
  5821  0EA6                     	;# 
  5822  0EA7                     	;# 
  5823  0F0F                     	;# 
  5824  0F10                     	;# 
  5825  0F11                     	;# 
  5826  0F12                     	;# 
  5827  0F13                     	;# 
  5828  0F14                     	;# 
  5829  0F15                     	;# 
  5830  0F16                     	;# 
  5831  0F17                     	;# 
  5832  0F18                     	;# 
  5833  0F19                     	;# 
  5834  0F1A                     	;# 
  5835  0F1B                     	;# 
  5836  0F1C                     	;# 
  5837  0F1D                     	;# 
  5838  0F1E                     	;# 
  5839  0F1F                     	;# 
  5840  0F20                     	;# 
  5841  0F21                     	;# 
  5842  0F22                     	;# 
  5843  0F23                     	;# 
  5844  0F24                     	;# 
  5845  0F25                     	;# 
  5846  0F26                     	;# 
  5847  0F27                     	;# 
  5848  0F28                     	;# 
  5849  0F29                     	;# 
  5850  0F2A                     	;# 
  5851  0F2B                     	;# 
  5852  0F2C                     	;# 
  5853  0F2D                     	;# 
  5854  0F2E                     	;# 
  5855  0F2F                     	;# 
  5856  0F30                     	;# 
  5857  0F31                     	;# 
  5858  0F32                     	;# 
  5859  0F33                     	;# 
  5860  0F34                     	;# 
  5861  0F35                     	;# 
  5862  0F36                     	;# 
  5863  0F37                     	;# 
  5864  0FE4                     	;# 
  5865  0FE5                     	;# 
  5866  0FE6                     	;# 
  5867  0FE7                     	;# 
  5868  0FE8                     	;# 
  5869  0FE9                     	;# 
  5870  0FEA                     	;# 
  5871  0FEB                     	;# 
  5872  0FED                     	;# 
  5873  0FEE                     	;# 
  5874  0FEF                     	;# 
  5875  0000                     	;# 
  5876  0001                     	;# 
  5877  0002                     	;# 
  5878  0003                     	;# 
  5879  0004                     	;# 
  5880  0005                     	;# 
  5881  0006                     	;# 
  5882  0007                     	;# 
  5883  0008                     	;# 
  5884  0009                     	;# 
  5885  000A                     	;# 
  5886  000B                     	;# 
  5887  000C                     	;# 
  5888  000D                     	;# 
  5889  000E                     	;# 
  5890  0010                     	;# 
  5891  0011                     	;# 
  5892  0012                     	;# 
  5893  0013                     	;# 
  5894  0014                     	;# 
  5895  0015                     	;# 
  5896  0015                     	;# 
  5897  0016                     	;# 
  5898  0016                     	;# 
  5899  0017                     	;# 
  5900  0018                     	;# 
  5901  0019                     	;# 
  5902  0019                     	;# 
  5903  001A                     	;# 
  5904  001B                     	;# 
  5905  001C                     	;# 
  5906  001D                     	;# 
  5907  001E                     	;# 
  5908  001F                     	;# 
  5909  008C                     	;# 
  5910  008D                     	;# 
  5911  008E                     	;# 
  5912  0090                     	;# 
  5913  0091                     	;# 
  5914  0092                     	;# 
  5915  0093                     	;# 
  5916  0094                     	;# 
  5917  0097                     	;# 
  5918  009B                     	;# 
  5919  009B                     	;# 
  5920  009C                     	;# 
  5921  009D                     	;# 
  5922  009E                     	;# 
  5923  009F                     	;# 
  5924  010C                     	;# 
  5925  010D                     	;# 
  5926  010E                     	;# 
  5927  0111                     	;# 
  5928  0112                     	;# 
  5929  0113                     	;# 
  5930  0114                     	;# 
  5931  0115                     	;# 
  5932  0116                     	;# 
  5933  0117                     	;# 
  5934  0118                     	;# 
  5935  0119                     	;# 
  5936  018C                     	;# 
  5937  018D                     	;# 
  5938  018E                     	;# 
  5939  0197                     	;# 
  5940  0199                     	;# 
  5941  0199                     	;# 
  5942  0199                     	;# 
  5943  019A                     	;# 
  5944  019A                     	;# 
  5945  019A                     	;# 
  5946  019B                     	;# 
  5947  019B                     	;# 
  5948  019B                     	;# 
  5949  019B                     	;# 
  5950  019B                     	;# 
  5951  019C                     	;# 
  5952  019C                     	;# 
  5953  019C                     	;# 
  5954  019D                     	;# 
  5955  019D                     	;# 
  5956  019D                     	;# 
  5957  019E                     	;# 
  5958  019E                     	;# 
  5959  019E                     	;# 
  5960  019F                     	;# 
  5961  019F                     	;# 
  5962  019F                     	;# 
  5963  019F                     	;# 
  5964  019F                     	;# 
  5965  020C                     	;# 
  5966  020D                     	;# 
  5967  020E                     	;# 
  5968  0211                     	;# 
  5969  0211                     	;# 
  5970  0212                     	;# 
  5971  0212                     	;# 
  5972  0213                     	;# 
  5973  0213                     	;# 
  5974  0214                     	;# 
  5975  0214                     	;# 
  5976  0215                     	;# 
  5977  0215                     	;# 
  5978  0215                     	;# 
  5979  0215                     	;# 
  5980  0216                     	;# 
  5981  0216                     	;# 
  5982  0217                     	;# 
  5983  0217                     	;# 
  5984  0219                     	;# 
  5985  021A                     	;# 
  5986  021B                     	;# 
  5987  021C                     	;# 
  5988  021D                     	;# 
  5989  021D                     	;# 
  5990  021E                     	;# 
  5991  021F                     	;# 
  5992  028C                     	;# 
  5993  028D                     	;# 
  5994  028E                     	;# 
  5995  0291                     	;# 
  5996  0291                     	;# 
  5997  0292                     	;# 
  5998  0293                     	;# 
  5999  0294                     	;# 
  6000  0295                     	;# 
  6001  0295                     	;# 
  6002  0296                     	;# 
  6003  0297                     	;# 
  6004  0298                     	;# 
  6005  029F                     	;# 
  6006  030C                     	;# 
  6007  030D                     	;# 
  6008  030E                     	;# 
  6009  0311                     	;# 
  6010  0311                     	;# 
  6011  0312                     	;# 
  6012  0313                     	;# 
  6013  0314                     	;# 
  6014  0315                     	;# 
  6015  0315                     	;# 
  6016  0316                     	;# 
  6017  0317                     	;# 
  6018  0318                     	;# 
  6019  038C                     	;# 
  6020  038D                     	;# 
  6021  038E                     	;# 
  6022  0391                     	;# 
  6023  0392                     	;# 
  6024  0393                     	;# 
  6025  0394                     	;# 
  6026  0395                     	;# 
  6027  0396                     	;# 
  6028  0397                     	;# 
  6029  0398                     	;# 
  6030  0399                     	;# 
  6031  039A                     	;# 
  6032  039C                     	;# 
  6033  039D                     	;# 
  6034  039E                     	;# 
  6035  039F                     	;# 
  6036  0411                     	;# 
  6037  0411                     	;# 
  6038  0412                     	;# 
  6039  0413                     	;# 
  6040  0414                     	;# 
  6041  0415                     	;# 
  6042  0416                     	;# 
  6043  0417                     	;# 
  6044  0418                     	;# 
  6045  0418                     	;# 
  6046  0419                     	;# 
  6047  041A                     	;# 
  6048  041B                     	;# 
  6049  041C                     	;# 
  6050  041D                     	;# 
  6051  041E                     	;# 
  6052  041F                     	;# 
  6053  0498                     	;# 
  6054  0498                     	;# 
  6055  0499                     	;# 
  6056  049A                     	;# 
  6057  049B                     	;# 
  6058  049B                     	;# 
  6059  049C                     	;# 
  6060  049D                     	;# 
  6061  049E                     	;# 
  6062  049F                     	;# 
  6063  0617                     	;# 
  6064  0618                     	;# 
  6065  0619                     	;# 
  6066  0619                     	;# 
  6067  061A                     	;# 
  6068  061B                     	;# 
  6069  061C                     	;# 
  6070  061C                     	;# 
  6071  061F                     	;# 
  6072  0691                     	;# 
  6073  0692                     	;# 
  6074  0693                     	;# 
  6075  0694                     	;# 
  6076  0695                     	;# 
  6077  0696                     	;# 
  6078  0697                     	;# 
  6079  0698                     	;# 
  6080  0699                     	;# 
  6081  0711                     	;# 
  6082  0712                     	;# 
  6083  0713                     	;# 
  6084  0714                     	;# 
  6085  0715                     	;# 
  6086  0716                     	;# 
  6087  0717                     	;# 
  6088  0718                     	;# 
  6089  0719                     	;# 
  6090  0891                     	;# 
  6091  0891                     	;# 
  6092  0891                     	;# 
  6093  0891                     	;# 
  6094  0891                     	;# 
  6095  0891                     	;# 
  6096  0892                     	;# 
  6097  0892                     	;# 
  6098  0892                     	;# 
  6099  0893                     	;# 
  6100  0893                     	;# 
  6101  0893                     	;# 
  6102  0893                     	;# 
  6103  0893                     	;# 
  6104  0893                     	;# 
  6105  0894                     	;# 
  6106  0894                     	;# 
  6107  0894                     	;# 
  6108  0895                     	;# 
  6109  0895                     	;# 
  6110  0895                     	;# 
  6111  0896                     	;# 
  6112  0896                     	;# 
  6113  0896                     	;# 
  6114  089B                     	;# 
  6115  0911                     	;# 
  6116  0912                     	;# 
  6117  0913                     	;# 
  6118  0914                     	;# 
  6119  0915                     	;# 
  6120  0916                     	;# 
  6121  0918                     	;# 
  6122  0919                     	;# 
  6123  091A                     	;# 
  6124  091B                     	;# 
  6125  091C                     	;# 
  6126  091D                     	;# 
  6127  091E                     	;# 
  6128  091F                     	;# 
  6129  0E0F                     	;# 
  6130  0E10                     	;# 
  6131  0E11                     	;# 
  6132  0E12                     	;# 
  6133  0E13                     	;# 
  6134  0E14                     	;# 
  6135  0E15                     	;# 
  6136  0E16                     	;# 
  6137  0E17                     	;# 
  6138  0E18                     	;# 
  6139  0E19                     	;# 
  6140  0E1A                     	;# 
  6141  0E1B                     	;# 
  6142  0E1C                     	;# 
  6143  0E1D                     	;# 
  6144  0E1E                     	;# 
  6145  0E1F                     	;# 
  6146  0E20                     	;# 
  6147  0E21                     	;# 
  6148  0E22                     	;# 
  6149  0E24                     	;# 
  6150  0E25                     	;# 
  6151  0E28                     	;# 
  6152  0E29                     	;# 
  6153  0E2A                     	;# 
  6154  0E2B                     	;# 
  6155  0E2C                     	;# 
  6156  0E2D                     	;# 
  6157  0E2E                     	;# 
  6158  0E2F                     	;# 
  6159  0E90                     	;# 
  6160  0E91                     	;# 
  6161  0E92                     	;# 
  6162  0E94                     	;# 
  6163  0E95                     	;# 
  6164  0E9C                     	;# 
  6165  0E9D                     	;# 
  6166  0E9E                     	;# 
  6167  0E9F                     	;# 
  6168  0EA0                     	;# 
  6169  0EA1                     	;# 
  6170  0EA2                     	;# 
  6171  0EA3                     	;# 
  6172  0EA4                     	;# 
  6173  0EA5                     	;# 
  6174  0EA6                     	;# 
  6175  0EA7                     	;# 
  6176  0F0F                     	;# 
  6177  0F10                     	;# 
  6178  0F11                     	;# 
  6179  0F12                     	;# 
  6180  0F13                     	;# 
  6181  0F14                     	;# 
  6182  0F15                     	;# 
  6183  0F16                     	;# 
  6184  0F17                     	;# 
  6185  0F18                     	;# 
  6186  0F19                     	;# 
  6187  0F1A                     	;# 
  6188  0F1B                     	;# 
  6189  0F1C                     	;# 
  6190  0F1D                     	;# 
  6191  0F1E                     	;# 
  6192  0F1F                     	;# 
  6193  0F20                     	;# 
  6194  0F21                     	;# 
  6195  0F22                     	;# 
  6196  0F23                     	;# 
  6197  0F24                     	;# 
  6198  0F25                     	;# 
  6199  0F26                     	;# 
  6200  0F27                     	;# 
  6201  0F28                     	;# 
  6202  0F29                     	;# 
  6203  0F2A                     	;# 
  6204  0F2B                     	;# 
  6205  0F2C                     	;# 
  6206  0F2D                     	;# 
  6207  0F2E                     	;# 
  6208  0F2F                     	;# 
  6209  0F30                     	;# 
  6210  0F31                     	;# 
  6211  0F32                     	;# 
  6212  0F33                     	;# 
  6213  0F34                     	;# 
  6214  0F35                     	;# 
  6215  0F36                     	;# 
  6216  0F37                     	;# 
  6217  0FE4                     	;# 
  6218  0FE5                     	;# 
  6219  0FE6                     	;# 
  6220  0FE7                     	;# 
  6221  0FE8                     	;# 
  6222  0FE9                     	;# 
  6223  0FEA                     	;# 
  6224  0FEB                     	;# 
  6225  0FED                     	;# 
  6226  0FEE                     	;# 
  6227  0FEF                     	;# 
  6228  0000                     	;# 
  6229  0001                     	;# 
  6230  0002                     	;# 
  6231  0003                     	;# 
  6232  0004                     	;# 
  6233  0005                     	;# 
  6234  0006                     	;# 
  6235  0007                     	;# 
  6236  0008                     	;# 
  6237  0009                     	;# 
  6238  000A                     	;# 
  6239  000B                     	;# 
  6240  000C                     	;# 
  6241  000D                     	;# 
  6242  000E                     	;# 
  6243  0010                     	;# 
  6244  0011                     	;# 
  6245  0012                     	;# 
  6246  0013                     	;# 
  6247  0014                     	;# 
  6248  0015                     	;# 
  6249  0015                     	;# 
  6250  0016                     	;# 
  6251  0016                     	;# 
  6252  0017                     	;# 
  6253  0018                     	;# 
  6254  0019                     	;# 
  6255  0019                     	;# 
  6256  001A                     	;# 
  6257  001B                     	;# 
  6258  001C                     	;# 
  6259  001D                     	;# 
  6260  001E                     	;# 
  6261  001F                     	;# 
  6262  008C                     	;# 
  6263  008D                     	;# 
  6264  008E                     	;# 
  6265  0090                     	;# 
  6266  0091                     	;# 
  6267  0092                     	;# 
  6268  0093                     	;# 
  6269  0094                     	;# 
  6270  0097                     	;# 
  6271  009B                     	;# 
  6272  009B                     	;# 
  6273  009C                     	;# 
  6274  009D                     	;# 
  6275  009E                     	;# 
  6276  009F                     	;# 
  6277  010C                     	;# 
  6278  010D                     	;# 
  6279  010E                     	;# 
  6280  0111                     	;# 
  6281  0112                     	;# 
  6282  0113                     	;# 
  6283  0114                     	;# 
  6284  0115                     	;# 
  6285  0116                     	;# 
  6286  0117                     	;# 
  6287  0118                     	;# 
  6288  0119                     	;# 
  6289  018C                     	;# 
  6290  018D                     	;# 
  6291  018E                     	;# 
  6292  0197                     	;# 
  6293  0199                     	;# 
  6294  0199                     	;# 
  6295  0199                     	;# 
  6296  019A                     	;# 
  6297  019A                     	;# 
  6298  019A                     	;# 
  6299  019B                     	;# 
  6300  019B                     	;# 
  6301  019B                     	;# 
  6302  019B                     	;# 
  6303  019B                     	;# 
  6304  019C                     	;# 
  6305  019C                     	;# 
  6306  019C                     	;# 
  6307  019D                     	;# 
  6308  019D                     	;# 
  6309  019D                     	;# 
  6310  019E                     	;# 
  6311  019E                     	;# 
  6312  019E                     	;# 
  6313  019F                     	;# 
  6314  019F                     	;# 
  6315  019F                     	;# 
  6316  019F                     	;# 
  6317  019F                     	;# 
  6318  020C                     	;# 
  6319  020D                     	;# 
  6320  020E                     	;# 
  6321  0211                     	;# 
  6322  0211                     	;# 
  6323  0212                     	;# 
  6324  0212                     	;# 
  6325  0213                     	;# 
  6326  0213                     	;# 
  6327  0214                     	;# 
  6328  0214                     	;# 
  6329  0215                     	;# 
  6330  0215                     	;# 
  6331  0215                     	;# 
  6332  0215                     	;# 
  6333  0216                     	;# 
  6334  0216                     	;# 
  6335  0217                     	;# 
  6336  0217                     	;# 
  6337  0219                     	;# 
  6338  021A                     	;# 
  6339  021B                     	;# 
  6340  021C                     	;# 
  6341  021D                     	;# 
  6342  021D                     	;# 
  6343  021E                     	;# 
  6344  021F                     	;# 
  6345  028C                     	;# 
  6346  028D                     	;# 
  6347  028E                     	;# 
  6348  0291                     	;# 
  6349  0291                     	;# 
  6350  0292                     	;# 
  6351  0293                     	;# 
  6352  0294                     	;# 
  6353  0295                     	;# 
  6354  0295                     	;# 
  6355  0296                     	;# 
  6356  0297                     	;# 
  6357  0298                     	;# 
  6358  029F                     	;# 
  6359  030C                     	;# 
  6360  030D                     	;# 
  6361  030E                     	;# 
  6362  0311                     	;# 
  6363  0311                     	;# 
  6364  0312                     	;# 
  6365  0313                     	;# 
  6366  0314                     	;# 
  6367  0315                     	;# 
  6368  0315                     	;# 
  6369  0316                     	;# 
  6370  0317                     	;# 
  6371  0318                     	;# 
  6372  038C                     	;# 
  6373  038D                     	;# 
  6374  038E                     	;# 
  6375  0391                     	;# 
  6376  0392                     	;# 
  6377  0393                     	;# 
  6378  0394                     	;# 
  6379  0395                     	;# 
  6380  0396                     	;# 
  6381  0397                     	;# 
  6382  0398                     	;# 
  6383  0399                     	;# 
  6384  039A                     	;# 
  6385  039C                     	;# 
  6386  039D                     	;# 
  6387  039E                     	;# 
  6388  039F                     	;# 
  6389  0411                     	;# 
  6390  0411                     	;# 
  6391  0412                     	;# 
  6392  0413                     	;# 
  6393  0414                     	;# 
  6394  0415                     	;# 
  6395  0416                     	;# 
  6396  0417                     	;# 
  6397  0418                     	;# 
  6398  0418                     	;# 
  6399  0419                     	;# 
  6400  041A                     	;# 
  6401  041B                     	;# 
  6402  041C                     	;# 
  6403  041D                     	;# 
  6404  041E                     	;# 
  6405  041F                     	;# 
  6406  0498                     	;# 
  6407  0498                     	;# 
  6408  0499                     	;# 
  6409  049A                     	;# 
  6410  049B                     	;# 
  6411  049B                     	;# 
  6412  049C                     	;# 
  6413  049D                     	;# 
  6414  049E                     	;# 
  6415  049F                     	;# 
  6416  0617                     	;# 
  6417  0618                     	;# 
  6418  0619                     	;# 
  6419  0619                     	;# 
  6420  061A                     	;# 
  6421  061B                     	;# 
  6422  061C                     	;# 
  6423  061C                     	;# 
  6424  061F                     	;# 
  6425  0691                     	;# 
  6426  0692                     	;# 
  6427  0693                     	;# 
  6428  0694                     	;# 
  6429  0695                     	;# 
  6430  0696                     	;# 
  6431  0697                     	;# 
  6432  0698                     	;# 
  6433  0699                     	;# 
  6434  0711                     	;# 
  6435  0712                     	;# 
  6436  0713                     	;# 
  6437  0714                     	;# 
  6438  0715                     	;# 
  6439  0716                     	;# 
  6440  0717                     	;# 
  6441  0718                     	;# 
  6442  0719                     	;# 
  6443  0891                     	;# 
  6444  0891                     	;# 
  6445  0891                     	;# 
  6446  0891                     	;# 
  6447  0891                     	;# 
  6448  0891                     	;# 
  6449  0892                     	;# 
  6450  0892                     	;# 
  6451  0892                     	;# 
  6452  0893                     	;# 
  6453  0893                     	;# 
  6454  0893                     	;# 
  6455  0893                     	;# 
  6456  0893                     	;# 
  6457  0893                     	;# 
  6458  0894                     	;# 
  6459  0894                     	;# 
  6460  0894                     	;# 
  6461  0895                     	;# 
  6462  0895                     	;# 
  6463  0895                     	;# 
  6464  0896                     	;# 
  6465  0896                     	;# 
  6466  0896                     	;# 
  6467  089B                     	;# 
  6468  0911                     	;# 
  6469  0912                     	;# 
  6470  0913                     	;# 
  6471  0914                     	;# 
  6472  0915                     	;# 
  6473  0916                     	;# 
  6474  0918                     	;# 
  6475  0919                     	;# 
  6476  091A                     	;# 
  6477  091B                     	;# 
  6478  091C                     	;# 
  6479  091D                     	;# 
  6480  091E                     	;# 
  6481  091F                     	;# 
  6482  0E0F                     	;# 
  6483  0E10                     	;# 
  6484  0E11                     	;# 
  6485  0E12                     	;# 
  6486  0E13                     	;# 
  6487  0E14                     	;# 
  6488  0E15                     	;# 
  6489  0E16                     	;# 
  6490  0E17                     	;# 
  6491  0E18                     	;# 
  6492  0E19                     	;# 
  6493  0E1A                     	;# 
  6494  0E1B                     	;# 
  6495  0E1C                     	;# 
  6496  0E1D                     	;# 
  6497  0E1E                     	;# 
  6498  0E1F                     	;# 
  6499  0E20                     	;# 
  6500  0E21                     	;# 
  6501  0E22                     	;# 
  6502  0E24                     	;# 
  6503  0E25                     	;# 
  6504  0E28                     	;# 
  6505  0E29                     	;# 
  6506  0E2A                     	;# 
  6507  0E2B                     	;# 
  6508  0E2C                     	;# 
  6509  0E2D                     	;# 
  6510  0E2E                     	;# 
  6511  0E2F                     	;# 
  6512  0E90                     	;# 
  6513  0E91                     	;# 
  6514  0E92                     	;# 
  6515  0E94                     	;# 
  6516  0E95                     	;# 
  6517  0E9C                     	;# 
  6518  0E9D                     	;# 
  6519  0E9E                     	;# 
  6520  0E9F                     	;# 
  6521  0EA0                     	;# 
  6522  0EA1                     	;# 
  6523  0EA2                     	;# 
  6524  0EA3                     	;# 
  6525  0EA4                     	;# 
  6526  0EA5                     	;# 
  6527  0EA6                     	;# 
  6528  0EA7                     	;# 
  6529  0F0F                     	;# 
  6530  0F10                     	;# 
  6531  0F11                     	;# 
  6532  0F12                     	;# 
  6533  0F13                     	;# 
  6534  0F14                     	;# 
  6535  0F15                     	;# 
  6536  0F16                     	;# 
  6537  0F17                     	;# 
  6538  0F18                     	;# 
  6539  0F19                     	;# 
  6540  0F1A                     	;# 
  6541  0F1B                     	;# 
  6542  0F1C                     	;# 
  6543  0F1D                     	;# 
  6544  0F1E                     	;# 
  6545  0F1F                     	;# 
  6546  0F20                     	;# 
  6547  0F21                     	;# 
  6548  0F22                     	;# 
  6549  0F23                     	;# 
  6550  0F24                     	;# 
  6551  0F25                     	;# 
  6552  0F26                     	;# 
  6553  0F27                     	;# 
  6554  0F28                     	;# 
  6555  0F29                     	;# 
  6556  0F2A                     	;# 
  6557  0F2B                     	;# 
  6558  0F2C                     	;# 
  6559  0F2D                     	;# 
  6560  0F2E                     	;# 
  6561  0F2F                     	;# 
  6562  0F30                     	;# 
  6563  0F31                     	;# 
  6564  0F32                     	;# 
  6565  0F33                     	;# 
  6566  0F34                     	;# 
  6567  0F35                     	;# 
  6568  0F36                     	;# 
  6569  0F37                     	;# 
  6570  0FE4                     	;# 
  6571  0FE5                     	;# 
  6572  0FE6                     	;# 
  6573  0FE7                     	;# 
  6574  0FE8                     	;# 
  6575  0FE9                     	;# 
  6576  0FEA                     	;# 
  6577  0FEB                     	;# 
  6578  0FED                     	;# 
  6579  0FEE                     	;# 
  6580  0FEF                     	;# 
  6581  0000                     	;# 
  6582  0001                     	;# 
  6583  0002                     	;# 
  6584  0003                     	;# 
  6585  0004                     	;# 
  6586  0005                     	;# 
  6587  0006                     	;# 
  6588  0007                     	;# 
  6589  0008                     	;# 
  6590  0009                     	;# 
  6591  000A                     	;# 
  6592  000B                     	;# 
  6593  000C                     	;# 
  6594  000D                     	;# 
  6595  000E                     	;# 
  6596  0010                     	;# 
  6597  0011                     	;# 
  6598  0012                     	;# 
  6599  0013                     	;# 
  6600  0014                     	;# 
  6601  0015                     	;# 
  6602  0015                     	;# 
  6603  0016                     	;# 
  6604  0016                     	;# 
  6605  0017                     	;# 
  6606  0018                     	;# 
  6607  0019                     	;# 
  6608  0019                     	;# 
  6609  001A                     	;# 
  6610  001B                     	;# 
  6611  001C                     	;# 
  6612  001D                     	;# 
  6613  001E                     	;# 
  6614  001F                     	;# 
  6615  008C                     	;# 
  6616  008D                     	;# 
  6617  008E                     	;# 
  6618  0090                     	;# 
  6619  0091                     	;# 
  6620  0092                     	;# 
  6621  0093                     	;# 
  6622  0094                     	;# 
  6623  0097                     	;# 
  6624  009B                     	;# 
  6625  009B                     	;# 
  6626  009C                     	;# 
  6627  009D                     	;# 
  6628  009E                     	;# 
  6629  009F                     	;# 
  6630  010C                     	;# 
  6631  010D                     	;# 
  6632  010E                     	;# 
  6633  0111                     	;# 
  6634  0112                     	;# 
  6635  0113                     	;# 
  6636  0114                     	;# 
  6637  0115                     	;# 
  6638  0116                     	;# 
  6639  0117                     	;# 
  6640  0118                     	;# 
  6641  0119                     	;# 
  6642  018C                     	;# 
  6643  018D                     	;# 
  6644  018E                     	;# 
  6645  0197                     	;# 
  6646  0199                     	;# 
  6647  0199                     	;# 
  6648  0199                     	;# 
  6649  019A                     	;# 
  6650  019A                     	;# 
  6651  019A                     	;# 
  6652  019B                     	;# 
  6653  019B                     	;# 
  6654  019B                     	;# 
  6655  019B                     	;# 
  6656  019B                     	;# 
  6657  019C                     	;# 
  6658  019C                     	;# 
  6659  019C                     	;# 
  6660  019D                     	;# 
  6661  019D                     	;# 
  6662  019D                     	;# 
  6663  019E                     	;# 
  6664  019E                     	;# 
  6665  019E                     	;# 
  6666  019F                     	;# 
  6667  019F                     	;# 
  6668  019F                     	;# 
  6669  019F                     	;# 
  6670  019F                     	;# 
  6671  020C                     	;# 
  6672  020D                     	;# 
  6673  020E                     	;# 
  6674  0211                     	;# 
  6675  0211                     	;# 
  6676  0212                     	;# 
  6677  0212                     	;# 
  6678  0213                     	;# 
  6679  0213                     	;# 
  6680  0214                     	;# 
  6681  0214                     	;# 
  6682  0215                     	;# 
  6683  0215                     	;# 
  6684  0215                     	;# 
  6685  0215                     	;# 
  6686  0216                     	;# 
  6687  0216                     	;# 
  6688  0217                     	;# 
  6689  0217                     	;# 
  6690  0219                     	;# 
  6691  021A                     	;# 
  6692  021B                     	;# 
  6693  021C                     	;# 
  6694  021D                     	;# 
  6695  021D                     	;# 
  6696  021E                     	;# 
  6697  021F                     	;# 
  6698  028C                     	;# 
  6699  028D                     	;# 
  6700  028E                     	;# 
  6701  0291                     	;# 
  6702  0291                     	;# 
  6703  0292                     	;# 
  6704  0293                     	;# 
  6705  0294                     	;# 
  6706  0295                     	;# 
  6707  0295                     	;# 
  6708  0296                     	;# 
  6709  0297                     	;# 
  6710  0298                     	;# 
  6711  029F                     	;# 
  6712  030C                     	;# 
  6713  030D                     	;# 
  6714  030E                     	;# 
  6715  0311                     	;# 
  6716  0311                     	;# 
  6717  0312                     	;# 
  6718  0313                     	;# 
  6719  0314                     	;# 
  6720  0315                     	;# 
  6721  0315                     	;# 
  6722  0316                     	;# 
  6723  0317                     	;# 
  6724  0318                     	;# 
  6725  038C                     	;# 
  6726  038D                     	;# 
  6727  038E                     	;# 
  6728  0391                     	;# 
  6729  0392                     	;# 
  6730  0393                     	;# 
  6731  0394                     	;# 
  6732  0395                     	;# 
  6733  0396                     	;# 
  6734  0397                     	;# 
  6735  0398                     	;# 
  6736  0399                     	;# 
  6737  039A                     	;# 
  6738  039C                     	;# 
  6739  039D                     	;# 
  6740  039E                     	;# 
  6741  039F                     	;# 
  6742  0411                     	;# 
  6743  0411                     	;# 
  6744  0412                     	;# 
  6745  0413                     	;# 
  6746  0414                     	;# 
  6747  0415                     	;# 
  6748  0416                     	;# 
  6749  0417                     	;# 
  6750  0418                     	;# 
  6751  0418                     	;# 
  6752  0419                     	;# 
  6753  041A                     	;# 
  6754  041B                     	;# 
  6755  041C                     	;# 
  6756  041D                     	;# 
  6757  041E                     	;# 
  6758  041F                     	;# 
  6759  0498                     	;# 
  6760  0498                     	;# 
  6761  0499                     	;# 
  6762  049A                     	;# 
  6763  049B                     	;# 
  6764  049B                     	;# 
  6765  049C                     	;# 
  6766  049D                     	;# 
  6767  049E                     	;# 
  6768  049F                     	;# 
  6769  0617                     	;# 
  6770  0618                     	;# 
  6771  0619                     	;# 
  6772  0619                     	;# 
  6773  061A                     	;# 
  6774  061B                     	;# 
  6775  061C                     	;# 
  6776  061C                     	;# 
  6777  061F                     	;# 
  6778  0691                     	;# 
  6779  0692                     	;# 
  6780  0693                     	;# 
  6781  0694                     	;# 
  6782  0695                     	;# 
  6783  0696                     	;# 
  6784  0697                     	;# 
  6785  0698                     	;# 
  6786  0699                     	;# 
  6787  0711                     	;# 
  6788  0712                     	;# 
  6789  0713                     	;# 
  6790  0714                     	;# 
  6791  0715                     	;# 
  6792  0716                     	;# 
  6793  0717                     	;# 
  6794  0718                     	;# 
  6795  0719                     	;# 
  6796  0891                     	;# 
  6797  0891                     	;# 
  6798  0891                     	;# 
  6799  0891                     	;# 
  6800  0891                     	;# 
  6801  0891                     	;# 
  6802  0892                     	;# 
  6803  0892                     	;# 
  6804  0892                     	;# 
  6805  0893                     	;# 
  6806  0893                     	;# 
  6807  0893                     	;# 
  6808  0893                     	;# 
  6809  0893                     	;# 
  6810  0893                     	;# 
  6811  0894                     	;# 
  6812  0894                     	;# 
  6813  0894                     	;# 
  6814  0895                     	;# 
  6815  0895                     	;# 
  6816  0895                     	;# 
  6817  0896                     	;# 
  6818  0896                     	;# 
  6819  0896                     	;# 
  6820  089B                     	;# 
  6821  0911                     	;# 
  6822  0912                     	;# 
  6823  0913                     	;# 
  6824  0914                     	;# 
  6825  0915                     	;# 
  6826  0916                     	;# 
  6827  0918                     	;# 
  6828  0919                     	;# 
  6829  091A                     	;# 
  6830  091B                     	;# 
  6831  091C                     	;# 
  6832  091D                     	;# 
  6833  091E                     	;# 
  6834  091F                     	;# 
  6835  0E0F                     	;# 
  6836  0E10                     	;# 
  6837  0E11                     	;# 
  6838  0E12                     	;# 
  6839  0E13                     	;# 
  6840  0E14                     	;# 
  6841  0E15                     	;# 
  6842  0E16                     	;# 
  6843  0E17                     	;# 
  6844  0E18                     	;# 
  6845  0E19                     	;# 
  6846  0E1A                     	;# 
  6847  0E1B                     	;# 
  6848  0E1C                     	;# 
  6849  0E1D                     	;# 
  6850  0E1E                     	;# 
  6851  0E1F                     	;# 
  6852  0E20                     	;# 
  6853  0E21                     	;# 
  6854  0E22                     	;# 
  6855  0E24                     	;# 
  6856  0E25                     	;# 
  6857  0E28                     	;# 
  6858  0E29                     	;# 
  6859  0E2A                     	;# 
  6860  0E2B                     	;# 
  6861  0E2C                     	;# 
  6862  0E2D                     	;# 
  6863  0E2E                     	;# 
  6864  0E2F                     	;# 
  6865  0E90                     	;# 
  6866  0E91                     	;# 
  6867  0E92                     	;# 
  6868  0E94                     	;# 
  6869  0E95                     	;# 
  6870  0E9C                     	;# 
  6871  0E9D                     	;# 
  6872  0E9E                     	;# 
  6873  0E9F                     	;# 
  6874  0EA0                     	;# 
  6875  0EA1                     	;# 
  6876  0EA2                     	;# 
  6877  0EA3                     	;# 
  6878  0EA4                     	;# 
  6879  0EA5                     	;# 
  6880  0EA6                     	;# 
  6881  0EA7                     	;# 
  6882  0F0F                     	;# 
  6883  0F10                     	;# 
  6884  0F11                     	;# 
  6885  0F12                     	;# 
  6886  0F13                     	;# 
  6887  0F14                     	;# 
  6888  0F15                     	;# 
  6889  0F16                     	;# 
  6890  0F17                     	;# 
  6891  0F18                     	;# 
  6892  0F19                     	;# 
  6893  0F1A                     	;# 
  6894  0F1B                     	;# 
  6895  0F1C                     	;# 
  6896  0F1D                     	;# 
  6897  0F1E                     	;# 
  6898  0F1F                     	;# 
  6899  0F20                     	;# 
  6900  0F21                     	;# 
  6901  0F22                     	;# 
  6902  0F23                     	;# 
  6903  0F24                     	;# 
  6904  0F25                     	;# 
  6905  0F26                     	;# 
  6906  0F27                     	;# 
  6907  0F28                     	;# 
  6908  0F29                     	;# 
  6909  0F2A                     	;# 
  6910  0F2B                     	;# 
  6911  0F2C                     	;# 
  6912  0F2D                     	;# 
  6913  0F2E                     	;# 
  6914  0F2F                     	;# 
  6915  0F30                     	;# 
  6916  0F31                     	;# 
  6917  0F32                     	;# 
  6918  0F33                     	;# 
  6919  0F34                     	;# 
  6920  0F35                     	;# 
  6921  0F36                     	;# 
  6922  0F37                     	;# 
  6923  0FE4                     	;# 
  6924  0FE5                     	;# 
  6925  0FE6                     	;# 
  6926  0FE7                     	;# 
  6927  0FE8                     	;# 
  6928  0FE9                     	;# 
  6929  0FEA                     	;# 
  6930  0FEB                     	;# 
  6931  0FED                     	;# 
  6932  0FEE                     	;# 
  6933  0FEF                     	;# 
  6934  0000                     	;# 
  6935  0001                     	;# 
  6936  0002                     	;# 
  6937  0003                     	;# 
  6938  0004                     	;# 
  6939  0005                     	;# 
  6940  0006                     	;# 
  6941  0007                     	;# 
  6942  0008                     	;# 
  6943  0009                     	;# 
  6944  000A                     	;# 
  6945  000B                     	;# 
  6946  000C                     	;# 
  6947  000D                     	;# 
  6948  000E                     	;# 
  6949  0010                     	;# 
  6950  0011                     	;# 
  6951  0012                     	;# 
  6952  0013                     	;# 
  6953  0014                     	;# 
  6954  0015                     	;# 
  6955  0015                     	;# 
  6956  0016                     	;# 
  6957  0016                     	;# 
  6958  0017                     	;# 
  6959  0018                     	;# 
  6960  0019                     	;# 
  6961  0019                     	;# 
  6962  001A                     	;# 
  6963  001B                     	;# 
  6964  001C                     	;# 
  6965  001D                     	;# 
  6966  001E                     	;# 
  6967  001F                     	;# 
  6968  008C                     	;# 
  6969  008D                     	;# 
  6970  008E                     	;# 
  6971  0090                     	;# 
  6972  0091                     	;# 
  6973  0092                     	;# 
  6974  0093                     	;# 
  6975  0094                     	;# 
  6976  0097                     	;# 
  6977  009B                     	;# 
  6978  009B                     	;# 
  6979  009C                     	;# 
  6980  009D                     	;# 
  6981  009E                     	;# 
  6982  009F                     	;# 
  6983  010C                     	;# 
  6984  010D                     	;# 
  6985  010E                     	;# 
  6986  0111                     	;# 
  6987  0112                     	;# 
  6988  0113                     	;# 
  6989  0114                     	;# 
  6990  0115                     	;# 
  6991  0116                     	;# 
  6992  0117                     	;# 
  6993  0118                     	;# 
  6994  0119                     	;# 
  6995  018C                     	;# 
  6996  018D                     	;# 
  6997  018E                     	;# 
  6998  0197                     	;# 
  6999  0199                     	;# 
  7000  0199                     	;# 
  7001  0199                     	;# 
  7002  019A                     	;# 
  7003  019A                     	;# 
  7004  019A                     	;# 
  7005  019B                     	;# 
  7006  019B                     	;# 
  7007  019B                     	;# 
  7008  019B                     	;# 
  7009  019B                     	;# 
  7010  019C                     	;# 
  7011  019C                     	;# 
  7012  019C                     	;# 
  7013  019D                     	;# 
  7014  019D                     	;# 
  7015  019D                     	;# 
  7016  019E                     	;# 
  7017  019E                     	;# 
  7018  019E                     	;# 
  7019  019F                     	;# 
  7020  019F                     	;# 
  7021  019F                     	;# 
  7022  019F                     	;# 
  7023  019F                     	;# 
  7024  020C                     	;# 
  7025  020D                     	;# 
  7026  020E                     	;# 
  7027  0211                     	;# 
  7028  0211                     	;# 
  7029  0212                     	;# 
  7030  0212                     	;# 
  7031  0213                     	;# 
  7032  0213                     	;# 
  7033  0214                     	;# 
  7034  0214                     	;# 
  7035  0215                     	;# 
  7036  0215                     	;# 
  7037  0215                     	;# 
  7038  0215                     	;# 
  7039  0216                     	;# 
  7040  0216                     	;# 
  7041  0217                     	;# 
  7042  0217                     	;# 
  7043  0219                     	;# 
  7044  021A                     	;# 
  7045  021B                     	;# 
  7046  021C                     	;# 
  7047  021D                     	;# 
  7048  021D                     	;# 
  7049  021E                     	;# 
  7050  021F                     	;# 
  7051  028C                     	;# 
  7052  028D                     	;# 
  7053  028E                     	;# 
  7054  0291                     	;# 
  7055  0291                     	;# 
  7056  0292                     	;# 
  7057  0293                     	;# 
  7058  0294                     	;# 
  7059  0295                     	;# 
  7060  0295                     	;# 
  7061  0296                     	;# 
  7062  0297                     	;# 
  7063  0298                     	;# 
  7064  029F                     	;# 
  7065  030C                     	;# 
  7066  030D                     	;# 
  7067  030E                     	;# 
  7068  0311                     	;# 
  7069  0311                     	;# 
  7070  0312                     	;# 
  7071  0313                     	;# 
  7072  0314                     	;# 
  7073  0315                     	;# 
  7074  0315                     	;# 
  7075  0316                     	;# 
  7076  0317                     	;# 
  7077  0318                     	;# 
  7078  038C                     	;# 
  7079  038D                     	;# 
  7080  038E                     	;# 
  7081  0391                     	;# 
  7082  0392                     	;# 
  7083  0393                     	;# 
  7084  0394                     	;# 
  7085  0395                     	;# 
  7086  0396                     	;# 
  7087  0397                     	;# 
  7088  0398                     	;# 
  7089  0399                     	;# 
  7090  039A                     	;# 
  7091  039C                     	;# 
  7092  039D                     	;# 
  7093  039E                     	;# 
  7094  039F                     	;# 
  7095  0411                     	;# 
  7096  0411                     	;# 
  7097  0412                     	;# 
  7098  0413                     	;# 
  7099  0414                     	;# 
  7100  0415                     	;# 
  7101  0416                     	;# 
  7102  0417                     	;# 
  7103  0418                     	;# 
  7104  0418                     	;# 
  7105  0419                     	;# 
  7106  041A                     	;# 
  7107  041B                     	;# 
  7108  041C                     	;# 
  7109  041D                     	;# 
  7110  041E                     	;# 
  7111  041F                     	;# 
  7112  0498                     	;# 
  7113  0498                     	;# 
  7114  0499                     	;# 
  7115  049A                     	;# 
  7116  049B                     	;# 
  7117  049B                     	;# 
  7118  049C                     	;# 
  7119  049D                     	;# 
  7120  049E                     	;# 
  7121  049F                     	;# 
  7122  0617                     	;# 
  7123  0618                     	;# 
  7124  0619                     	;# 
  7125  0619                     	;# 
  7126  061A                     	;# 
  7127  061B                     	;# 
  7128  061C                     	;# 
  7129  061C                     	;# 
  7130  061F                     	;# 
  7131  0691                     	;# 
  7132  0692                     	;# 
  7133  0693                     	;# 
  7134  0694                     	;# 
  7135  0695                     	;# 
  7136  0696                     	;# 
  7137  0697                     	;# 
  7138  0698                     	;# 
  7139  0699                     	;# 
  7140  0711                     	;# 
  7141  0712                     	;# 
  7142  0713                     	;# 
  7143  0714                     	;# 
  7144  0715                     	;# 
  7145  0716                     	;# 
  7146  0717                     	;# 
  7147  0718                     	;# 
  7148  0719                     	;# 
  7149  0891                     	;# 
  7150  0891                     	;# 
  7151  0891                     	;# 
  7152  0891                     	;# 
  7153  0891                     	;# 
  7154  0891                     	;# 
  7155  0892                     	;# 
  7156  0892                     	;# 
  7157  0892                     	;# 
  7158  0893                     	;# 
  7159  0893                     	;# 
  7160  0893                     	;# 
  7161  0893                     	;# 
  7162  0893                     	;# 
  7163  0893                     	;# 
  7164  0894                     	;# 
  7165  0894                     	;# 
  7166  0894                     	;# 
  7167  0895                     	;# 
  7168  0895                     	;# 
  7169  0895                     	;# 
  7170  0896                     	;# 
  7171  0896                     	;# 
  7172  0896                     	;# 
  7173  089B                     	;# 
  7174  0911                     	;# 
  7175  0912                     	;# 
  7176  0913                     	;# 
  7177  0914                     	;# 
  7178  0915                     	;# 
  7179  0916                     	;# 
  7180  0918                     	;# 
  7181  0919                     	;# 
  7182  091A                     	;# 
  7183  091B                     	;# 
  7184  091C                     	;# 
  7185  091D                     	;# 
  7186  091E                     	;# 
  7187  091F                     	;# 
  7188  0E0F                     	;# 
  7189  0E10                     	;# 
  7190  0E11                     	;# 
  7191  0E12                     	;# 
  7192  0E13                     	;# 
  7193  0E14                     	;# 
  7194  0E15                     	;# 
  7195  0E16                     	;# 
  7196  0E17                     	;# 
  7197  0E18                     	;# 
  7198  0E19                     	;# 
  7199  0E1A                     	;# 
  7200  0E1B                     	;# 
  7201  0E1C                     	;# 
  7202  0E1D                     	;# 
  7203  0E1E                     	;# 
  7204  0E1F                     	;# 
  7205  0E20                     	;# 
  7206  0E21                     	;# 
  7207  0E22                     	;# 
  7208  0E24                     	;# 
  7209  0E25                     	;# 
  7210  0E28                     	;# 
  7211  0E29                     	;# 
  7212  0E2A                     	;# 
  7213  0E2B                     	;# 
  7214  0E2C                     	;# 
  7215  0E2D                     	;# 
  7216  0E2E                     	;# 
  7217  0E2F                     	;# 
  7218  0E90                     	;# 
  7219  0E91                     	;# 
  7220  0E92                     	;# 
  7221  0E94                     	;# 
  7222  0E95                     	;# 
  7223  0E9C                     	;# 
  7224  0E9D                     	;# 
  7225  0E9E                     	;# 
  7226  0E9F                     	;# 
  7227  0EA0                     	;# 
  7228  0EA1                     	;# 
  7229  0EA2                     	;# 
  7230  0EA3                     	;# 
  7231  0EA4                     	;# 
  7232  0EA5                     	;# 
  7233  0EA6                     	;# 
  7234  0EA7                     	;# 
  7235  0F0F                     	;# 
  7236  0F10                     	;# 
  7237  0F11                     	;# 
  7238  0F12                     	;# 
  7239  0F13                     	;# 
  7240  0F14                     	;# 
  7241  0F15                     	;# 
  7242  0F16                     	;# 
  7243  0F17                     	;# 
  7244  0F18                     	;# 
  7245  0F19                     	;# 
  7246  0F1A                     	;# 
  7247  0F1B                     	;# 
  7248  0F1C                     	;# 
  7249  0F1D                     	;# 
  7250  0F1E                     	;# 
  7251  0F1F                     	;# 
  7252  0F20                     	;# 
  7253  0F21                     	;# 
  7254  0F22                     	;# 
  7255  0F23                     	;# 
  7256  0F24                     	;# 
  7257  0F25                     	;# 
  7258  0F26                     	;# 
  7259  0F27                     	;# 
  7260  0F28                     	;# 
  7261  0F29                     	;# 
  7262  0F2A                     	;# 
  7263  0F2B                     	;# 
  7264  0F2C                     	;# 
  7265  0F2D                     	;# 
  7266  0F2E                     	;# 
  7267  0F2F                     	;# 
  7268  0F30                     	;# 
  7269  0F31                     	;# 
  7270  0F32                     	;# 
  7271  0F33                     	;# 
  7272  0F34                     	;# 
  7273  0F35                     	;# 
  7274  0F36                     	;# 
  7275  0F37                     	;# 
  7276  0FE4                     	;# 
  7277  0FE5                     	;# 
  7278  0FE6                     	;# 
  7279  0FE7                     	;# 
  7280  0FE8                     	;# 
  7281  0FE9                     	;# 
  7282  0FEA                     	;# 
  7283  0FEB                     	;# 
  7284  0FED                     	;# 
  7285  0FEE                     	;# 
  7286  0FEF                     	;# 
  7287  0000                     	;# 
  7288  0001                     	;# 
  7289  0002                     	;# 
  7290  0003                     	;# 
  7291  0004                     	;# 
  7292  0005                     	;# 
  7293  0006                     	;# 
  7294  0007                     	;# 
  7295  0008                     	;# 
  7296  0009                     	;# 
  7297  000A                     	;# 
  7298  000B                     	;# 
  7299  000C                     	;# 
  7300  000D                     	;# 
  7301  000E                     	;# 
  7302  0010                     	;# 
  7303  0011                     	;# 
  7304  0012                     	;# 
  7305  0013                     	;# 
  7306  0014                     	;# 
  7307  0015                     	;# 
  7308  0015                     	;# 
  7309  0016                     	;# 
  7310  0016                     	;# 
  7311  0017                     	;# 
  7312  0018                     	;# 
  7313  0019                     	;# 
  7314  0019                     	;# 
  7315  001A                     	;# 
  7316  001B                     	;# 
  7317  001C                     	;# 
  7318  001D                     	;# 
  7319  001E                     	;# 
  7320  001F                     	;# 
  7321  008C                     	;# 
  7322  008D                     	;# 
  7323  008E                     	;# 
  7324  0090                     	;# 
  7325  0091                     	;# 
  7326  0092                     	;# 
  7327  0093                     	;# 
  7328  0094                     	;# 
  7329  0097                     	;# 
  7330  009B                     	;# 
  7331  009B                     	;# 
  7332  009C                     	;# 
  7333  009D                     	;# 
  7334  009E                     	;# 
  7335  009F                     	;# 
  7336  010C                     	;# 
  7337  010D                     	;# 
  7338  010E                     	;# 
  7339  0111                     	;# 
  7340  0112                     	;# 
  7341  0113                     	;# 
  7342  0114                     	;# 
  7343  0115                     	;# 
  7344  0116                     	;# 
  7345  0117                     	;# 
  7346  0118                     	;# 
  7347  0119                     	;# 
  7348  018C                     	;# 
  7349  018D                     	;# 
  7350  018E                     	;# 
  7351  0197                     	;# 
  7352  0199                     	;# 
  7353  0199                     	;# 
  7354  0199                     	;# 
  7355  019A                     	;# 
  7356  019A                     	;# 
  7357  019A                     	;# 
  7358  019B                     	;# 
  7359  019B                     	;# 
  7360  019B                     	;# 
  7361  019B                     	;# 
  7362  019B                     	;# 
  7363  019C                     	;# 
  7364  019C                     	;# 
  7365  019C                     	;# 
  7366  019D                     	;# 
  7367  019D                     	;# 
  7368  019D                     	;# 
  7369  019E                     	;# 
  7370  019E                     	;# 
  7371  019E                     	;# 
  7372  019F                     	;# 
  7373  019F                     	;# 
  7374  019F                     	;# 
  7375  019F                     	;# 
  7376  019F                     	;# 
  7377  020C                     	;# 
  7378  020D                     	;# 
  7379  020E                     	;# 
  7380  0211                     	;# 
  7381  0211                     	;# 
  7382  0212                     	;# 
  7383  0212                     	;# 
  7384  0213                     	;# 
  7385  0213                     	;# 
  7386  0214                     	;# 
  7387  0214                     	;# 
  7388  0215                     	;# 
  7389  0215                     	;# 
  7390  0215                     	;# 
  7391  0215                     	;# 
  7392  0216                     	;# 
  7393  0216                     	;# 
  7394  0217                     	;# 
  7395  0217                     	;# 
  7396  0219                     	;# 
  7397  021A                     	;# 
  7398  021B                     	;# 
  7399  021C                     	;# 
  7400  021D                     	;# 
  7401  021D                     	;# 
  7402  021E                     	;# 
  7403  021F                     	;# 
  7404  028C                     	;# 
  7405  028D                     	;# 
  7406  028E                     	;# 
  7407  0291                     	;# 
  7408  0291                     	;# 
  7409  0292                     	;# 
  7410  0293                     	;# 
  7411  0294                     	;# 
  7412  0295                     	;# 
  7413  0295                     	;# 
  7414  0296                     	;# 
  7415  0297                     	;# 
  7416  0298                     	;# 
  7417  029F                     	;# 
  7418  030C                     	;# 
  7419  030D                     	;# 
  7420  030E                     	;# 
  7421  0311                     	;# 
  7422  0311                     	;# 
  7423  0312                     	;# 
  7424  0313                     	;# 
  7425  0314                     	;# 
  7426  0315                     	;# 
  7427  0315                     	;# 
  7428  0316                     	;# 
  7429  0317                     	;# 
  7430  0318                     	;# 
  7431  038C                     	;# 
  7432  038D                     	;# 
  7433  038E                     	;# 
  7434  0391                     	;# 
  7435  0392                     	;# 
  7436  0393                     	;# 
  7437  0394                     	;# 
  7438  0395                     	;# 
  7439  0396                     	;# 
  7440  0397                     	;# 
  7441  0398                     	;# 
  7442  0399                     	;# 
  7443  039A                     	;# 
  7444  039C                     	;# 
  7445  039D                     	;# 
  7446  039E                     	;# 
  7447  039F                     	;# 
  7448  0411                     	;# 
  7449  0411                     	;# 
  7450  0412                     	;# 
  7451  0413                     	;# 
  7452  0414                     	;# 
  7453  0415                     	;# 
  7454  0416                     	;# 
  7455  0417                     	;# 
  7456  0418                     	;# 
  7457  0418                     	;# 
  7458  0419                     	;# 
  7459  041A                     	;# 
  7460  041B                     	;# 
  7461  041C                     	;# 
  7462  041D                     	;# 
  7463  041E                     	;# 
  7464  041F                     	;# 
  7465  0498                     	;# 
  7466  0498                     	;# 
  7467  0499                     	;# 
  7468  049A                     	;# 
  7469  049B                     	;# 
  7470  049B                     	;# 
  7471  049C                     	;# 
  7472  049D                     	;# 
  7473  049E                     	;# 
  7474  049F                     	;# 
  7475  0617                     	;# 
  7476  0618                     	;# 
  7477  0619                     	;# 
  7478  0619                     	;# 
  7479  061A                     	;# 
  7480  061B                     	;# 
  7481  061C                     	;# 
  7482  061C                     	;# 
  7483  061F                     	;# 
  7484  0691                     	;# 
  7485  0692                     	;# 
  7486  0693                     	;# 
  7487  0694                     	;# 
  7488  0695                     	;# 
  7489  0696                     	;# 
  7490  0697                     	;# 
  7491  0698                     	;# 
  7492  0699                     	;# 
  7493  0711                     	;# 
  7494  0712                     	;# 
  7495  0713                     	;# 
  7496  0714                     	;# 
  7497  0715                     	;# 
  7498  0716                     	;# 
  7499  0717                     	;# 
  7500  0718                     	;# 
  7501  0719                     	;# 
  7502  0891                     	;# 
  7503  0891                     	;# 
  7504  0891                     	;# 
  7505  0891                     	;# 
  7506  0891                     	;# 
  7507  0891                     	;# 
  7508  0892                     	;# 
  7509  0892                     	;# 
  7510  0892                     	;# 
  7511  0893                     	;# 
  7512  0893                     	;# 
  7513  0893                     	;# 
  7514  0893                     	;# 
  7515  0893                     	;# 
  7516  0893                     	;# 
  7517  0894                     	;# 
  7518  0894                     	;# 
  7519  0894                     	;# 
  7520  0895                     	;# 
  7521  0895                     	;# 
  7522  0895                     	;# 
  7523  0896                     	;# 
  7524  0896                     	;# 
  7525  0896                     	;# 
  7526  089B                     	;# 
  7527  0911                     	;# 
  7528  0912                     	;# 
  7529  0913                     	;# 
  7530  0914                     	;# 
  7531  0915                     	;# 
  7532  0916                     	;# 
  7533  0918                     	;# 
  7534  0919                     	;# 
  7535  091A                     	;# 
  7536  091B                     	;# 
  7537  091C                     	;# 
  7538  091D                     	;# 
  7539  091E                     	;# 
  7540  091F                     	;# 
  7541  0E0F                     	;# 
  7542  0E10                     	;# 
  7543  0E11                     	;# 
  7544  0E12                     	;# 
  7545  0E13                     	;# 
  7546  0E14                     	;# 
  7547  0E15                     	;# 
  7548  0E16                     	;# 
  7549  0E17                     	;# 
  7550  0E18                     	;# 
  7551  0E19                     	;# 
  7552  0E1A                     	;# 
  7553  0E1B                     	;# 
  7554  0E1C                     	;# 
  7555  0E1D                     	;# 
  7556  0E1E                     	;# 
  7557  0E1F                     	;# 
  7558  0E20                     	;# 
  7559  0E21                     	;# 
  7560  0E22                     	;# 
  7561  0E24                     	;# 
  7562  0E25                     	;# 
  7563  0E28                     	;# 
  7564  0E29                     	;# 
  7565  0E2A                     	;# 
  7566  0E2B                     	;# 
  7567  0E2C                     	;# 
  7568  0E2D                     	;# 
  7569  0E2E                     	;# 
  7570  0E2F                     	;# 
  7571  0E90                     	;# 
  7572  0E91                     	;# 
  7573  0E92                     	;# 
  7574  0E94                     	;# 
  7575  0E95                     	;# 
  7576  0E9C                     	;# 
  7577  0E9D                     	;# 
  7578  0E9E                     	;# 
  7579  0E9F                     	;# 
  7580  0EA0                     	;# 
  7581  0EA1                     	;# 
  7582  0EA2                     	;# 
  7583  0EA3                     	;# 
  7584  0EA4                     	;# 
  7585  0EA5                     	;# 
  7586  0EA6                     	;# 
  7587  0EA7                     	;# 
  7588  0F0F                     	;# 
  7589  0F10                     	;# 
  7590  0F11                     	;# 
  7591  0F12                     	;# 
  7592  0F13                     	;# 
  7593  0F14                     	;# 
  7594  0F15                     	;# 
  7595  0F16                     	;# 
  7596  0F17                     	;# 
  7597  0F18                     	;# 
  7598  0F19                     	;# 
  7599  0F1A                     	;# 
  7600  0F1B                     	;# 
  7601  0F1C                     	;# 
  7602  0F1D                     	;# 
  7603  0F1E                     	;# 
  7604  0F1F                     	;# 
  7605  0F20                     	;# 
  7606  0F21                     	;# 
  7607  0F22                     	;# 
  7608  0F23                     	;# 
  7609  0F24                     	;# 
  7610  0F25                     	;# 
  7611  0F26                     	;# 
  7612  0F27                     	;# 
  7613  0F28                     	;# 
  7614  0F29                     	;# 
  7615  0F2A                     	;# 
  7616  0F2B                     	;# 
  7617  0F2C                     	;# 
  7618  0F2D                     	;# 
  7619  0F2E                     	;# 
  7620  0F2F                     	;# 
  7621  0F30                     	;# 
  7622  0F31                     	;# 
  7623  0F32                     	;# 
  7624  0F33                     	;# 
  7625  0F34                     	;# 
  7626  0F35                     	;# 
  7627  0F36                     	;# 
  7628  0F37                     	;# 
  7629  0FE4                     	;# 
  7630  0FE5                     	;# 
  7631  0FE6                     	;# 
  7632  0FE7                     	;# 
  7633  0FE8                     	;# 
  7634  0FE9                     	;# 
  7635  0FEA                     	;# 
  7636  0FEB                     	;# 
  7637  0FED                     	;# 
  7638  0FEE                     	;# 
  7639  0FEF                     	;# 
  7640  0000                     	;# 
  7641  0001                     	;# 
  7642  0002                     	;# 
  7643  0003                     	;# 
  7644  0004                     	;# 
  7645  0005                     	;# 
  7646  0006                     	;# 
  7647  0007                     	;# 
  7648  0008                     	;# 
  7649  0009                     	;# 
  7650  000A                     	;# 
  7651  000B                     	;# 
  7652  000C                     	;# 
  7653  000D                     	;# 
  7654  000E                     	;# 
  7655  0010                     	;# 
  7656  0011                     	;# 
  7657  0012                     	;# 
  7658  0013                     	;# 
  7659  0014                     	;# 
  7660  0015                     	;# 
  7661  0015                     	;# 
  7662  0016                     	;# 
  7663  0016                     	;# 
  7664  0017                     	;# 
  7665  0018                     	;# 
  7666  0019                     	;# 
  7667  0019                     	;# 
  7668  001A                     	;# 
  7669  001B                     	;# 
  7670  001C                     	;# 
  7671  001D                     	;# 
  7672  001E                     	;# 
  7673  001F                     	;# 
  7674  008C                     	;# 
  7675  008D                     	;# 
  7676  008E                     	;# 
  7677  0090                     	;# 
  7678  0091                     	;# 
  7679  0092                     	;# 
  7680  0093                     	;# 
  7681  0094                     	;# 
  7682  0097                     	;# 
  7683  009B                     	;# 
  7684  009B                     	;# 
  7685  009C                     	;# 
  7686  009D                     	;# 
  7687  009E                     	;# 
  7688  009F                     	;# 
  7689  010C                     	;# 
  7690  010D                     	;# 
  7691  010E                     	;# 
  7692  0111                     	;# 
  7693  0112                     	;# 
  7694  0113                     	;# 
  7695  0114                     	;# 
  7696  0115                     	;# 
  7697  0116                     	;# 
  7698  0117                     	;# 
  7699  0118                     	;# 
  7700  0119                     	;# 
  7701  018C                     	;# 
  7702  018D                     	;# 
  7703  018E                     	;# 
  7704  0197                     	;# 
  7705  0199                     	;# 
  7706  0199                     	;# 
  7707  0199                     	;# 
  7708  019A                     	;# 
  7709  019A                     	;# 
  7710  019A                     	;# 
  7711  019B                     	;# 
  7712  019B                     	;# 
  7713  019B                     	;# 
  7714  019B                     	;# 
  7715  019B                     	;# 
  7716  019C                     	;# 
  7717  019C                     	;# 
  7718  019C                     	;# 
  7719  019D                     	;# 
  7720  019D                     	;# 
  7721  019D                     	;# 
  7722  019E                     	;# 
  7723  019E                     	;# 
  7724  019E                     	;# 
  7725  019F                     	;# 
  7726  019F                     	;# 
  7727  019F                     	;# 
  7728  019F                     	;# 
  7729  019F                     	;# 
  7730  020C                     	;# 
  7731  020D                     	;# 
  7732  020E                     	;# 
  7733  0211                     	;# 
  7734  0211                     	;# 
  7735  0212                     	;# 
  7736  0212                     	;# 
  7737  0213                     	;# 
  7738  0213                     	;# 
  7739  0214                     	;# 
  7740  0214                     	;# 
  7741  0215                     	;# 
  7742  0215                     	;# 
  7743  0215                     	;# 
  7744  0215                     	;# 
  7745  0216                     	;# 
  7746  0216                     	;# 
  7747  0217                     	;# 
  7748  0217                     	;# 
  7749  0219                     	;# 
  7750  021A                     	;# 
  7751  021B                     	;# 
  7752  021C                     	;# 
  7753  021D                     	;# 
  7754  021D                     	;# 
  7755  021E                     	;# 
  7756  021F                     	;# 
  7757  028C                     	;# 
  7758  028D                     	;# 
  7759  028E                     	;# 
  7760  0291                     	;# 
  7761  0291                     	;# 
  7762  0292                     	;# 
  7763  0293                     	;# 
  7764  0294                     	;# 
  7765  0295                     	;# 
  7766  0295                     	;# 
  7767  0296                     	;# 
  7768  0297                     	;# 
  7769  0298                     	;# 
  7770  029F                     	;# 
  7771  030C                     	;# 
  7772  030D                     	;# 
  7773  030E                     	;# 
  7774  0311                     	;# 
  7775  0311                     	;# 
  7776  0312                     	;# 
  7777  0313                     	;# 
  7778  0314                     	;# 
  7779  0315                     	;# 
  7780  0315                     	;# 
  7781  0316                     	;# 
  7782  0317                     	;# 
  7783  0318                     	;# 
  7784  038C                     	;# 
  7785  038D                     	;# 
  7786  038E                     	;# 
  7787  0391                     	;# 
  7788  0392                     	;# 
  7789  0393                     	;# 
  7790  0394                     	;# 
  7791  0395                     	;# 
  7792  0396                     	;# 
  7793  0397                     	;# 
  7794  0398                     	;# 
  7795  0399                     	;# 
  7796  039A                     	;# 
  7797  039C                     	;# 
  7798  039D                     	;# 
  7799  039E                     	;# 
  7800  039F                     	;# 
  7801  0411                     	;# 
  7802  0411                     	;# 
  7803  0412                     	;# 
  7804  0413                     	;# 
  7805  0414                     	;# 
  7806  0415                     	;# 
  7807  0416                     	;# 
  7808  0417                     	;# 
  7809  0418                     	;# 
  7810  0418                     	;# 
  7811  0419                     	;# 
  7812  041A                     	;# 
  7813  041B                     	;# 
  7814  041C                     	;# 
  7815  041D                     	;# 
  7816  041E                     	;# 
  7817  041F                     	;# 
  7818  0498                     	;# 
  7819  0498                     	;# 
  7820  0499                     	;# 
  7821  049A                     	;# 
  7822  049B                     	;# 
  7823  049B                     	;# 
  7824  049C                     	;# 
  7825  049D                     	;# 
  7826  049E                     	;# 
  7827  049F                     	;# 
  7828  0617                     	;# 
  7829  0618                     	;# 
  7830  0619                     	;# 
  7831  0619                     	;# 
  7832  061A                     	;# 
  7833  061B                     	;# 
  7834  061C                     	;# 
  7835  061C                     	;# 
  7836  061F                     	;# 
  7837  0691                     	;# 
  7838  0692                     	;# 
  7839  0693                     	;# 
  7840  0694                     	;# 
  7841  0695                     	;# 
  7842  0696                     	;# 
  7843  0697                     	;# 
  7844  0698                     	;# 
  7845  0699                     	;# 
  7846  0711                     	;# 
  7847  0712                     	;# 
  7848  0713                     	;# 
  7849  0714                     	;# 
  7850  0715                     	;# 
  7851  0716                     	;# 
  7852  0717                     	;# 
  7853  0718                     	;# 
  7854  0719                     	;# 
  7855  0891                     	;# 
  7856  0891                     	;# 
  7857  0891                     	;# 
  7858  0891                     	;# 
  7859  0891                     	;# 
  7860  0891                     	;# 
  7861  0892                     	;# 
  7862  0892                     	;# 
  7863  0892                     	;# 
  7864  0893                     	;# 
  7865  0893                     	;# 
  7866  0893                     	;# 
  7867  0893                     	;# 
  7868  0893                     	;# 
  7869  0893                     	;# 
  7870  0894                     	;# 
  7871  0894                     	;# 
  7872  0894                     	;# 
  7873  0895                     	;# 
  7874  0895                     	;# 
  7875  0895                     	;# 
  7876  0896                     	;# 
  7877  0896                     	;# 
  7878  0896                     	;# 
  7879  089B                     	;# 
  7880  0911                     	;# 
  7881  0912                     	;# 
  7882  0913                     	;# 
  7883  0914                     	;# 
  7884  0915                     	;# 
  7885  0916                     	;# 
  7886  0918                     	;# 
  7887  0919                     	;# 
  7888  091A                     	;# 
  7889  091B                     	;# 
  7890  091C                     	;# 
  7891  091D                     	;# 
  7892  091E                     	;# 
  7893  091F                     	;# 
  7894  0E0F                     	;# 
  7895  0E10                     	;# 
  7896  0E11                     	;# 
  7897  0E12                     	;# 
  7898  0E13                     	;# 
  7899  0E14                     	;# 
  7900  0E15                     	;# 
  7901  0E16                     	;# 
  7902  0E17                     	;# 
  7903  0E18                     	;# 
  7904  0E19                     	;# 
  7905  0E1A                     	;# 
  7906  0E1B                     	;# 
  7907  0E1C                     	;# 
  7908  0E1D                     	;# 
  7909  0E1E                     	;# 
  7910  0E1F                     	;# 
  7911  0E20                     	;# 
  7912  0E21                     	;# 
  7913  0E22                     	;# 
  7914  0E24                     	;# 
  7915  0E25                     	;# 
  7916  0E28                     	;# 
  7917  0E29                     	;# 
  7918  0E2A                     	;# 
  7919  0E2B                     	;# 
  7920  0E2C                     	;# 
  7921  0E2D                     	;# 
  7922  0E2E                     	;# 
  7923  0E2F                     	;# 
  7924  0E90                     	;# 
  7925  0E91                     	;# 
  7926  0E92                     	;# 
  7927  0E94                     	;# 
  7928  0E95                     	;# 
  7929  0E9C                     	;# 
  7930  0E9D                     	;# 
  7931  0E9E                     	;# 
  7932  0E9F                     	;# 
  7933  0EA0                     	;# 
  7934  0EA1                     	;# 
  7935  0EA2                     	;# 
  7936  0EA3                     	;# 
  7937  0EA4                     	;# 
  7938  0EA5                     	;# 
  7939  0EA6                     	;# 
  7940  0EA7                     	;# 
  7941  0F0F                     	;# 
  7942  0F10                     	;# 
  7943  0F11                     	;# 
  7944  0F12                     	;# 
  7945  0F13                     	;# 
  7946  0F14                     	;# 
  7947  0F15                     	;# 
  7948  0F16                     	;# 
  7949  0F17                     	;# 
  7950  0F18                     	;# 
  7951  0F19                     	;# 
  7952  0F1A                     	;# 
  7953  0F1B                     	;# 
  7954  0F1C                     	;# 
  7955  0F1D                     	;# 
  7956  0F1E                     	;# 
  7957  0F1F                     	;# 
  7958  0F20                     	;# 
  7959  0F21                     	;# 
  7960  0F22                     	;# 
  7961  0F23                     	;# 
  7962  0F24                     	;# 
  7963  0F25                     	;# 
  7964  0F26                     	;# 
  7965  0F27                     	;# 
  7966  0F28                     	;# 
  7967  0F29                     	;# 
  7968  0F2A                     	;# 
  7969  0F2B                     	;# 
  7970  0F2C                     	;# 
  7971  0F2D                     	;# 
  7972  0F2E                     	;# 
  7973  0F2F                     	;# 
  7974  0F30                     	;# 
  7975  0F31                     	;# 
  7976  0F32                     	;# 
  7977  0F33                     	;# 
  7978  0F34                     	;# 
  7979  0F35                     	;# 
  7980  0F36                     	;# 
  7981  0F37                     	;# 
  7982  0FE4                     	;# 
  7983  0FE5                     	;# 
  7984  0FE6                     	;# 
  7985  0FE7                     	;# 
  7986  0FE8                     	;# 
  7987  0FE9                     	;# 
  7988  0FEA                     	;# 
  7989  0FEB                     	;# 
  7990  0FED                     	;# 
  7991  0FEE                     	;# 
  7992  0FEF                     	;# 
  7993  0000                     	;# 
  7994  0001                     	;# 
  7995  0002                     	;# 
  7996  0003                     	;# 
  7997  0004                     	;# 
  7998  0005                     	;# 
  7999  0006                     	;# 
  8000  0007                     	;# 
  8001  0008                     	;# 
  8002  0009                     	;# 
  8003  000A                     	;# 
  8004  000B                     	;# 
  8005  000C                     	;# 
  8006  000D                     	;# 
  8007  000E                     	;# 
  8008  0010                     	;# 
  8009  0011                     	;# 
  8010  0012                     	;# 
  8011  0013                     	;# 
  8012  0014                     	;# 
  8013  0015                     	;# 
  8014  0015                     	;# 
  8015  0016                     	;# 
  8016  0016                     	;# 
  8017  0017                     	;# 
  8018  0018                     	;# 
  8019  0019                     	;# 
  8020  0019                     	;# 
  8021  001A                     	;# 
  8022  001B                     	;# 
  8023  001C                     	;# 
  8024  001D                     	;# 
  8025  001E                     	;# 
  8026  001F                     	;# 
  8027  008C                     	;# 
  8028  008D                     	;# 
  8029  008E                     	;# 
  8030  0090                     	;# 
  8031  0091                     	;# 
  8032  0092                     	;# 
  8033  0093                     	;# 
  8034  0094                     	;# 
  8035  0097                     	;# 
  8036  009B                     	;# 
  8037  009B                     	;# 
  8038  009C                     	;# 
  8039  009D                     	;# 
  8040  009E                     	;# 
  8041  009F                     	;# 
  8042  010C                     	;# 
  8043  010D                     	;# 
  8044  010E                     	;# 
  8045  0111                     	;# 
  8046  0112                     	;# 
  8047  0113                     	;# 
  8048  0114                     	;# 
  8049  0115                     	;# 
  8050  0116                     	;# 
  8051  0117                     	;# 
  8052  0118                     	;# 
  8053  0119                     	;# 
  8054  018C                     	;# 
  8055  018D                     	;# 
  8056  018E                     	;# 
  8057  0197                     	;# 
  8058  0199                     	;# 
  8059  0199                     	;# 
  8060  0199                     	;# 
  8061  019A                     	;# 
  8062  019A                     	;# 
  8063  019A                     	;# 
  8064  019B                     	;# 
  8065  019B                     	;# 
  8066  019B                     	;# 
  8067  019B                     	;# 
  8068  019B                     	;# 
  8069  019C                     	;# 
  8070  019C                     	;# 
  8071  019C                     	;# 
  8072  019D                     	;# 
  8073  019D                     	;# 
  8074  019D                     	;# 
  8075  019E                     	;# 
  8076  019E                     	;# 
  8077  019E                     	;# 
  8078  019F                     	;# 
  8079  019F                     	;# 
  8080  019F                     	;# 
  8081  019F                     	;# 
  8082  019F                     	;# 
  8083  020C                     	;# 
  8084  020D                     	;# 
  8085  020E                     	;# 
  8086  0211                     	;# 
  8087  0211                     	;# 
  8088  0212                     	;# 
  8089  0212                     	;# 
  8090  0213                     	;# 
  8091  0213                     	;# 
  8092  0214                     	;# 
  8093  0214                     	;# 
  8094  0215                     	;# 
  8095  0215                     	;# 
  8096  0215                     	;# 
  8097  0215                     	;# 
  8098  0216                     	;# 
  8099  0216                     	;# 
  8100  0217                     	;# 
  8101  0217                     	;# 
  8102  0219                     	;# 
  8103  021A                     	;# 
  8104  021B                     	;# 
  8105  021C                     	;# 
  8106  021D                     	;# 
  8107  021D                     	;# 
  8108  021E                     	;# 
  8109  021F                     	;# 
  8110  028C                     	;# 
  8111  028D                     	;# 
  8112  028E                     	;# 
  8113  0291                     	;# 
  8114  0291                     	;# 
  8115  0292                     	;# 
  8116  0293                     	;# 
  8117  0294                     	;# 
  8118  0295                     	;# 
  8119  0295                     	;# 
  8120  0296                     	;# 
  8121  0297                     	;# 
  8122  0298                     	;# 
  8123  029F                     	;# 
  8124  030C                     	;# 
  8125  030D                     	;# 
  8126  030E                     	;# 
  8127  0311                     	;# 
  8128  0311                     	;# 
  8129  0312                     	;# 
  8130  0313                     	;# 
  8131  0314                     	;# 
  8132  0315                     	;# 
  8133  0315                     	;# 
  8134  0316                     	;# 
  8135  0317                     	;# 
  8136  0318                     	;# 
  8137  038C                     	;# 
  8138  038D                     	;# 
  8139  038E                     	;# 
  8140  0391                     	;# 
  8141  0392                     	;# 
  8142  0393                     	;# 
  8143  0394                     	;# 
  8144  0395                     	;# 
  8145  0396                     	;# 
  8146  0397                     	;# 
  8147  0398                     	;# 
  8148  0399                     	;# 
  8149  039A                     	;# 
  8150  039C                     	;# 
  8151  039D                     	;# 
  8152  039E                     	;# 
  8153  039F                     	;# 
  8154  0411                     	;# 
  8155  0411                     	;# 
  8156  0412                     	;# 
  8157  0413                     	;# 
  8158  0414                     	;# 
  8159  0415                     	;# 
  8160  0416                     	;# 
  8161  0417                     	;# 
  8162  0418                     	;# 
  8163  0418                     	;# 
  8164  0419                     	;# 
  8165  041A                     	;# 
  8166  041B                     	;# 
  8167  041C                     	;# 
  8168  041D                     	;# 
  8169  041E                     	;# 
  8170  041F                     	;# 
  8171  0498                     	;# 
  8172  0498                     	;# 
  8173  0499                     	;# 
  8174  049A                     	;# 
  8175  049B                     	;# 
  8176  049B                     	;# 
  8177  049C                     	;# 
  8178  049D                     	;# 
  8179  049E                     	;# 
  8180  049F                     	;# 
  8181  0617                     	;# 
  8182  0618                     	;# 
  8183  0619                     	;# 
  8184  0619                     	;# 
  8185  061A                     	;# 
  8186  061B                     	;# 
  8187  061C                     	;# 
  8188  061C                     	;# 
  8189  061F                     	;# 
  8190  0691                     	;# 
  8191  0692                     	;# 
  8192  0693                     	;# 
  8193  0694                     	;# 
  8194  0695                     	;# 
  8195  0696                     	;# 
  8196  0697                     	;# 
  8197  0698                     	;# 
  8198  0699                     	;# 
  8199  0711                     	;# 
  8200  0712                     	;# 
  8201  0713                     	;# 
  8202  0714                     	;# 
  8203  0715                     	;# 
  8204  0716                     	;# 
  8205  0717                     	;# 
  8206  0718                     	;# 
  8207  0719                     	;# 
  8208  0891                     	;# 
  8209  0891                     	;# 
  8210  0891                     	;# 
  8211  0891                     	;# 
  8212  0891                     	;# 
  8213  0891                     	;# 
  8214  0892                     	;# 
  8215  0892                     	;# 
  8216  0892                     	;# 
  8217  0893                     	;# 
  8218  0893                     	;# 
  8219  0893                     	;# 
  8220  0893                     	;# 
  8221  0893                     	;# 
  8222  0893                     	;# 
  8223  0894                     	;# 
  8224  0894                     	;# 
  8225  0894                     	;# 
  8226  0895                     	;# 
  8227  0895                     	;# 
  8228  0895                     	;# 
  8229  0896                     	;# 
  8230  0896                     	;# 
  8231  0896                     	;# 
  8232  089B                     	;# 
  8233  0911                     	;# 
  8234  0912                     	;# 
  8235  0913                     	;# 
  8236  0914                     	;# 
  8237  0915                     	;# 
  8238  0916                     	;# 
  8239  0918                     	;# 
  8240  0919                     	;# 
  8241  091A                     	;# 
  8242  091B                     	;# 
  8243  091C                     	;# 
  8244  091D                     	;# 
  8245  091E                     	;# 
  8246  091F                     	;# 
  8247  0E0F                     	;# 
  8248  0E10                     	;# 
  8249  0E11                     	;# 
  8250  0E12                     	;# 
  8251  0E13                     	;# 
  8252  0E14                     	;# 
  8253  0E15                     	;# 
  8254  0E16                     	;# 
  8255  0E17                     	;# 
  8256  0E18                     	;# 
  8257  0E19                     	;# 
  8258  0E1A                     	;# 
  8259  0E1B                     	;# 
  8260  0E1C                     	;# 
  8261  0E1D                     	;# 
  8262  0E1E                     	;# 
  8263  0E1F                     	;# 
  8264  0E20                     	;# 
  8265  0E21                     	;# 
  8266  0E22                     	;# 
  8267  0E24                     	;# 
  8268  0E25                     	;# 
  8269  0E28                     	;# 
  8270  0E29                     	;# 
  8271  0E2A                     	;# 
  8272  0E2B                     	;# 
  8273  0E2C                     	;# 
  8274  0E2D                     	;# 
  8275  0E2E                     	;# 
  8276  0E2F                     	;# 
  8277  0E90                     	;# 
  8278  0E91                     	;# 
  8279  0E92                     	;# 
  8280  0E94                     	;# 
  8281  0E95                     	;# 
  8282  0E9C                     	;# 
  8283  0E9D                     	;# 
  8284  0E9E                     	;# 
  8285  0E9F                     	;# 
  8286  0EA0                     	;# 
  8287  0EA1                     	;# 
  8288  0EA2                     	;# 
  8289  0EA3                     	;# 
  8290  0EA4                     	;# 
  8291  0EA5                     	;# 
  8292  0EA6                     	;# 
  8293  0EA7                     	;# 
  8294  0F0F                     	;# 
  8295  0F10                     	;# 
  8296  0F11                     	;# 
  8297  0F12                     	;# 
  8298  0F13                     	;# 
  8299  0F14                     	;# 
  8300  0F15                     	;# 
  8301  0F16                     	;# 
  8302  0F17                     	;# 
  8303  0F18                     	;# 
  8304  0F19                     	;# 
  8305  0F1A                     	;# 
  8306  0F1B                     	;# 
  8307  0F1C                     	;# 
  8308  0F1D                     	;# 
  8309  0F1E                     	;# 
  8310  0F1F                     	;# 
  8311  0F20                     	;# 
  8312  0F21                     	;# 
  8313  0F22                     	;# 
  8314  0F23                     	;# 
  8315  0F24                     	;# 
  8316  0F25                     	;# 
  8317  0F26                     	;# 
  8318  0F27                     	;# 
  8319  0F28                     	;# 
  8320  0F29                     	;# 
  8321  0F2A                     	;# 
  8322  0F2B                     	;# 
  8323  0F2C                     	;# 
  8324  0F2D                     	;# 
  8325  0F2E                     	;# 
  8326  0F2F                     	;# 
  8327  0F30                     	;# 
  8328  0F31                     	;# 
  8329  0F32                     	;# 
  8330  0F33                     	;# 
  8331  0F34                     	;# 
  8332  0F35                     	;# 
  8333  0F36                     	;# 
  8334  0F37                     	;# 
  8335  0FE4                     	;# 
  8336  0FE5                     	;# 
  8337  0FE6                     	;# 
  8338  0FE7                     	;# 
  8339  0FE8                     	;# 
  8340  0FE9                     	;# 
  8341  0FEA                     	;# 
  8342  0FEB                     	;# 
  8343  0FED                     	;# 
  8344  0FEE                     	;# 
  8345  0FEF                     	;_asciiCharTableLookup
  8346                           
  8347 ;; Function _menu_Exit is unused but had its address taken
  8348  0000                     
  8349 ;; Function _flashy_Exit is unused but had its address taken
  8350  0000                     
  8351 ;; Function _locked_Exit is unused but had its address taken
  8352  0000                     
  8353 ;; Function _secret_Exit is unused but had its address taken
  8354  0000                     
  8355 ;; Function _slot_Exit is unused but had its address taken
  8356  0000                     
  8357                           	psect	idataBANK1
  8358  207C                     __pidataBANK1:	
  8359                           
  8360                           ;initializer for _Shot_Options
  8361  207C  3416               	retlw	low (STR_30| (0+32768))
  8362  207D  34B1               	retlw	high (STR_30| (0+32768))
  8363  207E  340C               	retlw	low (STR_31| (0+32768))
  8364  207F  34B1               	retlw	high (STR_31| (0+32768))
  8365  2080  34F3               	retlw	low (STR_32| (0+32768))
  8366  2081  34B0               	retlw	high (STR_32| (0+32768))
  8367  2082  341B               	retlw	low (STR_33| (0+32768))
  8368  2083  34B1               	retlw	high (STR_33| (0+32768))
  8369  2084  34F8               	retlw	low (STR_34| (0+32768))
  8370  2085  34B0               	retlw	high (STR_34| (0+32768))
  8371  2086  3402               	retlw	low (STR_35| (0+32768))
  8372  2087  34B1               	retlw	high (STR_35| (0+32768))
  8373  2088  3407               	retlw	low (STR_36| (0+32768))
  8374  2089  34B1               	retlw	high (STR_36| (0+32768))
  8375  208A  34FD               	retlw	low (STR_37| (0+32768))
  8376  208B  34B0               	retlw	high (STR_37| (0+32768))
  8377  208C  3411               	retlw	low (STR_38| (0+32768))
  8378  208D  34B1               	retlw	high (STR_38| (0+32768))
  8379                           
  8380                           ;initializer for _randx
  8381  208E  3401               	retlw	1
  8382  208F  3400               	retlw	0
  8383  2090  3400               	retlw	0
  8384  2091  3400               	retlw	0
  8385                           
  8386                           ;initializer for _Leds_idx
  8387  2092  3401               	retlw	1
  8388  2093  3400               	retlw	0
  8389                           
  8390                           ;initializer for _locked_lock_base_leds
  8391  2094  341F               	retlw	31
  8392  2095  34F8               	retlw	248
  8393                           
  8394                           ;initializer for _FLASHY_TEXT_SECRET_TEST
  8395  2096  343E               	retlw	low (STR_9| (0+32768))
  8396  2097  34B0               	retlw	high (STR_9| (0+32768))
  8397                           
  8398                           	psect	idataBANK2
  8399  0002                     __pidataBANK2:	
  8400                           
  8401                           ;initializer for _FLASHY_TEXT
  8402  0002  342F               	retlw	low (STR_8| (0+32768))
  8403  0003  34B1               	retlw	high (STR_8| (0+32768))
  8404                           
  8405                           	psect	idataBANK3
  8406  21A2                     __pidataBANK3:	
  8407                           
  8408                           ;initializer for _locked_locking_leds
  8409  21A2  3400               	retlw	0
  8410  21A3  3400               	retlw	0
  8411  21A4  3420               	retlw	32
  8412  21A5  3400               	retlw	0
  8413  21A6  3460               	retlw	96
  8414  21A7  3400               	retlw	0
  8415  21A8  34E0               	retlw	224
  8416  21A9  3400               	retlw	0
  8417  21AA  34E0               	retlw	224
  8418  21AB  3401               	retlw	1
  8419  21AC  34E0               	retlw	224
  8420  21AD  3403               	retlw	3
  8421                           
  8422                           ;initializer for _menu_options_leds
  8423  21AE  3400               	retlw	0
  8424  21AF  3402               	retlw	2
  8425  21B0  3400               	retlw	0
  8426  21B1  3401               	retlw	1
  8427  21B2  3480               	retlw	128
  8428  21B3  3400               	retlw	0
  8429  21B4  3440               	retlw	64
  8430  21B5  3400               	retlw	0
  8431  21B6  3420               	retlw	32
  8432  21B7  3400               	retlw	0
  8433                           
  8434                           ;initializer for _menu_option
  8435  21B8  3434               	retlw	low (STR_4| (0+32768))
  8436  21B9  34B1               	retlw	high (STR_4| (0+32768))
  8437  21BA  34ED               	retlw	low (STR_5| (0+32768))
  8438  21BB  34B0               	retlw	high (STR_5| (0+32768))
  8439  21BC  348C               	retlw	low (STR_6| (0+32768))
  8440  21BD  34B0               	retlw	high (STR_6| (0+32768))
  8441  21BE  34E7               	retlw	low (STR_7| (0+32768))
  8442  21BF  34B0               	retlw	high (STR_7| (0+32768))
  8443                           
  8444                           ;initializer for marquee@F8648
  8445  21C0  3420               	retlw	32
  8446  21C1  3420               	retlw	32
  8447  21C2  3420               	retlw	32
  8448  21C3  3420               	retlw	32
  8449  21C4  3400               	retlw	0
  8450                           
  8451                           ;initializer for marquee_speedy@F8639
  8452  21C5  3420               	retlw	32
  8453  21C6  3420               	retlw	32
  8454  21C7  3420               	retlw	32
  8455  21C8  3420               	retlw	32
  8456  21C9  3400               	retlw	0
  8457                           
  8458                           	psect	idataBANK4
  8459  0800                     __pidataBANK4:	
  8460                           
  8461                           ;initializer for _secret_inputs
  8462  0800  3401               	retlw	1
  8463  0801  3401               	retlw	1
  8464  0802  3402               	retlw	2
  8465  0803  3402               	retlw	2
  8466  0804  3401               	retlw	1
  8467  0805  3402               	retlw	2
  8468  0806  3401               	retlw	1
  8469  0807  3402               	retlw	2
  8470  0808  3404               	retlw	4
  8471  0809  3408               	retlw	8
  8472  080A  3400               	retlw	0
  8473  080B  3400               	retlw	0
  8474  080C  3400               	retlw	0
  8475  080D  3400               	retlw	0
  8476  080E  3400               	retlw	0
  8477  080F  3400               	retlw	0
  8478  0810  3400               	retlw	0
  8479  0811  3400               	retlw	0
  8480  0812  3400               	retlw	0
  8481  0813  3400               	retlw	0
  8482  0814  3400               	retlw	0
  8483  0815  3400               	retlw	0
  8484  0816  34C5               	retlw	low (_secret_value| 0)
  8485  0817  3401               	retlw	1
  8486  0818  3400               	retlw	0
  8487                           
  8488                           	psect	idataBANK5
  8489  2619                     __pidataBANK5:	
  8490                           
  8491                           ;initializer for _Shot_Options_Long
  8492  2619  34CA               	retlw	low (STR_39| (0+32768))
  8493  261A  34B0               	retlw	high (STR_39| (0+32768))
  8494  261B  34C2               	retlw	low (STR_40| (0+32768))
  8495  261C  34B0               	retlw	high (STR_40| (0+32768))
  8496  261D  3496               	retlw	low (STR_41| (0+32768))
  8497  261E  34B0               	retlw	high (STR_41| (0+32768))
  8498  261F  3481               	retlw	low (STR_42| (0+32768))
  8499  2620  34B0               	retlw	high (STR_42| (0+32768))
  8500  2621  3476               	retlw	low (STR_43| (0+32768))
  8501  2622  34B0               	retlw	high (STR_43| (0+32768))
  8502  2623  34BA               	retlw	low (STR_44| (0+32768))
  8503  2624  34B0               	retlw	high (STR_44| (0+32768))
  8504  2625  346A               	retlw	low (STR_45| (0+32768))
  8505  2626  34B0               	retlw	high (STR_45| (0+32768))
  8506  2627  3450               	retlw	low (STR_46| (0+32768))
  8507  2628  34B0               	retlw	high (STR_46| (0+32768))
  8508  2629  349F               	retlw	low (STR_47| (0+32768))
  8509  262A  34B0               	retlw	high (STR_47| (0+32768))
  8510                           
  8511                           ;initializer for _Slot_Wheel
  8512  262B  3441               	retlw	65
  8513  262C  3442               	retlw	66
  8514  262D  3443               	retlw	67
  8515  262E  3444               	retlw	68
  8516  262F  3445               	retlw	69
  8517  2630  3446               	retlw	70
  8518  2631  3447               	retlw	71
  8519  2632  3448               	retlw	72
  8520  2633  3449               	retlw	73
  8521  2634  344A               	retlw	74
  8522  2635  344B               	retlw	75
  8523  2636  344C               	retlw	76
  8524  2637  344D               	retlw	77
  8525  2638  344E               	retlw	78
  8526  2639  344F               	retlw	79
  8527  263A  3450               	retlw	80
  8528  263B  3451               	retlw	81
  8529  263C  3452               	retlw	82
  8530  263D  3453               	retlw	83
  8531  263E  3454               	retlw	84
  8532  263F  3455               	retlw	85
  8533  2640  3456               	retlw	86
  8534  2641  3457               	retlw	87
  8535  2642  3458               	retlw	88
  8536  2643  3459               	retlw	89
  8537  2644  345A               	retlw	90
  8538  2645  3430               	retlw	48
  8539  2646  3431               	retlw	49
  8540  2647  3432               	retlw	50
  8541  2648  3433               	retlw	51
  8542  2649  3434               	retlw	52
  8543  264A  3435               	retlw	53
  8544  264B  3436               	retlw	54
  8545  264C  3437               	retlw	55
  8546  264D  3438               	retlw	56
  8547  264E  3439               	retlw	57
  8548  264F  343C               	retlw	60
  8549  2650  343E               	retlw	62
  8550  2651  3421               	retlw	33
  8551  2652  3424               	retlw	36
  8552  2653  3425               	retlw	37
  8553  2654  3426               	retlw	38
  8554  2655  342D               	retlw	45
  8555  2656  3423               	retlw	35
  8556  2657  342A               	retlw	42
  8557  2658  342B               	retlw	43
  8558  2659  342D               	retlw	45
  8559  265A  342E               	retlw	46
  8560  265B  3440               	retlw	64
  8561  265C  343B               	retlw	59
  8562  265D  343A               	retlw	58
  8563  265E  3427               	retlw	39
  8564  265F  3422               	retlw	34
  8565  2660  342F               	retlw	47
  8566  2661  345C               	retlw	92
  8567                           
  8568                           	psect	idataBANK6
  8569  2351                     __pidataBANK6:	
  8570                           
  8571                           ;initializer for _flashy_option
  8572  2351  342F               	retlw	low (STR_8| (0+32768))
  8573  2352  34B1               	retlw	high (STR_8| (0+32768))
  8574  2353  34B1               	retlw	low (STR_11| (0+32768))
  8575  2354  34B0               	retlw	high (STR_11| (0+32768))
  8576  2355  34D2               	retlw	low (STR_12| (0+32768))
  8577  2356  34B0               	retlw	high (STR_12| (0+32768))
  8578  2357  34E1               	retlw	low (STR_13| (0+32768))
  8579  2358  34B0               	retlw	high (STR_13| (0+32768))
  8580  2359  342B               	retlw	low (STR_14| (0+32768))
  8581  235A  34B0               	retlw	high (STR_14| (0+32768))
  8582  235B  3416               	retlw	low (STR_15| (0+32768))
  8583  235C  34B0               	retlw	high (STR_15| (0+32768))
  8584  235D  34B9               	retlw	low (STR_16| (0+32768))
  8585  235E  34A8               	retlw	high (STR_16| (0+32768))
  8586  235F  3400               	retlw	low (STR_17| (0+32768))
  8587  2360  34B0               	retlw	high (STR_17| (0+32768))
  8588  2361  345D               	retlw	low (STR_18| (0+32768))
  8589  2362  34A8               	retlw	high (STR_18| (0+32768))
  8590  2363  3480               	retlw	low (STR_19| (0+32768))
  8591  2364  34A8               	retlw	high (STR_19| (0+32768))
  8592  2365  34D3               	retlw	low (STR_20| (0+32768))
  8593  2366  34A8               	retlw	high (STR_20| (0+32768))
  8594  2367  349E               	retlw	low (STR_21| (0+32768))
  8595  2368  34A8               	retlw	high (STR_21| (0+32768))
  8596  2369  3435               	retlw	low (STR_22| (0+32768))
  8597  236A  34A8               	retlw	high (STR_22| (0+32768))
  8598  236B  340A               	retlw	low (STR_23| (0+32768))
  8599  236C  34A8               	retlw	high (STR_23| (0+32768))
  8600                           
  8601                           ;initializer for _roundabout_leds
  8602  236D  3480               	retlw	128
  8603  236E  3400               	retlw	0
  8604  236F  3400               	retlw	0
  8605  2370  3401               	retlw	1
  8606  2371  3400               	retlw	0
  8607  2372  3402               	retlw	2
  8608  2373  3400               	retlw	0
  8609  2374  3408               	retlw	8
  8610  2375  3400               	retlw	0
  8611  2376  3410               	retlw	16
  8612  2377  3400               	retlw	0
  8613  2378  3420               	retlw	32
  8614  2379  3400               	retlw	0
  8615  237A  3440               	retlw	64
  8616  237B  3400               	retlw	0
  8617  237C  3480               	retlw	128
  8618  237D  3400               	retlw	0
  8619  237E  3440               	retlw	64
  8620  237F  3400               	retlw	0
  8621  2380  3420               	retlw	32
  8622  2381  3400               	retlw	0
  8623  2382  3410               	retlw	16
  8624  2383  3400               	retlw	0
  8625  2384  3408               	retlw	8
  8626  2385  3400               	retlw	0
  8627  2386  3402               	retlw	2
  8628  2387  3400               	retlw	0
  8629  2388  3401               	retlw	1
  8630                           
  8631                           	psect	idataBANK7
  8632  2319                     __pidataBANK7:	
  8633                           
  8634                           ;initializer for _curtain_leds
  8635  2319  3480               	retlw	128
  8636  231A  3400               	retlw	0
  8637  231B  3480               	retlw	128
  8638  231C  3401               	retlw	1
  8639  231D  3480               	retlw	128
  8640  231E  3403               	retlw	3
  8641  231F  3480               	retlw	128
  8642  2320  340B               	retlw	11
  8643  2321  3480               	retlw	128
  8644  2322  341B               	retlw	27
  8645  2323  3480               	retlw	128
  8646  2324  343B               	retlw	59
  8647  2325  3480               	retlw	128
  8648  2326  347B               	retlw	123
  8649  2327  3480               	retlw	128
  8650  2328  34FB               	retlw	251
  8651  2329  3480               	retlw	128
  8652  232A  347B               	retlw	123
  8653  232B  3480               	retlw	128
  8654  232C  343B               	retlw	59
  8655  232D  3480               	retlw	128
  8656  232E  341B               	retlw	27
  8657  232F  3480               	retlw	128
  8658  2330  340B               	retlw	11
  8659  2331  3480               	retlw	128
  8660  2332  3403               	retlw	3
  8661  2333  3480               	retlw	128
  8662  2334  3401               	retlw	1
  8663                           
  8664                           ;initializer for _roundabout_leds_inverse
  8665  2335  3480               	retlw	128
  8666  2336  3400               	retlw	0
  8667  2337  3440               	retlw	64
  8668  2338  3400               	retlw	0
  8669  2339  3420               	retlw	32
  8670  233A  3400               	retlw	0
  8671  233B  3410               	retlw	16
  8672  233C  3400               	retlw	0
  8673  233D  3408               	retlw	8
  8674  233E  3400               	retlw	0
  8675  233F  3404               	retlw	4
  8676  2340  3400               	retlw	0
  8677  2341  3402               	retlw	2
  8678  2342  3400               	retlw	0
  8679  2343  3401               	retlw	1
  8680  2344  3400               	retlw	0
  8681  2345  3402               	retlw	2
  8682  2346  3400               	retlw	0
  8683  2347  3404               	retlw	4
  8684  2348  3400               	retlw	0
  8685  2349  3408               	retlw	8
  8686  234A  3400               	retlw	0
  8687  234B  3410               	retlw	16
  8688  234C  3400               	retlw	0
  8689  234D  3420               	retlw	32
  8690  234E  3400               	retlw	0
  8691  234F  3440               	retlw	64
  8692  2350  3400               	retlw	0
  8693                           
  8694                           	psect	idataBANK8
  8695  2060                     __pidataBANK8:	
  8696                           
  8697                           ;initializer for _curtain_leds_inverse
  8698  2060  3480               	retlw	128
  8699  2061  3400               	retlw	0
  8700  2062  34C0               	retlw	192
  8701  2063  3400               	retlw	0
  8702  2064  34E0               	retlw	224
  8703  2065  3400               	retlw	0
  8704  2066  34F0               	retlw	240
  8705  2067  3400               	retlw	0
  8706  2068  34F8               	retlw	248
  8707  2069  3400               	retlw	0
  8708  206A  34FC               	retlw	252
  8709  206B  3400               	retlw	0
  8710  206C  34FE               	retlw	254
  8711  206D  3400               	retlw	0
  8712  206E  34FF               	retlw	255
  8713  206F  3400               	retlw	0
  8714  2070  34FE               	retlw	254
  8715  2071  3400               	retlw	0
  8716  2072  34FC               	retlw	252
  8717  2073  3400               	retlw	0
  8718  2074  34F8               	retlw	248
  8719  2075  3400               	retlw	0
  8720  2076  34F0               	retlw	240
  8721  2077  3400               	retlw	0
  8722  2078  34E0               	retlw	224
  8723  2079  3400               	retlw	0
  8724  207A  34C0               	retlw	192
  8725  207B  3400               	retlw	0
  8726                           
  8727                           	psect	idataBIGRAM
  8728  0649                     __pidataBIGRAM:	
  8729                           
  8730                           ;initializer for _asciiCharTableLookup
  8731  0649  3400               	retlw	0
  8732  064A  3400               	retlw	0
  8733  064B  3400               	retlw	0
  8734  064C  3420               	retlw	32
  8735  064D  3410               	retlw	16
  8736  064E  3410               	retlw	16
  8737  064F  3420               	retlw	32
  8738  0650  3400               	retlw	0
  8739  0651  34A5               	retlw	165
  8740  0652  3421               	retlw	33
  8741  0653  34A5               	retlw	165
  8742  0654  3460               	retlw	96
  8743  0655  3400               	retlw	0
  8744  0656  3412               	retlw	18
  8745  0657  3410               	retlw	16
  8746  0658  3408               	retlw	8
  8747  0659  3420               	retlw	32
  8748  065A  3420               	retlw	32
  8749  065B  34B1               	retlw	177
  8750  065C  3430               	retlw	48
  8751  065D  3485               	retlw	133
  8752  065E  3445               	retlw	69
  8753  065F  3410               	retlw	16
  8754  0660  3430               	retlw	48
  8755  0661  3410               	retlw	16
  8756  0662  3410               	retlw	16
  8757  0663  3410               	retlw	16
  8758  0664  3410               	retlw	16
  8759  0665  3410               	retlw	16
  8760  0666  3410               	retlw	16
  8761  0667  3410               	retlw	16
  8762  0668  3410               	retlw	16
  8763  0669  3410               	retlw	16
  8764  066A  3410               	retlw	16
  8765  066B  3410               	retlw	16
  8766  066C  3410               	retlw	16
  8767  066D  3410               	retlw	16
  8768  066E  3410               	retlw	16
  8769  066F  3410               	retlw	16
  8770  0670  3410               	retlw	16
  8771  0671  3410               	retlw	16
  8772  0672  3410               	retlw	16
  8773  0673  3410               	retlw	16
  8774  0674  3410               	retlw	16
  8775  0675  3410               	retlw	16
  8776  0676  3410               	retlw	16
  8777  0677  3410               	retlw	16
  8778  0678  3410               	retlw	16
  8779  0679  3410               	retlw	16
  8780  067A  3410               	retlw	16
  8781  067B  3410               	retlw	16
  8782  067C  3410               	retlw	16
  8783  067D  3410               	retlw	16
  8784  067E  3410               	retlw	16
  8785  067F  3410               	retlw	16
  8786  0680  3410               	retlw	16
  8787  0681  3410               	retlw	16
  8788  0682  3410               	retlw	16
  8789  0683  3410               	retlw	16
  8790  0684  3410               	retlw	16
  8791  0685  3410               	retlw	16
  8792  0686  3410               	retlw	16
  8793  0687  3410               	retlw	16
  8794  0688  3410               	retlw	16
  8795  0689  3400               	retlw	0
  8796  068A  3400               	retlw	0
  8797  068B  34C0               	retlw	192
  8798  068C  3440               	retlw	64
  8799  068D  3400               	retlw	0
  8800  068E  3444               	retlw	68
  8801  068F  3410               	retlw	16
  8802  0690  3410               	retlw	16
  8803  0691  34B4               	retlw	180
  8804  0692  3435               	retlw	53
  8805  0693  3410               	retlw	16
  8806  0694  3410               	retlw	16
  8807  0695  3410               	retlw	16
  8808  0696  3410               	retlw	16
  8809  0697  3400               	retlw	0
  8810  0698  3404               	retlw	4
  8811  0699  3408               	retlw	8
  8812  069A  3408               	retlw	8
  8813  069B  3402               	retlw	2
  8814  069C  3402               	retlw	2
  8815  069D  341E               	retlw	30
  8816  069E  341E               	retlw	30
  8817  069F  3414               	retlw	20
  8818  06A0  3414               	retlw	20
  8819  06A1  3440               	retlw	64
  8820  06A2  3400               	retlw	0
  8821  06A3  3410               	retlw	16
  8822  06A4  3410               	retlw	16
  8823  06A5  3440               	retlw	64
  8824  06A6  3400               	retlw	0
  8825  06A7  3402               	retlw	2
  8826  06A8  3408               	retlw	8
  8827  06A9  34A9               	retlw	169
  8828  06AA  3463               	retlw	99
  8829  06AB  3480               	retlw	128
  8830  06AC  3440               	retlw	64
  8831  06AD  3431               	retlw	49
  8832  06AE  3470               	retlw	112
  8833  06AF  34B0               	retlw	176
  8834  06B0  3460               	retlw	96
  8835  06B1  3490               	retlw	144
  8836  06B2  3451               	retlw	81
  8837  06B3  34B0               	retlw	176
  8838  06B4  3431               	retlw	49
  8839  06B5  34B1               	retlw	177
  8840  06B6  3431               	retlw	49
  8841  06B7  3480               	retlw	128
  8842  06B8  3460               	retlw	96
  8843  06B9  34B1               	retlw	177
  8844  06BA  3471               	retlw	113
  8845  06BB  3490               	retlw	144
  8846  06BC  3471               	retlw	113
  8847  06BD  3410               	retlw	16
  8848  06BE  3410               	retlw	16
  8849  06BF  3410               	retlw	16
  8850  06C0  3410               	retlw	16
  8851  06C1  3408               	retlw	8
  8852  06C2  3408               	retlw	8
  8853  06C3  3430               	retlw	48
  8854  06C4  3410               	retlw	16
  8855  06C5  3402               	retlw	2
  8856  06C6  3402               	retlw	2
  8857  06C7  3414               	retlw	20
  8858  06C8  34E1               	retlw	225
  8859  06C9  3410               	retlw	16
  8860  06CA  3410               	retlw	16
  8861  06CB  3491               	retlw	145
  8862  06CC  3471               	retlw	113
  8863  06CD  34B1               	retlw	177
  8864  06CE  3411               	retlw	17
  8865  06CF  3421               	retlw	33
  8866  06D0  3421               	retlw	33
  8867  06D1  34B1               	retlw	177
  8868  06D2  3450               	retlw	80
  8869  06D3  3421               	retlw	33
  8870  06D4  3431               	retlw	49
  8871  06D5  3401               	retlw	1
  8872  06D6  3431               	retlw	49
  8873  06D7  34B1               	retlw	177
  8874  06D8  3421               	retlw	33
  8875  06D9  3491               	retlw	145
  8876  06DA  3451               	retlw	81
  8877  06DB  3424               	retlw	36
  8878  06DC  3424               	retlw	36
  8879  06DD  34A1               	retlw	161
  8880  06DE  3440               	retlw	64
  8881  06DF  3409               	retlw	9
  8882  06E0  3419               	retlw	25
  8883  06E1  3421               	retlw	33
  8884  06E2  3401               	retlw	1
  8885  06E3  3481               	retlw	129
  8886  06E4  344B               	retlw	75
  8887  06E5  3489               	retlw	137
  8888  06E6  3443               	retlw	67
  8889  06E7  34A1               	retlw	161
  8890  06E8  3461               	retlw	97
  8891  06E9  3411               	retlw	17
  8892  06EA  3471               	retlw	113
  8893  06EB  34A9               	retlw	169
  8894  06EC  3461               	retlw	97
  8895  06ED  3419               	retlw	25
  8896  06EE  3471               	retlw	113
  8897  06EF  34B0               	retlw	176
  8898  06F0  3431               	retlw	49
  8899  06F1  3404               	retlw	4
  8900  06F2  3424               	retlw	36
  8901  06F3  34A1               	retlw	161
  8902  06F4  3441               	retlw	65
  8903  06F5  3403               	retlw	3
  8904  06F6  3409               	retlw	9
  8905  06F7  348B               	retlw	139
  8906  06F8  3441               	retlw	65
  8907  06F9  340A               	retlw	10
  8908  06FA  340A               	retlw	10
  8909  06FB  3404               	retlw	4
  8910  06FC  340A               	retlw	10
  8911  06FD  3422               	retlw	34
  8912  06FE  3428               	retlw	40
  8913  06FF  3421               	retlw	33
  8914  0700  3421               	retlw	33
  8915  0701  3408               	retlw	8
  8916  0702  3402               	retlw	2
  8917  0703  340A               	retlw	10
  8918  0704  3400               	retlw	0
  8919  0705  3420               	retlw	32
  8920  0706  3400               	retlw	0
  8921  0707  3410               	retlw	16
  8922  0708  3410               	retlw	16
  8923  0709  3491               	retlw	145
  8924  070A  3471               	retlw	113
  8925  070B  34B1               	retlw	177
  8926  070C  3411               	retlw	17
  8927  070D  3431               	retlw	49
  8928  070E  3410               	retlw	16
  8929  070F  34B1               	retlw	177
  8930  0710  3450               	retlw	80
  8931  0711  3421               	retlw	33
  8932  0712  3431               	retlw	49
  8933  0713  3401               	retlw	1
  8934  0714  3431               	retlw	49
  8935  0715  34B1               	retlw	177
  8936  0716  3421               	retlw	33
  8937  0717  3491               	retlw	145
  8938  0718  3451               	retlw	81
  8939  0719  3424               	retlw	36
  8940  071A  3424               	retlw	36
  8941  071B  34A1               	retlw	161
  8942  071C  3440               	retlw	64
  8943  071D  3409               	retlw	9
  8944  071E  3419               	retlw	25
  8945  071F  3421               	retlw	33
  8946  0720  3401               	retlw	1
  8947  0721  3481               	retlw	129
  8948  0722  344B               	retlw	75
  8949  0723  3489               	retlw	137
  8950  0724  3443               	retlw	67
  8951  0725  34A1               	retlw	161
  8952  0726  3461               	retlw	97
  8953  0727  3411               	retlw	17
  8954  0728  3471               	retlw	113
  8955  0729  34A9               	retlw	169
  8956  072A  3461               	retlw	97
  8957  072B  3419               	retlw	25
  8958  072C  3471               	retlw	113
  8959  072D  34B0               	retlw	176
  8960  072E  3431               	retlw	49
  8961  072F  3404               	retlw	4
  8962  0730  3424               	retlw	36
  8963  0731  34A1               	retlw	161
  8964  0732  3441               	retlw	65
  8965  0733  3403               	retlw	3
  8966  0734  3409               	retlw	9
  8967  0735  348B               	retlw	139
  8968  0736  3441               	retlw	65
  8969  0737  340A               	retlw	10
  8970  0738  340A               	retlw	10
  8971  0739  3404               	retlw	4
  8972  073A  340A               	retlw	10
  8973  073B  3422               	retlw	34
  8974  073C  3428               	retlw	40
  8975  073D  3408               	retlw	8
  8976  073E  3408               	retlw	8
  8977  073F  3404               	retlw	4
  8978  0740  3404               	retlw	4
  8979  0741  3402               	retlw	2
  8980  0742  3402               	retlw	2
  8981  0743  3410               	retlw	16
  8982  0744  3410               	retlw	16
  8983  0745  34FF               	retlw	255
  8984  0746  34FF               	retlw	255
  8985  0747  3400               	retlw	0
  8986  0748  3400               	retlw	0
  8987                           
  8988                           	psect	stringtext1
  8989  1000                     __pstringtext1:	
  8990  1000                     _gamma_table_256x1k:	
  8991  1000  3400               	retlw	0
  8992  1001  3400               	retlw	0
  8993  1002  3400               	retlw	0
  8994  1003  3400               	retlw	0
  8995  1004  3400               	retlw	0
  8996  1005  3400               	retlw	0
  8997  1006  3400               	retlw	0
  8998  1007  3400               	retlw	0
  8999  1008  3400               	retlw	0
  9000  1009  3400               	retlw	0
  9001  100A  3400               	retlw	0
  9002  100B  3400               	retlw	0
  9003  100C  3400               	retlw	0
  9004  100D  3400               	retlw	0
  9005  100E  3400               	retlw	0
  9006  100F  3400               	retlw	0
  9007  1010  3400               	retlw	0
  9008  1011  3400               	retlw	0
  9009  1012  3400               	retlw	0
  9010  1013  3400               	retlw	0
  9011  1014  3400               	retlw	0
  9012  1015  3400               	retlw	0
  9013  1016  3400               	retlw	0
  9014  1017  3400               	retlw	0
  9015  1018  3400               	retlw	0
  9016  1019  3400               	retlw	0
  9017  101A  3400               	retlw	0
  9018  101B  3400               	retlw	0
  9019  101C  3400               	retlw	0
  9020  101D  3400               	retlw	0
  9021  101E  3401               	retlw	1
  9022  101F  3400               	retlw	0
  9023  1020  3401               	retlw	1
  9024  1021  3400               	retlw	0
  9025  1022  3401               	retlw	1
  9026  1023  3400               	retlw	0
  9027  1024  3401               	retlw	1
  9028  1025  3400               	retlw	0
  9029  1026  3401               	retlw	1
  9030  1027  3400               	retlw	0
  9031  1028  3401               	retlw	1
  9032  1029  3400               	retlw	0
  9033  102A  3402               	retlw	2
  9034  102B  3400               	retlw	0
  9035  102C  3402               	retlw	2
  9036  102D  3400               	retlw	0
  9037  102E  3402               	retlw	2
  9038  102F  3400               	retlw	0
  9039  1030  3403               	retlw	3
  9040  1031  3400               	retlw	0
  9041  1032  3403               	retlw	3
  9042  1033  3400               	retlw	0
  9043  1034  3403               	retlw	3
  9044  1035  3400               	retlw	0
  9045  1036  3404               	retlw	4
  9046  1037  3400               	retlw	0
  9047  1038  3404               	retlw	4
  9048  1039  3400               	retlw	0
  9049  103A  3404               	retlw	4
  9050  103B  3400               	retlw	0
  9051  103C  3405               	retlw	5
  9052  103D  3400               	retlw	0
  9053  103E  3405               	retlw	5
  9054  103F  3400               	retlw	0
  9055  1040  3406               	retlw	6
  9056  1041  3400               	retlw	0
  9057  1042  3406               	retlw	6
  9058  1043  3400               	retlw	0
  9059  1044  3407               	retlw	7
  9060  1045  3400               	retlw	0
  9061  1046  3407               	retlw	7
  9062  1047  3400               	retlw	0
  9063  1048  3408               	retlw	8
  9064  1049  3400               	retlw	0
  9065  104A  3408               	retlw	8
  9066  104B  3400               	retlw	0
  9067  104C  3409               	retlw	9
  9068  104D  3400               	retlw	0
  9069  104E  3409               	retlw	9
  9070  104F  3400               	retlw	0
  9071  1050  340A               	retlw	10
  9072  1051  3400               	retlw	0
  9073  1052  340B               	retlw	11
  9074  1053  3400               	retlw	0
  9075  1054  340B               	retlw	11
  9076  1055  3400               	retlw	0
  9077  1056  340C               	retlw	12
  9078  1057  3400               	retlw	0
  9079  1058  340D               	retlw	13
  9080  1059  3400               	retlw	0
  9081  105A  340E               	retlw	14
  9082  105B  3400               	retlw	0
  9083  105C  340E               	retlw	14
  9084  105D  3400               	retlw	0
  9085  105E  340F               	retlw	15
  9086  105F  3400               	retlw	0
  9087  1060  3410               	retlw	16
  9088  1061  3400               	retlw	0
  9089  1062  3411               	retlw	17
  9090  1063  3400               	retlw	0
  9091  1064  3412               	retlw	18
  9092  1065  3400               	retlw	0
  9093  1066  3413               	retlw	19
  9094  1067  3400               	retlw	0
  9095  1068  3413               	retlw	19
  9096  1069  3400               	retlw	0
  9097  106A  3414               	retlw	20
  9098  106B  3400               	retlw	0
  9099  106C  3415               	retlw	21
  9100  106D  3400               	retlw	0
  9101  106E  3416               	retlw	22
  9102  106F  3400               	retlw	0
  9103  1070  3417               	retlw	23
  9104  1071  3400               	retlw	0
  9105  1072  3419               	retlw	25
  9106  1073  3400               	retlw	0
  9107  1074  341A               	retlw	26
  9108  1075  3400               	retlw	0
  9109  1076  341B               	retlw	27
  9110  1077  3400               	retlw	0
  9111  1078  341C               	retlw	28
  9112  1079  3400               	retlw	0
  9113  107A  341D               	retlw	29
  9114  107B  3400               	retlw	0
  9115  107C  341E               	retlw	30
  9116  107D  3400               	retlw	0
  9117  107E  3420               	retlw	32
  9118  107F  3400               	retlw	0
  9119  1080  3421               	retlw	33
  9120  1081  3400               	retlw	0
  9121  1082  3422               	retlw	34
  9122  1083  3400               	retlw	0
  9123  1084  3423               	retlw	35
  9124  1085  3400               	retlw	0
  9125  1086  3425               	retlw	37
  9126  1087  3400               	retlw	0
  9127  1088  3426               	retlw	38
  9128  1089  3400               	retlw	0
  9129  108A  3428               	retlw	40
  9130  108B  3400               	retlw	0
  9131  108C  3429               	retlw	41
  9132  108D  3400               	retlw	0
  9133  108E  342A               	retlw	42
  9134  108F  3400               	retlw	0
  9135  1090  342C               	retlw	44
  9136  1091  3400               	retlw	0
  9137  1092  342E               	retlw	46
  9138  1093  3400               	retlw	0
  9139  1094  342F               	retlw	47
  9140  1095  3400               	retlw	0
  9141  1096  3431               	retlw	49
  9142  1097  3400               	retlw	0
  9143  1098  3432               	retlw	50
  9144  1099  3400               	retlw	0
  9145  109A  3434               	retlw	52
  9146  109B  3400               	retlw	0
  9147  109C  3436               	retlw	54
  9148  109D  3400               	retlw	0
  9149  109E  3437               	retlw	55
  9150  109F  3400               	retlw	0
  9151  10A0  3439               	retlw	57
  9152  10A1  3400               	retlw	0
  9153  10A2  343B               	retlw	59
  9154  10A3  3400               	retlw	0
  9155  10A4  343D               	retlw	61
  9156  10A5  3400               	retlw	0
  9157  10A6  343F               	retlw	63
  9158  10A7  3400               	retlw	0
  9159  10A8  3441               	retlw	65
  9160  10A9  3400               	retlw	0
  9161  10AA  3442               	retlw	66
  9162  10AB  3400               	retlw	0
  9163  10AC  3444               	retlw	68
  9164  10AD  3400               	retlw	0
  9165  10AE  3446               	retlw	70
  9166  10AF  3400               	retlw	0
  9167  10B0  3448               	retlw	72
  9168  10B1  3400               	retlw	0
  9169  10B2  344B               	retlw	75
  9170  10B3  3400               	retlw	0
  9171  10B4  344D               	retlw	77
  9172  10B5  3400               	retlw	0
  9173  10B6  344F               	retlw	79
  9174  10B7  3400               	retlw	0
  9175  10B8  3451               	retlw	81
  9176  10B9  3400               	retlw	0
  9177  10BA  3453               	retlw	83
  9178  10BB  3400               	retlw	0
  9179  10BC  3455               	retlw	85
  9180  10BD  3400               	retlw	0
  9181  10BE  3458               	retlw	88
  9182  10BF  3400               	retlw	0
  9183  10C0  345A               	retlw	90
  9184  10C1  3400               	retlw	0
  9185  10C2  345C               	retlw	92
  9186  10C3  3400               	retlw	0
  9187  10C4  345F               	retlw	95
  9188  10C5  3400               	retlw	0
  9189  10C6  3461               	retlw	97
  9190  10C7  3400               	retlw	0
  9191  10C8  3464               	retlw	100
  9192  10C9  3400               	retlw	0
  9193  10CA  3466               	retlw	102
  9194  10CB  3400               	retlw	0
  9195  10CC  3469               	retlw	105
  9196  10CD  3400               	retlw	0
  9197  10CE  346B               	retlw	107
  9198  10CF  3400               	retlw	0
  9199  10D0  346E               	retlw	110
  9200  10D1  3400               	retlw	0
  9201  10D2  3470               	retlw	112
  9202  10D3  3400               	retlw	0
  9203  10D4  3473               	retlw	115
  9204  10D5  3400               	retlw	0
  9205  10D6  3476               	retlw	118
  9206  10D7  3400               	retlw	0
  9207  10D8  3479               	retlw	121
  9208  10D9  3400               	retlw	0
  9209  10DA  347B               	retlw	123
  9210  10DB  3400               	retlw	0
  9211  10DC  347E               	retlw	126
  9212  10DD  3400               	retlw	0
  9213  10DE  3481               	retlw	129
  9214  10DF  3400               	retlw	0
  9215  10E0  3484               	retlw	132
  9216  10E1  3400               	retlw	0
  9217  10E2  3487               	retlw	135
  9218  10E3  3400               	retlw	0
  9219  10E4  348A               	retlw	138
  9220  10E5  3400               	retlw	0
  9221  10E6  348D               	retlw	141
  9222  10E7  3400               	retlw	0
  9223  10E8  3490               	retlw	144
  9224  10E9  3400               	retlw	0
  9225  10EA  3493               	retlw	147
  9226  10EB  3400               	retlw	0
  9227  10EC  3496               	retlw	150
  9228  10ED  3400               	retlw	0
  9229  10EE  349A               	retlw	154
  9230  10EF  3400               	retlw	0
  9231  10F0  349D               	retlw	157
  9232  10F1  3400               	retlw	0
  9233  10F2  34A0               	retlw	160
  9234  10F3  3400               	retlw	0
  9235  10F4  34A3               	retlw	163
  9236  10F5  3400               	retlw	0
  9237  10F6  34A7               	retlw	167
  9238  10F7  3400               	retlw	0
  9239  10F8  34AA               	retlw	170
  9240  10F9  3400               	retlw	0
  9241  10FA  34AE               	retlw	174
  9242  10FB  3400               	retlw	0
  9243  10FC  34B1               	retlw	177
  9244  10FD  3400               	retlw	0
  9245  10FE  34B5               	retlw	181
  9246  10FF  3400               	retlw	0
  9247  1100  34B8               	retlw	184
  9248  1101  3400               	retlw	0
  9249  1102  34BC               	retlw	188
  9250  1103  3400               	retlw	0
  9251  1104  34BF               	retlw	191
  9252  1105  3400               	retlw	0
  9253  1106  34C3               	retlw	195
  9254  1107  3400               	retlw	0
  9255  1108  34C7               	retlw	199
  9256  1109  3400               	retlw	0
  9257  110A  34CA               	retlw	202
  9258  110B  3400               	retlw	0
  9259  110C  34CE               	retlw	206
  9260  110D  3400               	retlw	0
  9261  110E  34D2               	retlw	210
  9262  110F  3400               	retlw	0
  9263  1110  34D6               	retlw	214
  9264  1111  3400               	retlw	0
  9265  1112  34DA               	retlw	218
  9266  1113  3400               	retlw	0
  9267  1114  34DE               	retlw	222
  9268  1115  3400               	retlw	0
  9269  1116  34E2               	retlw	226
  9270  1117  3400               	retlw	0
  9271  1118  34E6               	retlw	230
  9272  1119  3400               	retlw	0
  9273  111A  34EA               	retlw	234
  9274  111B  3400               	retlw	0
  9275  111C  34EE               	retlw	238
  9276  111D  3400               	retlw	0
  9277  111E  34F3               	retlw	243
  9278  111F  3400               	retlw	0
  9279  1120  34F7               	retlw	247
  9280  1121  3400               	retlw	0
  9281  1122  34FB               	retlw	251
  9282  1123  3400               	retlw	0
  9283  1124  34FF               	retlw	255
  9284  1125  3400               	retlw	0
  9285  1126  3404               	retlw	4
  9286  1127  3401               	retlw	1
  9287  1128  3408               	retlw	8
  9288  1129  3401               	retlw	1
  9289  112A  340D               	retlw	13
  9290  112B  3401               	retlw	1
  9291  112C  3411               	retlw	17
  9292  112D  3401               	retlw	1
  9293  112E  3416               	retlw	22
  9294  112F  3401               	retlw	1
  9295  1130  341A               	retlw	26
  9296  1131  3401               	retlw	1
  9297  1132  341F               	retlw	31
  9298  1133  3401               	retlw	1
  9299  1134  3424               	retlw	36
  9300  1135  3401               	retlw	1
  9301  1136  3428               	retlw	40
  9302  1137  3401               	retlw	1
  9303  1138  342D               	retlw	45
  9304  1139  3401               	retlw	1
  9305  113A  3432               	retlw	50
  9306  113B  3401               	retlw	1
  9307  113C  3437               	retlw	55
  9308  113D  3401               	retlw	1
  9309  113E  343C               	retlw	60
  9310  113F  3401               	retlw	1
  9311  1140  3441               	retlw	65
  9312  1141  3401               	retlw	1
  9313  1142  3446               	retlw	70
  9314  1143  3401               	retlw	1
  9315  1144  344B               	retlw	75
  9316  1145  3401               	retlw	1
  9317  1146  3450               	retlw	80
  9318  1147  3401               	retlw	1
  9319  1148  3455               	retlw	85
  9320  1149  3401               	retlw	1
  9321  114A  345A               	retlw	90
  9322  114B  3401               	retlw	1
  9323  114C  345F               	retlw	95
  9324  114D  3401               	retlw	1
  9325  114E  3465               	retlw	101
  9326  114F  3401               	retlw	1
  9327  1150  346A               	retlw	106
  9328  1151  3401               	retlw	1
  9329  1152  346F               	retlw	111
  9330  1153  3401               	retlw	1
  9331  1154  3475               	retlw	117
  9332  1155  3401               	retlw	1
  9333  1156  347A               	retlw	122
  9334  1157  3401               	retlw	1
  9335  1158  3480               	retlw	128
  9336  1159  3401               	retlw	1
  9337  115A  3486               	retlw	134
  9338  115B  3401               	retlw	1
  9339  115C  348B               	retlw	139
  9340  115D  3401               	retlw	1
  9341  115E  3491               	retlw	145
  9342  115F  3401               	retlw	1
  9343  1160  3497               	retlw	151
  9344  1161  3401               	retlw	1
  9345  1162  349C               	retlw	156
  9346  1163  3401               	retlw	1
  9347  1164  34A2               	retlw	162
  9348  1165  3401               	retlw	1
  9349  1166  34A8               	retlw	168
  9350  1167  3401               	retlw	1
  9351  1168  34AE               	retlw	174
  9352  1169  3401               	retlw	1
  9353  116A  34B4               	retlw	180
  9354  116B  3401               	retlw	1
  9355  116C  34BA               	retlw	186
  9356  116D  3401               	retlw	1
  9357  116E  34C0               	retlw	192
  9358  116F  3401               	retlw	1
  9359  1170  34C6               	retlw	198
  9360  1171  3401               	retlw	1
  9361  1172  34CC               	retlw	204
  9362  1173  3401               	retlw	1
  9363  1174  34D2               	retlw	210
  9364  1175  3401               	retlw	1
  9365  1176  34D9               	retlw	217
  9366  1177  3401               	retlw	1
  9367  1178  34DF               	retlw	223
  9368  1179  3401               	retlw	1
  9369  117A  34E5               	retlw	229
  9370  117B  3401               	retlw	1
  9371  117C  34EC               	retlw	236
  9372  117D  3401               	retlw	1
  9373  117E  34F2               	retlw	242
  9374  117F  3401               	retlw	1
  9375  1180  34F9               	retlw	249
  9376  1181  3401               	retlw	1
  9377  1182  34FF               	retlw	255
  9378  1183  3401               	retlw	1
  9379  1184  3406               	retlw	6
  9380  1185  3402               	retlw	2
  9381  1186  340D               	retlw	13
  9382  1187  3402               	retlw	2
  9383  1188  3413               	retlw	19
  9384  1189  3402               	retlw	2
  9385  118A  341A               	retlw	26
  9386  118B  3402               	retlw	2
  9387  118C  3421               	retlw	33
  9388  118D  3402               	retlw	2
  9389  118E  3428               	retlw	40
  9390  118F  3402               	retlw	2
  9391  1190  342F               	retlw	47
  9392  1191  3402               	retlw	2
  9393  1192  3436               	retlw	54
  9394  1193  3402               	retlw	2
  9395  1194  343D               	retlw	61
  9396  1195  3402               	retlw	2
  9397  1196  3444               	retlw	68
  9398  1197  3402               	retlw	2
  9399  1198  344B               	retlw	75
  9400  1199  3402               	retlw	2
  9401  119A  3452               	retlw	82
  9402  119B  3402               	retlw	2
  9403  119C  345A               	retlw	90
  9404  119D  3402               	retlw	2
  9405  119E  3461               	retlw	97
  9406  119F  3402               	retlw	2
  9407  11A0  3468               	retlw	104
  9408  11A1  3402               	retlw	2
  9409  11A2  3470               	retlw	112
  9410  11A3  3402               	retlw	2
  9411  11A4  3477               	retlw	119
  9412  11A5  3402               	retlw	2
  9413  11A6  347F               	retlw	127
  9414  11A7  3402               	retlw	2
  9415  11A8  3486               	retlw	134
  9416  11A9  3402               	retlw	2
  9417  11AA  348E               	retlw	142
  9418  11AB  3402               	retlw	2
  9419  11AC  3495               	retlw	149
  9420  11AD  3402               	retlw	2
  9421  11AE  349D               	retlw	157
  9422  11AF  3402               	retlw	2
  9423  11B0  34A5               	retlw	165
  9424  11B1  3402               	retlw	2
  9425  11B2  34AD               	retlw	173
  9426  11B3  3402               	retlw	2
  9427  11B4  34B5               	retlw	181
  9428  11B5  3402               	retlw	2
  9429  11B6  34BD               	retlw	189
  9430  11B7  3402               	retlw	2
  9431  11B8  34C5               	retlw	197
  9432  11B9  3402               	retlw	2
  9433  11BA  34CD               	retlw	205
  9434  11BB  3402               	retlw	2
  9435  11BC  34D5               	retlw	213
  9436  11BD  3402               	retlw	2
  9437  11BE  34DD               	retlw	221
  9438  11BF  3402               	retlw	2
  9439  11C0  34E5               	retlw	229
  9440  11C1  3402               	retlw	2
  9441  11C2  34ED               	retlw	237
  9442  11C3  3402               	retlw	2
  9443  11C4  34F6               	retlw	246
  9444  11C5  3402               	retlw	2
  9445  11C6  34FE               	retlw	254
  9446  11C7  3402               	retlw	2
  9447  11C8  3406               	retlw	6
  9448  11C9  3403               	retlw	3
  9449  11CA  340F               	retlw	15
  9450  11CB  3403               	retlw	3
  9451  11CC  3418               	retlw	24
  9452  11CD  3403               	retlw	3
  9453  11CE  3420               	retlw	32
  9454  11CF  3403               	retlw	3
  9455  11D0  3429               	retlw	41
  9456  11D1  3403               	retlw	3
  9457  11D2  3431               	retlw	49
  9458  11D3  3403               	retlw	3
  9459  11D4  343A               	retlw	58
  9460  11D5  3403               	retlw	3
  9461  11D6  3443               	retlw	67
  9462  11D7  3403               	retlw	3
  9463  11D8  344C               	retlw	76
  9464  11D9  3403               	retlw	3
  9465  11DA  3455               	retlw	85
  9466  11DB  3403               	retlw	3
  9467  11DC  345E               	retlw	94
  9468  11DD  3403               	retlw	3
  9469  11DE  3467               	retlw	103
  9470  11DF  3403               	retlw	3
  9471  11E0  3470               	retlw	112
  9472  11E1  3403               	retlw	3
  9473  11E2  3479               	retlw	121
  9474  11E3  3403               	retlw	3
  9475  11E4  3482               	retlw	130
  9476  11E5  3403               	retlw	3
  9477  11E6  348C               	retlw	140
  9478  11E7  3403               	retlw	3
  9479  11E8  3495               	retlw	149
  9480  11E9  3403               	retlw	3
  9481  11EA  349E               	retlw	158
  9482  11EB  3403               	retlw	3
  9483  11EC  34A8               	retlw	168
  9484  11ED  3403               	retlw	3
  9485  11EE  34B1               	retlw	177
  9486  11EF  3403               	retlw	3
  9487  11F0  34BB               	retlw	187
  9488  11F1  3403               	retlw	3
  9489  11F2  34C5               	retlw	197
  9490  11F3  3403               	retlw	3
  9491  11F4  34CE               	retlw	206
  9492  11F5  3403               	retlw	3
  9493  11F6  34D8               	retlw	216
  9494  11F7  3403               	retlw	3
  9495  11F8  34E2               	retlw	226
  9496  11F9  3403               	retlw	3
  9497  11FA  34EC               	retlw	236
  9498  11FB  3403               	retlw	3
  9499  11FC  34F6               	retlw	246
  9500  11FD  3403               	retlw	3
  9501  11FE  34FF               	retlw	255
  9502  11FF  3403               	retlw	3
  9503  1200                     __end_of_gamma_table_256x1k:	
  9504                           
  9505                           	psect	stringtext2
  9506  2800                     __pstringtext2:	
  9507  2800                     _dpowers:	
  9508  2800  3401               	retlw	1
  9509  2801  3400               	retlw	0
  9510  2802  340A               	retlw	10
  9511  2803  3400               	retlw	0
  9512  2804  3464               	retlw	100
  9513  2805  3400               	retlw	0
  9514  2806  34E8               	retlw	232
  9515  2807  3403               	retlw	3
  9516  2808  3410               	retlw	16
  9517  2809  3427               	retlw	39
  9518  280A                     __end_of_dpowers:	
  9519  000D                     _PORTBbits	set	13
  9520  000C                     _PORTAbits	set	12
  9521  000E                     _PORTCbits	set	14
  9522  000B                     _INTCONbits	set	11
  9523  0017                     _T0CON0bits	set	23
  9524  0010                     _PIR0bits	set	16
  9525  0015                     _TMR0L	set	21
  9526  0016                     _TMR0H	set	22
  9527  0018                     _T0CON1	set	24
  9528  0017                     _T0CON0	set	23
  9529  0012                     _PIR2bits	set	18
  9530  001F                     _T2CONbits	set	31
  9531  0011                     _PIR1bits	set	17
  9532  001D                     _TMR2	set	29
  9533  001E                     _PR2	set	30
  9534  001F                     _T2CON	set	31
  9535  005F                     _GIE	set	95
  9536  0090                     _PIE0bits	set	144
  9537  008E                     _TRISC	set	142
  9538  008D                     _TRISB	set	141
  9539  008C                     _TRISA	set	140
  9540  0097                     _WDTCON	set	151
  9541  010E                     _LATCbits	set	270
  9542  010D                     _LATBbits	set	269
  9543  010E                     _LATC	set	270
  9544  010D                     _LATB	set	269
  9545  010C                     _LATA	set	268
  9546  018C                     _ANSELA	set	396
  9547  018D                     _ANSELB	set	397
  9548  018E                     _ANSELC	set	398
  9549  020E                     _WPUC	set	526
  9550  020C                     _WPUA	set	524
  9551  020D                     _WPUB	set	525
  9552  0214                     _SSP1STATbits	set	532
  9553  0211                     _SSP1BUF	set	529
  9554  0215                     _SSP1CON1bits	set	533
  9555  0212                     _SSP1ADD	set	530
  9556  0215                     _SSP1CON1	set	533
  9557  0214                     _SSP1STAT	set	532
  9558  0297                     _CCP2CONbits	set	663
  9559  0295                     _CCPR2L	set	661
  9560  0296                     _CCPR2H	set	662
  9561  0297                     _CCP2CON	set	663
  9562  028E                     _ODCONC	set	654
  9563  028D                     _ODCONB	set	653
  9564  028C                     _ODCONA	set	652
  9565  0293                     _CCP1CONbits	set	659
  9566  029F                     _CCPTMRSbits	set	671
  9567  0291                     _CCPR1L	set	657
  9568  0292                     _CCPR1H	set	658
  9569  0293                     _CCP1CON	set	659
  9570  0417                     _T4CONbits	set	1047
  9571  0415                     _TMR4	set	1045
  9572  0416                     _PR4	set	1046
  9573  0417                     _T4CON	set	1047
  9574  061A                     _PWM6DCL	set	1562
  9575  061B                     _PWM6DCH	set	1563
  9576  061C                     _PWM6CON	set	1564
  9577  061F                     _PWMTMRSbits	set	1567
  9578  0617                     _PWM5DCL	set	1559
  9579  0618                     _PWM5DCH	set	1560
  9580  0619                     _PWM5CON	set	1561
  9581  0896                     _NVMCON2	set	2198
  9582  0893                     _NVMDATL	set	2195
  9583  0894                     _NVMDATH	set	2196
  9584  0895                     _NVMCON1bits	set	2197
  9585  0892                     _NVMADRH	set	2194
  9586  0891                     _NVMADRL	set	2193
  9587  091E                     _OSCTUNE	set	2334
  9588  091F                     _OSCFRQ	set	2335
  9589  091D                     _OSCEN	set	2333
  9590  091B                     _OSCCON3	set	2331
  9591  0919                     _OSCCON1	set	2329
  9592  48E0                     _PLLR	set	18656
  9593  0E20                     _SSP1CLKPPSbits	set	3616
  9594  0E21                     _SSP1DATPPSbits	set	3617
  9595  0E0F                     _PPSLOCKbits	set	3599
  9596  0E0F                     _PPSLOCK	set	3599
  9597  0EA2                     _RC2PPSbits	set	3746
  9598  0E9E                     _RB6PPSbits	set	3742
  9599  0EA3                     _RC3PPSbits	set	3747
  9600  0EA0                     _RC0PPSbits	set	3744
  9601  0EA4                     _RC4PPSbits	set	3748
  9602  0EA1                     _RC1PPSbits	set	3745
  9603  280A                     STR_23:	
  9604  280A  3448               	retlw	72	;'H'
  9605  280B  3454               	retlw	84	;'T'
  9606  280C  3454               	retlw	84	;'T'
  9607  280D  3450               	retlw	80	;'P'
  9608  280E  3453               	retlw	83	;'S'
  9609  280F  343A               	retlw	58	;':'
  9610  2810  342F               	retlw	47	;'/'
  9611  2811  342F               	retlw	47	;'/'
  9612  2812  3447               	retlw	71	;'G'
  9613  2813  3449               	retlw	73	;'I'
  9614  2814  3454               	retlw	84	;'T'
  9615  2815  3448               	retlw	72	;'H'
  9616  2816  3455               	retlw	85	;'U'
  9617  2817  3442               	retlw	66	;'B'
  9618  2818  342E               	retlw	46	;'.'
  9619  2819  3443               	retlw	67	;'C'
  9620  281A  344F               	retlw	79	;'O'
  9621  281B  344D               	retlw	77	;'M'
  9622  281C  342F               	retlw	47	;'/'
  9623  281D  344E               	retlw	78	;'N'
  9624  281E  3455               	retlw	85	;'U'
  9625  281F  344C               	retlw	76	;'L'
  9626  2820  344C               	retlw	76	;'L'
  9627  2821  3449               	retlw	73	;'I'
  9628  2822  3442               	retlw	66	;'B'
  9629  2823  3441               	retlw	65	;'A'
  9630  2824  3444               	retlw	68	;'D'
  9631  2825  3447               	retlw	71	;'G'
  9632  2826  3445               	retlw	69	;'E'
  9633  2827  342F               	retlw	47	;'/'
  9634  2828  3444               	retlw	68	;'D'
  9635  2829  3445               	retlw	69	;'E'
  9636  282A  3446               	retlw	70	;'F'
  9637  282B  3443               	retlw	67	;'C'
  9638  282C  344F               	retlw	79	;'O'
  9639  282D  344E               	retlw	78	;'N'
  9640  282E  3432               	retlw	50	;'2'
  9641  282F  3435               	retlw	53	;'5'
  9642  2830  3420               	retlw	32	;' '
  9643  2831  3420               	retlw	32	;' '
  9644  2832  3420               	retlw	32	;' '
  9645  2833  3420               	retlw	32	;' '
  9646  2834  3400               	retlw	0
  9647                           
  9648                           	psect	stringtext3
  9649  2835                     __pstringtext3:	
  9650  2835                     STR_22:	
  9651  2835  3447               	retlw	71	;'G'
  9652  2836  3455               	retlw	85	;'U'
  9653  2837  3459               	retlw	89	;'Y'
  9654  2838  3453               	retlw	83	;'S'
  9655  2839  3420               	retlw	32	;' '
  9656  283A  3449               	retlw	73	;'I'
  9657  283B  3420               	retlw	32	;' '
  9658  283C  3448               	retlw	72	;'H'
  9659  283D  3441               	retlw	65	;'A'
  9660  283E  3456               	retlw	86	;'V'
  9661  283F  3445               	retlw	69	;'E'
  9662  2840  3420               	retlw	32	;' '
  9663  2841  3441               	retlw	65	;'A'
  9664  2842  3420               	retlw	32	;' '
  9665  2843  3447               	retlw	71	;'G'
  9666  2844  3452               	retlw	82	;'R'
  9667  2845  3445               	retlw	69	;'E'
  9668  2846  3441               	retlw	65	;'A'
  9669  2847  3454               	retlw	84	;'T'
  9670  2848  3420               	retlw	32	;' '
  9671  2849  3449               	retlw	73	;'I'
  9672  284A  3444               	retlw	68	;'D'
  9673  284B  3445               	retlw	69	;'E'
  9674  284C  3441               	retlw	65	;'A'
  9675  284D  3420               	retlw	32	;' '
  9676  284E  342D               	retlw	45	;'-'
  9677  284F  344D               	retlw	77	;'M'
  9678  2850  3449               	retlw	73	;'I'
  9679  2851  344B               	retlw	75	;'K'
  9680  2852  3445               	retlw	69	;'E'
  9681  2853  3420               	retlw	32	;' '
  9682  2854  344B               	retlw	75	;'K'
  9683  2855  342E               	retlw	46	;'.'
  9684  2856  3420               	retlw	32	;' '
  9685  2857  3420               	retlw	32	;' '
  9686  2858  3420               	retlw	32	;' '
  9687  2859  3420               	retlw	32	;' '
  9688  285A  3420               	retlw	32	;' '
  9689  285B  3420               	retlw	32	;' '
  9690  285C  3400               	retlw	0
  9691                           
  9692                           	psect	stringtext4
  9693  285D                     __pstringtext4:	
  9694  285D                     STR_18:	
  9695  285D  3441               	retlw	65	;'A'
  9696  285E  344C               	retlw	76	;'L'
  9697  285F  344C               	retlw	76	;'L'
  9698  2860  3420               	retlw	32	;' '
  9699  2861  3459               	retlw	89	;'Y'
  9700  2862  344F               	retlw	79	;'O'
  9701  2863  3455               	retlw	85	;'U'
  9702  2864  3420               	retlw	32	;' '
  9703  2865  3442               	retlw	66	;'B'
  9704  2866  3441               	retlw	65	;'A'
  9705  2867  3453               	retlw	83	;'S'
  9706  2868  3445               	retlw	69	;'E'
  9707  2869  3420               	retlw	32	;' '
  9708  286A  3441               	retlw	65	;'A'
  9709  286B  3452               	retlw	82	;'R'
  9710  286C  3445               	retlw	69	;'E'
  9711  286D  3420               	retlw	32	;' '
  9712  286E  3442               	retlw	66	;'B'
  9713  286F  3445               	retlw	69	;'E'
  9714  2870  344C               	retlw	76	;'L'
  9715  2871  344F               	retlw	79	;'O'
  9716  2872  344E               	retlw	78	;'N'
  9717  2873  3447               	retlw	71	;'G'
  9718  2874  3420               	retlw	32	;' '
  9719  2875  3454               	retlw	84	;'T'
  9720  2876  344F               	retlw	79	;'O'
  9721  2877  3420               	retlw	32	;' '
  9722  2878  3455               	retlw	85	;'U'
  9723  2879  3453               	retlw	83	;'S'
  9724  287A  3420               	retlw	32	;' '
  9725  287B  3420               	retlw	32	;' '
  9726  287C  3420               	retlw	32	;' '
  9727  287D  3420               	retlw	32	;' '
  9728  287E  3420               	retlw	32	;' '
  9729  287F  3400               	retlw	0
  9730                           
  9731                           	psect	stringtext5
  9732  2880                     __pstringtext5:	
  9733  2880                     STR_19:	
  9734  2880  3444               	retlw	68	;'D'
  9735  2881  344F               	retlw	79	;'O'
  9736  2882  3445               	retlw	69	;'E'
  9737  2883  3453               	retlw	83	;'S'
  9738  2884  3420               	retlw	32	;' '
  9739  2885  3444               	retlw	68	;'D'
  9740  2886  3445               	retlw	69	;'E'
  9741  2887  3456               	retlw	86	;'V'
  9742  2888  3441               	retlw	65	;'A'
  9743  2889  344E               	retlw	78	;'N'
  9744  288A  3420               	retlw	32	;' '
  9745  288B  3448               	retlw	72	;'H'
  9746  288C  3441               	retlw	65	;'A'
  9747  288D  3453               	retlw	83	;'S'
  9748  288E  3420               	retlw	32	;' '
  9749  288F  3448               	retlw	72	;'H'
  9750  2890  3449               	retlw	73	;'I'
  9751  2891  3453               	retlw	83	;'S'
  9752  2892  3420               	retlw	32	;' '
  9753  2893  3450               	retlw	80	;'P'
  9754  2894  3448               	retlw	72	;'H'
  9755  2895  344F               	retlw	79	;'O'
  9756  2896  344E               	retlw	78	;'N'
  9757  2897  3445               	retlw	69	;'E'
  9758  2898  343F               	retlw	63	;'?'
  9759  2899  3420               	retlw	32	;' '
  9760  289A  3420               	retlw	32	;' '
  9761  289B  3420               	retlw	32	;' '
  9762  289C  3420               	retlw	32	;' '
  9763  289D  3400               	retlw	0
  9764                           
  9765                           	psect	stringtext6
  9766  289E                     __pstringtext6:	
  9767  289E                     STR_21:	
  9768  289E  344E               	retlw	78	;'N'
  9769  289F  344F               	retlw	79	;'O'
  9770  28A0  3454               	retlw	84	;'T'
  9771  28A1  3448               	retlw	72	;'H'
  9772  28A2  3449               	retlw	73	;'I'
  9773  28A3  344E               	retlw	78	;'N'
  9774  28A4  3447               	retlw	71	;'G'
  9775  28A5  3420               	retlw	32	;' '
  9776  28A6  3454               	retlw	84	;'T'
  9777  28A7  344F               	retlw	79	;'O'
  9778  28A8  3420               	retlw	32	;' '
  9779  28A9  3453               	retlw	83	;'S'
  9780  28AA  3445               	retlw	69	;'E'
  9781  28AB  3445               	retlw	69	;'E'
  9782  28AC  3420               	retlw	32	;' '
  9783  28AD  3448               	retlw	72	;'H'
  9784  28AE  3445               	retlw	69	;'E'
  9785  28AF  3452               	retlw	82	;'R'
  9786  28B0  3445               	retlw	69	;'E'
  9787  28B1  342E               	retlw	46	;'.'
  9788  28B2  342E               	retlw	46	;'.'
  9789  28B3  342E               	retlw	46	;'.'
  9790  28B4  3420               	retlw	32	;' '
  9791  28B5  3420               	retlw	32	;' '
  9792  28B6  3420               	retlw	32	;' '
  9793  28B7  3420               	retlw	32	;' '
  9794  28B8  3400               	retlw	0
  9795                           
  9796                           	psect	stringtext7
  9797  28B9                     __pstringtext7:	
  9798  28B9                     STR_16:	
  9799  28B9  3448               	retlw	72	;'H'
  9800  28BA  3454               	retlw	84	;'T'
  9801  28BB  3454               	retlw	84	;'T'
  9802  28BC  3450               	retlw	80	;'P'
  9803  28BD  3420               	retlw	32	;' '
  9804  28BE  3434               	retlw	52	;'4'
  9805  28BF  3431               	retlw	49	;'1'
  9806  28C0  3438               	retlw	56	;'8'
  9807  28C1  3420               	retlw	32	;' '
  9808  28C2  3449               	retlw	73	;'I'
  9809  28C3  3427               	retlw	39	;'''
  9810  28C4  344D               	retlw	77	;'M'
  9811  28C5  3420               	retlw	32	;' '
  9812  28C6  3441               	retlw	65	;'A'
  9813  28C7  3420               	retlw	32	;' '
  9814  28C8  3454               	retlw	84	;'T'
  9815  28C9  3445               	retlw	69	;'E'
  9816  28CA  3441               	retlw	65	;'A'
  9817  28CB  3450               	retlw	80	;'P'
  9818  28CC  344F               	retlw	79	;'O'
  9819  28CD  3454               	retlw	84	;'T'
  9820  28CE  3420               	retlw	32	;' '
  9821  28CF  3420               	retlw	32	;' '
  9822  28D0  3420               	retlw	32	;' '
  9823  28D1  3420               	retlw	32	;' '
  9824  28D2  3400               	retlw	0
  9825                           
  9826                           	psect	stringtext8
  9827  28D3                     __pstringtext8:	
  9828  28D3                     STR_20:	
  9829  28D3  3459               	retlw	89	;'Y'
  9830  28D4  344F               	retlw	79	;'O'
  9831  28D5  3455               	retlw	85	;'U'
  9832  28D6  3420               	retlw	32	;' '
  9833  28D7  344A               	retlw	74	;'J'
  9834  28D8  3455               	retlw	85	;'U'
  9835  28D9  3453               	retlw	83	;'S'
  9836  28DA  3454               	retlw	84	;'T'
  9837  28DB  3420               	retlw	32	;' '
  9838  28DC  3448               	retlw	72	;'H'
  9839  28DD  3441               	retlw	65	;'A'
  9840  28DE  3456               	retlw	86	;'V'
  9841  28DF  3445               	retlw	69	;'E'
  9842  28E0  3420               	retlw	32	;' '
  9843  28E1  3454               	retlw	84	;'T'
  9844  28E2  344F               	retlw	79	;'O'
  9845  28E3  3420               	retlw	32	;' '
  9846  28E4  3442               	retlw	66	;'B'
  9847  28E5  3445               	retlw	69	;'E'
  9848  28E6  344C               	retlw	76	;'L'
  9849  28E7  3449               	retlw	73	;'I'
  9850  28E8  3445               	retlw	69	;'E'
  9851  28E9  3456               	retlw	86	;'V'
  9852  28EA  3445               	retlw	69	;'E'
  9853  28EB  3400               	retlw	0
  9854                           
  9855                           	psect	stringtext9
  9856  3000                     __pstringtext9:	
  9857  3000                     STR_17:	
  9858  3000  3449               	retlw	73	;'I'
  9859  3001  3420               	retlw	32	;' '
  9860  3002  3441               	retlw	65	;'A'
  9861  3003  344D               	retlw	77	;'M'
  9862  3004  3420               	retlw	32	;' '
  9863  3005  344A               	retlw	74	;'J'
  9864  3006  3455               	retlw	85	;'U'
  9865  3007  3453               	retlw	83	;'S'
  9866  3008  3454               	retlw	84	;'T'
  9867  3009  3420               	retlw	32	;' '
  9868  300A  3441               	retlw	65	;'A'
  9869  300B  3420               	retlw	32	;' '
  9870  300C  3442               	retlw	66	;'B'
  9871  300D  3441               	retlw	65	;'A'
  9872  300E  3444               	retlw	68	;'D'
  9873  300F  3447               	retlw	71	;'G'
  9874  3010  3445               	retlw	69	;'E'
  9875  3011  3420               	retlw	32	;' '
  9876  3012  3420               	retlw	32	;' '
  9877  3013  3420               	retlw	32	;' '
  9878  3014  3420               	retlw	32	;' '
  9879  3015  3400               	retlw	0
  9880                           
  9881                           	psect	stringtext10
  9882  3016                     __pstringtext10:	
  9883  3016                     STR_15:	
  9884  3016  3457               	retlw	87	;'W'
  9885  3017  3449               	retlw	73	;'I'
  9886  3018  344C               	retlw	76	;'L'
  9887  3019  344C               	retlw	76	;'L'
  9888  301A  3420               	retlw	32	;' '
  9889  301B  3448               	retlw	72	;'H'
  9890  301C  3441               	retlw	65	;'A'
  9891  301D  3443               	retlw	67	;'C'
  9892  301E  344B               	retlw	75	;'K'
  9893  301F  3420               	retlw	32	;' '
  9894  3020  3446               	retlw	70	;'F'
  9895  3021  344F               	retlw	79	;'O'
  9896  3022  3452               	retlw	82	;'R'
  9897  3023  3420               	retlw	32	;' '
  9898  3024  3441               	retlw	65	;'A'
  9899  3025  342F               	retlw	47	;'/'
  9900  3026  3443               	retlw	67	;'C'
  9901  3027  3420               	retlw	32	;' '
  9902  3028  3420               	retlw	32	;' '
  9903  3029  3420               	retlw	32	;' '
  9904  302A  3400               	retlw	0
  9905                           
  9906                           	psect	stringtext11
  9907  302B                     __pstringtext11:	
  9908  302B                     STR_14:	
  9909  302B  3448               	retlw	72	;'H'
  9910  302C  3441               	retlw	65	;'A'
  9911  302D  3443               	retlw	67	;'C'
  9912  302E  344B               	retlw	75	;'K'
  9913  302F  3420               	retlw	32	;' '
  9914  3030  3454               	retlw	84	;'T'
  9915  3031  3448               	retlw	72	;'H'
  9916  3032  3445               	retlw	69	;'E'
  9917  3033  3420               	retlw	32	;' '
  9918  3034  3450               	retlw	80	;'P'
  9919  3035  344C               	retlw	76	;'L'
  9920  3036  3441               	retlw	65	;'A'
  9921  3037  344E               	retlw	78	;'N'
  9922  3038  3445               	retlw	69	;'E'
  9923  3039  3454               	retlw	84	;'T'
  9924  303A  3420               	retlw	32	;' '
  9925  303B  3420               	retlw	32	;' '
  9926  303C  3420               	retlw	32	;' '
  9927  303D  3400               	retlw	0
  9928                           
  9929                           	psect	stringtext12
  9930  303E                     __pstringtext12:	
  9931  303E                     STR_9:	
  9932  303E  3405               	retlw	5
  9933  303F  3407               	retlw	7
  9934  3040  3407               	retlw	7
  9935  3041  3408               	retlw	8
  9936  3042  342D               	retlw	45	;'-'
  9937  3043  342D               	retlw	45	;'-'
  9938  3044  3420               	retlw	32	;' '
  9939  3045  3420               	retlw	32	;' '
  9940  3046  342D               	retlw	45	;'-'
  9941  3047  342D               	retlw	45	;'-'
  9942  3048  3409               	retlw	9
  9943  3049  3407               	retlw	7
  9944  304A  3407               	retlw	7
  9945  304B  3406               	retlw	6
  9946  304C  3420               	retlw	32	;' '
  9947  304D  340B               	retlw	11
  9948  304E  3420               	retlw	32	;' '
  9949  304F  3400               	retlw	0
  9950                           
  9951                           	psect	stringtext13
  9952  3050                     __pstringtext13:	
  9953  3050                     STR_46:	
  9954  3050  3446               	retlw	70	;'F'
  9955  3051  3449               	retlw	73	;'I'
  9956  3052  3452               	retlw	82	;'R'
  9957  3053  3445               	retlw	69	;'E'
  9958  3054  3420               	retlw	32	;' '
  9959  3055  3442               	retlw	66	;'B'
  9960  3056  3441               	retlw	65	;'A'
  9961  3057  344C               	retlw	76	;'L'
  9962  3058  344C               	retlw	76	;'L'
  9963  3059  3420               	retlw	32	;' '
  9964  305A  3420               	retlw	32	;' '
  9965  305B  3420               	retlw	32	;' '
  9966  305C  3400               	retlw	0
  9967                           
  9968                           	psect	stringtext14
  9969  305D                     __pstringtext14:	
  9970  305D                     STR_26:	
  9971  305D  3455               	retlw	85	;'U'
  9972  305E  344E               	retlw	78	;'N'
  9973  305F  344C               	retlw	76	;'L'
  9974  3060  344F               	retlw	79	;'O'
  9975  3061  3443               	retlw	67	;'C'
  9976  3062  344B               	retlw	75	;'K'
  9977  3063  3449               	retlw	73	;'I'
  9978  3064  344E               	retlw	78	;'N'
  9979  3065  3447               	retlw	71	;'G'
  9980  3066  342E               	retlw	46	;'.'
  9981  3067  342E               	retlw	46	;'.'
  9982  3068  342E               	retlw	46	;'.'
  9983  3069  3400               	retlw	0
  9984                           
  9985                           	psect	stringtext15
  9986  306A                     __pstringtext15:	
  9987  306A                     STR_45:	
  9988  306A  3452               	retlw	82	;'R'
  9989  306B  3445               	retlw	69	;'E'
  9990  306C  3444               	retlw	68	;'D'
  9991  306D  3420               	retlw	32	;' '
  9992  306E  3442               	retlw	66	;'B'
  9993  306F  3455               	retlw	85	;'U'
  9994  3070  344C               	retlw	76	;'L'
  9995  3071  344C               	retlw	76	;'L'
  9996  3072  3420               	retlw	32	;' '
  9997  3073  3420               	retlw	32	;' '
  9998  3074  3420               	retlw	32	;' '
  9999  3075  3400               	retlw	0
 10000                           
 10001                           	psect	stringtext16
 10002  3076                     __pstringtext16:	
 10003  3076                     STR_43:	
 10004  3076  3454               	retlw	84	;'T'
 10005  3077  3445               	retlw	69	;'E'
 10006  3078  3451               	retlw	81	;'Q'
 10007  3079  3455               	retlw	85	;'U'
 10008  307A  3449               	retlw	73	;'I'
 10009  307B  344C               	retlw	76	;'L'
 10010  307C  3441               	retlw	65	;'A'
 10011  307D  3420               	retlw	32	;' '
 10012  307E  3420               	retlw	32	;' '
 10013  307F  3420               	retlw	32	;' '
 10014  3080  3400               	retlw	0
 10015                           
 10016                           	psect	stringtext17
 10017  3081                     __pstringtext17:	
 10018  3081                     STR_42:	
 10019  3081  3457               	retlw	87	;'W'
 10020  3082  3448               	retlw	72	;'H'
 10021  3083  3449               	retlw	73	;'I'
 10022  3084  3453               	retlw	83	;'S'
 10023  3085  344B               	retlw	75	;'K'
 10024  3086  3445               	retlw	69	;'E'
 10025  3087  3459               	retlw	89	;'Y'
 10026  3088  3420               	retlw	32	;' '
 10027  3089  3420               	retlw	32	;' '
 10028  308A  3420               	retlw	32	;' '
 10029  308B  3400               	retlw	0
 10030                           
 10031                           	psect	stringtext18
 10032  308C                     __pstringtext18:	
 10033  308C                     STR_6:	
 10034  308C  3450               	retlw	80	;'P'
 10035  308D  3441               	retlw	65	;'A'
 10036  308E  3453               	retlw	83	;'S'
 10037  308F  3453               	retlw	83	;'S'
 10038  3090  3457               	retlw	87	;'W'
 10039  3091  344F               	retlw	79	;'O'
 10040  3092  3452               	retlw	82	;'R'
 10041  3093  3444               	retlw	68	;'D'
 10042  3094  3420               	retlw	32	;' '
 10043  3095  3400               	retlw	0
 10044                           
 10045                           	psect	stringtext19
 10046  3096                     __pstringtext19:	
 10047  3096                     STR_41:	
 10048  3096  3456               	retlw	86	;'V'
 10049  3097  344F               	retlw	79	;'O'
 10050  3098  3444               	retlw	68	;'D'
 10051  3099  344B               	retlw	75	;'K'
 10052  309A  3441               	retlw	65	;'A'
 10053  309B  3420               	retlw	32	;' '
 10054  309C  3420               	retlw	32	;' '
 10055  309D  3420               	retlw	32	;' '
 10056  309E  3400               	retlw	0
 10057                           
 10058                           	psect	stringtext20
 10059  309F                     __pstringtext20:	
 10060  309F                     STR_47:	
 10061  309F  3457               	retlw	87	;'W'
 10062  30A0  3441               	retlw	65	;'A'
 10063  30A1  3454               	retlw	84	;'T'
 10064  30A2  3445               	retlw	69	;'E'
 10065  30A3  3452               	retlw	82	;'R'
 10066  30A4  3420               	retlw	32	;' '
 10067  30A5  3420               	retlw	32	;' '
 10068  30A6  3420               	retlw	32	;' '
 10069  30A7  3400               	retlw	0
 10070                           
 10071                           	psect	stringtext21
 10072  30A8                     __pstringtext21:	
 10073  30A8                     STR_48:	
 10074  30A8  3425               	retlw	37	;'%'
 10075  30A9  3463               	retlw	99	;'c'
 10076  30AA  3425               	retlw	37	;'%'
 10077  30AB  3463               	retlw	99	;'c'
 10078  30AC  3425               	retlw	37	;'%'
 10079  30AD  3463               	retlw	99	;'c'
 10080  30AE  3425               	retlw	37	;'%'
 10081  30AF  3463               	retlw	99	;'c'
 10082  30B0  3400               	retlw	0
 10083                           
 10084                           	psect	stringtext22
 10085  30B1                     __pstringtext22:	
 10086  30B1                     STR_11:	
 10087  30B1  344E               	retlw	78	;'N'
 10088  30B2  3455               	retlw	85	;'U'
 10089  30B3  344C               	retlw	76	;'L'
 10090  30B4  344C               	retlw	76	;'L'
 10091  30B5  3449               	retlw	73	;'I'
 10092  30B6  3446               	retlw	70	;'F'
 10093  30B7  3459               	retlw	89	;'Y'
 10094  30B8  3420               	retlw	32	;' '
 10095  30B9  3400               	retlw	0
 10096                           
 10097                           	psect	stringtext23
 10098  30BA                     __pstringtext23:	
 10099  30BA                     STR_44:	
 10100  30BA  3443               	retlw	67	;'C'
 10101  30BB  3448               	retlw	72	;'H'
 10102  30BC  3455               	retlw	85	;'U'
 10103  30BD  3447               	retlw	71	;'G'
 10104  30BE  3420               	retlw	32	;' '
 10105  30BF  3420               	retlw	32	;' '
 10106  30C0  3420               	retlw	32	;' '
 10107  30C1  3400               	retlw	0
 10108                           
 10109                           	psect	stringtext24
 10110  30C2                     __pstringtext24:	
 10111  30C2                     STR_40:	
 10112  30C2  3442               	retlw	66	;'B'
 10113  30C3  3445               	retlw	69	;'E'
 10114  30C4  3445               	retlw	69	;'E'
 10115  30C5  3452               	retlw	82	;'R'
 10116  30C6  3420               	retlw	32	;' '
 10117  30C7  3420               	retlw	32	;' '
 10118  30C8  3420               	retlw	32	;' '
 10119  30C9  3400               	retlw	0
 10120                           
 10121                           	psect	stringtext25
 10122  30CA                     __pstringtext25:	
 10123  30CA                     STR_39:	
 10124  30CA  3453               	retlw	83	;'S'
 10125  30CB  3448               	retlw	72	;'H'
 10126  30CC  344F               	retlw	79	;'O'
 10127  30CD  3454               	retlw	84	;'T'
 10128  30CE  3420               	retlw	32	;' '
 10129  30CF  3420               	retlw	32	;' '
 10130  30D0  3420               	retlw	32	;' '
 10131  30D1  3400               	retlw	0
 10132                           
 10133                           	psect	stringtext26
 10134  30D2                     __pstringtext26:	
 10135  30D2                     STR_12:	
 10136  30D2  3444               	retlw	68	;'D'
 10137  30D3  3445               	retlw	69	;'E'
 10138  30D4  3446               	retlw	70	;'F'
 10139  30D5  3443               	retlw	67	;'C'
 10140  30D6  344F               	retlw	79	;'O'
 10141  30D7  344E               	retlw	78	;'N'
 10142  30D8  3420               	retlw	32	;' '
 10143  30D9  3400               	retlw	0
 10144                           
 10145                           	psect	stringtext27
 10146  30DA                     __pstringtext27:	
 10147  30DA                     STR_54:	
 10148  30DA  3428               	retlw	40	;'('
 10149  30DB  346E               	retlw	110	;'n'
 10150  30DC  3475               	retlw	117	;'u'
 10151  30DD  346C               	retlw	108	;'l'
 10152  30DE  346C               	retlw	108	;'l'
 10153  30DF  3429               	retlw	41	;')'
 10154  30E0  3400               	retlw	0
 10155                           
 10156                           	psect	stringtext28
 10157  30E1                     __pstringtext28:	
 10158  30E1                     STR_13:	
 10159  30E1  3448               	retlw	72	;'H'
 10160  30E2  3441               	retlw	65	;'A'
 10161  30E3  3458               	retlw	88	;'X'
 10162  30E4  3420               	retlw	32	;' '
 10163  30E5  3420               	retlw	32	;' '
 10164  30E6  3400               	retlw	0
 10165                           
 10166                           	psect	stringtext29
 10167  30E7                     __pstringtext29:	
 10168  30E7                     STR_7:	
 10169  30E7  3445               	retlw	69	;'E'
 10170  30E8  3458               	retlw	88	;'X'
 10171  30E9  3449               	retlw	73	;'I'
 10172  30EA  3454               	retlw	84	;'T'
 10173  30EB  3420               	retlw	32	;' '
 10174  30EC  3400               	retlw	0
 10175                           
 10176                           	psect	stringtext30
 10177  30ED                     __pstringtext30:	
 10178  30ED                     STR_5:	
 10179  30ED  3453               	retlw	83	;'S'
 10180  30EE  344C               	retlw	76	;'L'
 10181  30EF  344F               	retlw	79	;'O'
 10182  30F0  3454               	retlw	84	;'T'
 10183  30F1  3420               	retlw	32	;' '
 10184  30F2  3400               	retlw	0
 10185                           
 10186                           	psect	stringtext31
 10187  30F3                     __pstringtext31:	
 10188  30F3                     STR_32:	
 10189  30F3  3456               	retlw	86	;'V'
 10190  30F4  3444               	retlw	68	;'D'
 10191  30F5  344B               	retlw	75	;'K'
 10192  30F6  3441               	retlw	65	;'A'
 10193  30F7  3400               	retlw	0
 10194                           
 10195                           	psect	stringtext32
 10196  30F8                     __pstringtext32:	
 10197  30F8                     STR_34:	
 10198  30F8  3454               	retlw	84	;'T'
 10199  30F9  3451               	retlw	81	;'Q'
 10200  30FA  344C               	retlw	76	;'L'
 10201  30FB  3441               	retlw	65	;'A'
 10202  30FC  3400               	retlw	0
 10203                           
 10204                           	psect	stringtext33
 10205  30FD                     __pstringtext33:	
 10206  30FD                     STR_37:	
 10207  30FD  3446               	retlw	70	;'F'
 10208  30FE  3449               	retlw	73	;'I'
 10209  30FF  3452               	retlw	82	;'R'
 10210  3100  3445               	retlw	69	;'E'
 10211  3101  3400               	retlw	0
 10212                           
 10213                           	psect	stringtext34
 10214  3102                     __pstringtext34:	
 10215  3102                     STR_35:	
 10216  3102  3443               	retlw	67	;'C'
 10217  3103  3448               	retlw	72	;'H'
 10218  3104  3455               	retlw	85	;'U'
 10219  3105  3447               	retlw	71	;'G'
 10220  3106  3400               	retlw	0
 10221                           
 10222                           	psect	stringtext35
 10223  3107                     __pstringtext35:	
 10224  3107                     STR_36:	
 10225  3107  3452               	retlw	82	;'R'
 10226  3108  3445               	retlw	69	;'E'
 10227  3109  3442               	retlw	66	;'B'
 10228  310A  344C               	retlw	76	;'L'
 10229  310B  3400               	retlw	0
 10230                           
 10231                           	psect	stringtext36
 10232  310C                     __pstringtext36:	
 10233  310C                     STR_31:	
 10234  310C  3442               	retlw	66	;'B'
 10235  310D  3445               	retlw	69	;'E'
 10236  310E  3445               	retlw	69	;'E'
 10237  310F  3452               	retlw	82	;'R'
 10238  3110  3400               	retlw	0
 10239                           
 10240                           	psect	stringtext37
 10241  3111                     __pstringtext37:	
 10242  3111                     STR_38:	
 10243  3111  3457               	retlw	87	;'W'
 10244  3112  3441               	retlw	65	;'A'
 10245  3113  3454               	retlw	84	;'T'
 10246  3114  3452               	retlw	82	;'R'
 10247  3115  3400               	retlw	0
 10248                           
 10249                           	psect	stringtext38
 10250  3116                     __pstringtext38:	
 10251  3116                     STR_30:	
 10252  3116  3453               	retlw	83	;'S'
 10253  3117  3448               	retlw	72	;'H'
 10254  3118  344F               	retlw	79	;'O'
 10255  3119  3454               	retlw	84	;'T'
 10256  311A  3400               	retlw	0
 10257                           
 10258                           	psect	stringtext39
 10259  311B                     __pstringtext39:	
 10260  311B                     STR_33:	
 10261  311B  3457               	retlw	87	;'W'
 10262  311C  3453               	retlw	83	;'S'
 10263  311D  344B               	retlw	75	;'K'
 10264  311E  3459               	retlw	89	;'Y'
 10265  311F  3400               	retlw	0
 10266                           
 10267                           	psect	stringtext40
 10268  3120                     __pstringtext40:	
 10269  3120                     STR_29:	
 10270  3120  344C               	retlw	76	;'L'
 10271  3121  344F               	retlw	79	;'O'
 10272  3122  3443               	retlw	67	;'C'
 10273  3123  344B               	retlw	75	;'K'
 10274  3124  3400               	retlw	0
 10275                           
 10276                           	psect	stringtext41
 10277  3125                     __pstringtext41:	
 10278  3125                     STR_28:	
 10279  3125  344F               	retlw	79	;'O'
 10280  3126  3450               	retlw	80	;'P'
 10281  3127  3445               	retlw	69	;'E'
 10282  3128  344E               	retlw	78	;'N'
 10283  3129  3400               	retlw	0
 10284                           
 10285                           	psect	stringtext42
 10286  312A                     __pstringtext42:	
 10287  312A                     STR_24:	
 10288  312A  3450               	retlw	80	;'P'
 10289  312B  3445               	retlw	69	;'E'
 10290  312C  3457               	retlw	87	;'W'
 10291  312D  3420               	retlw	32	;' '
 10292  312E  3400               	retlw	0
 10293                           
 10294                           	psect	stringtext43
 10295  312F                     __pstringtext43:	
 10296  312F                     STR_8:	
 10297  312F  344E               	retlw	78	;'N'
 10298  3130  3455               	retlw	85	;'U'
 10299  3131  344C               	retlw	76	;'L'
 10300  3132  344C               	retlw	76	;'L'
 10301  3133  3400               	retlw	0
 10302                           
 10303                           	psect	stringtext44
 10304  3134                     __pstringtext44:	
 10305  3134                     STR_4:	
 10306  3134  344D               	retlw	77	;'M'
 10307  3135  3445               	retlw	69	;'E'
 10308  3136  344E               	retlw	78	;'N'
 10309  3137  3455               	retlw	85	;'U'
 10310  3138  3400               	retlw	0
 10311                           
 10312                           	psect	stringtext45
 10313  3139                     __pstringtext45:	
 10314  3139                     STR_2:	
 10315  3139  3444               	retlw	68	;'D'
 10316  313A  344F               	retlw	79	;'O'
 10317  313B  3457               	retlw	87	;'W'
 10318  313C  344E               	retlw	78	;'N'
 10319  313D  3400               	retlw	0
 10320                           
 10321                           	psect	stringtext46
 10322  313E                     __pstringtext46:	
 10323  313E                     STR_1:	
 10324  313E  3420               	retlw	32	;' '
 10325  313F  3420               	retlw	32	;' '
 10326  3140  3455               	retlw	85	;'U'
 10327  3141  3450               	retlw	80	;'P'
 10328  3142  3400               	retlw	0
 10329                           
 10330                           	psect	stringtext47
 10331  3143                     __pstringtext47:	
 10332  3143                     STR_25:	
 10333  3143  3425               	retlw	37	;'%'
 10334  3144  3434               	retlw	52	;'4'
 10335  3145  3464               	retlw	100	;'d'
 10336  3146  3400               	retlw	0
 10337                           
 10338                           	psect	stringtext48
 10339  3147                     __pstringtext48:	
 10340  3147                     STR_53:	
 10341  3147  3425               	retlw	37	;'%'
 10342  3148  3473               	retlw	115	;'s'
 10343  3149  3400               	retlw	0
 10344                           
 10345                           	psect	stringtext49
 10346  0000                     __pstringtext49:	
 10347  2858                     
 10348                           ; #config settings
 10349  0000                     
 10350                           	psect	cinit
 10351  0018                     start_initialization:	
 10352  0018                     __initialization:		;BIGRAM
 10353                           
 10354                           ; Initialize objects allocated to BIGRAM
 10355  0018  3049               	movlw	low __pidataBIGRAM
 10356  0019  0084               	movwf	4
 10357  001A  3086               	movlw	(high __pidataBIGRAM)| (0+128)
 10358  001B  0085               	movwf	5
 10359  001C  30F0               	movlw	low (0+9968)
 10360  001D  0086               	movwf	6
 10361  001E  3026               	movlw	high (0+9968)
 10362  001F  0087               	movwf	7
 10363  0020  3001               	movlw	1
 10364  0021  00FF               	movwf	btemp+1
 10365  0022  3000               	movlw	0
 10366  0023  3198  2000  3180   	fcall	init_ram
 10367                           
 10368                           ; Initialize objects allocated to BANK1
 10369  0026  307C               	movlw	low __pidataBANK1
 10370  0027  0084               	movwf	4
 10371  0028  30A0               	movlw	(high __pidataBANK1)| (0+128)
 10372  0029  0085               	movwf	5
 10373  002A  30C7               	movlw	low __pdataBANK1
 10374  002B  0086               	movwf	6
 10375  002C  3000               	movlw	high __pdataBANK1
 10376  002D  0087               	movwf	7
 10377  002E  3000               	movlw	0
 10378  002F  00FF               	movwf	btemp+1
 10379  0030  301C               	movlw	28
 10380  0031  3198  2000  3180   	fcall	init_ram
 10381                           
 10382                           ; Initialize objects allocated to BANK2
 10383  0034  0022               	movlb	2	; select bank2
 10384  0035  3180  2002  3180   	fcall	__pidataBANK2	;fetch initializer
 10385  0038  00E1               	movwf	__pdataBANK2& (0+127)
 10386  0039  3180  2003  3180   	fcall	__pidataBANK2+1	;fetch initializer
 10387  003C  00E2               	movwf	(__pdataBANK2+1)& (0+127)
 10388                           
 10389                           ; Initialize objects allocated to BANK3
 10390  003D  30A2               	movlw	low __pidataBANK3
 10391  003E  0084               	movwf	4
 10392  003F  30A1               	movlw	(high __pidataBANK3)| (0+128)
 10393  0040  0085               	movwf	5
 10394  0041  30A0               	movlw	low __pdataBANK3
 10395  0042  0086               	movwf	6
 10396  0043  3001               	movlw	high __pdataBANK3
 10397  0044  0087               	movwf	7
 10398  0045  3000               	movlw	0
 10399  0046  00FF               	movwf	btemp+1
 10400  0047  3028               	movlw	40
 10401  0048  3198  2000  3180   	fcall	init_ram
 10402                           
 10403                           ; Initialize objects allocated to BANK4
 10404  004B  3000               	movlw	low __pidataBANK4
 10405  004C  0084               	movwf	4
 10406  004D  3088               	movlw	(high __pidataBANK4)| (0+128)
 10407  004E  0085               	movwf	5
 10408  004F  304A               	movlw	low __pdataBANK4
 10409  0050  0086               	movwf	6
 10410  0051  3002               	movlw	high __pdataBANK4
 10411  0052  0087               	movwf	7
 10412  0053  3000               	movlw	0
 10413  0054  00FF               	movwf	btemp+1
 10414  0055  3019               	movlw	25
 10415  0056  3198  2000  3180   	fcall	init_ram
 10416                           
 10417                           ; Initialize objects allocated to BANK5
 10418  0059  3019               	movlw	low __pidataBANK5
 10419  005A  0084               	movwf	4
 10420  005B  30A6               	movlw	(high __pidataBANK5)| (0+128)
 10421  005C  0085               	movwf	5
 10422  005D  30A0               	movlw	low __pdataBANK5
 10423  005E  0086               	movwf	6
 10424  005F  3002               	movlw	high __pdataBANK5
 10425  0060  0087               	movwf	7
 10426  0061  3000               	movlw	0
 10427  0062  00FF               	movwf	btemp+1
 10428  0063  3049               	movlw	73
 10429  0064  3198  2000  3180   	fcall	init_ram
 10430                           
 10431                           ; Initialize objects allocated to BANK6
 10432  0067  3051               	movlw	low __pidataBANK6
 10433  0068  0084               	movwf	4
 10434  0069  30A3               	movlw	(high __pidataBANK6)| (0+128)
 10435  006A  0085               	movwf	5
 10436  006B  3020               	movlw	low __pdataBANK6
 10437  006C  0086               	movwf	6
 10438  006D  3003               	movlw	high __pdataBANK6
 10439  006E  0087               	movwf	7
 10440  006F  3000               	movlw	0
 10441  0070  00FF               	movwf	btemp+1
 10442  0071  3038               	movlw	56
 10443  0072  3198  2000  3180   	fcall	init_ram
 10444                           
 10445                           ; Initialize objects allocated to BANK7
 10446  0075  3019               	movlw	low __pidataBANK7
 10447  0076  0084               	movwf	4
 10448  0077  30A3               	movlw	(high __pidataBANK7)| (0+128)
 10449  0078  0085               	movwf	5
 10450  0079  30A0               	movlw	low __pdataBANK7
 10451  007A  0086               	movwf	6
 10452  007B  3003               	movlw	high __pdataBANK7
 10453  007C  0087               	movwf	7
 10454  007D  3000               	movlw	0
 10455  007E  00FF               	movwf	btemp+1
 10456  007F  3038               	movlw	56
 10457  0080  3198  2000  3180   	fcall	init_ram
 10458                           
 10459                           ; Initialize objects allocated to BANK8
 10460  0083  3060               	movlw	low __pidataBANK8
 10461  0084  0084               	movwf	4
 10462  0085  30A0               	movlw	(high __pidataBANK8)| (0+128)
 10463  0086  0085               	movwf	5
 10464  0087  303E               	movlw	low __pdataBANK8
 10465  0088  0086               	movwf	6
 10466  0089  3004               	movlw	high __pdataBANK8
 10467  008A  0087               	movwf	7
 10468  008B  3000               	movlw	0
 10469  008C  00FF               	movwf	btemp+1
 10470  008D  301C               	movlw	28
 10471  008E  3198  2000  3180   	fcall	init_ram
 10472                           
 10473                           ; Clear objects allocated to COMMON
 10474  0091  01FC               	clrf	__pbssCOMMON& (0+127)
 10475                           
 10476                           ; Clear objects allocated to BANK1
 10477  0092  30A0               	movlw	low __pbssBANK1
 10478  0093  0084               	movwf	4
 10479  0094  3000               	movlw	high __pbssBANK1
 10480  0095  0085               	movwf	5
 10481  0096  3027               	movlw	39
 10482  0097  00FE               	movwf	btemp
 10483  0098  3000               	movlw	0
 10484  0099  00FF               	movwf	btemp+1
 10485  009A  31AE  26A4  3180   	fcall	clear_ram0
 10486                           
 10487                           ; Clear objects allocated to BANK2
 10488  009D  3020               	movlw	low __pbssBANK2
 10489  009E  0084               	movwf	4
 10490  009F  3001               	movlw	high __pbssBANK2
 10491  00A0  0085               	movwf	5
 10492  00A1  3041               	movlw	65
 10493  00A2  00FE               	movwf	btemp
 10494  00A3  3000               	movlw	0
 10495  00A4  00FF               	movwf	btemp+1
 10496  00A5  31AE  26A4  3180   	fcall	clear_ram0
 10497                           
 10498                           ; Clear objects allocated to BANK3
 10499  00A8  30C8               	movlw	low __pbssBANK3
 10500  00A9  0084               	movwf	4
 10501  00AA  3001               	movlw	high __pbssBANK3
 10502  00AB  0085               	movwf	5
 10503  00AC  3024               	movlw	36
 10504  00AD  00FE               	movwf	btemp
 10505  00AE  3000               	movlw	0
 10506  00AF  00FF               	movwf	btemp+1
 10507  00B0  31AE  26A4  3180   	fcall	clear_ram0
 10508                           
 10509                           ; Clear objects allocated to BANK4
 10510  00B3  3020               	movlw	low __pbssBANK4
 10511  00B4  0084               	movwf	4
 10512  00B5  3002               	movlw	high __pbssBANK4
 10513  00B6  0085               	movwf	5
 10514  00B7  302A               	movlw	42
 10515  00B8  00FE               	movwf	btemp
 10516  00B9  3000               	movlw	0
 10517  00BA  00FF               	movwf	btemp+1
 10518  00BB  31AE  26A4  3180   	fcall	clear_ram0
 10519                           
 10520                           ; Clear objects allocated to BANK8
 10521  00BE  3020               	movlw	low __pbssBANK8
 10522  00BF  0084               	movwf	4
 10523  00C0  3004               	movlw	high __pbssBANK8
 10524  00C1  0085               	movwf	5
 10525  00C2  301E               	movlw	30
 10526  00C3  00FE               	movwf	btemp
 10527  00C4  3000               	movlw	0
 10528  00C5  00FF               	movwf	btemp+1
 10529  00C6  31AE  26A4  3180   	fcall	clear_ram0
 10530                           
 10531                           ; Clear objects allocated to BANK9
 10532  00C9  30A0               	movlw	low __pbssBANK9
 10533  00CA  0084               	movwf	4
 10534  00CB  3004               	movlw	high __pbssBANK9
 10535  00CC  0085               	movwf	5
 10536  00CD  3028               	movlw	40
 10537  00CE  00FE               	movwf	btemp
 10538  00CF  3000               	movlw	0
 10539  00D0  00FF               	movwf	btemp+1
 10540  00D1  31AE  26A4         	fcall	clear_ram0
 10541  00D3                     end_of_initialization:	
 10542                           ;End of C runtime variable initialization code
 10543                           
 10544  00D3                     __end_of__initialization:	
 10545  00D3  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
 10546  00D4  0020               	movlb	0
 10547  00D5  319D  2D68         	ljmp	_main	;jump to C main() function
 10548                           
 10549                           	psect	bssCOMMON
 10550  007C                     __pbssCOMMON:	
 10551  007C                     _Shot_Index:	
 10552  007C                     	ds	1
 10553                           
 10554                           	psect	bssBANK1
 10555  00A0                     __pbssBANK1:	
 10556  00A0                     _locked_leds:	
 10557  00A0                     	ds	2
 10558  00A2                     _locked_locking_leds_idx:	
 10559  00A2                     	ds	2
 10560  00A4                     _flashy_option_size:	
 10561  00A4                     	ds	2
 10562  00A6                     _flashy_option_idx:	
 10563  00A6                     	ds	2
 10564  00A8                     _deaths:	
 10565  00A8                     	ds	2
 10566  00AA                     _flashy_scroll_rate:	
 10567  00AA                     	ds	2
 10568  00AC                     _flashy_sparkle_rate:	
 10569  00AC                     	ds	2
 10570  00AE                     _flashy_leds_state_track:	
 10571  00AE                     	ds	2
 10572  00B0                     _flashy_leds_idx:	
 10573  00B0                     	ds	2
 10574  00B2                     _menu_option_size:	
 10575  00B2                     	ds	2
 10576  00B4                     _menu_option_idx:	
 10577  00B4                     	ds	2
 10578  00B6                     _oddeven:	
 10579  00B6                     	ds	2
 10580  00B8                     _currentTask:	
 10581  00B8                     	ds	2
 10582  00BA                     _slot_taskData:	
 10583  00BA                     	ds	2
 10584  00BC                     _TMR0_InterruptHandler:	
 10585  00BC                     	ds	2
 10586  00BE                     _timer0ReloadVal16bit:	
 10587  00BE                     	ds	2
 10588  00C0                     _TMR4_InterruptHandler:	
 10589  00C0                     	ds	2
 10590  00C2                     _TMR2_InterruptHandler:	
 10591  00C2                     	ds	2
 10592  00C4                     _badge_locked:	
 10593  00C4                     	ds	1
 10594  00C5                     _secret_value:	
 10595  00C5                     	ds	2
 10596                           
 10597                           	psect	dataBANK1
 10598  00C7                     __pdataBANK1:	
 10599  00C7                     _Shot_Options:	
 10600  00C7                     	ds	18
 10601  00D9                     _randx:	
 10602  00D9                     	ds	4
 10603  00DD                     _Leds_idx:	
 10604  00DD                     	ds	2
 10605  00DF                     _locked_lock_base_leds:	
 10606  00DF                     	ds	2
 10607  00E1                     _FLASHY_TEXT_SECRET_TEST:	
 10608  00E1                     	ds	2
 10609                           
 10610                           	psect	bssBANK2
 10611  0120                     __pbssBANK2:	
 10612  0120                     _secret_task:	
 10613  0120                     	ds	13
 10614  012D                     _locked_task:	
 10615  012D                     	ds	13
 10616  013A                     _slot_task:	
 10617  013A                     	ds	13
 10618  0147                     _menu_task:	
 10619  0147                     	ds	13
 10620  0154                     _flashy_task:	
 10621  0154                     	ds	13
 10622                           
 10623                           	psect	dataBANK2
 10624  0161                     __pdataBANK2:	
 10625  0161                     _FLASHY_TEXT:	
 10626  0161                     	ds	2
 10627                           
 10628                           	psect	bssBANK3
 10629  01C8                     __pbssBANK3:	
 10630  01C8                     _schedulerInst:	
 10631  01C8                     	ds	18
 10632  01DA                     _badge_inst:	
 10633  01DA                     	ds	18
 10634                           
 10635                           	psect	dataBANK3
 10636  01A0                     __pdataBANK3:	
 10637  01A0                     _locked_locking_leds:	
 10638  01A0                     	ds	12
 10639  01AC                     _menu_options_leds:	
 10640  01AC                     	ds	10
 10641  01B6                     _menu_option:	
 10642  01B6                     	ds	8
 10643  01BE                     marquee@F8648:	
 10644  01BE                     	ds	5
 10645  01C3                     marquee_speedy@F8639:	
 10646  01C3                     	ds	5
 10647                           
 10648                           	psect	bssBANK4
 10649  0220                     __pbssBANK4:	
 10650  0220                     _secret_TaskData:	
 10651  0220                     	ds	14
 10652  022E                     _locked_TaskData:	
 10653  022E                     	ds	14
 10654  023C                     _menu_TaskData:	
 10655  023C                     	ds	14
 10656                           
 10657                           	psect	dataBANK4
 10658  024A                     __pdataBANK4:	
 10659  024A                     _secret_inputs:	
 10660  024A                     	ds	25
 10661                           
 10662                           	psect	dataBANK5
 10663  02A0                     __pdataBANK5:	
 10664  02A0                     _Shot_Options_Long:	
 10665  02A0                     	ds	18
 10666  02B2                     _Slot_Wheel:	
 10667  02B2                     	ds	55
 10668                           
 10669                           	psect	dataBANK6
 10670  0320                     __pdataBANK6:	
 10671  0320                     _flashy_option:	
 10672  0320                     	ds	28
 10673  033C                     _roundabout_leds:	
 10674  033C                     	ds	28
 10675                           
 10676                           	psect	dataBANK7
 10677  03A0                     __pdataBANK7:	
 10678  03A0                     _curtain_leds:	
 10679  03A0                     	ds	28
 10680  03BC                     _roundabout_leds_inverse:	
 10681  03BC                     	ds	28
 10682                           
 10683                           	psect	bssBANK8
 10684  0420                     __pbssBANK8:	
 10685  0420                     _flashy_TaskData:	
 10686  0420                     	ds	30
 10687                           
 10688                           	psect	dataBANK8
 10689  043E                     __pdataBANK8:	
 10690  043E                     _curtain_leds_inverse:	
 10691  043E                     	ds	28
 10692                           
 10693                           	psect	bssBANK9
 10694  04A0                     __pbssBANK9:	
 10695  04A0                     _slot_TaskData:	
 10696  04A0                     	ds	40
 10697                           
 10698                           	psect	inittext
 10699  1800                     init_ram:	
 10700  1800  00FE               	movwf	126
 10701  1801                     initloop:	
 10702  1801  0012               	moviw fsr0++
 10703  1802  001E               	movwi fsr1++
 10704  1803  3001               	movlw	1
 10705  1804  02FE               	subwf	126,f
 10706  1805  3000               	movlw	0
 10707  1806  3BFF               	subwfb	127,f
 10708  1807  087F               	movf	127,w
 10709  1808  047E               	iorwf	126,w
 10710  1809  1903               	btfsc	3,2
 10711  180A  3400               	retlw	0
 10712  180B  2801               	goto	initloop
 10713                           
 10714                           	psect	clrtext
 10715  2EA4                     clear_ram0:	
 10716                           ;	Called with FSR0 containing the base address, and
 10717                           ;	btemp/btemp+1 has the size to clear
 10718                           
 10719  2EA4  0064               	clrwdt	;clear the watchdog before getting into this loop
 10720  2EA5                     clrloop0:	
 10721  2EA5  0180               	clrf	0	;clear RAM location pointed to by FSR
 10722  2EA6  3101               	addfsr 0,1
 10723  2EA7  3001               	movlw	1
 10724  2EA8  02FE               	subwf	126,f
 10725  2EA9  3000               	movlw	0
 10726  2EAA  3BFF               	subwfb	127,f
 10727  2EAB  087F               	movf	127,w
 10728  2EAC  047E               	iorwf	126,w
 10729  2EAD  1903               	btfsc	3,2
 10730  2EAE  3400               	retlw	0	;all done for this memory range, return
 10731  2EAF  2EA5               	goto	clrloop0	;have we reached the end yet?
 10732                           
 10733                           	psect	cstackBANK1
 10734  00E3                     __pcstackBANK1:	
 10735  00E3                     schedulerExecute@currentSystemTick:	
 10736                           
 10737                           ; 2 bytes @ 0x0
 10738  00E3                     	ds	2
 10739  00E5                     schedulerExecute@taskLastSystemTick:	
 10740                           
 10741                           ; 2 bytes @ 0x2
 10742  00E5                     	ds	2
 10743  00E7                     schedulerExecute@tickDelta:	
 10744                           
 10745                           ; 2 bytes @ 0x4
 10746  00E7                     	ds	2
 10747  00E9                     schedulerExecute@scheduler:	
 10748                           
 10749                           ; 1 bytes @ 0x6
 10750  00E9                     	ds	1
 10751  00EA                     schedulerExecute@k:	
 10752                           
 10753                           ; 1 bytes @ 0x7
 10754  00EA                     	ds	1
 10755                           
 10756                           	psect	cstackCOMMON
 10757  0070                     __pcstackCOMMON:	
 10758  0070                     ?_isdigit:	
 10759  0070                     ?_TMR2_StartTimer:	
 10760                           ; 1 bit 
 10761                           
 10762  0070                     ?_TMR4_StartTimer:	
 10763                           ; 1 bytes @ 0x0
 10764                           
 10765  0070                     ?_PIN_MANAGER_Initialize:	
 10766                           ; 1 bytes @ 0x0
 10767                           
 10768  0070                     ?_OSCILLATOR_Initialize:	
 10769                           ; 1 bytes @ 0x0
 10770                           
 10771  0070                     ?_WDT_Initialize:	
 10772                           ; 1 bytes @ 0x0
 10773                           
 10774  0070                     ?_PWM2_Initialize:	
 10775                           ; 1 bytes @ 0x0
 10776                           
 10777  0070                     ?_TMR0_Initialize:	
 10778                           ; 1 bytes @ 0x0
 10779                           
 10780  0070                     ?_TMR0_DefaultInterruptHandler:	
 10781                           ; 1 bytes @ 0x0
 10782                           
 10783  0070                     ??_TMR0_DefaultInterruptHandler:	
 10784                           ; 1 bytes @ 0x0
 10785                           
 10786  0070                     ?_TMR0_StartTimer:	
 10787                           ; 1 bytes @ 0x0
 10788                           
 10789  0070                     ?_TMR0_CallBack:	
 10790                           ; 1 bytes @ 0x0
 10791                           
 10792  0070                     ??_TMR0_CallBack:	
 10793                           ; 1 bytes @ 0x0
 10794                           
 10795  0070                     ?_nullifyBadge_segDisplayRegister:	
 10796                           ; 1 bytes @ 0x0
 10797                           
 10798  0070                     ?_nullifyBadge_segDisplayErase:	
 10799                           ; 1 bytes @ 0x0
 10800                           
 10801  0070                     ?_nullifyBadge_segDisplayForceUpdate:	
 10802                           ; 1 bytes @ 0x0
 10803                           
 10804  0070                     ?_nullifyBadge_platformInit:	
 10805                           ; 1 bytes @ 0x0
 10806                           
 10807  0070                     ?_displayL2_Initialize:	
 10808                           ; 1 bytes @ 0x0
 10809                           
 10810  0070                     ?_displayL2_ForceUpdate:	
 10811                           ; 1 bytes @ 0x0
 10812                           
 10813  0070                     ?_displayL2_EraseSegDisplay:	
 10814                           ; 1 bytes @ 0x0
 10815                           
 10816  0070                     ?_displayL2_ClrUserLeds:	
 10817                           ; 1 bytes @ 0x0
 10818                           
 10819  0070                     ?_displayL1_Update:	
 10820                           ; 1 bytes @ 0x0
 10821                           
 10822  0070                     ?_SPI1_Initialize:	
 10823                           ; 1 bytes @ 0x0
 10824                           
 10825  0070                     ?_SPI1_Exchange8bit:	
 10826                           ; 1 bytes @ 0x0
 10827                           
 10828  0070                     ?_PWM5_Initialize:	
 10829                           ; 1 bytes @ 0x0
 10830                           
 10831  0070                     ?_PWM6_Initialize:	
 10832                           ; 1 bytes @ 0x0
 10833                           
 10834  0070                     ?_PWM1_Initialize:	
 10835                           ; 1 bytes @ 0x0
 10836                           
 10837  0070                     ?_TMR2_Initialize:	
 10838                           ; 1 bytes @ 0x0
 10839                           
 10840  0070                     ?_TMR4_Initialize:	
 10841                           ; 1 bytes @ 0x0
 10842                           
 10843  0070                     ?_SYSTEM_Initialize:	
 10844                           ; 1 bytes @ 0x0
 10845                           
 10846  0070                     ?_TMR0_ISR:	
 10847                           ; 1 bytes @ 0x0
 10848                           
 10849  0070                     ??_TMR0_ISR:	
 10850                           ; 1 bytes @ 0x0
 10851                           
 10852  0070                     ?_INTERRUPT_InterruptManager:	
 10853                           ; 1 bytes @ 0x0
 10854                           
 10855  0070                     ??_INTERRUPT_InterruptManager:	
 10856                           ; 1 bytes @ 0x0
 10857                           
 10858  0070                     ?_scheduler_TaskRun:	
 10859                           ; 1 bytes @ 0x0
 10860                           
 10861  0070                     ?_scheduler_Init:	
 10862                           ; 1 bytes @ 0x0
 10863                           
 10864  0070                     ?_scheduler_TaskInit:	
 10865                           ; 1 bytes @ 0x0
 10866                           
 10867  0070                     ?_schedulerExecute:	
 10868                           ; 1 bytes @ 0x0
 10869                           
 10870  0070                     ?_led_rand:	
 10871                           ; 1 bytes @ 0x0
 10872                           
 10873  0070                     ?_main:	
 10874                           ; 1 bytes @ 0x0
 10875                           
 10876  0070                     ?_nullifyBadge_userLedsRegister:	
 10877                           ; 1 bytes @ 0x0
 10878                           
 10879  0070                     ?_nullifyBadge_userLedsClr:	
 10880                           ; 1 bytes @ 0x0
 10881                           
 10882  0070                     ?_nullifyBadge_buttonsGet:	
 10883                           ; 1 bytes @ 0x0
 10884                           
 10885  0070                     ?_nullifyBadge_irGet:	
 10886                           ; 1 bytes @ 0x0
 10887                           
 10888  0070                     ?_nullifyBadge_irTxRegister:	
 10889                           ; 1 bytes @ 0x0
 10890                           
 10891  0070                     ?_nullifyBadge_irTxRelease:	
 10892                           ; 1 bytes @ 0x0
 10893                           
 10894  0070                     ?_nullifyBadge_irTxSet:	
 10895                           ; 1 bytes @ 0x0
 10896                           
 10897  0070                     ?_nullifyBadge_irTxClr:	
 10898                           ; 1 bytes @ 0x0
 10899                           
 10900  0070                     ?_displayL1_Initialize:	
 10901                           ; 1 bytes @ 0x0
 10902                           
 10903  0070                     ?_locked_lock_leds:	
 10904                           ; 1 bytes @ 0x0
 10905                           
 10906  0070                     ?_locked_unlock_leds:	
 10907                           ; 2 bytes @ 0x0
 10908                           
 10909                           
 10910                           ; 2 bytes @ 0x0
 10911  0070                     	ds	1
 10912  0071                     ??_TMR2_StartTimer:	
 10913  0071                     ??_TMR4_StartTimer:	
 10914                           ; 1 bytes @ 0x1
 10915                           
 10916  0071                     ??_PIN_MANAGER_Initialize:	
 10917                           ; 1 bytes @ 0x1
 10918                           
 10919  0071                     ??_OSCILLATOR_Initialize:	
 10920                           ; 1 bytes @ 0x1
 10921                           
 10922  0071                     ??_WDT_Initialize:	
 10923                           ; 1 bytes @ 0x1
 10924                           
 10925  0071                     ??_PWM2_Initialize:	
 10926                           ; 1 bytes @ 0x1
 10927                           
 10928  0071                     ?_TMR0_SetInterruptHandler:	
 10929                           ; 1 bytes @ 0x1
 10930                           
 10931  0071                     ??_TMR0_StartTimer:	
 10932                           ; 1 bytes @ 0x1
 10933                           
 10934  0071                     ??_nullifyBadge_segDisplayRegister:	
 10935                           ; 1 bytes @ 0x1
 10936                           
 10937  0071                     ?_secret_clear:	
 10938                           ; 1 bytes @ 0x1
 10939                           
 10940  0071                     ??_isdigit:	
 10941                           ; 1 bytes @ 0x1
 10942                           
 10943  0071                     ??_SPI1_Initialize:	
 10944                           ; 1 bytes @ 0x1
 10945                           
 10946  0071                     ??_SPI1_Exchange8bit:	
 10947                           ; 1 bytes @ 0x1
 10948                           
 10949  0071                     ??_PWM5_Initialize:	
 10950                           ; 1 bytes @ 0x1
 10951                           
 10952  0071                     ?_PWM5_LoadDutyValue:	
 10953                           ; 1 bytes @ 0x1
 10954                           
 10955  0071                     ??_PWM6_Initialize:	
 10956                           ; 1 bytes @ 0x1
 10957                           
 10958  0071                     ?_PWM6_LoadDutyValue:	
 10959                           ; 1 bytes @ 0x1
 10960                           
 10961  0071                     ??_PWM1_Initialize:	
 10962                           ; 1 bytes @ 0x1
 10963                           
 10964  0071                     ?_PWM1_LoadDutyValue:	
 10965                           ; 1 bytes @ 0x1
 10966                           
 10967  0071                     ??_TMR2_Initialize:	
 10968                           ; 1 bytes @ 0x1
 10969                           
 10970  0071                     ??_TMR4_Initialize:	
 10971                           ; 1 bytes @ 0x1
 10972                           
 10973  0071                     ?_PWM2_LoadDutyValue:	
 10974                           ; 1 bytes @ 0x1
 10975                           
 10976  0071                     ??_scheduler_Init:	
 10977                           ; 1 bytes @ 0x1
 10978                           
 10979  0071                     ??_scheduler_TaskInit:	
 10980                           ; 1 bytes @ 0x1
 10981                           
 10982  0071                     ??_nullifyBadge_userLedsRegister:	
 10983                           ; 1 bytes @ 0x1
 10984                           
 10985  0071                     ??_nullifyBadge_buttonsGet:	
 10986                           ; 1 bytes @ 0x1
 10987                           
 10988  0071                     ??_nullifyBadge_irGet:	
 10989                           ; 1 bytes @ 0x1
 10990                           
 10991  0071                     ??_nullifyBadge_irTxRegister:	
 10992                           ; 1 bytes @ 0x1
 10993                           
 10994  0071                     ??_nullifyBadge_irTxRelease:	
 10995                           ; 1 bytes @ 0x1
 10996                           
 10997  0071                     ??_nullifyBadge_irTxSet:	
 10998                           ; 1 bytes @ 0x1
 10999                           
 11000  0071                     ??_nullifyBadge_irTxClr:	
 11001                           ; 1 bytes @ 0x1
 11002                           
 11003  0071                     ?_displayL1_SetUserLed:	
 11004                           ; 1 bytes @ 0x1
 11005                           
 11006  0071                     ??_locked_lock_leds:	
 11007                           ; 1 bytes @ 0x1
 11008                           
 11009  0071                     ??_locked_unlock_leds:	
 11010                           ; 1 bytes @ 0x1
 11011                           
 11012  0071                     ?___bmul:	
 11013                           ; 1 bytes @ 0x1
 11014                           
 11015  0071                     ?_strlen:	
 11016                           ; 1 bytes @ 0x1
 11017                           
 11018  0071                     ?_memset:	
 11019                           ; 2 bytes @ 0x1
 11020                           
 11021  0071                     ?_displayCharReverse:	
 11022                           ; 2 bytes @ 0x1
 11023                           
 11024  0071                     ?_TMR0_Read16bitTimer:	
 11025                           ; 2 bytes @ 0x1
 11026                           
 11027  0071                     ?_locked_get_lock_leds:	
 11028                           ; 2 bytes @ 0x1
 11029                           
 11030  0071                     ?_locked_get_unlock_leds:	
 11031                           ; 2 bytes @ 0x1
 11032                           
 11033  0071                     ?___wmul:	
 11034                           ; 2 bytes @ 0x1
 11035                           
 11036  0071                     ?___lwdiv:	
 11037                           ; 2 bytes @ 0x1
 11038                           
 11039  0071                     ?___lmul:	
 11040                           ; 2 bytes @ 0x1
 11041                           
 11042  0071                     SPI1_Exchange8bit@data:	
 11043                           ; 4 bytes @ 0x1
 11044                           
 11045  0071                     PIN_MANAGER_Initialize@state:	
 11046                           ; 1 bytes @ 0x1
 11047                           
 11048  0071                     scheduler_TaskInit@task:	
 11049                           ; 1 bytes @ 0x1
 11050                           
 11051  0071                     nullifyBadge_segDisplayRegister@badge:	
 11052                           ; 1 bytes @ 0x1
 11053                           
 11054  0071                     nullifyBadge_userLedsRegister@badge:	
 11055                           ; 1 bytes @ 0x1
 11056                           
 11057  0071                     nullifyBadge_irTxRegister@badge:	
 11058                           ; 1 bytes @ 0x1
 11059                           
 11060  0071                     ___bmul@multiplicand:	
 11061                           ; 1 bytes @ 0x1
 11062                           
 11063  0071                     _isdigit$3264:	
 11064                           ; 1 bytes @ 0x1
 11065                           
 11066  0071                     PWM5_LoadDutyValue@dutyValue:	
 11067                           ; 1 bytes @ 0x1
 11068                           
 11069  0071                     PWM6_LoadDutyValue@dutyValue:	
 11070                           ; 2 bytes @ 0x1
 11071                           
 11072  0071                     PWM1_LoadDutyValue@dutyValue:	
 11073                           ; 2 bytes @ 0x1
 11074                           
 11075  0071                     PWM2_LoadDutyValue@dutyValue:	
 11076                           ; 2 bytes @ 0x1
 11077                           
 11078  0071                     TMR0_SetInterruptHandler@InterruptHandler:	
 11079                           ; 2 bytes @ 0x1
 11080                           
 11081  0071                     displayL1_SetUserLed@userLedVect:	
 11082                           ; 2 bytes @ 0x1
 11083                           
 11084  0071                     displayCharReverse@cVal:	
 11085                           ; 2 bytes @ 0x1
 11086                           
 11087  0071                     secret_clear@data:	
 11088                           ; 2 bytes @ 0x1
 11089                           
 11090  0071                     ___wmul@multiplier:	
 11091                           ; 2 bytes @ 0x1
 11092                           
 11093  0071                     ___lwdiv@divisor:	
 11094                           ; 2 bytes @ 0x1
 11095                           
 11096  0071                     memset@p1:	
 11097                           ; 2 bytes @ 0x1
 11098                           
 11099  0071                     strlen@s:	
 11100                           ; 2 bytes @ 0x1
 11101                           
 11102  0071                     ___lmul@multiplier:	
 11103                           ; 2 bytes @ 0x1
 11104                           
 11105                           
 11106                           ; 4 bytes @ 0x1
 11107  0071                     	ds	1
 11108  0072                     ?_SPI1_Exchange8bitBuffer:	
 11109  0072                     ??___bmul:	
 11110                           ; 1 bytes @ 0x2
 11111                           
 11112  0072                     SPI1_Exchange8bitBuffer@bufLen:	
 11113                           ; 1 bytes @ 0x2
 11114                           
 11115  0072                     scheduler_Init@scheduler:	
 11116                           ; 1 bytes @ 0x2
 11117                           
 11118  0072                     nullifyBadge_irTxRelease@badge:	
 11119                           ; 1 bytes @ 0x2
 11120                           
 11121  0072                     isdigit@c:	
 11122                           ; 1 bytes @ 0x2
 11123                           
 11124                           
 11125                           ; 1 bytes @ 0x2
 11126  0072                     	ds	1
 11127  0073                     ??_TMR0_Initialize:	
 11128  0073                     ??_TMR0_SetInterruptHandler:	
 11129                           ; 1 bytes @ 0x3
 11130                           
 11131  0073                     ??_strlen:	
 11132                           ; 1 bytes @ 0x3
 11133                           
 11134  0073                     ??_displayCharReverse:	
 11135                           ; 1 bytes @ 0x3
 11136                           
 11137  0073                     ??_secret_clear:	
 11138                           ; 1 bytes @ 0x3
 11139                           
 11140  0073                     ??_PWM5_LoadDutyValue:	
 11141                           ; 1 bytes @ 0x3
 11142                           
 11143  0073                     ??_PWM6_LoadDutyValue:	
 11144                           ; 1 bytes @ 0x3
 11145                           
 11146  0073                     ??_PWM1_LoadDutyValue:	
 11147                           ; 1 bytes @ 0x3
 11148                           
 11149  0073                     ??_SYSTEM_Initialize:	
 11150                           ; 1 bytes @ 0x3
 11151                           
 11152  0073                     ??_PWM2_LoadDutyValue:	
 11153                           ; 1 bytes @ 0x3
 11154                           
 11155  0073                     ??_TMR0_Read16bitTimer:	
 11156                           ; 1 bytes @ 0x3
 11157                           
 11158  0073                     ??_displayL1_SetUserLed:	
 11159                           ; 1 bytes @ 0x3
 11160                           
 11161  0073                     ??_locked_get_lock_leds:	
 11162                           ; 1 bytes @ 0x3
 11163                           
 11164  0073                     ??_locked_get_unlock_leds:	
 11165                           ; 1 bytes @ 0x3
 11166                           
 11167  0073                     SPI1_Exchange8bitBuffer@dataOut:	
 11168                           ; 1 bytes @ 0x3
 11169                           
 11170  0073                     scheduler_Init@k:	
 11171                           ; 1 bytes @ 0x3
 11172                           
 11173  0073                     nullifyBadge_buttonsGet@retVal:	
 11174                           ; 1 bytes @ 0x3
 11175                           
 11176  0073                     ___bmul@product:	
 11177                           ; 1 bytes @ 0x3
 11178                           
 11179  0073                     locked_lock_leds@size:	
 11180                           ; 1 bytes @ 0x3
 11181                           
 11182  0073                     locked_get_unlock_leds@leds:	
 11183                           ; 2 bytes @ 0x3
 11184                           
 11185  0073                     ___wmul@multiplicand:	
 11186                           ; 2 bytes @ 0x3
 11187                           
 11188  0073                     ___lwdiv@dividend:	
 11189                           ; 2 bytes @ 0x3
 11190                           
 11191  0073                     memset@c:	
 11192                           ; 2 bytes @ 0x3
 11193                           
 11194                           
 11195                           ; 2 bytes @ 0x3
 11196  0073                     	ds	1
 11197  0074                     ??_SPI1_Exchange8bitBuffer:	
 11198  0074                     displayL1_SetUserLed@display:	
 11199                           ; 1 bytes @ 0x4
 11200                           
 11201  0074                     ___bmul@multiplier:	
 11202                           ; 1 bytes @ 0x4
 11203                           
 11204                           
 11205                           ; 1 bytes @ 0x4
 11206  0074                     	ds	1
 11207  0075                     ??___wmul:	
 11208  0075                     ??___lwdiv:	
 11209                           ; 1 bytes @ 0x5
 11210                           
 11211  0075                     locked_get_lock_leds@size:	
 11212                           ; 1 bytes @ 0x5
 11213                           
 11214  0075                     ___wmul@product:	
 11215                           ; 2 bytes @ 0x5
 11216                           
 11217  0075                     memset@n:	
 11218                           ; 2 bytes @ 0x5
 11219                           
 11220  0075                     strlen@cp:	
 11221                           ; 2 bytes @ 0x5
 11222                           
 11223  0075                     ___lmul@multiplicand:	
 11224                           ; 2 bytes @ 0x5
 11225                           
 11226                           
 11227                           ; 4 bytes @ 0x5
 11228  0075                     	ds	1
 11229  0076                     ___lwdiv@counter:	
 11230                           
 11231                           ; 1 bytes @ 0x6
 11232  0076                     	ds	1
 11233  0077                     ??_memset:	
 11234  0077                     ?_secret_check:	
 11235                           ; 1 bytes @ 0x7
 11236                           
 11237  0077                     SPI1_Exchange8bitBuffer@dataIn:	
 11238                           ; 1 bytes @ 0x7
 11239                           
 11240  0077                     locked_get_lock_leds@leds:	
 11241                           ; 1 bytes @ 0x7
 11242                           
 11243  0077                     secret_check@data:	
 11244                           ; 2 bytes @ 0x7
 11245                           
 11246  0077                     ___lwdiv@quotient:	
 11247                           ; 2 bytes @ 0x7
 11248                           
 11249  0077                     memset@p:	
 11250                           ; 2 bytes @ 0x7
 11251                           
 11252                           
 11253                           ; 2 bytes @ 0x7
 11254  0077                     	ds	1
 11255  0078                     SPI1_Exchange8bitBuffer@bytesWritten:	
 11256  0078                     displayCharReverse@retValLower:	
 11257                           ; 1 bytes @ 0x8
 11258                           
 11259  0078                     TMR0_Read16bitTimer@readVal:	
 11260                           ; 1 bytes @ 0x8
 11261                           
 11262                           
 11263                           ; 2 bytes @ 0x8
 11264  0078                     	ds	1
 11265  0079                     ??_displayL1_Update:	
 11266  0079                     ??___lmul:	
 11267                           ; 1 bytes @ 0x9
 11268                           
 11269  0079                     ??___almod:	
 11270                           ; 1 bytes @ 0x9
 11271                           
 11272  0079                     ??___lwmod:	
 11273                           ; 1 bytes @ 0x9
 11274                           
 11275  0079                     displayCharReverse@retValUpper:	
 11276                           ; 1 bytes @ 0x9
 11277                           
 11278  0079                     secret_check@buttonPressed:	
 11279                           ; 1 bytes @ 0x9
 11280                           
 11281                           
 11282                           ; 1 bytes @ 0x9
 11283  0079                     	ds	1
 11284  007A                     TMR0_Read16bitTimer@readValLow:	
 11285  007A                     displayCharReverse@retValUpperRev:	
 11286                           ; 1 bytes @ 0xA
 11287                           
 11288  007A                     ___almod@counter:	
 11289                           ; 1 bytes @ 0xA
 11290                           
 11291  007A                     ___lwmod@counter:	
 11292                           ; 1 bytes @ 0xA
 11293                           
 11294                           
 11295                           ; 1 bytes @ 0xA
 11296  007A                     	ds	1
 11297  007B                     ??_displayL2_ForceUpdate:	
 11298  007B                     ??_displayL2_SetUserLeds:	
 11299                           ; 1 bytes @ 0xB
 11300                           
 11301  007B                     ??_displayL2_ClrUserLeds:	
 11302                           ; 1 bytes @ 0xB
 11303                           
 11304  007B                     ??_displayL1_Initialize:	
 11305                           ; 1 bytes @ 0xB
 11306                           
 11307  007B                     TMR0_Read16bitTimer@readValHigh:	
 11308                           ; 1 bytes @ 0xB
 11309                           
 11310  007B                     displayL1_Initialize@display:	
 11311                           ; 1 bytes @ 0xB
 11312                           
 11313  007B                     displayCharReverse@k:	
 11314                           ; 1 bytes @ 0xB
 11315                           
 11316  007B                     displayL2_ForceUpdate@display:	
 11317                           ; 1 bytes @ 0xB
 11318                           
 11319  007B                     displayL2_SetUserLeds@display:	
 11320                           ; 1 bytes @ 0xB
 11321                           
 11322  007B                     displayL2_ClrUserLeds@display:	
 11323                           ; 1 bytes @ 0xB
 11324                           
 11325  007B                     ___almod@sign:	
 11326                           ; 1 bytes @ 0xB
 11327                           
 11328                           
 11329                           ; 1 bytes @ 0xB
 11330  007B                     	ds	1
 11331  007C                     ??_nullifyBadge_segDisplayErase:	
 11332  007C                     ??_nullifyBadge_segDisplayPutStr:	
 11333                           ; 1 bytes @ 0xC
 11334                           
 11335  007C                     ??_nullifyBadge_segDisplayForceUpdate:	
 11336                           ; 1 bytes @ 0xC
 11337                           
 11338  007C                     ??_nullifyBadge_userLedsSet:	
 11339                           ; 1 bytes @ 0xC
 11340                           
 11341  007C                     ??_nullifyBadge_platformInit:	
 11342                           ; 1 bytes @ 0xC
 11343                           
 11344  007C                     ??_flashy_Init:	
 11345                           ; 1 bytes @ 0xC
 11346                           
 11347  007C                     ??_menu_Init:	
 11348                           ; 1 bytes @ 0xC
 11349                           
 11350  007C                     ??_slot_Init:	
 11351                           ; 1 bytes @ 0xC
 11352                           
 11353  007C                     ??_locked_Init:	
 11354                           ; 1 bytes @ 0xC
 11355                           
 11356  007C                     ??_secret_Init:	
 11357                           ; 1 bytes @ 0xC
 11358                           
 11359  007C                     ??_displayL2_Initialize:	
 11360                           ; 1 bytes @ 0xC
 11361                           
 11362  007C                     ??_displayL2_EraseSegDisplay:	
 11363                           ; 1 bytes @ 0xC
 11364                           
 11365  007C                     ??_menu_clear:	
 11366                           ; 1 bytes @ 0xC
 11367                           
 11368  007C                     ??_menu_display_option:	
 11369                           ; 1 bytes @ 0xC
 11370                           
 11371  007C                     ??_menu_run_option:	
 11372                           ; 1 bytes @ 0xC
 11373                           
 11374  007C                     ??_locked_clear:	
 11375                           ; 1 bytes @ 0xC
 11376                           
 11377  007C                     ??_scheduler_TaskRun:	
 11378                           ; 1 bytes @ 0xC
 11379                           
 11380  007C                     ??_led_circle:	
 11381                           ; 1 bytes @ 0xC
 11382                           
 11383  007C                     ??_let_alternate:	
 11384                           ; 1 bytes @ 0xC
 11385                           
 11386  007C                     ??_nullifyBadge_userLedsClr:	
 11387                           ; 1 bytes @ 0xC
 11388                           
 11389  007C                     ??_flashy_display_option:	
 11390                           ; 1 bytes @ 0xC
 11391                           
 11392                           
 11393                           	psect	cstackBANK0
 11394  0020                     __pcstackBANK0:	
 11395                           ; 1 bytes @ 0xC
 11396                           
 11397  0020                     ?_displayL1_SetSegChar:	
 11398  0020                     ??_secret_check:	
 11399                           ; 1 bytes @ 0x0
 11400                           
 11401  0020                     displayL1_SetSegChar@c:	
 11402                           ; 1 bytes @ 0x0
 11403                           
 11404  0020                     ___lmul@product:	
 11405                           ; 1 bytes @ 0x0
 11406                           
 11407  0020                     displayL1_Update@tmpRxBuf:	
 11408                           ; 4 bytes @ 0x0
 11409                           
 11410                           
 11411                           ; 10 bytes @ 0x0
 11412  0020                     	ds	1
 11413  0021                     displayL1_SetSegChar@charPos:	
 11414                           
 11415                           ; 1 bytes @ 0x1
 11416  0021                     	ds	1
 11417  0022                     ??_displayL1_SetSegChar:	
 11418                           
 11419                           ; 1 bytes @ 0x2
 11420  0022                     	ds	1
 11421  0023                     secret_check@size:	
 11422                           
 11423                           ; 2 bytes @ 0x3
 11424  0023                     	ds	1
 11425  0024                     ?_rand:	
 11426                           
 11427                           ; 2 bytes @ 0x4
 11428  0024                     	ds	1
 11429  0025                     secret_check@currents_size:	
 11430                           
 11431                           ; 2 bytes @ 0x5
 11432  0025                     	ds	1
 11433  0026                     ??_rand:	
 11434  0026                     displayL1_SetSegChar@dispDataVectBaseIdx:	
 11435                           ; 1 bytes @ 0x6
 11436                           
 11437                           
 11438                           ; 1 bytes @ 0x6
 11439  0026                     	ds	1
 11440  0027                     displayL1_SetSegChar@display:	
 11441  0027                     secret_check@inputs:	
 11442                           ; 1 bytes @ 0x7
 11443                           
 11444                           
 11445                           ; 1 bytes @ 0x7
 11446  0027                     	ds	1
 11447  0028                     displayL1_SetSegChar@charData:	
 11448  0028                     secret_check@i:	
 11449                           ; 2 bytes @ 0x8
 11450                           
 11451                           
 11452                           ; 2 bytes @ 0x8
 11453  0028                     	ds	2
 11454  002A                     ?_displayL2_PutChar:	
 11455  002A                     displayL1_Update@display:	
 11456                           ; 1 bytes @ 0xA
 11457                           
 11458  002A                     displayL2_PutChar@c:	
 11459                           ; 1 bytes @ 0xA
 11460                           
 11461                           
 11462                           ; 1 bytes @ 0xA
 11463  002A                     	ds	1
 11464  002B                     ??_displayL2_PutChar:	
 11465  002B                     ?_displayL2_SetUserLeds:	
 11466                           ; 1 bytes @ 0xB
 11467                           
 11468  002B                     ?___lwmod:	
 11469                           ; 1 bytes @ 0xB
 11470                           
 11471  002B                     ?___almod:	
 11472                           ; 2 bytes @ 0xB
 11473                           
 11474  002B                     nullifyBadge_segDisplayForceUpdate@badge:	
 11475                           ; 4 bytes @ 0xB
 11476                           
 11477  002B                     nullifyBadge_userLedsClr@badge:	
 11478                           ; 1 bytes @ 0xB
 11479                           
 11480  002B                     displayL2_Initialize@display:	
 11481                           ; 1 bytes @ 0xB
 11482                           
 11483  002B                     displayL2_SetUserLeds@userLedData:	
 11484                           ; 1 bytes @ 0xB
 11485                           
 11486  002B                     ___lwmod@divisor:	
 11487                           ; 2 bytes @ 0xB
 11488                           
 11489  002B                     ___almod@divisor:	
 11490                           ; 2 bytes @ 0xB
 11491                           
 11492                           
 11493                           ; 4 bytes @ 0xB
 11494  002B                     	ds	1
 11495  002C                     nullifyBadge_platformInit@badge:	
 11496                           
 11497                           ; 1 bytes @ 0xC
 11498  002C                     	ds	1
 11499  002D                     ?_nullifyBadge_userLedsSet:	
 11500  002D                     nullifyBadge_userLedsSet@userLedData:	
 11501                           ; 1 bytes @ 0xD
 11502                           
 11503  002D                     ___lwmod@dividend:	
 11504                           ; 2 bytes @ 0xD
 11505                           
 11506                           
 11507                           ; 2 bytes @ 0xD
 11508  002D                     	ds	1
 11509  002E                     displayL2_PutChar@k:	
 11510                           
 11511                           ; 1 bytes @ 0xE
 11512  002E                     	ds	1
 11513  002F                     ?_slot_Setup:	
 11514  002F                     ?_sprintf:	
 11515                           ; 1 bytes @ 0xF
 11516                           
 11517  002F                     nullifyBadge_userLedsSet@badge:	
 11518                           ; 2 bytes @ 0xF
 11519                           
 11520  002F                     displayL2_PutChar@display:	
 11521                           ; 1 bytes @ 0xF
 11522                           
 11523  002F                     slot_Setup@taskData:	
 11524                           ; 1 bytes @ 0xF
 11525                           
 11526  002F                     sprintf@sp:	
 11527                           ; 2 bytes @ 0xF
 11528                           
 11529  002F                     ___almod@dividend:	
 11530                           ; 2 bytes @ 0xF
 11531                           
 11532                           
 11533                           ; 4 bytes @ 0xF
 11534  002F                     	ds	1
 11535  0030                     ?_displayL2_PutStr:	
 11536  0030                     ?_led_roundabout:	
 11537                           ; 1 bytes @ 0x10
 11538                           
 11539  0030                     ?_led_curtain:	
 11540                           ; 1 bytes @ 0x10
 11541                           
 11542  0030                     ?_led_circle:	
 11543                           ; 1 bytes @ 0x10
 11544                           
 11545  0030                     ?_let_alternate:	
 11546                           ; 1 bytes @ 0x10
 11547                           
 11548  0030                     ?_led_Parody:	
 11549                           ; 1 bytes @ 0x10
 11550                           
 11551  0030                     led_roundabout@counter:	
 11552                           ; 1 bytes @ 0x10
 11553                           
 11554  0030                     led_curtain@counter:	
 11555                           ; 2 bytes @ 0x10
 11556                           
 11557  0030                     led_circle@count:	
 11558                           ; 2 bytes @ 0x10
 11559                           
 11560  0030                     let_alternate@count:	
 11561                           ; 2 bytes @ 0x10
 11562                           
 11563  0030                     led_Parody@count:	
 11564                           ; 2 bytes @ 0x10
 11565                           
 11566  0030                     displayL2_PutStr@str:	
 11567                           ; 2 bytes @ 0x10
 11568                           
 11569                           
 11570                           ; 2 bytes @ 0x10
 11571  0030                     	ds	1
 11572  0031                     ??_slot_Setup:	
 11573  0031                     sprintf@f:	
 11574                           ; 1 bytes @ 0x11
 11575                           
 11576                           
 11577                           ; 2 bytes @ 0x11
 11578  0031                     	ds	1
 11579  0032                     ??_displayL2_PutStr:	
 11580  0032                     ??_led_roundabout:	
 11581                           ; 1 bytes @ 0x12
 11582                           
 11583  0032                     ??_led_curtain:	
 11584                           ; 1 bytes @ 0x12
 11585                           
 11586  0032                     ??_led_Parody:	
 11587                           ; 1 bytes @ 0x12
 11588                           
 11589  0032                     ?_slot_Running_Animation:	
 11590                           ; 1 bytes @ 0x12
 11591                           
 11592  0032                     slot_Running_Animation@taskData:	
 11593                           ; 1 bytes @ 0x12
 11594                           
 11595                           
 11596                           ; 2 bytes @ 0x12
 11597  0032                     	ds	1
 11598  0033                     ??_led_rand:	
 11599                           
 11600                           ; 1 bytes @ 0x13
 11601  0033                     	ds	1
 11602  0034                     ??_slot_Running_Animation:	
 11603  0034                     led_roundabout@leds:	
 11604                           ; 1 bytes @ 0x14
 11605                           
 11606  0034                     led_curtain@leds:	
 11607                           ; 2 bytes @ 0x14
 11608                           
 11609  0034                     led_Parody@leds:	
 11610                           ; 2 bytes @ 0x14
 11611                           
 11612  0034                     slot_Setup@data:	
 11613                           ; 2 bytes @ 0x14
 11614                           
 11615                           
 11616                           ; 2 bytes @ 0x14
 11617  0034                     	ds	1
 11618  0035                     displayL2_PutStr@display:	
 11619                           
 11620                           ; 1 bytes @ 0x15
 11621  0035                     	ds	1
 11622  0036                     displayL2_PutStr@k:	
 11623  0036                     led_roundabout@size:	
 11624                           ; 1 bytes @ 0x16
 11625                           
 11626  0036                     led_curtain@size:	
 11627                           ; 2 bytes @ 0x16
 11628                           
 11629  0036                     led_Parody@size:	
 11630                           ; 2 bytes @ 0x16
 11631                           
 11632  0036                     slot_Running_Animation@data:	
 11633                           ; 2 bytes @ 0x16
 11634                           
 11635                           
 11636                           ; 2 bytes @ 0x16
 11637  0036                     	ds	1
 11638  0037                     ?_nullifyBadge_segDisplayPutStr:	
 11639  0037                     displayL2_EraseSegDisplay@display:	
 11640                           ; 1 bytes @ 0x17
 11641                           
 11642  0037                     nullifyBadge_segDisplayPutStr@str:	
 11643                           ; 1 bytes @ 0x17
 11644                           
 11645                           
 11646                           ; 2 bytes @ 0x17
 11647  0037                     	ds	1
 11648  0038                     nullifyBadge_segDisplayErase@badge:	
 11649                           
 11650                           ; 1 bytes @ 0x18
 11651  0038                     	ds	1
 11652  0039                     ?_flashy_Init:	
 11653  0039                     ?_menu_Init:	
 11654                           ; 1 bytes @ 0x19
 11655                           
 11656  0039                     ?_slot_Init:	
 11657                           ; 1 bytes @ 0x19
 11658                           
 11659  0039                     ?_locked_Init:	
 11660                           ; 1 bytes @ 0x19
 11661                           
 11662  0039                     ?_secret_Init:	
 11663                           ; 1 bytes @ 0x19
 11664                           
 11665  0039                     ?_menu_clear:	
 11666                           ; 1 bytes @ 0x19
 11667                           
 11668  0039                     ?_locked_clear:	
 11669                           ; 1 bytes @ 0x19
 11670                           
 11671  0039                     nullifyBadge_segDisplayPutStr@badge:	
 11672                           ; 1 bytes @ 0x19
 11673                           
 11674  0039                     menu_Init@taskData:	
 11675                           ; 1 bytes @ 0x19
 11676                           
 11677  0039                     menu_clear@data:	
 11678                           ; 2 bytes @ 0x19
 11679                           
 11680  0039                     flashy_Init@taskData:	
 11681                           ; 2 bytes @ 0x19
 11682                           
 11683  0039                     locked_Init@taskData:	
 11684                           ; 2 bytes @ 0x19
 11685                           
 11686  0039                     locked_clear@data:	
 11687                           ; 2 bytes @ 0x19
 11688                           
 11689  0039                     secret_Init@taskData:	
 11690                           ; 2 bytes @ 0x19
 11691                           
 11692  0039                     slot_Init@taskData:	
 11693                           ; 2 bytes @ 0x19
 11694                           
 11695                           
 11696                           ; 2 bytes @ 0x19
 11697  0039                     	ds	1
 11698  003A                     ?_marquee_speedy:	
 11699  003A                     ?_marquee:	
 11700                           ; 1 bytes @ 0x1A
 11701                           
 11702  003A                     marquee_speedy@string:	
 11703                           ; 1 bytes @ 0x1A
 11704                           
 11705  003A                     marquee@string:	
 11706                           ; 2 bytes @ 0x1A
 11707                           
 11708                           
 11709                           ; 2 bytes @ 0x1A
 11710  003A                     	ds	1
 11711  003B                     ?_menu_run_option:	
 11712  003B                     ??_sprintf:	
 11713                           ; 1 bytes @ 0x1B
 11714                           
 11715  003B                     led_rand@spark:	
 11716                           ; 1 bytes @ 0x1B
 11717                           
 11718  003B                     menu_Init@data:	
 11719                           ; 2 bytes @ 0x1B
 11720                           
 11721  003B                     menu_run_option@data:	
 11722                           ; 2 bytes @ 0x1B
 11723                           
 11724  003B                     flashy_Init@data:	
 11725                           ; 2 bytes @ 0x1B
 11726                           
 11727  003B                     locked_Init@data:	
 11728                           ; 2 bytes @ 0x1B
 11729                           
 11730  003B                     secret_Init@data:	
 11731                           ; 2 bytes @ 0x1B
 11732                           
 11733  003B                     slot_Init@data:	
 11734                           ; 2 bytes @ 0x1B
 11735                           
 11736                           
 11737                           ; 2 bytes @ 0x1B
 11738  003B                     	ds	1
 11739  003C                     marquee_speedy@count:	
 11740  003C                     marquee@count:	
 11741                           ; 2 bytes @ 0x1C
 11742                           
 11743                           
 11744                           ; 2 bytes @ 0x1C
 11745  003C                     	ds	1
 11746  003D                     ?_scheduler_TaskAdd:	
 11747  003D                     ?_slot_Finished_Animation:	
 11748                           ; 1 bytes @ 0x1D
 11749                           
 11750  003D                     scheduler_TaskAdd@task:	
 11751                           ; 1 bytes @ 0x1D
 11752                           
 11753  003D                     slot_Finished_Animation@taskData:	
 11754                           ; 1 bytes @ 0x1D
 11755                           
 11756                           
 11757                           ; 2 bytes @ 0x1D
 11758  003D                     	ds	1
 11759  003E                     ??_scheduler_TaskAdd:	
 11760  003E                     ??_marquee:	
 11761                           ; 1 bytes @ 0x1E
 11762                           
 11763  003E                     marquee_speedy@multiplier:	
 11764                           ; 1 bytes @ 0x1E
 11765                           
 11766                           
 11767                           ; 2 bytes @ 0x1E
 11768  003E                     	ds	1
 11769  003F                     ??_slot_Finished_Animation:	
 11770  003F                     sprintf@prec:	
 11771                           ; 1 bytes @ 0x1F
 11772                           
 11773  003F                     marquee@display_string:	
 11774                           ; 1 bytes @ 0x1F
 11775                           
 11776                           
 11777                           ; 5 bytes @ 0x1F
 11778  003F                     	ds	1
 11779  0040                     ??_marquee_speedy:	
 11780  0040                     sprintf@flag:	
 11781                           ; 1 bytes @ 0x20
 11782                           
 11783                           
 11784                           ; 1 bytes @ 0x20
 11785  0040                     	ds	1
 11786  0041                     slot_Finished_Animation@data:	
 11787  0041                     sprintf@cp:	
 11788                           ; 2 bytes @ 0x21
 11789                           
 11790  0041                     marquee_speedy@display_string:	
 11791                           ; 2 bytes @ 0x21
 11792                           
 11793                           
 11794                           ; 5 bytes @ 0x21
 11795  0041                     	ds	2
 11796  0043                     sprintf@ap:	
 11797                           
 11798                           ; 1 bytes @ 0x23
 11799  0043                     	ds	1
 11800  0044                     scheduler_TaskAdd@scheduler:	
 11801  0044                     marquee@multiplier:	
 11802                           ; 1 bytes @ 0x24
 11803                           
 11804  0044                     sprintf@val:	
 11805                           ; 2 bytes @ 0x24
 11806                           
 11807                           
 11808                           ; 2 bytes @ 0x24
 11809  0044                     	ds	1
 11810  0045                     scheduler_TaskAdd@k:	
 11811                           
 11812                           ; 1 bytes @ 0x25
 11813  0045                     	ds	1
 11814  0046                     marquee_speedy@i:	
 11815  0046                     marquee@i:	
 11816                           ; 2 bytes @ 0x26
 11817                           
 11818  0046                     sprintf@len:	
 11819                           ; 2 bytes @ 0x26
 11820                           
 11821                           
 11822                           ; 2 bytes @ 0x26
 11823  0046                     	ds	2
 11824  0048                     marquee_speedy@string_length:	
 11825  0048                     marquee@string_length:	
 11826                           ; 2 bytes @ 0x28
 11827                           
 11828  0048                     sprintf@width:	
 11829                           ; 2 bytes @ 0x28
 11830                           
 11831                           
 11832                           ; 2 bytes @ 0x28
 11833  0048                     	ds	2
 11834  004A                     sprintf@c:	
 11835  004A                     marquee_speedy@j:	
 11836                           ; 1 bytes @ 0x2A
 11837                           
 11838  004A                     marquee@j:	
 11839                           ; 2 bytes @ 0x2A
 11840                           
 11841                           
 11842                           ; 2 bytes @ 0x2A
 11843  004A                     	ds	2
 11844  004C                     ?_menu_display_option:	
 11845  004C                     ?_flashy_display_option:	
 11846                           ; 1 bytes @ 0x2C
 11847                           
 11848  004C                     menu_display_option@data:	
 11849                           ; 1 bytes @ 0x2C
 11850                           
 11851  004C                     flashy_display_option@data:	
 11852                           ; 2 bytes @ 0x2C
 11853                           
 11854                           
 11855                           ; 2 bytes @ 0x2C
 11856  004C                     	ds	2
 11857  004E                     menu_display_option@size:	
 11858                           
 11859                           ; 2 bytes @ 0x2E
 11860  004E                     	ds	2
 11861  0050                     menu_display_option@led:	
 11862                           
 11863                           ; 2 bytes @ 0x30
 11864  0050                     	ds	2
 11865  0052                     ?_flashy_Main:	
 11866  0052                     ?_menu_Main:	
 11867                           ; 1 bytes @ 0x32
 11868                           
 11869  0052                     ?_slot_Main:	
 11870                           ; 1 bytes @ 0x32
 11871                           
 11872  0052                     ?_locked_Main:	
 11873                           ; 1 bytes @ 0x32
 11874                           
 11875  0052                     ?_secret_Main:	
 11876                           ; 1 bytes @ 0x32
 11877                           
 11878  0052                     menu_Main@taskData:	
 11879                           ; 1 bytes @ 0x32
 11880                           
 11881  0052                     flashy_Main@taskData:	
 11882                           ; 2 bytes @ 0x32
 11883                           
 11884  0052                     locked_Main@taskData:	
 11885                           ; 2 bytes @ 0x32
 11886                           
 11887  0052                     secret_Main@taskData:	
 11888                           ; 2 bytes @ 0x32
 11889                           
 11890  0052                     slot_Main@taskData:	
 11891                           ; 2 bytes @ 0x32
 11892                           
 11893                           
 11894                           ; 2 bytes @ 0x32
 11895  0052                     	ds	2
 11896  0054                     ??_flashy_Main:	
 11897  0054                     ??_menu_Main:	
 11898                           ; 1 bytes @ 0x34
 11899                           
 11900  0054                     ??_slot_Main:	
 11901                           ; 1 bytes @ 0x34
 11902                           
 11903  0054                     ??_locked_Main:	
 11904                           ; 1 bytes @ 0x34
 11905                           
 11906  0054                     ??_secret_Main:	
 11907                           ; 1 bytes @ 0x34
 11908                           
 11909                           
 11910                           ; 1 bytes @ 0x34
 11911  0054                     	ds	2
 11912  0056                     menu_Main@buttonPressed:	
 11913  0056                     locked_Main@buttonPressed:	
 11914                           ; 1 bytes @ 0x36
 11915                           
 11916  0056                     secret_Main@secret_found:	
 11917                           ; 1 bytes @ 0x36
 11918                           
 11919  0056                     flashy_Main@hit_counter:	
 11920                           ; 1 bytes @ 0x36
 11921                           
 11922                           
 11923                           ; 6 bytes @ 0x36
 11924  0056                     	ds	1
 11925  0057                     secret_Main@buttonPressed:	
 11926  0057                     menu_Main@data:	
 11927                           ; 1 bytes @ 0x37
 11928                           
 11929  0057                     locked_Main@data:	
 11930                           ; 2 bytes @ 0x37
 11931                           
 11932                           
 11933                           ; 2 bytes @ 0x37
 11934  0057                     	ds	1
 11935  0058                     secret_Main@data:	
 11936                           
 11937                           ; 2 bytes @ 0x38
 11938  0058                     	ds	4
 11939  005C                     flashy_Main@buttonPressed:	
 11940                           
 11941                           ; 2 bytes @ 0x3C
 11942  005C                     	ds	2
 11943  005E                     flashy_Main@data:	
 11944                           
 11945                           ; 2 bytes @ 0x3E
 11946  005E                     	ds	6
 11947  0064                     slot_Main@buttonPressed:	
 11948                           
 11949                           ; 1 bytes @ 0x44
 11950  0064                     	ds	1
 11951  0065                     slot_Main@data:	
 11952                           
 11953                           ; 2 bytes @ 0x45
 11954  0065                     	ds	2
 11955  0067                     scheduler_TaskRun@task:	
 11956                           
 11957                           ; 1 bytes @ 0x47
 11958  0067                     	ds	1
 11959  0068                     ??_schedulerExecute:	
 11960                           
 11961                           ; 1 bytes @ 0x48
 11962  0068                     	ds	6
 11963  006E                     ??_main:	
 11964                           
 11965                           ; 1 bytes @ 0x4E
 11966  006E                     	ds	1
 11967                           
 11968                           	psect	maintext
 11969  1D68                     __pmaintext:	
 11970 ;;
 11971 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
 11972 ;;
 11973 ;; *************** function _main *****************
 11974 ;; Defined at:
 11975 ;;		line 222 in file "main.c"
 11976 ;; Parameters:    Size  Location     Type
 11977 ;;		None
 11978 ;; Auto vars:     Size  Location     Type
 11979 ;;		None
 11980 ;; Return value:  Size  Location     Type
 11981 ;;                  1    wreg      void 
 11982 ;; Registers used:
 11983 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11984 ;; Tracked objects:
 11985 ;;		On entry : B1F/0
 11986 ;;		On exit  : 0/0
 11987 ;;		Unchanged: 0/0
 11988 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11989 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11990 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11991 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11992 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11993 ;;Total ram usage:        1 bytes
 11994 ;; Hardware stack levels required when called:   15
 11995 ;; This function calls:
 11996 ;;		_nullifyBadge_platformInit
 11997 ;;		_schedulerExecute
 11998 ;;		_scheduler_Init
 11999 ;;		_scheduler_TaskAdd
 12000 ;;		_scheduler_TaskInit
 12001 ;; This function is called by:
 12002 ;;		Startup code after reset
 12003 ;; This function uses a non-reentrant model
 12004 ;;
 12005                           
 12006                           
 12007                           ;psect for function _main
 12008  1D68                     _main:	
 12009                           
 12010                           ;main.c: 225: nullifyBadge_platformInit(&badge_inst);
 12011                           
 12012                           ;incstack = 0
 12013                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12014  1D68  30DA               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 12015  1D69  31A7  27AB  319D   	fcall	_nullifyBadge_platformInit
 12016                           
 12017                           ;main.c: 228: scheduler_Init(&schedulerInst);
 12018  1D6C  30C8               	movlw	(low (_schedulerInst| (0+256)))& (0+255)
 12019  1D6D  31A0  2045  319D   	fcall	_scheduler_Init
 12020                           
 12021                           ;main.c: 231: scheduler_TaskInit(&flashy_task);
 12022  1D70  3054               	movlw	(low (_flashy_task| (0+256)))& (0+255)
 12023  1D71  31A3  2389  319D   	fcall	_scheduler_TaskInit
 12024                           
 12025                           ;main.c: 232: scheduler_TaskInit(&menu_task);
 12026  1D74  3047               	movlw	(low (_menu_task| (0+256)))& (0+255)
 12027  1D75  31A3  2389  319D   	fcall	_scheduler_TaskInit
 12028                           
 12029                           ;main.c: 233: scheduler_TaskInit(&slot_task);
 12030  1D78  303A               	movlw	(low (_slot_task| (0+256)))& (0+255)
 12031  1D79  31A3  2389  319D   	fcall	_scheduler_TaskInit
 12032                           
 12033                           ;main.c: 234: scheduler_TaskInit(&locked_task);
 12034  1D7C  302D               	movlw	(low (_locked_task| (0+256)))& (0+255)
 12035  1D7D  31A3  2389  319D   	fcall	_scheduler_TaskInit
 12036                           
 12037                           ;main.c: 235: scheduler_TaskInit(&secret_task);
 12038  1D80  3020               	movlw	(low (_secret_task| (0+256)))& (0+255)
 12039  1D81  31A3  2389  319D   	fcall	_scheduler_TaskInit
 12040                           
 12041                           ;main.c: 238: flashy_TaskData.badge = &badge_inst;
 12042  1D84  30DA               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 12043  1D85  0020               	movlb	0	; select bank0
 12044  1D86  00EE               	movwf	??_main
 12045  1D87  086E               	movf	??_main,w
 12046  1D88  0028               	movlb	8	; select bank8
 12047  1D89  00A0               	movwf	_flashy_TaskData^(0+1024)
 12048                           
 12049                           ;main.c: 239: menu_TaskData.badge = &badge_inst;
 12050  1D8A  30DA               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 12051  1D8B  0020               	movlb	0	; select bank0
 12052  1D8C  00EE               	movwf	??_main
 12053  1D8D  086E               	movf	??_main,w
 12054  1D8E  0024               	movlb	4	; select bank4
 12055  1D8F  00BC               	movwf	_menu_TaskData^(0+512)
 12056                           
 12057                           ;main.c: 240: slot_TaskData.badge = &badge_inst;
 12058  1D90  30DA               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 12059  1D91  0020               	movlb	0	; select bank0
 12060  1D92  00EE               	movwf	??_main
 12061  1D93  086E               	movf	??_main,w
 12062  1D94  0029               	movlb	9	; select bank9
 12063  1D95  00A0               	movwf	_slot_TaskData^(0+1152)
 12064                           
 12065                           ;main.c: 241: locked_TaskData.badge = &badge_inst;
 12066  1D96  30DA               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 12067  1D97  0020               	movlb	0	; select bank0
 12068  1D98  00EE               	movwf	??_main
 12069  1D99  086E               	movf	??_main,w
 12070  1D9A  0024               	movlb	4	; select bank4
 12071  1D9B  00AE               	movwf	_locked_TaskData^(0+512)
 12072                           
 12073                           ;main.c: 242: secret_TaskData.badge = &badge_inst;
 12074  1D9C  30DA               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 12075  1D9D  0020               	movlb	0	; select bank0
 12076  1D9E  00EE               	movwf	??_main
 12077  1D9F  086E               	movf	??_main,w
 12078  1DA0  0024               	movlb	4	; select bank4
 12079  1DA1  00A0               	movwf	_secret_TaskData^(0+512)
 12080                           
 12081                           ;main.c: 245: badge_locked = 1;
 12082  1DA2  0021               	movlb	1	; select bank1
 12083  1DA3  01C4               	clrf	_badge_locked^(0+128)
 12084  1DA4  0AC4               	incf	_badge_locked^(0+128),f
 12085                           
 12086                           ;main.c: 248: flashy_task.taskData = (void *) &flashy_TaskData;
 12087  1DA5  3020               	movlw	low _flashy_TaskData
 12088  1DA6  0022               	movlb	2	; select bank2
 12089  1DA7  00D6               	movwf	(low ((_flashy_task| (0+256)+2)))^0
 12090  1DA8  3004               	movlw	high _flashy_TaskData
 12091  1DA9  00D7               	movwf	((low ((_flashy_task| (0+256)+2))+1))^0
 12092                           
 12093                           ;main.c: 249: flashy_task.taskInitCallback = flashy_Init;
 12094  1DAA  3049               	movlw	low _flashy_Init
 12095  1DAB  00D8               	movwf	(low ((_flashy_task| (0+256)+4)))^0
 12096  1DAC  3007               	movlw	high _flashy_Init
 12097  1DAD  00D9               	movwf	((low ((_flashy_task| (0+256)+4)))^0+1)
 12098                           
 12099                           ;main.c: 250: flashy_task.taskExecuteCallback = flashy_Main;
 12100  1DAE  3019               	movlw	low _flashy_Main
 12101  1DAF  00DC               	movwf	(low ((_flashy_task| (0+256)+8)))^0
 12102  1DB0  3008               	movlw	high _flashy_Main
 12103  1DB1  00DD               	movwf	((low ((_flashy_task| (0+256)+8)))^0+1)
 12104                           
 12105                           ;main.c: 251: flashy_task.taskExitCallback = flashy_Exit;
 12106  1DB2  3000               	movlw	0
 12107  1DB3  00DA               	movwf	(low ((_flashy_task| (0+256)+6)))^0
 12108  1DB4  3000               	movlw	0
 12109  1DB5  00DB               	movwf	((low ((_flashy_task| (0+256)+6)))^0+1)
 12110                           
 12111                           ;main.c: 252: flashy_task.taskInterval = 10;
 12112  1DB6  300A               	movlw	10
 12113  1DB7  00DE               	movwf	(_flashy_task^(0+256)+10)
 12114  1DB8  3000               	movlw	0
 12115  1DB9  00DF               	movwf	(_flashy_task^(0+256)+11)
 12116                           
 12117                           ;main.c: 254: menu_task.taskData = (void *) &menu_TaskData;
 12118  1DBA  303C               	movlw	low _menu_TaskData
 12119  1DBB  00C9               	movwf	(low ((_menu_task| (0+256)+2)))^0
 12120  1DBC  3002               	movlw	high _menu_TaskData
 12121  1DBD  00CA               	movwf	((low ((_menu_task| (0+256)+2))+1))^0
 12122                           
 12123                           ;main.c: 255: menu_task.taskInitCallback = menu_Init;
 12124  1DBE  30C9               	movlw	low _menu_Init
 12125  1DBF  00CB               	movwf	(low ((_menu_task| (0+256)+4)))^0
 12126  1DC0  3018               	movlw	high _menu_Init
 12127  1DC1  00CC               	movwf	((low ((_menu_task| (0+256)+4)))^0+1)
 12128                           
 12129                           ;main.c: 256: menu_task.taskExecuteCallback = menu_Main;
 12130  1DC2  3009               	movlw	low _menu_Main
 12131  1DC3  00CF               	movwf	(low ((_menu_task| (0+256)+8)))^0
 12132  1DC4  3016               	movlw	high _menu_Main
 12133  1DC5  00D0               	movwf	((low ((_menu_task| (0+256)+8)))^0+1)
 12134                           
 12135                           ;main.c: 257: menu_task.taskExitCallback = menu_Exit;
 12136  1DC6  3000               	movlw	0
 12137  1DC7  00CD               	movwf	(low ((_menu_task| (0+256)+6)))^0
 12138  1DC8  3000               	movlw	0
 12139  1DC9  00CE               	movwf	((low ((_menu_task| (0+256)+6)))^0+1)
 12140                           
 12141                           ;main.c: 258: menu_task.taskInterval = 10;
 12142  1DCA  300A               	movlw	10
 12143  1DCB  00D1               	movwf	(_menu_task^(0+256)+10)
 12144  1DCC  3000               	movlw	0
 12145  1DCD  00D2               	movwf	(_menu_task^(0+256)+11)
 12146                           
 12147                           ;main.c: 260: slot_task.taskData = (void *) &slot_TaskData;
 12148  1DCE  30A0               	movlw	low _slot_TaskData
 12149  1DCF  00BC               	movwf	(low ((_slot_task| (0+256)+2)))^0
 12150  1DD0  3004               	movlw	high _slot_TaskData
 12151  1DD1  00BD               	movwf	((low ((_slot_task| (0+256)+2))+1))^0
 12152                           
 12153                           ;main.c: 261: slot_task.taskInitCallback = slot_Init;
 12154  1DD2  308E               	movlw	low _slot_Init
 12155  1DD3  00BE               	movwf	(low ((_slot_task| (0+256)+4)))^0
 12156  1DD4  3019               	movlw	high _slot_Init
 12157  1DD5  00BF               	movwf	((low ((_slot_task| (0+256)+4)))^0+1)
 12158                           
 12159                           ;main.c: 262: slot_task.taskExecuteCallback = slot_Main;
 12160  1DD6  30D7               	movlw	low _slot_Main
 12161  1DD7  00C2               	movwf	(low ((_slot_task| (0+256)+8)))^0
 12162  1DD8  3000               	movlw	high _slot_Main
 12163  1DD9  00C3               	movwf	((low ((_slot_task| (0+256)+8)))^0+1)
 12164                           
 12165                           ;main.c: 263: slot_task.taskExitCallback = slot_Exit;
 12166  1DDA  3000               	movlw	0
 12167  1DDB  00C0               	movwf	(low ((_slot_task| (0+256)+6)))^0
 12168  1DDC  3000               	movlw	0
 12169  1DDD  00C1               	movwf	((low ((_slot_task| (0+256)+6)))^0+1)
 12170                           
 12171                           ;main.c: 264: slot_task.taskInterval = 10;
 12172  1DDE  300A               	movlw	10
 12173  1DDF  00C4               	movwf	(_slot_task^(0+256)+10)
 12174  1DE0  3000               	movlw	0
 12175  1DE1  00C5               	movwf	(_slot_task^(0+256)+11)
 12176                           
 12177                           ;main.c: 266: locked_task.taskData = (void *) &locked_TaskData;
 12178  1DE2  302E               	movlw	low _locked_TaskData
 12179  1DE3  00AF               	movwf	(low ((_locked_task| (0+256)+2)))^0
 12180  1DE4  3002               	movlw	high _locked_TaskData
 12181  1DE5  00B0               	movwf	((low ((_locked_task| (0+256)+2))+1))^0
 12182                           
 12183                           ;main.c: 267: locked_task.taskInitCallback = locked_Init;
 12184  1DE6  302B               	movlw	low _locked_Init
 12185  1DE7  00B1               	movwf	(low ((_locked_task| (0+256)+4)))^0
 12186  1DE8  3019               	movlw	high _locked_Init
 12187  1DE9  00B2               	movwf	((low ((_locked_task| (0+256)+4)))^0+1)
 12188                           
 12189                           ;main.c: 268: locked_task.taskExecuteCallback = locked_Main;
 12190  1DEA  302C               	movlw	low _locked_Main
 12191  1DEB  00B5               	movwf	(low ((_locked_task| (0+256)+8)))^0
 12192  1DEC  3014               	movlw	high _locked_Main
 12193  1DED  00B6               	movwf	((low ((_locked_task| (0+256)+8)))^0+1)
 12194                           
 12195                           ;main.c: 269: locked_task.taskExitCallback = locked_Exit;
 12196  1DEE  3000               	movlw	0
 12197  1DEF  00B3               	movwf	(low ((_locked_task| (0+256)+6)))^0
 12198  1DF0  3000               	movlw	0
 12199  1DF1  00B4               	movwf	((low ((_locked_task| (0+256)+6)))^0+1)
 12200                           
 12201                           ;main.c: 270: locked_task.taskInterval = 10;
 12202  1DF2  300A               	movlw	10
 12203  1DF3  00B7               	movwf	(_locked_task^(0+256)+10)
 12204  1DF4  3000               	movlw	0
 12205  1DF5  00B8               	movwf	(_locked_task^(0+256)+11)
 12206                           
 12207                           ;main.c: 272: secret_task.taskData = (void *) &secret_TaskData;
 12208  1DF6  3020               	movlw	low _secret_TaskData
 12209  1DF7  00A2               	movwf	(low ((_secret_task| (0+256)+2)))^0
 12210  1DF8  3002               	movlw	high _secret_TaskData
 12211  1DF9  00A3               	movwf	((low ((_secret_task| (0+256)+2))+1))^0
 12212                           
 12213                           ;main.c: 273: secret_task.taskInitCallback = secret_Init;
 12214  1DFA  300C               	movlw	low _secret_Init
 12215  1DFB  00A4               	movwf	(low ((_secret_task| (0+256)+4)))^0
 12216  1DFC  3018               	movlw	high _secret_Init
 12217  1DFD  00A5               	movwf	((low ((_secret_task| (0+256)+4)))^0+1)
 12218                           
 12219                           ;main.c: 274: secret_task.taskExecuteCallback = secret_Main;
 12220  1DFE  3043               	movlw	low _secret_Main
 12221  1DFF  00A8               	movwf	(low ((_secret_task| (0+256)+8)))^0
 12222  1E00  301E               	movlw	high _secret_Main
 12223  1E01  00A9               	movwf	((low ((_secret_task| (0+256)+8)))^0+1)
 12224                           
 12225                           ;main.c: 275: secret_task.taskExitCallback = secret_Exit;
 12226  1E02  3000               	movlw	0
 12227  1E03  00A6               	movwf	(low ((_secret_task| (0+256)+6)))^0
 12228  1E04  3000               	movlw	0
 12229  1E05  00A7               	movwf	((low ((_secret_task| (0+256)+6)))^0+1)
 12230                           
 12231                           ;main.c: 276: secret_task.taskInterval = 10;
 12232  1E06  300A               	movlw	10
 12233  1E07  00AA               	movwf	(_secret_task^(0+256)+10)
 12234  1E08  3000               	movlw	0
 12235  1E09  00AB               	movwf	(_secret_task^(0+256)+11)
 12236                           
 12237                           ;main.c: 279: secret_value = SECRET_VALUE_INIT;
 12238  1E0A  0021               	movlb	1	; select bank1
 12239  1E0B  01C5               	clrf	_secret_value^(0+128)
 12240  1E0C  01C6               	clrf	(_secret_value+1)^(0+128)
 12241                           
 12242                           ;main.c: 282: currentTask = FLASHY_TASK;
 12243  1E0D  3002               	movlw	2
 12244  1E0E  00B8               	movwf	_currentTask^(0+128)
 12245  1E0F  3000               	movlw	0
 12246  1E10  00B9               	movwf	(_currentTask^(0+128)+1)
 12247                           
 12248                           ;main.c: 283: scheduler_TaskAdd(&schedulerInst, &flashy_task);
 12249  1E11  3054               	movlw	(low (_flashy_task| (0+256)))& (0+255)
 12250  1E12  0020               	movlb	0	; select bank0
 12251  1E13  00EE               	movwf	??_main
 12252  1E14  086E               	movf	??_main,w
 12253  1E15  00BD               	movwf	scheduler_TaskAdd@task
 12254  1E16  30C8               	movlw	(low (_schedulerInst| (0+256)))& (0+255)
 12255  1E17  319B  23AF  319D   	fcall	_scheduler_TaskAdd
 12256                           
 12257                           ;main.c: 284: scheduler_TaskAdd(&schedulerInst, &menu_task);
 12258  1E1A  3047               	movlw	(low (_menu_task| (0+256)))& (0+255)
 12259  1E1B  0020               	movlb	0	; select bank0
 12260  1E1C  00EE               	movwf	??_main
 12261  1E1D  086E               	movf	??_main,w
 12262  1E1E  00BD               	movwf	scheduler_TaskAdd@task
 12263  1E1F  30C8               	movlw	(low (_schedulerInst| (0+256)))& (0+255)
 12264  1E20  319B  23AF  319D   	fcall	_scheduler_TaskAdd
 12265                           
 12266                           ;main.c: 285: scheduler_TaskAdd(&schedulerInst, &slot_task);
 12267  1E23  303A               	movlw	(low (_slot_task| (0+256)))& (0+255)
 12268  1E24  0020               	movlb	0	; select bank0
 12269  1E25  00EE               	movwf	??_main
 12270  1E26  086E               	movf	??_main,w
 12271  1E27  00BD               	movwf	scheduler_TaskAdd@task
 12272  1E28  30C8               	movlw	(low (_schedulerInst| (0+256)))& (0+255)
 12273  1E29  319B  23AF  319D   	fcall	_scheduler_TaskAdd
 12274                           
 12275                           ;main.c: 286: scheduler_TaskAdd(&schedulerInst, &locked_task);
 12276  1E2C  302D               	movlw	(low (_locked_task| (0+256)))& (0+255)
 12277  1E2D  0020               	movlb	0	; select bank0
 12278  1E2E  00EE               	movwf	??_main
 12279  1E2F  086E               	movf	??_main,w
 12280  1E30  00BD               	movwf	scheduler_TaskAdd@task
 12281  1E31  30C8               	movlw	(low (_schedulerInst| (0+256)))& (0+255)
 12282  1E32  319B  23AF  319D   	fcall	_scheduler_TaskAdd
 12283                           
 12284                           ;main.c: 287: scheduler_TaskAdd(&schedulerInst, &secret_task);
 12285  1E35  3020               	movlw	(low (_secret_task| (0+256)))& (0+255)
 12286  1E36  0020               	movlb	0	; select bank0
 12287  1E37  00EE               	movwf	??_main
 12288  1E38  086E               	movf	??_main,w
 12289  1E39  00BD               	movwf	scheduler_TaskAdd@task
 12290  1E3A  30C8               	movlw	(low (_schedulerInst| (0+256)))& (0+255)
 12291  1E3B  319B  23AF  319D   	fcall	_scheduler_TaskAdd
 12292  1E3E                     l8842:	
 12293                           ;main.c: 289: while(1){
 12294                           
 12295                           
 12296                           ;main.c: 290: schedulerExecute(&schedulerInst);
 12297  1E3E  30C8               	movlw	(low (_schedulerInst| (0+256)))& (0+255)
 12298  1E3F  319C  2429  319D   	fcall	_schedulerExecute
 12299  1E42  2E3E               	goto	l8842
 12300  1E43                     __end_of_main:	
 12301                           
 12302                           	psect	text1
 12303  2389                     __ptext1:	
 12304 ;; *************** function _scheduler_TaskInit *****************
 12305 ;; Defined at:
 12306 ;;		line 36 in file "cooperative_scheduler.c"
 12307 ;; Parameters:    Size  Location     Type
 12308 ;;  task            1    wreg     PTR struct t_schedulerTa
 12309 ;;		 -> secret_task(13), locked_task(13), slot_task(13), menu_task(13), 
 12310 ;;		 -> flashy_task(13), 
 12311 ;; Auto vars:     Size  Location     Type
 12312 ;;  task            1    1[COMMON] PTR struct t_schedulerTa
 12313 ;;		 -> secret_task(13), locked_task(13), slot_task(13), menu_task(13), 
 12314 ;;		 -> flashy_task(13), 
 12315 ;; Return value:  Size  Location     Type
 12316 ;;                  1    wreg      void 
 12317 ;; Registers used:
 12318 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12319 ;; Tracked objects:
 12320 ;;		On entry : 0/0
 12321 ;;		On exit  : 0/0
 12322 ;;		Unchanged: 0/0
 12323 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12324 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12325 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12326 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12327 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12328 ;;Total ram usage:        1 bytes
 12329 ;; Hardware stack levels used:    1
 12330 ;; Hardware stack levels required when called:    4
 12331 ;; This function calls:
 12332 ;;		Nothing
 12333 ;; This function is called by:
 12334 ;;		_main
 12335 ;; This function uses a non-reentrant model
 12336 ;;
 12337                           
 12338                           
 12339                           ;psect for function _scheduler_TaskInit
 12340  2389                     _scheduler_TaskInit:	
 12341                           
 12342                           ;incstack = 0
 12343                           ; Regs used in _scheduler_TaskInit: [wreg+fsr1l+fsr1h+status,2+status,0]
 12344                           ;scheduler_TaskInit@task stored from wreg
 12345  2389  00F1               	movwf	scheduler_TaskInit@task
 12346                           
 12347                           ;cooperative_scheduler.c: 37: task->systemTickLastExecuted = 0;
 12348  238A  0871               	movf	scheduler_TaskInit@task,w
 12349  238B  0086               	movwf	6
 12350  238C  3001               	movlw	1	; select bank2/3
 12351  238D  0087               	movwf	7
 12352  238E  3000               	movlw	0
 12353  238F  3FC0               	movwi [0]fsr1
 12354  2390  3FC1               	movwi [1]fsr1
 12355                           
 12356                           ;cooperative_scheduler.c: 38: task->taskData = (0);
 12357  2391  0871               	movf	scheduler_TaskInit@task,w
 12358  2392  3E02               	addlw	2
 12359  2393  0086               	movwf	6
 12360  2394  3001               	movlw	1	; select bank2/3
 12361  2395  0087               	movwf	7
 12362  2396  3000               	movlw	0
 12363  2397  3FC0               	movwi [0]fsr1
 12364  2398  3FC1               	movwi [1]fsr1
 12365                           
 12366                           ;cooperative_scheduler.c: 39: task->taskInitCallback = (0);
 12367  2399  0871               	movf	scheduler_TaskInit@task,w
 12368  239A  3E04               	addlw	4
 12369  239B  0086               	movwf	6
 12370  239C  3001               	movlw	1	; select bank2/3
 12371  239D  0087               	movwf	7
 12372  239E  3000               	movlw	0
 12373  239F  3FC0               	movwi [0]fsr1
 12374  23A0  3FC1               	movwi [1]fsr1
 12375                           
 12376                           ;cooperative_scheduler.c: 40: task->taskExitCallback = (0);
 12377  23A1  0871               	movf	scheduler_TaskInit@task,w
 12378  23A2  3E06               	addlw	6
 12379  23A3  0086               	movwf	6
 12380  23A4  3001               	movlw	1	; select bank2/3
 12381  23A5  0087               	movwf	7
 12382  23A6  3000               	movlw	0
 12383  23A7  3FC0               	movwi [0]fsr1
 12384  23A8  3FC1               	movwi [1]fsr1
 12385                           
 12386                           ;cooperative_scheduler.c: 41: task->taskExecuteCallback = (0);
 12387  23A9  0871               	movf	scheduler_TaskInit@task,w
 12388  23AA  3E08               	addlw	8
 12389  23AB  0086               	movwf	6
 12390  23AC  3001               	movlw	1	; select bank2/3
 12391  23AD  0087               	movwf	7
 12392  23AE  3000               	movlw	0
 12393  23AF  3FC0               	movwi [0]fsr1
 12394  23B0  3FC1               	movwi [1]fsr1
 12395                           
 12396                           ;cooperative_scheduler.c: 42: task->taskInterval = 65535;
 12397  23B1  0871               	movf	scheduler_TaskInit@task,w
 12398  23B2  3E0A               	addlw	10
 12399  23B3  0086               	movwf	6
 12400  23B4  3001               	movlw	1	; select bank2/3
 12401  23B5  0087               	movwf	7
 12402  23B6  30FF               	movlw	255
 12403  23B7  3FC0               	movwi [0]fsr1
 12404  23B8  30FF               	movlw	255
 12405  23B9  3FC1               	movwi [1]fsr1
 12406                           
 12407                           ;cooperative_scheduler.c: 43: task->taskId = -1;
 12408  23BA  0871               	movf	scheduler_TaskInit@task,w
 12409  23BB  3E0C               	addlw	12
 12410  23BC  0086               	movwf	6
 12411  23BD  3001               	movlw	1	; select bank2/3
 12412  23BE  0087               	movwf	7
 12413  23BF  0181               	clrf	1
 12414  23C0  0381               	decf	1,f
 12415  23C1  0008               	return
 12416  23C2                     __end_of_scheduler_TaskInit:	
 12417                           
 12418                           	psect	text2
 12419  1BAF                     __ptext2:	
 12420 ;; *************** function _scheduler_TaskAdd *****************
 12421 ;; Defined at:
 12422 ;;		line 46 in file "cooperative_scheduler.c"
 12423 ;; Parameters:    Size  Location     Type
 12424 ;;  scheduler       1    wreg     PTR struct t_scheduler
 12425 ;;		 -> schedulerInst(18), 
 12426 ;;  task            1   29[BANK0 ] PTR struct t_schedulerTa
 12427 ;;		 -> secret_task(13), locked_task(13), slot_task(13), menu_task(13), 
 12428 ;;		 -> flashy_task(13), 
 12429 ;; Auto vars:     Size  Location     Type
 12430 ;;  scheduler       1   36[BANK0 ] PTR struct t_scheduler
 12431 ;;		 -> schedulerInst(18), 
 12432 ;;  k               1   37[BANK0 ] unsigned char 
 12433 ;; Return value:  Size  Location     Type
 12434 ;;                  1    wreg      char 
 12435 ;; Registers used:
 12436 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12437 ;; Tracked objects:
 12438 ;;		On entry : 0/0
 12439 ;;		On exit  : 0/0
 12440 ;;		Unchanged: 0/0
 12441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12442 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12443 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12444 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12445 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12446 ;;Total ram usage:        9 bytes
 12447 ;; Hardware stack levels used:    1
 12448 ;; Hardware stack levels required when called:   11
 12449 ;; This function calls:
 12450 ;;		Absolute function
 12451 ;;		_flashy_Init
 12452 ;;		_locked_Init
 12453 ;;		_menu_Init
 12454 ;;		_secret_Init
 12455 ;;		_slot_Init
 12456 ;; This function is called by:
 12457 ;;		_main
 12458 ;; This function uses a non-reentrant model
 12459 ;;
 12460                           
 12461                           
 12462                           ;psect for function _scheduler_TaskAdd
 12463  1BAF                     _scheduler_TaskAdd:	
 12464                           
 12465                           ;incstack = 0
 12466                           ; Regs used in _scheduler_TaskAdd: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12467                           ;scheduler_TaskAdd@scheduler stored from wreg
 12468  1BAF  0020               	movlb	0	; select bank0
 12469  1BB0  00C4               	movwf	scheduler_TaskAdd@scheduler
 12470                           
 12471                           ;cooperative_scheduler.c: 47: u8 k;
 12472                           ;cooperative_scheduler.c: 48: for (k = 0; k < 16; k++) {
 12473  1BB1  01C5               	clrf	scheduler_TaskAdd@k
 12474  1BB2  3010               	movlw	16
 12475  1BB3  0245               	subwf	scheduler_TaskAdd@k,w
 12476  1BB4  1803               	btfsc	3,0
 12477  1BB5  2C21               	goto	l8656
 12478  1BB6                     l8642:	
 12479                           
 12480                           ;cooperative_scheduler.c: 49: if (!(scheduler->taskEntryVector & (1 << k)) ) {
 12481  1BB6  0844               	movf	scheduler_TaskAdd@scheduler,w
 12482  1BB7  3E10               	addlw	16
 12483  1BB8  0086               	movwf	6
 12484  1BB9  3001               	movlw	1	; select bank2/3
 12485  1BBA  0087               	movwf	7
 12486  1BBB  3F40               	moviw [0]fsr1
 12487  1BBC  00BE               	movwf	??_scheduler_TaskAdd
 12488  1BBD  3F41               	moviw [1]fsr1
 12489  1BBE  00BF               	movwf	??_scheduler_TaskAdd+1
 12490  1BBF  3001               	movlw	1
 12491  1BC0  00C0               	movwf	??_scheduler_TaskAdd+2
 12492  1BC1  3000               	movlw	0
 12493  1BC2  00C1               	movwf	??_scheduler_TaskAdd+3
 12494  1BC3  0A45               	incf	scheduler_TaskAdd@k,w
 12495  1BC4  2BC7               	goto	u5554
 12496  1BC5                     u5555:	
 12497  1BC5  35C0               	lslf	??_scheduler_TaskAdd+2,f
 12498  1BC6  0DC1               	rlf	??_scheduler_TaskAdd+3,f
 12499  1BC7                     u5554:	
 12500  1BC7  0B89               	decfsz	9,f
 12501  1BC8  2BC5               	goto	u5555
 12502  1BC9  083E               	movf	??_scheduler_TaskAdd,w
 12503  1BCA  0540               	andwf	??_scheduler_TaskAdd+2,w
 12504  1BCB  00C2               	movwf	??_scheduler_TaskAdd+4
 12505  1BCC  083F               	movf	??_scheduler_TaskAdd+1,w
 12506  1BCD  0541               	andwf	??_scheduler_TaskAdd+3,w
 12507  1BCE  00C3               	movwf	??_scheduler_TaskAdd+5
 12508  1BCF  0842               	movf	??_scheduler_TaskAdd+4,w
 12509  1BD0  0443               	iorwf	??_scheduler_TaskAdd+5,w
 12510  1BD1  1D03               	btfss	3,2
 12511  1BD2  2C19               	goto	l8652
 12512                           
 12513                           ;cooperative_scheduler.c: 50: scheduler->tasks[k] = task;
 12514  1BD3  083D               	movf	scheduler_TaskAdd@task,w
 12515  1BD4  00BE               	movwf	??_scheduler_TaskAdd
 12516  1BD5  0845               	movf	scheduler_TaskAdd@k,w
 12517  1BD6  0744               	addwf	scheduler_TaskAdd@scheduler,w
 12518  1BD7  00BF               	movwf	??_scheduler_TaskAdd+1
 12519  1BD8  083F               	movf	??_scheduler_TaskAdd+1,w
 12520  1BD9  0086               	movwf	6
 12521  1BDA  3001               	movlw	1	; select bank2/3
 12522  1BDB  0087               	movwf	7
 12523  1BDC  083E               	movf	??_scheduler_TaskAdd,w
 12524  1BDD  0081               	movwf	1
 12525                           
 12526                           ;cooperative_scheduler.c: 51: scheduler->taskEntryVector |= (1 << k);
 12527  1BDE  3001               	movlw	1
 12528  1BDF  00BE               	movwf	??_scheduler_TaskAdd
 12529  1BE0  3000               	movlw	0
 12530  1BE1  00BF               	movwf	??_scheduler_TaskAdd+1
 12531  1BE2  0A45               	incf	scheduler_TaskAdd@k,w
 12532  1BE3  2BE6               	goto	u5574
 12533  1BE4                     u5575:	
 12534  1BE4  35BE               	lslf	??_scheduler_TaskAdd,f
 12535  1BE5  0DBF               	rlf	??_scheduler_TaskAdd+1,f
 12536  1BE6                     u5574:	
 12537  1BE6  0B89               	decfsz	9,f
 12538  1BE7  2BE4               	goto	u5575
 12539  1BE8  0844               	movf	scheduler_TaskAdd@scheduler,w
 12540  1BE9  3E10               	addlw	16
 12541  1BEA  0086               	movwf	6
 12542  1BEB  3001               	movlw	1	; select bank2/3
 12543  1BEC  0087               	movwf	7
 12544  1BED  083E               	movf	??_scheduler_TaskAdd,w
 12545  1BEE  0481               	iorwf	1,f
 12546  1BEF  3141               	addfsr 1,1
 12547  1BF0  083F               	movf	??_scheduler_TaskAdd+1,w
 12548  1BF1  0481               	iorwf	1,f
 12549                           
 12550                           ;cooperative_scheduler.c: 53: if (task->taskInitCallback != (0)) {
 12551  1BF2  083D               	movf	scheduler_TaskAdd@task,w
 12552  1BF3  3E04               	addlw	4
 12553  1BF4  0086               	movwf	6
 12554  1BF5  3001               	movlw	1	; select bank2/3
 12555  1BF6  0087               	movwf	7
 12556  1BF7  0016               	moviw fsr1++
 12557  1BF8  0401               	iorwf	1,w
 12558  1BF9  1903               	btfsc	3,2
 12559  1BFA  2C0E               	goto	l8648
 12560                           
 12561                           ;cooperative_scheduler.c: 54: task->taskInitCallback (task->taskData);
 12562  1BFB  083D               	movf	scheduler_TaskAdd@task,w
 12563  1BFC  3E02               	addlw	2
 12564  1BFD  0086               	movwf	6
 12565  1BFE  3001               	movlw	1	; select bank2/3
 12566  1BFF  0087               	movwf	7
 12567  1C00  3F40               	moviw [0]fsr1
 12568  1C01  00B9               	movwf	secret_Init@taskData
 12569  1C02  3F41               	moviw [1]fsr1
 12570  1C03  00BA               	movwf	secret_Init@taskData+1
 12571  1C04  083D               	movf	scheduler_TaskAdd@task,w
 12572  1C05  3E04               	addlw	4
 12573  1C06  0086               	movwf	6
 12574  1C07  3001               	movlw	1	; select bank2/3
 12575  1C08  0087               	movwf	7
 12576  1C09  3F41               	moviw [1]fsr1
 12577  1C0A  008A               	movwf	10
 12578  1C0B  3F40               	moviw [0]fsr1
 12579  1C0C  000A               	callw
 12580  1C0D  319B               	pagesel	$
 12581  1C0E                     l8648:	
 12582                           
 12583                           ;cooperative_scheduler.c: 55: }
 12584                           ;cooperative_scheduler.c: 57: task->taskId = (s8) k;
 12585  1C0E  0020               	movlb	0	; select bank0
 12586  1C0F  0845               	movf	scheduler_TaskAdd@k,w
 12587  1C10  00BE               	movwf	??_scheduler_TaskAdd
 12588  1C11  083D               	movf	scheduler_TaskAdd@task,w
 12589  1C12  3E0C               	addlw	12
 12590  1C13  0086               	movwf	6
 12591  1C14  3001               	movlw	1	; select bank2/3
 12592  1C15  0087               	movwf	7
 12593  1C16  083E               	movf	??_scheduler_TaskAdd,w
 12594  1C17  0081               	movwf	1
 12595                           
 12596                           ;cooperative_scheduler.c: 58: return k;
 12597                           ;	Return value of _scheduler_TaskAdd is never used
 12598  1C18  0008               	return
 12599  1C19                     l8652:	
 12600  1C19  3001               	movlw	1
 12601  1C1A  00BE               	movwf	??_scheduler_TaskAdd
 12602  1C1B  083E               	movf	??_scheduler_TaskAdd,w
 12603  1C1C  07C5               	addwf	scheduler_TaskAdd@k,f
 12604  1C1D  3010               	movlw	16
 12605  1C1E  0245               	subwf	scheduler_TaskAdd@k,w
 12606  1C1F  1C03               	skipc
 12607  1C20  2BB6               	goto	l8642
 12608  1C21                     l8656:	
 12609                           
 12610                           ;cooperative_scheduler.c: 59: }
 12611                           ;cooperative_scheduler.c: 60: }
 12612                           ;cooperative_scheduler.c: 62: task->taskId = -1;
 12613  1C21  083D               	movf	scheduler_TaskAdd@task,w
 12614  1C22  3E0C               	addlw	12
 12615  1C23  0086               	movwf	6
 12616  1C24  3001               	movlw	1	; select bank2/3
 12617  1C25  0087               	movwf	7
 12618  1C26  0181               	clrf	1
 12619  1C27  0381               	decf	1,f
 12620  1C28  0008               	return
 12621  1C29                     __end_of_scheduler_TaskAdd:	
 12622                           ;cooperative_scheduler.c: 63: return -1;
 12623                           ;	Return value of _scheduler_TaskAdd is never used
 12624                           
 12625                           
 12626                           	psect	text3
 12627  180C                     __ptext3:	
 12628 ;; *************** function _secret_Init *****************
 12629 ;; Defined at:
 12630 ;;		line 51 in file "secret_task.c"
 12631 ;; Parameters:    Size  Location     Type
 12632 ;;  taskData        2   25[BANK0 ] PTR void 
 12633 ;;		 -> secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), 
 12634 ;;		 -> flashy_TaskData(30), NULL(0), 
 12635 ;; Auto vars:     Size  Location     Type
 12636 ;;  data            2   27[BANK0 ] PTR struct t_secret_task
 12637 ;;		 -> secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), 
 12638 ;;		 -> flashy_TaskData(30), NULL(0), 
 12639 ;; Return value:  Size  Location     Type
 12640 ;;                  1    wreg      void 
 12641 ;; Registers used:
 12642 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12643 ;; Tracked objects:
 12644 ;;		On entry : 0/0
 12645 ;;		On exit  : 0/0
 12646 ;;		Unchanged: 0/0
 12647 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12648 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12649 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12650 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12651 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12652 ;;Total ram usage:        4 bytes
 12653 ;; Hardware stack levels used:    1
 12654 ;; Hardware stack levels required when called:   10
 12655 ;; This function calls:
 12656 ;;		_nullifyBadge_segDisplayErase
 12657 ;;		_nullifyBadge_segDisplayRegister
 12658 ;;		_nullifyBadge_userLedsClr
 12659 ;;		_nullifyBadge_userLedsRegister
 12660 ;; This function is called by:
 12661 ;;		_main
 12662 ;;		_scheduler_TaskAdd
 12663 ;; This function uses a non-reentrant model
 12664 ;;
 12665                           
 12666                           
 12667                           ;psect for function _secret_Init
 12668  180C                     _secret_Init:	
 12669                           
 12670                           ;secret_task.c: 52: struct t_secret_taskData *data = (struct t_secret_taskData *) taskDa
      +                          ta;
 12671                           
 12672                           ;incstack = 0
 12673                           ; Regs used in _secret_Init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12674  180C  0020               	movlb	0	; select bank0
 12675  180D  083A               	movf	secret_Init@taskData+1,w
 12676  180E  00BC               	movwf	secret_Init@data+1
 12677  180F  0839               	movf	secret_Init@taskData,w
 12678  1810  00BB               	movwf	secret_Init@data
 12679                           
 12680                           ;secret_task.c: 55: nullifyBadge_userLedsRegister(data->badge);
 12681  1811  083B               	movf	secret_Init@data,w
 12682  1812  0086               	movwf	6
 12683  1813  083C               	movf	secret_Init@data+1,w
 12684  1814  0087               	movwf	7
 12685  1815  0801               	movf	1,w
 12686  1816  31A0  2000  3198   	fcall	_nullifyBadge_userLedsRegister
 12687                           
 12688                           ;secret_task.c: 56: nullifyBadge_userLedsClr(data->badge);
 12689  1819  0020               	movlb	0	; select bank0
 12690  181A  083B               	movf	secret_Init@data,w
 12691  181B  0086               	movwf	6
 12692  181C  083C               	movf	secret_Init@data+1,w
 12693  181D  0087               	movwf	7
 12694  181E  0801               	movf	1,w
 12695  181F  31AE  260F  3198   	fcall	_nullifyBadge_userLedsClr
 12696                           
 12697                           ;secret_task.c: 57: nullifyBadge_segDisplayRegister(data->badge);
 12698  1822  0020               	movlb	0	; select bank0
 12699  1823  083B               	movf	secret_Init@data,w
 12700  1824  0086               	movwf	6
 12701  1825  083C               	movf	secret_Init@data+1,w
 12702  1826  0087               	movwf	7
 12703  1827  0801               	movf	1,w
 12704  1828  31AE  261D  3198   	fcall	_nullifyBadge_segDisplayRegister
 12705                           
 12706                           ;secret_task.c: 58: nullifyBadge_segDisplayErase(data->badge);
 12707  182B  0020               	movlb	0	; select bank0
 12708  182C  083B               	movf	secret_Init@data,w
 12709  182D  0086               	movwf	6
 12710  182E  083C               	movf	secret_Init@data+1,w
 12711  182F  0087               	movwf	7
 12712  1830  0801               	movf	1,w
 12713  1831  31AE  2609  3198   	fcall	_nullifyBadge_segDisplayErase
 12714                           
 12715                           ;secret_task.c: 61: data->delayTickCount = 300;
 12716  1834  0020               	movlb	0	; select bank0
 12717  1835  083B               	movf	secret_Init@data,w
 12718  1836  0086               	movwf	6
 12719  1837  083C               	movf	secret_Init@data+1,w
 12720  1838  0087               	movwf	7
 12721  1839  3142               	addfsr 1,2
 12722  183A  302C               	movlw	44
 12723  183B  3FC0               	movwi [0]fsr1
 12724  183C  3001               	movlw	1
 12725  183D  3FC1               	movwi [1]fsr1
 12726                           
 12727                           ;secret_task.c: 62: data->holdCountA = 0;
 12728  183E  083B               	movf	secret_Init@data,w
 12729  183F  0086               	movwf	6
 12730  1840  083C               	movf	secret_Init@data+1,w
 12731  1841  0087               	movwf	7
 12732  1842  3144               	addfsr 1,4
 12733  1843  3000               	movlw	0
 12734  1844  3FC0               	movwi [0]fsr1
 12735  1845  3FC1               	movwi [1]fsr1
 12736                           
 12737                           ;secret_task.c: 63: data->holdCountB = 0;
 12738  1846  083B               	movf	secret_Init@data,w
 12739  1847  0086               	movwf	6
 12740  1848  083C               	movf	secret_Init@data+1,w
 12741  1849  0087               	movwf	7
 12742  184A  3146               	addfsr 1,6
 12743  184B  3000               	movlw	0
 12744  184C  3FC0               	movwi [0]fsr1
 12745  184D  3FC1               	movwi [1]fsr1
 12746                           
 12747                           ;secret_task.c: 64: data->holdCountX = 0;
 12748  184E  083B               	movf	secret_Init@data,w
 12749  184F  0086               	movwf	6
 12750  1850  083C               	movf	secret_Init@data+1,w
 12751  1851  0087               	movwf	7
 12752  1852  3148               	addfsr 1,8
 12753  1853  3000               	movlw	0
 12754  1854  3FC0               	movwi [0]fsr1
 12755  1855  3FC1               	movwi [1]fsr1
 12756                           
 12757                           ;secret_task.c: 65: data->holdCountY = 0;
 12758  1856  083B               	movf	secret_Init@data,w
 12759  1857  0086               	movwf	6
 12760  1858  083C               	movf	secret_Init@data+1,w
 12761  1859  0087               	movwf	7
 12762  185A  314A               	addfsr 1,10
 12763  185B  3000               	movlw	0
 12764  185C  3FC0               	movwi [0]fsr1
 12765  185D  3FC1               	movwi [1]fsr1
 12766                           
 12767                           ;secret_task.c: 66: data->noholdCount = 0;
 12768  185E  083B               	movf	secret_Init@data,w
 12769  185F  0086               	movwf	6
 12770  1860  083C               	movf	secret_Init@data+1,w
 12771  1861  0087               	movwf	7
 12772  1862  314C               	addfsr 1,12
 12773  1863  3000               	movlw	0
 12774  1864  3FC0               	movwi [0]fsr1
 12775  1865  3FC1               	movwi [1]fsr1
 12776  1866  0008               	return
 12777  1867                     __end_of_secret_Init:	
 12778                           
 12779                           	psect	text4
 12780  192B                     __ptext4:	
 12781 ;; *************** function _locked_Init *****************
 12782 ;; Defined at:
 12783 ;;		line 65 in file "locked_task.c"
 12784 ;; Parameters:    Size  Location     Type
 12785 ;;  taskData        2   25[BANK0 ] PTR void 
 12786 ;;		 -> secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), 
 12787 ;;		 -> flashy_TaskData(30), NULL(0), 
 12788 ;; Auto vars:     Size  Location     Type
 12789 ;;  data            2   27[BANK0 ] PTR struct t_locked_task
 12790 ;;		 -> secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), 
 12791 ;;		 -> flashy_TaskData(30), NULL(0), 
 12792 ;; Return value:  Size  Location     Type
 12793 ;;                  1    wreg      void 
 12794 ;; Registers used:
 12795 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12796 ;; Tracked objects:
 12797 ;;		On entry : 0/0
 12798 ;;		On exit  : 0/0
 12799 ;;		Unchanged: 0/0
 12800 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12801 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12802 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12803 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12804 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12805 ;;Total ram usage:        4 bytes
 12806 ;; Hardware stack levels used:    1
 12807 ;; Hardware stack levels required when called:   10
 12808 ;; This function calls:
 12809 ;;		_locked_lock_leds
 12810 ;;		_nullifyBadge_segDisplayErase
 12811 ;;		_nullifyBadge_segDisplayRegister
 12812 ;;		_nullifyBadge_userLedsClr
 12813 ;;		_nullifyBadge_userLedsRegister
 12814 ;; This function is called by:
 12815 ;;		_main
 12816 ;;		_scheduler_TaskAdd
 12817 ;; This function uses a non-reentrant model
 12818 ;;
 12819                           
 12820                           
 12821                           ;psect for function _locked_Init
 12822  192B                     _locked_Init:	
 12823                           
 12824                           ;locked_task.c: 66: struct t_locked_taskData *data = (struct t_locked_taskData *) taskDa
      +                          ta;
 12825                           
 12826                           ;incstack = 0
 12827                           ; Regs used in _locked_Init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12828  192B  0020               	movlb	0	; select bank0
 12829  192C  083A               	movf	locked_Init@taskData+1,w
 12830  192D  00BC               	movwf	locked_Init@data+1
 12831  192E  0839               	movf	locked_Init@taskData,w
 12832  192F  00BB               	movwf	locked_Init@data
 12833                           
 12834                           ;locked_task.c: 69: nullifyBadge_userLedsRegister(data->badge);
 12835  1930  083B               	movf	locked_Init@data,w
 12836  1931  0086               	movwf	6
 12837  1932  083C               	movf	locked_Init@data+1,w
 12838  1933  0087               	movwf	7
 12839  1934  0801               	movf	1,w
 12840  1935  31A0  2000  3199   	fcall	_nullifyBadge_userLedsRegister
 12841                           
 12842                           ;locked_task.c: 70: nullifyBadge_userLedsClr(data->badge);
 12843  1938  0020               	movlb	0	; select bank0
 12844  1939  083B               	movf	locked_Init@data,w
 12845  193A  0086               	movwf	6
 12846  193B  083C               	movf	locked_Init@data+1,w
 12847  193C  0087               	movwf	7
 12848  193D  0801               	movf	1,w
 12849  193E  31AE  260F  3199   	fcall	_nullifyBadge_userLedsClr
 12850                           
 12851                           ;locked_task.c: 71: nullifyBadge_segDisplayRegister(data->badge);
 12852  1941  0020               	movlb	0	; select bank0
 12853  1942  083B               	movf	locked_Init@data,w
 12854  1943  0086               	movwf	6
 12855  1944  083C               	movf	locked_Init@data+1,w
 12856  1945  0087               	movwf	7
 12857  1946  0801               	movf	1,w
 12858  1947  31AE  261D  3199   	fcall	_nullifyBadge_segDisplayRegister
 12859                           
 12860                           ;locked_task.c: 72: nullifyBadge_segDisplayErase(data->badge);
 12861  194A  0020               	movlb	0	; select bank0
 12862  194B  083B               	movf	locked_Init@data,w
 12863  194C  0086               	movwf	6
 12864  194D  083C               	movf	locked_Init@data+1,w
 12865  194E  0087               	movwf	7
 12866  194F  0801               	movf	1,w
 12867  1950  31AE  2609  3199   	fcall	_nullifyBadge_segDisplayErase
 12868                           
 12869                           ;locked_task.c: 75: locked_lock_leds();
 12870  1953  31A0  202A  3199   	fcall	_locked_lock_leds
 12871                           
 12872                           ;locked_task.c: 76: data->state = LOCKED_LOCKED_STATE;
 12873  1956  0020               	movlb	0	; select bank0
 12874  1957  083B               	movf	locked_Init@data,w
 12875  1958  0086               	movwf	6
 12876  1959  083C               	movf	locked_Init@data+1,w
 12877  195A  0087               	movwf	7
 12878  195B  314D               	addfsr 1,13
 12879  195C  0181               	clrf	1
 12880                           
 12881                           ;locked_task.c: 77: data->delayTickCount = 0;
 12882  195D  083B               	movf	locked_Init@data,w
 12883  195E  0086               	movwf	6
 12884  195F  083C               	movf	locked_Init@data+1,w
 12885  1960  0087               	movwf	7
 12886  1961  3141               	addfsr 1,1
 12887  1962  3000               	movlw	0
 12888  1963  3FC0               	movwi [0]fsr1
 12889  1964  3FC1               	movwi [1]fsr1
 12890                           
 12891                           ;locked_task.c: 78: data->holdCountA = 0;
 12892  1965  083B               	movf	locked_Init@data,w
 12893  1966  0086               	movwf	6
 12894  1967  083C               	movf	locked_Init@data+1,w
 12895  1968  0087               	movwf	7
 12896  1969  3143               	addfsr 1,3
 12897  196A  3000               	movlw	0
 12898  196B  3FC0               	movwi [0]fsr1
 12899  196C  3FC1               	movwi [1]fsr1
 12900                           
 12901                           ;locked_task.c: 79: data->holdCountB = 0;
 12902  196D  083B               	movf	locked_Init@data,w
 12903  196E  0086               	movwf	6
 12904  196F  083C               	movf	locked_Init@data+1,w
 12905  1970  0087               	movwf	7
 12906  1971  3145               	addfsr 1,5
 12907  1972  3000               	movlw	0
 12908  1973  3FC0               	movwi [0]fsr1
 12909  1974  3FC1               	movwi [1]fsr1
 12910                           
 12911                           ;locked_task.c: 80: data->holdCountX = 0;
 12912  1975  083B               	movf	locked_Init@data,w
 12913  1976  0086               	movwf	6
 12914  1977  083C               	movf	locked_Init@data+1,w
 12915  1978  0087               	movwf	7
 12916  1979  3147               	addfsr 1,7
 12917  197A  3000               	movlw	0
 12918  197B  3FC0               	movwi [0]fsr1
 12919  197C  3FC1               	movwi [1]fsr1
 12920                           
 12921                           ;locked_task.c: 81: data->holdCountY = 0;
 12922  197D  083B               	movf	locked_Init@data,w
 12923  197E  0086               	movwf	6
 12924  197F  083C               	movf	locked_Init@data+1,w
 12925  1980  0087               	movwf	7
 12926  1981  3149               	addfsr 1,9
 12927  1982  3000               	movlw	0
 12928  1983  3FC0               	movwi [0]fsr1
 12929  1984  3FC1               	movwi [1]fsr1
 12930                           
 12931                           ;locked_task.c: 82: data->noholdCount = 0;
 12932  1985  083B               	movf	locked_Init@data,w
 12933  1986  0086               	movwf	6
 12934  1987  083C               	movf	locked_Init@data+1,w
 12935  1988  0087               	movwf	7
 12936  1989  314B               	addfsr 1,11
 12937  198A  3000               	movlw	0
 12938  198B  3FC0               	movwi [0]fsr1
 12939  198C  3FC1               	movwi [1]fsr1
 12940  198D  0008               	return
 12941  198E                     __end_of_locked_Init:	
 12942                           
 12943                           	psect	text5
 12944  18C9                     __ptext5:	
 12945 ;; *************** function _menu_Init *****************
 12946 ;; Defined at:
 12947 ;;		line 33 in file "menu_task.c"
 12948 ;; Parameters:    Size  Location     Type
 12949 ;;  taskData        2   25[BANK0 ] PTR void 
 12950 ;;		 -> secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), 
 12951 ;;		 -> flashy_TaskData(30), NULL(0), 
 12952 ;; Auto vars:     Size  Location     Type
 12953 ;;  data            2   27[BANK0 ] PTR struct t_menu_taskDa
 12954 ;;		 -> secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), 
 12955 ;;		 -> flashy_TaskData(30), NULL(0), 
 12956 ;; Return value:  Size  Location     Type
 12957 ;;                  1    wreg      void 
 12958 ;; Registers used:
 12959 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12960 ;; Tracked objects:
 12961 ;;		On entry : 0/0
 12962 ;;		On exit  : 0/0
 12963 ;;		Unchanged: 0/0
 12964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12965 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12966 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12967 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12968 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12969 ;;Total ram usage:        4 bytes
 12970 ;; Hardware stack levels used:    1
 12971 ;; Hardware stack levels required when called:   10
 12972 ;; This function calls:
 12973 ;;		_nullifyBadge_segDisplayErase
 12974 ;;		_nullifyBadge_segDisplayRegister
 12975 ;;		_nullifyBadge_userLedsClr
 12976 ;;		_nullifyBadge_userLedsRegister
 12977 ;; This function is called by:
 12978 ;;		_main
 12979 ;;		_scheduler_TaskAdd
 12980 ;; This function uses a non-reentrant model
 12981 ;;
 12982                           
 12983                           
 12984                           ;psect for function _menu_Init
 12985  18C9                     _menu_Init:	
 12986                           
 12987                           ;menu_task.c: 34: struct t_menu_taskData *data = (struct t_menu_taskData *) taskData;
 12988                           
 12989                           ;incstack = 0
 12990                           ; Regs used in _menu_Init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12991  18C9  0020               	movlb	0	; select bank0
 12992  18CA  083A               	movf	menu_Init@taskData+1,w
 12993  18CB  00BC               	movwf	menu_Init@data+1
 12994  18CC  0839               	movf	menu_Init@taskData,w
 12995  18CD  00BB               	movwf	menu_Init@data
 12996                           
 12997                           ;menu_task.c: 37: nullifyBadge_userLedsRegister(data->badge);
 12998  18CE  083B               	movf	menu_Init@data,w
 12999  18CF  0086               	movwf	6
 13000  18D0  083C               	movf	menu_Init@data+1,w
 13001  18D1  0087               	movwf	7
 13002  18D2  0801               	movf	1,w
 13003  18D3  31A0  2000  3198   	fcall	_nullifyBadge_userLedsRegister
 13004                           
 13005                           ;menu_task.c: 38: nullifyBadge_userLedsClr(data->badge);
 13006  18D6  0020               	movlb	0	; select bank0
 13007  18D7  083B               	movf	menu_Init@data,w
 13008  18D8  0086               	movwf	6
 13009  18D9  083C               	movf	menu_Init@data+1,w
 13010  18DA  0087               	movwf	7
 13011  18DB  0801               	movf	1,w
 13012  18DC  31AE  260F  3198   	fcall	_nullifyBadge_userLedsClr
 13013                           
 13014                           ;menu_task.c: 39: nullifyBadge_segDisplayRegister(data->badge);
 13015  18DF  0020               	movlb	0	; select bank0
 13016  18E0  083B               	movf	menu_Init@data,w
 13017  18E1  0086               	movwf	6
 13018  18E2  083C               	movf	menu_Init@data+1,w
 13019  18E3  0087               	movwf	7
 13020  18E4  0801               	movf	1,w
 13021  18E5  31AE  261D  3198   	fcall	_nullifyBadge_segDisplayRegister
 13022                           
 13023                           ;menu_task.c: 40: nullifyBadge_segDisplayErase(data->badge);
 13024  18E8  0020               	movlb	0	; select bank0
 13025  18E9  083B               	movf	menu_Init@data,w
 13026  18EA  0086               	movwf	6
 13027  18EB  083C               	movf	menu_Init@data+1,w
 13028  18EC  0087               	movwf	7
 13029  18ED  0801               	movf	1,w
 13030  18EE  31AE  2609  3198   	fcall	_nullifyBadge_segDisplayErase
 13031                           
 13032                           ;menu_task.c: 43: data->delayTickCount = 50;
 13033  18F1  0020               	movlb	0	; select bank0
 13034  18F2  083B               	movf	menu_Init@data,w
 13035  18F3  0086               	movwf	6
 13036  18F4  083C               	movf	menu_Init@data+1,w
 13037  18F5  0087               	movwf	7
 13038  18F6  3142               	addfsr 1,2
 13039  18F7  3032               	movlw	50
 13040  18F8  3FC0               	movwi [0]fsr1
 13041  18F9  3000               	movlw	0
 13042  18FA  3FC1               	movwi [1]fsr1
 13043                           
 13044                           ;menu_task.c: 44: data->holdCountA = 0;
 13045  18FB  083B               	movf	menu_Init@data,w
 13046  18FC  0086               	movwf	6
 13047  18FD  083C               	movf	menu_Init@data+1,w
 13048  18FE  0087               	movwf	7
 13049  18FF  3144               	addfsr 1,4
 13050  1900  3000               	movlw	0
 13051  1901  3FC0               	movwi [0]fsr1
 13052  1902  3FC1               	movwi [1]fsr1
 13053                           
 13054                           ;menu_task.c: 45: data->holdCountB = 0;
 13055  1903  083B               	movf	menu_Init@data,w
 13056  1904  0086               	movwf	6
 13057  1905  083C               	movf	menu_Init@data+1,w
 13058  1906  0087               	movwf	7
 13059  1907  3146               	addfsr 1,6
 13060  1908  3000               	movlw	0
 13061  1909  3FC0               	movwi [0]fsr1
 13062  190A  3FC1               	movwi [1]fsr1
 13063                           
 13064                           ;menu_task.c: 46: data->holdCountX = 0;
 13065  190B  083B               	movf	menu_Init@data,w
 13066  190C  0086               	movwf	6
 13067  190D  083C               	movf	menu_Init@data+1,w
 13068  190E  0087               	movwf	7
 13069  190F  3148               	addfsr 1,8
 13070  1910  3000               	movlw	0
 13071  1911  3FC0               	movwi [0]fsr1
 13072  1912  3FC1               	movwi [1]fsr1
 13073                           
 13074                           ;menu_task.c: 47: data->holdCountY = 0;
 13075  1913  083B               	movf	menu_Init@data,w
 13076  1914  0086               	movwf	6
 13077  1915  083C               	movf	menu_Init@data+1,w
 13078  1916  0087               	movwf	7
 13079  1917  314A               	addfsr 1,10
 13080  1918  3000               	movlw	0
 13081  1919  3FC0               	movwi [0]fsr1
 13082  191A  3FC1               	movwi [1]fsr1
 13083                           
 13084                           ;menu_task.c: 48: data->noholdCount = 0;
 13085  191B  083B               	movf	menu_Init@data,w
 13086  191C  0086               	movwf	6
 13087  191D  083C               	movf	menu_Init@data+1,w
 13088  191E  0087               	movwf	7
 13089  191F  314C               	addfsr 1,12
 13090  1920  3000               	movlw	0
 13091  1921  3FC0               	movwi [0]fsr1
 13092  1922  3FC1               	movwi [1]fsr1
 13093                           
 13094                           ;menu_task.c: 50: menu_option_idx = 0;
 13095  1923  0021               	movlb	1	; select bank1
 13096  1924  01B4               	clrf	_menu_option_idx^(0+128)
 13097  1925  01B5               	clrf	(_menu_option_idx+1)^(0+128)
 13098                           
 13099                           ;menu_task.c: 52: menu_option_size = sizeof(menu_option)/sizeof(menu_option[0]);
 13100  1926  3004               	movlw	4
 13101  1927  00B2               	movwf	_menu_option_size^(0+128)
 13102  1928  3000               	movlw	0
 13103  1929  00B3               	movwf	(_menu_option_size^(0+128)+1)
 13104  192A  0008               	return
 13105  192B                     __end_of_menu_Init:	
 13106                           
 13107                           	psect	text6
 13108  0749                     __ptext6:	
 13109 ;; *************** function _flashy_Init *****************
 13110 ;; Defined at:
 13111 ;;		line 50 in file "flashy_task.c"
 13112 ;; Parameters:    Size  Location     Type
 13113 ;;  taskData        2   25[BANK0 ] PTR void 
 13114 ;;		 -> secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), 
 13115 ;;		 -> flashy_TaskData(30), NULL(0), 
 13116 ;; Auto vars:     Size  Location     Type
 13117 ;;  data            2   27[BANK0 ] PTR struct t_flashy_task
 13118 ;;		 -> secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), 
 13119 ;;		 -> flashy_TaskData(30), NULL(0), 
 13120 ;; Return value:  Size  Location     Type
 13121 ;;                  1    wreg      void 
 13122 ;; Registers used:
 13123 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13124 ;; Tracked objects:
 13125 ;;		On entry : 0/0
 13126 ;;		On exit  : 0/0
 13127 ;;		Unchanged: 0/0
 13128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13129 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13130 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13131 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13132 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13133 ;;Total ram usage:        4 bytes
 13134 ;; Hardware stack levels used:    1
 13135 ;; Hardware stack levels required when called:   10
 13136 ;; This function calls:
 13137 ;;		_nullifyBadge_segDisplayErase
 13138 ;;		_nullifyBadge_segDisplayRegister
 13139 ;;		_nullifyBadge_userLedsClr
 13140 ;;		_nullifyBadge_userLedsRegister
 13141 ;; This function is called by:
 13142 ;;		_main
 13143 ;;		_scheduler_TaskAdd
 13144 ;; This function uses a non-reentrant model
 13145 ;;
 13146                           
 13147                           
 13148                           ;psect for function _flashy_Init
 13149  0749                     _flashy_Init:	
 13150                           
 13151                           ;flashy_task.c: 51: struct t_flashy_taskData *data = (struct t_flashy_taskData *) taskDa
      +                          ta;
 13152                           
 13153                           ;incstack = 0
 13154                           ; Regs used in _flashy_Init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13155  0749  0020               	movlb	0	; select bank0
 13156  074A  083A               	movf	flashy_Init@taskData+1,w
 13157  074B  00BC               	movwf	flashy_Init@data+1
 13158  074C  0839               	movf	flashy_Init@taskData,w
 13159  074D  00BB               	movwf	flashy_Init@data
 13160                           
 13161                           ;flashy_task.c: 54: nullifyBadge_userLedsRegister(data->badge);
 13162  074E  083B               	movf	flashy_Init@data,w
 13163  074F  0086               	movwf	6
 13164  0750  083C               	movf	flashy_Init@data+1,w
 13165  0751  0087               	movwf	7
 13166  0752  0801               	movf	1,w
 13167  0753  31A0  2000  3187   	fcall	_nullifyBadge_userLedsRegister
 13168                           
 13169                           ;flashy_task.c: 55: nullifyBadge_userLedsClr(data->badge);
 13170  0756  0020               	movlb	0	; select bank0
 13171  0757  083B               	movf	flashy_Init@data,w
 13172  0758  0086               	movwf	6
 13173  0759  083C               	movf	flashy_Init@data+1,w
 13174  075A  0087               	movwf	7
 13175  075B  0801               	movf	1,w
 13176  075C  31AE  260F  3187   	fcall	_nullifyBadge_userLedsClr
 13177                           
 13178                           ;flashy_task.c: 56: nullifyBadge_segDisplayRegister(data->badge);
 13179  075F  0020               	movlb	0	; select bank0
 13180  0760  083B               	movf	flashy_Init@data,w
 13181  0761  0086               	movwf	6
 13182  0762  083C               	movf	flashy_Init@data+1,w
 13183  0763  0087               	movwf	7
 13184  0764  0801               	movf	1,w
 13185  0765  31AE  261D  3187   	fcall	_nullifyBadge_segDisplayRegister
 13186                           
 13187                           ;flashy_task.c: 57: nullifyBadge_segDisplayErase(data->badge);
 13188  0768  0020               	movlb	0	; select bank0
 13189  0769  083B               	movf	flashy_Init@data,w
 13190  076A  0086               	movwf	6
 13191  076B  083C               	movf	flashy_Init@data+1,w
 13192  076C  0087               	movwf	7
 13193  076D  0801               	movf	1,w
 13194  076E  31AE  2609  3187   	fcall	_nullifyBadge_segDisplayErase
 13195                           
 13196                           ;flashy_task.c: 63: data->delayTickCount = 35;
 13197  0771  0020               	movlb	0	; select bank0
 13198  0772  083B               	movf	flashy_Init@data,w
 13199  0773  0086               	movwf	6
 13200  0774  083C               	movf	flashy_Init@data+1,w
 13201  0775  0087               	movwf	7
 13202  0776  3141               	addfsr 1,1
 13203  0777  3023               	movlw	35
 13204  0778  3FC0               	movwi [0]fsr1
 13205  0779  3000               	movlw	0
 13206  077A  3FC1               	movwi [1]fsr1
 13207                           
 13208                           ;flashy_task.c: 64: data->displayTickCount = 0;
 13209  077B  083B               	movf	flashy_Init@data,w
 13210  077C  0086               	movwf	6
 13211  077D  083C               	movf	flashy_Init@data+1,w
 13212  077E  0087               	movwf	7
 13213  077F  3144               	addfsr 1,4
 13214  0780  3000               	movlw	0
 13215  0781  3FC0               	movwi [0]fsr1
 13216  0782  3FC1               	movwi [1]fsr1
 13217                           
 13218                           ;flashy_task.c: 67: data->holdCountA = 0;
 13219  0783  083B               	movf	flashy_Init@data,w
 13220  0784  0086               	movwf	6
 13221  0785  083C               	movf	flashy_Init@data+1,w
 13222  0786  0087               	movwf	7
 13223  0787  314A               	addfsr 1,10
 13224  0788  3000               	movlw	0
 13225  0789  3FC0               	movwi [0]fsr1
 13226  078A  3FC1               	movwi [1]fsr1
 13227                           
 13228                           ;flashy_task.c: 68: data->holdCountB = 0;
 13229  078B  083B               	movf	flashy_Init@data,w
 13230  078C  0086               	movwf	6
 13231  078D  083C               	movf	flashy_Init@data+1,w
 13232  078E  0087               	movwf	7
 13233  078F  314C               	addfsr 1,12
 13234  0790  3000               	movlw	0
 13235  0791  3FC0               	movwi [0]fsr1
 13236  0792  3FC1               	movwi [1]fsr1
 13237                           
 13238                           ;flashy_task.c: 69: data->holdCountX = 0;
 13239  0793  083B               	movf	flashy_Init@data,w
 13240  0794  0086               	movwf	6
 13241  0795  083C               	movf	flashy_Init@data+1,w
 13242  0796  0087               	movwf	7
 13243  0797  314E               	addfsr 1,14
 13244  0798  3000               	movlw	0
 13245  0799  3FC0               	movwi [0]fsr1
 13246  079A  3FC1               	movwi [1]fsr1
 13247                           
 13248                           ;flashy_task.c: 70: data->holdCountY = 0;
 13249  079B  083B               	movf	flashy_Init@data,w
 13250  079C  0086               	movwf	6
 13251  079D  083C               	movf	flashy_Init@data+1,w
 13252  079E  0087               	movwf	7
 13253  079F  3150               	addfsr 1,16
 13254  07A0  3000               	movlw	0
 13255  07A1  3FC0               	movwi [0]fsr1
 13256  07A2  3FC1               	movwi [1]fsr1
 13257                           
 13258                           ;flashy_task.c: 71: data->holdCountXY = 0;
 13259  07A3  083B               	movf	flashy_Init@data,w
 13260  07A4  0086               	movwf	6
 13261  07A5  083C               	movf	flashy_Init@data+1,w
 13262  07A6  0087               	movwf	7
 13263  07A7  3152               	addfsr 1,18
 13264  07A8  3000               	movlw	0
 13265  07A9  3FC0               	movwi [0]fsr1
 13266  07AA  3FC1               	movwi [1]fsr1
 13267                           
 13268                           ;flashy_task.c: 72: data->holdCountAY = 0;
 13269  07AB  083B               	movf	flashy_Init@data,w
 13270  07AC  0086               	movwf	6
 13271  07AD  083C               	movf	flashy_Init@data+1,w
 13272  07AE  0087               	movwf	7
 13273  07AF  3154               	addfsr 1,20
 13274  07B0  3000               	movlw	0
 13275  07B1  3FC0               	movwi [0]fsr1
 13276  07B2  3FC1               	movwi [1]fsr1
 13277                           
 13278                           ;flashy_task.c: 73: data->holdCountAX = 0;
 13279  07B3  083B               	movf	flashy_Init@data,w
 13280  07B4  0086               	movwf	6
 13281  07B5  083C               	movf	flashy_Init@data+1,w
 13282  07B6  0087               	movwf	7
 13283  07B7  3156               	addfsr 1,22
 13284  07B8  3000               	movlw	0
 13285  07B9  3FC0               	movwi [0]fsr1
 13286  07BA  3FC1               	movwi [1]fsr1
 13287                           
 13288                           ;flashy_task.c: 74: data->noholdCount = 0;
 13289  07BB  083B               	movf	flashy_Init@data,w
 13290  07BC  0086               	movwf	6
 13291  07BD  083C               	movf	flashy_Init@data+1,w
 13292  07BE  0087               	movwf	7
 13293  07BF  315C               	addfsr 1,28
 13294  07C0  3000               	movlw	0
 13295  07C1  3FC0               	movwi [0]fsr1
 13296  07C2  3FC1               	movwi [1]fsr1
 13297                           
 13298                           ;flashy_task.c: 76: flashy_leds_idx = 0;
 13299  07C3  0021               	movlb	1	; select bank1
 13300  07C4  01B0               	clrf	_flashy_leds_idx^(0+128)
 13301  07C5  01B1               	clrf	(_flashy_leds_idx+1)^(0+128)
 13302                           
 13303                           ;flashy_task.c: 77: data->led_state = FLASHY_STATE_LED_ROUNDABOUT;
 13304  07C6  0020               	movlb	0	; select bank0
 13305  07C7  083B               	movf	flashy_Init@data,w
 13306  07C8  0086               	movwf	6
 13307  07C9  083C               	movf	flashy_Init@data+1,w
 13308  07CA  0087               	movwf	7
 13309  07CB  3143               	addfsr 1,3
 13310  07CC  0181               	clrf	1
 13311                           
 13312                           ;flashy_task.c: 78: flashy_option_idx = 0;
 13313  07CD  0021               	movlb	1	; select bank1
 13314  07CE  01A6               	clrf	_flashy_option_idx^(0+128)
 13315  07CF  01A7               	clrf	(_flashy_option_idx+1)^(0+128)
 13316                           
 13317                           ;flashy_task.c: 80: flashy_option_size = sizeof(flashy_option)/sizeof(flashy_option[0]);
 13318  07D0  300E               	movlw	14
 13319  07D1  00A4               	movwf	_flashy_option_size^(0+128)
 13320  07D2  3000               	movlw	0
 13321  07D3  00A5               	movwf	(_flashy_option_size^(0+128)+1)
 13322                           
 13323                           ;flashy_task.c: 82: flashy_sparkle_rate =50;
 13324  07D4  3032               	movlw	50
 13325  07D5  00AC               	movwf	_flashy_sparkle_rate^(0+128)
 13326  07D6  3000               	movlw	0
 13327  07D7  00AD               	movwf	(_flashy_sparkle_rate^(0+128)+1)
 13328                           
 13329                           ;flashy_task.c: 83: flashy_scroll_rate=50;
 13330  07D8  3032               	movlw	50
 13331  07D9  00AA               	movwf	_flashy_scroll_rate^(0+128)
 13332  07DA  3000               	movlw	0
 13333  07DB  00AB               	movwf	(_flashy_scroll_rate^(0+128)+1)
 13334                           
 13335                           ;flashy_task.c: 84: flashy_leds_state_track =0;
 13336  07DC  01AE               	clrf	_flashy_leds_state_track^(0+128)
 13337  07DD  01AF               	clrf	(_flashy_leds_state_track+1)^(0+128)
 13338  07DE  0008               	return
 13339  07DF                     __end_of_flashy_Init:	
 13340                           
 13341                           	psect	text7
 13342  198E                     __ptext7:	
 13343 ;; *************** function _slot_Init *****************
 13344 ;; Defined at:
 13345 ;;		line 29 in file "slot_task.c"
 13346 ;; Parameters:    Size  Location     Type
 13347 ;;  taskData        2   25[BANK0 ] PTR void 
 13348 ;;		 -> secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), 
 13349 ;;		 -> flashy_TaskData(30), NULL(0), 
 13350 ;; Auto vars:     Size  Location     Type
 13351 ;;  data            2   27[BANK0 ] PTR struct t_slot_taskDa
 13352 ;;		 -> secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), 
 13353 ;;		 -> flashy_TaskData(30), NULL(0), 
 13354 ;; Return value:  Size  Location     Type
 13355 ;;                  1    wreg      void 
 13356 ;; Registers used:
 13357 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13358 ;; Tracked objects:
 13359 ;;		On entry : 0/0
 13360 ;;		On exit  : 0/0
 13361 ;;		Unchanged: 0/0
 13362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13363 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13364 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13365 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13366 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13367 ;;Total ram usage:        4 bytes
 13368 ;; Hardware stack levels used:    1
 13369 ;; Hardware stack levels required when called:   10
 13370 ;; This function calls:
 13371 ;;		_nullifyBadge_segDisplayErase
 13372 ;;		_nullifyBadge_segDisplayRegister
 13373 ;;		_nullifyBadge_userLedsClr
 13374 ;;		_nullifyBadge_userLedsRegister
 13375 ;;		_slot_Setup
 13376 ;; This function is called by:
 13377 ;;		_main
 13378 ;;		_scheduler_TaskAdd
 13379 ;; This function uses a non-reentrant model
 13380 ;;
 13381                           
 13382                           
 13383                           ;psect for function _slot_Init
 13384  198E                     _slot_Init:	
 13385                           
 13386                           ;slot_task.c: 30: struct t_slot_taskData *data = (struct t_slot_taskData *) taskData;
 13387                           
 13388                           ;incstack = 0
 13389                           ; Regs used in _slot_Init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13390  198E  0020               	movlb	0	; select bank0
 13391  198F  083A               	movf	slot_Init@taskData+1,w
 13392  1990  00BC               	movwf	slot_Init@data+1
 13393  1991  0839               	movf	slot_Init@taskData,w
 13394  1992  00BB               	movwf	slot_Init@data
 13395                           
 13396                           ;slot_task.c: 33: nullifyBadge_userLedsRegister(data->badge);
 13397  1993  083B               	movf	slot_Init@data,w
 13398  1994  0086               	movwf	6
 13399  1995  083C               	movf	slot_Init@data+1,w
 13400  1996  0087               	movwf	7
 13401  1997  0801               	movf	1,w
 13402  1998  31A0  2000  3199   	fcall	_nullifyBadge_userLedsRegister
 13403                           
 13404                           ;slot_task.c: 34: nullifyBadge_userLedsClr(data->badge);
 13405  199B  0020               	movlb	0	; select bank0
 13406  199C  083B               	movf	slot_Init@data,w
 13407  199D  0086               	movwf	6
 13408  199E  083C               	movf	slot_Init@data+1,w
 13409  199F  0087               	movwf	7
 13410  19A0  0801               	movf	1,w
 13411  19A1  31AE  260F  3199   	fcall	_nullifyBadge_userLedsClr
 13412                           
 13413                           ;slot_task.c: 35: nullifyBadge_segDisplayRegister(data->badge);
 13414  19A4  0020               	movlb	0	; select bank0
 13415  19A5  083B               	movf	slot_Init@data,w
 13416  19A6  0086               	movwf	6
 13417  19A7  083C               	movf	slot_Init@data+1,w
 13418  19A8  0087               	movwf	7
 13419  19A9  0801               	movf	1,w
 13420  19AA  31AE  261D  3199   	fcall	_nullifyBadge_segDisplayRegister
 13421                           
 13422                           ;slot_task.c: 36: nullifyBadge_segDisplayErase(data->badge);
 13423  19AD  0020               	movlb	0	; select bank0
 13424  19AE  083B               	movf	slot_Init@data,w
 13425  19AF  0086               	movwf	6
 13426  19B0  083C               	movf	slot_Init@data+1,w
 13427  19B1  0087               	movwf	7
 13428  19B2  0801               	movf	1,w
 13429  19B3  31AE  2609  3199   	fcall	_nullifyBadge_segDisplayErase
 13430                           
 13431                           ;slot_task.c: 39: data->displayTickCount = 0;
 13432  19B6  0020               	movlb	0	; select bank0
 13433  19B7  083B               	movf	slot_Init@data,w
 13434  19B8  0086               	movwf	6
 13435  19B9  083C               	movf	slot_Init@data+1,w
 13436  19BA  0087               	movwf	7
 13437  19BB  3143               	addfsr 1,3
 13438  19BC  3000               	movlw	0
 13439  19BD  3FC0               	movwi [0]fsr1
 13440  19BE  3FC1               	movwi [1]fsr1
 13441                           
 13442                           ;slot_task.c: 40: data->holdCountA = 0;
 13443  19BF  083B               	movf	slot_Init@data,w
 13444  19C0  0086               	movwf	6
 13445  19C1  083C               	movf	slot_Init@data+1,w
 13446  19C2  0087               	movwf	7
 13447  19C3  315F               	addfsr 1,31
 13448  19C4  3000               	movlw	0
 13449  19C5  3FC0               	movwi [0]fsr1
 13450  19C6  3FC1               	movwi [1]fsr1
 13451                           
 13452                           ;slot_task.c: 41: data->holdCountB = 0;
 13453  19C7  083B               	movf	slot_Init@data,w
 13454  19C8  3E21               	addlw	33
 13455  19C9  0086               	movwf	6
 13456  19CA  3000               	movlw	0
 13457  19CB  3D3C               	addwfc	slot_Init@data+1,w
 13458  19CC  0087               	movwf	7
 13459  19CD  3000               	movlw	0
 13460  19CE  3FC0               	movwi [0]fsr1
 13461  19CF  3FC1               	movwi [1]fsr1
 13462                           
 13463                           ;slot_task.c: 42: data->holdCountX = 0;
 13464  19D0  083B               	movf	slot_Init@data,w
 13465  19D1  3E23               	addlw	35
 13466  19D2  0086               	movwf	6
 13467  19D3  3000               	movlw	0
 13468  19D4  3D3C               	addwfc	slot_Init@data+1,w
 13469  19D5  0087               	movwf	7
 13470  19D6  3000               	movlw	0
 13471  19D7  3FC0               	movwi [0]fsr1
 13472  19D8  3FC1               	movwi [1]fsr1
 13473                           
 13474                           ;slot_task.c: 43: data->holdCountY = 0;
 13475  19D9  083B               	movf	slot_Init@data,w
 13476  19DA  3E25               	addlw	37
 13477  19DB  0086               	movwf	6
 13478  19DC  3000               	movlw	0
 13479  19DD  3D3C               	addwfc	slot_Init@data+1,w
 13480  19DE  0087               	movwf	7
 13481  19DF  3000               	movlw	0
 13482  19E0  3FC0               	movwi [0]fsr1
 13483  19E1  3FC1               	movwi [1]fsr1
 13484                           
 13485                           ;slot_task.c: 44: data->noholdCount = 0;
 13486  19E2  083B               	movf	slot_Init@data,w
 13487  19E3  3E27               	addlw	39
 13488  19E4  0086               	movwf	6
 13489  19E5  3000               	movlw	0
 13490  19E6  3D3C               	addwfc	slot_Init@data+1,w
 13491  19E7  0087               	movwf	7
 13492  19E8  3000               	movlw	0
 13493  19E9  3FC0               	movwi [0]fsr1
 13494  19EA  3FC1               	movwi [1]fsr1
 13495                           
 13496                           ;slot_task.c: 45: slot_Setup(data);
 13497  19EB  083C               	movf	slot_Init@data+1,w
 13498  19EC  00B0               	movwf	slot_Setup@taskData+1
 13499  19ED  083B               	movf	slot_Init@data,w
 13500  19EE  00AF               	movwf	slot_Setup@taskData
 13501  19EF  31A7  2702         	fcall	_slot_Setup
 13502  19F1  0008               	return
 13503  19F2                     __end_of_slot_Init:	
 13504                           
 13505                           	psect	text8
 13506  2000                     __ptext8:	
 13507 ;; *************** function _nullifyBadge_userLedsRegister *****************
 13508 ;; Defined at:
 13509 ;;		line 133 in file "nullifyBadge.c"
 13510 ;; Parameters:    Size  Location     Type
 13511 ;;  badge           1    wreg     PTR struct t_nullifyBadg
 13512 ;;		 -> badge_inst(18), 
 13513 ;; Auto vars:     Size  Location     Type
 13514 ;;  badge           1    1[COMMON] PTR struct t_nullifyBadg
 13515 ;;		 -> badge_inst(18), 
 13516 ;; Return value:  Size  Location     Type
 13517 ;;                  1    wreg      char 
 13518 ;; Registers used:
 13519 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13520 ;; Tracked objects:
 13521 ;;		On entry : 0/0
 13522 ;;		On exit  : 0/0
 13523 ;;		Unchanged: 0/0
 13524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13525 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13526 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13527 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13528 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13529 ;;Total ram usage:        1 bytes
 13530 ;; Hardware stack levels used:    1
 13531 ;; Hardware stack levels required when called:    4
 13532 ;; This function calls:
 13533 ;;		Nothing
 13534 ;; This function is called by:
 13535 ;;		_menu_Init
 13536 ;;		_flashy_Init
 13537 ;;		_locked_Init
 13538 ;;		_secret_Init
 13539 ;;		_slot_Init
 13540 ;; This function uses a non-reentrant model
 13541 ;;
 13542                           
 13543                           
 13544                           ;psect for function _nullifyBadge_userLedsRegister
 13545  2000                     _nullifyBadge_userLedsRegister:	
 13546                           
 13547                           ;incstack = 0
 13548                           ; Regs used in _nullifyBadge_userLedsRegister: [wreg+fsr1l+fsr1h+status,2+status,0]
 13549                           ;nullifyBadge_userLedsRegister@badge stored from wreg
 13550  2000  00F1               	movwf	nullifyBadge_userLedsRegister@badge
 13551                           
 13552                           ;nullifyBadge.c: 134: if (badge->registeredHw & HW_USER_LEDS) {
 13553  2001  0871               	movf	nullifyBadge_userLedsRegister@badge,w
 13554  2002  3E11               	addlw	17
 13555  2003  0086               	movwf	6
 13556  2004  3001               	movlw	1	; select bank2/3
 13557  2005  0087               	movwf	7
 13558  2006  1801               	btfsc	1,0
 13559  2007  0008               	return
 13560                           
 13561                           ;nullifyBadge.c: 137: else {
 13562                           ;nullifyBadge.c: 138: badge->registeredHw |= (1 << HW_USER_LEDS);
 13563                           
 13564                           ;nullifyBadge.c: 136: }
 13565                           
 13566                           ;nullifyBadge.c: 135: return -1;
 13567                           ;	Return value of _nullifyBadge_userLedsRegister is never used
 13568  2008  0871               	movf	nullifyBadge_userLedsRegister@badge,w
 13569  2009  3E11               	addlw	17
 13570  200A  0086               	movwf	6
 13571  200B  3001               	movlw	1	; select bank2/3
 13572  200C  0087               	movwf	7
 13573  200D  1481               	bsf	1,1
 13574                           
 13575                           ;nullifyBadge.c: 139: return 0;
 13576                           ;	Return value of _nullifyBadge_userLedsRegister is never used
 13577  200E  0008               	return
 13578  200F                     __end_of_nullifyBadge_userLedsRegister:	
 13579                           
 13580                           	psect	text9
 13581  2E1D                     __ptext9:	
 13582 ;; *************** function _nullifyBadge_segDisplayRegister *****************
 13583 ;; Defined at:
 13584 ;;		line 68 in file "nullifyBadge.c"
 13585 ;; Parameters:    Size  Location     Type
 13586 ;;  badge           1    wreg     PTR struct t_nullifyBadg
 13587 ;;		 -> badge_inst(18), 
 13588 ;; Auto vars:     Size  Location     Type
 13589 ;;  badge           1    1[COMMON] PTR struct t_nullifyBadg
 13590 ;;		 -> badge_inst(18), 
 13591 ;; Return value:  Size  Location     Type
 13592 ;;                  1    wreg      char 
 13593 ;; Registers used:
 13594 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13595 ;; Tracked objects:
 13596 ;;		On entry : 0/0
 13597 ;;		On exit  : 0/0
 13598 ;;		Unchanged: 0/0
 13599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13600 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13601 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13602 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13603 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13604 ;;Total ram usage:        1 bytes
 13605 ;; Hardware stack levels used:    1
 13606 ;; Hardware stack levels required when called:    4
 13607 ;; This function calls:
 13608 ;;		Nothing
 13609 ;; This function is called by:
 13610 ;;		_menu_Init
 13611 ;;		_flashy_Init
 13612 ;;		_locked_Init
 13613 ;;		_secret_Init
 13614 ;;		_slot_Init
 13615 ;;		_fadeDisplay_Init
 13616 ;; This function uses a non-reentrant model
 13617 ;;
 13618                           
 13619                           
 13620                           ;psect for function _nullifyBadge_segDisplayRegister
 13621  2E1D                     _nullifyBadge_segDisplayRegister:	
 13622                           
 13623                           ;incstack = 0
 13624                           ; Regs used in _nullifyBadge_segDisplayRegister: [wreg+fsr1l+fsr1h+status,2+status,0]
 13625                           ;nullifyBadge_segDisplayRegister@badge stored from wreg
 13626  2E1D  00F1               	movwf	nullifyBadge_segDisplayRegister@badge
 13627                           
 13628                           ;nullifyBadge.c: 72: else {
 13629                           ;nullifyBadge.c: 73: badge->registeredHw |= (1 << HW_SEG_DISPLAY);
 13630                           
 13631                           ;nullifyBadge.c: 71: }
 13632                           
 13633                           ;nullifyBadge.c: 70: return -1;
 13634                           ;	Return value of _nullifyBadge_segDisplayRegister is never used
 13635                           
 13636                           ;nullifyBadge.c: 69: if (badge->registeredHw & HW_SEG_DISPLAY) {
 13637  2E1E  0871               	movf	nullifyBadge_segDisplayRegister@badge,w
 13638  2E1F  3E11               	addlw	17
 13639  2E20  0086               	movwf	6
 13640  2E21  3001               	movlw	1	; select bank2/3
 13641  2E22  0087               	movwf	7
 13642  2E23  1401               	bsf	1,0
 13643                           
 13644                           ;nullifyBadge.c: 74: return 0;
 13645                           ;	Return value of _nullifyBadge_segDisplayRegister is never used
 13646  2E24  0008               	return
 13647  2E25                     __end_of_nullifyBadge_segDisplayRegister:	
 13648                           
 13649                           	psect	text10
 13650  2045                     __ptext10:	
 13651 ;; *************** function _scheduler_Init *****************
 13652 ;; Defined at:
 13653 ;;		line 27 in file "cooperative_scheduler.c"
 13654 ;; Parameters:    Size  Location     Type
 13655 ;;  scheduler       1    wreg     PTR struct t_scheduler
 13656 ;;		 -> schedulerInst(18), 
 13657 ;; Auto vars:     Size  Location     Type
 13658 ;;  scheduler       1    2[COMMON] PTR struct t_scheduler
 13659 ;;		 -> schedulerInst(18), 
 13660 ;;  k               1    3[COMMON] unsigned char 
 13661 ;; Return value:  Size  Location     Type
 13662 ;;                  1    wreg      void 
 13663 ;; Registers used:
 13664 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13665 ;; Tracked objects:
 13666 ;;		On entry : 0/0
 13667 ;;		On exit  : 0/0
 13668 ;;		Unchanged: 0/0
 13669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13670 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13671 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13672 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13673 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13674 ;;Total ram usage:        3 bytes
 13675 ;; Hardware stack levels used:    1
 13676 ;; Hardware stack levels required when called:    4
 13677 ;; This function calls:
 13678 ;;		Nothing
 13679 ;; This function is called by:
 13680 ;;		_main
 13681 ;; This function uses a non-reentrant model
 13682 ;;
 13683                           
 13684                           
 13685                           ;psect for function _scheduler_Init
 13686  2045                     _scheduler_Init:	
 13687                           
 13688                           ;incstack = 0
 13689                           ; Regs used in _scheduler_Init: [wreg+fsr1l+fsr1h+status,2+status,0]
 13690                           ;scheduler_Init@scheduler stored from wreg
 13691  2045  00F2               	movwf	scheduler_Init@scheduler
 13692                           
 13693                           ;cooperative_scheduler.c: 28: scheduler->taskEntryVector = 0x0;
 13694  2046  0872               	movf	scheduler_Init@scheduler,w
 13695  2047  3E10               	addlw	16
 13696  2048  0086               	movwf	6
 13697  2049  3001               	movlw	1	; select bank2/3
 13698  204A  0087               	movwf	7
 13699  204B  3000               	movlw	0
 13700  204C  3FC0               	movwi [0]fsr1
 13701  204D  3FC1               	movwi [1]fsr1
 13702                           
 13703                           ;cooperative_scheduler.c: 29: u8 k;
 13704                           ;cooperative_scheduler.c: 31: for (k = 0; k < 16; k++) {
 13705  204E  01F3               	clrf	scheduler_Init@k
 13706  204F                     L1:	
 13707  204F  3010               	movlw	16
 13708  2050  0273               	subwf	scheduler_Init@k,w
 13709  2051  1803               	btfsc	3,0
 13710  2052  0008               	return
 13711                           
 13712                           ;cooperative_scheduler.c: 32: scheduler->tasks[k] = (0);
 13713  2053  0873               	movf	scheduler_Init@k,w
 13714  2054  0772               	addwf	scheduler_Init@scheduler,w
 13715  2055  00F1               	movwf	??_scheduler_Init
 13716  2056  0871               	movf	??_scheduler_Init,w
 13717  2057  0086               	movwf	6
 13718  2058  3001               	movlw	1	; select bank2/3
 13719  2059  0087               	movwf	7
 13720  205A  0181               	clrf	1
 13721  205B  3001               	movlw	1
 13722  205C  00F1               	movwf	??_scheduler_Init
 13723  205D  0871               	movf	??_scheduler_Init,w
 13724  205E  07F3               	addwf	scheduler_Init@k,f
 13725  205F  284F               	goto	L1
 13726  2060                     __end_of_scheduler_Init:	
 13727                           
 13728                           	psect	text11
 13729  1C29                     __ptext11:	
 13730 ;; *************** function _schedulerExecute *****************
 13731 ;; Defined at:
 13732 ;;		line 77 in file "cooperative_scheduler.c"
 13733 ;; Parameters:    Size  Location     Type
 13734 ;;  scheduler       1    wreg     PTR struct t_scheduler
 13735 ;;		 -> schedulerInst(18), 
 13736 ;; Auto vars:     Size  Location     Type
 13737 ;;  scheduler       1    6[BANK1 ] PTR struct t_scheduler
 13738 ;;		 -> schedulerInst(18), 
 13739 ;;  tickDelta       2    4[BANK1 ] unsigned int 
 13740 ;;  taskLastSyst    2    2[BANK1 ] unsigned int 
 13741 ;;  currentSyste    2    0[BANK1 ] unsigned int 
 13742 ;;  k               1    7[BANK1 ] unsigned char 
 13743 ;; Return value:  Size  Location     Type
 13744 ;;                  1    wreg      void 
 13745 ;; Registers used:
 13746 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13747 ;; Tracked objects:
 13748 ;;		On entry : 0/0
 13749 ;;		On exit  : 0/0
 13750 ;;		Unchanged: 0/0
 13751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13752 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13753 ;;      Locals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13754 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13755 ;;      Totals:         0       6       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13756 ;;Total ram usage:       14 bytes
 13757 ;; Hardware stack levels used:    1
 13758 ;; Hardware stack levels required when called:   14
 13759 ;; This function calls:
 13760 ;;		_TMR0_Read16bitTimer
 13761 ;;		_scheduler_TaskRun
 13762 ;; This function is called by:
 13763 ;;		_main
 13764 ;; This function uses a non-reentrant model
 13765 ;;
 13766                           
 13767                           
 13768                           ;psect for function _schedulerExecute
 13769  1C29                     _schedulerExecute:	
 13770                           
 13771                           ;incstack = 0
 13772                           ; Regs used in _schedulerExecute: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13773                           ;schedulerExecute@scheduler stored from wreg
 13774  1C29  0021               	movlb	1	; select bank1
 13775  1C2A  00E9               	movwf	schedulerExecute@scheduler^(0+128)
 13776                           
 13777                           ;cooperative_scheduler.c: 78: u16 currentSystemTick;
 13778                           ;cooperative_scheduler.c: 79: u16 taskLastSystemTick;
 13779                           ;cooperative_scheduler.c: 80: u16 tickDelta;
 13780                           ;cooperative_scheduler.c: 81: u8 k;
 13781                           ;cooperative_scheduler.c: 83: for (k = 0; k < 16; k++) {
 13782  1C2B  01EA               	clrf	schedulerExecute@k^(0+128)
 13783  1C2C                     L2:	
 13784  1C2C  3010               	movlw	16
 13785  1C2D  026A               	subwf	schedulerExecute@k^(0+128),w
 13786  1C2E  1803               	btfsc	3,0
 13787  1C2F  0008               	return
 13788                           
 13789                           ;cooperative_scheduler.c: 86: if (!(scheduler->taskEntryVector & (1 << k)) ) {
 13790  1C30  0869               	movf	schedulerExecute@scheduler^(0+128),w
 13791  1C31  3E10               	addlw	16
 13792  1C32  0086               	movwf	6
 13793  1C33  3001               	movlw	1	; select bank2/3
 13794  1C34  0087               	movwf	7
 13795  1C35  3F40               	moviw [0]fsr1
 13796  1C36  0020               	movlb	0	; select bank0
 13797  1C37  00E8               	movwf	??_schedulerExecute
 13798  1C38  3F41               	moviw [1]fsr1
 13799  1C39  00E9               	movwf	??_schedulerExecute+1
 13800  1C3A  3001               	movlw	1
 13801  1C3B  00EA               	movwf	??_schedulerExecute+2
 13802  1C3C  3000               	movlw	0
 13803  1C3D  00EB               	movwf	??_schedulerExecute+3
 13804  1C3E  0021               	movlb	1	; select bank1
 13805  1C3F  0A6A               	incf	schedulerExecute@k^(0+128),w
 13806  1C40  0020               	movlb	0	; select bank0
 13807  1C41  2C44               	goto	u5614
 13808  1C42                     u5615:	
 13809  1C42  35EA               	lslf	??_schedulerExecute+2,f
 13810  1C43  0DEB               	rlf	??_schedulerExecute+3,f
 13811  1C44                     u5614:	
 13812  1C44  0B89               	decfsz	9,f
 13813  1C45  2C42               	goto	u5615
 13814  1C46  0868               	movf	??_schedulerExecute,w
 13815  1C47  056A               	andwf	??_schedulerExecute+2,w
 13816  1C48  00EC               	movwf	??_schedulerExecute+4
 13817  1C49  0869               	movf	??_schedulerExecute+1,w
 13818  1C4A  056B               	andwf	??_schedulerExecute+3,w
 13819  1C4B  00ED               	movwf	??_schedulerExecute+5
 13820  1C4C  086C               	movf	??_schedulerExecute+4,w
 13821  1C4D  046D               	iorwf	??_schedulerExecute+5,w
 13822  1C4E  1903               	btfsc	3,2
 13823  1C4F  2CA6               	goto	l8680
 13824                           
 13825                           ;cooperative_scheduler.c: 88: }
 13826                           ;cooperative_scheduler.c: 90: currentSystemTick = TMR0_Read16bitTimer();
 13827                           
 13828                           ;cooperative_scheduler.c: 87: continue;
 13829  1C50  31A0  2098  319C   	fcall	_TMR0_Read16bitTimer
 13830  1C53  0872               	movf	?_TMR0_Read16bitTimer+1,w
 13831  1C54  0021               	movlb	1	; select bank1
 13832  1C55  00E4               	movwf	(schedulerExecute@currentSystemTick+1)^(0+128)
 13833  1C56  0871               	movf	?_TMR0_Read16bitTimer,w
 13834  1C57  00E3               	movwf	schedulerExecute@currentSystemTick^(0+128)
 13835                           
 13836                           ;cooperative_scheduler.c: 91: taskLastSystemTick = scheduler->tasks[k]->systemTickLastEx
      +                          ecuted;
 13837  1C58  086A               	movf	schedulerExecute@k^(0+128),w
 13838  1C59  0769               	addwf	schedulerExecute@scheduler^(0+128),w
 13839  1C5A  0020               	movlb	0	; select bank0
 13840  1C5B  00E8               	movwf	??_schedulerExecute
 13841  1C5C  0868               	movf	??_schedulerExecute,w
 13842  1C5D  0086               	movwf	6
 13843  1C5E  3001               	movlw	1	; select bank2/3
 13844  1C5F  0087               	movwf	7
 13845  1C60  0801               	movf	1,w
 13846  1C61  0086               	movwf	6
 13847  1C62  3001               	movlw	1	; select bank2/3
 13848  1C63  0087               	movwf	7
 13849  1C64  3F40               	moviw [0]fsr1
 13850  1C65  0021               	movlb	1	; select bank1
 13851  1C66  00E5               	movwf	schedulerExecute@taskLastSystemTick^(0+128)
 13852  1C67  3F41               	moviw [1]fsr1
 13853  1C68  00E6               	movwf	(schedulerExecute@taskLastSystemTick+1)^(0+128)
 13854                           
 13855                           ;cooperative_scheduler.c: 99: tickDelta = currentSystemTick - taskLastSystemTick;
 13856  1C69  0965               	comf	schedulerExecute@taskLastSystemTick^(0+128),w
 13857  1C6A  0020               	movlb	0	; select bank0
 13858  1C6B  00E8               	movwf	??_schedulerExecute
 13859  1C6C  0021               	movlb	1	; select bank1
 13860  1C6D  0966               	comf	(schedulerExecute@taskLastSystemTick+1)^(0+128),w
 13861  1C6E  0020               	movlb	0	; select bank0
 13862  1C6F  00E9               	movwf	??_schedulerExecute+1
 13863  1C70  0AE8               	incf	??_schedulerExecute,f
 13864  1C71  1903               	skipnz
 13865  1C72  0AE9               	incf	??_schedulerExecute+1,f
 13866  1C73  0021               	movlb	1	; select bank1
 13867  1C74  0863               	movf	schedulerExecute@currentSystemTick^(0+128),w
 13868  1C75  0020               	movlb	0	; select bank0
 13869  1C76  0768               	addwf	??_schedulerExecute,w
 13870  1C77  0021               	movlb	1	; select bank1
 13871  1C78  00E7               	movwf	schedulerExecute@tickDelta^(0+128)
 13872  1C79  0864               	movf	(schedulerExecute@currentSystemTick+1)^(0+128),w
 13873  1C7A  0020               	movlb	0	; select bank0
 13874  1C7B  3D69               	addwfc	??_schedulerExecute+1,w
 13875  1C7C  0021               	movlb	1	; select bank1
 13876  1C7D  00E8               	movwf	(schedulerExecute@tickDelta+1)^(0+128)
 13877                           
 13878                           ;cooperative_scheduler.c: 103: if (tickDelta >= scheduler->tasks[k]->taskInterval) {
 13879  1C7E  086A               	movf	schedulerExecute@k^(0+128),w
 13880  1C7F  0769               	addwf	schedulerExecute@scheduler^(0+128),w
 13881  1C80  0020               	movlb	0	; select bank0
 13882  1C81  00E8               	movwf	??_schedulerExecute
 13883  1C82  0868               	movf	??_schedulerExecute,w
 13884  1C83  0086               	movwf	6
 13885  1C84  3001               	movlw	1	; select bank2/3
 13886  1C85  0087               	movwf	7
 13887  1C86  0801               	movf	1,w
 13888  1C87  3E0A               	addlw	10
 13889  1C88  0086               	movwf	6
 13890  1C89  3001               	movlw	1	; select bank2/3
 13891  1C8A  0087               	movwf	7
 13892  1C8B  3F40               	moviw [0]fsr1
 13893  1C8C  00E9               	movwf	??_schedulerExecute+1
 13894  1C8D  3F41               	moviw [1]fsr1
 13895  1C8E  00EA               	movwf	??_schedulerExecute+2
 13896  1C8F  086A               	movf	??_schedulerExecute+2,w
 13897  1C90  0021               	movlb	1	; select bank1
 13898  1C91  0268               	subwf	(schedulerExecute@tickDelta+1)^(0+128),w
 13899  1C92  1D03               	skipz
 13900  1C93  2C98               	goto	u5635
 13901  1C94  0020               	movlb	0	; select bank0
 13902  1C95  0869               	movf	??_schedulerExecute+1,w
 13903  1C96  0021               	movlb	1	; select bank1
 13904  1C97  0267               	subwf	schedulerExecute@tickDelta^(0+128),w
 13905  1C98                     u5635:	
 13906  1C98  1C03               	skipc
 13907  1C99  2CA6               	goto	l8680
 13908                           
 13909                           ;cooperative_scheduler.c: 104: scheduler_TaskRun(scheduler->tasks[k]);
 13910  1C9A  086A               	movf	schedulerExecute@k^(0+128),w
 13911  1C9B  0769               	addwf	schedulerExecute@scheduler^(0+128),w
 13912  1C9C  0020               	movlb	0	; select bank0
 13913  1C9D  00E8               	movwf	??_schedulerExecute
 13914  1C9E  0868               	movf	??_schedulerExecute,w
 13915  1C9F  0086               	movwf	6
 13916  1CA0  3001               	movlw	1	; select bank2/3
 13917  1CA1  0087               	movwf	7
 13918  1CA2  0801               	movf	1,w
 13919  1CA3  3187  27DF  319C   	fcall	_scheduler_TaskRun
 13920  1CA6                     l8680:	
 13921  1CA6  3001               	movlw	1
 13922  1CA7  0020               	movlb	0	; select bank0
 13923  1CA8  00E8               	movwf	??_schedulerExecute
 13924  1CA9  0868               	movf	??_schedulerExecute,w
 13925  1CAA  0021               	movlb	1	; select bank1
 13926  1CAB  07EA               	addwf	schedulerExecute@k^(0+128),f
 13927  1CAC  2C2C               	goto	L2
 13928  1CAD                     __end_of_schedulerExecute:	
 13929                           
 13930                           	psect	text12
 13931  07DF                     __ptext12:	
 13932 ;; *************** function _scheduler_TaskRun *****************
 13933 ;; Defined at:
 13934 ;;		line 20 in file "cooperative_scheduler.c"
 13935 ;; Parameters:    Size  Location     Type
 13936 ;;  task            1    wreg     PTR struct t_schedulerTa
 13937 ;;		 -> secret_task(13), locked_task(13), slot_task(13), menu_task(13), 
 13938 ;;		 -> flashy_task(13), NULL(0), 
 13939 ;; Auto vars:     Size  Location     Type
 13940 ;;  task            1   71[BANK0 ] PTR struct t_schedulerTa
 13941 ;;		 -> secret_task(13), locked_task(13), slot_task(13), menu_task(13), 
 13942 ;;		 -> flashy_task(13), NULL(0), 
 13943 ;; Return value:  Size  Location     Type
 13944 ;;                  1    wreg      void 
 13945 ;; Registers used:
 13946 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13947 ;; Tracked objects:
 13948 ;;		On entry : 0/0
 13949 ;;		On exit  : 0/0
 13950 ;;		Unchanged: 0/0
 13951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13952 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13953 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13954 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13955 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13956 ;;Total ram usage:        1 bytes
 13957 ;; Hardware stack levels used:    1
 13958 ;; Hardware stack levels required when called:   13
 13959 ;; This function calls:
 13960 ;;		Absolute function
 13961 ;;		_TMR0_Read16bitTimer
 13962 ;;		_flashy_Main
 13963 ;;		_locked_Main
 13964 ;;		_menu_Main
 13965 ;;		_secret_Main
 13966 ;;		_slot_Main
 13967 ;; This function is called by:
 13968 ;;		_schedulerExecute
 13969 ;; This function uses a non-reentrant model
 13970 ;;
 13971                           
 13972                           
 13973                           ;psect for function _scheduler_TaskRun
 13974  07DF                     _scheduler_TaskRun:	
 13975                           
 13976                           ;incstack = 0
 13977                           ; Regs used in _scheduler_TaskRun: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13978                           ;scheduler_TaskRun@task stored from wreg
 13979  07DF  0020               	movlb	0	; select bank0
 13980  07E0  00E7               	movwf	scheduler_TaskRun@task
 13981                           
 13982                           ;cooperative_scheduler.c: 21: task->taskExecuteCallback (task->taskData);
 13983  07E1  0867               	movf	scheduler_TaskRun@task,w
 13984  07E2  3E02               	addlw	2
 13985  07E3  0086               	movwf	6
 13986  07E4  3001               	movlw	1	; select bank2/3
 13987  07E5  0087               	movwf	7
 13988  07E6  3F40               	moviw [0]fsr1
 13989  07E7  00D2               	movwf	secret_Main@taskData
 13990  07E8  3F41               	moviw [1]fsr1
 13991  07E9  00D3               	movwf	secret_Main@taskData+1
 13992  07EA  0867               	movf	scheduler_TaskRun@task,w
 13993  07EB  3E08               	addlw	8
 13994  07EC  0086               	movwf	6
 13995  07ED  3001               	movlw	1	; select bank2/3
 13996  07EE  0087               	movwf	7
 13997  07EF  3F41               	moviw [1]fsr1
 13998  07F0  008A               	movwf	10
 13999  07F1  3F40               	moviw [0]fsr1
 14000  07F2  000A               	callw
 14001  07F3  3187               	pagesel	$
 14002                           
 14003                           ;cooperative_scheduler.c: 22: task->systemTickLastExecuted = TMR0_Read16bitTimer();
 14004  07F4  31A0  2098         	fcall	_TMR0_Read16bitTimer
 14005  07F6  0020               	movlb	0	; select bank0
 14006  07F7  0867               	movf	scheduler_TaskRun@task,w
 14007  07F8  0086               	movwf	6
 14008  07F9  3001               	movlw	1	; select bank2/3
 14009  07FA  0087               	movwf	7
 14010  07FB  0871               	movf	?_TMR0_Read16bitTimer,w
 14011  07FC  3FC0               	movwi [0]fsr1
 14012  07FD  0872               	movf	?_TMR0_Read16bitTimer+1,w
 14013  07FE  3FC1               	movwi [1]fsr1
 14014  07FF  0008               	return
 14015  0800                     __end_of_scheduler_TaskRun:	
 14016                           
 14017                           	psect	text13
 14018  1E43                     __ptext13:	
 14019 ;; *************** function _secret_Main *****************
 14020 ;; Defined at:
 14021 ;;		line 99 in file "secret_task.c"
 14022 ;; Parameters:    Size  Location     Type
 14023 ;;  taskData        2   50[BANK0 ] PTR void 
 14024 ;;		 -> secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), 
 14025 ;;		 -> flashy_TaskData(30), NULL(0), 
 14026 ;; Auto vars:     Size  Location     Type
 14027 ;;  data            2   56[BANK0 ] PTR struct t_secret_task
 14028 ;;		 -> secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), 
 14029 ;;		 -> flashy_TaskData(30), NULL(0), 
 14030 ;;  buttonPresse    1   55[BANK0 ] unsigned char 
 14031 ;;  secret_found    1   54[BANK0 ] unsigned char 
 14032 ;; Return value:  Size  Location     Type
 14033 ;;                  1    wreg      void 
 14034 ;; Registers used:
 14035 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14036 ;; Tracked objects:
 14037 ;;		On entry : 0/0
 14038 ;;		On exit  : 0/0
 14039 ;;		Unchanged: 0/0
 14040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14041 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14042 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14043 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14044 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14045 ;;Total ram usage:        8 bytes
 14046 ;; Hardware stack levels used:    1
 14047 ;; Hardware stack levels required when called:    6
 14048 ;; This function calls:
 14049 ;;		_nullifyBadge_buttonsGet
 14050 ;;		_secret_check
 14051 ;;		_secret_clear
 14052 ;; This function is called by:
 14053 ;;		_main
 14054 ;;		_scheduler_TaskRun
 14055 ;; This function uses a non-reentrant model
 14056 ;;
 14057                           
 14058                           
 14059                           ;psect for function _secret_Main
 14060  1E43                     _secret_Main:	
 14061                           
 14062                           ;secret_task.c: 100: struct t_secret_taskData *data = (struct t_secret_taskData *) taskD
      +                          ata;
 14063                           
 14064                           ;incstack = 0
 14065                           ; Regs used in _secret_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14066  1E43  0020               	movlb	0	; select bank0
 14067  1E44  0853               	movf	secret_Main@taskData+1,w
 14068  1E45  00D9               	movwf	secret_Main@data+1
 14069  1E46  0852               	movf	secret_Main@taskData,w
 14070  1E47  00D8               	movwf	secret_Main@data
 14071                           
 14072                           ;secret_task.c: 101: u8 buttonPressed, secret_found = 0;
 14073  1E48  01D6               	clrf	secret_Main@secret_found
 14074                           
 14075                           ;secret_task.c: 103: buttonPressed = nullifyBadge_buttonsGet();
 14076  1E49  31A2  2250  319E   	fcall	_nullifyBadge_buttonsGet
 14077  1E4C  0020               	movlb	0	; select bank0
 14078  1E4D  00D4               	movwf	??_secret_Main
 14079  1E4E  0854               	movf	??_secret_Main,w
 14080  1E4F  00D7               	movwf	secret_Main@buttonPressed
 14081                           
 14082                           ;secret_task.c: 104: switch (buttonPressed) {
 14083  1E50  2FE3               	goto	l8372
 14084  1E51                     l8286:	
 14085                           ;secret_task.c: 105: case 0:
 14086                           
 14087                           
 14088                           ;secret_task.c: 107: if (data->delayTickCount == 0){
 14089  1E51  0858               	movf	secret_Main@data,w
 14090  1E52  0086               	movwf	6
 14091  1E53  0859               	movf	secret_Main@data+1,w
 14092  1E54  0087               	movwf	7
 14093  1E55  3142               	addfsr 1,2
 14094  1E56  0016               	moviw fsr1++
 14095  1E57  0401               	iorwf	1,w
 14096  1E58  1D03               	btfss	3,2
 14097  1E59  2E6B               	goto	l8292
 14098                           
 14099                           ;secret_task.c: 108: data->delayTickCount = 300;
 14100  1E5A  0858               	movf	secret_Main@data,w
 14101  1E5B  0086               	movwf	6
 14102  1E5C  0859               	movf	secret_Main@data+1,w
 14103  1E5D  0087               	movwf	7
 14104  1E5E  3142               	addfsr 1,2
 14105  1E5F  302C               	movlw	44
 14106  1E60  3FC0               	movwi [0]fsr1
 14107  1E61  3001               	movlw	1
 14108  1E62  3FC1               	movwi [1]fsr1
 14109                           
 14110                           ;secret_task.c: 109: secret_check(data, 0);
 14111  1E63  0859               	movf	secret_Main@data+1,w
 14112  1E64  00F8               	movwf	secret_check@data+1
 14113  1E65  0858               	movf	secret_Main@data,w
 14114  1E66  00F7               	movwf	secret_check@data
 14115  1E67  01F9               	clrf	secret_check@buttonPressed
 14116  1E68  319C  24AD  319E   	fcall	_secret_check
 14117  1E6B                     l8292:	
 14118                           
 14119                           ;secret_task.c: 110: }
 14120                           ;secret_task.c: 111: data->holdCountA = 0;
 14121  1E6B  0020               	movlb	0	; select bank0
 14122  1E6C  0858               	movf	secret_Main@data,w
 14123  1E6D  0086               	movwf	6
 14124  1E6E  0859               	movf	secret_Main@data+1,w
 14125  1E6F  0087               	movwf	7
 14126  1E70  3144               	addfsr 1,4
 14127  1E71  3000               	movlw	0
 14128  1E72  3FC0               	movwi [0]fsr1
 14129  1E73  3FC1               	movwi [1]fsr1
 14130                           
 14131                           ;secret_task.c: 112: data->holdCountB = 0;
 14132  1E74  0858               	movf	secret_Main@data,w
 14133  1E75  0086               	movwf	6
 14134  1E76  0859               	movf	secret_Main@data+1,w
 14135  1E77  0087               	movwf	7
 14136  1E78  3146               	addfsr 1,6
 14137  1E79  3000               	movlw	0
 14138  1E7A  3FC0               	movwi [0]fsr1
 14139  1E7B  3FC1               	movwi [1]fsr1
 14140                           
 14141                           ;secret_task.c: 113: data->holdCountX = 0;
 14142  1E7C  0858               	movf	secret_Main@data,w
 14143  1E7D  0086               	movwf	6
 14144  1E7E  0859               	movf	secret_Main@data+1,w
 14145  1E7F  0087               	movwf	7
 14146  1E80  3148               	addfsr 1,8
 14147  1E81  3000               	movlw	0
 14148  1E82  3FC0               	movwi [0]fsr1
 14149  1E83  3FC1               	movwi [1]fsr1
 14150                           
 14151                           ;secret_task.c: 114: data->holdCountY = 0;
 14152  1E84  0858               	movf	secret_Main@data,w
 14153  1E85  0086               	movwf	6
 14154  1E86  0859               	movf	secret_Main@data+1,w
 14155  1E87  0087               	movwf	7
 14156  1E88  314A               	addfsr 1,10
 14157  1E89  3000               	movlw	0
 14158  1E8A  3FC0               	movwi [0]fsr1
 14159  1E8B  3FC1               	movwi [1]fsr1
 14160                           
 14161                           ;secret_task.c: 115: data->noholdCount += 1;
 14162  1E8C  0858               	movf	secret_Main@data,w
 14163  1E8D  0086               	movwf	6
 14164  1E8E  0859               	movf	secret_Main@data+1,w
 14165  1E8F  0087               	movwf	7
 14166  1E90  314C               	addfsr 1,12
 14167  1E91  3001               	movlw	1
 14168  1E92  0781               	addwf	1,f
 14169  1E93  3141               	addfsr 1,1
 14170  1E94  1803               	skipnc
 14171  1E95  0A81               	incf	1,f
 14172                           
 14173                           ;secret_task.c: 116: data->delayTickCount -= 1;
 14174  1E96  0858               	movf	secret_Main@data,w
 14175  1E97  0086               	movwf	6
 14176  1E98  0859               	movf	secret_Main@data+1,w
 14177  1E99  0087               	movwf	7
 14178  1E9A  3142               	addfsr 1,2
 14179  1E9B  3001               	movlw	1
 14180  1E9C  0281               	subwf	1,f
 14181  1E9D  3141               	addfsr 1,1
 14182  1E9E  3000               	movlw	0
 14183  1E9F  3B81               	subwfb	1,f
 14184  1EA0  317F               	addfsr 1,-1
 14185                           
 14186                           ;secret_task.c: 117: break;
 14187  1EA1  2FF5               	goto	l8374
 14188  1EA2                     l8304:	
 14189                           ;secret_task.c: 118: case 1:
 14190                           
 14191                           
 14192                           ;secret_task.c: 120: if (data->holdCountA == 0){
 14193  1EA2  0858               	movf	secret_Main@data,w
 14194  1EA3  0086               	movwf	6
 14195  1EA4  0859               	movf	secret_Main@data+1,w
 14196  1EA5  0087               	movwf	7
 14197  1EA6  3144               	addfsr 1,4
 14198  1EA7  0016               	moviw fsr1++
 14199  1EA8  0401               	iorwf	1,w
 14200  1EA9  1D03               	btfss	3,2
 14201  1EAA  2EBA               	goto	l8308
 14202                           
 14203                           ;secret_task.c: 121: secret_found = secret_check(data, buttonPressed);
 14204  1EAB  0859               	movf	secret_Main@data+1,w
 14205  1EAC  00F8               	movwf	secret_check@data+1
 14206  1EAD  0858               	movf	secret_Main@data,w
 14207  1EAE  00F7               	movwf	secret_check@data
 14208  1EAF  0857               	movf	secret_Main@buttonPressed,w
 14209  1EB0  00D4               	movwf	??_secret_Main
 14210  1EB1  0854               	movf	??_secret_Main,w
 14211  1EB2  00F9               	movwf	secret_check@buttonPressed
 14212  1EB3  319C  24AD  319E   	fcall	_secret_check
 14213  1EB6  0020               	movlb	0	; select bank0
 14214  1EB7  00D5               	movwf	??_secret_Main+1
 14215  1EB8  0855               	movf	??_secret_Main+1,w
 14216  1EB9  00D6               	movwf	secret_Main@secret_found
 14217  1EBA                     l8308:	
 14218                           
 14219                           ;secret_task.c: 122: }
 14220                           ;secret_task.c: 123: data->holdCountA += 1;
 14221  1EBA  0858               	movf	secret_Main@data,w
 14222  1EBB  0086               	movwf	6
 14223  1EBC  0859               	movf	secret_Main@data+1,w
 14224  1EBD  0087               	movwf	7
 14225  1EBE  3144               	addfsr 1,4
 14226  1EBF  3001               	movlw	1
 14227  1EC0  0781               	addwf	1,f
 14228  1EC1  3141               	addfsr 1,1
 14229  1EC2  1803               	skipnc
 14230  1EC3  0A81               	incf	1,f
 14231                           
 14232                           ;secret_task.c: 124: data->holdCountB = 0;
 14233  1EC4  0858               	movf	secret_Main@data,w
 14234  1EC5  0086               	movwf	6
 14235  1EC6  0859               	movf	secret_Main@data+1,w
 14236  1EC7  0087               	movwf	7
 14237  1EC8  3146               	addfsr 1,6
 14238  1EC9  3000               	movlw	0
 14239  1ECA  3FC0               	movwi [0]fsr1
 14240  1ECB  3FC1               	movwi [1]fsr1
 14241                           
 14242                           ;secret_task.c: 125: data->holdCountX = 0;
 14243  1ECC  0858               	movf	secret_Main@data,w
 14244  1ECD  0086               	movwf	6
 14245  1ECE  0859               	movf	secret_Main@data+1,w
 14246  1ECF  0087               	movwf	7
 14247  1ED0  3148               	addfsr 1,8
 14248  1ED1  3000               	movlw	0
 14249  1ED2  3FC0               	movwi [0]fsr1
 14250  1ED3  3FC1               	movwi [1]fsr1
 14251                           
 14252                           ;secret_task.c: 126: data->holdCountY = 0;
 14253  1ED4  0858               	movf	secret_Main@data,w
 14254  1ED5  0086               	movwf	6
 14255  1ED6  0859               	movf	secret_Main@data+1,w
 14256  1ED7  0087               	movwf	7
 14257  1ED8  314A               	addfsr 1,10
 14258  1ED9  3000               	movlw	0
 14259  1EDA  3FC0               	movwi [0]fsr1
 14260  1EDB  3FC1               	movwi [1]fsr1
 14261                           
 14262                           ;secret_task.c: 127: data->noholdCount = 0;
 14263  1EDC  0858               	movf	secret_Main@data,w
 14264  1EDD  0086               	movwf	6
 14265  1EDE  0859               	movf	secret_Main@data+1,w
 14266  1EDF  0087               	movwf	7
 14267  1EE0  314C               	addfsr 1,12
 14268  1EE1  3000               	movlw	0
 14269  1EE2  3FC0               	movwi [0]fsr1
 14270  1EE3  3FC1               	movwi [1]fsr1
 14271                           
 14272                           ;secret_task.c: 128: data->delayTickCount = 300;
 14273  1EE4  0858               	movf	secret_Main@data,w
 14274  1EE5  0086               	movwf	6
 14275  1EE6  0859               	movf	secret_Main@data+1,w
 14276  1EE7  0087               	movwf	7
 14277  1EE8  3142               	addfsr 1,2
 14278  1EE9  302C               	movlw	44
 14279  1EEA  3FC0               	movwi [0]fsr1
 14280  1EEB  3001               	movlw	1
 14281  1EEC  3FC1               	movwi [1]fsr1
 14282                           
 14283                           ;secret_task.c: 129: break;
 14284  1EED  2FF5               	goto	l8374
 14285  1EEE                     l8320:	
 14286                           ;secret_task.c: 130: case 2:
 14287                           
 14288                           
 14289                           ;secret_task.c: 132: if (data->holdCountB == 0){
 14290  1EEE  0858               	movf	secret_Main@data,w
 14291  1EEF  0086               	movwf	6
 14292  1EF0  0859               	movf	secret_Main@data+1,w
 14293  1EF1  0087               	movwf	7
 14294  1EF2  3146               	addfsr 1,6
 14295  1EF3  0016               	moviw fsr1++
 14296  1EF4  0401               	iorwf	1,w
 14297  1EF5  1D03               	btfss	3,2
 14298  1EF6  2F06               	goto	l8324
 14299                           
 14300                           ;secret_task.c: 133: secret_found = secret_check(data, buttonPressed);
 14301  1EF7  0859               	movf	secret_Main@data+1,w
 14302  1EF8  00F8               	movwf	secret_check@data+1
 14303  1EF9  0858               	movf	secret_Main@data,w
 14304  1EFA  00F7               	movwf	secret_check@data
 14305  1EFB  0857               	movf	secret_Main@buttonPressed,w
 14306  1EFC  00D4               	movwf	??_secret_Main
 14307  1EFD  0854               	movf	??_secret_Main,w
 14308  1EFE  00F9               	movwf	secret_check@buttonPressed
 14309  1EFF  319C  24AD  319E   	fcall	_secret_check
 14310  1F02  0020               	movlb	0	; select bank0
 14311  1F03  00D5               	movwf	??_secret_Main+1
 14312  1F04  0855               	movf	??_secret_Main+1,w
 14313  1F05  00D6               	movwf	secret_Main@secret_found
 14314  1F06                     l8324:	
 14315                           
 14316                           ;secret_task.c: 134: }
 14317                           ;secret_task.c: 135: data->holdCountA = 0;
 14318  1F06  0858               	movf	secret_Main@data,w
 14319  1F07  0086               	movwf	6
 14320  1F08  0859               	movf	secret_Main@data+1,w
 14321  1F09  0087               	movwf	7
 14322  1F0A  3144               	addfsr 1,4
 14323  1F0B  3000               	movlw	0
 14324  1F0C  3FC0               	movwi [0]fsr1
 14325  1F0D  3FC1               	movwi [1]fsr1
 14326                           
 14327                           ;secret_task.c: 136: data->holdCountB += 1;
 14328  1F0E  0858               	movf	secret_Main@data,w
 14329  1F0F  0086               	movwf	6
 14330  1F10  0859               	movf	secret_Main@data+1,w
 14331  1F11  0087               	movwf	7
 14332  1F12  3146               	addfsr 1,6
 14333  1F13  3001               	movlw	1
 14334  1F14  0781               	addwf	1,f
 14335  1F15  3141               	addfsr 1,1
 14336  1F16  1803               	skipnc
 14337  1F17  0A81               	incf	1,f
 14338                           
 14339                           ;secret_task.c: 137: data->holdCountX = 0;
 14340  1F18  0858               	movf	secret_Main@data,w
 14341  1F19  0086               	movwf	6
 14342  1F1A  0859               	movf	secret_Main@data+1,w
 14343  1F1B  0087               	movwf	7
 14344  1F1C  3148               	addfsr 1,8
 14345  1F1D  3000               	movlw	0
 14346  1F1E  3FC0               	movwi [0]fsr1
 14347  1F1F  3FC1               	movwi [1]fsr1
 14348                           
 14349                           ;secret_task.c: 138: data->holdCountY = 0;
 14350  1F20  0858               	movf	secret_Main@data,w
 14351  1F21  0086               	movwf	6
 14352  1F22  0859               	movf	secret_Main@data+1,w
 14353  1F23  0087               	movwf	7
 14354  1F24  314A               	addfsr 1,10
 14355  1F25  3000               	movlw	0
 14356  1F26  3FC0               	movwi [0]fsr1
 14357  1F27  3FC1               	movwi [1]fsr1
 14358                           
 14359                           ;secret_task.c: 139: data->noholdCount = 0;
 14360  1F28  0858               	movf	secret_Main@data,w
 14361  1F29  0086               	movwf	6
 14362  1F2A  0859               	movf	secret_Main@data+1,w
 14363  1F2B  0087               	movwf	7
 14364  1F2C  314C               	addfsr 1,12
 14365  1F2D  3000               	movlw	0
 14366  1F2E  3FC0               	movwi [0]fsr1
 14367  1F2F  3FC1               	movwi [1]fsr1
 14368                           
 14369                           ;secret_task.c: 140: data->delayTickCount = 300;
 14370  1F30  0858               	movf	secret_Main@data,w
 14371  1F31  0086               	movwf	6
 14372  1F32  0859               	movf	secret_Main@data+1,w
 14373  1F33  0087               	movwf	7
 14374  1F34  3142               	addfsr 1,2
 14375  1F35  302C               	movlw	44
 14376  1F36  3FC0               	movwi [0]fsr1
 14377  1F37  3001               	movlw	1
 14378  1F38  3FC1               	movwi [1]fsr1
 14379                           
 14380                           ;secret_task.c: 141: break;
 14381  1F39  2FF5               	goto	l8374
 14382  1F3A                     l8336:	
 14383                           ;secret_task.c: 142: case 4:
 14384                           
 14385                           
 14386                           ;secret_task.c: 144: if (data->holdCountX == 0){
 14387  1F3A  0858               	movf	secret_Main@data,w
 14388  1F3B  0086               	movwf	6
 14389  1F3C  0859               	movf	secret_Main@data+1,w
 14390  1F3D  0087               	movwf	7
 14391  1F3E  3148               	addfsr 1,8
 14392  1F3F  0016               	moviw fsr1++
 14393  1F40  0401               	iorwf	1,w
 14394  1F41  1D03               	btfss	3,2
 14395  1F42  2F52               	goto	l8340
 14396                           
 14397                           ;secret_task.c: 145: secret_found = secret_check(data, buttonPressed);
 14398  1F43  0859               	movf	secret_Main@data+1,w
 14399  1F44  00F8               	movwf	secret_check@data+1
 14400  1F45  0858               	movf	secret_Main@data,w
 14401  1F46  00F7               	movwf	secret_check@data
 14402  1F47  0857               	movf	secret_Main@buttonPressed,w
 14403  1F48  00D4               	movwf	??_secret_Main
 14404  1F49  0854               	movf	??_secret_Main,w
 14405  1F4A  00F9               	movwf	secret_check@buttonPressed
 14406  1F4B  319C  24AD  319E   	fcall	_secret_check
 14407  1F4E  0020               	movlb	0	; select bank0
 14408  1F4F  00D5               	movwf	??_secret_Main+1
 14409  1F50  0855               	movf	??_secret_Main+1,w
 14410  1F51  00D6               	movwf	secret_Main@secret_found
 14411  1F52                     l8340:	
 14412                           
 14413                           ;secret_task.c: 146: }
 14414                           ;secret_task.c: 147: data->holdCountA = 0;
 14415  1F52  0858               	movf	secret_Main@data,w
 14416  1F53  0086               	movwf	6
 14417  1F54  0859               	movf	secret_Main@data+1,w
 14418  1F55  0087               	movwf	7
 14419  1F56  3144               	addfsr 1,4
 14420  1F57  3000               	movlw	0
 14421  1F58  3FC0               	movwi [0]fsr1
 14422  1F59  3FC1               	movwi [1]fsr1
 14423                           
 14424                           ;secret_task.c: 148: data->holdCountB = 0;
 14425  1F5A  0858               	movf	secret_Main@data,w
 14426  1F5B  0086               	movwf	6
 14427  1F5C  0859               	movf	secret_Main@data+1,w
 14428  1F5D  0087               	movwf	7
 14429  1F5E  3146               	addfsr 1,6
 14430  1F5F  3000               	movlw	0
 14431  1F60  3FC0               	movwi [0]fsr1
 14432  1F61  3FC1               	movwi [1]fsr1
 14433                           
 14434                           ;secret_task.c: 149: data->holdCountX += 1;
 14435  1F62  0858               	movf	secret_Main@data,w
 14436  1F63  0086               	movwf	6
 14437  1F64  0859               	movf	secret_Main@data+1,w
 14438  1F65  0087               	movwf	7
 14439  1F66  3148               	addfsr 1,8
 14440  1F67  3001               	movlw	1
 14441  1F68  0781               	addwf	1,f
 14442  1F69  3141               	addfsr 1,1
 14443  1F6A  1803               	skipnc
 14444  1F6B  0A81               	incf	1,f
 14445                           
 14446                           ;secret_task.c: 150: data->holdCountY = 0;
 14447  1F6C  0858               	movf	secret_Main@data,w
 14448  1F6D  0086               	movwf	6
 14449  1F6E  0859               	movf	secret_Main@data+1,w
 14450  1F6F  0087               	movwf	7
 14451  1F70  314A               	addfsr 1,10
 14452  1F71  3000               	movlw	0
 14453  1F72  3FC0               	movwi [0]fsr1
 14454  1F73  3FC1               	movwi [1]fsr1
 14455                           
 14456                           ;secret_task.c: 151: data->noholdCount = 0;
 14457  1F74  0858               	movf	secret_Main@data,w
 14458  1F75  0086               	movwf	6
 14459  1F76  0859               	movf	secret_Main@data+1,w
 14460  1F77  0087               	movwf	7
 14461  1F78  314C               	addfsr 1,12
 14462  1F79  3000               	movlw	0
 14463  1F7A  3FC0               	movwi [0]fsr1
 14464  1F7B  3FC1               	movwi [1]fsr1
 14465                           
 14466                           ;secret_task.c: 152: data->delayTickCount = 300;
 14467  1F7C  0858               	movf	secret_Main@data,w
 14468  1F7D  0086               	movwf	6
 14469  1F7E  0859               	movf	secret_Main@data+1,w
 14470  1F7F  0087               	movwf	7
 14471  1F80  3142               	addfsr 1,2
 14472  1F81  302C               	movlw	44
 14473  1F82  3FC0               	movwi [0]fsr1
 14474  1F83  3001               	movlw	1
 14475  1F84  3FC1               	movwi [1]fsr1
 14476                           
 14477                           ;secret_task.c: 153: break;
 14478  1F85  2FF5               	goto	l8374
 14479  1F86                     l8352:	
 14480                           ;secret_task.c: 154: case 8:
 14481                           
 14482                           
 14483                           ;secret_task.c: 156: if (data->holdCountY == 0){
 14484  1F86  0858               	movf	secret_Main@data,w
 14485  1F87  0086               	movwf	6
 14486  1F88  0859               	movf	secret_Main@data+1,w
 14487  1F89  0087               	movwf	7
 14488  1F8A  314A               	addfsr 1,10
 14489  1F8B  0016               	moviw fsr1++
 14490  1F8C  0401               	iorwf	1,w
 14491  1F8D  1D03               	btfss	3,2
 14492  1F8E  2F9E               	goto	l8356
 14493                           
 14494                           ;secret_task.c: 157: secret_found = secret_check(data, buttonPressed);
 14495  1F8F  0859               	movf	secret_Main@data+1,w
 14496  1F90  00F8               	movwf	secret_check@data+1
 14497  1F91  0858               	movf	secret_Main@data,w
 14498  1F92  00F7               	movwf	secret_check@data
 14499  1F93  0857               	movf	secret_Main@buttonPressed,w
 14500  1F94  00D4               	movwf	??_secret_Main
 14501  1F95  0854               	movf	??_secret_Main,w
 14502  1F96  00F9               	movwf	secret_check@buttonPressed
 14503  1F97  319C  24AD  319E   	fcall	_secret_check
 14504  1F9A  0020               	movlb	0	; select bank0
 14505  1F9B  00D5               	movwf	??_secret_Main+1
 14506  1F9C  0855               	movf	??_secret_Main+1,w
 14507  1F9D  00D6               	movwf	secret_Main@secret_found
 14508  1F9E                     l8356:	
 14509                           
 14510                           ;secret_task.c: 158: }
 14511                           ;secret_task.c: 159: data->holdCountA = 0;
 14512  1F9E  0858               	movf	secret_Main@data,w
 14513  1F9F  0086               	movwf	6
 14514  1FA0  0859               	movf	secret_Main@data+1,w
 14515  1FA1  0087               	movwf	7
 14516  1FA2  3144               	addfsr 1,4
 14517  1FA3  3000               	movlw	0
 14518  1FA4  3FC0               	movwi [0]fsr1
 14519  1FA5  3FC1               	movwi [1]fsr1
 14520                           
 14521                           ;secret_task.c: 160: data->holdCountB = 0;
 14522  1FA6  0858               	movf	secret_Main@data,w
 14523  1FA7  0086               	movwf	6
 14524  1FA8  0859               	movf	secret_Main@data+1,w
 14525  1FA9  0087               	movwf	7
 14526  1FAA  3146               	addfsr 1,6
 14527  1FAB  3000               	movlw	0
 14528  1FAC  3FC0               	movwi [0]fsr1
 14529  1FAD  3FC1               	movwi [1]fsr1
 14530                           
 14531                           ;secret_task.c: 161: data->holdCountX = 0;
 14532  1FAE  0858               	movf	secret_Main@data,w
 14533  1FAF  0086               	movwf	6
 14534  1FB0  0859               	movf	secret_Main@data+1,w
 14535  1FB1  0087               	movwf	7
 14536  1FB2  3148               	addfsr 1,8
 14537  1FB3  3000               	movlw	0
 14538  1FB4  3FC0               	movwi [0]fsr1
 14539  1FB5  3FC1               	movwi [1]fsr1
 14540                           
 14541                           ;secret_task.c: 162: data->holdCountY += 1;
 14542  1FB6  0858               	movf	secret_Main@data,w
 14543  1FB7  0086               	movwf	6
 14544  1FB8  0859               	movf	secret_Main@data+1,w
 14545  1FB9  0087               	movwf	7
 14546  1FBA  314A               	addfsr 1,10
 14547  1FBB  3001               	movlw	1
 14548  1FBC  0781               	addwf	1,f
 14549  1FBD  3141               	addfsr 1,1
 14550  1FBE  1803               	skipnc
 14551  1FBF  0A81               	incf	1,f
 14552                           
 14553                           ;secret_task.c: 163: data->noholdCount = 0;
 14554  1FC0  0858               	movf	secret_Main@data,w
 14555  1FC1  0086               	movwf	6
 14556  1FC2  0859               	movf	secret_Main@data+1,w
 14557  1FC3  0087               	movwf	7
 14558  1FC4  314C               	addfsr 1,12
 14559  1FC5  3000               	movlw	0
 14560  1FC6  3FC0               	movwi [0]fsr1
 14561  1FC7  3FC1               	movwi [1]fsr1
 14562                           
 14563                           ;secret_task.c: 164: data->delayTickCount = 300;
 14564  1FC8  0858               	movf	secret_Main@data,w
 14565  1FC9  0086               	movwf	6
 14566  1FCA  0859               	movf	secret_Main@data+1,w
 14567  1FCB  0087               	movwf	7
 14568  1FCC  3142               	addfsr 1,2
 14569  1FCD  302C               	movlw	44
 14570  1FCE  3FC0               	movwi [0]fsr1
 14571  1FCF  3001               	movlw	1
 14572  1FD0  3FC1               	movwi [1]fsr1
 14573                           
 14574                           ;secret_task.c: 165: break;
 14575  1FD1  2FF5               	goto	l8374
 14576  1FD2                     l8368:	
 14577                           ;secret_task.c: 166: default:
 14578                           
 14579                           
 14580                           ;secret_task.c: 168: secret_check(data, 0);
 14581  1FD2  0859               	movf	secret_Main@data+1,w
 14582  1FD3  00F8               	movwf	secret_check@data+1
 14583  1FD4  0858               	movf	secret_Main@data,w
 14584  1FD5  00F7               	movwf	secret_check@data
 14585  1FD6  01F9               	clrf	secret_check@buttonPressed
 14586  1FD7  319C  24AD  319E   	fcall	_secret_check
 14587                           
 14588                           ;secret_task.c: 169: secret_clear(data);
 14589  1FDA  0020               	movlb	0	; select bank0
 14590  1FDB  0859               	movf	secret_Main@data+1,w
 14591  1FDC  00F2               	movwf	secret_clear@data+1
 14592  1FDD  0858               	movf	secret_Main@data,w
 14593  1FDE  00F1               	movwf	secret_clear@data
 14594  1FDF  31A2  22B3  319E   	fcall	_secret_clear
 14595                           
 14596                           ;secret_task.c: 170: }
 14597  1FE2  2FF5               	goto	l8374
 14598  1FE3                     l8372:	
 14599  1FE3  0020               	movlb	0	; select bank0
 14600  1FE4  0857               	movf	secret_Main@buttonPressed,w
 14601                           
 14602                           ; Switch size 1, requested type "space"
 14603                           ; Number of cases is 5, Range of values is 0 to 8
 14604                           ; switch strategies available:
 14605                           ; Name         Instructions Cycles
 14606                           ; simple_byte           16     9 (average)
 14607                           ; direct_byte           24     6 (fixed)
 14608                           ; jumptable            260     6 (fixed)
 14609                           ;	Chosen strategy is simple_byte
 14610  1FE5  3A00               	xorlw	0	; case 0
 14611  1FE6  1903               	skipnz
 14612  1FE7  2E51               	goto	l8286
 14613  1FE8  3A01               	xorlw	1	; case 1
 14614  1FE9  1903               	skipnz
 14615  1FEA  2EA2               	goto	l8304
 14616  1FEB  3A03               	xorlw	3	; case 2
 14617  1FEC  1903               	skipnz
 14618  1FED  2EEE               	goto	l8320
 14619  1FEE  3A06               	xorlw	6	; case 4
 14620  1FEF  1903               	skipnz
 14621  1FF0  2F3A               	goto	l8336
 14622  1FF1  3A0C               	xorlw	12	; case 8
 14623  1FF2  1903               	skipnz
 14624  1FF3  2F86               	goto	l8352
 14625  1FF4  2FD2               	goto	l8368
 14626  1FF5                     l8374:	
 14627                           
 14628                           ;secret_task.c: 173: if (secret_found){
 14629  1FF5  0020               	movlb	0	; select bank0
 14630  1FF6  0856               	movf	secret_Main@secret_found,w
 14631  1FF7  1903               	btfsc	3,2
 14632  1FF8  0008               	return
 14633                           
 14634                           ;secret_task.c: 174: secret_clear(data);
 14635  1FF9  0859               	movf	secret_Main@data+1,w
 14636  1FFA  00F2               	movwf	secret_clear@data+1
 14637  1FFB  0858               	movf	secret_Main@data,w
 14638  1FFC  00F1               	movwf	secret_clear@data
 14639  1FFD  31A2  22B3         	fcall	_secret_clear
 14640  1FFF  0008               	return
 14641  2000                     __end_of_secret_Main:	
 14642                           
 14643                           	psect	text14
 14644  142C                     __ptext14:	
 14645 ;; *************** function _locked_Main *****************
 14646 ;; Defined at:
 14647 ;;		line 85 in file "locked_task.c"
 14648 ;; Parameters:    Size  Location     Type
 14649 ;;  taskData        2   50[BANK0 ] PTR void 
 14650 ;;		 -> secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), 
 14651 ;;		 -> flashy_TaskData(30), NULL(0), 
 14652 ;; Auto vars:     Size  Location     Type
 14653 ;;  data            2   55[BANK0 ] PTR struct t_locked_task
 14654 ;;		 -> secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), 
 14655 ;;		 -> flashy_TaskData(30), NULL(0), 
 14656 ;;  buttonPresse    1   54[BANK0 ] unsigned char 
 14657 ;; Return value:  Size  Location     Type
 14658 ;;                  1    wreg      void 
 14659 ;; Registers used:
 14660 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14661 ;; Tracked objects:
 14662 ;;		On entry : 0/0
 14663 ;;		On exit  : 0/0
 14664 ;;		Unchanged: 0/0
 14665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14666 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14667 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14668 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14669 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14670 ;;Total ram usage:        7 bytes
 14671 ;; Hardware stack levels used:    1
 14672 ;; Hardware stack levels required when called:   11
 14673 ;; This function calls:
 14674 ;;		___lwmod
 14675 ;;		_locked_clear
 14676 ;;		_locked_get_lock_leds
 14677 ;;		_locked_get_unlock_leds
 14678 ;;		_locked_lock_leds
 14679 ;;		_locked_unlock_leds
 14680 ;;		_marquee
 14681 ;;		_nullifyBadge_buttonsGet
 14682 ;;		_nullifyBadge_userLedsSet
 14683 ;;		_slot_Setup
 14684 ;; This function is called by:
 14685 ;;		_main
 14686 ;;		_scheduler_TaskRun
 14687 ;; This function uses a non-reentrant model
 14688 ;;
 14689                           
 14690                           
 14691                           ;psect for function _locked_Main
 14692  142C                     _locked_Main:	
 14693                           
 14694                           ;locked_task.c: 86: struct t_locked_taskData *data = (struct t_locked_taskData *) taskDa
      +                          ta;
 14695                           
 14696                           ;incstack = 0
 14697                           ; Regs used in _locked_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14698  142C  0020               	movlb	0	; select bank0
 14699  142D  0853               	movf	locked_Main@taskData+1,w
 14700  142E  00D8               	movwf	locked_Main@data+1
 14701  142F  0852               	movf	locked_Main@taskData,w
 14702  1430  00D7               	movwf	locked_Main@data
 14703                           
 14704                           ;locked_task.c: 87: u8 buttonPressed;
 14705                           ;locked_task.c: 89: if ( currentTask != LOCKED_TASK ){
 14706  1431  3003               	movlw	3
 14707  1432  0021               	movlb	1	; select bank1
 14708  1433  0638               	xorwf	_currentTask^(0+128),w
 14709  1434  0439               	iorwf	(_currentTask+1)^(0+128),w
 14710  1435  1903               	btfsc	3,2
 14711  1436  2D44               	goto	l8246
 14712                           
 14713                           ;locked_task.c: 90: data->holdCountA = 1;
 14714  1437  0020               	movlb	0	; select bank0
 14715  1438  0857               	movf	locked_Main@data,w
 14716  1439  0086               	movwf	6
 14717  143A  0858               	movf	locked_Main@data+1,w
 14718  143B  0087               	movwf	7
 14719  143C  3143               	addfsr 1,3
 14720  143D  3001               	movlw	1
 14721  143E  3FC0               	movwi [0]fsr1
 14722  143F  3000               	movlw	0
 14723  1440  3FC1               	movwi [1]fsr1
 14724                           
 14725                           ;locked_task.c: 91: data->holdCountB = 1;
 14726  1441  0857               	movf	locked_Main@data,w
 14727  1442  0086               	movwf	6
 14728  1443  0858               	movf	locked_Main@data+1,w
 14729  1444  0087               	movwf	7
 14730  1445  3145               	addfsr 1,5
 14731  1446  3001               	movlw	1
 14732  1447  3FC0               	movwi [0]fsr1
 14733  1448  3000               	movlw	0
 14734  1449  3FC1               	movwi [1]fsr1
 14735                           
 14736                           ;locked_task.c: 92: data->holdCountX = 1;
 14737  144A  0857               	movf	locked_Main@data,w
 14738  144B  0086               	movwf	6
 14739  144C  0858               	movf	locked_Main@data+1,w
 14740  144D  0087               	movwf	7
 14741  144E  3147               	addfsr 1,7
 14742  144F  3001               	movlw	1
 14743  1450  3FC0               	movwi [0]fsr1
 14744  1451  3000               	movlw	0
 14745  1452  3FC1               	movwi [1]fsr1
 14746                           
 14747                           ;locked_task.c: 93: data->holdCountY = 1;
 14748  1453  0857               	movf	locked_Main@data,w
 14749  1454  0086               	movwf	6
 14750  1455  0858               	movf	locked_Main@data+1,w
 14751  1456  0087               	movwf	7
 14752  1457  3149               	addfsr 1,9
 14753  1458  3001               	movlw	1
 14754  1459  3FC0               	movwi [0]fsr1
 14755  145A  3000               	movlw	0
 14756  145B  3FC1               	movwi [1]fsr1
 14757                           
 14758                           ;locked_task.c: 94: return;
 14759  145C  0008               	return
 14760  145D                     l8202:	
 14761                           ;locked_task.c: 101: case LOCKED_UNLOCKING_STATE:
 14762                           
 14763                           ;locked_task.c: 95: }
 14764                           ;locked_task.c: 100: switch (data->state){
 14765                           
 14766                           
 14767                           ;locked_task.c: 102: badge_locked = 0;
 14768  145D  0021               	movlb	1	; select bank1
 14769  145E  01C4               	clrf	_badge_locked^(0+128)
 14770                           
 14771                           ;locked_task.c: 103: slot_Setup(slot_taskData);
 14772  145F  083B               	movf	(_slot_taskData+1)^(0+128),w
 14773  1460  0020               	movlb	0	; select bank0
 14774  1461  00B0               	movwf	slot_Setup@taskData+1
 14775  1462  0021               	movlb	1	; select bank1
 14776  1463  083A               	movf	_slot_taskData^(0+128),w
 14777  1464  0020               	movlb	0	; select bank0
 14778  1465  00AF               	movwf	slot_Setup@taskData
 14779  1466  31A7  2702  3194   	fcall	_slot_Setup
 14780                           
 14781                           ;locked_task.c: 104: marquee("UNLOCKING...", data->delayTickCount);
 14782  1469  305D               	movlw	low (STR_26| (0+32768))
 14783  146A  0020               	movlb	0	; select bank0
 14784  146B  00BA               	movwf	marquee@string
 14785  146C  30B0               	movlw	high (STR_26| (0+32768))
 14786  146D  00BB               	movwf	marquee@string+1
 14787  146E  0857               	movf	locked_Main@data,w
 14788  146F  0086               	movwf	6
 14789  1470  0858               	movf	locked_Main@data+1,w
 14790  1471  0087               	movwf	7
 14791  1472  3141               	addfsr 1,1
 14792  1473  3F40               	moviw [0]fsr1
 14793  1474  00BC               	movwf	marquee@count
 14794  1475  3F41               	moviw [1]fsr1
 14795  1476  00BD               	movwf	marquee@count+1
 14796  1477  319B  2338  3194   	fcall	_marquee
 14797                           
 14798                           ;locked_task.c: 106: if (data->delayTickCount % 75 == 0){
 14799  147A  304B               	movlw	75
 14800  147B  0020               	movlb	0	; select bank0
 14801  147C  00AB               	movwf	___lwmod@divisor
 14802  147D  3000               	movlw	0
 14803  147E  00AC               	movwf	___lwmod@divisor+1
 14804  147F  0857               	movf	locked_Main@data,w
 14805  1480  0086               	movwf	6
 14806  1481  0858               	movf	locked_Main@data+1,w
 14807  1482  0087               	movwf	7
 14808  1483  3141               	addfsr 1,1
 14809  1484  3F40               	moviw [0]fsr1
 14810  1485  00AD               	movwf	___lwmod@dividend
 14811  1486  3F41               	moviw [1]fsr1
 14812  1487  00AE               	movwf	___lwmod@dividend+1
 14813  1488  31A1  21F4  3194   	fcall	___lwmod
 14814  148B  0020               	movlb	0	; select bank0
 14815  148C  082B               	movf	?___lwmod,w
 14816  148D  042C               	iorwf	?___lwmod+1,w
 14817  148E  1D03               	btfss	3,2
 14818  148F  2C9A               	goto	l8212
 14819                           
 14820                           ;locked_task.c: 107: locked_leds = locked_lock_base_leds | locked_get_unlock_leds();
 14821  1490  31AF  27E7  3194   	fcall	_locked_get_unlock_leds
 14822  1493  0021               	movlb	1	; select bank1
 14823  1494  085F               	movf	_locked_lock_base_leds^(0+128),w
 14824  1495  0471               	iorwf	?_locked_get_unlock_leds,w
 14825  1496  00A0               	movwf	_locked_leds^(0+128)
 14826  1497  0860               	movf	(_locked_lock_base_leds+1)^(0+128),w
 14827  1498  0472               	iorwf	?_locked_get_unlock_leds+1,w
 14828  1499  00A1               	movwf	(_locked_leds+1)^(0+128)
 14829  149A                     l8212:	
 14830                           
 14831                           ;locked_task.c: 108: }
 14832                           ;locked_task.c: 111: if (data->delayTickCount == 375){
 14833  149A  0020               	movlb	0	; select bank0
 14834  149B  0857               	movf	locked_Main@data,w
 14835  149C  0086               	movwf	6
 14836  149D  0858               	movf	locked_Main@data+1,w
 14837  149E  0087               	movwf	7
 14838  149F  3141               	addfsr 1,1
 14839  14A0  0016               	moviw fsr1++
 14840  14A1  3A77               	xorlw	119
 14841  14A2  00D4               	movwf	??_locked_Main
 14842  14A3  0016               	moviw fsr1++
 14843  14A4  3A01               	xorlw	1
 14844  14A5  04D4               	iorwf	??_locked_Main,f
 14845  14A6  1D03               	btfss	3,2
 14846  14A7  2D0A               	goto	l8232
 14847                           
 14848                           ;locked_task.c: 112: data->state = LOCKED_UNLOCKED_STATE;
 14849  14A8  0857               	movf	locked_Main@data,w
 14850  14A9  3E0D               	addlw	13
 14851  14AA  00D4               	movwf	??_locked_Main
 14852  14AB  3000               	movlw	0
 14853  14AC  3D58               	addwfc	locked_Main@data+1,w
 14854  14AD  00D5               	movwf	??_locked_Main+1
 14855  14AE  0854               	movf	??_locked_Main,w
 14856  14AF  0086               	movwf	6
 14857  14B0  0855               	movf	??_locked_Main+1,w
 14858  14B1  0087               	movwf	7
 14859  14B2  3002               	movlw	2
 14860  14B3  0081               	movwf	1
 14861                           
 14862                           ;locked_task.c: 113: data->delayTickCount = 0;
 14863  14B4  0857               	movf	locked_Main@data,w
 14864  14B5  0086               	movwf	6
 14865  14B6  0858               	movf	locked_Main@data+1,w
 14866  14B7  0087               	movwf	7
 14867  14B8  3141               	addfsr 1,1
 14868  14B9  3000               	movlw	0
 14869  14BA  3FC0               	movwi [0]fsr1
 14870  14BB  3FC1               	movwi [1]fsr1
 14871  14BC  2D58               	goto	l8248
 14872  14BD                     l8220:	
 14873                           ;locked_task.c: 119: case LOCKED_LOCKING_STATE:
 14874                           
 14875                           ;locked_task.c: 117: }
 14876                           ;locked_task.c: 118: break;
 14877                           
 14878                           ;locked_task.c: 115: else {
 14879                           ;locked_task.c: 116: data->delayTickCount += 1;
 14880                           
 14881                           ;locked_task.c: 114: }
 14882                           
 14883                           
 14884                           ;locked_task.c: 120: marquee("LOCKING...", data->delayTickCount);
 14885  14BD  305F               	movlw	low ((STR_26+2)| (0+32768))
 14886  14BE  00BA               	movwf	marquee@string
 14887  14BF  30B0               	movlw	high ((STR_26+2)| (0+32768))
 14888  14C0  00BB               	movwf	marquee@string+1
 14889  14C1  0857               	movf	locked_Main@data,w
 14890  14C2  0086               	movwf	6
 14891  14C3  0858               	movf	locked_Main@data+1,w
 14892  14C4  0087               	movwf	7
 14893  14C5  3141               	addfsr 1,1
 14894  14C6  3F40               	moviw [0]fsr1
 14895  14C7  00BC               	movwf	marquee@count
 14896  14C8  3F41               	moviw [1]fsr1
 14897  14C9  00BD               	movwf	marquee@count+1
 14898  14CA  319B  2338  3194   	fcall	_marquee
 14899                           
 14900                           ;locked_task.c: 122: if (data->delayTickCount % 75 == 0){
 14901  14CD  304B               	movlw	75
 14902  14CE  0020               	movlb	0	; select bank0
 14903  14CF  00AB               	movwf	___lwmod@divisor
 14904  14D0  3000               	movlw	0
 14905  14D1  00AC               	movwf	___lwmod@divisor+1
 14906  14D2  0857               	movf	locked_Main@data,w
 14907  14D3  0086               	movwf	6
 14908  14D4  0858               	movf	locked_Main@data+1,w
 14909  14D5  0087               	movwf	7
 14910  14D6  3141               	addfsr 1,1
 14911  14D7  3F40               	moviw [0]fsr1
 14912  14D8  00AD               	movwf	___lwmod@dividend
 14913  14D9  3F41               	moviw [1]fsr1
 14914  14DA  00AE               	movwf	___lwmod@dividend+1
 14915  14DB  31A1  21F4  3194   	fcall	___lwmod
 14916  14DE  0020               	movlb	0	; select bank0
 14917  14DF  082B               	movf	?___lwmod,w
 14918  14E0  042C               	iorwf	?___lwmod+1,w
 14919  14E1  1D03               	btfss	3,2
 14920  14E2  2CED               	goto	l8226
 14921                           
 14922                           ;locked_task.c: 123: locked_leds = locked_lock_base_leds | locked_get_lock_leds();
 14923  14E3  31A1  2130  3194   	fcall	_locked_get_lock_leds
 14924  14E6  0021               	movlb	1	; select bank1
 14925  14E7  085F               	movf	_locked_lock_base_leds^(0+128),w
 14926  14E8  0471               	iorwf	?_locked_get_lock_leds,w
 14927  14E9  00A0               	movwf	_locked_leds^(0+128)
 14928  14EA  0860               	movf	(_locked_lock_base_leds+1)^(0+128),w
 14929  14EB  0472               	iorwf	?_locked_get_lock_leds+1,w
 14930  14EC  00A1               	movwf	(_locked_leds+1)^(0+128)
 14931  14ED                     l8226:	
 14932                           
 14933                           ;locked_task.c: 124: }
 14934                           ;locked_task.c: 127: if (data->delayTickCount == 375){
 14935  14ED  0020               	movlb	0	; select bank0
 14936  14EE  0857               	movf	locked_Main@data,w
 14937  14EF  0086               	movwf	6
 14938  14F0  0858               	movf	locked_Main@data+1,w
 14939  14F1  0087               	movwf	7
 14940  14F2  3141               	addfsr 1,1
 14941  14F3  0016               	moviw fsr1++
 14942  14F4  3A77               	xorlw	119
 14943  14F5  00D4               	movwf	??_locked_Main
 14944  14F6  0016               	moviw fsr1++
 14945  14F7  3A01               	xorlw	1
 14946  14F8  04D4               	iorwf	??_locked_Main,f
 14947  14F9  1D03               	btfss	3,2
 14948  14FA  2D0A               	goto	l8232
 14949                           
 14950                           ;locked_task.c: 128: data->state = LOCKED_LOCKED_STATE;
 14951  14FB  0857               	movf	locked_Main@data,w
 14952  14FC  0086               	movwf	6
 14953  14FD  0858               	movf	locked_Main@data+1,w
 14954  14FE  0087               	movwf	7
 14955  14FF  314D               	addfsr 1,13
 14956  1500  0181               	clrf	1
 14957                           
 14958                           ;locked_task.c: 129: data->delayTickCount = 0;
 14959  1501  0857               	movf	locked_Main@data,w
 14960  1502  0086               	movwf	6
 14961  1503  0858               	movf	locked_Main@data+1,w
 14962  1504  0087               	movwf	7
 14963  1505  3141               	addfsr 1,1
 14964  1506  3000               	movlw	0
 14965  1507  3FC0               	movwi [0]fsr1
 14966  1508  3FC1               	movwi [1]fsr1
 14967                           
 14968                           ;locked_task.c: 130: }
 14969  1509  2D58               	goto	l8248
 14970  150A                     l8232:	
 14971                           
 14972                           ;locked_task.c: 131: else {
 14973                           ;locked_task.c: 132: data->delayTickCount += 1;
 14974  150A  0857               	movf	locked_Main@data,w
 14975  150B  0086               	movwf	6
 14976  150C  0858               	movf	locked_Main@data+1,w
 14977  150D  0087               	movwf	7
 14978  150E  3141               	addfsr 1,1
 14979  150F  3001               	movlw	1
 14980  1510  0781               	addwf	1,f
 14981  1511  3141               	addfsr 1,1
 14982  1512  1803               	skipnc
 14983  1513  0A81               	incf	1,f
 14984                           
 14985                           ;locked_task.c: 133: }
 14986                           ;locked_task.c: 134: break;
 14987  1514  2D58               	goto	l8248
 14988  1515                     l8234:	
 14989                           ;locked_task.c: 135: case LOCKED_UNLOCKED_STATE:
 14990                           
 14991                           
 14992                           ;locked_task.c: 136: badge_locked = 0;
 14993  1515  0021               	movlb	1	; select bank1
 14994  1516  01C4               	clrf	_badge_locked^(0+128)
 14995                           
 14996                           ;locked_task.c: 138: marquee("OPEN", data->delayTickCount);
 14997  1517  3025               	movlw	low (STR_28| (0+32768))
 14998  1518  0020               	movlb	0	; select bank0
 14999  1519  00BA               	movwf	marquee@string
 15000  151A  30B1               	movlw	high (STR_28| (0+32768))
 15001  151B  00BB               	movwf	marquee@string+1
 15002  151C  0857               	movf	locked_Main@data,w
 15003  151D  0086               	movwf	6
 15004  151E  0858               	movf	locked_Main@data+1,w
 15005  151F  0087               	movwf	7
 15006  1520  3141               	addfsr 1,1
 15007  1521  3F40               	moviw [0]fsr1
 15008  1522  00BC               	movwf	marquee@count
 15009  1523  3F41               	moviw [1]fsr1
 15010  1524  00BD               	movwf	marquee@count+1
 15011  1525  319B  2338  3194   	fcall	_marquee
 15012                           
 15013                           ;locked_task.c: 139: locked_unlock_leds();
 15014  1528  31AF  2750  3194   	fcall	_locked_unlock_leds
 15015                           
 15016                           ;locked_task.c: 140: break;
 15017  152B  2D58               	goto	l8248
 15018  152C                     l1254:	
 15019                           ;locked_task.c: 141: case LOCKED_LOCKED_STATE:
 15020                           
 15021                           
 15022                           ;locked_task.c: 142: badge_locked = 1;
 15023  152C  0021               	movlb	1	; select bank1
 15024  152D  01C4               	clrf	_badge_locked^(0+128)
 15025  152E  0AC4               	incf	_badge_locked^(0+128),f
 15026                           
 15027                           ;locked_task.c: 143: marquee("LOCK", data->delayTickCount);
 15028  152F  3020               	movlw	low (STR_29| (0+32768))
 15029  1530  0020               	movlb	0	; select bank0
 15030  1531  00BA               	movwf	marquee@string
 15031  1532  30B1               	movlw	high (STR_29| (0+32768))
 15032  1533  00BB               	movwf	marquee@string+1
 15033  1534  0857               	movf	locked_Main@data,w
 15034  1535  0086               	movwf	6
 15035  1536  0858               	movf	locked_Main@data+1,w
 15036  1537  0087               	movwf	7
 15037  1538  3141               	addfsr 1,1
 15038  1539  3F40               	moviw [0]fsr1
 15039  153A  00BC               	movwf	marquee@count
 15040  153B  3F41               	moviw [1]fsr1
 15041  153C  00BD               	movwf	marquee@count+1
 15042  153D  319B  2338  3194   	fcall	_marquee
 15043                           
 15044                           ;locked_task.c: 145: locked_lock_leds();
 15045  1540  31A0  202A  3194   	fcall	_locked_lock_leds
 15046                           
 15047                           ;locked_task.c: 147: }
 15048                           
 15049                           ;locked_task.c: 146: break;
 15050  1543  2D58               	goto	l8248
 15051  1544                     l8246:	
 15052  1544  0020               	movlb	0	; select bank0
 15053  1545  0857               	movf	locked_Main@data,w
 15054  1546  0086               	movwf	6
 15055  1547  0858               	movf	locked_Main@data+1,w
 15056  1548  0087               	movwf	7
 15057  1549  314D               	addfsr 1,13
 15058  154A  0801               	movf	1,w
 15059                           
 15060                           ; Switch size 1, requested type "space"
 15061                           ; Number of cases is 4, Range of values is 0 to 3
 15062                           ; switch strategies available:
 15063                           ; Name         Instructions Cycles
 15064                           ; simple_byte           13     7 (average)
 15065                           ; direct_byte           14     6 (fixed)
 15066                           ; jumptable            260     6 (fixed)
 15067                           ;	Chosen strategy is simple_byte
 15068  154B  3A00               	xorlw	0	; case 0
 15069  154C  1903               	skipnz
 15070  154D  2D2C               	goto	l1254
 15071  154E  3A01               	xorlw	1	; case 1
 15072  154F  1903               	skipnz
 15073  1550  2CBD               	goto	l8220
 15074  1551  3A03               	xorlw	3	; case 2
 15075  1552  1903               	skipnz
 15076  1553  2D15               	goto	l8234
 15077  1554  3A01               	xorlw	1	; case 3
 15078  1555  1903               	skipnz
 15079  1556  2C5D               	goto	l8202
 15080  1557  2D58               	goto	l8248
 15081  1558                     l8248:	
 15082                           
 15083                           ;locked_task.c: 148: nullifyBadge_userLedsSet(data->badge, locked_leds);
 15084  1558  0021               	movlb	1	; select bank1
 15085  1559  0821               	movf	(_locked_leds+1)^(0+128),w
 15086  155A  0020               	movlb	0	; select bank0
 15087  155B  00AE               	movwf	nullifyBadge_userLedsSet@userLedData+1
 15088  155C  0021               	movlb	1	; select bank1
 15089  155D  0820               	movf	_locked_leds^(0+128),w
 15090  155E  0020               	movlb	0	; select bank0
 15091  155F  00AD               	movwf	nullifyBadge_userLedsSet@userLedData
 15092  1560  0857               	movf	locked_Main@data,w
 15093  1561  0086               	movwf	6
 15094  1562  0858               	movf	locked_Main@data+1,w
 15095  1563  0087               	movwf	7
 15096  1564  0801               	movf	1,w
 15097  1565  31AF  2709  3194   	fcall	_nullifyBadge_userLedsSet
 15098                           
 15099                           ;locked_task.c: 151: buttonPressed = nullifyBadge_buttonsGet();
 15100  1568  31A2  2250  3194   	fcall	_nullifyBadge_buttonsGet
 15101  156B  0020               	movlb	0	; select bank0
 15102  156C  00D4               	movwf	??_locked_Main
 15103  156D  0854               	movf	??_locked_Main,w
 15104  156E  00D6               	movwf	locked_Main@buttonPressed
 15105                           
 15106                           ;locked_task.c: 152: switch (buttonPressed) {
 15107  156F  2E00               	goto	l8278
 15108  1570                     l8252:	
 15109                           ;locked_task.c: 153: case 4:
 15110                           
 15111                           
 15112                           ;locked_task.c: 154: locked_clear(data);
 15113  1570  0858               	movf	locked_Main@data+1,w
 15114  1571  00BA               	movwf	locked_clear@data+1
 15115  1572  0857               	movf	locked_Main@data,w
 15116  1573  00B9               	movwf	locked_clear@data
 15117  1574  31A4  24BF         	fcall	_locked_clear
 15118                           
 15119                           ;locked_task.c: 155: currentTask = MENU_TASK;
 15120  1576  0021               	movlb	1	; select bank1
 15121  1577  01B8               	clrf	_currentTask^(0+128)
 15122  1578  01B9               	clrf	(_currentTask+1)^(0+128)
 15123                           
 15124                           ;locked_task.c: 156: break;
 15125  1579  0008               	return
 15126  157A                     l8256:	
 15127                           ;locked_task.c: 157: case 8:
 15128                           
 15129                           
 15130                           ;locked_task.c: 158: if (data->holdCountY == 0){
 15131  157A  0020               	movlb	0	; select bank0
 15132  157B  0857               	movf	locked_Main@data,w
 15133  157C  0086               	movwf	6
 15134  157D  0858               	movf	locked_Main@data+1,w
 15135  157E  0087               	movwf	7
 15136  157F  3149               	addfsr 1,9
 15137  1580  0016               	moviw fsr1++
 15138  1581  0401               	iorwf	1,w
 15139  1582  1D03               	btfss	3,2
 15140  1583  2DAA               	goto	l8266
 15141                           
 15142                           ;locked_task.c: 161: data->delayTickCount = 0;
 15143  1584  0857               	movf	locked_Main@data,w
 15144  1585  0086               	movwf	6
 15145  1586  0858               	movf	locked_Main@data+1,w
 15146  1587  0087               	movwf	7
 15147  1588  3141               	addfsr 1,1
 15148  1589  3000               	movlw	0
 15149  158A  3FC0               	movwi [0]fsr1
 15150  158B  3FC1               	movwi [1]fsr1
 15151                           
 15152                           ;locked_task.c: 162: if (badge_locked){
 15153  158C  0021               	movlb	1	; select bank1
 15154  158D  0844               	movf	_badge_locked^(0+128),w
 15155  158E  1903               	btfsc	3,2
 15156  158F  2D9D               	goto	l8264
 15157                           
 15158                           ;locked_task.c: 164: data->state = LOCKED_UNLOCKING_STATE;
 15159  1590  0020               	movlb	0	; select bank0
 15160  1591  0857               	movf	locked_Main@data,w
 15161  1592  3E0D               	addlw	13
 15162  1593  00D4               	movwf	??_locked_Main
 15163  1594  3000               	movlw	0
 15164  1595  3D58               	addwfc	locked_Main@data+1,w
 15165  1596  00D5               	movwf	??_locked_Main+1
 15166  1597  0854               	movf	??_locked_Main,w
 15167  1598  0086               	movwf	6
 15168  1599  0855               	movf	??_locked_Main+1,w
 15169  159A  0087               	movwf	7
 15170  159B  3003               	movlw	3
 15171  159C  2DA9               	goto	L3
 15172  159D                     l8264:	
 15173                           ;locked_task.c: 165: }
 15174                           
 15175                           
 15176                           ;locked_task.c: 166: else {
 15177                           ;locked_task.c: 168: data->state = LOCKED_LOCKING_STATE;
 15178  159D  0020               	movlb	0	; select bank0
 15179  159E  0857               	movf	locked_Main@data,w
 15180  159F  3E0D               	addlw	13
 15181  15A0  00D4               	movwf	??_locked_Main
 15182  15A1  3000               	movlw	0
 15183  15A2  3D58               	addwfc	locked_Main@data+1,w
 15184  15A3  00D5               	movwf	??_locked_Main+1
 15185  15A4  0854               	movf	??_locked_Main,w
 15186  15A5  0086               	movwf	6
 15187  15A6  0855               	movf	??_locked_Main+1,w
 15188  15A7  0087               	movwf	7
 15189  15A8  3001               	movlw	1
 15190  15A9                     L3:	
 15191  15A9  0081               	movwf	1
 15192  15AA                     l8266:	
 15193                           
 15194                           ;locked_task.c: 169: }
 15195                           ;locked_task.c: 170: }
 15196                           ;locked_task.c: 171: data->holdCountA = 0;
 15197  15AA  0857               	movf	locked_Main@data,w
 15198  15AB  0086               	movwf	6
 15199  15AC  0858               	movf	locked_Main@data+1,w
 15200  15AD  0087               	movwf	7
 15201  15AE  3143               	addfsr 1,3
 15202  15AF  3000               	movlw	0
 15203  15B0  3FC0               	movwi [0]fsr1
 15204  15B1  3FC1               	movwi [1]fsr1
 15205                           
 15206                           ;locked_task.c: 172: data->holdCountB = 0;
 15207  15B2  0857               	movf	locked_Main@data,w
 15208  15B3  0086               	movwf	6
 15209  15B4  0858               	movf	locked_Main@data+1,w
 15210  15B5  0087               	movwf	7
 15211  15B6  3145               	addfsr 1,5
 15212  15B7  3000               	movlw	0
 15213  15B8  3FC0               	movwi [0]fsr1
 15214  15B9  3FC1               	movwi [1]fsr1
 15215                           
 15216                           ;locked_task.c: 173: data->holdCountX = 0;
 15217  15BA  0857               	movf	locked_Main@data,w
 15218  15BB  0086               	movwf	6
 15219  15BC  0858               	movf	locked_Main@data+1,w
 15220  15BD  0087               	movwf	7
 15221  15BE  3147               	addfsr 1,7
 15222  15BF  3000               	movlw	0
 15223  15C0  3FC0               	movwi [0]fsr1
 15224  15C1  3FC1               	movwi [1]fsr1
 15225                           
 15226                           ;locked_task.c: 174: data->holdCountY += 1;
 15227  15C2  0857               	movf	locked_Main@data,w
 15228  15C3  0086               	movwf	6
 15229  15C4  0858               	movf	locked_Main@data+1,w
 15230  15C5  0087               	movwf	7
 15231  15C6  3149               	addfsr 1,9
 15232  15C7  3001               	movlw	1
 15233  15C8  0781               	addwf	1,f
 15234  15C9  3141               	addfsr 1,1
 15235  15CA  1803               	skipnc
 15236  15CB  0A81               	incf	1,f
 15237                           
 15238                           ;locked_task.c: 175: data->noholdCount = 0;
 15239  15CC  0857               	movf	locked_Main@data,w
 15240  15CD  0086               	movwf	6
 15241  15CE  0858               	movf	locked_Main@data+1,w
 15242  15CF  0087               	movwf	7
 15243  15D0  314B               	addfsr 1,11
 15244  15D1  3000               	movlw	0
 15245  15D2  3FC0               	movwi [0]fsr1
 15246  15D3  3FC1               	movwi [1]fsr1
 15247                           
 15248                           ;locked_task.c: 176: break;
 15249  15D4  0008               	return
 15250  15D5                     l8274:	
 15251                           ;locked_task.c: 177: default:
 15252                           
 15253                           
 15254                           ;locked_task.c: 178: data->holdCountA = 0;
 15255  15D5  0857               	movf	locked_Main@data,w
 15256  15D6  0086               	movwf	6
 15257  15D7  0858               	movf	locked_Main@data+1,w
 15258  15D8  0087               	movwf	7
 15259  15D9  3143               	addfsr 1,3
 15260  15DA  3000               	movlw	0
 15261  15DB  3FC0               	movwi [0]fsr1
 15262  15DC  3FC1               	movwi [1]fsr1
 15263                           
 15264                           ;locked_task.c: 179: data->holdCountB = 0;
 15265  15DD  0857               	movf	locked_Main@data,w
 15266  15DE  0086               	movwf	6
 15267  15DF  0858               	movf	locked_Main@data+1,w
 15268  15E0  0087               	movwf	7
 15269  15E1  3145               	addfsr 1,5
 15270  15E2  3000               	movlw	0
 15271  15E3  3FC0               	movwi [0]fsr1
 15272  15E4  3FC1               	movwi [1]fsr1
 15273                           
 15274                           ;locked_task.c: 180: data->holdCountX = 0;
 15275  15E5  0857               	movf	locked_Main@data,w
 15276  15E6  0086               	movwf	6
 15277  15E7  0858               	movf	locked_Main@data+1,w
 15278  15E8  0087               	movwf	7
 15279  15E9  3147               	addfsr 1,7
 15280  15EA  3000               	movlw	0
 15281  15EB  3FC0               	movwi [0]fsr1
 15282  15EC  3FC1               	movwi [1]fsr1
 15283                           
 15284                           ;locked_task.c: 181: data->holdCountY = 0;
 15285  15ED  0857               	movf	locked_Main@data,w
 15286  15EE  0086               	movwf	6
 15287  15EF  0858               	movf	locked_Main@data+1,w
 15288  15F0  0087               	movwf	7
 15289  15F1  3149               	addfsr 1,9
 15290  15F2  3000               	movlw	0
 15291  15F3  3FC0               	movwi [0]fsr1
 15292  15F4  3FC1               	movwi [1]fsr1
 15293                           
 15294                           ;locked_task.c: 182: data->noholdCount += 1;
 15295  15F5  0857               	movf	locked_Main@data,w
 15296  15F6  0086               	movwf	6
 15297  15F7  0858               	movf	locked_Main@data+1,w
 15298  15F8  0087               	movwf	7
 15299  15F9  314B               	addfsr 1,11
 15300  15FA  3001               	movlw	1
 15301  15FB  0781               	addwf	1,f
 15302  15FC  3141               	addfsr 1,1
 15303  15FD  1803               	skipnc
 15304  15FE  0A81               	incf	1,f
 15305                           
 15306                           ;locked_task.c: 183: }
 15307  15FF  0008               	return
 15308  1600                     l8278:	
 15309  1600  0856               	movf	locked_Main@buttonPressed,w
 15310                           
 15311                           ; Switch size 1, requested type "space"
 15312                           ; Number of cases is 2, Range of values is 4 to 8
 15313                           ; switch strategies available:
 15314                           ; Name         Instructions Cycles
 15315                           ; simple_byte            7     4 (average)
 15316                           ; direct_byte           19     9 (fixed)
 15317                           ; jumptable            263     9 (fixed)
 15318                           ;	Chosen strategy is simple_byte
 15319  1601  3A04               	xorlw	4	; case 4
 15320  1602  1903               	skipnz
 15321  1603  2D70               	goto	l8252
 15322  1604  3A0C               	xorlw	12	; case 8
 15323  1605  1903               	skipnz
 15324  1606  2D7A               	goto	l8256
 15325  1607  2DD5               	goto	l8274
 15326  1608  0008               	return
 15327  1609                     __end_of_locked_Main:	
 15328                           
 15329                           	psect	text15
 15330  1609                     __ptext15:	
 15331 ;; *************** function _menu_Main *****************
 15332 ;; Defined at:
 15333 ;;		line 55 in file "menu_task.c"
 15334 ;; Parameters:    Size  Location     Type
 15335 ;;  taskData        2   50[BANK0 ] PTR void 
 15336 ;;		 -> secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), 
 15337 ;;		 -> flashy_TaskData(30), NULL(0), 
 15338 ;; Auto vars:     Size  Location     Type
 15339 ;;  data            2   55[BANK0 ] PTR struct t_menu_taskDa
 15340 ;;		 -> secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), 
 15341 ;;		 -> flashy_TaskData(30), NULL(0), 
 15342 ;;  buttonPresse    1   54[BANK0 ] unsigned char 
 15343 ;; Return value:  Size  Location     Type
 15344 ;;                  1    wreg      void 
 15345 ;; Registers used:
 15346 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15347 ;; Tracked objects:
 15348 ;;		On entry : 0/0
 15349 ;;		On exit  : 0/0
 15350 ;;		Unchanged: 0/0
 15351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15352 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15353 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15354 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15355 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15356 ;;Total ram usage:        7 bytes
 15357 ;; Hardware stack levels used:    1
 15358 ;; Hardware stack levels required when called:   12
 15359 ;; This function calls:
 15360 ;;		_menu_clear
 15361 ;;		_menu_display_option
 15362 ;;		_menu_run_option
 15363 ;;		_nullifyBadge_buttonsGet
 15364 ;;		_slot_Setup
 15365 ;; This function is called by:
 15366 ;;		_main
 15367 ;;		_scheduler_TaskRun
 15368 ;; This function uses a non-reentrant model
 15369 ;;
 15370                           
 15371                           
 15372                           ;psect for function _menu_Main
 15373  1609                     _menu_Main:	
 15374                           
 15375                           ;menu_task.c: 56: struct t_menu_taskData *data = (struct t_menu_taskData *) taskData;
 15376                           
 15377                           ;incstack = 0
 15378                           ; Regs used in _menu_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15379  1609  0020               	movlb	0	; select bank0
 15380  160A  0853               	movf	menu_Main@taskData+1,w
 15381  160B  00D8               	movwf	menu_Main@data+1
 15382  160C  0852               	movf	menu_Main@taskData,w
 15383  160D  00D7               	movwf	menu_Main@data
 15384                           
 15385                           ;menu_task.c: 57: u8 buttonPressed;
 15386                           ;menu_task.c: 59: if ( currentTask != MENU_TASK ){
 15387  160E  0021               	movlb	1	; select bank1
 15388  160F  0838               	movf	_currentTask^(0+128),w
 15389  1610  0439               	iorwf	(_currentTask+1)^(0+128),w
 15390  1611  1903               	btfsc	3,2
 15391  1612  2E8D               	goto	l7656
 15392                           
 15393                           ;menu_task.c: 61: buttonPressed = nullifyBadge_buttonsGet();
 15394  1613  31A2  2250  3196   	fcall	_nullifyBadge_buttonsGet
 15395  1616  0020               	movlb	0	; select bank0
 15396  1617  00D4               	movwf	??_menu_Main
 15397  1618  0854               	movf	??_menu_Main,w
 15398  1619  00D6               	movwf	menu_Main@buttonPressed
 15399                           
 15400                           ;menu_task.c: 62: switch (buttonPressed) {
 15401  161A  2E87               	goto	l7654
 15402  161B                     l7632:	
 15403                           ;menu_task.c: 63: case 1 | 2 | 8:
 15404                           
 15405                           
 15406                           ;menu_task.c: 64: currentTask = MENU_TASK;
 15407  161B  0021               	movlb	1	; select bank1
 15408  161C  01B8               	clrf	_currentTask^(0+128)
 15409  161D  01B9               	clrf	(_currentTask+1)^(0+128)
 15410                           
 15411                           ;menu_task.c: 65: menu_clear(data);
 15412  161E  0020               	movlb	0	; select bank0
 15413  161F  0858               	movf	menu_Main@data+1,w
 15414  1620  00BA               	movwf	menu_clear@data+1
 15415  1621  0857               	movf	menu_Main@data,w
 15416  1622  00B9               	movwf	menu_clear@data
 15417  1623  31A5  258A  3196   	fcall	_menu_clear
 15418                           
 15419                           ;menu_task.c: 68: slot_Setup(slot_taskData);
 15420  1626  0021               	movlb	1	; select bank1
 15421  1627  083B               	movf	(_slot_taskData+1)^(0+128),w
 15422  1628  0020               	movlb	0	; select bank0
 15423  1629  00B0               	movwf	slot_Setup@taskData+1
 15424  162A  0021               	movlb	1	; select bank1
 15425  162B  083A               	movf	_slot_taskData^(0+128),w
 15426  162C  0020               	movlb	0	; select bank0
 15427  162D  00AF               	movwf	slot_Setup@taskData
 15428  162E  31A7  2702  3196   	fcall	_slot_Setup
 15429                           
 15430                           ;menu_task.c: 71: data->holdCountA = 1;
 15431  1631  0020               	movlb	0	; select bank0
 15432  1632  0857               	movf	menu_Main@data,w
 15433  1633  0086               	movwf	6
 15434  1634  0858               	movf	menu_Main@data+1,w
 15435  1635  0087               	movwf	7
 15436  1636  3144               	addfsr 1,4
 15437  1637  3001               	movlw	1
 15438  1638  3FC0               	movwi [0]fsr1
 15439  1639  3000               	movlw	0
 15440  163A  3FC1               	movwi [1]fsr1
 15441                           
 15442                           ;menu_task.c: 72: data->holdCountB = 1;
 15443  163B  0857               	movf	menu_Main@data,w
 15444  163C  0086               	movwf	6
 15445  163D  0858               	movf	menu_Main@data+1,w
 15446  163E  0087               	movwf	7
 15447  163F  3146               	addfsr 1,6
 15448  1640  3001               	movlw	1
 15449  1641  3FC0               	movwi [0]fsr1
 15450  1642  3000               	movlw	0
 15451  1643  3FC1               	movwi [1]fsr1
 15452                           
 15453                           ;menu_task.c: 73: data->holdCountX = 1;
 15454  1644  0857               	movf	menu_Main@data,w
 15455  1645  0086               	movwf	6
 15456  1646  0858               	movf	menu_Main@data+1,w
 15457  1647  0087               	movwf	7
 15458  1648  3148               	addfsr 1,8
 15459  1649  3001               	movlw	1
 15460  164A  3FC0               	movwi [0]fsr1
 15461  164B  3000               	movlw	0
 15462  164C  3FC1               	movwi [1]fsr1
 15463                           
 15464                           ;menu_task.c: 74: data->holdCountY = 1;
 15465  164D  0857               	movf	menu_Main@data,w
 15466  164E  0086               	movwf	6
 15467  164F  0858               	movf	menu_Main@data+1,w
 15468  1650  0087               	movwf	7
 15469  1651  314A               	addfsr 1,10
 15470  1652  3001               	movlw	1
 15471  1653  3FC0               	movwi [0]fsr1
 15472  1654  3000               	movlw	0
 15473  1655  3FC1               	movwi [1]fsr1
 15474                           
 15475                           ;menu_task.c: 76: menu_option_idx = 0;
 15476  1656  0021               	movlb	1	; select bank1
 15477  1657  01B4               	clrf	_menu_option_idx^(0+128)
 15478  1658  01B5               	clrf	(_menu_option_idx+1)^(0+128)
 15479                           
 15480                           ;menu_task.c: 77: menu_display_option(data);
 15481  1659  0020               	movlb	0	; select bank0
 15482  165A  0858               	movf	menu_Main@data+1,w
 15483  165B  00CD               	movwf	menu_display_option@data+1
 15484  165C  0857               	movf	menu_Main@data,w
 15485  165D  00CC               	movwf	menu_display_option@data
 15486  165E  3198  2067         	fcall	_menu_display_option
 15487                           
 15488                           ;menu_task.c: 78: break;
 15489  1660  0008               	return
 15490  1661                     l7650:	
 15491                           ;menu_task.c: 79: default:
 15492                           
 15493                           
 15494                           ;menu_task.c: 81: data->holdCountA = 1;
 15495  1661  0020               	movlb	0	; select bank0
 15496  1662  0857               	movf	menu_Main@data,w
 15497  1663  0086               	movwf	6
 15498  1664  0858               	movf	menu_Main@data+1,w
 15499  1665  0087               	movwf	7
 15500  1666  3144               	addfsr 1,4
 15501  1667  3001               	movlw	1
 15502  1668  3FC0               	movwi [0]fsr1
 15503  1669  3000               	movlw	0
 15504  166A  3FC1               	movwi [1]fsr1
 15505                           
 15506                           ;menu_task.c: 82: data->holdCountB = 1;
 15507  166B  0857               	movf	menu_Main@data,w
 15508  166C  0086               	movwf	6
 15509  166D  0858               	movf	menu_Main@data+1,w
 15510  166E  0087               	movwf	7
 15511  166F  3146               	addfsr 1,6
 15512  1670  3001               	movlw	1
 15513  1671  3FC0               	movwi [0]fsr1
 15514  1672  3000               	movlw	0
 15515  1673  3FC1               	movwi [1]fsr1
 15516                           
 15517                           ;menu_task.c: 83: data->holdCountX = 1;
 15518  1674  0857               	movf	menu_Main@data,w
 15519  1675  0086               	movwf	6
 15520  1676  0858               	movf	menu_Main@data+1,w
 15521  1677  0087               	movwf	7
 15522  1678  3148               	addfsr 1,8
 15523  1679  3001               	movlw	1
 15524  167A  3FC0               	movwi [0]fsr1
 15525  167B  3000               	movlw	0
 15526  167C  3FC1               	movwi [1]fsr1
 15527                           
 15528                           ;menu_task.c: 84: data->holdCountY = 1;
 15529  167D  0857               	movf	menu_Main@data,w
 15530  167E  0086               	movwf	6
 15531  167F  0858               	movf	menu_Main@data+1,w
 15532  1680  0087               	movwf	7
 15533  1681  314A               	addfsr 1,10
 15534  1682  3001               	movlw	1
 15535  1683  3FC0               	movwi [0]fsr1
 15536  1684  3000               	movlw	0
 15537  1685  3FC1               	movwi [1]fsr1
 15538                           
 15539                           ;menu_task.c: 86: }
 15540                           
 15541                           ;menu_task.c: 85: break;
 15542  1686  0008               	return
 15543  1687                     l7654:	
 15544  1687  0856               	movf	menu_Main@buttonPressed,w
 15545                           
 15546                           ; Switch size 1, requested type "space"
 15547                           ; Number of cases is 1, Range of values is 11 to 11
 15548                           ; switch strategies available:
 15549                           ; Name         Instructions Cycles
 15550                           ; simple_byte            4     3 (average)
 15551                           ; direct_byte           11     9 (fixed)
 15552                           ; jumptable            263     9 (fixed)
 15553                           ;	Chosen strategy is simple_byte
 15554  1688  3A0B               	xorlw	11	; case 11
 15555  1689  1903               	skipnz
 15556  168A  2E1B               	goto	l7632
 15557  168B  2E61               	goto	l7650
 15558                           
 15559                           ;menu_task.c: 87: return;
 15560  168C  0008               	return
 15561  168D                     l7656:	
 15562                           
 15563                           ;menu_task.c: 88: }
 15564                           ;menu_task.c: 90: buttonPressed = nullifyBadge_buttonsGet();
 15565  168D  31A2  2250  3196   	fcall	_nullifyBadge_buttonsGet
 15566  1690  0020               	movlb	0	; select bank0
 15567  1691  00D4               	movwf	??_menu_Main
 15568  1692  0854               	movf	??_menu_Main,w
 15569  1693  00D6               	movwf	menu_Main@buttonPressed
 15570                           
 15571                           ;menu_task.c: 91: switch (buttonPressed) {
 15572  1694  2FEE               	goto	l7740
 15573  1695                     l7658:	
 15574                           ;menu_task.c: 92: case 1:
 15575                           
 15576                           
 15577                           ;menu_task.c: 94: if (data->holdCountA == 0){
 15578  1695  0857               	movf	menu_Main@data,w
 15579  1696  0086               	movwf	6
 15580  1697  0858               	movf	menu_Main@data+1,w
 15581  1698  0087               	movwf	7
 15582  1699  3144               	addfsr 1,4
 15583  169A  0016               	moviw fsr1++
 15584  169B  0401               	iorwf	1,w
 15585  169C  1D03               	btfss	3,2
 15586  169D  2EAE               	goto	l7666
 15587                           
 15588                           ;menu_task.c: 96: if (menu_option_idx == 0){
 15589  169E  0021               	movlb	1	; select bank1
 15590  169F  0834               	movf	_menu_option_idx^(0+128),w
 15591  16A0  0435               	iorwf	(_menu_option_idx+1)^(0+128),w
 15592  16A1  1D03               	btfss	3,2
 15593  16A2  2EAA               	goto	l7664
 15594                           
 15595                           ;menu_task.c: 97: menu_option_idx = menu_option_size - 1;
 15596  16A3  0832               	movf	_menu_option_size^(0+128),w
 15597  16A4  3EFF               	addlw	255
 15598  16A5  00B4               	movwf	_menu_option_idx^(0+128)
 15599  16A6  30FF               	movlw	255
 15600  16A7  3D33               	addwfc	(_menu_option_size+1)^(0+128),w
 15601  16A8  00B5               	movwf	(_menu_option_idx+1)^(0+128)
 15602                           
 15603                           ;menu_task.c: 98: }
 15604  16A9  2EAE               	goto	l7666
 15605  16AA                     l7664:	
 15606                           
 15607                           ;menu_task.c: 99: else {
 15608                           ;menu_task.c: 100: menu_option_idx -= 1;
 15609  16AA  3001               	movlw	1
 15610  16AB  02B4               	subwf	_menu_option_idx^(0+128),f
 15611  16AC  3000               	movlw	0
 15612  16AD  3BB5               	subwfb	(_menu_option_idx+1)^(0+128),f
 15613  16AE                     l7666:	
 15614                           
 15615                           ;menu_task.c: 101: }
 15616                           ;menu_task.c: 102: }
 15617                           ;menu_task.c: 103: menu_display_option(data);
 15618  16AE  0020               	movlb	0	; select bank0
 15619  16AF  0858               	movf	menu_Main@data+1,w
 15620  16B0  00CD               	movwf	menu_display_option@data+1
 15621  16B1  0857               	movf	menu_Main@data,w
 15622  16B2  00CC               	movwf	menu_display_option@data
 15623  16B3  3198  2067  3196   	fcall	_menu_display_option
 15624                           
 15625                           ;menu_task.c: 104: data->holdCountA += 1;
 15626  16B6  0020               	movlb	0	; select bank0
 15627  16B7  0857               	movf	menu_Main@data,w
 15628  16B8  0086               	movwf	6
 15629  16B9  0858               	movf	menu_Main@data+1,w
 15630  16BA  0087               	movwf	7
 15631  16BB  3144               	addfsr 1,4
 15632  16BC  3001               	movlw	1
 15633  16BD  0781               	addwf	1,f
 15634  16BE  3141               	addfsr 1,1
 15635  16BF  1803               	skipnc
 15636  16C0  0A81               	incf	1,f
 15637                           
 15638                           ;menu_task.c: 105: data->holdCountB = 0;
 15639  16C1  0857               	movf	menu_Main@data,w
 15640  16C2  0086               	movwf	6
 15641  16C3  0858               	movf	menu_Main@data+1,w
 15642  16C4  0087               	movwf	7
 15643  16C5  3146               	addfsr 1,6
 15644  16C6  3000               	movlw	0
 15645  16C7  3FC0               	movwi [0]fsr1
 15646  16C8  3FC1               	movwi [1]fsr1
 15647                           
 15648                           ;menu_task.c: 106: data->holdCountX = 0;
 15649  16C9  0857               	movf	menu_Main@data,w
 15650  16CA  0086               	movwf	6
 15651  16CB  0858               	movf	menu_Main@data+1,w
 15652  16CC  0087               	movwf	7
 15653  16CD  3148               	addfsr 1,8
 15654  16CE  3000               	movlw	0
 15655  16CF  3FC0               	movwi [0]fsr1
 15656  16D0  3FC1               	movwi [1]fsr1
 15657                           
 15658                           ;menu_task.c: 107: data->holdCountY = 0;
 15659  16D1  0857               	movf	menu_Main@data,w
 15660  16D2  0086               	movwf	6
 15661  16D3  0858               	movf	menu_Main@data+1,w
 15662  16D4  0087               	movwf	7
 15663  16D5  314A               	addfsr 1,10
 15664  16D6  3000               	movlw	0
 15665  16D7  3FC0               	movwi [0]fsr1
 15666  16D8  3FC1               	movwi [1]fsr1
 15667                           
 15668                           ;menu_task.c: 108: data->noholdCount = 0;
 15669  16D9  0857               	movf	menu_Main@data,w
 15670  16DA  0086               	movwf	6
 15671  16DB  0858               	movf	menu_Main@data+1,w
 15672  16DC  0087               	movwf	7
 15673  16DD  314C               	addfsr 1,12
 15674  16DE  3000               	movlw	0
 15675  16DF  3FC0               	movwi [0]fsr1
 15676  16E0  3FC1               	movwi [1]fsr1
 15677                           
 15678                           ;menu_task.c: 109: break;
 15679  16E1  0008               	return
 15680  16E2                     l7678:	
 15681                           ;menu_task.c: 110: case 2:
 15682                           
 15683                           
 15684                           ;menu_task.c: 112: if (data->holdCountB == 0){
 15685  16E2  0857               	movf	menu_Main@data,w
 15686  16E3  0086               	movwf	6
 15687  16E4  0858               	movf	menu_Main@data+1,w
 15688  16E5  0087               	movwf	7
 15689  16E6  3146               	addfsr 1,6
 15690  16E7  0016               	moviw fsr1++
 15691  16E8  0401               	iorwf	1,w
 15692  16E9  1D03               	btfss	3,2
 15693  16EA  2F0A               	goto	l7686
 15694                           
 15695                           ;menu_task.c: 114: if (menu_option_idx == menu_option_size - 1){
 15696  16EB  0021               	movlb	1	; select bank1
 15697  16EC  0832               	movf	_menu_option_size^(0+128),w
 15698  16ED  3EFF               	addlw	255
 15699  16EE  0020               	movlb	0	; select bank0
 15700  16EF  00D4               	movwf	??_menu_Main
 15701  16F0  30FF               	movlw	255
 15702  16F1  0021               	movlb	1	; select bank1
 15703  16F2  3D33               	addwfc	(_menu_option_size+1)^(0+128),w
 15704  16F3  0020               	movlb	0	; select bank0
 15705  16F4  00D5               	movwf	??_menu_Main+1
 15706  16F5  0021               	movlb	1	; select bank1
 15707  16F6  0835               	movf	(_menu_option_idx+1)^(0+128),w
 15708  16F7  0020               	movlb	0	; select bank0
 15709  16F8  0655               	xorwf	??_menu_Main+1,w
 15710  16F9  1D03               	skipz
 15711  16FA  2EFF               	goto	u4925
 15712  16FB  0021               	movlb	1	; select bank1
 15713  16FC  0834               	movf	_menu_option_idx^(0+128),w
 15714  16FD  0020               	movlb	0	; select bank0
 15715  16FE  0654               	xorwf	??_menu_Main,w
 15716  16FF                     u4925:	
 15717  16FF  1D03               	skipz
 15718  1700  2F05               	goto	l7684
 15719                           
 15720                           ;menu_task.c: 115: menu_option_idx = 0;
 15721  1701  0021               	movlb	1	; select bank1
 15722  1702  01B4               	clrf	_menu_option_idx^(0+128)
 15723  1703  01B5               	clrf	(_menu_option_idx+1)^(0+128)
 15724                           
 15725                           ;menu_task.c: 116: }
 15726  1704  2F0A               	goto	l7686
 15727  1705                     l7684:	
 15728                           
 15729                           ;menu_task.c: 117: else {
 15730                           ;menu_task.c: 118: menu_option_idx += 1;
 15731  1705  3001               	movlw	1
 15732  1706  0021               	movlb	1	; select bank1
 15733  1707  07B4               	addwf	_menu_option_idx^(0+128),f
 15734  1708  3000               	movlw	0
 15735  1709  3DB5               	addwfc	(_menu_option_idx+1)^(0+128),f
 15736  170A                     l7686:	
 15737                           
 15738                           ;menu_task.c: 119: }
 15739                           ;menu_task.c: 120: }
 15740                           ;menu_task.c: 121: menu_display_option(data);
 15741  170A  0020               	movlb	0	; select bank0
 15742  170B  0858               	movf	menu_Main@data+1,w
 15743  170C  00CD               	movwf	menu_display_option@data+1
 15744  170D  0857               	movf	menu_Main@data,w
 15745  170E  00CC               	movwf	menu_display_option@data
 15746  170F  3198  2067  3196   	fcall	_menu_display_option
 15747                           
 15748                           ;menu_task.c: 122: data->holdCountA = 0;
 15749  1712  0020               	movlb	0	; select bank0
 15750  1713  0857               	movf	menu_Main@data,w
 15751  1714  0086               	movwf	6
 15752  1715  0858               	movf	menu_Main@data+1,w
 15753  1716  0087               	movwf	7
 15754  1717  3144               	addfsr 1,4
 15755  1718  3000               	movlw	0
 15756  1719  3FC0               	movwi [0]fsr1
 15757  171A  3FC1               	movwi [1]fsr1
 15758                           
 15759                           ;menu_task.c: 123: data->holdCountB += 1;
 15760  171B  0857               	movf	menu_Main@data,w
 15761  171C  0086               	movwf	6
 15762  171D  0858               	movf	menu_Main@data+1,w
 15763  171E  0087               	movwf	7
 15764  171F  3146               	addfsr 1,6
 15765  1720  3001               	movlw	1
 15766  1721  0781               	addwf	1,f
 15767  1722  3141               	addfsr 1,1
 15768  1723  1803               	skipnc
 15769  1724  0A81               	incf	1,f
 15770                           
 15771                           ;menu_task.c: 124: data->holdCountX = 0;
 15772  1725  0857               	movf	menu_Main@data,w
 15773  1726  0086               	movwf	6
 15774  1727  0858               	movf	menu_Main@data+1,w
 15775  1728  0087               	movwf	7
 15776  1729  3148               	addfsr 1,8
 15777  172A  3000               	movlw	0
 15778  172B  3FC0               	movwi [0]fsr1
 15779  172C  3FC1               	movwi [1]fsr1
 15780                           
 15781                           ;menu_task.c: 125: data->holdCountY = 0;
 15782  172D  0857               	movf	menu_Main@data,w
 15783  172E  0086               	movwf	6
 15784  172F  0858               	movf	menu_Main@data+1,w
 15785  1730  0087               	movwf	7
 15786  1731  314A               	addfsr 1,10
 15787  1732  3000               	movlw	0
 15788  1733  3FC0               	movwi [0]fsr1
 15789  1734  3FC1               	movwi [1]fsr1
 15790                           
 15791                           ;menu_task.c: 126: data->noholdCount = 0;
 15792  1735  0857               	movf	menu_Main@data,w
 15793  1736  0086               	movwf	6
 15794  1737  0858               	movf	menu_Main@data+1,w
 15795  1738  0087               	movwf	7
 15796  1739  314C               	addfsr 1,12
 15797  173A  3000               	movlw	0
 15798  173B  3FC0               	movwi [0]fsr1
 15799  173C  3FC1               	movwi [1]fsr1
 15800                           
 15801                           ;menu_task.c: 127: break;
 15802  173D  0008               	return
 15803  173E                     l7698:	
 15804                           ;menu_task.c: 128: case 4:
 15805                           
 15806                           
 15807                           ;menu_task.c: 129: if (data->holdCountX == 0){
 15808  173E  0857               	movf	menu_Main@data,w
 15809  173F  0086               	movwf	6
 15810  1740  0858               	movf	menu_Main@data+1,w
 15811  1741  0087               	movwf	7
 15812  1742  3148               	addfsr 1,8
 15813  1743  0016               	moviw fsr1++
 15814  1744  0401               	iorwf	1,w
 15815  1745  1D03               	btfss	3,2
 15816  1746  2F53               	goto	l7704
 15817                           
 15818                           ;menu_task.c: 131: menu_clear(data);
 15819  1747  0858               	movf	menu_Main@data+1,w
 15820  1748  00BA               	movwf	menu_clear@data+1
 15821  1749  0857               	movf	menu_Main@data,w
 15822  174A  00B9               	movwf	menu_clear@data
 15823  174B  31A5  258A  3196   	fcall	_menu_clear
 15824                           
 15825                           ;menu_task.c: 132: currentTask = FLASHY_TASK;
 15826  174E  3002               	movlw	2
 15827  174F  0021               	movlb	1	; select bank1
 15828  1750  00B8               	movwf	_currentTask^(0+128)
 15829  1751  3000               	movlw	0
 15830  1752  00B9               	movwf	(_currentTask^(0+128)+1)
 15831  1753                     l7704:	
 15832                           
 15833                           ;menu_task.c: 133: }
 15834                           ;menu_task.c: 134: data->holdCountA = 0;
 15835  1753  0020               	movlb	0	; select bank0
 15836  1754  0857               	movf	menu_Main@data,w
 15837  1755  0086               	movwf	6
 15838  1756  0858               	movf	menu_Main@data+1,w
 15839  1757  0087               	movwf	7
 15840  1758  3144               	addfsr 1,4
 15841  1759  3000               	movlw	0
 15842  175A  3FC0               	movwi [0]fsr1
 15843  175B  3FC1               	movwi [1]fsr1
 15844                           
 15845                           ;menu_task.c: 135: data->holdCountB = 0;
 15846  175C  0857               	movf	menu_Main@data,w
 15847  175D  0086               	movwf	6
 15848  175E  0858               	movf	menu_Main@data+1,w
 15849  175F  0087               	movwf	7
 15850  1760  3146               	addfsr 1,6
 15851  1761  3000               	movlw	0
 15852  1762  3FC0               	movwi [0]fsr1
 15853  1763  3FC1               	movwi [1]fsr1
 15854                           
 15855                           ;menu_task.c: 136: data->holdCountX += 1;
 15856  1764  0857               	movf	menu_Main@data,w
 15857  1765  0086               	movwf	6
 15858  1766  0858               	movf	menu_Main@data+1,w
 15859  1767  0087               	movwf	7
 15860  1768  3148               	addfsr 1,8
 15861  1769  3001               	movlw	1
 15862  176A  0781               	addwf	1,f
 15863  176B  3141               	addfsr 1,1
 15864  176C  1803               	skipnc
 15865  176D  0A81               	incf	1,f
 15866                           
 15867                           ;menu_task.c: 137: data->holdCountY = 0;
 15868  176E  0857               	movf	menu_Main@data,w
 15869  176F  0086               	movwf	6
 15870  1770  0858               	movf	menu_Main@data+1,w
 15871  1771  0087               	movwf	7
 15872  1772  314A               	addfsr 1,10
 15873  1773  3000               	movlw	0
 15874  1774  3FC0               	movwi [0]fsr1
 15875  1775  3FC1               	movwi [1]fsr1
 15876                           
 15877                           ;menu_task.c: 138: data->noholdCount = 0;
 15878  1776  0857               	movf	menu_Main@data,w
 15879  1777  0086               	movwf	6
 15880  1778  0858               	movf	menu_Main@data+1,w
 15881  1779  0087               	movwf	7
 15882  177A  314C               	addfsr 1,12
 15883  177B  3000               	movlw	0
 15884  177C  3FC0               	movwi [0]fsr1
 15885  177D  3FC1               	movwi [1]fsr1
 15886                           
 15887                           ;menu_task.c: 139: break;
 15888  177E  0008               	return
 15889  177F                     l7714:	
 15890                           ;menu_task.c: 140: case 8:
 15891                           
 15892                           
 15893                           ;menu_task.c: 141: if (data->holdCountY == 0){
 15894  177F  0857               	movf	menu_Main@data,w
 15895  1780  0086               	movwf	6
 15896  1781  0858               	movf	menu_Main@data+1,w
 15897  1782  0087               	movwf	7
 15898  1783  314A               	addfsr 1,10
 15899  1784  0016               	moviw fsr1++
 15900  1785  0401               	iorwf	1,w
 15901  1786  1D03               	btfss	3,2
 15902  1787  2F8F               	goto	l7718
 15903                           
 15904                           ;menu_task.c: 142: menu_run_option(data);
 15905  1788  0858               	movf	menu_Main@data+1,w
 15906  1789  00BC               	movwf	menu_run_option@data+1
 15907  178A  0857               	movf	menu_Main@data,w
 15908  178B  00BB               	movwf	menu_run_option@data
 15909  178C  31A3  23C2  3196   	fcall	_menu_run_option
 15910  178F                     l7718:	
 15911                           
 15912                           ;menu_task.c: 143: }
 15913                           ;menu_task.c: 144: data->holdCountA = 0;
 15914  178F  0020               	movlb	0	; select bank0
 15915  1790  0857               	movf	menu_Main@data,w
 15916  1791  0086               	movwf	6
 15917  1792  0858               	movf	menu_Main@data+1,w
 15918  1793  0087               	movwf	7
 15919  1794  3144               	addfsr 1,4
 15920  1795  3000               	movlw	0
 15921  1796  3FC0               	movwi [0]fsr1
 15922  1797  3FC1               	movwi [1]fsr1
 15923                           
 15924                           ;menu_task.c: 145: data->holdCountB = 0;
 15925  1798  0857               	movf	menu_Main@data,w
 15926  1799  0086               	movwf	6
 15927  179A  0858               	movf	menu_Main@data+1,w
 15928  179B  0087               	movwf	7
 15929  179C  3146               	addfsr 1,6
 15930  179D  3000               	movlw	0
 15931  179E  3FC0               	movwi [0]fsr1
 15932  179F  3FC1               	movwi [1]fsr1
 15933                           
 15934                           ;menu_task.c: 146: data->holdCountX = 0;
 15935  17A0  0857               	movf	menu_Main@data,w
 15936  17A1  0086               	movwf	6
 15937  17A2  0858               	movf	menu_Main@data+1,w
 15938  17A3  0087               	movwf	7
 15939  17A4  3148               	addfsr 1,8
 15940  17A5  3000               	movlw	0
 15941  17A6  3FC0               	movwi [0]fsr1
 15942  17A7  3FC1               	movwi [1]fsr1
 15943                           
 15944                           ;menu_task.c: 147: data->holdCountY += 1;
 15945  17A8  0857               	movf	menu_Main@data,w
 15946  17A9  0086               	movwf	6
 15947  17AA  0858               	movf	menu_Main@data+1,w
 15948  17AB  0087               	movwf	7
 15949  17AC  314A               	addfsr 1,10
 15950  17AD  3001               	movlw	1
 15951  17AE  0781               	addwf	1,f
 15952  17AF  3141               	addfsr 1,1
 15953  17B0  1803               	skipnc
 15954  17B1  0A81               	incf	1,f
 15955                           
 15956                           ;menu_task.c: 148: data->noholdCount = 0;
 15957  17B2  0857               	movf	menu_Main@data,w
 15958  17B3  0086               	movwf	6
 15959  17B4  0858               	movf	menu_Main@data+1,w
 15960  17B5  0087               	movwf	7
 15961  17B6  314C               	addfsr 1,12
 15962  17B7  3000               	movlw	0
 15963  17B8  3FC0               	movwi [0]fsr1
 15964  17B9  3FC1               	movwi [1]fsr1
 15965                           
 15966                           ;menu_task.c: 149: break;
 15967  17BA  0008               	return
 15968  17BB                     l7728:	
 15969                           ;menu_task.c: 151: default:
 15970                           
 15971                           ;menu_task.c: 150: case 1 | 2 | 8:
 15972                           
 15973                           
 15974                           ;menu_task.c: 152: menu_display_option(data);
 15975  17BB  0858               	movf	menu_Main@data+1,w
 15976  17BC  00CD               	movwf	menu_display_option@data+1
 15977  17BD  0857               	movf	menu_Main@data,w
 15978  17BE  00CC               	movwf	menu_display_option@data
 15979  17BF  3198  2067  3196   	fcall	_menu_display_option
 15980                           
 15981                           ;menu_task.c: 153: data->holdCountA = 0;
 15982  17C2  0020               	movlb	0	; select bank0
 15983  17C3  0857               	movf	menu_Main@data,w
 15984  17C4  0086               	movwf	6
 15985  17C5  0858               	movf	menu_Main@data+1,w
 15986  17C6  0087               	movwf	7
 15987  17C7  3144               	addfsr 1,4
 15988  17C8  3000               	movlw	0
 15989  17C9  3FC0               	movwi [0]fsr1
 15990  17CA  3FC1               	movwi [1]fsr1
 15991                           
 15992                           ;menu_task.c: 154: data->holdCountB = 0;
 15993  17CB  0857               	movf	menu_Main@data,w
 15994  17CC  0086               	movwf	6
 15995  17CD  0858               	movf	menu_Main@data+1,w
 15996  17CE  0087               	movwf	7
 15997  17CF  3146               	addfsr 1,6
 15998  17D0  3000               	movlw	0
 15999  17D1  3FC0               	movwi [0]fsr1
 16000  17D2  3FC1               	movwi [1]fsr1
 16001                           
 16002                           ;menu_task.c: 155: data->holdCountX = 0;
 16003  17D3  0857               	movf	menu_Main@data,w
 16004  17D4  0086               	movwf	6
 16005  17D5  0858               	movf	menu_Main@data+1,w
 16006  17D6  0087               	movwf	7
 16007  17D7  3148               	addfsr 1,8
 16008  17D8  3000               	movlw	0
 16009  17D9  3FC0               	movwi [0]fsr1
 16010  17DA  3FC1               	movwi [1]fsr1
 16011                           
 16012                           ;menu_task.c: 156: data->holdCountY = 0;
 16013  17DB  0857               	movf	menu_Main@data,w
 16014  17DC  0086               	movwf	6
 16015  17DD  0858               	movf	menu_Main@data+1,w
 16016  17DE  0087               	movwf	7
 16017  17DF  314A               	addfsr 1,10
 16018  17E0  3000               	movlw	0
 16019  17E1  3FC0               	movwi [0]fsr1
 16020  17E2  3FC1               	movwi [1]fsr1
 16021                           
 16022                           ;menu_task.c: 157: data->noholdCount += 1;
 16023  17E3  0857               	movf	menu_Main@data,w
 16024  17E4  0086               	movwf	6
 16025  17E5  0858               	movf	menu_Main@data+1,w
 16026  17E6  0087               	movwf	7
 16027  17E7  314C               	addfsr 1,12
 16028  17E8  3001               	movlw	1
 16029  17E9  0781               	addwf	1,f
 16030  17EA  3141               	addfsr 1,1
 16031  17EB  1803               	skipnc
 16032  17EC  0A81               	incf	1,f
 16033                           
 16034                           ;menu_task.c: 158: }
 16035  17ED  0008               	return
 16036  17EE                     l7740:	
 16037  17EE  0856               	movf	menu_Main@buttonPressed,w
 16038                           
 16039                           ; Switch size 1, requested type "space"
 16040                           ; Number of cases is 5, Range of values is 1 to 11
 16041                           ; switch strategies available:
 16042                           ; Name         Instructions Cycles
 16043                           ; simple_byte           16     9 (average)
 16044                           ; direct_byte           31     9 (fixed)
 16045                           ; jumptable            263     9 (fixed)
 16046                           ;	Chosen strategy is simple_byte
 16047  17EF  3A01               	xorlw	1	; case 1
 16048  17F0  1903               	skipnz
 16049  17F1  2E95               	goto	l7658
 16050  17F2  3A03               	xorlw	3	; case 2
 16051  17F3  1903               	skipnz
 16052  17F4  2EE2               	goto	l7678
 16053  17F5  3A06               	xorlw	6	; case 4
 16054  17F6  1903               	skipnz
 16055  17F7  2F3E               	goto	l7698
 16056  17F8  3A0C               	xorlw	12	; case 8
 16057  17F9  1903               	skipnz
 16058  17FA  2F7F               	goto	l7714
 16059  17FB  3A03               	xorlw	3	; case 11
 16060  17FC  1903               	skipnz
 16061  17FD  2FBB               	goto	l7728
 16062  17FE  2FBB               	goto	l7728
 16063  17FF  0008               	return
 16064  1800                     __end_of_menu_Main:	
 16065                           
 16066                           	psect	text16
 16067  0819                     __ptext16:	
 16068 ;; *************** function _flashy_Main *****************
 16069 ;; Defined at:
 16070 ;;		line 106 in file "flashy_task.c"
 16071 ;; Parameters:    Size  Location     Type
 16072 ;;  taskData        2   50[BANK0 ] PTR void 
 16073 ;;		 -> secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), 
 16074 ;;		 -> flashy_TaskData(30), NULL(0), 
 16075 ;; Auto vars:     Size  Location     Type
 16076 ;;  hit_counter     6   54[BANK0 ] unsigned char [6]
 16077 ;;  data            2   62[BANK0 ] PTR struct t_flashy_task
 16078 ;;		 -> secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), 
 16079 ;;		 -> flashy_TaskData(30), NULL(0), 
 16080 ;;  buttonPresse    2   60[BANK0 ] unsigned int 
 16081 ;; Return value:  Size  Location     Type
 16082 ;;                  1    wreg      void 
 16083 ;; Registers used:
 16084 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16085 ;; Tracked objects:
 16086 ;;		On entry : 0/0
 16087 ;;		On exit  : 0/0
 16088 ;;		Unchanged: 0/0
 16089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16090 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16091 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16092 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16093 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16094 ;;Total ram usage:       14 bytes
 16095 ;; Hardware stack levels used:    1
 16096 ;; Hardware stack levels required when called:   11
 16097 ;; This function calls:
 16098 ;;		_flashy_display_option
 16099 ;;		_led_Parody
 16100 ;;		_led_circle
 16101 ;;		_led_curtain
 16102 ;;		_led_rand
 16103 ;;		_led_roundabout
 16104 ;;		_let_alternate
 16105 ;;		_marquee
 16106 ;;		_nullifyBadge_buttonsGet
 16107 ;;		_nullifyBadge_irGet
 16108 ;;		_nullifyBadge_irTxClr
 16109 ;;		_nullifyBadge_irTxRegister
 16110 ;;		_nullifyBadge_irTxRelease
 16111 ;;		_nullifyBadge_irTxSet
 16112 ;;		_nullifyBadge_segDisplayForceUpdate
 16113 ;;		_nullifyBadge_segDisplayPutStr
 16114 ;;		_nullifyBadge_userLedsSet
 16115 ;;		_sprintf
 16116 ;; This function is called by:
 16117 ;;		_main
 16118 ;;		_scheduler_TaskRun
 16119 ;; This function uses a non-reentrant model
 16120 ;;
 16121                           
 16122                           
 16123                           ;psect for function _flashy_Main
 16124  0819                     _flashy_Main:	
 16125                           
 16126                           ;flashy_task.c: 107: struct t_flashy_taskData *data = (struct t_flashy_taskData *) taskD
      +                          ata;
 16127                           
 16128                           ;incstack = 0
 16129                           ; Regs used in _flashy_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16130  0819  0020               	movlb	0	; select bank0
 16131  081A  0853               	movf	flashy_Main@taskData+1,w
 16132  081B  00DF               	movwf	flashy_Main@data+1
 16133  081C  0852               	movf	flashy_Main@taskData,w
 16134  081D  00DE               	movwf	flashy_Main@data
 16135                           
 16136                           ;flashy_task.c: 108: u16 buttonPressed;
 16137                           ;flashy_task.c: 109: char hit_counter[6];
 16138                           ;flashy_task.c: 111: if ( currentTask != FLASHY_TASK ){
 16139  081E  3002               	movlw	2
 16140  081F  0021               	movlb	1	; select bank1
 16141  0820  0638               	xorwf	_currentTask^(0+128),w
 16142  0821  0439               	iorwf	(_currentTask+1)^(0+128),w
 16143  0822  1903               	btfsc	3,2
 16144  0823  28C6               	goto	l7778
 16145                           
 16146                           ;flashy_task.c: 112: data->holdCountA = 1;
 16147  0824  0020               	movlb	0	; select bank0
 16148  0825  085E               	movf	flashy_Main@data,w
 16149  0826  0086               	movwf	6
 16150  0827  085F               	movf	flashy_Main@data+1,w
 16151  0828  0087               	movwf	7
 16152  0829  314A               	addfsr 1,10
 16153  082A  3001               	movlw	1
 16154  082B  3FC0               	movwi [0]fsr1
 16155  082C  3000               	movlw	0
 16156  082D  3FC1               	movwi [1]fsr1
 16157                           
 16158                           ;flashy_task.c: 113: data->holdCountB = 1;
 16159  082E  085E               	movf	flashy_Main@data,w
 16160  082F  0086               	movwf	6
 16161  0830  085F               	movf	flashy_Main@data+1,w
 16162  0831  0087               	movwf	7
 16163  0832  314C               	addfsr 1,12
 16164  0833  3001               	movlw	1
 16165  0834  3FC0               	movwi [0]fsr1
 16166  0835  3000               	movlw	0
 16167  0836  3FC1               	movwi [1]fsr1
 16168                           
 16169                           ;flashy_task.c: 114: data->holdCountX = 1;
 16170  0837  085E               	movf	flashy_Main@data,w
 16171  0838  0086               	movwf	6
 16172  0839  085F               	movf	flashy_Main@data+1,w
 16173  083A  0087               	movwf	7
 16174  083B  314E               	addfsr 1,14
 16175  083C  3001               	movlw	1
 16176  083D  3FC0               	movwi [0]fsr1
 16177  083E  3000               	movlw	0
 16178  083F  3FC1               	movwi [1]fsr1
 16179                           
 16180                           ;flashy_task.c: 115: data->holdCountY = 1;
 16181  0840  085E               	movf	flashy_Main@data,w
 16182  0841  0086               	movwf	6
 16183  0842  085F               	movf	flashy_Main@data+1,w
 16184  0843  0087               	movwf	7
 16185  0844  3150               	addfsr 1,16
 16186  0845  3001               	movlw	1
 16187  0846  3FC0               	movwi [0]fsr1
 16188  0847  3000               	movlw	0
 16189  0848  3FC1               	movwi [1]fsr1
 16190                           
 16191                           ;flashy_task.c: 116: data->holdCountXY = 1;
 16192  0849  085E               	movf	flashy_Main@data,w
 16193  084A  0086               	movwf	6
 16194  084B  085F               	movf	flashy_Main@data+1,w
 16195  084C  0087               	movwf	7
 16196  084D  3152               	addfsr 1,18
 16197  084E  3001               	movlw	1
 16198  084F  3FC0               	movwi [0]fsr1
 16199  0850  3000               	movlw	0
 16200  0851  3FC1               	movwi [1]fsr1
 16201                           
 16202                           ;flashy_task.c: 117: data->holdCountAY = 1;
 16203  0852  085E               	movf	flashy_Main@data,w
 16204  0853  0086               	movwf	6
 16205  0854  085F               	movf	flashy_Main@data+1,w
 16206  0855  0087               	movwf	7
 16207  0856  3154               	addfsr 1,20
 16208  0857  3001               	movlw	1
 16209  0858  3FC0               	movwi [0]fsr1
 16210  0859  3000               	movlw	0
 16211  085A  3FC1               	movwi [1]fsr1
 16212                           
 16213                           ;flashy_task.c: 118: data->holdCountAX = 1;
 16214  085B  085E               	movf	flashy_Main@data,w
 16215  085C  0086               	movwf	6
 16216  085D  085F               	movf	flashy_Main@data+1,w
 16217  085E  0087               	movwf	7
 16218  085F  3156               	addfsr 1,22
 16219  0860  3001               	movlw	1
 16220  0861  3FC0               	movwi [0]fsr1
 16221  0862  3000               	movlw	0
 16222  0863  3FC1               	movwi [1]fsr1
 16223                           
 16224                           ;flashy_task.c: 119: return;
 16225  0864  0008               	return
 16226  0865                     l7750:	
 16227                           ;flashy_task.c: 126: case SECRET_VALUE_TEST:
 16228                           
 16229                           ;flashy_task.c: 125: break;
 16230                           
 16231                           ;flashy_task.c: 124: case SECRET_VALUE_INIT:
 16232                           
 16233                           ;flashy_task.c: 120: }
 16234                           ;flashy_task.c: 123: switch (secret_value){
 16235                           
 16236                           
 16237                           ;flashy_task.c: 127: secret_value = SECRET_VALUE_INIT;
 16238  0865  0021               	movlb	1	; select bank1
 16239  0866  01C5               	clrf	_secret_value^(0+128)
 16240  0867  01C6               	clrf	(_secret_value+1)^(0+128)
 16241                           
 16242                           ;flashy_task.c: 128: data->displayTickCount = 0;
 16243  0868  0020               	movlb	0	; select bank0
 16244  0869  085E               	movf	flashy_Main@data,w
 16245  086A  0086               	movwf	6
 16246  086B  085F               	movf	flashy_Main@data+1,w
 16247  086C  0087               	movwf	7
 16248  086D  3144               	addfsr 1,4
 16249  086E  3000               	movlw	0
 16250  086F  3FC0               	movwi [0]fsr1
 16251  0870  3FC1               	movwi [1]fsr1
 16252                           
 16253                           ;flashy_task.c: 129: data->display_state = FLASHY_STATE_DISPLAY_SECRET_TEST;
 16254  0871  085E               	movf	flashy_Main@data,w
 16255  0872  3E06               	addlw	6
 16256  0873  00D4               	movwf	??_flashy_Main
 16257  0874  3000               	movlw	0
 16258  0875  3D5F               	addwfc	flashy_Main@data+1,w
 16259  0876  00D5               	movwf	??_flashy_Main+1
 16260  0877  0854               	movf	??_flashy_Main,w
 16261  0878  0086               	movwf	6
 16262  0879  0855               	movf	??_flashy_Main+1,w
 16263  087A  0087               	movwf	7
 16264  087B  3005               	movlw	5
 16265  087C  0081               	movwf	1
 16266                           
 16267                           ;flashy_task.c: 131: data->holdCountA = 1;
 16268  087D  085E               	movf	flashy_Main@data,w
 16269  087E  0086               	movwf	6
 16270  087F  085F               	movf	flashy_Main@data+1,w
 16271  0880  0087               	movwf	7
 16272  0881  314A               	addfsr 1,10
 16273  0882  3001               	movlw	1
 16274  0883  3FC0               	movwi [0]fsr1
 16275  0884  3000               	movlw	0
 16276  0885  3FC1               	movwi [1]fsr1
 16277                           
 16278                           ;flashy_task.c: 132: data->holdCountB = 1;
 16279  0886  085E               	movf	flashy_Main@data,w
 16280  0887  0086               	movwf	6
 16281  0888  085F               	movf	flashy_Main@data+1,w
 16282  0889  0087               	movwf	7
 16283  088A  314C               	addfsr 1,12
 16284  088B  3001               	movlw	1
 16285  088C  3FC0               	movwi [0]fsr1
 16286  088D  3000               	movlw	0
 16287  088E  3FC1               	movwi [1]fsr1
 16288                           
 16289                           ;flashy_task.c: 133: data->holdCountX = 1;
 16290  088F  085E               	movf	flashy_Main@data,w
 16291  0890  0086               	movwf	6
 16292  0891  085F               	movf	flashy_Main@data+1,w
 16293  0892  0087               	movwf	7
 16294  0893  314E               	addfsr 1,14
 16295  0894  3001               	movlw	1
 16296  0895  3FC0               	movwi [0]fsr1
 16297  0896  3000               	movlw	0
 16298  0897  3FC1               	movwi [1]fsr1
 16299                           
 16300                           ;flashy_task.c: 134: data->holdCountY = 1;
 16301  0898  085E               	movf	flashy_Main@data,w
 16302  0899  0086               	movwf	6
 16303  089A  085F               	movf	flashy_Main@data+1,w
 16304  089B  0087               	movwf	7
 16305  089C  3150               	addfsr 1,16
 16306  089D  3001               	movlw	1
 16307  089E  3FC0               	movwi [0]fsr1
 16308  089F  3000               	movlw	0
 16309  08A0  3FC1               	movwi [1]fsr1
 16310                           
 16311                           ;flashy_task.c: 135: data->holdCountXY = 1;
 16312  08A1  085E               	movf	flashy_Main@data,w
 16313  08A2  0086               	movwf	6
 16314  08A3  085F               	movf	flashy_Main@data+1,w
 16315  08A4  0087               	movwf	7
 16316  08A5  3152               	addfsr 1,18
 16317  08A6  3001               	movlw	1
 16318  08A7  3FC0               	movwi [0]fsr1
 16319  08A8  3000               	movlw	0
 16320  08A9  3FC1               	movwi [1]fsr1
 16321                           
 16322                           ;flashy_task.c: 136: data->holdCountAY = 1;
 16323  08AA  085E               	movf	flashy_Main@data,w
 16324  08AB  0086               	movwf	6
 16325  08AC  085F               	movf	flashy_Main@data+1,w
 16326  08AD  0087               	movwf	7
 16327  08AE  3154               	addfsr 1,20
 16328  08AF  3001               	movlw	1
 16329  08B0  3FC0               	movwi [0]fsr1
 16330  08B1  3000               	movlw	0
 16331  08B2  3FC1               	movwi [1]fsr1
 16332                           
 16333                           ;flashy_task.c: 137: data->holdCountAX = 1;
 16334  08B3  085E               	movf	flashy_Main@data,w
 16335  08B4  0086               	movwf	6
 16336  08B5  085F               	movf	flashy_Main@data+1,w
 16337  08B6  0087               	movwf	7
 16338  08B7  3156               	addfsr 1,22
 16339  08B8  3001               	movlw	1
 16340  08B9  3FC0               	movwi [0]fsr1
 16341  08BA  3000               	movlw	0
 16342  08BB  3FC1               	movwi [1]fsr1
 16343                           
 16344                           ;flashy_task.c: 138: data->noholdCount = 1;
 16345  08BC  085E               	movf	flashy_Main@data,w
 16346  08BD  0086               	movwf	6
 16347  08BE  085F               	movf	flashy_Main@data+1,w
 16348  08BF  0087               	movwf	7
 16349  08C0  315C               	addfsr 1,28
 16350  08C1  3001               	movlw	1
 16351  08C2  3FC0               	movwi [0]fsr1
 16352  08C3  3000               	movlw	0
 16353  08C4  3FC1               	movwi [1]fsr1
 16354                           
 16355                           ;flashy_task.c: 139: return;
 16356  08C5  0008               	return
 16357  08C6                     l7778:	
 16358                           ;flashy_task.c: 141: }
 16359                           
 16360                           ;flashy_task.c: 140: break;
 16361                           
 16362                           
 16363                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 16364                           ; Switch size 1, requested type "space"
 16365                           ; Number of cases is 1, Range of values is 0 to 0
 16366                           ; switch strategies available:
 16367                           ; Name         Instructions Cycles
 16368                           ; simple_byte            4     3 (average)
 16369                           ; direct_byte            8     6 (fixed)
 16370                           ; jumptable            260     6 (fixed)
 16371                           ;	Chosen strategy is simple_byte
 16372  08C6  0021               	movlb	1	; select bank1
 16373  08C7  0846               	movf	(_secret_value+1)^(0+128),w
 16374  08C8  3A00               	xorlw	0	; case 0
 16375  08C9  1903               	skipnz
 16376  08CA  28CC               	goto	l8992
 16377  08CB  29C4               	goto	l7848
 16378  08CC                     l8992:	
 16379                           
 16380                           ; Switch size 1, requested type "space"
 16381                           ; Number of cases is 2, Range of values is 0 to 1
 16382                           ; switch strategies available:
 16383                           ; Name         Instructions Cycles
 16384                           ; simple_byte            7     4 (average)
 16385                           ; direct_byte           10     6 (fixed)
 16386                           ; jumptable            260     6 (fixed)
 16387                           ;	Chosen strategy is simple_byte
 16388  08CC  0845               	movf	_secret_value^(0+128),w
 16389  08CD  3A00               	xorlw	0	; case 0
 16390  08CE  1903               	skipnz
 16391  08CF  29C4               	goto	l7848
 16392  08D0  3A01               	xorlw	1	; case 1
 16393  08D1  1903               	skipnz
 16394  08D2  2865               	goto	l7750
 16395  08D3  29C4               	goto	l7848
 16396                           
 16397                           ;flashy_task.c: 144: switch (data->led_state){
 16398  08D4  29C4               	goto	l7848
 16399  08D5                     l7780:	
 16400                           ;flashy_task.c: 145: case FLASHY_STATE_LED_ROUNDABOUT:
 16401                           
 16402                           
 16403                           ;flashy_task.c: 146: if (data->delayTickCount == 0){
 16404  08D5  0020               	movlb	0	; select bank0
 16405  08D6  085E               	movf	flashy_Main@data,w
 16406  08D7  0086               	movwf	6
 16407  08D8  085F               	movf	flashy_Main@data+1,w
 16408  08D9  0087               	movwf	7
 16409  08DA  3141               	addfsr 1,1
 16410  08DB  0016               	moviw fsr1++
 16411  08DC  0401               	iorwf	1,w
 16412  08DD  1D03               	btfss	3,2
 16413  08DE  29B8               	goto	L8
 16414                           
 16415                           ;flashy_task.c: 147: led_roundabout(flashy_leds_idx);
 16416  08DF  0021               	movlb	1	; select bank1
 16417  08E0  0831               	movf	(_flashy_leds_idx+1)^(0+128),w
 16418  08E1  0020               	movlb	0	; select bank0
 16419  08E2  00B1               	movwf	led_roundabout@counter+1
 16420  08E3  0021               	movlb	1	; select bank1
 16421  08E4  0830               	movf	_flashy_leds_idx^(0+128),w
 16422  08E5  0020               	movlb	0	; select bank0
 16423  08E6  00B0               	movwf	led_roundabout@counter
 16424  08E7  31A4  247E  3188   	fcall	_led_roundabout
 16425                           
 16426                           ;flashy_task.c: 148: flashy_leds_idx += 1;
 16427  08EA  3001               	movlw	1
 16428  08EB  0021               	movlb	1	; select bank1
 16429  08EC  07B0               	addwf	_flashy_leds_idx^(0+128),f
 16430  08ED  3000               	movlw	0
 16431  08EE  3DB1               	addwfc	(_flashy_leds_idx+1)^(0+128),f
 16432                           
 16433                           ;flashy_task.c: 149: data->delayTickCount = 35;
 16434  08EF  0020               	movlb	0	; select bank0
 16435  08F0  085E               	movf	flashy_Main@data,w
 16436  08F1  0086               	movwf	6
 16437  08F2  085F               	movf	flashy_Main@data+1,w
 16438  08F3  0087               	movwf	7
 16439  08F4  3141               	addfsr 1,1
 16440  08F5  3023               	movlw	35
 16441  08F6  3FC0               	movwi [0]fsr1
 16442  08F7  3000               	movlw	0
 16443  08F8  3FC1               	movwi [1]fsr1
 16444                           
 16445                           ;flashy_task.c: 150: }
 16446  08F9  2A5E               	goto	l7878
 16447  08FA                     l7790:	
 16448                           ;flashy_task.c: 155: case FLASHY_STATE_LED_SHOT:
 16449                           
 16450                           ;flashy_task.c: 153: }
 16451                           ;flashy_task.c: 154: break;
 16452                           
 16453                           ;flashy_task.c: 151: else {
 16454                           ;flashy_task.c: 152: data->delayTickCount -= 1;
 16455                           
 16456                           
 16457                           ;flashy_task.c: 156: if (data->delayTickCount == 0){
 16458  08FA  085E               	movf	flashy_Main@data,w
 16459  08FB  0086               	movwf	6
 16460  08FC  085F               	movf	flashy_Main@data+1,w
 16461  08FD  0087               	movwf	7
 16462  08FE  3141               	addfsr 1,1
 16463  08FF  0016               	moviw fsr1++
 16464  0900  0401               	iorwf	1,w
 16465  0901  1D03               	btfss	3,2
 16466  0902  29B8               	goto	L8
 16467                           
 16468                           ;flashy_task.c: 157: led_curtain(flashy_leds_idx);
 16469  0903  0021               	movlb	1	; select bank1
 16470  0904  0831               	movf	(_flashy_leds_idx+1)^(0+128),w
 16471  0905  0020               	movlb	0	; select bank0
 16472  0906  00B1               	movwf	led_curtain@counter+1
 16473  0907  0021               	movlb	1	; select bank1
 16474  0908  0830               	movf	_flashy_leds_idx^(0+128),w
 16475  0909  0020               	movlb	0	; select bank0
 16476  090A  00B0               	movwf	led_curtain@counter
 16477  090B  31A4  243D  3188   	fcall	_led_curtain
 16478                           
 16479                           ;flashy_task.c: 158: flashy_leds_idx += 1;
 16480  090E  3001               	movlw	1
 16481  090F  0021               	movlb	1	; select bank1
 16482  0910  07B0               	addwf	_flashy_leds_idx^(0+128),f
 16483  0911  3000               	movlw	0
 16484  0912  3DB1               	addwfc	(_flashy_leds_idx+1)^(0+128),f
 16485                           
 16486                           ;flashy_task.c: 159: data->delayTickCount = 5;
 16487  0913  0020               	movlb	0	; select bank0
 16488  0914  085E               	movf	flashy_Main@data,w
 16489  0915  0086               	movwf	6
 16490  0916  085F               	movf	flashy_Main@data+1,w
 16491  0917  0087               	movwf	7
 16492  0918  3141               	addfsr 1,1
 16493  0919  3005               	movlw	5
 16494  091A  3FC0               	movwi [0]fsr1
 16495  091B  3000               	movlw	0
 16496  091C  3FC1               	movwi [1]fsr1
 16497                           
 16498                           ;flashy_task.c: 160: }
 16499  091D  2A5E               	goto	l7878
 16500  091E                     l7800:	
 16501                           ;flashy_task.c: 165: case FLASHY_STATE_SPARKLE:
 16502                           
 16503                           ;flashy_task.c: 163: }
 16504                           ;flashy_task.c: 164: break;
 16505                           
 16506                           ;flashy_task.c: 161: else {
 16507                           ;flashy_task.c: 162: data->delayTickCount -= 1;
 16508                           
 16509                           
 16510                           ;flashy_task.c: 166: if (data->delayTickCount < 1){
 16511  091E  085E               	movf	flashy_Main@data,w
 16512  091F  0086               	movwf	6
 16513  0920  085F               	movf	flashy_Main@data+1,w
 16514  0921  0087               	movwf	7
 16515  0922  3141               	addfsr 1,1
 16516  0923  0016               	moviw fsr1++
 16517  0924  0401               	iorwf	1,w
 16518  0925  1D03               	btfss	3,2
 16519  0926  29B7               	goto	l7844
 16520                           
 16521                           ;flashy_task.c: 167: led_rand();
 16522  0927  31A5  25D1  3188   	fcall	_led_rand
 16523                           
 16524                           ;flashy_task.c: 168: data->delayTickCount = flashy_sparkle_rate;
 16525  092A  0020               	movlb	0	; select bank0
 16526  092B  085E               	movf	flashy_Main@data,w
 16527  092C  0086               	movwf	6
 16528  092D  085F               	movf	flashy_Main@data+1,w
 16529  092E  0087               	movwf	7
 16530  092F  3141               	addfsr 1,1
 16531  0930  0021               	movlb	1	; select bank1
 16532  0931  082C               	movf	_flashy_sparkle_rate^(0+128),w
 16533  0932  3FC0               	movwi [0]fsr1
 16534  0933  082D               	movf	(_flashy_sparkle_rate+1)^(0+128),w
 16535  0934  3FC1               	movwi [1]fsr1
 16536  0935  2A5E               	goto	l7878
 16537  0936                     l7808:	
 16538                           ;flashy_task.c: 174: case FLASHY_STATE_CIRCLE:
 16539                           
 16540                           ;flashy_task.c: 172: }
 16541                           ;flashy_task.c: 173: break;
 16542                           
 16543                           ;flashy_task.c: 170: else {
 16544                           ;flashy_task.c: 171: data->delayTickCount -= 1;
 16545                           
 16546                           ;flashy_task.c: 169: }
 16547                           
 16548                           
 16549                           ;flashy_task.c: 175: if (data->delayTickCount ==0 ){
 16550  0936  085E               	movf	flashy_Main@data,w
 16551  0937  0086               	movwf	6
 16552  0938  085F               	movf	flashy_Main@data+1,w
 16553  0939  0087               	movwf	7
 16554  093A  3141               	addfsr 1,1
 16555  093B  0016               	moviw fsr1++
 16556  093C  0401               	iorwf	1,w
 16557  093D  1D03               	btfss	3,2
 16558  093E  29B7               	goto	l7844
 16559                           
 16560                           ;flashy_task.c: 176: if (flashy_leds_idx == 1024 ){
 16561  093F  3004               	movlw	4
 16562  0940  0021               	movlb	1	; select bank1
 16563  0941  0631               	xorwf	(_flashy_leds_idx+1)^(0+128),w
 16564  0942  0430               	iorwf	_flashy_leds_idx^(0+128),w
 16565  0943  1D03               	btfss	3,2
 16566  0944  2949               	goto	l7814
 16567                           
 16568                           ;flashy_task.c: 177: flashy_leds_idx = flashy_leds_idx << 1;
 16569  0945  3530               	lslf	_flashy_leds_idx^(0+128),w
 16570  0946  00B0               	movwf	_flashy_leds_idx^(0+128)
 16571  0947  0D31               	rlf	(_flashy_leds_idx+1)^(0+128),w
 16572  0948  00B1               	movwf	(_flashy_leds_idx+1)^(0+128)
 16573  0949                     l7814:	
 16574                           
 16575                           ;flashy_task.c: 178: }
 16576                           ;flashy_task.c: 179: led_circle(flashy_leds_idx);
 16577  0949  0831               	movf	(_flashy_leds_idx+1)^(0+128),w
 16578  094A  0020               	movlb	0	; select bank0
 16579  094B  00B1               	movwf	led_circle@count+1
 16580  094C  0021               	movlb	1	; select bank1
 16581  094D  0830               	movf	_flashy_leds_idx^(0+128),w
 16582  094E  0020               	movlb	0	; select bank0
 16583  094F  00B0               	movwf	led_circle@count
 16584  0950  31AE  262E  3188   	fcall	_led_circle
 16585                           
 16586                           ;flashy_task.c: 180: if (flashy_leds_idx < 1 ){
 16587  0953  0021               	movlb	1	; select bank1
 16588  0954  0830               	movf	_flashy_leds_idx^(0+128),w
 16589  0955  0431               	iorwf	(_flashy_leds_idx+1)^(0+128),w
 16590  0956  1D03               	btfss	3,2
 16591  0957  295D               	goto	l7820
 16592                           
 16593                           ;flashy_task.c: 181: flashy_leds_idx = 1;
 16594  0958  3001               	movlw	1
 16595  0959  00B0               	movwf	_flashy_leds_idx^(0+128)
 16596  095A  3000               	movlw	0
 16597  095B  00B1               	movwf	(_flashy_leds_idx^(0+128)+1)
 16598                           
 16599                           ;flashy_task.c: 182: break;
 16600  095C  2A5E               	goto	l7878
 16601  095D                     l7820:	
 16602                           
 16603                           ;flashy_task.c: 183: }
 16604                           ;flashy_task.c: 184: flashy_leds_idx = flashy_leds_idx << 1;
 16605  095D  3530               	lslf	_flashy_leds_idx^(0+128),w
 16606  095E  00B0               	movwf	_flashy_leds_idx^(0+128)
 16607  095F  0D31               	rlf	(_flashy_leds_idx+1)^(0+128),w
 16608  0960  00B1               	movwf	(_flashy_leds_idx+1)^(0+128)
 16609                           
 16610                           ;flashy_task.c: 186: data->delayTickCount = flashy_sparkle_rate;
 16611  0961  0020               	movlb	0	; select bank0
 16612  0962  085E               	movf	flashy_Main@data,w
 16613  0963  0086               	movwf	6
 16614  0964  085F               	movf	flashy_Main@data+1,w
 16615  0965  0087               	movwf	7
 16616  0966  3141               	addfsr 1,1
 16617  0967  0021               	movlb	1	; select bank1
 16618  0968  082C               	movf	_flashy_sparkle_rate^(0+128),w
 16619  0969  3FC0               	movwi [0]fsr1
 16620  096A  082D               	movf	(_flashy_sparkle_rate+1)^(0+128),w
 16621  096B  3FC1               	movwi [1]fsr1
 16622  096C  2A5E               	goto	l7878
 16623  096D                     l7826:	
 16624                           ;flashy_task.c: 192: case FLASHY_STATE_LED_ALT:
 16625                           
 16626                           ;flashy_task.c: 190: }
 16627                           ;flashy_task.c: 191: break;
 16628                           
 16629                           ;flashy_task.c: 188: else {
 16630                           ;flashy_task.c: 189: data->delayTickCount -= 1;
 16631                           
 16632                           ;flashy_task.c: 187: }
 16633                           
 16634                           
 16635                           ;flashy_task.c: 193: if (data->delayTickCount == 0){
 16636  096D  085E               	movf	flashy_Main@data,w
 16637  096E  0086               	movwf	6
 16638  096F  085F               	movf	flashy_Main@data+1,w
 16639  0970  0087               	movwf	7
 16640  0971  3141               	addfsr 1,1
 16641  0972  0016               	moviw fsr1++
 16642  0973  0401               	iorwf	1,w
 16643  0974  1D03               	btfss	3,2
 16644  0975  29B7               	goto	l7844
 16645                           
 16646                           ;flashy_task.c: 194: let_alternate(flashy_leds_idx);
 16647  0976  0021               	movlb	1	; select bank1
 16648  0977  0831               	movf	(_flashy_leds_idx+1)^(0+128),w
 16649  0978  0020               	movlb	0	; select bank0
 16650  0979  00B1               	movwf	let_alternate@count+1
 16651  097A  0021               	movlb	1	; select bank1
 16652  097B  0830               	movf	_flashy_leds_idx^(0+128),w
 16653  097C  0020               	movlb	0	; select bank0
 16654  097D  00B0               	movwf	let_alternate@count
 16655  097E  31AF  2763  3188   	fcall	_let_alternate
 16656                           
 16657                           ;flashy_task.c: 195: flashy_leds_idx += 1;
 16658  0981  3001               	movlw	1
 16659  0982  0021               	movlb	1	; select bank1
 16660  0983  07B0               	addwf	_flashy_leds_idx^(0+128),f
 16661  0984  3000               	movlw	0
 16662  0985  3DB1               	addwfc	(_flashy_leds_idx+1)^(0+128),f
 16663                           
 16664                           ;flashy_task.c: 196: data->delayTickCount = flashy_sparkle_rate;
 16665  0986  0020               	movlb	0	; select bank0
 16666  0987  085E               	movf	flashy_Main@data,w
 16667  0988  0086               	movwf	6
 16668  0989  085F               	movf	flashy_Main@data+1,w
 16669  098A  0087               	movwf	7
 16670  098B  3141               	addfsr 1,1
 16671  098C  0021               	movlb	1	; select bank1
 16672  098D  082C               	movf	_flashy_sparkle_rate^(0+128),w
 16673  098E  3FC0               	movwi [0]fsr1
 16674  098F  082D               	movf	(_flashy_sparkle_rate+1)^(0+128),w
 16675  0990  3FC1               	movwi [1]fsr1
 16676  0991  2A5E               	goto	l7878
 16677  0992                     l7836:	
 16678                           ;flashy_task.c: 202: case FLASHY_STATE_LED_PARODY:
 16679                           
 16680                           ;flashy_task.c: 200: }
 16681                           ;flashy_task.c: 201: break;
 16682                           
 16683                           ;flashy_task.c: 198: else {
 16684                           ;flashy_task.c: 199: data->delayTickCount -= 1;
 16685                           
 16686                           ;flashy_task.c: 197: }
 16687                           
 16688                           
 16689                           ;flashy_task.c: 203: if (data->delayTickCount == 0){
 16690  0992  085E               	movf	flashy_Main@data,w
 16691  0993  0086               	movwf	6
 16692  0994  085F               	movf	flashy_Main@data+1,w
 16693  0995  0087               	movwf	7
 16694  0996  3141               	addfsr 1,1
 16695  0997  0016               	moviw fsr1++
 16696  0998  0401               	iorwf	1,w
 16697  0999  1D03               	btfss	3,2
 16698  099A  29B7               	goto	l7844
 16699                           
 16700                           ;flashy_task.c: 204: led_Parody(flashy_leds_idx);
 16701  099B  0021               	movlb	1	; select bank1
 16702  099C  0831               	movf	(_flashy_leds_idx+1)^(0+128),w
 16703  099D  0020               	movlb	0	; select bank0
 16704  099E  00B1               	movwf	led_Parody@count+1
 16705  099F  0021               	movlb	1	; select bank1
 16706  09A0  0830               	movf	_flashy_leds_idx^(0+128),w
 16707  09A1  0020               	movlb	0	; select bank0
 16708  09A2  00B0               	movwf	led_Parody@count
 16709  09A3  3199  21F2  3188   	fcall	_led_Parody
 16710                           
 16711                           ;flashy_task.c: 205: flashy_leds_idx += 1;
 16712  09A6  3001               	movlw	1
 16713  09A7  0021               	movlb	1	; select bank1
 16714  09A8  07B0               	addwf	_flashy_leds_idx^(0+128),f
 16715  09A9  3000               	movlw	0
 16716  09AA  3DB1               	addwfc	(_flashy_leds_idx+1)^(0+128),f
 16717                           
 16718                           ;flashy_task.c: 206: data->delayTickCount = flashy_sparkle_rate;
 16719  09AB  0020               	movlb	0	; select bank0
 16720  09AC  085E               	movf	flashy_Main@data,w
 16721  09AD  0086               	movwf	6
 16722  09AE  085F               	movf	flashy_Main@data+1,w
 16723  09AF  0087               	movwf	7
 16724  09B0  3141               	addfsr 1,1
 16725  09B1  0021               	movlb	1	; select bank1
 16726  09B2  082C               	movf	_flashy_sparkle_rate^(0+128),w
 16727  09B3  3FC0               	movwi [0]fsr1
 16728  09B4  082D               	movf	(_flashy_sparkle_rate+1)^(0+128),w
 16729  09B5  3FC1               	movwi [1]fsr1
 16730                           
 16731                           ;flashy_task.c: 207: }
 16732  09B6  2A5E               	goto	l7878
 16733  09B7                     l7844:	
 16734                           
 16735                           ;flashy_task.c: 208: else {
 16736                           ;flashy_task.c: 209: data->delayTickCount -= 1;
 16737  09B7  0020               	movlb	0	; select bank0
 16738  09B8                     L8:	
 16739  09B8  085E               	movf	flashy_Main@data,w
 16740  09B9  0086               	movwf	6
 16741  09BA  085F               	movf	flashy_Main@data+1,w
 16742  09BB  0087               	movwf	7
 16743  09BC  3141               	addfsr 1,1
 16744  09BD  3001               	movlw	1
 16745  09BE  0281               	subwf	1,f
 16746  09BF  3141               	addfsr 1,1
 16747  09C0  3000               	movlw	0
 16748  09C1  3B81               	subwfb	1,f
 16749  09C2  317F               	addfsr 1,-1
 16750                           
 16751                           ;flashy_task.c: 213: }
 16752                           
 16753                           ;flashy_task.c: 210: }
 16754                           ;flashy_task.c: 211: break;
 16755  09C3  2A5E               	goto	l7878
 16756  09C4                     l7848:	
 16757  09C4  0020               	movlb	0	; select bank0
 16758  09C5  085E               	movf	flashy_Main@data,w
 16759  09C6  0086               	movwf	6
 16760  09C7  085F               	movf	flashy_Main@data+1,w
 16761  09C8  0087               	movwf	7
 16762  09C9  3143               	addfsr 1,3
 16763  09CA  0801               	movf	1,w
 16764                           
 16765                           ; Switch size 1, requested type "space"
 16766                           ; Number of cases is 6, Range of values is 0 to 5
 16767                           ; switch strategies available:
 16768                           ; Name         Instructions Cycles
 16769                           ; direct_byte           18     6 (fixed)
 16770                           ; simple_byte           19    10 (average)
 16771                           ; jumptable            260     6 (fixed)
 16772                           ;	Chosen strategy is direct_byte
 16773  09CB  0084               	movwf	4
 16774  09CC  3006               	movlw	6
 16775  09CD  0204               	subwf	4,w
 16776  09CE  1803               	skipnc
 16777  09CF  2A5E               	goto	l7878
 16778  09D0  31A8               	movlp	high S8994
 16779  09D1  3504               	lslf	4,w
 16780  09D2  3EEC               	addlw	low S8994
 16781  09D3  0082               	movwf	2
 16782                           
 16783                           ;flashy_task.c: 216: switch (data->display_state){
 16784  09D4  2A5E               	goto	l7878
 16785  09D5                     l7850:	
 16786                           ;flashy_task.c: 217: case FLASHY_STATE_DISPLAY_BLASTER:
 16787                           
 16788                           
 16789                           ;flashy_task.c: 218: nullifyBadge_segDisplayPutStr(data->badge, "PEW ");
 16790  09D5  302A               	movlw	low (STR_24| (0+32768))
 16791  09D6  00B7               	movwf	nullifyBadge_segDisplayPutStr@str
 16792  09D7  30B1               	movlw	high (STR_24| (0+32768))
 16793  09D8  00B8               	movwf	nullifyBadge_segDisplayPutStr@str+1
 16794  09D9  085E               	movf	flashy_Main@data,w
 16795  09DA  0086               	movwf	6
 16796  09DB  085F               	movf	flashy_Main@data+1,w
 16797  09DC  0087               	movwf	7
 16798  09DD  0801               	movf	1,w
 16799  09DE  31AE  264B  3188   	fcall	_nullifyBadge_segDisplayPutStr
 16800                           
 16801                           ;flashy_task.c: 219: nullifyBadge_segDisplayForceUpdate(data->badge);
 16802  09E1  0020               	movlb	0	; select bank0
 16803  09E2  085E               	movf	flashy_Main@data,w
 16804  09E3  0086               	movwf	6
 16805  09E4  085F               	movf	flashy_Main@data+1,w
 16806  09E5  0087               	movwf	7
 16807  09E6  0801               	movf	1,w
 16808  09E7  31AE  2603  3188   	fcall	_nullifyBadge_segDisplayForceUpdate
 16809  09EA  2A52               	goto	L11
 16810  09EB                     l7856:	
 16811                           ;flashy_task.c: 222: case FLASHY_STATE_DISPLAY_SHOT:
 16812                           
 16813                           ;flashy_task.c: 221: break;
 16814                           
 16815                           ;flashy_task.c: 220: data->displayTickCount += 1;
 16816                           
 16817                           
 16818                           ;flashy_task.c: 223: sprintf((char *)hit_counter, "%4d", deaths);
 16819  09EB  3056               	movlw	low flashy_Main@hit_counter
 16820  09EC  00AF               	movwf	sprintf@sp
 16821  09ED  3000               	movlw	high flashy_Main@hit_counter
 16822  09EE  00B0               	movwf	sprintf@sp+1
 16823  09EF  3043               	movlw	low (STR_25| (0+32768))
 16824  09F0  00B1               	movwf	sprintf@f
 16825  09F1  30B1               	movlw	high (STR_25| (0+32768))
 16826  09F2  00B2               	movwf	sprintf@f+1
 16827  09F3  0021               	movlb	1	; select bank1
 16828  09F4  0829               	movf	(_deaths+1)^(0+128),w
 16829  09F5  0020               	movlb	0	; select bank0
 16830  09F6  00B4               	movwf	?_sprintf+5
 16831  09F7  0021               	movlb	1	; select bank1
 16832  09F8  0828               	movf	_deaths^(0+128),w
 16833  09F9  0020               	movlb	0	; select bank0
 16834  09FA  00B3               	movwf	?_sprintf+4
 16835  09FB  3192  225F  3188   	fcall	_sprintf
 16836                           
 16837                           ;flashy_task.c: 225: nullifyBadge_segDisplayPutStr(data->badge, hit_counter);
 16838  09FE  3056               	movlw	low flashy_Main@hit_counter
 16839  09FF  0020               	movlb	0	; select bank0
 16840  0A00  00B7               	movwf	nullifyBadge_segDisplayPutStr@str
 16841  0A01  3000               	movlw	high flashy_Main@hit_counter
 16842  0A02  00B8               	movwf	nullifyBadge_segDisplayPutStr@str+1
 16843  0A03  085E               	movf	flashy_Main@data,w
 16844  0A04  0086               	movwf	6
 16845  0A05  085F               	movf	flashy_Main@data+1,w
 16846  0A06  0087               	movwf	7
 16847  0A07  0801               	movf	1,w
 16848  0A08  31AE  264B  3188   	fcall	_nullifyBadge_segDisplayPutStr
 16849                           
 16850                           ;flashy_task.c: 226: nullifyBadge_segDisplayForceUpdate(data->badge);
 16851  0A0B  0020               	movlb	0	; select bank0
 16852  0A0C  085E               	movf	flashy_Main@data,w
 16853  0A0D  0086               	movwf	6
 16854  0A0E  085F               	movf	flashy_Main@data+1,w
 16855  0A0F  0087               	movwf	7
 16856  0A10  0801               	movf	1,w
 16857  0A11  31AE  2603  3188   	fcall	_nullifyBadge_segDisplayForceUpdate
 16858                           
 16859                           ;flashy_task.c: 227: if (data->displayTickCount == 150){
 16860  0A14  0020               	movlb	0	; select bank0
 16861  0A15  085E               	movf	flashy_Main@data,w
 16862  0A16  0086               	movwf	6
 16863  0A17  085F               	movf	flashy_Main@data+1,w
 16864  0A18  0087               	movwf	7
 16865  0A19  3144               	addfsr 1,4
 16866  0A1A  0016               	moviw fsr1++
 16867  0A1B  3A96               	xorlw	150
 16868  0A1C  00D4               	movwf	??_flashy_Main
 16869  0A1D  0016               	moviw fsr1++
 16870  0A1E  04D4               	iorwf	??_flashy_Main,f
 16871  0A1F  1D03               	btfss	3,2
 16872  0A20  2A53               	goto	L10
 16873                           
 16874                           ;flashy_task.c: 228: data->displayTickCount = 0;
 16875  0A21  085E               	movf	flashy_Main@data,w
 16876  0A22  0086               	movwf	6
 16877  0A23  085F               	movf	flashy_Main@data+1,w
 16878  0A24  0087               	movwf	7
 16879  0A25  3144               	addfsr 1,4
 16880  0A26  3000               	movlw	0
 16881  0A27  3FC0               	movwi [0]fsr1
 16882  0A28  3FC1               	movwi [1]fsr1
 16883                           
 16884                           ;flashy_task.c: 229: data->display_state = 35;
 16885  0A29  085E               	movf	flashy_Main@data,w
 16886  0A2A  3E06               	addlw	6
 16887  0A2B  00D4               	movwf	??_flashy_Main
 16888  0A2C  3000               	movlw	0
 16889  0A2D  3D5F               	addwfc	flashy_Main@data+1,w
 16890  0A2E  00D5               	movwf	??_flashy_Main+1
 16891  0A2F  0854               	movf	??_flashy_Main,w
 16892  0A30  0086               	movwf	6
 16893  0A31  0855               	movf	??_flashy_Main+1,w
 16894  0A32  0087               	movwf	7
 16895  0A33  3023               	movlw	35
 16896  0A34  0081               	movwf	1
 16897  0A35  2A53               	goto	L10
 16898  0A36                     l7868:	
 16899                           ;flashy_task.c: 233: case FLASHY_STATE_DISPLAY_SECRET_TEST:
 16900                           
 16901                           ;flashy_task.c: 232: break;
 16902                           
 16903                           ;flashy_task.c: 230: }
 16904                           ;flashy_task.c: 231: data->displayTickCount += 1;
 16905                           
 16906                           
 16907                           ;flashy_task.c: 234: marquee(FLASHY_TEXT_SECRET_TEST, data->displayTickCount);
 16908  0A36  0021               	movlb	1	; select bank1
 16909  0A37  0862               	movf	(_FLASHY_TEXT_SECRET_TEST+1)^(0+128),w
 16910  0A38  0020               	movlb	0	; select bank0
 16911  0A39  00BB               	movwf	marquee@string+1
 16912  0A3A  0021               	movlb	1	; select bank1
 16913  0A3B  0861               	movf	_FLASHY_TEXT_SECRET_TEST^(0+128),w
 16914  0A3C  0020               	movlb	0	; select bank0
 16915  0A3D  00BA               	movwf	marquee@string
 16916  0A3E  085E               	movf	flashy_Main@data,w
 16917  0A3F  0086               	movwf	6
 16918  0A40  085F               	movf	flashy_Main@data+1,w
 16919  0A41  0087               	movwf	7
 16920  0A42  3144               	addfsr 1,4
 16921  0A43  3F40               	moviw [0]fsr1
 16922  0A44  00BC               	movwf	marquee@count
 16923  0A45  3F41               	moviw [1]fsr1
 16924  0A46  00BD               	movwf	marquee@count+1
 16925  0A47  319B  2338  3188   	fcall	_marquee
 16926  0A4A  2A52               	goto	L11
 16927  0A4B                     l7872:	
 16928                           ;flashy_task.c: 239: default:
 16929                           
 16930                           ;flashy_task.c: 237: case FLASHY_STATE_DISPLAY:
 16931                           
 16932                           ;flashy_task.c: 236: break;
 16933                           
 16934                           ;flashy_task.c: 235: data->displayTickCount += 1;
 16935                           
 16936                           
 16937                           ;flashy_task.c: 240: flashy_display_option(data);
 16938  0A4B  085F               	movf	flashy_Main@data+1,w
 16939  0A4C  00CD               	movwf	flashy_display_option@data+1
 16940  0A4D  085E               	movf	flashy_Main@data,w
 16941  0A4E  00CC               	movwf	flashy_display_option@data
 16942  0A4F  3192  2200  3188   	fcall	_flashy_display_option
 16943  0A52                     L11:	
 16944                           
 16945                           ;flashy_task.c: 241: data->displayTickCount += 1;
 16946  0A52  0020               	movlb	0	; select bank0
 16947  0A53                     L10:	
 16948  0A53  085E               	movf	flashy_Main@data,w
 16949  0A54  0086               	movwf	6
 16950  0A55  085F               	movf	flashy_Main@data+1,w
 16951  0A56  0087               	movwf	7
 16952  0A57  3144               	addfsr 1,4
 16953  0A58  3001               	movlw	1
 16954  0A59  0781               	addwf	1,f
 16955  0A5A  3141               	addfsr 1,1
 16956  0A5B  1803               	skipnc
 16957  0A5C  0A81               	incf	1,f
 16958                           
 16959                           ;flashy_task.c: 243: }
 16960                           
 16961                           ;flashy_task.c: 242: break;
 16962  0A5D  2A72               	goto	l7880
 16963  0A5E                     l7878:	
 16964  0A5E  0020               	movlb	0	; select bank0
 16965  0A5F  085E               	movf	flashy_Main@data,w
 16966  0A60  0086               	movwf	6
 16967  0A61  085F               	movf	flashy_Main@data+1,w
 16968  0A62  0087               	movwf	7
 16969  0A63  3146               	addfsr 1,6
 16970  0A64  0801               	movf	1,w
 16971                           
 16972                           ; Switch size 1, requested type "space"
 16973                           ; Number of cases is 4, Range of values is 0 to 5
 16974                           ; switch strategies available:
 16975                           ; Name         Instructions Cycles
 16976                           ; simple_byte           13     7 (average)
 16977                           ; direct_byte           18     6 (fixed)
 16978                           ; jumptable            260     6 (fixed)
 16979                           ;	Chosen strategy is simple_byte
 16980  0A65  3A00               	xorlw	0	; case 0
 16981  0A66  1903               	skipnz
 16982  0A67  2A4B               	goto	l7872
 16983  0A68  3A02               	xorlw	2	; case 2
 16984  0A69  1903               	skipnz
 16985  0A6A  29D5               	goto	l7850
 16986  0A6B  3A01               	xorlw	1	; case 3
 16987  0A6C  1903               	skipnz
 16988  0A6D  29EB               	goto	l7856
 16989  0A6E  3A06               	xorlw	6	; case 5
 16990  0A6F  1903               	skipnz
 16991  0A70  2A36               	goto	l7868
 16992  0A71  2A4B               	goto	l7872
 16993  0A72                     l7880:	
 16994                           
 16995                           ;flashy_task.c: 246: buttonPressed = nullifyBadge_buttonsGet();
 16996  0A72  31A2  2250  3188   	fcall	_nullifyBadge_buttonsGet
 16997  0A75  0020               	movlb	0	; select bank0
 16998  0A76  00D4               	movwf	??_flashy_Main
 16999  0A77  01D5               	clrf	??_flashy_Main+1
 17000  0A78  0854               	movf	??_flashy_Main,w
 17001  0A79  00DC               	movwf	flashy_Main@buttonPressed
 17002  0A7A  0855               	movf	??_flashy_Main+1,w
 17003  0A7B  00DD               	movwf	flashy_Main@buttonPressed+1
 17004                           
 17005                           ;flashy_task.c: 247: switch (buttonPressed) {
 17006  0A7C  2F36               	goto	l8140
 17007  0A7D                     l7882:	
 17008                           ;flashy_task.c: 248: case 4 | 8:
 17009                           
 17010                           
 17011                           ;flashy_task.c: 249: if (data->holdCountXY == 0 ){
 17012  0A7D  085E               	movf	flashy_Main@data,w
 17013  0A7E  0086               	movwf	6
 17014  0A7F  085F               	movf	flashy_Main@data+1,w
 17015  0A80  0087               	movwf	7
 17016  0A81  3152               	addfsr 1,18
 17017  0A82  0016               	moviw fsr1++
 17018  0A83  0401               	iorwf	1,w
 17019  0A84  1D03               	btfss	3,2
 17020  0A85  2A8C               	goto	l7886
 17021                           
 17022                           ;flashy_task.c: 251: data->display_state = FLASHY_STATE_DISPLAY;
 17023  0A86  085E               	movf	flashy_Main@data,w
 17024  0A87  0086               	movwf	6
 17025  0A88  085F               	movf	flashy_Main@data+1,w
 17026  0A89  0087               	movwf	7
 17027  0A8A  3146               	addfsr 1,6
 17028  0A8B  0181               	clrf	1
 17029  0A8C                     l7886:	
 17030                           
 17031                           ;flashy_task.c: 252: }
 17032                           ;flashy_task.c: 254: data->holdCountA = 0;
 17033  0A8C  085E               	movf	flashy_Main@data,w
 17034  0A8D  0086               	movwf	6
 17035  0A8E  085F               	movf	flashy_Main@data+1,w
 17036  0A8F  0087               	movwf	7
 17037  0A90  314A               	addfsr 1,10
 17038  0A91  3000               	movlw	0
 17039  0A92  3FC0               	movwi [0]fsr1
 17040  0A93  3FC1               	movwi [1]fsr1
 17041                           
 17042                           ;flashy_task.c: 255: data->holdCountB = 0;
 17043  0A94  085E               	movf	flashy_Main@data,w
 17044  0A95  0086               	movwf	6
 17045  0A96  085F               	movf	flashy_Main@data+1,w
 17046  0A97  0087               	movwf	7
 17047  0A98  314C               	addfsr 1,12
 17048  0A99  3000               	movlw	0
 17049  0A9A  3FC0               	movwi [0]fsr1
 17050  0A9B  3FC1               	movwi [1]fsr1
 17051                           
 17052                           ;flashy_task.c: 256: data->holdCountX = 0;
 17053  0A9C  085E               	movf	flashy_Main@data,w
 17054  0A9D  0086               	movwf	6
 17055  0A9E  085F               	movf	flashy_Main@data+1,w
 17056  0A9F  0087               	movwf	7
 17057  0AA0  314E               	addfsr 1,14
 17058  0AA1  3000               	movlw	0
 17059  0AA2  3FC0               	movwi [0]fsr1
 17060  0AA3  3FC1               	movwi [1]fsr1
 17061                           
 17062                           ;flashy_task.c: 257: data->holdCountY = 0;
 17063  0AA4  085E               	movf	flashy_Main@data,w
 17064  0AA5  0086               	movwf	6
 17065  0AA6  085F               	movf	flashy_Main@data+1,w
 17066  0AA7  0087               	movwf	7
 17067  0AA8  3150               	addfsr 1,16
 17068  0AA9  3000               	movlw	0
 17069  0AAA  3FC0               	movwi [0]fsr1
 17070  0AAB  3FC1               	movwi [1]fsr1
 17071                           
 17072                           ;flashy_task.c: 258: data->holdCountXY += 1;
 17073  0AAC  085E               	movf	flashy_Main@data,w
 17074  0AAD  0086               	movwf	6
 17075  0AAE  085F               	movf	flashy_Main@data+1,w
 17076  0AAF  0087               	movwf	7
 17077  0AB0  3152               	addfsr 1,18
 17078  0AB1  3001               	movlw	1
 17079  0AB2  0781               	addwf	1,f
 17080  0AB3  3141               	addfsr 1,1
 17081  0AB4  1803               	skipnc
 17082  0AB5  0A81               	incf	1,f
 17083                           
 17084                           ;flashy_task.c: 259: data->holdCountAY = 0;
 17085  0AB6  085E               	movf	flashy_Main@data,w
 17086  0AB7  0086               	movwf	6
 17087  0AB8  085F               	movf	flashy_Main@data+1,w
 17088  0AB9  0087               	movwf	7
 17089  0ABA  3154               	addfsr 1,20
 17090  0ABB  3000               	movlw	0
 17091  0ABC  3FC0               	movwi [0]fsr1
 17092  0ABD  3FC1               	movwi [1]fsr1
 17093                           
 17094                           ;flashy_task.c: 260: data->holdCountAX = 0;
 17095  0ABE  085E               	movf	flashy_Main@data,w
 17096  0ABF  0086               	movwf	6
 17097  0AC0  085F               	movf	flashy_Main@data+1,w
 17098  0AC1  0087               	movwf	7
 17099  0AC2  3156               	addfsr 1,22
 17100  0AC3  3000               	movlw	0
 17101  0AC4  3FC0               	movwi [0]fsr1
 17102  0AC5  3FC1               	movwi [1]fsr1
 17103                           
 17104                           ;flashy_task.c: 261: data->holdCountBX = 0;
 17105  0AC6  085E               	movf	flashy_Main@data,w
 17106  0AC7  0086               	movwf	6
 17107  0AC8  085F               	movf	flashy_Main@data+1,w
 17108  0AC9  0087               	movwf	7
 17109  0ACA  3158               	addfsr 1,24
 17110  0ACB  3000               	movlw	0
 17111  0ACC  3FC0               	movwi [0]fsr1
 17112  0ACD  3FC1               	movwi [1]fsr1
 17113                           
 17114                           ;flashy_task.c: 262: data->holdCountBY = 0;
 17115  0ACE  085E               	movf	flashy_Main@data,w
 17116  0ACF  0086               	movwf	6
 17117  0AD0  085F               	movf	flashy_Main@data+1,w
 17118  0AD1  0087               	movwf	7
 17119  0AD2  315A               	addfsr 1,26
 17120  0AD3  3000               	movlw	0
 17121  0AD4  3FC0               	movwi [0]fsr1
 17122  0AD5  3FC1               	movwi [1]fsr1
 17123                           
 17124                           ;flashy_task.c: 263: data->noholdCount = 0;
 17125  0AD6  085E               	movf	flashy_Main@data,w
 17126  0AD7  0086               	movwf	6
 17127  0AD8  085F               	movf	flashy_Main@data+1,w
 17128  0AD9  0087               	movwf	7
 17129  0ADA  315C               	addfsr 1,28
 17130  0ADB  3000               	movlw	0
 17131  0ADC  3FC0               	movwi [0]fsr1
 17132  0ADD  3FC1               	movwi [1]fsr1
 17133                           
 17134                           ;flashy_task.c: 264: break;
 17135  0ADE  2FC9               	goto	l8170
 17136  0ADF                     l7906:	
 17137                           ;flashy_task.c: 265: case 1 | 8:
 17138                           
 17139                           
 17140                           ;flashy_task.c: 266: if ( data->holdCountAY == 0 ){
 17141  0ADF  085E               	movf	flashy_Main@data,w
 17142  0AE0  0086               	movwf	6
 17143  0AE1  085F               	movf	flashy_Main@data+1,w
 17144  0AE2  0087               	movwf	7
 17145  0AE3  3154               	addfsr 1,20
 17146  0AE4  0016               	moviw fsr1++
 17147  0AE5  0401               	iorwf	1,w
 17148  0AE6  1D03               	btfss	3,2
 17149  0AE7  2AF8               	goto	l7912
 17150                           
 17151                           ;flashy_task.c: 267: if (flashy_sparkle_rate > 1000){
 17152  0AE8  3003               	movlw	3
 17153  0AE9  0021               	movlb	1	; select bank1
 17154  0AEA  022D               	subwf	(_flashy_sparkle_rate+1)^(0+128),w
 17155  0AEB  30E9               	movlw	233
 17156  0AEC  1903               	skipnz
 17157  0AED  022C               	subwf	_flashy_sparkle_rate^(0+128),w
 17158  0AEE  1C03               	skipc
 17159  0AEF  2AF4               	goto	l1136
 17160                           
 17161                           ;flashy_task.c: 268: flashy_sparkle_rate = 1000;
 17162  0AF0  30E8               	movlw	232
 17163  0AF1  00AC               	movwf	_flashy_sparkle_rate^(0+128)
 17164  0AF2  3003               	movlw	3
 17165  0AF3  00AD               	movwf	(_flashy_sparkle_rate^(0+128)+1)
 17166  0AF4                     l1136:	
 17167                           
 17168                           ;flashy_task.c: 269: }
 17169                           ;flashy_task.c: 270: flashy_sparkle_rate += 5;
 17170  0AF4  3005               	movlw	5
 17171  0AF5  07AC               	addwf	_flashy_sparkle_rate^(0+128),f
 17172  0AF6  3000               	movlw	0
 17173  0AF7  3DAD               	addwfc	(_flashy_sparkle_rate+1)^(0+128),f
 17174  0AF8                     l7912:	
 17175                           
 17176                           ;flashy_task.c: 271: }
 17177                           ;flashy_task.c: 273: data->holdCountA = 0;
 17178  0AF8  0020               	movlb	0	; select bank0
 17179  0AF9  085E               	movf	flashy_Main@data,w
 17180  0AFA  0086               	movwf	6
 17181  0AFB  085F               	movf	flashy_Main@data+1,w
 17182  0AFC  0087               	movwf	7
 17183  0AFD  314A               	addfsr 1,10
 17184  0AFE  3000               	movlw	0
 17185  0AFF  3FC0               	movwi [0]fsr1
 17186  0B00  3FC1               	movwi [1]fsr1
 17187                           
 17188                           ;flashy_task.c: 274: data->holdCountB = 0;
 17189  0B01  085E               	movf	flashy_Main@data,w
 17190  0B02  0086               	movwf	6
 17191  0B03  085F               	movf	flashy_Main@data+1,w
 17192  0B04  0087               	movwf	7
 17193  0B05  314C               	addfsr 1,12
 17194  0B06  3000               	movlw	0
 17195  0B07  3FC0               	movwi [0]fsr1
 17196  0B08  3FC1               	movwi [1]fsr1
 17197                           
 17198                           ;flashy_task.c: 275: data->holdCountX = 0;
 17199  0B09  085E               	movf	flashy_Main@data,w
 17200  0B0A  0086               	movwf	6
 17201  0B0B  085F               	movf	flashy_Main@data+1,w
 17202  0B0C  0087               	movwf	7
 17203  0B0D  314E               	addfsr 1,14
 17204  0B0E  3000               	movlw	0
 17205  0B0F  3FC0               	movwi [0]fsr1
 17206  0B10  3FC1               	movwi [1]fsr1
 17207                           
 17208                           ;flashy_task.c: 276: data->holdCountY = 0;
 17209  0B11  085E               	movf	flashy_Main@data,w
 17210  0B12  0086               	movwf	6
 17211  0B13  085F               	movf	flashy_Main@data+1,w
 17212  0B14  0087               	movwf	7
 17213  0B15  3150               	addfsr 1,16
 17214  0B16  3000               	movlw	0
 17215  0B17  3FC0               	movwi [0]fsr1
 17216  0B18  3FC1               	movwi [1]fsr1
 17217                           
 17218                           ;flashy_task.c: 277: data->holdCountXY = 0;
 17219  0B19  085E               	movf	flashy_Main@data,w
 17220  0B1A  0086               	movwf	6
 17221  0B1B  085F               	movf	flashy_Main@data+1,w
 17222  0B1C  0087               	movwf	7
 17223  0B1D  3152               	addfsr 1,18
 17224  0B1E  3000               	movlw	0
 17225  0B1F  3FC0               	movwi [0]fsr1
 17226  0B20  3FC1               	movwi [1]fsr1
 17227                           
 17228                           ;flashy_task.c: 278: data->holdCountAY += 1;
 17229  0B21  085E               	movf	flashy_Main@data,w
 17230  0B22  0086               	movwf	6
 17231  0B23  085F               	movf	flashy_Main@data+1,w
 17232  0B24  0087               	movwf	7
 17233  0B25  3154               	addfsr 1,20
 17234  0B26  3001               	movlw	1
 17235  0B27  0781               	addwf	1,f
 17236  0B28  3141               	addfsr 1,1
 17237  0B29  1803               	skipnc
 17238  0B2A  0A81               	incf	1,f
 17239                           
 17240                           ;flashy_task.c: 279: data->holdCountAX = 0;
 17241  0B2B  085E               	movf	flashy_Main@data,w
 17242  0B2C  0086               	movwf	6
 17243  0B2D  085F               	movf	flashy_Main@data+1,w
 17244  0B2E  0087               	movwf	7
 17245  0B2F  3156               	addfsr 1,22
 17246  0B30  3000               	movlw	0
 17247  0B31  3FC0               	movwi [0]fsr1
 17248  0B32  3FC1               	movwi [1]fsr1
 17249                           
 17250                           ;flashy_task.c: 280: data->holdCountBX = 0;
 17251  0B33  085E               	movf	flashy_Main@data,w
 17252  0B34  0086               	movwf	6
 17253  0B35  085F               	movf	flashy_Main@data+1,w
 17254  0B36  0087               	movwf	7
 17255  0B37  3158               	addfsr 1,24
 17256  0B38  3000               	movlw	0
 17257  0B39  3FC0               	movwi [0]fsr1
 17258  0B3A  3FC1               	movwi [1]fsr1
 17259                           
 17260                           ;flashy_task.c: 281: data->holdCountBY = 0;
 17261  0B3B  085E               	movf	flashy_Main@data,w
 17262  0B3C  0086               	movwf	6
 17263  0B3D  085F               	movf	flashy_Main@data+1,w
 17264  0B3E  0087               	movwf	7
 17265  0B3F  315A               	addfsr 1,26
 17266  0B40  3000               	movlw	0
 17267  0B41  3FC0               	movwi [0]fsr1
 17268  0B42  3FC1               	movwi [1]fsr1
 17269                           
 17270                           ;flashy_task.c: 282: data->noholdCount = 0;
 17271  0B43  085E               	movf	flashy_Main@data,w
 17272  0B44  0086               	movwf	6
 17273  0B45  085F               	movf	flashy_Main@data+1,w
 17274  0B46  0087               	movwf	7
 17275  0B47  315C               	addfsr 1,28
 17276  0B48  3000               	movlw	0
 17277  0B49  3FC0               	movwi [0]fsr1
 17278  0B4A  3FC1               	movwi [1]fsr1
 17279                           
 17280                           ;flashy_task.c: 283: break;
 17281  0B4B  2FC9               	goto	l8170
 17282  0B4C                     l7932:	
 17283                           ;flashy_task.c: 284: case 1 | 4:
 17284                           
 17285                           
 17286                           ;flashy_task.c: 285: if ( data->holdCountAX == 0 ){
 17287  0B4C  085E               	movf	flashy_Main@data,w
 17288  0B4D  0086               	movwf	6
 17289  0B4E  085F               	movf	flashy_Main@data+1,w
 17290  0B4F  0087               	movwf	7
 17291  0B50  3156               	addfsr 1,22
 17292  0B51  0016               	moviw fsr1++
 17293  0B52  0401               	iorwf	1,w
 17294  0B53  1D03               	btfss	3,2
 17295  0B54  2B65               	goto	l7938
 17296                           
 17297                           ;flashy_task.c: 286: if (flashy_sparkle_rate < 5)
 17298  0B55  3000               	movlw	0
 17299  0B56  0021               	movlb	1	; select bank1
 17300  0B57  022D               	subwf	(_flashy_sparkle_rate+1)^(0+128),w
 17301  0B58  3005               	movlw	5
 17302  0B59  1903               	skipnz
 17303  0B5A  022C               	subwf	_flashy_sparkle_rate^(0+128),w
 17304  0B5B  1803               	skipnc
 17305  0B5C  2B61               	goto	l1139
 17306                           
 17307                           ;flashy_task.c: 287: flashy_sparkle_rate=5;
 17308  0B5D  3005               	movlw	5
 17309  0B5E  00AC               	movwf	_flashy_sparkle_rate^(0+128)
 17310  0B5F  3000               	movlw	0
 17311  0B60  00AD               	movwf	(_flashy_sparkle_rate^(0+128)+1)
 17312  0B61                     l1139:	
 17313                           
 17314                           ;flashy_task.c: 288: flashy_sparkle_rate -= 5;
 17315  0B61  3005               	movlw	5
 17316  0B62  02AC               	subwf	_flashy_sparkle_rate^(0+128),f
 17317  0B63  3000               	movlw	0
 17318  0B64  3BAD               	subwfb	(_flashy_sparkle_rate+1)^(0+128),f
 17319  0B65                     l7938:	
 17320                           
 17321                           ;flashy_task.c: 289: }
 17322                           ;flashy_task.c: 291: data->holdCountA = 0;
 17323  0B65  0020               	movlb	0	; select bank0
 17324  0B66  085E               	movf	flashy_Main@data,w
 17325  0B67  0086               	movwf	6
 17326  0B68  085F               	movf	flashy_Main@data+1,w
 17327  0B69  0087               	movwf	7
 17328  0B6A  314A               	addfsr 1,10
 17329  0B6B  3000               	movlw	0
 17330  0B6C  3FC0               	movwi [0]fsr1
 17331  0B6D  3FC1               	movwi [1]fsr1
 17332                           
 17333                           ;flashy_task.c: 292: data->holdCountB = 0;
 17334  0B6E  085E               	movf	flashy_Main@data,w
 17335  0B6F  0086               	movwf	6
 17336  0B70  085F               	movf	flashy_Main@data+1,w
 17337  0B71  0087               	movwf	7
 17338  0B72  314C               	addfsr 1,12
 17339  0B73  3000               	movlw	0
 17340  0B74  3FC0               	movwi [0]fsr1
 17341  0B75  3FC1               	movwi [1]fsr1
 17342                           
 17343                           ;flashy_task.c: 293: data->holdCountX += 1;
 17344  0B76  085E               	movf	flashy_Main@data,w
 17345  0B77  0086               	movwf	6
 17346  0B78  085F               	movf	flashy_Main@data+1,w
 17347  0B79  0087               	movwf	7
 17348  0B7A  314E               	addfsr 1,14
 17349  0B7B  3001               	movlw	1
 17350  0B7C  0781               	addwf	1,f
 17351  0B7D  3141               	addfsr 1,1
 17352  0B7E  1803               	skipnc
 17353  0B7F  0A81               	incf	1,f
 17354                           
 17355                           ;flashy_task.c: 294: data->holdCountY = 0;
 17356  0B80  085E               	movf	flashy_Main@data,w
 17357  0B81  0086               	movwf	6
 17358  0B82  085F               	movf	flashy_Main@data+1,w
 17359  0B83  0087               	movwf	7
 17360  0B84  3150               	addfsr 1,16
 17361  0B85  3000               	movlw	0
 17362  0B86  3FC0               	movwi [0]fsr1
 17363  0B87  3FC1               	movwi [1]fsr1
 17364                           
 17365                           ;flashy_task.c: 295: data->holdCountXY = 0;
 17366  0B88  085E               	movf	flashy_Main@data,w
 17367  0B89  0086               	movwf	6
 17368  0B8A  085F               	movf	flashy_Main@data+1,w
 17369  0B8B  0087               	movwf	7
 17370  0B8C  3152               	addfsr 1,18
 17371  0B8D  3000               	movlw	0
 17372  0B8E  3FC0               	movwi [0]fsr1
 17373  0B8F  3FC1               	movwi [1]fsr1
 17374                           
 17375                           ;flashy_task.c: 296: data->holdCountAY = 0;
 17376  0B90  085E               	movf	flashy_Main@data,w
 17377  0B91  0086               	movwf	6
 17378  0B92  085F               	movf	flashy_Main@data+1,w
 17379  0B93  0087               	movwf	7
 17380  0B94  3154               	addfsr 1,20
 17381  0B95  3000               	movlw	0
 17382  0B96  3FC0               	movwi [0]fsr1
 17383  0B97  3FC1               	movwi [1]fsr1
 17384                           
 17385                           ;flashy_task.c: 297: data->holdCountAX += 1;
 17386  0B98  085E               	movf	flashy_Main@data,w
 17387  0B99  0086               	movwf	6
 17388  0B9A  085F               	movf	flashy_Main@data+1,w
 17389  0B9B  0087               	movwf	7
 17390  0B9C  3156               	addfsr 1,22
 17391  0B9D  3001               	movlw	1
 17392  0B9E  0781               	addwf	1,f
 17393  0B9F  3141               	addfsr 1,1
 17394  0BA0  1803               	skipnc
 17395  0BA1  0A81               	incf	1,f
 17396                           
 17397                           ;flashy_task.c: 298: data->holdCountBX = 0;
 17398  0BA2  085E               	movf	flashy_Main@data,w
 17399  0BA3  0086               	movwf	6
 17400  0BA4  085F               	movf	flashy_Main@data+1,w
 17401  0BA5  0087               	movwf	7
 17402  0BA6  3158               	addfsr 1,24
 17403  0BA7  3000               	movlw	0
 17404  0BA8  3FC0               	movwi [0]fsr1
 17405  0BA9  3FC1               	movwi [1]fsr1
 17406                           
 17407                           ;flashy_task.c: 299: data->holdCountBY = 0;
 17408  0BAA  085E               	movf	flashy_Main@data,w
 17409  0BAB  0086               	movwf	6
 17410  0BAC  085F               	movf	flashy_Main@data+1,w
 17411  0BAD  0087               	movwf	7
 17412  0BAE  315A               	addfsr 1,26
 17413  0BAF  3000               	movlw	0
 17414  0BB0  3FC0               	movwi [0]fsr1
 17415  0BB1  3FC1               	movwi [1]fsr1
 17416                           
 17417                           ;flashy_task.c: 300: data->noholdCount = 0;
 17418  0BB2  085E               	movf	flashy_Main@data,w
 17419  0BB3  0086               	movwf	6
 17420  0BB4  085F               	movf	flashy_Main@data+1,w
 17421  0BB5  0087               	movwf	7
 17422  0BB6  315C               	addfsr 1,28
 17423  0BB7  3000               	movlw	0
 17424  0BB8  3FC0               	movwi [0]fsr1
 17425  0BB9  3FC1               	movwi [1]fsr1
 17426                           
 17427                           ;flashy_task.c: 301: break;
 17428  0BBA  2FC9               	goto	l8170
 17429  0BBB                     l7958:	
 17430                           ;flashy_task.c: 302: case 2 | 8:
 17431                           
 17432                           
 17433                           ;flashy_task.c: 303: if (data->holdCountBY == 0){
 17434  0BBB  085E               	movf	flashy_Main@data,w
 17435  0BBC  0086               	movwf	6
 17436  0BBD  085F               	movf	flashy_Main@data+1,w
 17437  0BBE  0087               	movwf	7
 17438  0BBF  315A               	addfsr 1,26
 17439  0BC0  0016               	moviw fsr1++
 17440  0BC1  0401               	iorwf	1,w
 17441  0BC2  1D03               	btfss	3,2
 17442  0BC3  2BD8               	goto	l7968
 17443                           
 17444                           ;flashy_task.c: 304: if (flashy_option_idx == 0){
 17445  0BC4  0021               	movlb	1	; select bank1
 17446  0BC5  0826               	movf	_flashy_option_idx^(0+128),w
 17447  0BC6  0427               	iorwf	(_flashy_option_idx+1)^(0+128),w
 17448  0BC7  1903               	btfsc	3,2
 17449  0BC8  2BD8               	goto	l7968
 17450                           
 17451                           ;flashy_task.c: 307: else {
 17452                           ;flashy_task.c: 308: if (flashy_scroll_rate > 150){
 17453                           
 17454                           ;flashy_task.c: 306: }
 17455  0BC9  3000               	movlw	0
 17456  0BCA  022B               	subwf	(_flashy_scroll_rate+1)^(0+128),w
 17457  0BCB  3097               	movlw	151
 17458  0BCC  1903               	skipnz
 17459  0BCD  022A               	subwf	_flashy_scroll_rate^(0+128),w
 17460  0BCE  1C03               	skipc
 17461  0BCF  2BD4               	goto	l1144
 17462                           
 17463                           ;flashy_task.c: 309: flashy_scroll_rate =150;
 17464  0BD0  3096               	movlw	150
 17465  0BD1  00AA               	movwf	_flashy_scroll_rate^(0+128)
 17466  0BD2  3000               	movlw	0
 17467  0BD3  00AB               	movwf	(_flashy_scroll_rate^(0+128)+1)
 17468  0BD4                     l1144:	
 17469                           
 17470                           ;flashy_task.c: 310: }
 17471                           ;flashy_task.c: 311: flashy_scroll_rate +=2;
 17472  0BD4  3002               	movlw	2
 17473  0BD5  07AA               	addwf	_flashy_scroll_rate^(0+128),f
 17474  0BD6  3000               	movlw	0
 17475  0BD7  3DAB               	addwfc	(_flashy_scroll_rate+1)^(0+128),f
 17476  0BD8                     l7968:	
 17477                           
 17478                           ;flashy_task.c: 312: }
 17479                           ;flashy_task.c: 314: }
 17480                           ;flashy_task.c: 315: data->holdCountA = 0;
 17481  0BD8  0020               	movlb	0	; select bank0
 17482  0BD9  085E               	movf	flashy_Main@data,w
 17483  0BDA  0086               	movwf	6
 17484  0BDB  085F               	movf	flashy_Main@data+1,w
 17485  0BDC  0087               	movwf	7
 17486  0BDD  314A               	addfsr 1,10
 17487  0BDE  3000               	movlw	0
 17488  0BDF  3FC0               	movwi [0]fsr1
 17489  0BE0  3FC1               	movwi [1]fsr1
 17490                           
 17491                           ;flashy_task.c: 316: data->holdCountB += 1;
 17492  0BE1  085E               	movf	flashy_Main@data,w
 17493  0BE2  0086               	movwf	6
 17494  0BE3  085F               	movf	flashy_Main@data+1,w
 17495  0BE4  0087               	movwf	7
 17496  0BE5  314C               	addfsr 1,12
 17497  0BE6  3001               	movlw	1
 17498  0BE7  0781               	addwf	1,f
 17499  0BE8  3141               	addfsr 1,1
 17500  0BE9  1803               	skipnc
 17501  0BEA  0A81               	incf	1,f
 17502                           
 17503                           ;flashy_task.c: 317: data->holdCountX = 0;
 17504  0BEB  085E               	movf	flashy_Main@data,w
 17505  0BEC  0086               	movwf	6
 17506  0BED  085F               	movf	flashy_Main@data+1,w
 17507  0BEE  0087               	movwf	7
 17508  0BEF  314E               	addfsr 1,14
 17509  0BF0  3000               	movlw	0
 17510  0BF1  3FC0               	movwi [0]fsr1
 17511  0BF2  3FC1               	movwi [1]fsr1
 17512                           
 17513                           ;flashy_task.c: 318: data->holdCountY += 1;
 17514  0BF3  085E               	movf	flashy_Main@data,w
 17515  0BF4  0086               	movwf	6
 17516  0BF5  085F               	movf	flashy_Main@data+1,w
 17517  0BF6  0087               	movwf	7
 17518  0BF7  3150               	addfsr 1,16
 17519  0BF8  3001               	movlw	1
 17520  0BF9  0781               	addwf	1,f
 17521  0BFA  3141               	addfsr 1,1
 17522  0BFB  1803               	skipnc
 17523  0BFC  0A81               	incf	1,f
 17524                           
 17525                           ;flashy_task.c: 319: data->holdCountXY = 0;
 17526  0BFD  085E               	movf	flashy_Main@data,w
 17527  0BFE  0086               	movwf	6
 17528  0BFF  085F               	movf	flashy_Main@data+1,w
 17529  0C00  0087               	movwf	7
 17530  0C01  3152               	addfsr 1,18
 17531  0C02  3000               	movlw	0
 17532  0C03  3FC0               	movwi [0]fsr1
 17533  0C04  3FC1               	movwi [1]fsr1
 17534                           
 17535                           ;flashy_task.c: 320: data->holdCountAY = 0;
 17536  0C05  085E               	movf	flashy_Main@data,w
 17537  0C06  0086               	movwf	6
 17538  0C07  085F               	movf	flashy_Main@data+1,w
 17539  0C08  0087               	movwf	7
 17540  0C09  3154               	addfsr 1,20
 17541  0C0A  3000               	movlw	0
 17542  0C0B  3FC0               	movwi [0]fsr1
 17543  0C0C  3FC1               	movwi [1]fsr1
 17544                           
 17545                           ;flashy_task.c: 321: data->holdCountAX = 0;
 17546  0C0D  085E               	movf	flashy_Main@data,w
 17547  0C0E  0086               	movwf	6
 17548  0C0F  085F               	movf	flashy_Main@data+1,w
 17549  0C10  0087               	movwf	7
 17550  0C11  3156               	addfsr 1,22
 17551  0C12  3000               	movlw	0
 17552  0C13  3FC0               	movwi [0]fsr1
 17553  0C14  3FC1               	movwi [1]fsr1
 17554                           
 17555                           ;flashy_task.c: 322: data->holdCountBX = 0;
 17556  0C15  085E               	movf	flashy_Main@data,w
 17557  0C16  0086               	movwf	6
 17558  0C17  085F               	movf	flashy_Main@data+1,w
 17559  0C18  0087               	movwf	7
 17560  0C19  3158               	addfsr 1,24
 17561  0C1A  3000               	movlw	0
 17562  0C1B  3FC0               	movwi [0]fsr1
 17563  0C1C  3FC1               	movwi [1]fsr1
 17564                           
 17565                           ;flashy_task.c: 323: data->holdCountBY += 1;
 17566  0C1D  085E               	movf	flashy_Main@data,w
 17567  0C1E  0086               	movwf	6
 17568  0C1F  085F               	movf	flashy_Main@data+1,w
 17569  0C20  0087               	movwf	7
 17570  0C21  315A               	addfsr 1,26
 17571  0C22  3001               	movlw	1
 17572  0C23  0781               	addwf	1,f
 17573  0C24  3141               	addfsr 1,1
 17574  0C25  1803               	skipnc
 17575  0C26  0A81               	incf	1,f
 17576                           
 17577                           ;flashy_task.c: 324: data->noholdCount = 0;
 17578  0C27  085E               	movf	flashy_Main@data,w
 17579  0C28  0086               	movwf	6
 17580  0C29  085F               	movf	flashy_Main@data+1,w
 17581  0C2A  0087               	movwf	7
 17582  0C2B  315C               	addfsr 1,28
 17583  0C2C  3000               	movlw	0
 17584  0C2D  3FC0               	movwi [0]fsr1
 17585  0C2E  3FC1               	movwi [1]fsr1
 17586                           
 17587                           ;flashy_task.c: 325: break;
 17588  0C2F  2FC9               	goto	l8170
 17589  0C30                     l7988:	
 17590                           ;flashy_task.c: 326: case 2 | 4:
 17591                           
 17592                           
 17593                           ;flashy_task.c: 327: if (data-> holdCountBX == 0){
 17594  0C30  085E               	movf	flashy_Main@data,w
 17595  0C31  0086               	movwf	6
 17596  0C32  085F               	movf	flashy_Main@data+1,w
 17597  0C33  0087               	movwf	7
 17598  0C34  3158               	addfsr 1,24
 17599  0C35  0016               	moviw fsr1++
 17600  0C36  0401               	iorwf	1,w
 17601  0C37  1D03               	btfss	3,2
 17602  0C38  2C4D               	goto	l7998
 17603                           
 17604                           ;flashy_task.c: 328: if (flashy_option_idx == 0){
 17605  0C39  0021               	movlb	1	; select bank1
 17606  0C3A  0826               	movf	_flashy_option_idx^(0+128),w
 17607  0C3B  0427               	iorwf	(_flashy_option_idx+1)^(0+128),w
 17608  0C3C  1903               	btfsc	3,2
 17609  0C3D  2C4D               	goto	l7998
 17610                           
 17611                           ;flashy_task.c: 331: else {
 17612                           ;flashy_task.c: 332: if (flashy_scroll_rate < 5){
 17613                           
 17614                           ;flashy_task.c: 330: }
 17615  0C3E  3000               	movlw	0
 17616  0C3F  022B               	subwf	(_flashy_scroll_rate+1)^(0+128),w
 17617  0C40  3005               	movlw	5
 17618  0C41  1903               	skipnz
 17619  0C42  022A               	subwf	_flashy_scroll_rate^(0+128),w
 17620  0C43  1803               	skipnc
 17621  0C44  2C49               	goto	l1149
 17622                           
 17623                           ;flashy_task.c: 333: flashy_scroll_rate =5;
 17624  0C45  3005               	movlw	5
 17625  0C46  00AA               	movwf	_flashy_scroll_rate^(0+128)
 17626  0C47  3000               	movlw	0
 17627  0C48  00AB               	movwf	(_flashy_scroll_rate^(0+128)+1)
 17628  0C49                     l1149:	
 17629                           
 17630                           ;flashy_task.c: 334: }
 17631                           ;flashy_task.c: 335: flashy_scroll_rate -=3;
 17632  0C49  3003               	movlw	3
 17633  0C4A  02AA               	subwf	_flashy_scroll_rate^(0+128),f
 17634  0C4B  3000               	movlw	0
 17635  0C4C  3BAB               	subwfb	(_flashy_scroll_rate+1)^(0+128),f
 17636  0C4D                     l7998:	
 17637                           
 17638                           ;flashy_task.c: 336: }
 17639                           ;flashy_task.c: 338: }
 17640                           ;flashy_task.c: 339: data->holdCountA = 0;
 17641  0C4D  0020               	movlb	0	; select bank0
 17642  0C4E  085E               	movf	flashy_Main@data,w
 17643  0C4F  0086               	movwf	6
 17644  0C50  085F               	movf	flashy_Main@data+1,w
 17645  0C51  0087               	movwf	7
 17646  0C52  314A               	addfsr 1,10
 17647  0C53  3000               	movlw	0
 17648  0C54  3FC0               	movwi [0]fsr1
 17649  0C55  3FC1               	movwi [1]fsr1
 17650                           
 17651                           ;flashy_task.c: 340: data->holdCountB += 1;
 17652  0C56  085E               	movf	flashy_Main@data,w
 17653  0C57  0086               	movwf	6
 17654  0C58  085F               	movf	flashy_Main@data+1,w
 17655  0C59  0087               	movwf	7
 17656  0C5A  314C               	addfsr 1,12
 17657  0C5B  3001               	movlw	1
 17658  0C5C  0781               	addwf	1,f
 17659  0C5D  3141               	addfsr 1,1
 17660  0C5E  1803               	skipnc
 17661  0C5F  0A81               	incf	1,f
 17662                           
 17663                           ;flashy_task.c: 341: data->holdCountX += 1;
 17664  0C60  085E               	movf	flashy_Main@data,w
 17665  0C61  0086               	movwf	6
 17666  0C62  085F               	movf	flashy_Main@data+1,w
 17667  0C63  0087               	movwf	7
 17668  0C64  314E               	addfsr 1,14
 17669  0C65  3001               	movlw	1
 17670  0C66  0781               	addwf	1,f
 17671  0C67  3141               	addfsr 1,1
 17672  0C68  1803               	skipnc
 17673  0C69  0A81               	incf	1,f
 17674                           
 17675                           ;flashy_task.c: 342: data->holdCountY = 0;
 17676  0C6A  085E               	movf	flashy_Main@data,w
 17677  0C6B  0086               	movwf	6
 17678  0C6C  085F               	movf	flashy_Main@data+1,w
 17679  0C6D  0087               	movwf	7
 17680  0C6E  3150               	addfsr 1,16
 17681  0C6F  3000               	movlw	0
 17682  0C70  3FC0               	movwi [0]fsr1
 17683  0C71  3FC1               	movwi [1]fsr1
 17684                           
 17685                           ;flashy_task.c: 343: data->holdCountXY = 0;
 17686  0C72  085E               	movf	flashy_Main@data,w
 17687  0C73  0086               	movwf	6
 17688  0C74  085F               	movf	flashy_Main@data+1,w
 17689  0C75  0087               	movwf	7
 17690  0C76  3152               	addfsr 1,18
 17691  0C77  3000               	movlw	0
 17692  0C78  3FC0               	movwi [0]fsr1
 17693  0C79  3FC1               	movwi [1]fsr1
 17694                           
 17695                           ;flashy_task.c: 344: data->holdCountAY = 0;
 17696  0C7A  085E               	movf	flashy_Main@data,w
 17697  0C7B  0086               	movwf	6
 17698  0C7C  085F               	movf	flashy_Main@data+1,w
 17699  0C7D  0087               	movwf	7
 17700  0C7E  3154               	addfsr 1,20
 17701  0C7F  3000               	movlw	0
 17702  0C80  3FC0               	movwi [0]fsr1
 17703  0C81  3FC1               	movwi [1]fsr1
 17704                           
 17705                           ;flashy_task.c: 345: data->holdCountAX = 0;
 17706  0C82  085E               	movf	flashy_Main@data,w
 17707  0C83  0086               	movwf	6
 17708  0C84  085F               	movf	flashy_Main@data+1,w
 17709  0C85  0087               	movwf	7
 17710  0C86  3156               	addfsr 1,22
 17711  0C87  3000               	movlw	0
 17712  0C88  3FC0               	movwi [0]fsr1
 17713  0C89  3FC1               	movwi [1]fsr1
 17714                           
 17715                           ;flashy_task.c: 346: data->holdCountBX += 1;
 17716  0C8A  085E               	movf	flashy_Main@data,w
 17717  0C8B  0086               	movwf	6
 17718  0C8C  085F               	movf	flashy_Main@data+1,w
 17719  0C8D  0087               	movwf	7
 17720  0C8E  3158               	addfsr 1,24
 17721  0C8F  3001               	movlw	1
 17722  0C90  0781               	addwf	1,f
 17723  0C91  3141               	addfsr 1,1
 17724  0C92  1803               	skipnc
 17725  0C93  0A81               	incf	1,f
 17726                           
 17727                           ;flashy_task.c: 347: data->holdCountBY = 0;
 17728  0C94  085E               	movf	flashy_Main@data,w
 17729  0C95  0086               	movwf	6
 17730  0C96  085F               	movf	flashy_Main@data+1,w
 17731  0C97  0087               	movwf	7
 17732  0C98  315A               	addfsr 1,26
 17733  0C99  3000               	movlw	0
 17734  0C9A  3FC0               	movwi [0]fsr1
 17735  0C9B  3FC1               	movwi [1]fsr1
 17736                           
 17737                           ;flashy_task.c: 348: data->noholdCount = 0;
 17738  0C9C  085E               	movf	flashy_Main@data,w
 17739  0C9D  0086               	movwf	6
 17740  0C9E  085F               	movf	flashy_Main@data+1,w
 17741  0C9F  0087               	movwf	7
 17742  0CA0  315C               	addfsr 1,28
 17743  0CA1  3000               	movlw	0
 17744  0CA2  3FC0               	movwi [0]fsr1
 17745  0CA3  3FC1               	movwi [1]fsr1
 17746                           
 17747                           ;flashy_task.c: 349: break;
 17748  0CA4  2FC9               	goto	l8170
 17749  0CA5                     l8018:	
 17750                           ;flashy_task.c: 350: case 8:
 17751                           
 17752                           
 17753                           ;flashy_task.c: 352: if (data->holdCountY == 0 && data->blasterTickCount == 0){
 17754  0CA5  085E               	movf	flashy_Main@data,w
 17755  0CA6  0086               	movwf	6
 17756  0CA7  085F               	movf	flashy_Main@data+1,w
 17757  0CA8  0087               	movwf	7
 17758  0CA9  3150               	addfsr 1,16
 17759  0CAA  0016               	moviw fsr1++
 17760  0CAB  0401               	iorwf	1,w
 17761  0CAC  1D03               	btfss	3,2
 17762  0CAD  2CFB               	goto	l8036
 17763  0CAE  085E               	movf	flashy_Main@data,w
 17764  0CAF  0086               	movwf	6
 17765  0CB0  085F               	movf	flashy_Main@data+1,w
 17766  0CB1  0087               	movwf	7
 17767  0CB2  3147               	addfsr 1,7
 17768  0CB3  0016               	moviw fsr1++
 17769  0CB4  0401               	iorwf	1,w
 17770  0CB5  1D03               	btfss	3,2
 17771  0CB6  2CFB               	goto	l8036
 17772                           
 17773                           ;flashy_task.c: 354: nullifyBadge_userLedsSet(data->badge, 0x0);
 17774  0CB7  3000               	movlw	0
 17775  0CB8  00AD               	movwf	nullifyBadge_userLedsSet@userLedData
 17776  0CB9  00AE               	movwf	nullifyBadge_userLedsSet@userLedData+1
 17777  0CBA  085E               	movf	flashy_Main@data,w
 17778  0CBB  0086               	movwf	6
 17779  0CBC  085F               	movf	flashy_Main@data+1,w
 17780  0CBD  0087               	movwf	7
 17781  0CBE  0801               	movf	1,w
 17782  0CBF  31AF  2709  3188   	fcall	_nullifyBadge_userLedsSet
 17783                           
 17784                           ;flashy_task.c: 356: data->displayTickCount = 0;
 17785  0CC2  0020               	movlb	0	; select bank0
 17786  0CC3  085E               	movf	flashy_Main@data,w
 17787  0CC4  0086               	movwf	6
 17788  0CC5  085F               	movf	flashy_Main@data+1,w
 17789  0CC6  0087               	movwf	7
 17790  0CC7  3144               	addfsr 1,4
 17791  0CC8  3000               	movlw	0
 17792  0CC9  3FC0               	movwi [0]fsr1
 17793  0CCA  3FC1               	movwi [1]fsr1
 17794                           
 17795                           ;flashy_task.c: 357: data->blasterTickCount = 100;
 17796  0CCB  085E               	movf	flashy_Main@data,w
 17797  0CCC  0086               	movwf	6
 17798  0CCD  085F               	movf	flashy_Main@data+1,w
 17799  0CCE  0087               	movwf	7
 17800  0CCF  3147               	addfsr 1,7
 17801  0CD0  3064               	movlw	100
 17802  0CD1  3FC0               	movwi [0]fsr1
 17803  0CD2  3000               	movlw	0
 17804  0CD3  3FC1               	movwi [1]fsr1
 17805                           
 17806                           ;flashy_task.c: 358: data->delayTickCount = 5;
 17807  0CD4  085E               	movf	flashy_Main@data,w
 17808  0CD5  0086               	movwf	6
 17809  0CD6  085F               	movf	flashy_Main@data+1,w
 17810  0CD7  0087               	movwf	7
 17811  0CD8  3141               	addfsr 1,1
 17812  0CD9  3005               	movlw	5
 17813  0CDA  3FC0               	movwi [0]fsr1
 17814  0CDB  3000               	movlw	0
 17815  0CDC  3FC1               	movwi [1]fsr1
 17816                           
 17817                           ;flashy_task.c: 360: data->led_state = FLASHY_STATE_LED_SHOT;
 17818  0CDD  085E               	movf	flashy_Main@data,w
 17819  0CDE  3E03               	addlw	3
 17820  0CDF  00D4               	movwf	??_flashy_Main
 17821  0CE0  3000               	movlw	0
 17822  0CE1  3D5F               	addwfc	flashy_Main@data+1,w
 17823  0CE2  00D5               	movwf	??_flashy_Main+1
 17824  0CE3  0854               	movf	??_flashy_Main,w
 17825  0CE4  0086               	movwf	6
 17826  0CE5  0855               	movf	??_flashy_Main+1,w
 17827  0CE6  0087               	movwf	7
 17828  0CE7  3001               	movlw	1
 17829  0CE8  0081               	movwf	1
 17830                           
 17831                           ;flashy_task.c: 361: data->display_state = FLASHY_STATE_DISPLAY_BLASTER;
 17832  0CE9  085E               	movf	flashy_Main@data,w
 17833  0CEA  3E06               	addlw	6
 17834  0CEB  00D4               	movwf	??_flashy_Main
 17835  0CEC  3000               	movlw	0
 17836  0CED  3D5F               	addwfc	flashy_Main@data+1,w
 17837  0CEE  00D5               	movwf	??_flashy_Main+1
 17838  0CEF  0854               	movf	??_flashy_Main,w
 17839  0CF0  0086               	movwf	6
 17840  0CF1  0855               	movf	??_flashy_Main+1,w
 17841  0CF2  0087               	movwf	7
 17842  0CF3  3002               	movlw	2
 17843  0CF4  0081               	movwf	1
 17844                           
 17845                           ;flashy_task.c: 362: data->blaster_state = FLASHY_BLASTER_SHOOTING_STATE;
 17846  0CF5  085E               	movf	flashy_Main@data,w
 17847  0CF6  0086               	movwf	6
 17848  0CF7  085F               	movf	flashy_Main@data+1,w
 17849  0CF8  0087               	movwf	7
 17850  0CF9  3149               	addfsr 1,9
 17851  0CFA  0181               	clrf	1
 17852  0CFB                     l8036:	
 17853                           
 17854                           ;flashy_task.c: 363: }
 17855                           ;flashy_task.c: 365: data->holdCountA = 0;
 17856  0CFB  085E               	movf	flashy_Main@data,w
 17857  0CFC  0086               	movwf	6
 17858  0CFD  085F               	movf	flashy_Main@data+1,w
 17859  0CFE  0087               	movwf	7
 17860  0CFF  314A               	addfsr 1,10
 17861  0D00  3000               	movlw	0
 17862  0D01  3FC0               	movwi [0]fsr1
 17863  0D02  3FC1               	movwi [1]fsr1
 17864                           
 17865                           ;flashy_task.c: 366: data->holdCountB = 0;
 17866  0D03  085E               	movf	flashy_Main@data,w
 17867  0D04  0086               	movwf	6
 17868  0D05  085F               	movf	flashy_Main@data+1,w
 17869  0D06  0087               	movwf	7
 17870  0D07  314C               	addfsr 1,12
 17871  0D08  3000               	movlw	0
 17872  0D09  3FC0               	movwi [0]fsr1
 17873  0D0A  3FC1               	movwi [1]fsr1
 17874                           
 17875                           ;flashy_task.c: 367: data->holdCountX = 0;
 17876  0D0B  085E               	movf	flashy_Main@data,w
 17877  0D0C  0086               	movwf	6
 17878  0D0D  085F               	movf	flashy_Main@data+1,w
 17879  0D0E  0087               	movwf	7
 17880  0D0F  314E               	addfsr 1,14
 17881  0D10  3000               	movlw	0
 17882  0D11  3FC0               	movwi [0]fsr1
 17883  0D12  3FC1               	movwi [1]fsr1
 17884                           
 17885                           ;flashy_task.c: 368: data->holdCountY += 1;
 17886  0D13  085E               	movf	flashy_Main@data,w
 17887  0D14  0086               	movwf	6
 17888  0D15  085F               	movf	flashy_Main@data+1,w
 17889  0D16  0087               	movwf	7
 17890  0D17  3150               	addfsr 1,16
 17891  0D18  3001               	movlw	1
 17892  0D19  0781               	addwf	1,f
 17893  0D1A  3141               	addfsr 1,1
 17894  0D1B  1803               	skipnc
 17895  0D1C  0A81               	incf	1,f
 17896                           
 17897                           ;flashy_task.c: 369: data->holdCountXY = 0;
 17898  0D1D  085E               	movf	flashy_Main@data,w
 17899  0D1E  0086               	movwf	6
 17900  0D1F  085F               	movf	flashy_Main@data+1,w
 17901  0D20  0087               	movwf	7
 17902  0D21  3152               	addfsr 1,18
 17903  0D22  3000               	movlw	0
 17904  0D23  3FC0               	movwi [0]fsr1
 17905  0D24  3FC1               	movwi [1]fsr1
 17906                           
 17907                           ;flashy_task.c: 370: data->holdCountAY = 0;
 17908  0D25  085E               	movf	flashy_Main@data,w
 17909  0D26  0086               	movwf	6
 17910  0D27  085F               	movf	flashy_Main@data+1,w
 17911  0D28  0087               	movwf	7
 17912  0D29  3154               	addfsr 1,20
 17913  0D2A  3000               	movlw	0
 17914  0D2B  3FC0               	movwi [0]fsr1
 17915  0D2C  3FC1               	movwi [1]fsr1
 17916                           
 17917                           ;flashy_task.c: 371: data->holdCountAX = 0;
 17918  0D2D  085E               	movf	flashy_Main@data,w
 17919  0D2E  0086               	movwf	6
 17920  0D2F  085F               	movf	flashy_Main@data+1,w
 17921  0D30  0087               	movwf	7
 17922  0D31  3156               	addfsr 1,22
 17923  0D32  3000               	movlw	0
 17924  0D33  3FC0               	movwi [0]fsr1
 17925  0D34  3FC1               	movwi [1]fsr1
 17926                           
 17927                           ;flashy_task.c: 372: data->holdCountBX = 0;
 17928  0D35  085E               	movf	flashy_Main@data,w
 17929  0D36  0086               	movwf	6
 17930  0D37  085F               	movf	flashy_Main@data+1,w
 17931  0D38  0087               	movwf	7
 17932  0D39  3158               	addfsr 1,24
 17933  0D3A  3000               	movlw	0
 17934  0D3B  3FC0               	movwi [0]fsr1
 17935  0D3C  3FC1               	movwi [1]fsr1
 17936                           
 17937                           ;flashy_task.c: 373: data->holdCountBY = 0;
 17938  0D3D  085E               	movf	flashy_Main@data,w
 17939  0D3E  0086               	movwf	6
 17940  0D3F  085F               	movf	flashy_Main@data+1,w
 17941  0D40  0087               	movwf	7
 17942  0D41  315A               	addfsr 1,26
 17943  0D42  3000               	movlw	0
 17944  0D43  3FC0               	movwi [0]fsr1
 17945  0D44  3FC1               	movwi [1]fsr1
 17946                           
 17947                           ;flashy_task.c: 374: data->noholdCount = 0;
 17948  0D45  085E               	movf	flashy_Main@data,w
 17949  0D46  0086               	movwf	6
 17950  0D47  085F               	movf	flashy_Main@data+1,w
 17951  0D48  0087               	movwf	7
 17952  0D49  315C               	addfsr 1,28
 17953  0D4A  3000               	movlw	0
 17954  0D4B  3FC0               	movwi [0]fsr1
 17955  0D4C  3FC1               	movwi [1]fsr1
 17956                           
 17957                           ;flashy_task.c: 375: break;
 17958  0D4D  2FC9               	goto	l8170
 17959  0D4E                     l8056:	
 17960                           ;flashy_task.c: 376: case 2:
 17961                           
 17962                           
 17963                           ;flashy_task.c: 378: if (data->holdCountB == 0){
 17964  0D4E  085E               	movf	flashy_Main@data,w
 17965  0D4F  0086               	movwf	6
 17966  0D50  085F               	movf	flashy_Main@data+1,w
 17967  0D51  0087               	movwf	7
 17968  0D52  314C               	addfsr 1,12
 17969  0D53  0016               	moviw fsr1++
 17970  0D54  0401               	iorwf	1,w
 17971  0D55  1D03               	btfss	3,2
 17972  0D56  2D7C               	goto	l8066
 17973                           
 17974                           ;flashy_task.c: 379: data->display_state = FLASHY_STATE_DISPLAY;
 17975  0D57  085E               	movf	flashy_Main@data,w
 17976  0D58  0086               	movwf	6
 17977  0D59  085F               	movf	flashy_Main@data+1,w
 17978  0D5A  0087               	movwf	7
 17979  0D5B  3146               	addfsr 1,6
 17980  0D5C  0181               	clrf	1
 17981                           
 17982                           ;flashy_task.c: 380: if (flashy_option_idx == flashy_option_size - 1){
 17983  0D5D  0021               	movlb	1	; select bank1
 17984  0D5E  0824               	movf	_flashy_option_size^(0+128),w
 17985  0D5F  3EFF               	addlw	255
 17986  0D60  0020               	movlb	0	; select bank0
 17987  0D61  00D4               	movwf	??_flashy_Main
 17988  0D62  30FF               	movlw	255
 17989  0D63  0021               	movlb	1	; select bank1
 17990  0D64  3D25               	addwfc	(_flashy_option_size+1)^(0+128),w
 17991  0D65  0020               	movlb	0	; select bank0
 17992  0D66  00D5               	movwf	??_flashy_Main+1
 17993  0D67  0021               	movlb	1	; select bank1
 17994  0D68  0827               	movf	(_flashy_option_idx+1)^(0+128),w
 17995  0D69  0020               	movlb	0	; select bank0
 17996  0D6A  0655               	xorwf	??_flashy_Main+1,w
 17997  0D6B  1D03               	skipz
 17998  0D6C  2D71               	goto	u5195
 17999  0D6D  0021               	movlb	1	; select bank1
 18000  0D6E  0826               	movf	_flashy_option_idx^(0+128),w
 18001  0D6F  0020               	movlb	0	; select bank0
 18002  0D70  0654               	xorwf	??_flashy_Main,w
 18003  0D71                     u5195:	
 18004  0D71  1D03               	skipz
 18005  0D72  2D77               	goto	l8064
 18006                           
 18007                           ;flashy_task.c: 381: flashy_option_idx = 0;
 18008  0D73  0021               	movlb	1	; select bank1
 18009  0D74  01A6               	clrf	_flashy_option_idx^(0+128)
 18010  0D75  01A7               	clrf	(_flashy_option_idx+1)^(0+128)
 18011                           
 18012                           ;flashy_task.c: 382: }
 18013  0D76  2D7C               	goto	l8066
 18014  0D77                     l8064:	
 18015                           
 18016                           ;flashy_task.c: 383: else {
 18017                           ;flashy_task.c: 384: flashy_option_idx += 1;
 18018  0D77  3001               	movlw	1
 18019  0D78  0021               	movlb	1	; select bank1
 18020  0D79  07A6               	addwf	_flashy_option_idx^(0+128),f
 18021  0D7A  3000               	movlw	0
 18022  0D7B  3DA7               	addwfc	(_flashy_option_idx+1)^(0+128),f
 18023  0D7C                     l8066:	
 18024                           
 18025                           ;flashy_task.c: 385: }
 18026                           ;flashy_task.c: 386: }
 18027                           ;flashy_task.c: 387: data->holdCountA = 0;
 18028  0D7C  0020               	movlb	0	; select bank0
 18029  0D7D  085E               	movf	flashy_Main@data,w
 18030  0D7E  0086               	movwf	6
 18031  0D7F  085F               	movf	flashy_Main@data+1,w
 18032  0D80  0087               	movwf	7
 18033  0D81  314A               	addfsr 1,10
 18034  0D82  3000               	movlw	0
 18035  0D83  3FC0               	movwi [0]fsr1
 18036  0D84  3FC1               	movwi [1]fsr1
 18037                           
 18038                           ;flashy_task.c: 388: data->holdCountB += 1;
 18039  0D85  085E               	movf	flashy_Main@data,w
 18040  0D86  0086               	movwf	6
 18041  0D87  085F               	movf	flashy_Main@data+1,w
 18042  0D88  0087               	movwf	7
 18043  0D89  314C               	addfsr 1,12
 18044  0D8A  3001               	movlw	1
 18045  0D8B  0781               	addwf	1,f
 18046  0D8C  3141               	addfsr 1,1
 18047  0D8D  1803               	skipnc
 18048  0D8E  0A81               	incf	1,f
 18049                           
 18050                           ;flashy_task.c: 389: data->holdCountX = 0;
 18051  0D8F  085E               	movf	flashy_Main@data,w
 18052  0D90  0086               	movwf	6
 18053  0D91  085F               	movf	flashy_Main@data+1,w
 18054  0D92  0087               	movwf	7
 18055  0D93  314E               	addfsr 1,14
 18056  0D94  3000               	movlw	0
 18057  0D95  3FC0               	movwi [0]fsr1
 18058  0D96  3FC1               	movwi [1]fsr1
 18059                           
 18060                           ;flashy_task.c: 390: data->holdCountY = 0;
 18061  0D97  085E               	movf	flashy_Main@data,w
 18062  0D98  0086               	movwf	6
 18063  0D99  085F               	movf	flashy_Main@data+1,w
 18064  0D9A  0087               	movwf	7
 18065  0D9B  3150               	addfsr 1,16
 18066  0D9C  3000               	movlw	0
 18067  0D9D  3FC0               	movwi [0]fsr1
 18068  0D9E  3FC1               	movwi [1]fsr1
 18069                           
 18070                           ;flashy_task.c: 391: data->holdCountXY = 0;
 18071  0D9F  085E               	movf	flashy_Main@data,w
 18072  0DA0  0086               	movwf	6
 18073  0DA1  085F               	movf	flashy_Main@data+1,w
 18074  0DA2  0087               	movwf	7
 18075  0DA3  3152               	addfsr 1,18
 18076  0DA4  3000               	movlw	0
 18077  0DA5  3FC0               	movwi [0]fsr1
 18078  0DA6  3FC1               	movwi [1]fsr1
 18079                           
 18080                           ;flashy_task.c: 392: data->holdCountAY = 0;
 18081  0DA7  085E               	movf	flashy_Main@data,w
 18082  0DA8  0086               	movwf	6
 18083  0DA9  085F               	movf	flashy_Main@data+1,w
 18084  0DAA  0087               	movwf	7
 18085  0DAB  3154               	addfsr 1,20
 18086  0DAC  3000               	movlw	0
 18087  0DAD  3FC0               	movwi [0]fsr1
 18088  0DAE  3FC1               	movwi [1]fsr1
 18089                           
 18090                           ;flashy_task.c: 393: data->holdCountAX = 0;
 18091  0DAF  085E               	movf	flashy_Main@data,w
 18092  0DB0  0086               	movwf	6
 18093  0DB1  085F               	movf	flashy_Main@data+1,w
 18094  0DB2  0087               	movwf	7
 18095  0DB3  3156               	addfsr 1,22
 18096  0DB4  3000               	movlw	0
 18097  0DB5  3FC0               	movwi [0]fsr1
 18098  0DB6  3FC1               	movwi [1]fsr1
 18099                           
 18100                           ;flashy_task.c: 394: data->holdCountBX = 0;
 18101  0DB7  085E               	movf	flashy_Main@data,w
 18102  0DB8  0086               	movwf	6
 18103  0DB9  085F               	movf	flashy_Main@data+1,w
 18104  0DBA  0087               	movwf	7
 18105  0DBB  3158               	addfsr 1,24
 18106  0DBC  3000               	movlw	0
 18107  0DBD  3FC0               	movwi [0]fsr1
 18108  0DBE  3FC1               	movwi [1]fsr1
 18109                           
 18110                           ;flashy_task.c: 395: data->holdCountBY = 0;
 18111  0DBF  085E               	movf	flashy_Main@data,w
 18112  0DC0  0086               	movwf	6
 18113  0DC1  085F               	movf	flashy_Main@data+1,w
 18114  0DC2  0087               	movwf	7
 18115  0DC3  315A               	addfsr 1,26
 18116  0DC4  3000               	movlw	0
 18117  0DC5  3FC0               	movwi [0]fsr1
 18118  0DC6  3FC1               	movwi [1]fsr1
 18119                           
 18120                           ;flashy_task.c: 396: data->noholdCount = 0;
 18121  0DC7  085E               	movf	flashy_Main@data,w
 18122  0DC8  0086               	movwf	6
 18123  0DC9  085F               	movf	flashy_Main@data+1,w
 18124  0DCA  0087               	movwf	7
 18125  0DCB  315C               	addfsr 1,28
 18126  0DCC  3000               	movlw	0
 18127  0DCD  3FC0               	movwi [0]fsr1
 18128  0DCE  3FC1               	movwi [1]fsr1
 18129                           
 18130                           ;flashy_task.c: 397: break;
 18131  0DCF  2FC9               	goto	l8170
 18132  0DD0                     l8086:	
 18133                           ;flashy_task.c: 398: case 1:
 18134                           
 18135                           
 18136                           ;flashy_task.c: 399: if ( data->holdCountA == 0){
 18137  0DD0  085E               	movf	flashy_Main@data,w
 18138  0DD1  0086               	movwf	6
 18139  0DD2  085F               	movf	flashy_Main@data+1,w
 18140  0DD3  0087               	movwf	7
 18141  0DD4  314A               	addfsr 1,10
 18142  0DD5  0016               	moviw fsr1++
 18143  0DD6  0401               	iorwf	1,w
 18144  0DD7  1D03               	btfss	3,2
 18145  0DD8  2E3E               	goto	l8114
 18146                           
 18147                           ;flashy_task.c: 402: if (flashy_leds_state_track > 4){
 18148  0DD9  3000               	movlw	0
 18149  0DDA  0021               	movlb	1	; select bank1
 18150  0DDB  022F               	subwf	(_flashy_leds_state_track+1)^(0+128),w
 18151  0DDC  3005               	movlw	5
 18152  0DDD  1903               	skipnz
 18153  0DDE  022E               	subwf	_flashy_leds_state_track^(0+128),w
 18154  0DDF  1C03               	skipc
 18155  0DE0  2DE3               	goto	l8092
 18156                           
 18157                           ;flashy_task.c: 403: flashy_leds_state_track=0;
 18158  0DE1  01AE               	clrf	_flashy_leds_state_track^(0+128)
 18159  0DE2  01AF               	clrf	(_flashy_leds_state_track+1)^(0+128)
 18160  0DE3                     l8092:	
 18161                           
 18162                           ;flashy_task.c: 404: }
 18163                           ;flashy_task.c: 405: if (flashy_leds_state_track== 0){
 18164  0DE3  082E               	movf	_flashy_leds_state_track^(0+128),w
 18165  0DE4  042F               	iorwf	(_flashy_leds_state_track+1)^(0+128),w
 18166  0DE5  1D03               	btfss	3,2
 18167  0DE6  2DF4               	goto	l8096
 18168                           
 18169                           ;flashy_task.c: 406: data->led_state = FLASHY_STATE_LED_ALT;
 18170  0DE7  0020               	movlb	0	; select bank0
 18171  0DE8  085E               	movf	flashy_Main@data,w
 18172  0DE9  3E03               	addlw	3
 18173  0DEA  00D4               	movwf	??_flashy_Main
 18174  0DEB  3000               	movlw	0
 18175  0DEC  3D5F               	addwfc	flashy_Main@data+1,w
 18176  0DED  00D5               	movwf	??_flashy_Main+1
 18177  0DEE  0854               	movf	??_flashy_Main,w
 18178  0DEF  0086               	movwf	6
 18179  0DF0  0855               	movf	??_flashy_Main+1,w
 18180  0DF1  0087               	movwf	7
 18181  0DF2  3004               	movlw	4
 18182  0DF3  0081               	movwf	1
 18183  0DF4                     l8096:	
 18184                           
 18185                           ;flashy_task.c: 407: }
 18186                           ;flashy_task.c: 408: if (flashy_leds_state_track ==1){
 18187  0DF4  0021               	movlb	1	; select bank1
 18188  0DF5  032E               	decf	_flashy_leds_state_track^(0+128),w
 18189  0DF6  042F               	iorwf	(_flashy_leds_state_track+1)^(0+128),w
 18190  0DF7  1D03               	btfss	3,2
 18191  0DF8  2E06               	goto	l8100
 18192                           
 18193                           ;flashy_task.c: 409: data->led_state = FLASHY_STATE_SPARKLE;
 18194  0DF9  0020               	movlb	0	; select bank0
 18195  0DFA  085E               	movf	flashy_Main@data,w
 18196  0DFB  3E03               	addlw	3
 18197  0DFC  00D4               	movwf	??_flashy_Main
 18198  0DFD  3000               	movlw	0
 18199  0DFE  3D5F               	addwfc	flashy_Main@data+1,w
 18200  0DFF  00D5               	movwf	??_flashy_Main+1
 18201  0E00  0854               	movf	??_flashy_Main,w
 18202  0E01  0086               	movwf	6
 18203  0E02  0855               	movf	??_flashy_Main+1,w
 18204  0E03  0087               	movwf	7
 18205  0E04  3002               	movlw	2
 18206  0E05  0081               	movwf	1
 18207  0E06                     l8100:	
 18208                           
 18209                           ;flashy_task.c: 410: }
 18210                           ;flashy_task.c: 411: if (flashy_leds_state_track == 2){
 18211  0E06  3002               	movlw	2
 18212  0E07  0021               	movlb	1	; select bank1
 18213  0E08  062E               	xorwf	_flashy_leds_state_track^(0+128),w
 18214  0E09  042F               	iorwf	(_flashy_leds_state_track+1)^(0+128),w
 18215  0E0A  1D03               	btfss	3,2
 18216  0E0B  2E19               	goto	l8104
 18217                           
 18218                           ;flashy_task.c: 412: data->led_state = FLASHY_STATE_CIRCLE;
 18219  0E0C  0020               	movlb	0	; select bank0
 18220  0E0D  085E               	movf	flashy_Main@data,w
 18221  0E0E  3E03               	addlw	3
 18222  0E0F  00D4               	movwf	??_flashy_Main
 18223  0E10  3000               	movlw	0
 18224  0E11  3D5F               	addwfc	flashy_Main@data+1,w
 18225  0E12  00D5               	movwf	??_flashy_Main+1
 18226  0E13  0854               	movf	??_flashy_Main,w
 18227  0E14  0086               	movwf	6
 18228  0E15  0855               	movf	??_flashy_Main+1,w
 18229  0E16  0087               	movwf	7
 18230  0E17  3003               	movlw	3
 18231  0E18  0081               	movwf	1
 18232  0E19                     l8104:	
 18233                           
 18234                           ;flashy_task.c: 413: }
 18235                           ;flashy_task.c: 414: if (flashy_leds_state_track == 3){
 18236  0E19  3003               	movlw	3
 18237  0E1A  0021               	movlb	1	; select bank1
 18238  0E1B  062E               	xorwf	_flashy_leds_state_track^(0+128),w
 18239  0E1C  042F               	iorwf	(_flashy_leds_state_track+1)^(0+128),w
 18240  0E1D  1D03               	btfss	3,2
 18241  0E1E  2E26               	goto	l8108
 18242                           
 18243                           ;flashy_task.c: 415: data->led_state = FLASHY_STATE_LED_ROUNDABOUT;
 18244  0E1F  0020               	movlb	0	; select bank0
 18245  0E20  085E               	movf	flashy_Main@data,w
 18246  0E21  0086               	movwf	6
 18247  0E22  085F               	movf	flashy_Main@data+1,w
 18248  0E23  0087               	movwf	7
 18249  0E24  3143               	addfsr 1,3
 18250  0E25  0181               	clrf	1
 18251  0E26                     l8108:	
 18252                           
 18253                           ;flashy_task.c: 416: }
 18254                           ;flashy_task.c: 417: if (flashy_leds_state_track ==4 ){
 18255  0E26  3004               	movlw	4
 18256  0E27  0021               	movlb	1	; select bank1
 18257  0E28  062E               	xorwf	_flashy_leds_state_track^(0+128),w
 18258  0E29  042F               	iorwf	(_flashy_leds_state_track+1)^(0+128),w
 18259  0E2A  1D03               	btfss	3,2
 18260  0E2B  2E39               	goto	l8112
 18261                           
 18262                           ;flashy_task.c: 418: data->led_state = FLASHY_STATE_LED_PARODY;
 18263  0E2C  0020               	movlb	0	; select bank0
 18264  0E2D  085E               	movf	flashy_Main@data,w
 18265  0E2E  3E03               	addlw	3
 18266  0E2F  00D4               	movwf	??_flashy_Main
 18267  0E30  3000               	movlw	0
 18268  0E31  3D5F               	addwfc	flashy_Main@data+1,w
 18269  0E32  00D5               	movwf	??_flashy_Main+1
 18270  0E33  0854               	movf	??_flashy_Main,w
 18271  0E34  0086               	movwf	6
 18272  0E35  0855               	movf	??_flashy_Main+1,w
 18273  0E36  0087               	movwf	7
 18274  0E37  3005               	movlw	5
 18275  0E38  0081               	movwf	1
 18276  0E39                     l8112:	
 18277                           
 18278                           ;flashy_task.c: 419: }
 18279                           ;flashy_task.c: 420: flashy_leds_state_track +=1;
 18280  0E39  3001               	movlw	1
 18281  0E3A  0021               	movlb	1	; select bank1
 18282  0E3B  07AE               	addwf	_flashy_leds_state_track^(0+128),f
 18283  0E3C  3000               	movlw	0
 18284  0E3D  3DAF               	addwfc	(_flashy_leds_state_track+1)^(0+128),f
 18285  0E3E                     l8114:	
 18286                           
 18287                           ;flashy_task.c: 421: }
 18288                           ;flashy_task.c: 423: data->holdCountA += 1;
 18289  0E3E  0020               	movlb	0	; select bank0
 18290  0E3F  085E               	movf	flashy_Main@data,w
 18291  0E40  0086               	movwf	6
 18292  0E41  085F               	movf	flashy_Main@data+1,w
 18293  0E42  0087               	movwf	7
 18294  0E43  314A               	addfsr 1,10
 18295  0E44  3001               	movlw	1
 18296  0E45  0781               	addwf	1,f
 18297  0E46  3141               	addfsr 1,1
 18298  0E47  1803               	skipnc
 18299  0E48  0A81               	incf	1,f
 18300                           
 18301                           ;flashy_task.c: 424: data->holdCountB = 0;
 18302  0E49  085E               	movf	flashy_Main@data,w
 18303  0E4A  0086               	movwf	6
 18304  0E4B  085F               	movf	flashy_Main@data+1,w
 18305  0E4C  0087               	movwf	7
 18306  0E4D  314C               	addfsr 1,12
 18307  0E4E  3000               	movlw	0
 18308  0E4F  3FC0               	movwi [0]fsr1
 18309  0E50  3FC1               	movwi [1]fsr1
 18310                           
 18311                           ;flashy_task.c: 425: data->holdCountX = 0;
 18312  0E51  085E               	movf	flashy_Main@data,w
 18313  0E52  0086               	movwf	6
 18314  0E53  085F               	movf	flashy_Main@data+1,w
 18315  0E54  0087               	movwf	7
 18316  0E55  314E               	addfsr 1,14
 18317  0E56  3000               	movlw	0
 18318  0E57  3FC0               	movwi [0]fsr1
 18319  0E58  3FC1               	movwi [1]fsr1
 18320                           
 18321                           ;flashy_task.c: 426: data->holdCountY = 0;
 18322  0E59  085E               	movf	flashy_Main@data,w
 18323  0E5A  0086               	movwf	6
 18324  0E5B  085F               	movf	flashy_Main@data+1,w
 18325  0E5C  0087               	movwf	7
 18326  0E5D  3150               	addfsr 1,16
 18327  0E5E  3000               	movlw	0
 18328  0E5F  3FC0               	movwi [0]fsr1
 18329  0E60  3FC1               	movwi [1]fsr1
 18330                           
 18331                           ;flashy_task.c: 427: data->holdCountXY = 0;
 18332  0E61  085E               	movf	flashy_Main@data,w
 18333  0E62  0086               	movwf	6
 18334  0E63  085F               	movf	flashy_Main@data+1,w
 18335  0E64  0087               	movwf	7
 18336  0E65  3152               	addfsr 1,18
 18337  0E66  3000               	movlw	0
 18338  0E67  3FC0               	movwi [0]fsr1
 18339  0E68  3FC1               	movwi [1]fsr1
 18340                           
 18341                           ;flashy_task.c: 428: data->holdCountAY = 0;
 18342  0E69  085E               	movf	flashy_Main@data,w
 18343  0E6A  0086               	movwf	6
 18344  0E6B  085F               	movf	flashy_Main@data+1,w
 18345  0E6C  0087               	movwf	7
 18346  0E6D  3154               	addfsr 1,20
 18347  0E6E  3000               	movlw	0
 18348  0E6F  3FC0               	movwi [0]fsr1
 18349  0E70  3FC1               	movwi [1]fsr1
 18350                           
 18351                           ;flashy_task.c: 429: data->holdCountAX = 0;
 18352  0E71  085E               	movf	flashy_Main@data,w
 18353  0E72  0086               	movwf	6
 18354  0E73  085F               	movf	flashy_Main@data+1,w
 18355  0E74  0087               	movwf	7
 18356  0E75  3156               	addfsr 1,22
 18357  0E76  3000               	movlw	0
 18358  0E77  3FC0               	movwi [0]fsr1
 18359  0E78  3FC1               	movwi [1]fsr1
 18360                           
 18361                           ;flashy_task.c: 430: data->holdCountBX = 0;
 18362  0E79  085E               	movf	flashy_Main@data,w
 18363  0E7A  0086               	movwf	6
 18364  0E7B  085F               	movf	flashy_Main@data+1,w
 18365  0E7C  0087               	movwf	7
 18366  0E7D  3158               	addfsr 1,24
 18367  0E7E  3000               	movlw	0
 18368  0E7F  3FC0               	movwi [0]fsr1
 18369  0E80  3FC1               	movwi [1]fsr1
 18370                           
 18371                           ;flashy_task.c: 431: data->holdCountBY = 0;
 18372  0E81  085E               	movf	flashy_Main@data,w
 18373  0E82  0086               	movwf	6
 18374  0E83  085F               	movf	flashy_Main@data+1,w
 18375  0E84  0087               	movwf	7
 18376  0E85  315A               	addfsr 1,26
 18377  0E86  3000               	movlw	0
 18378  0E87  3FC0               	movwi [0]fsr1
 18379  0E88  3FC1               	movwi [1]fsr1
 18380                           
 18381                           ;flashy_task.c: 432: data->noholdCount = 0;
 18382  0E89  085E               	movf	flashy_Main@data,w
 18383  0E8A  0086               	movwf	6
 18384  0E8B  085F               	movf	flashy_Main@data+1,w
 18385  0E8C  0087               	movwf	7
 18386  0E8D  315C               	addfsr 1,28
 18387  0E8E  3000               	movlw	0
 18388  0E8F  3FC0               	movwi [0]fsr1
 18389  0E90  3FC1               	movwi [1]fsr1
 18390                           
 18391                           ;flashy_task.c: 433: break;
 18392  0E91  2FC9               	goto	l8170
 18393  0E92                     l8134:	
 18394                           ;flashy_task.c: 434: case 0:
 18395                           
 18396                           
 18397                           ;flashy_task.c: 436: data->holdCountA = 0;
 18398  0E92  085E               	movf	flashy_Main@data,w
 18399  0E93  0086               	movwf	6
 18400  0E94  085F               	movf	flashy_Main@data+1,w
 18401  0E95  0087               	movwf	7
 18402  0E96  314A               	addfsr 1,10
 18403  0E97  3000               	movlw	0
 18404  0E98  3FC0               	movwi [0]fsr1
 18405  0E99  3FC1               	movwi [1]fsr1
 18406                           
 18407                           ;flashy_task.c: 437: data->holdCountB = 0;
 18408  0E9A  085E               	movf	flashy_Main@data,w
 18409  0E9B  0086               	movwf	6
 18410  0E9C  085F               	movf	flashy_Main@data+1,w
 18411  0E9D  0087               	movwf	7
 18412  0E9E  314C               	addfsr 1,12
 18413  0E9F  3000               	movlw	0
 18414  0EA0  3FC0               	movwi [0]fsr1
 18415  0EA1  3FC1               	movwi [1]fsr1
 18416                           
 18417                           ;flashy_task.c: 438: data->holdCountX = 0;
 18418  0EA2  085E               	movf	flashy_Main@data,w
 18419  0EA3  0086               	movwf	6
 18420  0EA4  085F               	movf	flashy_Main@data+1,w
 18421  0EA5  0087               	movwf	7
 18422  0EA6  314E               	addfsr 1,14
 18423  0EA7  3000               	movlw	0
 18424  0EA8  3FC0               	movwi [0]fsr1
 18425  0EA9  3FC1               	movwi [1]fsr1
 18426                           
 18427                           ;flashy_task.c: 439: data->holdCountY = 0;
 18428  0EAA  085E               	movf	flashy_Main@data,w
 18429  0EAB  0086               	movwf	6
 18430  0EAC  085F               	movf	flashy_Main@data+1,w
 18431  0EAD  0087               	movwf	7
 18432  0EAE  3150               	addfsr 1,16
 18433  0EAF  3000               	movlw	0
 18434  0EB0  3FC0               	movwi [0]fsr1
 18435  0EB1  3FC1               	movwi [1]fsr1
 18436                           
 18437                           ;flashy_task.c: 440: data->holdCountXY = 0;
 18438  0EB2  085E               	movf	flashy_Main@data,w
 18439  0EB3  0086               	movwf	6
 18440  0EB4  085F               	movf	flashy_Main@data+1,w
 18441  0EB5  0087               	movwf	7
 18442  0EB6  3152               	addfsr 1,18
 18443  0EB7  3000               	movlw	0
 18444  0EB8  3FC0               	movwi [0]fsr1
 18445  0EB9  3FC1               	movwi [1]fsr1
 18446                           
 18447                           ;flashy_task.c: 441: data->holdCountAY = 0;
 18448  0EBA  085E               	movf	flashy_Main@data,w
 18449  0EBB  0086               	movwf	6
 18450  0EBC  085F               	movf	flashy_Main@data+1,w
 18451  0EBD  0087               	movwf	7
 18452  0EBE  3154               	addfsr 1,20
 18453  0EBF  3000               	movlw	0
 18454  0EC0  3FC0               	movwi [0]fsr1
 18455  0EC1  3FC1               	movwi [1]fsr1
 18456                           
 18457                           ;flashy_task.c: 442: data->holdCountAX = 0;
 18458  0EC2  085E               	movf	flashy_Main@data,w
 18459  0EC3  0086               	movwf	6
 18460  0EC4  085F               	movf	flashy_Main@data+1,w
 18461  0EC5  0087               	movwf	7
 18462  0EC6  3156               	addfsr 1,22
 18463  0EC7  3000               	movlw	0
 18464  0EC8  3FC0               	movwi [0]fsr1
 18465  0EC9  3FC1               	movwi [1]fsr1
 18466                           
 18467                           ;flashy_task.c: 443: data->holdCountBX = 0;
 18468  0ECA  085E               	movf	flashy_Main@data,w
 18469  0ECB  0086               	movwf	6
 18470  0ECC  085F               	movf	flashy_Main@data+1,w
 18471  0ECD  0087               	movwf	7
 18472  0ECE  3158               	addfsr 1,24
 18473  0ECF  3000               	movlw	0
 18474  0ED0  3FC0               	movwi [0]fsr1
 18475  0ED1  3FC1               	movwi [1]fsr1
 18476                           
 18477                           ;flashy_task.c: 444: data->holdCountBY = 0;
 18478  0ED2  085E               	movf	flashy_Main@data,w
 18479  0ED3  0086               	movwf	6
 18480  0ED4  085F               	movf	flashy_Main@data+1,w
 18481  0ED5  0087               	movwf	7
 18482  0ED6  315A               	addfsr 1,26
 18483  0ED7  3000               	movlw	0
 18484  0ED8  3FC0               	movwi [0]fsr1
 18485  0ED9  3FC1               	movwi [1]fsr1
 18486                           
 18487                           ;flashy_task.c: 445: data->noholdCount += 1;
 18488  0EDA  085E               	movf	flashy_Main@data,w
 18489  0EDB  0086               	movwf	6
 18490  0EDC  085F               	movf	flashy_Main@data+1,w
 18491  0EDD  0087               	movwf	7
 18492  0EDE  315C               	addfsr 1,28
 18493  0EDF  3001               	movlw	1
 18494  0EE0  0781               	addwf	1,f
 18495  0EE1  3141               	addfsr 1,1
 18496  0EE2  1803               	skipnc
 18497  0EE3  0A81               	incf	1,f
 18498                           
 18499                           ;flashy_task.c: 446: break;
 18500  0EE4  2FC9               	goto	l8170
 18501  0EE5                     l8138:	
 18502                           ;flashy_task.c: 447: default:
 18503                           
 18504                           
 18505                           ;flashy_task.c: 448: data->holdCountA = 0;
 18506  0EE5  085E               	movf	flashy_Main@data,w
 18507  0EE6  0086               	movwf	6
 18508  0EE7  085F               	movf	flashy_Main@data+1,w
 18509  0EE8  0087               	movwf	7
 18510  0EE9  314A               	addfsr 1,10
 18511  0EEA  3000               	movlw	0
 18512  0EEB  3FC0               	movwi [0]fsr1
 18513  0EEC  3FC1               	movwi [1]fsr1
 18514                           
 18515                           ;flashy_task.c: 449: data->holdCountB = 0;
 18516  0EED  085E               	movf	flashy_Main@data,w
 18517  0EEE  0086               	movwf	6
 18518  0EEF  085F               	movf	flashy_Main@data+1,w
 18519  0EF0  0087               	movwf	7
 18520  0EF1  314C               	addfsr 1,12
 18521  0EF2  3000               	movlw	0
 18522  0EF3  3FC0               	movwi [0]fsr1
 18523  0EF4  3FC1               	movwi [1]fsr1
 18524                           
 18525                           ;flashy_task.c: 450: data->holdCountX = 0;
 18526  0EF5  085E               	movf	flashy_Main@data,w
 18527  0EF6  0086               	movwf	6
 18528  0EF7  085F               	movf	flashy_Main@data+1,w
 18529  0EF8  0087               	movwf	7
 18530  0EF9  314E               	addfsr 1,14
 18531  0EFA  3000               	movlw	0
 18532  0EFB  3FC0               	movwi [0]fsr1
 18533  0EFC  3FC1               	movwi [1]fsr1
 18534                           
 18535                           ;flashy_task.c: 451: data->holdCountY = 0;
 18536  0EFD  085E               	movf	flashy_Main@data,w
 18537  0EFE  0086               	movwf	6
 18538  0EFF  085F               	movf	flashy_Main@data+1,w
 18539  0F00  0087               	movwf	7
 18540  0F01  3150               	addfsr 1,16
 18541  0F02  3000               	movlw	0
 18542  0F03  3FC0               	movwi [0]fsr1
 18543  0F04  3FC1               	movwi [1]fsr1
 18544                           
 18545                           ;flashy_task.c: 452: data->holdCountXY = 0;
 18546  0F05  085E               	movf	flashy_Main@data,w
 18547  0F06  0086               	movwf	6
 18548  0F07  085F               	movf	flashy_Main@data+1,w
 18549  0F08  0087               	movwf	7
 18550  0F09  3152               	addfsr 1,18
 18551  0F0A  3000               	movlw	0
 18552  0F0B  3FC0               	movwi [0]fsr1
 18553  0F0C  3FC1               	movwi [1]fsr1
 18554                           
 18555                           ;flashy_task.c: 453: data->holdCountAY = 0;
 18556  0F0D  085E               	movf	flashy_Main@data,w
 18557  0F0E  0086               	movwf	6
 18558  0F0F  085F               	movf	flashy_Main@data+1,w
 18559  0F10  0087               	movwf	7
 18560  0F11  3154               	addfsr 1,20
 18561  0F12  3000               	movlw	0
 18562  0F13  3FC0               	movwi [0]fsr1
 18563  0F14  3FC1               	movwi [1]fsr1
 18564                           
 18565                           ;flashy_task.c: 454: data->holdCountAX = 0;
 18566  0F15  085E               	movf	flashy_Main@data,w
 18567  0F16  0086               	movwf	6
 18568  0F17  085F               	movf	flashy_Main@data+1,w
 18569  0F18  0087               	movwf	7
 18570  0F19  3156               	addfsr 1,22
 18571  0F1A  3000               	movlw	0
 18572  0F1B  3FC0               	movwi [0]fsr1
 18573  0F1C  3FC1               	movwi [1]fsr1
 18574                           
 18575                           ;flashy_task.c: 455: data->holdCountBX = 0;
 18576  0F1D  085E               	movf	flashy_Main@data,w
 18577  0F1E  0086               	movwf	6
 18578  0F1F  085F               	movf	flashy_Main@data+1,w
 18579  0F20  0087               	movwf	7
 18580  0F21  3158               	addfsr 1,24
 18581  0F22  3000               	movlw	0
 18582  0F23  3FC0               	movwi [0]fsr1
 18583  0F24  3FC1               	movwi [1]fsr1
 18584                           
 18585                           ;flashy_task.c: 456: data->holdCountBY = 0;
 18586  0F25  085E               	movf	flashy_Main@data,w
 18587  0F26  0086               	movwf	6
 18588  0F27  085F               	movf	flashy_Main@data+1,w
 18589  0F28  0087               	movwf	7
 18590  0F29  315A               	addfsr 1,26
 18591  0F2A  3000               	movlw	0
 18592  0F2B  3FC0               	movwi [0]fsr1
 18593  0F2C  3FC1               	movwi [1]fsr1
 18594                           
 18595                           ;flashy_task.c: 457: data->noholdCount = 0;
 18596  0F2D  085E               	movf	flashy_Main@data,w
 18597  0F2E  0086               	movwf	6
 18598  0F2F  085F               	movf	flashy_Main@data+1,w
 18599  0F30  0087               	movwf	7
 18600  0F31  315C               	addfsr 1,28
 18601  0F32  3000               	movlw	0
 18602  0F33  3FC0               	movwi [0]fsr1
 18603  0F34  3FC1               	movwi [1]fsr1
 18604                           
 18605                           ;flashy_task.c: 458: }
 18606  0F35  2FC9               	goto	l8170
 18607  0F36                     l8140:	
 18608                           
 18609                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 18610                           ; Switch size 1, requested type "space"
 18611                           ; Number of cases is 1, Range of values is 0 to 0
 18612                           ; switch strategies available:
 18613                           ; Name         Instructions Cycles
 18614                           ; simple_byte            4     3 (average)
 18615                           ; direct_byte            8     6 (fixed)
 18616                           ; jumptable            260     6 (fixed)
 18617                           ;	Chosen strategy is simple_byte
 18618  0F36  085D               	movf	flashy_Main@buttonPressed+1,w
 18619  0F37  3A00               	xorlw	0	; case 0
 18620  0F38  1903               	skipnz
 18621  0F39  2F3B               	goto	l8996
 18622  0F3A  2EE5               	goto	l8138
 18623  0F3B                     l8996:	
 18624                           
 18625                           ; Switch size 1, requested type "space"
 18626                           ; Number of cases is 9, Range of values is 0 to 12
 18627                           ; switch strategies available:
 18628                           ; Name         Instructions Cycles
 18629                           ; simple_byte           28    15 (average)
 18630                           ; direct_byte           32     6 (fixed)
 18631                           ; jumptable            260     6 (fixed)
 18632                           ;	Chosen strategy is simple_byte
 18633  0F3B  085C               	movf	flashy_Main@buttonPressed,w
 18634  0F3C  3A00               	xorlw	0	; case 0
 18635  0F3D  1903               	skipnz
 18636  0F3E  2E92               	goto	l8134
 18637  0F3F  3A01               	xorlw	1	; case 1
 18638  0F40  1903               	skipnz
 18639  0F41  2DD0               	goto	l8086
 18640  0F42  3A03               	xorlw	3	; case 2
 18641  0F43  1903               	skipnz
 18642  0F44  2D4E               	goto	l8056
 18643  0F45  3A07               	xorlw	7	; case 5
 18644  0F46  1903               	skipnz
 18645  0F47  2B4C               	goto	l7932
 18646  0F48  3A03               	xorlw	3	; case 6
 18647  0F49  1903               	skipnz
 18648  0F4A  2C30               	goto	l7988
 18649  0F4B  3A0E               	xorlw	14	; case 8
 18650  0F4C  1903               	skipnz
 18651  0F4D  2CA5               	goto	l8018
 18652  0F4E  3A01               	xorlw	1	; case 9
 18653  0F4F  1903               	skipnz
 18654  0F50  2ADF               	goto	l7906
 18655  0F51  3A03               	xorlw	3	; case 10
 18656  0F52  1903               	skipnz
 18657  0F53  2BBB               	goto	l7958
 18658  0F54  3A06               	xorlw	6	; case 12
 18659  0F55  1903               	skipnz
 18660  0F56  2A7D               	goto	l7882
 18661  0F57  2EE5               	goto	l8138
 18662                           
 18663                           ;flashy_task.c: 461: switch (data->blaster_state) {
 18664  0F58  2FC9               	goto	l8170
 18665  0F59                     l8142:	
 18666                           ;flashy_task.c: 462: case FLASHY_BLASTER_SHOOTING_STATE:
 18667                           
 18668                           
 18669                           ;flashy_task.c: 464: if (data->blasterTickCount == 100) {
 18670  0F59  085E               	movf	flashy_Main@data,w
 18671  0F5A  0086               	movwf	6
 18672  0F5B  085F               	movf	flashy_Main@data+1,w
 18673  0F5C  0087               	movwf	7
 18674  0F5D  3147               	addfsr 1,7
 18675  0F5E  0016               	moviw fsr1++
 18676  0F5F  3A64               	xorlw	100
 18677  0F60  00D4               	movwf	??_flashy_Main
 18678  0F61  0016               	moviw fsr1++
 18679  0F62  04D4               	iorwf	??_flashy_Main,f
 18680  0F63  1D03               	btfss	3,2
 18681  0F64  2F70               	goto	l8148
 18682                           
 18683                           ;flashy_task.c: 465: nullifyBadge_irTxRegister(data->badge);
 18684  0F65  085E               	movf	flashy_Main@data,w
 18685  0F66  0086               	movwf	6
 18686  0F67  085F               	movf	flashy_Main@data+1,w
 18687  0F68  0087               	movwf	7
 18688  0F69  0801               	movf	1,w
 18689  0F6A  31AE  26D9  3188   	fcall	_nullifyBadge_irTxRegister
 18690                           
 18691                           ;flashy_task.c: 466: nullifyBadge_irTxSet();
 18692  0F6D  31AD  25EB  3188   	fcall	_nullifyBadge_irTxSet
 18693  0F70                     l8148:	
 18694                           
 18695                           ;flashy_task.c: 467: }
 18696                           ;flashy_task.c: 468: if (data->blasterTickCount == 100 - 1 ){
 18697  0F70  0020               	movlb	0	; select bank0
 18698  0F71  085E               	movf	flashy_Main@data,w
 18699  0F72  0086               	movwf	6
 18700  0F73  085F               	movf	flashy_Main@data+1,w
 18701  0F74  0087               	movwf	7
 18702  0F75  3147               	addfsr 1,7
 18703  0F76  0016               	moviw fsr1++
 18704  0F77  3A63               	xorlw	99
 18705  0F78  00D4               	movwf	??_flashy_Main
 18706  0F79  0016               	moviw fsr1++
 18707  0F7A  04D4               	iorwf	??_flashy_Main,f
 18708  0F7B  1D03               	btfss	3,2
 18709  0F7C  2F89               	goto	l8154
 18710                           
 18711                           ;flashy_task.c: 469: nullifyBadge_irTxClr();
 18712  0F7D  31AD  25E8  3188   	fcall	_nullifyBadge_irTxClr
 18713                           
 18714                           ;flashy_task.c: 470: nullifyBadge_irTxRelease(data->badge);
 18715  0F80  0020               	movlb	0	; select bank0
 18716  0F81  085E               	movf	flashy_Main@data,w
 18717  0F82  0086               	movwf	6
 18718  0F83  085F               	movf	flashy_Main@data+1,w
 18719  0F84  0087               	movwf	7
 18720  0F85  0801               	movf	1,w
 18721  0F86  31AE  2681  3188   	fcall	_nullifyBadge_irTxRelease
 18722  0F89                     l8154:	
 18723                           
 18724                           ;flashy_task.c: 471: }
 18725                           ;flashy_task.c: 472: if (data->blasterTickCount == 0){
 18726  0F89  0020               	movlb	0	; select bank0
 18727  0F8A  085E               	movf	flashy_Main@data,w
 18728  0F8B  0086               	movwf	6
 18729  0F8C  085F               	movf	flashy_Main@data+1,w
 18730  0F8D  0087               	movwf	7
 18731  0F8E  3147               	addfsr 1,7
 18732  0F8F  0016               	moviw fsr1++
 18733  0F90  0401               	iorwf	1,w
 18734  0F91  1D03               	btfss	3,2
 18735  0F92  2FBD               	goto	l8166
 18736                           
 18737                           ;flashy_task.c: 473: data->displayTickCount = 0;
 18738  0F93  085E               	movf	flashy_Main@data,w
 18739  0F94  0086               	movwf	6
 18740  0F95  085F               	movf	flashy_Main@data+1,w
 18741  0F96  0087               	movwf	7
 18742  0F97  3144               	addfsr 1,4
 18743  0F98  3000               	movlw	0
 18744  0F99  3FC0               	movwi [0]fsr1
 18745  0F9A  3FC1               	movwi [1]fsr1
 18746                           
 18747                           ;flashy_task.c: 474: data->delayTickCount = 5;
 18748  0F9B  085E               	movf	flashy_Main@data,w
 18749  0F9C  0086               	movwf	6
 18750  0F9D  085F               	movf	flashy_Main@data+1,w
 18751  0F9E  0087               	movwf	7
 18752  0F9F  3141               	addfsr 1,1
 18753  0FA0  3005               	movlw	5
 18754  0FA1  3FC0               	movwi [0]fsr1
 18755  0FA2  3000               	movlw	0
 18756  0FA3  3FC1               	movwi [1]fsr1
 18757                           
 18758                           ;flashy_task.c: 476: data->led_state = FLASHY_STATE_LED_ROUNDABOUT;
 18759  0FA4  085E               	movf	flashy_Main@data,w
 18760  0FA5  0086               	movwf	6
 18761  0FA6  085F               	movf	flashy_Main@data+1,w
 18762  0FA7  0087               	movwf	7
 18763  0FA8  3143               	addfsr 1,3
 18764  0FA9  0181               	clrf	1
 18765                           
 18766                           ;flashy_task.c: 477: data->display_state = FLASHY_STATE_DISPLAY;
 18767  0FAA  085E               	movf	flashy_Main@data,w
 18768  0FAB  0086               	movwf	6
 18769  0FAC  085F               	movf	flashy_Main@data+1,w
 18770  0FAD  0087               	movwf	7
 18771  0FAE  3146               	addfsr 1,6
 18772  0FAF  0181               	clrf	1
 18773                           
 18774                           ;flashy_task.c: 478: data->blaster_state = FLASHY_BLASTER_IDLE_STATE;
 18775  0FB0  085E               	movf	flashy_Main@data,w
 18776  0FB1  3E09               	addlw	9
 18777  0FB2  00D4               	movwf	??_flashy_Main
 18778  0FB3  3000               	movlw	0
 18779  0FB4  3D5F               	addwfc	flashy_Main@data+1,w
 18780  0FB5  00D5               	movwf	??_flashy_Main+1
 18781  0FB6  0854               	movf	??_flashy_Main,w
 18782  0FB7  0086               	movwf	6
 18783  0FB8  0855               	movf	??_flashy_Main+1,w
 18784  0FB9  0087               	movwf	7
 18785  0FBA  3001               	movlw	1
 18786  0FBB  0081               	movwf	1
 18787                           
 18788                           ;flashy_task.c: 479: }
 18789  0FBC  2FD6               	goto	l8172
 18790  0FBD                     l8166:	
 18791                           
 18792                           ;flashy_task.c: 480: else {
 18793                           ;flashy_task.c: 481: data->blasterTickCount -= 1;
 18794  0FBD  085E               	movf	flashy_Main@data,w
 18795  0FBE  0086               	movwf	6
 18796  0FBF  085F               	movf	flashy_Main@data+1,w
 18797  0FC0  0087               	movwf	7
 18798  0FC1  3147               	addfsr 1,7
 18799  0FC2  3001               	movlw	1
 18800  0FC3  0281               	subwf	1,f
 18801  0FC4  3141               	addfsr 1,1
 18802  0FC5  3000               	movlw	0
 18803  0FC6  3B81               	subwfb	1,f
 18804  0FC7  317F               	addfsr 1,-1
 18805                           
 18806                           ;flashy_task.c: 486: }
 18807                           
 18808                           ;flashy_task.c: 485: break;
 18809                           
 18810                           ;flashy_task.c: 484: case FLASHY_BLASTER_IDLE_STATE:
 18811                           
 18812                           ;flashy_task.c: 482: }
 18813                           ;flashy_task.c: 483: break;
 18814  0FC8  2FD6               	goto	l8172
 18815  0FC9                     l8170:	
 18816  0FC9  085E               	movf	flashy_Main@data,w
 18817  0FCA  0086               	movwf	6
 18818  0FCB  085F               	movf	flashy_Main@data+1,w
 18819  0FCC  0087               	movwf	7
 18820  0FCD  3149               	addfsr 1,9
 18821  0FCE  0801               	movf	1,w
 18822                           
 18823                           ; Switch size 1, requested type "space"
 18824                           ; Number of cases is 2, Range of values is 0 to 1
 18825                           ; switch strategies available:
 18826                           ; Name         Instructions Cycles
 18827                           ; simple_byte            7     4 (average)
 18828                           ; direct_byte           10     6 (fixed)
 18829                           ; jumptable            260     6 (fixed)
 18830                           ;	Chosen strategy is simple_byte
 18831  0FCF  3A00               	xorlw	0	; case 0
 18832  0FD0  1903               	skipnz
 18833  0FD1  2F59               	goto	l8142
 18834  0FD2  3A01               	xorlw	1	; case 1
 18835  0FD3  1903               	skipnz
 18836  0FD4  2FD6               	goto	l8172
 18837  0FD5  2FD6               	goto	l8172
 18838  0FD6                     l8172:	
 18839                           
 18840                           ;flashy_task.c: 489: if (nullifyBadge_irGet() && (data->blaster_state != FLASHY_BLASTER_
      +                          SHOOTING_STATE)) {
 18841  0FD6  31AD  25F2  3188   	fcall	_nullifyBadge_irGet
 18842  0FD9  3A00               	xorlw	0
 18843  0FDA  1903               	skipnz
 18844  0FDB  0008               	return
 18845  0FDC  0020               	movlb	0	; select bank0
 18846  0FDD  085E               	movf	flashy_Main@data,w
 18847  0FDE  0086               	movwf	6
 18848  0FDF  085F               	movf	flashy_Main@data+1,w
 18849  0FE0  0087               	movwf	7
 18850  0FE1  3149               	addfsr 1,9
 18851  0FE2  0801               	movf	1,w
 18852  0FE3  1903               	btfsc	3,2
 18853  0FE4  0008               	return
 18854                           
 18855                           ;flashy_task.c: 490: data->displayTickCount = 0;
 18856  0FE5  085E               	movf	flashy_Main@data,w
 18857  0FE6  0086               	movwf	6
 18858  0FE7  085F               	movf	flashy_Main@data+1,w
 18859  0FE8  0087               	movwf	7
 18860  0FE9  3144               	addfsr 1,4
 18861  0FEA  3000               	movlw	0
 18862  0FEB  3FC0               	movwi [0]fsr1
 18863  0FEC  3FC1               	movwi [1]fsr1
 18864                           
 18865                           ;flashy_task.c: 491: deaths += 1;
 18866  0FED  3001               	movlw	1
 18867  0FEE  0021               	movlb	1	; select bank1
 18868  0FEF  07A8               	addwf	_deaths^(0+128),f
 18869  0FF0  3000               	movlw	0
 18870  0FF1  3DA9               	addwfc	(_deaths+1)^(0+128),f
 18871                           
 18872                           ;flashy_task.c: 492: data->display_state = FLASHY_STATE_DISPLAY_SHOT;
 18873  0FF2  0020               	movlb	0	; select bank0
 18874  0FF3  085E               	movf	flashy_Main@data,w
 18875  0FF4  3E06               	addlw	6
 18876  0FF5  00D4               	movwf	??_flashy_Main
 18877  0FF6  3000               	movlw	0
 18878  0FF7  3D5F               	addwfc	flashy_Main@data+1,w
 18879  0FF8  00D5               	movwf	??_flashy_Main+1
 18880  0FF9  0854               	movf	??_flashy_Main,w
 18881  0FFA  0086               	movwf	6
 18882  0FFB  0855               	movf	??_flashy_Main+1,w
 18883  0FFC  0087               	movwf	7
 18884  0FFD  3003               	movlw	3
 18885  0FFE  0081               	movwf	1
 18886  0FFF  0008               	return
 18887  1000                     __end_of_flashy_Main:	
 18888                           
 18889                           	psect	swtext1
 18890  28EC                     __pswtext1:	
 18891  28EC                     S8994:	
 18892  28EC  3188  28D5         	ljmp	l7780
 18893  28EE  3188  28FA         	ljmp	l7790
 18894  28F0  3189  291E         	ljmp	l7800
 18895  28F2  3189  2936         	ljmp	l7808
 18896  28F4  3189  296D         	ljmp	l7826
 18897  28F6  3189  2992         	ljmp	l7836
 18898                           
 18899                           	psect	text17
 18900  00D7                     __ptext17:	
 18901 ;; *************** function _slot_Main *****************
 18902 ;; Defined at:
 18903 ;;		line 96 in file "slot_task.c"
 18904 ;; Parameters:    Size  Location     Type
 18905 ;;  taskData        2   50[BANK0 ] PTR void 
 18906 ;;		 -> secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), 
 18907 ;;		 -> flashy_TaskData(30), NULL(0), 
 18908 ;; Auto vars:     Size  Location     Type
 18909 ;;  data            2   69[BANK0 ] PTR struct t_slot_taskDa
 18910 ;;		 -> secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), 
 18911 ;;		 -> flashy_TaskData(30), NULL(0), 
 18912 ;;  buttonPresse    1   68[BANK0 ] unsigned char 
 18913 ;; Return value:  Size  Location     Type
 18914 ;;                  1    wreg      void 
 18915 ;; Registers used:
 18916 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18917 ;; Tracked objects:
 18918 ;;		On entry : 0/0
 18919 ;;		On exit  : 0/0
 18920 ;;		Unchanged: 0/0
 18921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18922 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18923 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18924 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18925 ;;      Totals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18926 ;;Total ram usage:       21 bytes
 18927 ;; Hardware stack levels used:    1
 18928 ;; Hardware stack levels required when called:   11
 18929 ;; This function calls:
 18930 ;;		___lwmod
 18931 ;;		_marquee
 18932 ;;		_marquee_speedy
 18933 ;;		_memset
 18934 ;;		_nullifyBadge_buttonsGet
 18935 ;;		_rand
 18936 ;;		_slot_Finished_Animation
 18937 ;;		_slot_Running_Animation
 18938 ;;		_slot_Setup
 18939 ;;		_sprintf
 18940 ;;		_strlen
 18941 ;; This function is called by:
 18942 ;;		_main
 18943 ;;		_scheduler_TaskRun
 18944 ;; This function uses a non-reentrant model
 18945 ;;
 18946                           
 18947                           
 18948                           ;psect for function _slot_Main
 18949  00D7                     _slot_Main:	
 18950                           
 18951                           ;slot_task.c: 97: struct t_slot_taskData *data = (struct t_slot_taskData *) taskData;
 18952                           
 18953                           ;incstack = 0
 18954                           ; Regs used in _slot_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18955  00D7  0020               	movlb	0	; select bank0
 18956  00D8  0853               	movf	slot_Main@taskData+1,w
 18957  00D9  00E6               	movwf	slot_Main@data+1
 18958  00DA  0852               	movf	slot_Main@taskData,w
 18959  00DB  00E5               	movwf	slot_Main@data
 18960                           
 18961                           ;slot_task.c: 98: u8 buttonPressed;
 18962                           ;slot_task.c: 101: if ( currentTask != SLOT_TASK ){
 18963  00DC  0021               	movlb	1	; select bank1
 18964  00DD  0338               	decf	_currentTask^(0+128),w
 18965  00DE  0439               	iorwf	(_currentTask+1)^(0+128),w
 18966  00DF  1903               	btfsc	3,2
 18967  00E0  2910               	goto	l8388
 18968                           
 18969                           ;slot_task.c: 102: buttonPressed = nullifyBadge_buttonsGet();
 18970  00E1  31A2  2250  3180   	fcall	_nullifyBadge_buttonsGet
 18971  00E4  0020               	movlb	0	; select bank0
 18972  00E5  00D4               	movwf	??_slot_Main
 18973  00E6  0854               	movf	??_slot_Main,w
 18974  00E7  00E4               	movwf	slot_Main@buttonPressed
 18975                           
 18976                           ;slot_task.c: 106: data->holdCountA = 1;
 18977                           
 18978                           ;slot_task.c: 104: default:
 18979                           
 18980                           ;slot_task.c: 103: switch (buttonPressed) {
 18981  00E8  0865               	movf	slot_Main@data,w
 18982  00E9  0086               	movwf	6
 18983  00EA  0866               	movf	slot_Main@data+1,w
 18984  00EB  0087               	movwf	7
 18985  00EC  315F               	addfsr 1,31
 18986  00ED  3001               	movlw	1
 18987  00EE  3FC0               	movwi [0]fsr1
 18988  00EF  3000               	movlw	0
 18989  00F0  3FC1               	movwi [1]fsr1
 18990                           
 18991                           ;slot_task.c: 107: data->holdCountB = 1;
 18992  00F1  0865               	movf	slot_Main@data,w
 18993  00F2  3E21               	addlw	33
 18994  00F3  0086               	movwf	6
 18995  00F4  3000               	movlw	0
 18996  00F5  3D66               	addwfc	slot_Main@data+1,w
 18997  00F6  0087               	movwf	7
 18998  00F7  3001               	movlw	1
 18999  00F8  3FC0               	movwi [0]fsr1
 19000  00F9  3000               	movlw	0
 19001  00FA  3FC1               	movwi [1]fsr1
 19002                           
 19003                           ;slot_task.c: 108: data->holdCountX = 1;
 19004  00FB  0865               	movf	slot_Main@data,w
 19005  00FC  3E23               	addlw	35
 19006  00FD  0086               	movwf	6
 19007  00FE  3000               	movlw	0
 19008  00FF  3D66               	addwfc	slot_Main@data+1,w
 19009  0100  0087               	movwf	7
 19010  0101  3001               	movlw	1
 19011  0102  3FC0               	movwi [0]fsr1
 19012  0103  3000               	movlw	0
 19013  0104  3FC1               	movwi [1]fsr1
 19014                           
 19015                           ;slot_task.c: 109: data->holdCountY = 1;
 19016  0105  0865               	movf	slot_Main@data,w
 19017  0106  3E25               	addlw	37
 19018  0107  0086               	movwf	6
 19019  0108  3000               	movlw	0
 19020  0109  3D66               	addwfc	slot_Main@data+1,w
 19021  010A  0087               	movwf	7
 19022  010B  3001               	movlw	1
 19023  010C  3FC0               	movwi [0]fsr1
 19024  010D  3000               	movlw	0
 19025  010E  3FC1               	movwi [1]fsr1
 19026                           
 19027                           ;slot_task.c: 111: }
 19028                           
 19029                           ;slot_task.c: 110: break;
 19030  010F  0008               	return
 19031  0110                     l8388:	
 19032                           ;slot_task.c: 112: return;
 19033                           
 19034                           
 19035                           ;slot_task.c: 113: }
 19036                           ;slot_task.c: 115: buttonPressed = nullifyBadge_buttonsGet();
 19037  0110  31A2  2250  3180   	fcall	_nullifyBadge_buttonsGet
 19038  0113  0020               	movlb	0	; select bank0
 19039  0114  00D4               	movwf	??_slot_Main
 19040  0115  0854               	movf	??_slot_Main,w
 19041  0116  00E4               	movwf	slot_Main@buttonPressed
 19042                           
 19043                           ;slot_task.c: 119: memset(data->slot_print_buf, 0x00, 20);
 19044                           
 19045                           ;slot_task.c: 117: default:
 19046                           
 19047                           ;slot_task.c: 116: switch (buttonPressed) {
 19048  0117  0865               	movf	slot_Main@data,w
 19049  0118  3E0B               	addlw	11
 19050  0119  00F1               	movwf	memset@p1
 19051  011A  3000               	movlw	0
 19052  011B  3D66               	addwfc	slot_Main@data+1,w
 19053  011C  00F2               	movwf	memset@p1+1
 19054  011D  3000               	movlw	0
 19055  011E  00F3               	movwf	memset@c
 19056  011F  00F4               	movwf	memset@c+1
 19057  0120  3014               	movlw	20
 19058  0121  00F5               	movwf	memset@n
 19059  0122  3000               	movlw	0
 19060  0123  00F6               	movwf	memset@n+1
 19061  0124  31AF  27CF  3180   	fcall	_memset
 19062                           
 19063                           ;slot_task.c: 122: if (data->displayTickCount < 100) {
 19064  0127  0020               	movlb	0	; select bank0
 19065  0128  0865               	movf	slot_Main@data,w
 19066  0129  0086               	movwf	6
 19067  012A  0866               	movf	slot_Main@data+1,w
 19068  012B  0087               	movwf	7
 19069  012C  3143               	addfsr 1,3
 19070  012D  3F40               	moviw [0]fsr1
 19071  012E  00D4               	movwf	??_slot_Main
 19072  012F  3F41               	moviw [1]fsr1
 19073  0130  00D5               	movwf	??_slot_Main+1
 19074  0131  3000               	movlw	0
 19075  0132  0255               	subwf	??_slot_Main+1,w
 19076  0133  3064               	movlw	100
 19077  0134  1903               	skipnz
 19078  0135  0254               	subwf	??_slot_Main,w
 19079  0136  1803               	skipnc
 19080  0137  2A43               	goto	l8408
 19081                           
 19082                           ;slot_task.c: 123: slot_Running_Animation(data);
 19083  0138  0866               	movf	slot_Main@data+1,w
 19084  0139  00B3               	movwf	slot_Running_Animation@taskData+1
 19085  013A  0865               	movf	slot_Main@data,w
 19086  013B  00B2               	movwf	slot_Running_Animation@taskData
 19087  013C  31A5  2544  3180   	fcall	_slot_Running_Animation
 19088                           
 19089                           ;slot_task.c: 124: data->slot_wheel_index[0] = (u8)rand() % strlen(Slot_Wheel);
 19090  013F  30B2               	movlw	low _Slot_Wheel
 19091  0140  00F1               	movwf	strlen@s
 19092  0141  3002               	movlw	high _Slot_Wheel
 19093  0142  00F2               	movwf	strlen@s+1
 19094  0143  31A0  20D3  3180   	fcall	_strlen
 19095  0146  0872               	movf	?_strlen+1,w
 19096  0147  0020               	movlb	0	; select bank0
 19097  0148  00AC               	movwf	___lwmod@divisor+1
 19098  0149  0871               	movf	?_strlen,w
 19099  014A  00AB               	movwf	___lwmod@divisor
 19100  014B  31A5  2501  3180   	fcall	_rand
 19101  014E  0020               	movlb	0	; select bank0
 19102  014F  0824               	movf	?_rand,w
 19103  0150  00D4               	movwf	??_slot_Main
 19104  0151  01D5               	clrf	??_slot_Main+1
 19105  0152  0854               	movf	??_slot_Main,w
 19106  0153  00AD               	movwf	___lwmod@dividend
 19107  0154  0855               	movf	??_slot_Main+1,w
 19108  0155  00AE               	movwf	___lwmod@dividend+1
 19109  0156  31A1  21F4  3180   	fcall	___lwmod
 19110  0159  0020               	movlb	0	; select bank0
 19111  015A  082B               	movf	?___lwmod,w
 19112  015B  00D6               	movwf	??_slot_Main+2
 19113  015C  0865               	movf	slot_Main@data,w
 19114  015D  3E07               	addlw	7
 19115  015E  00D7               	movwf	??_slot_Main+3
 19116  015F  3000               	movlw	0
 19117  0160  3D66               	addwfc	slot_Main@data+1,w
 19118  0161  00D8               	movwf	??_slot_Main+4
 19119  0162  0857               	movf	??_slot_Main+3,w
 19120  0163  0086               	movwf	6
 19121  0164  0858               	movf	??_slot_Main+4,w
 19122  0165  0087               	movwf	7
 19123  0166  0856               	movf	??_slot_Main+2,w
 19124  0167  0081               	movwf	1
 19125                           
 19126                           ;slot_task.c: 125: data->slot_wheel_index[1] = (u8)rand() % strlen(Slot_Wheel);
 19127  0168  30B2               	movlw	low _Slot_Wheel
 19128  0169  00F1               	movwf	strlen@s
 19129  016A  3002               	movlw	high _Slot_Wheel
 19130  016B  00F2               	movwf	strlen@s+1
 19131  016C  31A0  20D3  3180   	fcall	_strlen
 19132  016F  0872               	movf	?_strlen+1,w
 19133  0170  0020               	movlb	0	; select bank0
 19134  0171  00AC               	movwf	___lwmod@divisor+1
 19135  0172  0871               	movf	?_strlen,w
 19136  0173  00AB               	movwf	___lwmod@divisor
 19137  0174  31A5  2501  3180   	fcall	_rand
 19138  0177  0020               	movlb	0	; select bank0
 19139  0178  0824               	movf	?_rand,w
 19140  0179  00D4               	movwf	??_slot_Main
 19141  017A  01D5               	clrf	??_slot_Main+1
 19142  017B  0854               	movf	??_slot_Main,w
 19143  017C  00AD               	movwf	___lwmod@dividend
 19144  017D  0855               	movf	??_slot_Main+1,w
 19145  017E  00AE               	movwf	___lwmod@dividend+1
 19146  017F  31A1  21F4  3180   	fcall	___lwmod
 19147  0182  0020               	movlb	0	; select bank0
 19148  0183  082B               	movf	?___lwmod,w
 19149  0184  00D6               	movwf	??_slot_Main+2
 19150  0185  0865               	movf	slot_Main@data,w
 19151  0186  3E08               	addlw	8
 19152  0187  00D7               	movwf	??_slot_Main+3
 19153  0188  3000               	movlw	0
 19154  0189  3D66               	addwfc	slot_Main@data+1,w
 19155  018A  00D8               	movwf	??_slot_Main+4
 19156  018B  0857               	movf	??_slot_Main+3,w
 19157  018C  0086               	movwf	6
 19158  018D  0858               	movf	??_slot_Main+4,w
 19159  018E  0087               	movwf	7
 19160  018F  0856               	movf	??_slot_Main+2,w
 19161  0190  0081               	movwf	1
 19162                           
 19163                           ;slot_task.c: 126: data->slot_wheel_index[2] = (u8)rand() % strlen(Slot_Wheel);
 19164  0191  30B2               	movlw	low _Slot_Wheel
 19165  0192  00F1               	movwf	strlen@s
 19166  0193  3002               	movlw	high _Slot_Wheel
 19167  0194  00F2               	movwf	strlen@s+1
 19168  0195  31A0  20D3  3180   	fcall	_strlen
 19169  0198  0872               	movf	?_strlen+1,w
 19170  0199  0020               	movlb	0	; select bank0
 19171  019A  00AC               	movwf	___lwmod@divisor+1
 19172  019B  0871               	movf	?_strlen,w
 19173  019C  00AB               	movwf	___lwmod@divisor
 19174  019D  31A5  2501  3180   	fcall	_rand
 19175  01A0  0020               	movlb	0	; select bank0
 19176  01A1  0824               	movf	?_rand,w
 19177  01A2  00D4               	movwf	??_slot_Main
 19178  01A3  01D5               	clrf	??_slot_Main+1
 19179  01A4  0854               	movf	??_slot_Main,w
 19180  01A5  00AD               	movwf	___lwmod@dividend
 19181  01A6  0855               	movf	??_slot_Main+1,w
 19182  01A7  00AE               	movwf	___lwmod@dividend+1
 19183  01A8  31A1  21F4  3180   	fcall	___lwmod
 19184  01AB  0020               	movlb	0	; select bank0
 19185  01AC  082B               	movf	?___lwmod,w
 19186  01AD  00D6               	movwf	??_slot_Main+2
 19187  01AE  0865               	movf	slot_Main@data,w
 19188  01AF  3E09               	addlw	9
 19189  01B0  00D7               	movwf	??_slot_Main+3
 19190  01B1  3000               	movlw	0
 19191  01B2  3D66               	addwfc	slot_Main@data+1,w
 19192  01B3  00D8               	movwf	??_slot_Main+4
 19193  01B4  0857               	movf	??_slot_Main+3,w
 19194  01B5  0086               	movwf	6
 19195  01B6  0858               	movf	??_slot_Main+4,w
 19196  01B7  0087               	movwf	7
 19197  01B8  0856               	movf	??_slot_Main+2,w
 19198  01B9  0081               	movwf	1
 19199                           
 19200                           ;slot_task.c: 127: data->slot_wheel_index[3] = (u8)rand() % strlen(Slot_Wheel);
 19201  01BA  30B2               	movlw	low _Slot_Wheel
 19202  01BB  00F1               	movwf	strlen@s
 19203  01BC  3002               	movlw	high _Slot_Wheel
 19204  01BD  00F2               	movwf	strlen@s+1
 19205  01BE  31A0  20D3  3180   	fcall	_strlen
 19206  01C1  0872               	movf	?_strlen+1,w
 19207  01C2  0020               	movlb	0	; select bank0
 19208  01C3  00AC               	movwf	___lwmod@divisor+1
 19209  01C4  0871               	movf	?_strlen,w
 19210  01C5  00AB               	movwf	___lwmod@divisor
 19211  01C6  31A5  2501  3180   	fcall	_rand
 19212  01C9  0020               	movlb	0	; select bank0
 19213  01CA  0824               	movf	?_rand,w
 19214  01CB  00D4               	movwf	??_slot_Main
 19215  01CC  01D5               	clrf	??_slot_Main+1
 19216  01CD  0854               	movf	??_slot_Main,w
 19217  01CE  00AD               	movwf	___lwmod@dividend
 19218  01CF  0855               	movf	??_slot_Main+1,w
 19219  01D0  00AE               	movwf	___lwmod@dividend+1
 19220  01D1  31A1  21F4  3180   	fcall	___lwmod
 19221  01D4  0020               	movlb	0	; select bank0
 19222  01D5  082B               	movf	?___lwmod,w
 19223  01D6  00D6               	movwf	??_slot_Main+2
 19224  01D7  0865               	movf	slot_Main@data,w
 19225  01D8  3E0A               	addlw	10
 19226  01D9  00D7               	movwf	??_slot_Main+3
 19227  01DA  3000               	movlw	0
 19228  01DB  3D66               	addwfc	slot_Main@data+1,w
 19229  01DC  00D8               	movwf	??_slot_Main+4
 19230  01DD  0857               	movf	??_slot_Main+3,w
 19231  01DE  0086               	movwf	6
 19232  01DF  0858               	movf	??_slot_Main+4,w
 19233  01E0  0087               	movwf	7
 19234  01E1  0856               	movf	??_slot_Main+2,w
 19235  01E2  0081               	movwf	1
 19236                           
 19237                           ;slot_task.c: 128: sprintf(data->slot_print_buf, "%c%c%c%c", Slot_Wheel[data->slot_wheel
      +                          _index[0]], Slot_Wheel[data->slot_wheel_index[1]], Slot_Wheel[data->slot_wheel_index[2]]
      +                          , Slot_Wheel[data->slot_wheel_index[3]]);
 19238  01E3  0865               	movf	slot_Main@data,w
 19239  01E4  3E0B               	addlw	11
 19240  01E5  00AF               	movwf	sprintf@sp
 19241  01E6  3000               	movlw	0
 19242  01E7  3D66               	addwfc	slot_Main@data+1,w
 19243  01E8  00B0               	movwf	sprintf@sp+1
 19244  01E9  30A8               	movlw	low (STR_48| (0+32768))
 19245  01EA  00B1               	movwf	sprintf@f
 19246  01EB  30B0               	movlw	high (STR_48| (0+32768))
 19247  01EC  00B2               	movwf	sprintf@f+1
 19248  01ED  0865               	movf	slot_Main@data,w
 19249  01EE  0086               	movwf	6
 19250  01EF  0866               	movf	slot_Main@data+1,w
 19251  01F0  0087               	movwf	7
 19252  01F1  3147               	addfsr 1,7
 19253  01F2  0801               	movf	1,w
 19254  01F3  3EB2               	addlw	(low (_Slot_Wheel| (0+512)))& (0+255)
 19255  01F4  0086               	movwf	6
 19256  01F5  3002               	movlw	2	; select bank5/6
 19257  01F6  0087               	movwf	7
 19258  01F7  0801               	movf	1,w
 19259  01F8  00D4               	movwf	??_slot_Main
 19260  01F9  01D5               	clrf	??_slot_Main+1
 19261  01FA  0854               	movf	??_slot_Main,w
 19262  01FB  00B3               	movwf	?_sprintf+4
 19263  01FC  0855               	movf	??_slot_Main+1,w
 19264  01FD  00B4               	movwf	?_sprintf+5
 19265  01FE  0865               	movf	slot_Main@data,w
 19266  01FF  0086               	movwf	6
 19267  0200  0866               	movf	slot_Main@data+1,w
 19268  0201  0087               	movwf	7
 19269  0202  3148               	addfsr 1,8
 19270  0203  0801               	movf	1,w
 19271  0204  3EB2               	addlw	(low (_Slot_Wheel| (0+512)))& (0+255)
 19272  0205  0086               	movwf	6
 19273  0206  3002               	movlw	2	; select bank5/6
 19274  0207  0087               	movwf	7
 19275  0208  0801               	movf	1,w
 19276  0209  00D6               	movwf	??_slot_Main+2
 19277  020A  01D7               	clrf	??_slot_Main+3
 19278  020B  0856               	movf	??_slot_Main+2,w
 19279  020C  00B5               	movwf	?_sprintf+6
 19280  020D  0857               	movf	??_slot_Main+3,w
 19281  020E  00B6               	movwf	?_sprintf+7
 19282  020F  0865               	movf	slot_Main@data,w
 19283  0210  0086               	movwf	6
 19284  0211  0866               	movf	slot_Main@data+1,w
 19285  0212  0087               	movwf	7
 19286  0213  3149               	addfsr 1,9
 19287  0214  0801               	movf	1,w
 19288  0215  3EB2               	addlw	(low (_Slot_Wheel| (0+512)))& (0+255)
 19289  0216  0086               	movwf	6
 19290  0217  3002               	movlw	2	; select bank5/6
 19291  0218  0087               	movwf	7
 19292  0219  0801               	movf	1,w
 19293  021A  00D8               	movwf	??_slot_Main+4
 19294  021B  01D9               	clrf	??_slot_Main+5
 19295  021C  0858               	movf	??_slot_Main+4,w
 19296  021D  00B7               	movwf	?_sprintf+8
 19297  021E  0859               	movf	??_slot_Main+5,w
 19298  021F  00B8               	movwf	?_sprintf+9
 19299  0220  0865               	movf	slot_Main@data,w
 19300  0221  0086               	movwf	6
 19301  0222  0866               	movf	slot_Main@data+1,w
 19302  0223  0087               	movwf	7
 19303  0224  314A               	addfsr 1,10
 19304  0225  0801               	movf	1,w
 19305  0226  3EB2               	addlw	(low (_Slot_Wheel| (0+512)))& (0+255)
 19306  0227  0086               	movwf	6
 19307  0228  3002               	movlw	2	; select bank5/6
 19308  0229  0087               	movwf	7
 19309  022A  0801               	movf	1,w
 19310  022B  00DA               	movwf	??_slot_Main+6
 19311  022C  01DB               	clrf	??_slot_Main+7
 19312  022D  085A               	movf	??_slot_Main+6,w
 19313  022E  00B9               	movwf	?_sprintf+10
 19314  022F  085B               	movf	??_slot_Main+7,w
 19315  0230  00BA               	movwf	?_sprintf+11
 19316  0231  3192  225F  3180   	fcall	_sprintf
 19317                           
 19318                           ;slot_task.c: 129: marquee(data->slot_print_buf, 1);}
 19319  0234  0020               	movlb	0	; select bank0
 19320  0235  0865               	movf	slot_Main@data,w
 19321  0236  3E0B               	addlw	11
 19322  0237  00BA               	movwf	marquee@string
 19323  0238  3000               	movlw	0
 19324  0239  3D66               	addwfc	slot_Main@data+1,w
 19325  023A  00BB               	movwf	marquee@string+1
 19326  023B  3001               	movlw	1
 19327  023C  00BC               	movwf	marquee@count
 19328  023D  3000               	movlw	0
 19329  023E  00BD               	movwf	marquee@count+1
 19330  023F  319B  2338  3180   	fcall	_marquee
 19331  0242  2E0F               	goto	l8472
 19332  0243                     l8408:	
 19333                           
 19334                           ;slot_task.c: 130: else if (data->displayTickCount < 200) {
 19335  0243  0020               	movlb	0	; select bank0
 19336  0244  0865               	movf	slot_Main@data,w
 19337  0245  0086               	movwf	6
 19338  0246  0866               	movf	slot_Main@data+1,w
 19339  0247  0087               	movwf	7
 19340  0248  3143               	addfsr 1,3
 19341  0249  3F40               	moviw [0]fsr1
 19342  024A  00D4               	movwf	??_slot_Main
 19343  024B  3F41               	moviw [1]fsr1
 19344  024C  00D5               	movwf	??_slot_Main+1
 19345  024D  3000               	movlw	0
 19346  024E  0255               	subwf	??_slot_Main+1,w
 19347  024F  30C8               	movlw	200
 19348  0250  1903               	skipnz
 19349  0251  0254               	subwf	??_slot_Main,w
 19350  0252  1803               	skipnc
 19351  0253  2B38               	goto	l8422
 19352                           
 19353                           ;slot_task.c: 131: slot_Running_Animation(data);
 19354  0254  0866               	movf	slot_Main@data+1,w
 19355  0255  00B3               	movwf	slot_Running_Animation@taskData+1
 19356  0256  0865               	movf	slot_Main@data,w
 19357  0257  00B2               	movwf	slot_Running_Animation@taskData
 19358  0258  31A5  2544  3180   	fcall	_slot_Running_Animation
 19359                           
 19360                           ;slot_task.c: 132: data->slot_wheel_index[1] = (u8)rand() % strlen(Slot_Wheel);
 19361  025B  30B2               	movlw	low _Slot_Wheel
 19362  025C  00F1               	movwf	strlen@s
 19363  025D  3002               	movlw	high _Slot_Wheel
 19364  025E  00F2               	movwf	strlen@s+1
 19365  025F  31A0  20D3  3180   	fcall	_strlen
 19366  0262  0872               	movf	?_strlen+1,w
 19367  0263  0020               	movlb	0	; select bank0
 19368  0264  00AC               	movwf	___lwmod@divisor+1
 19369  0265  0871               	movf	?_strlen,w
 19370  0266  00AB               	movwf	___lwmod@divisor
 19371  0267  31A5  2501  3180   	fcall	_rand
 19372  026A  0020               	movlb	0	; select bank0
 19373  026B  0824               	movf	?_rand,w
 19374  026C  00D4               	movwf	??_slot_Main
 19375  026D  01D5               	clrf	??_slot_Main+1
 19376  026E  0854               	movf	??_slot_Main,w
 19377  026F  00AD               	movwf	___lwmod@dividend
 19378  0270  0855               	movf	??_slot_Main+1,w
 19379  0271  00AE               	movwf	___lwmod@dividend+1
 19380  0272  31A1  21F4  3180   	fcall	___lwmod
 19381  0275  0020               	movlb	0	; select bank0
 19382  0276  082B               	movf	?___lwmod,w
 19383  0277  00D6               	movwf	??_slot_Main+2
 19384  0278  0865               	movf	slot_Main@data,w
 19385  0279  3E08               	addlw	8
 19386  027A  00D7               	movwf	??_slot_Main+3
 19387  027B  3000               	movlw	0
 19388  027C  3D66               	addwfc	slot_Main@data+1,w
 19389  027D  00D8               	movwf	??_slot_Main+4
 19390  027E  0857               	movf	??_slot_Main+3,w
 19391  027F  0086               	movwf	6
 19392  0280  0858               	movf	??_slot_Main+4,w
 19393  0281  0087               	movwf	7
 19394  0282  0856               	movf	??_slot_Main+2,w
 19395  0283  0081               	movwf	1
 19396                           
 19397                           ;slot_task.c: 133: data->slot_wheel_index[2] = (u8)rand() % strlen(Slot_Wheel);
 19398  0284  30B2               	movlw	low _Slot_Wheel
 19399  0285  00F1               	movwf	strlen@s
 19400  0286  3002               	movlw	high _Slot_Wheel
 19401  0287  00F2               	movwf	strlen@s+1
 19402  0288  31A0  20D3  3180   	fcall	_strlen
 19403  028B  0872               	movf	?_strlen+1,w
 19404  028C  0020               	movlb	0	; select bank0
 19405  028D  00AC               	movwf	___lwmod@divisor+1
 19406  028E  0871               	movf	?_strlen,w
 19407  028F  00AB               	movwf	___lwmod@divisor
 19408  0290  31A5  2501  3180   	fcall	_rand
 19409  0293  0020               	movlb	0	; select bank0
 19410  0294  0824               	movf	?_rand,w
 19411  0295  00D4               	movwf	??_slot_Main
 19412  0296  01D5               	clrf	??_slot_Main+1
 19413  0297  0854               	movf	??_slot_Main,w
 19414  0298  00AD               	movwf	___lwmod@dividend
 19415  0299  0855               	movf	??_slot_Main+1,w
 19416  029A  00AE               	movwf	___lwmod@dividend+1
 19417  029B  31A1  21F4  3180   	fcall	___lwmod
 19418  029E  0020               	movlb	0	; select bank0
 19419  029F  082B               	movf	?___lwmod,w
 19420  02A0  00D6               	movwf	??_slot_Main+2
 19421  02A1  0865               	movf	slot_Main@data,w
 19422  02A2  3E09               	addlw	9
 19423  02A3  00D7               	movwf	??_slot_Main+3
 19424  02A4  3000               	movlw	0
 19425  02A5  3D66               	addwfc	slot_Main@data+1,w
 19426  02A6  00D8               	movwf	??_slot_Main+4
 19427  02A7  0857               	movf	??_slot_Main+3,w
 19428  02A8  0086               	movwf	6
 19429  02A9  0858               	movf	??_slot_Main+4,w
 19430  02AA  0087               	movwf	7
 19431  02AB  0856               	movf	??_slot_Main+2,w
 19432  02AC  0081               	movwf	1
 19433                           
 19434                           ;slot_task.c: 134: data->slot_wheel_index[3] = (u8)rand() % strlen(Slot_Wheel);
 19435  02AD  30B2               	movlw	low _Slot_Wheel
 19436  02AE  00F1               	movwf	strlen@s
 19437  02AF  3002               	movlw	high _Slot_Wheel
 19438  02B0  00F2               	movwf	strlen@s+1
 19439  02B1  31A0  20D3  3180   	fcall	_strlen
 19440  02B4  0872               	movf	?_strlen+1,w
 19441  02B5  0020               	movlb	0	; select bank0
 19442  02B6  00AC               	movwf	___lwmod@divisor+1
 19443  02B7  0871               	movf	?_strlen,w
 19444  02B8  00AB               	movwf	___lwmod@divisor
 19445  02B9  31A5  2501  3180   	fcall	_rand
 19446  02BC  0020               	movlb	0	; select bank0
 19447  02BD  0824               	movf	?_rand,w
 19448  02BE  00D4               	movwf	??_slot_Main
 19449  02BF  01D5               	clrf	??_slot_Main+1
 19450  02C0  0854               	movf	??_slot_Main,w
 19451  02C1  00AD               	movwf	___lwmod@dividend
 19452  02C2  0855               	movf	??_slot_Main+1,w
 19453  02C3  00AE               	movwf	___lwmod@dividend+1
 19454  02C4  31A1  21F4  3180   	fcall	___lwmod
 19455  02C7  0020               	movlb	0	; select bank0
 19456  02C8  082B               	movf	?___lwmod,w
 19457  02C9  00D6               	movwf	??_slot_Main+2
 19458  02CA  0865               	movf	slot_Main@data,w
 19459  02CB  3E0A               	addlw	10
 19460  02CC  00D7               	movwf	??_slot_Main+3
 19461  02CD  3000               	movlw	0
 19462  02CE  3D66               	addwfc	slot_Main@data+1,w
 19463  02CF  00D8               	movwf	??_slot_Main+4
 19464  02D0  0857               	movf	??_slot_Main+3,w
 19465  02D1  0086               	movwf	6
 19466  02D2  0858               	movf	??_slot_Main+4,w
 19467  02D3  0087               	movwf	7
 19468  02D4  0856               	movf	??_slot_Main+2,w
 19469  02D5  0081               	movwf	1
 19470                           
 19471                           ;slot_task.c: 135: sprintf(data->slot_print_buf, "%c%c%c%c", Shot_Options[Shot_Index][0]
      +                          , Slot_Wheel[data->slot_wheel_index[1]], Slot_Wheel[data->slot_wheel_index[2]], Slot_Whe
      +                          el[data->slot_wheel_index[3]]);
 19472  02D6  0865               	movf	slot_Main@data,w
 19473  02D7  3E0B               	addlw	11
 19474  02D8  00AF               	movwf	sprintf@sp
 19475  02D9  3000               	movlw	0
 19476  02DA  3D66               	addwfc	slot_Main@data+1,w
 19477  02DB  00B0               	movwf	sprintf@sp+1
 19478  02DC  30A8               	movlw	low (STR_48| (0+32768))
 19479  02DD  00B1               	movwf	sprintf@f
 19480  02DE  30B0               	movlw	high (STR_48| (0+32768))
 19481  02DF  00B2               	movwf	sprintf@f+1
 19482  02E0  357C               	lslf	_Shot_Index,w
 19483  02E1  3EC7               	addlw	(low (_Shot_Options| 0))& (0+255)
 19484  02E2  0086               	movwf	6
 19485  02E3  0187               	clrf	7
 19486  02E4  3F40               	moviw [0]fsr1
 19487  02E5  00D4               	movwf	??_slot_Main
 19488  02E6  3F41               	moviw [1]fsr1
 19489  02E7  00D5               	movwf	??_slot_Main+1
 19490  02E8  0854               	movf	??_slot_Main,w
 19491  02E9  0084               	movwf	4
 19492  02EA  0855               	movf	??_slot_Main+1,w
 19493  02EB  0085               	movwf	5
 19494  02EC  0800               	movf	0,w	;code access
 19495  02ED  00D6               	movwf	??_slot_Main+2
 19496  02EE  01D7               	clrf	??_slot_Main+3
 19497  02EF  0856               	movf	??_slot_Main+2,w
 19498  02F0  00B3               	movwf	?_sprintf+4
 19499  02F1  0857               	movf	??_slot_Main+3,w
 19500  02F2  00B4               	movwf	?_sprintf+5
 19501  02F3  0865               	movf	slot_Main@data,w
 19502  02F4  0086               	movwf	6
 19503  02F5  0866               	movf	slot_Main@data+1,w
 19504  02F6  0087               	movwf	7
 19505  02F7  3148               	addfsr 1,8
 19506  02F8  0801               	movf	1,w
 19507  02F9  3EB2               	addlw	(low (_Slot_Wheel| (0+512)))& (0+255)
 19508  02FA  0086               	movwf	6
 19509  02FB  3002               	movlw	2	; select bank5/6
 19510  02FC  0087               	movwf	7
 19511  02FD  0801               	movf	1,w
 19512  02FE  00D8               	movwf	??_slot_Main+4
 19513  02FF  01D9               	clrf	??_slot_Main+5
 19514  0300  0858               	movf	??_slot_Main+4,w
 19515  0301  00B5               	movwf	?_sprintf+6
 19516  0302  0859               	movf	??_slot_Main+5,w
 19517  0303  00B6               	movwf	?_sprintf+7
 19518  0304  0865               	movf	slot_Main@data,w
 19519  0305  0086               	movwf	6
 19520  0306  0866               	movf	slot_Main@data+1,w
 19521  0307  0087               	movwf	7
 19522  0308  3149               	addfsr 1,9
 19523  0309  0801               	movf	1,w
 19524  030A  3EB2               	addlw	(low (_Slot_Wheel| (0+512)))& (0+255)
 19525  030B  0086               	movwf	6
 19526  030C  3002               	movlw	2	; select bank5/6
 19527  030D  0087               	movwf	7
 19528  030E  0801               	movf	1,w
 19529  030F  00DA               	movwf	??_slot_Main+6
 19530  0310  01DB               	clrf	??_slot_Main+7
 19531  0311  085A               	movf	??_slot_Main+6,w
 19532  0312  00B7               	movwf	?_sprintf+8
 19533  0313  085B               	movf	??_slot_Main+7,w
 19534  0314  00B8               	movwf	?_sprintf+9
 19535  0315  0865               	movf	slot_Main@data,w
 19536  0316  0086               	movwf	6
 19537  0317  0866               	movf	slot_Main@data+1,w
 19538  0318  0087               	movwf	7
 19539  0319  314A               	addfsr 1,10
 19540  031A  0801               	movf	1,w
 19541  031B  3EB2               	addlw	(low (_Slot_Wheel| (0+512)))& (0+255)
 19542  031C  0086               	movwf	6
 19543  031D  3002               	movlw	2	; select bank5/6
 19544  031E  0087               	movwf	7
 19545  031F  0801               	movf	1,w
 19546  0320  00DC               	movwf	??_slot_Main+8
 19547  0321  01DD               	clrf	??_slot_Main+9
 19548  0322  085C               	movf	??_slot_Main+8,w
 19549  0323  00B9               	movwf	?_sprintf+10
 19550  0324  085D               	movf	??_slot_Main+9,w
 19551  0325  00BA               	movwf	?_sprintf+11
 19552  0326  3192  225F  3180   	fcall	_sprintf
 19553                           
 19554                           ;slot_task.c: 136: marquee(data->slot_print_buf, 1);}
 19555  0329  0020               	movlb	0	; select bank0
 19556  032A  0865               	movf	slot_Main@data,w
 19557  032B  3E0B               	addlw	11
 19558  032C  00BA               	movwf	marquee@string
 19559  032D  3000               	movlw	0
 19560  032E  3D66               	addwfc	slot_Main@data+1,w
 19561  032F  00BB               	movwf	marquee@string+1
 19562  0330  3001               	movlw	1
 19563  0331  00BC               	movwf	marquee@count
 19564  0332  3000               	movlw	0
 19565  0333  00BD               	movwf	marquee@count+1
 19566  0334  319B  2338  3180   	fcall	_marquee
 19567  0337  2E0F               	goto	l8472
 19568  0338                     l8422:	
 19569                           
 19570                           ;slot_task.c: 137: else if (data->displayTickCount < 300) {
 19571  0338  0020               	movlb	0	; select bank0
 19572  0339  0865               	movf	slot_Main@data,w
 19573  033A  0086               	movwf	6
 19574  033B  0866               	movf	slot_Main@data+1,w
 19575  033C  0087               	movwf	7
 19576  033D  3143               	addfsr 1,3
 19577  033E  3F40               	moviw [0]fsr1
 19578  033F  00D4               	movwf	??_slot_Main
 19579  0340  3F41               	moviw [1]fsr1
 19580  0341  00D5               	movwf	??_slot_Main+1
 19581  0342  3001               	movlw	1
 19582  0343  0255               	subwf	??_slot_Main+1,w
 19583  0344  302C               	movlw	44
 19584  0345  1903               	skipnz
 19585  0346  0254               	subwf	??_slot_Main,w
 19586  0347  1803               	skipnc
 19587  0348  2C09               	goto	l8434
 19588                           
 19589                           ;slot_task.c: 138: slot_Running_Animation(data);
 19590  0349  0866               	movf	slot_Main@data+1,w
 19591  034A  00B3               	movwf	slot_Running_Animation@taskData+1
 19592  034B  0865               	movf	slot_Main@data,w
 19593  034C  00B2               	movwf	slot_Running_Animation@taskData
 19594  034D  31A5  2544  3180   	fcall	_slot_Running_Animation
 19595                           
 19596                           ;slot_task.c: 139: data->slot_wheel_index[2] = (u8)rand() % strlen(Slot_Wheel);
 19597  0350  30B2               	movlw	low _Slot_Wheel
 19598  0351  00F1               	movwf	strlen@s
 19599  0352  3002               	movlw	high _Slot_Wheel
 19600  0353  00F2               	movwf	strlen@s+1
 19601  0354  31A0  20D3  3180   	fcall	_strlen
 19602  0357  0872               	movf	?_strlen+1,w
 19603  0358  0020               	movlb	0	; select bank0
 19604  0359  00AC               	movwf	___lwmod@divisor+1
 19605  035A  0871               	movf	?_strlen,w
 19606  035B  00AB               	movwf	___lwmod@divisor
 19607  035C  31A5  2501  3180   	fcall	_rand
 19608  035F  0020               	movlb	0	; select bank0
 19609  0360  0824               	movf	?_rand,w
 19610  0361  00D4               	movwf	??_slot_Main
 19611  0362  01D5               	clrf	??_slot_Main+1
 19612  0363  0854               	movf	??_slot_Main,w
 19613  0364  00AD               	movwf	___lwmod@dividend
 19614  0365  0855               	movf	??_slot_Main+1,w
 19615  0366  00AE               	movwf	___lwmod@dividend+1
 19616  0367  31A1  21F4  3180   	fcall	___lwmod
 19617  036A  0020               	movlb	0	; select bank0
 19618  036B  082B               	movf	?___lwmod,w
 19619  036C  00D6               	movwf	??_slot_Main+2
 19620  036D  0865               	movf	slot_Main@data,w
 19621  036E  3E09               	addlw	9
 19622  036F  00D7               	movwf	??_slot_Main+3
 19623  0370  3000               	movlw	0
 19624  0371  3D66               	addwfc	slot_Main@data+1,w
 19625  0372  00D8               	movwf	??_slot_Main+4
 19626  0373  0857               	movf	??_slot_Main+3,w
 19627  0374  0086               	movwf	6
 19628  0375  0858               	movf	??_slot_Main+4,w
 19629  0376  0087               	movwf	7
 19630  0377  0856               	movf	??_slot_Main+2,w
 19631  0378  0081               	movwf	1
 19632                           
 19633                           ;slot_task.c: 140: data->slot_wheel_index[3] = (u8)rand() % strlen(Slot_Wheel);
 19634  0379  30B2               	movlw	low _Slot_Wheel
 19635  037A  00F1               	movwf	strlen@s
 19636  037B  3002               	movlw	high _Slot_Wheel
 19637  037C  00F2               	movwf	strlen@s+1
 19638  037D  31A0  20D3  3180   	fcall	_strlen
 19639  0380  0872               	movf	?_strlen+1,w
 19640  0381  0020               	movlb	0	; select bank0
 19641  0382  00AC               	movwf	___lwmod@divisor+1
 19642  0383  0871               	movf	?_strlen,w
 19643  0384  00AB               	movwf	___lwmod@divisor
 19644  0385  31A5  2501  3180   	fcall	_rand
 19645  0388  0020               	movlb	0	; select bank0
 19646  0389  0824               	movf	?_rand,w
 19647  038A  00D4               	movwf	??_slot_Main
 19648  038B  01D5               	clrf	??_slot_Main+1
 19649  038C  0854               	movf	??_slot_Main,w
 19650  038D  00AD               	movwf	___lwmod@dividend
 19651  038E  0855               	movf	??_slot_Main+1,w
 19652  038F  00AE               	movwf	___lwmod@dividend+1
 19653  0390  31A1  21F4  3180   	fcall	___lwmod
 19654  0393  0020               	movlb	0	; select bank0
 19655  0394  082B               	movf	?___lwmod,w
 19656  0395  00D6               	movwf	??_slot_Main+2
 19657  0396  0865               	movf	slot_Main@data,w
 19658  0397  3E0A               	addlw	10
 19659  0398  00D7               	movwf	??_slot_Main+3
 19660  0399  3000               	movlw	0
 19661  039A  3D66               	addwfc	slot_Main@data+1,w
 19662  039B  00D8               	movwf	??_slot_Main+4
 19663  039C  0857               	movf	??_slot_Main+3,w
 19664  039D  0086               	movwf	6
 19665  039E  0858               	movf	??_slot_Main+4,w
 19666  039F  0087               	movwf	7
 19667  03A0  0856               	movf	??_slot_Main+2,w
 19668  03A1  0081               	movwf	1
 19669                           
 19670                           ;slot_task.c: 141: sprintf(data->slot_print_buf, "%c%c%c%c", Shot_Options[Shot_Index][0]
      +                          , Shot_Options[Shot_Index][1], Slot_Wheel[data->slot_wheel_index[2]], Slot_Wheel[data->s
      +                          lot_wheel_index[3]]);
 19671  03A2  0865               	movf	slot_Main@data,w
 19672  03A3  3E0B               	addlw	11
 19673  03A4  00AF               	movwf	sprintf@sp
 19674  03A5  3000               	movlw	0
 19675  03A6  3D66               	addwfc	slot_Main@data+1,w
 19676  03A7  00B0               	movwf	sprintf@sp+1
 19677  03A8  30A8               	movlw	low (STR_48| (0+32768))
 19678  03A9  00B1               	movwf	sprintf@f
 19679  03AA  30B0               	movlw	high (STR_48| (0+32768))
 19680  03AB  00B2               	movwf	sprintf@f+1
 19681  03AC  357C               	lslf	_Shot_Index,w
 19682  03AD  3EC7               	addlw	(low (_Shot_Options| 0))& (0+255)
 19683  03AE  0086               	movwf	6
 19684  03AF  0187               	clrf	7
 19685  03B0  3F40               	moviw [0]fsr1
 19686  03B1  00D4               	movwf	??_slot_Main
 19687  03B2  3F41               	moviw [1]fsr1
 19688  03B3  00D5               	movwf	??_slot_Main+1
 19689  03B4  0854               	movf	??_slot_Main,w
 19690  03B5  0084               	movwf	4
 19691  03B6  0855               	movf	??_slot_Main+1,w
 19692  03B7  0085               	movwf	5
 19693  03B8  0800               	movf	0,w	;code access
 19694  03B9  00D6               	movwf	??_slot_Main+2
 19695  03BA  01D7               	clrf	??_slot_Main+3
 19696  03BB  0856               	movf	??_slot_Main+2,w
 19697  03BC  00B3               	movwf	?_sprintf+4
 19698  03BD  0857               	movf	??_slot_Main+3,w
 19699  03BE  00B4               	movwf	?_sprintf+5
 19700  03BF  357C               	lslf	_Shot_Index,w
 19701  03C0  3EC7               	addlw	(low (_Shot_Options| 0))& (0+255)
 19702  03C1  0086               	movwf	6
 19703  03C2  0187               	clrf	7
 19704  03C3  3F40               	moviw [0]fsr1
 19705  03C4  00D8               	movwf	??_slot_Main+4
 19706  03C5  3F41               	moviw [1]fsr1
 19707  03C6  00D9               	movwf	??_slot_Main+5
 19708  03C7  3001               	movlw	1
 19709  03C8  0758               	addwf	??_slot_Main+4,w
 19710  03C9  0084               	movwf	4
 19711  03CA  0859               	movf	??_slot_Main+5,w
 19712  03CB  1803               	skipnc
 19713  03CC  0A59               	incf	??_slot_Main+5,w
 19714  03CD  0085               	movwf	5
 19715  03CE  0800               	movf	0,w	;code access
 19716  03CF  00DA               	movwf	??_slot_Main+6
 19717  03D0  01DB               	clrf	??_slot_Main+7
 19718  03D1  085A               	movf	??_slot_Main+6,w
 19719  03D2  00B5               	movwf	?_sprintf+6
 19720  03D3  085B               	movf	??_slot_Main+7,w
 19721  03D4  00B6               	movwf	?_sprintf+7
 19722  03D5  0865               	movf	slot_Main@data,w
 19723  03D6  0086               	movwf	6
 19724  03D7  0866               	movf	slot_Main@data+1,w
 19725  03D8  0087               	movwf	7
 19726  03D9  3149               	addfsr 1,9
 19727  03DA  0801               	movf	1,w
 19728  03DB  3EB2               	addlw	(low (_Slot_Wheel| (0+512)))& (0+255)
 19729  03DC  0086               	movwf	6
 19730  03DD  3002               	movlw	2	; select bank5/6
 19731  03DE  0087               	movwf	7
 19732  03DF  0801               	movf	1,w
 19733  03E0  00DC               	movwf	??_slot_Main+8
 19734  03E1  01DD               	clrf	??_slot_Main+9
 19735  03E2  085C               	movf	??_slot_Main+8,w
 19736  03E3  00B7               	movwf	?_sprintf+8
 19737  03E4  085D               	movf	??_slot_Main+9,w
 19738  03E5  00B8               	movwf	?_sprintf+9
 19739  03E6  0865               	movf	slot_Main@data,w
 19740  03E7  0086               	movwf	6
 19741  03E8  0866               	movf	slot_Main@data+1,w
 19742  03E9  0087               	movwf	7
 19743  03EA  314A               	addfsr 1,10
 19744  03EB  0801               	movf	1,w
 19745  03EC  3EB2               	addlw	(low (_Slot_Wheel| (0+512)))& (0+255)
 19746  03ED  0086               	movwf	6
 19747  03EE  3002               	movlw	2	; select bank5/6
 19748  03EF  0087               	movwf	7
 19749  03F0  0801               	movf	1,w
 19750  03F1  00DE               	movwf	??_slot_Main+10
 19751  03F2  01DF               	clrf	??_slot_Main+11
 19752  03F3  085E               	movf	??_slot_Main+10,w
 19753  03F4  00B9               	movwf	?_sprintf+10
 19754  03F5  085F               	movf	??_slot_Main+11,w
 19755  03F6  00BA               	movwf	?_sprintf+11
 19756  03F7  3192  225F  3180   	fcall	_sprintf
 19757                           
 19758                           ;slot_task.c: 142: marquee(data->slot_print_buf, 1);}
 19759  03FA  0020               	movlb	0	; select bank0
 19760  03FB  0865               	movf	slot_Main@data,w
 19761  03FC  3E0B               	addlw	11
 19762  03FD  00BA               	movwf	marquee@string
 19763  03FE  3000               	movlw	0
 19764  03FF  3D66               	addwfc	slot_Main@data+1,w
 19765  0400  00BB               	movwf	marquee@string+1
 19766  0401  3001               	movlw	1
 19767  0402  00BC               	movwf	marquee@count
 19768  0403  3000               	movlw	0
 19769  0404  00BD               	movwf	marquee@count+1
 19770  0405  319B  2338  3180   	fcall	_marquee
 19771  0408  2E0F               	goto	l8472
 19772  0409                     l8434:	
 19773                           
 19774                           ;slot_task.c: 143: else if (data->displayTickCount < 400) {
 19775  0409  0020               	movlb	0	; select bank0
 19776  040A  0865               	movf	slot_Main@data,w
 19777  040B  0086               	movwf	6
 19778  040C  0866               	movf	slot_Main@data+1,w
 19779  040D  0087               	movwf	7
 19780  040E  3143               	addfsr 1,3
 19781  040F  3F40               	moviw [0]fsr1
 19782  0410  00D4               	movwf	??_slot_Main
 19783  0411  3F41               	moviw [1]fsr1
 19784  0412  00D5               	movwf	??_slot_Main+1
 19785  0413  3001               	movlw	1
 19786  0414  0255               	subwf	??_slot_Main+1,w
 19787  0415  3090               	movlw	144
 19788  0416  1903               	skipnz
 19789  0417  0254               	subwf	??_slot_Main,w
 19790  0418  1803               	skipnc
 19791  0419  2CB6               	goto	l8444
 19792                           
 19793                           ;slot_task.c: 144: slot_Running_Animation(data);
 19794  041A  0866               	movf	slot_Main@data+1,w
 19795  041B  00B3               	movwf	slot_Running_Animation@taskData+1
 19796  041C  0865               	movf	slot_Main@data,w
 19797  041D  00B2               	movwf	slot_Running_Animation@taskData
 19798  041E  31A5  2544  3180   	fcall	_slot_Running_Animation
 19799                           
 19800                           ;slot_task.c: 145: data->slot_wheel_index[3] = (u8)rand() % strlen(Slot_Wheel);
 19801  0421  30B2               	movlw	low _Slot_Wheel
 19802  0422  00F1               	movwf	strlen@s
 19803  0423  3002               	movlw	high _Slot_Wheel
 19804  0424  00F2               	movwf	strlen@s+1
 19805  0425  31A0  20D3  3180   	fcall	_strlen
 19806  0428  0872               	movf	?_strlen+1,w
 19807  0429  0020               	movlb	0	; select bank0
 19808  042A  00AC               	movwf	___lwmod@divisor+1
 19809  042B  0871               	movf	?_strlen,w
 19810  042C  00AB               	movwf	___lwmod@divisor
 19811  042D  31A5  2501  3180   	fcall	_rand
 19812  0430  0020               	movlb	0	; select bank0
 19813  0431  0824               	movf	?_rand,w
 19814  0432  00D4               	movwf	??_slot_Main
 19815  0433  01D5               	clrf	??_slot_Main+1
 19816  0434  0854               	movf	??_slot_Main,w
 19817  0435  00AD               	movwf	___lwmod@dividend
 19818  0436  0855               	movf	??_slot_Main+1,w
 19819  0437  00AE               	movwf	___lwmod@dividend+1
 19820  0438  31A1  21F4  3180   	fcall	___lwmod
 19821  043B  0020               	movlb	0	; select bank0
 19822  043C  082B               	movf	?___lwmod,w
 19823  043D  00D6               	movwf	??_slot_Main+2
 19824  043E  0865               	movf	slot_Main@data,w
 19825  043F  3E0A               	addlw	10
 19826  0440  00D7               	movwf	??_slot_Main+3
 19827  0441  3000               	movlw	0
 19828  0442  3D66               	addwfc	slot_Main@data+1,w
 19829  0443  00D8               	movwf	??_slot_Main+4
 19830  0444  0857               	movf	??_slot_Main+3,w
 19831  0445  0086               	movwf	6
 19832  0446  0858               	movf	??_slot_Main+4,w
 19833  0447  0087               	movwf	7
 19834  0448  0856               	movf	??_slot_Main+2,w
 19835  0449  0081               	movwf	1
 19836                           
 19837                           ;slot_task.c: 146: sprintf(data->slot_print_buf, "%c%c%c%c", Shot_Options[Shot_Index][0]
      +                          , Shot_Options[Shot_Index][1], Shot_Options[Shot_Index][2], Slot_Wheel[data->slot_wheel_
      +                          index[3]]);
 19838  044A  0865               	movf	slot_Main@data,w
 19839  044B  3E0B               	addlw	11
 19840  044C  00AF               	movwf	sprintf@sp
 19841  044D  3000               	movlw	0
 19842  044E  3D66               	addwfc	slot_Main@data+1,w
 19843  044F  00B0               	movwf	sprintf@sp+1
 19844  0450  30A8               	movlw	low (STR_48| (0+32768))
 19845  0451  00B1               	movwf	sprintf@f
 19846  0452  30B0               	movlw	high (STR_48| (0+32768))
 19847  0453  00B2               	movwf	sprintf@f+1
 19848  0454  357C               	lslf	_Shot_Index,w
 19849  0455  3EC7               	addlw	(low (_Shot_Options| 0))& (0+255)
 19850  0456  0086               	movwf	6
 19851  0457  0187               	clrf	7
 19852  0458  3F40               	moviw [0]fsr1
 19853  0459  00D4               	movwf	??_slot_Main
 19854  045A  3F41               	moviw [1]fsr1
 19855  045B  00D5               	movwf	??_slot_Main+1
 19856  045C  0854               	movf	??_slot_Main,w
 19857  045D  0084               	movwf	4
 19858  045E  0855               	movf	??_slot_Main+1,w
 19859  045F  0085               	movwf	5
 19860  0460  0800               	movf	0,w	;code access
 19861  0461  00D6               	movwf	??_slot_Main+2
 19862  0462  01D7               	clrf	??_slot_Main+3
 19863  0463  0856               	movf	??_slot_Main+2,w
 19864  0464  00B3               	movwf	?_sprintf+4
 19865  0465  0857               	movf	??_slot_Main+3,w
 19866  0466  00B4               	movwf	?_sprintf+5
 19867  0467  357C               	lslf	_Shot_Index,w
 19868  0468  3EC7               	addlw	(low (_Shot_Options| 0))& (0+255)
 19869  0469  0086               	movwf	6
 19870  046A  0187               	clrf	7
 19871  046B  3F40               	moviw [0]fsr1
 19872  046C  00D8               	movwf	??_slot_Main+4
 19873  046D  3F41               	moviw [1]fsr1
 19874  046E  00D9               	movwf	??_slot_Main+5
 19875  046F  3001               	movlw	1
 19876  0470  0758               	addwf	??_slot_Main+4,w
 19877  0471  0084               	movwf	4
 19878  0472  0859               	movf	??_slot_Main+5,w
 19879  0473  1803               	skipnc
 19880  0474  0A59               	incf	??_slot_Main+5,w
 19881  0475  0085               	movwf	5
 19882  0476  0800               	movf	0,w	;code access
 19883  0477  00DA               	movwf	??_slot_Main+6
 19884  0478  01DB               	clrf	??_slot_Main+7
 19885  0479  085A               	movf	??_slot_Main+6,w
 19886  047A  00B5               	movwf	?_sprintf+6
 19887  047B  085B               	movf	??_slot_Main+7,w
 19888  047C  00B6               	movwf	?_sprintf+7
 19889  047D  357C               	lslf	_Shot_Index,w
 19890  047E  3EC7               	addlw	(low (_Shot_Options| 0))& (0+255)
 19891  047F  0086               	movwf	6
 19892  0480  0187               	clrf	7
 19893  0481  3F40               	moviw [0]fsr1
 19894  0482  00DC               	movwf	??_slot_Main+8
 19895  0483  3F41               	moviw [1]fsr1
 19896  0484  00DD               	movwf	??_slot_Main+9
 19897  0485  3002               	movlw	2
 19898  0486  075C               	addwf	??_slot_Main+8,w
 19899  0487  0084               	movwf	4
 19900  0488  085D               	movf	??_slot_Main+9,w
 19901  0489  1803               	skipnc
 19902  048A  0A5D               	incf	??_slot_Main+9,w
 19903  048B  0085               	movwf	5
 19904  048C  0800               	movf	0,w	;code access
 19905  048D  00DE               	movwf	??_slot_Main+10
 19906  048E  01DF               	clrf	??_slot_Main+11
 19907  048F  085E               	movf	??_slot_Main+10,w
 19908  0490  00B7               	movwf	?_sprintf+8
 19909  0491  085F               	movf	??_slot_Main+11,w
 19910  0492  00B8               	movwf	?_sprintf+9
 19911  0493  0865               	movf	slot_Main@data,w
 19912  0494  0086               	movwf	6
 19913  0495  0866               	movf	slot_Main@data+1,w
 19914  0496  0087               	movwf	7
 19915  0497  314A               	addfsr 1,10
 19916  0498  0801               	movf	1,w
 19917  0499  3EB2               	addlw	(low (_Slot_Wheel| (0+512)))& (0+255)
 19918  049A  0086               	movwf	6
 19919  049B  3002               	movlw	2	; select bank5/6
 19920  049C  0087               	movwf	7
 19921  049D  0801               	movf	1,w
 19922  049E  00E0               	movwf	??_slot_Main+12
 19923  049F  01E1               	clrf	??_slot_Main+13
 19924  04A0  0860               	movf	??_slot_Main+12,w
 19925  04A1  00B9               	movwf	?_sprintf+10
 19926  04A2  0861               	movf	??_slot_Main+13,w
 19927  04A3  00BA               	movwf	?_sprintf+11
 19928  04A4  3192  225F  3180   	fcall	_sprintf
 19929                           
 19930                           ;slot_task.c: 148: marquee(data->slot_print_buf, 1);}
 19931  04A7  0020               	movlb	0	; select bank0
 19932  04A8  0865               	movf	slot_Main@data,w
 19933  04A9  3E0B               	addlw	11
 19934  04AA  00BA               	movwf	marquee@string
 19935  04AB  3000               	movlw	0
 19936  04AC  3D66               	addwfc	slot_Main@data+1,w
 19937  04AD  00BB               	movwf	marquee@string+1
 19938  04AE  3001               	movlw	1
 19939  04AF  00BC               	movwf	marquee@count
 19940  04B0  3000               	movlw	0
 19941  04B1  00BD               	movwf	marquee@count+1
 19942  04B2  319B  2338  3180   	fcall	_marquee
 19943  04B5  2E0F               	goto	l8472
 19944  04B6                     l8444:	
 19945                           
 19946                           ;slot_task.c: 149: else if (data->displayTickCount < 500) {
 19947  04B6  0020               	movlb	0	; select bank0
 19948  04B7  0865               	movf	slot_Main@data,w
 19949  04B8  0086               	movwf	6
 19950  04B9  0866               	movf	slot_Main@data+1,w
 19951  04BA  0087               	movwf	7
 19952  04BB  3143               	addfsr 1,3
 19953  04BC  3F40               	moviw [0]fsr1
 19954  04BD  00D4               	movwf	??_slot_Main
 19955  04BE  3F41               	moviw [1]fsr1
 19956  04BF  00D5               	movwf	??_slot_Main+1
 19957  04C0  3001               	movlw	1
 19958  04C1  0255               	subwf	??_slot_Main+1,w
 19959  04C2  30F4               	movlw	244
 19960  04C3  1903               	skipnz
 19961  04C4  0254               	subwf	??_slot_Main,w
 19962  04C5  1803               	skipnc
 19963  04C6  2D6B               	goto	l8452
 19964                           
 19965                           ;slot_task.c: 150: slot_Finished_Animation(data);
 19966  04C7  0866               	movf	slot_Main@data+1,w
 19967  04C8  00BE               	movwf	slot_Finished_Animation@taskData+1
 19968  04C9  0865               	movf	slot_Main@data,w
 19969  04CA  00BD               	movwf	slot_Finished_Animation@taskData
 19970  04CB  31A1  217B  3180   	fcall	_slot_Finished_Animation
 19971                           
 19972                           ;slot_task.c: 151: if ( data->displayTickCount % 50 <= 25 ) {
 19973  04CE  3032               	movlw	50
 19974  04CF  0020               	movlb	0	; select bank0
 19975  04D0  00AB               	movwf	___lwmod@divisor
 19976  04D1  3000               	movlw	0
 19977  04D2  00AC               	movwf	___lwmod@divisor+1
 19978  04D3  0865               	movf	slot_Main@data,w
 19979  04D4  0086               	movwf	6
 19980  04D5  0866               	movf	slot_Main@data+1,w
 19981  04D6  0087               	movwf	7
 19982  04D7  3143               	addfsr 1,3
 19983  04D8  3F40               	moviw [0]fsr1
 19984  04D9  00AD               	movwf	___lwmod@dividend
 19985  04DA  3F41               	moviw [1]fsr1
 19986  04DB  00AE               	movwf	___lwmod@dividend+1
 19987  04DC  31A1  21F4  3180   	fcall	___lwmod
 19988  04DF  3000               	movlw	0
 19989  04E0  0020               	movlb	0	; select bank0
 19990  04E1  022C               	subwf	?___lwmod+1,w
 19991  04E2  301A               	movlw	26
 19992  04E3  1903               	skipnz
 19993  04E4  022B               	subwf	?___lwmod,w
 19994  04E5  1803               	skipnc
 19995  04E6  2CF9               	goto	l8450
 19996                           
 19997                           ;slot_task.c: 152: memset(data->slot_print_buf, 0x20, 4);
 19998  04E7  0865               	movf	slot_Main@data,w
 19999  04E8  3E0B               	addlw	11
 20000  04E9  00F1               	movwf	memset@p1
 20001  04EA  3000               	movlw	0
 20002  04EB  3D66               	addwfc	slot_Main@data+1,w
 20003  04EC  00F2               	movwf	memset@p1+1
 20004  04ED  3020               	movlw	32
 20005  04EE  00F3               	movwf	memset@c
 20006  04EF  3000               	movlw	0
 20007  04F0  00F4               	movwf	memset@c+1
 20008  04F1  3004               	movlw	4
 20009  04F2  00F5               	movwf	memset@n
 20010  04F3  3000               	movlw	0
 20011  04F4  00F6               	movwf	memset@n+1
 20012  04F5  31AF  27CF  3180   	fcall	_memset
 20013                           
 20014                           ;slot_task.c: 153: }
 20015  04F8  2D5C               	goto	l1421
 20016  04F9                     l8450:	
 20017                           
 20018                           ;slot_task.c: 154: else {
 20019                           ;slot_task.c: 155: sprintf(data->slot_print_buf, "%c%c%c%c", Shot_Options[Shot_Index][0]
      +                          , Shot_Options[Shot_Index][1], Shot_Options[Shot_Index][2], Shot_Options[Shot_Index][3])
      +                          ;
 20020  04F9  0020               	movlb	0	; select bank0
 20021  04FA  0865               	movf	slot_Main@data,w
 20022  04FB  3E0B               	addlw	11
 20023  04FC  00AF               	movwf	sprintf@sp
 20024  04FD  3000               	movlw	0
 20025  04FE  3D66               	addwfc	slot_Main@data+1,w
 20026  04FF  00B0               	movwf	sprintf@sp+1
 20027  0500  30A8               	movlw	low (STR_48| (0+32768))
 20028  0501  00B1               	movwf	sprintf@f
 20029  0502  30B0               	movlw	high (STR_48| (0+32768))
 20030  0503  00B2               	movwf	sprintf@f+1
 20031  0504  357C               	lslf	_Shot_Index,w
 20032  0505  3EC7               	addlw	(low (_Shot_Options| 0))& (0+255)
 20033  0506  0086               	movwf	6
 20034  0507  0187               	clrf	7
 20035  0508  3F40               	moviw [0]fsr1
 20036  0509  00D4               	movwf	??_slot_Main
 20037  050A  3F41               	moviw [1]fsr1
 20038  050B  00D5               	movwf	??_slot_Main+1
 20039  050C  0854               	movf	??_slot_Main,w
 20040  050D  0084               	movwf	4
 20041  050E  0855               	movf	??_slot_Main+1,w
 20042  050F  0085               	movwf	5
 20043  0510  0800               	movf	0,w	;code access
 20044  0511  00D6               	movwf	??_slot_Main+2
 20045  0512  01D7               	clrf	??_slot_Main+3
 20046  0513  0856               	movf	??_slot_Main+2,w
 20047  0514  00B3               	movwf	?_sprintf+4
 20048  0515  0857               	movf	??_slot_Main+3,w
 20049  0516  00B4               	movwf	?_sprintf+5
 20050  0517  357C               	lslf	_Shot_Index,w
 20051  0518  3EC7               	addlw	(low (_Shot_Options| 0))& (0+255)
 20052  0519  0086               	movwf	6
 20053  051A  0187               	clrf	7
 20054  051B  3F40               	moviw [0]fsr1
 20055  051C  00D8               	movwf	??_slot_Main+4
 20056  051D  3F41               	moviw [1]fsr1
 20057  051E  00D9               	movwf	??_slot_Main+5
 20058  051F  3001               	movlw	1
 20059  0520  0758               	addwf	??_slot_Main+4,w
 20060  0521  0084               	movwf	4
 20061  0522  0859               	movf	??_slot_Main+5,w
 20062  0523  1803               	skipnc
 20063  0524  0A59               	incf	??_slot_Main+5,w
 20064  0525  0085               	movwf	5
 20065  0526  0800               	movf	0,w	;code access
 20066  0527  00DA               	movwf	??_slot_Main+6
 20067  0528  01DB               	clrf	??_slot_Main+7
 20068  0529  085A               	movf	??_slot_Main+6,w
 20069  052A  00B5               	movwf	?_sprintf+6
 20070  052B  085B               	movf	??_slot_Main+7,w
 20071  052C  00B6               	movwf	?_sprintf+7
 20072  052D  357C               	lslf	_Shot_Index,w
 20073  052E  3EC7               	addlw	(low (_Shot_Options| 0))& (0+255)
 20074  052F  0086               	movwf	6
 20075  0530  0187               	clrf	7
 20076  0531  3F40               	moviw [0]fsr1
 20077  0532  00DC               	movwf	??_slot_Main+8
 20078  0533  3F41               	moviw [1]fsr1
 20079  0534  00DD               	movwf	??_slot_Main+9
 20080  0535  3002               	movlw	2
 20081  0536  075C               	addwf	??_slot_Main+8,w
 20082  0537  0084               	movwf	4
 20083  0538  085D               	movf	??_slot_Main+9,w
 20084  0539  1803               	skipnc
 20085  053A  0A5D               	incf	??_slot_Main+9,w
 20086  053B  0085               	movwf	5
 20087  053C  0800               	movf	0,w	;code access
 20088  053D  00DE               	movwf	??_slot_Main+10
 20089  053E  01DF               	clrf	??_slot_Main+11
 20090  053F  085E               	movf	??_slot_Main+10,w
 20091  0540  00B7               	movwf	?_sprintf+8
 20092  0541  085F               	movf	??_slot_Main+11,w
 20093  0542  00B8               	movwf	?_sprintf+9
 20094  0543  357C               	lslf	_Shot_Index,w
 20095  0544  3EC7               	addlw	(low (_Shot_Options| 0))& (0+255)
 20096  0545  0086               	movwf	6
 20097  0546  0187               	clrf	7
 20098  0547  3F40               	moviw [0]fsr1
 20099  0548  00E0               	movwf	??_slot_Main+12
 20100  0549  3F41               	moviw [1]fsr1
 20101  054A  00E1               	movwf	??_slot_Main+13
 20102  054B  3003               	movlw	3
 20103  054C  0760               	addwf	??_slot_Main+12,w
 20104  054D  0084               	movwf	4
 20105  054E  0861               	movf	??_slot_Main+13,w
 20106  054F  1803               	skipnc
 20107  0550  0A61               	incf	??_slot_Main+13,w
 20108  0551  0085               	movwf	5
 20109  0552  0800               	movf	0,w	;code access
 20110  0553  00E2               	movwf	??_slot_Main+14
 20111  0554  01E3               	clrf	??_slot_Main+15
 20112  0555  0862               	movf	??_slot_Main+14,w
 20113  0556  00B9               	movwf	?_sprintf+10
 20114  0557  0863               	movf	??_slot_Main+15,w
 20115  0558  00BA               	movwf	?_sprintf+11
 20116  0559  3192  225F  3180   	fcall	_sprintf
 20117  055C                     l1421:	
 20118                           
 20119                           ;slot_task.c: 156: }
 20120                           ;slot_task.c: 157: marquee(data->slot_print_buf, 1);
 20121  055C  0020               	movlb	0	; select bank0
 20122  055D  0865               	movf	slot_Main@data,w
 20123  055E  3E0B               	addlw	11
 20124  055F  00BA               	movwf	marquee@string
 20125  0560  3000               	movlw	0
 20126  0561  3D66               	addwfc	slot_Main@data+1,w
 20127  0562  00BB               	movwf	marquee@string+1
 20128  0563  3001               	movlw	1
 20129  0564  00BC               	movwf	marquee@count
 20130  0565  3000               	movlw	0
 20131  0566  00BD               	movwf	marquee@count+1
 20132  0567  319B  2338  3180   	fcall	_marquee
 20133                           
 20134                           ;slot_task.c: 158: }
 20135  056A  2E0F               	goto	l8472
 20136  056B                     l8452:	
 20137                           
 20138                           ;slot_task.c: 159: else {
 20139                           ;slot_task.c: 160: slot_Finished_Animation(data);
 20140  056B  0020               	movlb	0	; select bank0
 20141  056C  0866               	movf	slot_Main@data+1,w
 20142  056D  00BE               	movwf	slot_Finished_Animation@taskData+1
 20143  056E  0865               	movf	slot_Main@data,w
 20144  056F  00BD               	movwf	slot_Finished_Animation@taskData
 20145  0570  31A1  217B  3180   	fcall	_slot_Finished_Animation
 20146                           
 20147                           ;slot_task.c: 161: if ( data->displayTickCount % 50 <= 25 ) {
 20148  0573  3032               	movlw	50
 20149  0574  0020               	movlb	0	; select bank0
 20150  0575  00AB               	movwf	___lwmod@divisor
 20151  0576  3000               	movlw	0
 20152  0577  00AC               	movwf	___lwmod@divisor+1
 20153  0578  0865               	movf	slot_Main@data,w
 20154  0579  0086               	movwf	6
 20155  057A  0866               	movf	slot_Main@data+1,w
 20156  057B  0087               	movwf	7
 20157  057C  3143               	addfsr 1,3
 20158  057D  3F40               	moviw [0]fsr1
 20159  057E  00AD               	movwf	___lwmod@dividend
 20160  057F  3F41               	moviw [1]fsr1
 20161  0580  00AE               	movwf	___lwmod@dividend+1
 20162  0581  31A1  21F4  3180   	fcall	___lwmod
 20163  0584  3000               	movlw	0
 20164  0585  0020               	movlb	0	; select bank0
 20165  0586  022C               	subwf	?___lwmod+1,w
 20166  0587  301A               	movlw	26
 20167  0588  1903               	skipnz
 20168  0589  022B               	subwf	?___lwmod,w
 20169  058A  1803               	skipnc
 20170  058B  2D9E               	goto	l8456
 20171                           
 20172                           ;slot_task.c: 162: memset(data->slot_print_buf, 0x20, 4);
 20173  058C  0865               	movf	slot_Main@data,w
 20174  058D  3E0B               	addlw	11
 20175  058E  00F1               	movwf	memset@p1
 20176  058F  3000               	movlw	0
 20177  0590  3D66               	addwfc	slot_Main@data+1,w
 20178  0591  00F2               	movwf	memset@p1+1
 20179  0592  3020               	movlw	32
 20180  0593  00F3               	movwf	memset@c
 20181  0594  3000               	movlw	0
 20182  0595  00F4               	movwf	memset@c+1
 20183  0596  3004               	movlw	4
 20184  0597  00F5               	movwf	memset@n
 20185  0598  3000               	movlw	0
 20186  0599  00F6               	movwf	memset@n+1
 20187  059A  31AF  27CF  3180   	fcall	_memset
 20188                           
 20189                           ;slot_task.c: 163: }
 20190  059D  2DB5               	goto	l1424
 20191  059E                     l8456:	
 20192                           
 20193                           ;slot_task.c: 164: else {
 20194                           ;slot_task.c: 165: sprintf(data->slot_print_buf, "%s", Shot_Options_Long[Shot_Index]);
 20195  059E  0020               	movlb	0	; select bank0
 20196  059F  0865               	movf	slot_Main@data,w
 20197  05A0  3E0B               	addlw	11
 20198  05A1  00AF               	movwf	sprintf@sp
 20199  05A2  3000               	movlw	0
 20200  05A3  3D66               	addwfc	slot_Main@data+1,w
 20201  05A4  00B0               	movwf	sprintf@sp+1
 20202  05A5  3047               	movlw	low (STR_53| (0+32768))
 20203  05A6  00B1               	movwf	sprintf@f
 20204  05A7  30B1               	movlw	high (STR_53| (0+32768))
 20205  05A8  00B2               	movwf	sprintf@f+1
 20206  05A9  357C               	lslf	_Shot_Index,w
 20207  05AA  3EA0               	addlw	(low (_Shot_Options_Long| (0+512)))& (0+255)
 20208  05AB  0086               	movwf	6
 20209  05AC  3002               	movlw	2	; select bank5/6
 20210  05AD  0087               	movwf	7
 20211  05AE  3F40               	moviw [0]fsr1
 20212  05AF  00B3               	movwf	low ((?_sprintf| 0+4))
 20213  05B0  3F41               	moviw [1]fsr1
 20214  05B1  00B4               	movwf	(low ((?_sprintf| 0+4))+1)
 20215  05B2  3192  225F  3180   	fcall	_sprintf
 20216  05B5                     l1424:	
 20217                           
 20218                           ;slot_task.c: 166: }
 20219                           ;slot_task.c: 168: marquee_speedy(data->slot_print_buf, data->displayTickCount, 20);
 20220  05B5  0020               	movlb	0	; select bank0
 20221  05B6  0865               	movf	slot_Main@data,w
 20222  05B7  3E0B               	addlw	11
 20223  05B8  00BA               	movwf	marquee_speedy@string
 20224  05B9  3000               	movlw	0
 20225  05BA  3D66               	addwfc	slot_Main@data+1,w
 20226  05BB  00BB               	movwf	marquee_speedy@string+1
 20227  05BC  0865               	movf	slot_Main@data,w
 20228  05BD  0086               	movwf	6
 20229  05BE  0866               	movf	slot_Main@data+1,w
 20230  05BF  0087               	movwf	7
 20231  05C0  3143               	addfsr 1,3
 20232  05C1  3F40               	moviw [0]fsr1
 20233  05C2  00BC               	movwf	marquee_speedy@count
 20234  05C3  3F41               	moviw [1]fsr1
 20235  05C4  00BD               	movwf	marquee_speedy@count+1
 20236  05C5  3014               	movlw	20
 20237  05C6  00BE               	movwf	marquee_speedy@multiplier
 20238  05C7  3000               	movlw	0
 20239  05C8  00BF               	movwf	marquee_speedy@multiplier+1
 20240  05C9  319A  22C5  3180   	fcall	_marquee_speedy
 20241                           
 20242                           ;slot_task.c: 169: if (data->displayTickCount == 500 + (50 * 10)) {
 20243  05CC  0020               	movlb	0	; select bank0
 20244  05CD  0865               	movf	slot_Main@data,w
 20245  05CE  0086               	movwf	6
 20246  05CF  0866               	movf	slot_Main@data+1,w
 20247  05D0  0087               	movwf	7
 20248  05D1  3143               	addfsr 1,3
 20249  05D2  0016               	moviw fsr1++
 20250  05D3  3AE8               	xorlw	232
 20251  05D4  00D4               	movwf	??_slot_Main
 20252  05D5  0016               	moviw fsr1++
 20253  05D6  3A03               	xorlw	3
 20254  05D7  04D4               	iorwf	??_slot_Main,f
 20255  05D8  1D03               	btfss	3,2
 20256  05D9  2E0F               	goto	l8472
 20257                           
 20258                           ;slot_task.c: 170: currentTask = MENU_TASK;
 20259  05DA  0021               	movlb	1	; select bank1
 20260  05DB  01B8               	clrf	_currentTask^(0+128)
 20261  05DC  01B9               	clrf	(_currentTask+1)^(0+128)
 20262                           
 20263                           ;slot_task.c: 173: slot_Setup(slot_taskData);
 20264  05DD  083B               	movf	(_slot_taskData+1)^(0+128),w
 20265  05DE  0020               	movlb	0	; select bank0
 20266  05DF  00B0               	movwf	slot_Setup@taskData+1
 20267  05E0  0021               	movlb	1	; select bank1
 20268  05E1  083A               	movf	_slot_taskData^(0+128),w
 20269  05E2  0020               	movlb	0	; select bank0
 20270  05E3  00AF               	movwf	slot_Setup@taskData
 20271  05E4  31A7  2702         	fcall	_slot_Setup
 20272                           
 20273                           ;slot_task.c: 176: data->holdCountA = 1;
 20274  05E6  0020               	movlb	0	; select bank0
 20275  05E7  0865               	movf	slot_Main@data,w
 20276  05E8  0086               	movwf	6
 20277  05E9  0866               	movf	slot_Main@data+1,w
 20278  05EA  0087               	movwf	7
 20279  05EB  315F               	addfsr 1,31
 20280  05EC  3001               	movlw	1
 20281  05ED  3FC0               	movwi [0]fsr1
 20282  05EE  3000               	movlw	0
 20283  05EF  3FC1               	movwi [1]fsr1
 20284                           
 20285                           ;slot_task.c: 177: data->holdCountB = 1;
 20286  05F0  0865               	movf	slot_Main@data,w
 20287  05F1  3E21               	addlw	33
 20288  05F2  0086               	movwf	6
 20289  05F3  3000               	movlw	0
 20290  05F4  3D66               	addwfc	slot_Main@data+1,w
 20291  05F5  0087               	movwf	7
 20292  05F6  3001               	movlw	1
 20293  05F7  3FC0               	movwi [0]fsr1
 20294  05F8  3000               	movlw	0
 20295  05F9  3FC1               	movwi [1]fsr1
 20296                           
 20297                           ;slot_task.c: 178: data->holdCountX = 1;
 20298  05FA  0865               	movf	slot_Main@data,w
 20299  05FB  3E23               	addlw	35
 20300  05FC  0086               	movwf	6
 20301  05FD  3000               	movlw	0
 20302  05FE  3D66               	addwfc	slot_Main@data+1,w
 20303  05FF  0087               	movwf	7
 20304  0600  3001               	movlw	1
 20305  0601  3FC0               	movwi [0]fsr1
 20306  0602  3000               	movlw	0
 20307  0603  3FC1               	movwi [1]fsr1
 20308                           
 20309                           ;slot_task.c: 179: data->holdCountY = 1;
 20310  0604  0865               	movf	slot_Main@data,w
 20311  0605  3E25               	addlw	37
 20312  0606  0086               	movwf	6
 20313  0607  3000               	movlw	0
 20314  0608  3D66               	addwfc	slot_Main@data+1,w
 20315  0609  0087               	movwf	7
 20316  060A  3001               	movlw	1
 20317  060B  3FC0               	movwi [0]fsr1
 20318  060C  3000               	movlw	0
 20319  060D  3FC1               	movwi [1]fsr1
 20320                           
 20321                           ;slot_task.c: 180: break;
 20322  060E  0008               	return
 20323  060F                     l8472:	
 20324                           
 20325                           ;slot_task.c: 181: }
 20326                           ;slot_task.c: 182: }
 20327                           ;slot_task.c: 184: data->displayTickCount += 1;
 20328  060F  0020               	movlb	0	; select bank0
 20329  0610  0865               	movf	slot_Main@data,w
 20330  0611  0086               	movwf	6
 20331  0612  0866               	movf	slot_Main@data+1,w
 20332  0613  0087               	movwf	7
 20333  0614  3143               	addfsr 1,3
 20334  0615  3001               	movlw	1
 20335  0616  0781               	addwf	1,f
 20336  0617  3141               	addfsr 1,1
 20337  0618  1803               	skipnc
 20338  0619  0A81               	incf	1,f
 20339                           
 20340                           ;slot_task.c: 185: data->holdCountA = 0;
 20341  061A  0865               	movf	slot_Main@data,w
 20342  061B  0086               	movwf	6
 20343  061C  0866               	movf	slot_Main@data+1,w
 20344  061D  0087               	movwf	7
 20345  061E  315F               	addfsr 1,31
 20346  061F  3000               	movlw	0
 20347  0620  3FC0               	movwi [0]fsr1
 20348  0621  3FC1               	movwi [1]fsr1
 20349                           
 20350                           ;slot_task.c: 186: data->holdCountB = 0;
 20351  0622  0865               	movf	slot_Main@data,w
 20352  0623  3E21               	addlw	33
 20353  0624  0086               	movwf	6
 20354  0625  3000               	movlw	0
 20355  0626  3D66               	addwfc	slot_Main@data+1,w
 20356  0627  0087               	movwf	7
 20357  0628  3000               	movlw	0
 20358  0629  3FC0               	movwi [0]fsr1
 20359  062A  3FC1               	movwi [1]fsr1
 20360                           
 20361                           ;slot_task.c: 187: data->holdCountX = 0;
 20362  062B  0865               	movf	slot_Main@data,w
 20363  062C  3E23               	addlw	35
 20364  062D  0086               	movwf	6
 20365  062E  3000               	movlw	0
 20366  062F  3D66               	addwfc	slot_Main@data+1,w
 20367  0630  0087               	movwf	7
 20368  0631  3000               	movlw	0
 20369  0632  3FC0               	movwi [0]fsr1
 20370  0633  3FC1               	movwi [1]fsr1
 20371                           
 20372                           ;slot_task.c: 188: data->holdCountY = 0;
 20373  0634  0865               	movf	slot_Main@data,w
 20374  0635  3E25               	addlw	37
 20375  0636  0086               	movwf	6
 20376  0637  3000               	movlw	0
 20377  0638  3D66               	addwfc	slot_Main@data+1,w
 20378  0639  0087               	movwf	7
 20379  063A  3000               	movlw	0
 20380  063B  3FC0               	movwi [0]fsr1
 20381  063C  3FC1               	movwi [1]fsr1
 20382                           
 20383                           ;slot_task.c: 189: data->noholdCount += 1;
 20384  063D  0865               	movf	slot_Main@data,w
 20385  063E  3E27               	addlw	39
 20386  063F  0086               	movwf	6
 20387  0640  3000               	movlw	0
 20388  0641  3D66               	addwfc	slot_Main@data+1,w
 20389  0642  0087               	movwf	7
 20390  0643  3001               	movlw	1
 20391  0644  0781               	addwf	1,f
 20392  0645  3141               	addfsr 1,1
 20393  0646  1803               	skipnc
 20394  0647  0A81               	incf	1,f
 20395                           
 20396                           ;slot_task.c: 190: }
 20397  0648  0008               	return
 20398  0649                     __end_of_slot_Main:	
 20399                           
 20400                           	psect	text18
 20401  2544                     __ptext18:	
 20402 ;; *************** function _slot_Running_Animation *****************
 20403 ;; Defined at:
 20404 ;;		line 64 in file "slot_task.c"
 20405 ;; Parameters:    Size  Location     Type
 20406 ;;  taskData        2   18[BANK0 ] PTR void 
 20407 ;;		 -> secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), 
 20408 ;;		 -> flashy_TaskData(30), NULL(0), 
 20409 ;; Auto vars:     Size  Location     Type
 20410 ;;  data            2   22[BANK0 ] PTR struct t_slot_taskDa
 20411 ;;		 -> secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), 
 20412 ;;		 -> flashy_TaskData(30), NULL(0), 
 20413 ;; Return value:  Size  Location     Type
 20414 ;;                  1    wreg      void 
 20415 ;; Registers used:
 20416 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20417 ;; Tracked objects:
 20418 ;;		On entry : 0/0
 20419 ;;		On exit  : 0/0
 20420 ;;		Unchanged: 0/0
 20421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20422 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20423 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20424 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20425 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20426 ;;Total ram usage:        6 bytes
 20427 ;; Hardware stack levels used:    1
 20428 ;; Hardware stack levels required when called:   10
 20429 ;; This function calls:
 20430 ;;		_led_circle
 20431 ;; This function is called by:
 20432 ;;		_slot_Main
 20433 ;; This function uses a non-reentrant model
 20434 ;;
 20435                           
 20436                           
 20437                           ;psect for function _slot_Running_Animation
 20438  2544                     _slot_Running_Animation:	
 20439                           
 20440                           ;slot_task.c: 65: struct t_slot_taskData *data = (struct t_slot_taskData *) taskData;
 20441                           
 20442                           ;incstack = 0
 20443                           ; Regs used in _slot_Running_Animation: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 20444  2544  0020               	movlb	0	; select bank0
 20445  2545  0833               	movf	slot_Running_Animation@taskData+1,w
 20446  2546  00B7               	movwf	slot_Running_Animation@data+1
 20447  2547  0832               	movf	slot_Running_Animation@taskData,w
 20448  2548  00B6               	movwf	slot_Running_Animation@data
 20449                           
 20450                           ;slot_task.c: 66: if (data->delayTickCount ==0 ){
 20451  2549  0836               	movf	slot_Running_Animation@data,w
 20452  254A  0086               	movwf	6
 20453  254B  0837               	movf	slot_Running_Animation@data+1,w
 20454  254C  0087               	movwf	7
 20455  254D  3145               	addfsr 1,5
 20456  254E  0016               	moviw fsr1++
 20457  254F  0401               	iorwf	1,w
 20458  2550  1D03               	btfss	3,2
 20459  2551  2D7E               	goto	l7604
 20460                           
 20461                           ;slot_task.c: 67: if (Leds_idx == 1024 ){
 20462  2552  3004               	movlw	4
 20463  2553  0021               	movlb	1	; select bank1
 20464  2554  065E               	xorwf	(_Leds_idx+1)^(0+128),w
 20465  2555  045D               	iorwf	_Leds_idx^(0+128),w
 20466  2556  1D03               	btfss	3,2
 20467  2557  2D5C               	goto	l7596
 20468                           
 20469                           ;slot_task.c: 68: Leds_idx = Leds_idx << 1;
 20470  2558  355D               	lslf	_Leds_idx^(0+128),w
 20471  2559  00DD               	movwf	_Leds_idx^(0+128)
 20472  255A  0D5E               	rlf	(_Leds_idx+1)^(0+128),w
 20473  255B  00DE               	movwf	(_Leds_idx+1)^(0+128)
 20474  255C                     l7596:	
 20475                           
 20476                           ;slot_task.c: 69: }
 20477                           ;slot_task.c: 70: led_circle(Leds_idx);
 20478  255C  085E               	movf	(_Leds_idx+1)^(0+128),w
 20479  255D  0020               	movlb	0	; select bank0
 20480  255E  00B1               	movwf	led_circle@count+1
 20481  255F  0021               	movlb	1	; select bank1
 20482  2560  085D               	movf	_Leds_idx^(0+128),w
 20483  2561  0020               	movlb	0	; select bank0
 20484  2562  00B0               	movwf	led_circle@count
 20485  2563  31AE  262E  31A5   	fcall	_led_circle
 20486                           
 20487                           ;slot_task.c: 71: if (Leds_idx < 1 ){
 20488  2566  0021               	movlb	1	; select bank1
 20489  2567  085D               	movf	_Leds_idx^(0+128),w
 20490  2568  045E               	iorwf	(_Leds_idx+1)^(0+128),w
 20491  2569  1D03               	btfss	3,2
 20492  256A  2D6F               	goto	l1394
 20493                           
 20494                           ;slot_task.c: 72: Leds_idx = 1;
 20495  256B  3001               	movlw	1
 20496  256C  00DD               	movwf	_Leds_idx^(0+128)
 20497  256D  3000               	movlw	0
 20498  256E  00DE               	movwf	(_Leds_idx^(0+128)+1)
 20499  256F                     l1394:	
 20500                           
 20501                           ;slot_task.c: 73: }
 20502                           ;slot_task.c: 74: Leds_idx = Leds_idx << 1;
 20503  256F  355D               	lslf	_Leds_idx^(0+128),w
 20504  2570  00DD               	movwf	_Leds_idx^(0+128)
 20505  2571  0D5E               	rlf	(_Leds_idx+1)^(0+128),w
 20506  2572  00DE               	movwf	(_Leds_idx+1)^(0+128)
 20507                           
 20508                           ;slot_task.c: 76: data->delayTickCount = 10;
 20509  2573  0020               	movlb	0	; select bank0
 20510  2574  0836               	movf	slot_Running_Animation@data,w
 20511  2575  0086               	movwf	6
 20512  2576  0837               	movf	slot_Running_Animation@data+1,w
 20513  2577  0087               	movwf	7
 20514  2578  3145               	addfsr 1,5
 20515  2579  300A               	movlw	10
 20516  257A  3FC0               	movwi [0]fsr1
 20517  257B  3000               	movlw	0
 20518  257C  3FC1               	movwi [1]fsr1
 20519                           
 20520                           ;slot_task.c: 77: }
 20521  257D  0008               	return
 20522  257E                     l7604:	
 20523                           
 20524                           ;slot_task.c: 78: else {
 20525                           ;slot_task.c: 79: data->delayTickCount -= 1;
 20526  257E  0836               	movf	slot_Running_Animation@data,w
 20527  257F  0086               	movwf	6
 20528  2580  0837               	movf	slot_Running_Animation@data+1,w
 20529  2581  0087               	movwf	7
 20530  2582  3145               	addfsr 1,5
 20531  2583  3001               	movlw	1
 20532  2584  0281               	subwf	1,f
 20533  2585  3141               	addfsr 1,1
 20534  2586  3000               	movlw	0
 20535  2587  3B81               	subwfb	1,f
 20536  2588  317F               	addfsr 1,-1
 20537  2589  0008               	return
 20538  258A                     __end_of_slot_Running_Animation:	
 20539                           
 20540                           	psect	text19
 20541  217B                     __ptext19:	
 20542 ;; *************** function _slot_Finished_Animation *****************
 20543 ;; Defined at:
 20544 ;;		line 84 in file "slot_task.c"
 20545 ;; Parameters:    Size  Location     Type
 20546 ;;  taskData        2   29[BANK0 ] PTR void 
 20547 ;;		 -> secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), 
 20548 ;;		 -> flashy_TaskData(30), NULL(0), 
 20549 ;; Auto vars:     Size  Location     Type
 20550 ;;  data            2   33[BANK0 ] PTR struct t_slot_taskDa
 20551 ;;		 -> secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), 
 20552 ;;		 -> flashy_TaskData(30), NULL(0), 
 20553 ;; Return value:  Size  Location     Type
 20554 ;;                  1    wreg      void 
 20555 ;; Registers used:
 20556 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20557 ;; Tracked objects:
 20558 ;;		On entry : 0/0
 20559 ;;		On exit  : 0/0
 20560 ;;		Unchanged: 0/0
 20561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20562 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20563 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20564 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20565 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20566 ;;Total ram usage:        6 bytes
 20567 ;; Hardware stack levels used:    1
 20568 ;; Hardware stack levels required when called:   10
 20569 ;; This function calls:
 20570 ;;		_led_rand
 20571 ;; This function is called by:
 20572 ;;		_slot_Main
 20573 ;; This function uses a non-reentrant model
 20574 ;;
 20575                           
 20576                           
 20577                           ;psect for function _slot_Finished_Animation
 20578  217B                     _slot_Finished_Animation:	
 20579                           
 20580                           ;slot_task.c: 85: struct t_slot_taskData *data = (struct t_slot_taskData *) taskData;
 20581                           
 20582                           ;incstack = 0
 20583                           ; Regs used in _slot_Finished_Animation: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 20584  217B  0020               	movlb	0	; select bank0
 20585  217C  083E               	movf	slot_Finished_Animation@taskData+1,w
 20586  217D  00C2               	movwf	slot_Finished_Animation@data+1
 20587  217E  083D               	movf	slot_Finished_Animation@taskData,w
 20588  217F  00C1               	movwf	slot_Finished_Animation@data
 20589                           
 20590                           ;slot_task.c: 86: if (data->delayTickCount < 1){
 20591  2180  0841               	movf	slot_Finished_Animation@data,w
 20592  2181  0086               	movwf	6
 20593  2182  0842               	movf	slot_Finished_Animation@data+1,w
 20594  2183  0087               	movwf	7
 20595  2184  3145               	addfsr 1,5
 20596  2185  0016               	moviw fsr1++
 20597  2186  0401               	iorwf	1,w
 20598  2187  1D03               	btfss	3,2
 20599  2188  2996               	goto	l7614
 20600                           
 20601                           ;slot_task.c: 87: led_rand();
 20602  2189  31A5  25D1         	fcall	_led_rand
 20603                           
 20604                           ;slot_task.c: 88: data->delayTickCount = 10;
 20605  218B  0020               	movlb	0	; select bank0
 20606  218C  0841               	movf	slot_Finished_Animation@data,w
 20607  218D  0086               	movwf	6
 20608  218E  0842               	movf	slot_Finished_Animation@data+1,w
 20609  218F  0087               	movwf	7
 20610  2190  3145               	addfsr 1,5
 20611  2191  300A               	movlw	10
 20612  2192  3FC0               	movwi [0]fsr1
 20613  2193  3000               	movlw	0
 20614  2194  3FC1               	movwi [1]fsr1
 20615                           
 20616                           ;slot_task.c: 89: }
 20617  2195  0008               	return
 20618  2196                     l7614:	
 20619                           
 20620                           ;slot_task.c: 90: else {
 20621                           ;slot_task.c: 91: data->delayTickCount -= 1;
 20622  2196  0841               	movf	slot_Finished_Animation@data,w
 20623  2197  0086               	movwf	6
 20624  2198  0842               	movf	slot_Finished_Animation@data+1,w
 20625  2199  0087               	movwf	7
 20626  219A  3145               	addfsr 1,5
 20627  219B  3001               	movlw	1
 20628  219C  0281               	subwf	1,f
 20629  219D  3141               	addfsr 1,1
 20630  219E  3000               	movlw	0
 20631  219F  3B81               	subwfb	1,f
 20632  21A0  317F               	addfsr 1,-1
 20633  21A1  0008               	return
 20634  21A2                     __end_of_slot_Finished_Animation:	
 20635                           
 20636                           	psect	text20
 20637  22B3                     __ptext20:	
 20638 ;; *************** function _secret_clear *****************
 20639 ;; Defined at:
 20640 ;;		line 178 in file "secret_task.c"
 20641 ;; Parameters:    Size  Location     Type
 20642 ;;  data            2    1[COMMON] PTR struct t_secret_task
 20643 ;;		 -> secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), 
 20644 ;;		 -> flashy_TaskData(30), NULL(0), 
 20645 ;; Auto vars:     Size  Location     Type
 20646 ;;		None
 20647 ;; Return value:  Size  Location     Type
 20648 ;;                  1    wreg      void 
 20649 ;; Registers used:
 20650 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 20651 ;; Tracked objects:
 20652 ;;		On entry : 0/0
 20653 ;;		On exit  : 0/0
 20654 ;;		Unchanged: 0/0
 20655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20656 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20657 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20658 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20659 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20660 ;;Total ram usage:        2 bytes
 20661 ;; Hardware stack levels used:    1
 20662 ;; Hardware stack levels required when called:    4
 20663 ;; This function calls:
 20664 ;;		Nothing
 20665 ;; This function is called by:
 20666 ;;		_secret_Main
 20667 ;; This function uses a non-reentrant model
 20668 ;;
 20669                           
 20670                           
 20671                           ;psect for function _secret_clear
 20672  22B3                     _secret_clear:	
 20673                           
 20674                           ;secret_task.c: 180: data->delayTickCount = 300;
 20675                           
 20676                           ;incstack = 0
 20677                           ; Regs used in _secret_clear: [wreg+fsr1l+fsr1h+status,2+status,0]
 20678  22B3  0871               	movf	secret_clear@data,w
 20679  22B4  0086               	movwf	6
 20680  22B5  0872               	movf	secret_clear@data+1,w
 20681  22B6  0087               	movwf	7
 20682  22B7  3142               	addfsr 1,2
 20683  22B8  302C               	movlw	44
 20684  22B9  3FC0               	movwi [0]fsr1
 20685  22BA  3001               	movlw	1
 20686  22BB  3FC1               	movwi [1]fsr1
 20687                           
 20688                           ;secret_task.c: 181: data->holdCountA = 0;
 20689  22BC  0871               	movf	secret_clear@data,w
 20690  22BD  0086               	movwf	6
 20691  22BE  0872               	movf	secret_clear@data+1,w
 20692  22BF  0087               	movwf	7
 20693  22C0  3144               	addfsr 1,4
 20694  22C1  3000               	movlw	0
 20695  22C2  3FC0               	movwi [0]fsr1
 20696  22C3  3FC1               	movwi [1]fsr1
 20697                           
 20698                           ;secret_task.c: 182: data->holdCountB = 0;
 20699  22C4  0871               	movf	secret_clear@data,w
 20700  22C5  0086               	movwf	6
 20701  22C6  0872               	movf	secret_clear@data+1,w
 20702  22C7  0087               	movwf	7
 20703  22C8  3146               	addfsr 1,6
 20704  22C9  3000               	movlw	0
 20705  22CA  3FC0               	movwi [0]fsr1
 20706  22CB  3FC1               	movwi [1]fsr1
 20707                           
 20708                           ;secret_task.c: 183: data->holdCountX = 0;
 20709  22CC  0871               	movf	secret_clear@data,w
 20710  22CD  0086               	movwf	6
 20711  22CE  0872               	movf	secret_clear@data+1,w
 20712  22CF  0087               	movwf	7
 20713  22D0  3148               	addfsr 1,8
 20714  22D1  3000               	movlw	0
 20715  22D2  3FC0               	movwi [0]fsr1
 20716  22D3  3FC1               	movwi [1]fsr1
 20717                           
 20718                           ;secret_task.c: 184: data->holdCountY = 0;
 20719  22D4  0871               	movf	secret_clear@data,w
 20720  22D5  0086               	movwf	6
 20721  22D6  0872               	movf	secret_clear@data+1,w
 20722  22D7  0087               	movwf	7
 20723  22D8  314A               	addfsr 1,10
 20724  22D9  3000               	movlw	0
 20725  22DA  3FC0               	movwi [0]fsr1
 20726  22DB  3FC1               	movwi [1]fsr1
 20727                           
 20728                           ;secret_task.c: 185: data->noholdCount = 0;
 20729  22DC  0871               	movf	secret_clear@data,w
 20730  22DD  0086               	movwf	6
 20731  22DE  0872               	movf	secret_clear@data+1,w
 20732  22DF  0087               	movwf	7
 20733  22E0  314C               	addfsr 1,12
 20734  22E1  3000               	movlw	0
 20735  22E2  3FC0               	movwi [0]fsr1
 20736  22E3  3FC1               	movwi [1]fsr1
 20737  22E4  0008               	return
 20738  22E5                     __end_of_secret_clear:	
 20739                           
 20740                           	psect	text21
 20741  1CAD                     __ptext21:	
 20742 ;; *************** function _secret_check *****************
 20743 ;; Defined at:
 20744 ;;		line 69 in file "secret_task.c"
 20745 ;; Parameters:    Size  Location     Type
 20746 ;;  data            2    7[COMMON] PTR struct t_secret_task
 20747 ;;		 -> secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), 
 20748 ;;		 -> flashy_TaskData(30), NULL(0), 
 20749 ;;  buttonPresse    1    9[COMMON] unsigned char 
 20750 ;; Auto vars:     Size  Location     Type
 20751 ;;  i               2    8[BANK0 ] unsigned int 
 20752 ;;  hit_counter     6    0        unsigned char [6]
 20753 ;;  currents_siz    2    5[BANK0 ] unsigned int 
 20754 ;;  size            2    3[BANK0 ] unsigned int 
 20755 ;;  inputs          1    7[BANK0 ] PTR unsigned char 
 20756 ;;		 -> secret_inputs.inputs(20), secret_inputs(25), 
 20757 ;; Return value:  Size  Location     Type
 20758 ;;                  1    wreg      unsigned char 
 20759 ;; Registers used:
 20760 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20761 ;; Tracked objects:
 20762 ;;		On entry : 0/0
 20763 ;;		On exit  : 0/0
 20764 ;;		Unchanged: 0/0
 20765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20766 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20767 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20768 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20769 ;;      Totals:         3      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20770 ;;Total ram usage:       13 bytes
 20771 ;; Hardware stack levels used:    1
 20772 ;; Hardware stack levels required when called:    5
 20773 ;; This function calls:
 20774 ;;		___bmul
 20775 ;;		_strlen
 20776 ;; This function is called by:
 20777 ;;		_secret_Main
 20778 ;; This function uses a non-reentrant model
 20779 ;;
 20780                           
 20781                           
 20782                           ;psect for function _secret_check
 20783  1CAD                     _secret_check:	
 20784                           
 20785                           ;secret_task.c: 70: u8 *inputs;
 20786                           ;secret_task.c: 71: u16 size = sizeof(secret_inputs) / sizeof(secret_inputs[0]);
 20787                           
 20788                           ;incstack = 0
 20789                           ; Regs used in _secret_check: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 20790  1CAD  3001               	movlw	1
 20791  1CAE  0020               	movlb	0	; select bank0
 20792  1CAF  00A3               	movwf	secret_check@size
 20793  1CB0  3000               	movlw	0
 20794  1CB1  00A4               	movwf	secret_check@size+1
 20795                           
 20796                           ;secret_task.c: 72: u16 currents_size;
 20797                           ;secret_task.c: 73: char hit_counter[6];
 20798                           ;secret_task.c: 75: for (u16 i = 0; i < size; i++){
 20799  1CB2  01A8               	clrf	secret_check@i
 20800  1CB3  01A9               	clrf	secret_check@i+1
 20801  1CB4                     l7570:	
 20802  1CB4  0824               	movf	secret_check@size+1,w
 20803  1CB5  0229               	subwf	secret_check@i+1,w
 20804  1CB6  1D03               	skipz
 20805  1CB7  2CBA               	goto	u4835
 20806  1CB8  0823               	movf	secret_check@size,w
 20807  1CB9  0228               	subwf	secret_check@i,w
 20808  1CBA                     u4835:	
 20809  1CBA  1803               	btfsc	3,0
 20810  1CBB  2D66               	goto	l7572
 20811                           
 20812                           ;secret_task.c: 76: inputs = secret_inputs[i].inputs;
 20813  1CBC  3019               	movlw	25
 20814  1CBD  00A0               	movwf	??_secret_check
 20815  1CBE  0820               	movf	??_secret_check,w
 20816  1CBF  00F1               	movwf	___bmul@multiplicand
 20817  1CC0  0828               	movf	secret_check@i,w
 20818  1CC1  31AF  271A  319C   	fcall	___bmul
 20819  1CC4  3E4A               	addlw	(low (_secret_inputs| (0+512)))& (0+255)
 20820  1CC5  0020               	movlb	0	; select bank0
 20821  1CC6  00A1               	movwf	??_secret_check+1
 20822  1CC7  0821               	movf	??_secret_check+1,w
 20823  1CC8  00A7               	movwf	secret_check@inputs
 20824                           
 20825                           ;secret_task.c: 78: if (buttonPressed == inputs[secret_inputs[i].idx]){
 20826  1CC9  3019               	movlw	25
 20827  1CCA  00A0               	movwf	??_secret_check
 20828  1CCB  0820               	movf	??_secret_check,w
 20829  1CCC  00F1               	movwf	___bmul@multiplicand
 20830  1CCD  0828               	movf	secret_check@i,w
 20831  1CCE  31AF  271A  319C   	fcall	___bmul
 20832  1CD1  3E14               	addlw	20
 20833  1CD2  3E4A               	addlw	(low (_secret_inputs| (0+512)))& (0+255)
 20834  1CD3  0086               	movwf	6
 20835  1CD4  3002               	movlw	2	; select bank4/5
 20836  1CD5  0087               	movwf	7
 20837  1CD6  0801               	movf	1,w
 20838  1CD7  0020               	movlb	0	; select bank0
 20839  1CD8  0727               	addwf	secret_check@inputs,w
 20840  1CD9  00A1               	movwf	??_secret_check+1
 20841  1CDA  0821               	movf	??_secret_check+1,w
 20842  1CDB  0086               	movwf	6
 20843  1CDC  3002               	movlw	2	; select bank4/5
 20844  1CDD  0087               	movwf	7
 20845  1CDE  0801               	movf	1,w
 20846  1CDF  0679               	xorwf	secret_check@buttonPressed,w
 20847  1CE0  1D03               	skipz
 20848  1CE1  2D4F               	goto	l7566
 20849                           
 20850                           ;secret_task.c: 79: currents_size = strlen((const char *)inputs);
 20851  1CE2  0827               	movf	secret_check@inputs,w
 20852  1CE3  00F1               	movwf	strlen@s
 20853  1CE4  3002               	movlw	2
 20854  1CE5  00F2               	movwf	strlen@s+1
 20855  1CE6  31A0  20D3  319C   	fcall	_strlen
 20856  1CE9  0872               	movf	?_strlen+1,w
 20857  1CEA  0020               	movlb	0	; select bank0
 20858  1CEB  00A6               	movwf	secret_check@currents_size+1
 20859  1CEC  0871               	movf	?_strlen,w
 20860  1CED  00A5               	movwf	secret_check@currents_size
 20861                           
 20862                           ;secret_task.c: 80: secret_inputs[i].idx++;
 20863  1CEE  3019               	movlw	25
 20864  1CEF  00A0               	movwf	??_secret_check
 20865  1CF0  0820               	movf	??_secret_check,w
 20866  1CF1  00F1               	movwf	___bmul@multiplicand
 20867  1CF2  0828               	movf	secret_check@i,w
 20868  1CF3  31AF  271A  319C   	fcall	___bmul
 20869  1CF6  3E14               	addlw	20
 20870  1CF7  3E4A               	addlw	(low (_secret_inputs| (0+512)))& (0+255)
 20871  1CF8  0086               	movwf	6
 20872  1CF9  3002               	movlw	2	; select bank4/5
 20873  1CFA  0087               	movwf	7
 20874  1CFB  3001               	movlw	1
 20875  1CFC  0781               	addwf	1,f
 20876  1CFD  3141               	addfsr 1,1
 20877  1CFE  1803               	skipnc
 20878  1CFF  0A81               	incf	1,f
 20879                           
 20880                           ;secret_task.c: 82: if (secret_inputs[i].idx == currents_size) {
 20881  1D00  3019               	movlw	25
 20882  1D01  0020               	movlb	0	; select bank0
 20883  1D02  00A0               	movwf	??_secret_check
 20884  1D03  0820               	movf	??_secret_check,w
 20885  1D04  00F1               	movwf	___bmul@multiplicand
 20886  1D05  0828               	movf	secret_check@i,w
 20887  1D06  31AF  271A  319C   	fcall	___bmul
 20888  1D09  3E14               	addlw	20
 20889  1D0A  3E4A               	addlw	(low (_secret_inputs| (0+512)))& (0+255)
 20890  1D0B  0086               	movwf	6
 20891  1D0C  3002               	movlw	2	; select bank4/5
 20892  1D0D  0087               	movwf	7
 20893  1D0E  3F40               	moviw [0]fsr1
 20894  1D0F  0020               	movlb	0	; select bank0
 20895  1D10  00A1               	movwf	??_secret_check+1
 20896  1D11  3F41               	moviw [1]fsr1
 20897  1D12  00A2               	movwf	??_secret_check+2
 20898  1D13  0826               	movf	secret_check@currents_size+1,w
 20899  1D14  0622               	xorwf	??_secret_check+2,w
 20900  1D15  1D03               	skipz
 20901  1D16  2D19               	goto	u4825
 20902  1D17  0825               	movf	secret_check@currents_size,w
 20903  1D18  0621               	xorwf	??_secret_check+1,w
 20904  1D19                     u4825:	
 20905  1D19  1D03               	skipz
 20906  1D1A  2D60               	goto	l7568
 20907                           
 20908                           ;secret_task.c: 84: secret_inputs[i].idx = 0;
 20909  1D1B  3019               	movlw	25
 20910  1D1C  00A0               	movwf	??_secret_check
 20911  1D1D  0820               	movf	??_secret_check,w
 20912  1D1E  00F1               	movwf	___bmul@multiplicand
 20913  1D1F  0828               	movf	secret_check@i,w
 20914  1D20  31AF  271A  319C   	fcall	___bmul
 20915  1D23  3E14               	addlw	20
 20916  1D24  3E4A               	addlw	(low (_secret_inputs| (0+512)))& (0+255)
 20917  1D25  0086               	movwf	6
 20918  1D26  3002               	movlw	2	; select bank4/5
 20919  1D27  0087               	movwf	7
 20920  1D28  3000               	movlw	0
 20921  1D29  3FC0               	movwi [0]fsr1
 20922  1D2A  3FC1               	movwi [1]fsr1
 20923                           
 20924                           ;secret_task.c: 87: *(secret_inputs[i].variable) = (u16) secret_inputs[i].value;
 20925  1D2B  3019               	movlw	25
 20926  1D2C  0020               	movlb	0	; select bank0
 20927  1D2D  00A0               	movwf	??_secret_check
 20928  1D2E  0820               	movf	??_secret_check,w
 20929  1D2F  00F1               	movwf	___bmul@multiplicand
 20930  1D30  0828               	movf	secret_check@i,w
 20931  1D31  31AF  271A  319C   	fcall	___bmul
 20932  1D34  3E17               	addlw	23
 20933  1D35  3E4A               	addlw	(low (_secret_inputs| (0+512)))& (0+255)
 20934  1D36  0086               	movwf	6
 20935  1D37  3002               	movlw	2	; select bank4/5
 20936  1D38  0087               	movwf	7
 20937  1D39  3019               	movlw	25
 20938  1D3A  0020               	movlb	0	; select bank0
 20939  1D3B  00A1               	movwf	??_secret_check+1
 20940  1D3C  0821               	movf	??_secret_check+1,w
 20941  1D3D  00F1               	movwf	___bmul@multiplicand
 20942  1D3E  0828               	movf	secret_check@i,w
 20943  1D3F  31AF  271A         	fcall	___bmul
 20944  1D41  3E16               	addlw	22
 20945  1D42  3E4A               	addlw	(low (_secret_inputs| (0+512)))& (0+255)
 20946  1D43  0084               	movwf	4
 20947  1D44  3002               	movlw	2	; select bank4/5
 20948  1D45  0085               	movwf	5
 20949  1D46  0800               	movf	0,w
 20950  1D47  0084               	movwf	4
 20951  1D48  0185               	clrf	5
 20952  1D49  3F40               	moviw [0]fsr1
 20953  1D4A  3F80               	movwi [0]fsr0
 20954  1D4B  3F41               	moviw [1]fsr1
 20955  1D4C  3F81               	movwi [1]fsr0
 20956                           
 20957                           ;secret_task.c: 89: return 1;
 20958  1D4D  3001               	movlw	1
 20959  1D4E  0008               	return
 20960  1D4F                     l7566:	
 20961                           ;secret_task.c: 90: }
 20962                           ;secret_task.c: 91: } else {
 20963                           
 20964                           
 20965                           ;secret_task.c: 93: secret_inputs[i].idx = 0;
 20966  1D4F  3019               	movlw	25
 20967  1D50  0020               	movlb	0	; select bank0
 20968  1D51  00A0               	movwf	??_secret_check
 20969  1D52  0820               	movf	??_secret_check,w
 20970  1D53  00F1               	movwf	___bmul@multiplicand
 20971  1D54  0828               	movf	secret_check@i,w
 20972  1D55  31AF  271A  319C   	fcall	___bmul
 20973  1D58  3E14               	addlw	20
 20974  1D59  3E4A               	addlw	(low (_secret_inputs| (0+512)))& (0+255)
 20975  1D5A  0086               	movwf	6
 20976  1D5B  3002               	movlw	2	; select bank4/5
 20977  1D5C  0087               	movwf	7
 20978  1D5D  3000               	movlw	0
 20979  1D5E  3FC0               	movwi [0]fsr1
 20980  1D5F  3FC1               	movwi [1]fsr1
 20981  1D60                     l7568:	
 20982  1D60  3001               	movlw	1
 20983  1D61  0020               	movlb	0	; select bank0
 20984  1D62  07A8               	addwf	secret_check@i,f
 20985  1D63  3000               	movlw	0
 20986  1D64  3DA9               	addwfc	secret_check@i+1,f
 20987  1D65  2CB4               	goto	l7570
 20988  1D66                     l7572:	
 20989                           
 20990                           ;secret_task.c: 94: }
 20991                           ;secret_task.c: 95: }
 20992                           ;secret_task.c: 96: return 0;
 20993  1D66  3000               	movlw	0
 20994  1D67  0008               	return
 20995  1D68                     __end_of_secret_check:	
 20996                           
 20997                           	psect	text22
 20998  2F1A                     __ptext22:	
 20999 ;; *************** function ___bmul *****************
 21000 ;; Defined at:
 21001 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\Umul8.c"
 21002 ;; Parameters:    Size  Location     Type
 21003 ;;  multiplier      1    wreg     unsigned char 
 21004 ;;  multiplicand    1    1[COMMON] unsigned char 
 21005 ;; Auto vars:     Size  Location     Type
 21006 ;;  multiplier      1    4[COMMON] unsigned char 
 21007 ;;  product         1    3[COMMON] unsigned char 
 21008 ;; Return value:  Size  Location     Type
 21009 ;;                  1    wreg      unsigned char 
 21010 ;; Registers used:
 21011 ;;		wreg, status,2, status,0
 21012 ;; Tracked objects:
 21013 ;;		On entry : 0/0
 21014 ;;		On exit  : 0/0
 21015 ;;		Unchanged: 0/0
 21016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21017 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21018 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21019 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21020 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21021 ;;Total ram usage:        4 bytes
 21022 ;; Hardware stack levels used:    1
 21023 ;; Hardware stack levels required when called:    4
 21024 ;; This function calls:
 21025 ;;		Nothing
 21026 ;; This function is called by:
 21027 ;;		_secret_check
 21028 ;; This function uses a non-reentrant model
 21029 ;;
 21030                           
 21031                           
 21032                           ;psect for function ___bmul
 21033  2F1A                     ___bmul:	
 21034                           
 21035                           ;incstack = 0
 21036                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 21037                           ;___bmul@multiplier stored from wreg
 21038  2F1A  00F4               	movwf	___bmul@multiplier
 21039  2F1B  01F3               	clrf	___bmul@product
 21040  2F1C                     l7242:	
 21041  2F1C  1C74               	btfss	___bmul@multiplier,0
 21042  2F1D  2F22               	goto	l7246
 21043  2F1E  0871               	movf	___bmul@multiplicand,w
 21044  2F1F  00F2               	movwf	??___bmul
 21045  2F20  0872               	movf	??___bmul,w
 21046  2F21  07F3               	addwf	___bmul@product,f
 21047  2F22                     l7246:	
 21048  2F22  1003               	clrc
 21049  2F23  0DF1               	rlf	___bmul@multiplicand,f
 21050  2F24  1003               	clrc
 21051  2F25  0CF4               	rrf	___bmul@multiplier,f
 21052  2F26  0874               	movf	___bmul@multiplier,w
 21053  2F27  1D03               	btfss	3,2
 21054  2F28  2F1C               	goto	l7242
 21055  2F29  0873               	movf	___bmul@product,w
 21056  2F2A  0008               	return
 21057  2F2B                     __end_of___bmul:	
 21058                           
 21059                           	psect	text23
 21060  23C2                     __ptext23:	
 21061 ;; *************** function _menu_run_option *****************
 21062 ;; Defined at:
 21063 ;;		line 181 in file "menu_task.c"
 21064 ;; Parameters:    Size  Location     Type
 21065 ;;  data            2   27[BANK0 ] PTR struct t_menu_taskDa
 21066 ;;		 -> secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), 
 21067 ;;		 -> flashy_TaskData(30), NULL(0), 
 21068 ;; Auto vars:     Size  Location     Type
 21069 ;;		None
 21070 ;; Return value:  Size  Location     Type
 21071 ;;                  1    wreg      void 
 21072 ;; Registers used:
 21073 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21074 ;; Tracked objects:
 21075 ;;		On entry : 0/0
 21076 ;;		On exit  : 0/0
 21077 ;;		Unchanged: 0/0
 21078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21079 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21080 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21081 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21082 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21083 ;;Total ram usage:        2 bytes
 21084 ;; Hardware stack levels used:    1
 21085 ;; Hardware stack levels required when called:   11
 21086 ;; This function calls:
 21087 ;;		_menu_clear
 21088 ;; This function is called by:
 21089 ;;		_menu_Main
 21090 ;; This function uses a non-reentrant model
 21091 ;;
 21092                           
 21093                           
 21094                           ;psect for function _menu_run_option
 21095  23C2                     _menu_run_option:	
 21096                           
 21097                           ;menu_task.c: 182: switch (menu_option_idx){
 21098                           
 21099                           ;incstack = 0
 21100                           ; Regs used in _menu_run_option: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 21101  23C2  2BEA               	goto	l7358
 21102  23C3                     l7344:	
 21103                           ;menu_task.c: 183: case 1:
 21104                           
 21105                           
 21106                           ;menu_task.c: 184: menu_clear(data);
 21107  23C3  0020               	movlb	0	; select bank0
 21108  23C4  083C               	movf	menu_run_option@data+1,w
 21109  23C5  00BA               	movwf	menu_clear@data+1
 21110  23C6  083B               	movf	menu_run_option@data,w
 21111  23C7  00B9               	movwf	menu_clear@data
 21112  23C8  31A5  258A         	fcall	_menu_clear
 21113                           
 21114                           ;menu_task.c: 185: currentTask = SLOT_TASK;
 21115  23CA  3001               	movlw	1
 21116  23CB  0021               	movlb	1	; select bank1
 21117  23CC  00B8               	movwf	_currentTask^(0+128)
 21118  23CD  3000               	movlw	0
 21119  23CE  00B9               	movwf	(_currentTask^(0+128)+1)
 21120                           
 21121                           ;menu_task.c: 186: break;
 21122  23CF  0008               	return
 21123  23D0                     l7348:	
 21124                           ;menu_task.c: 187: case 2:
 21125                           
 21126                           
 21127                           ;menu_task.c: 188: menu_clear(data);
 21128  23D0  0020               	movlb	0	; select bank0
 21129  23D1  083C               	movf	menu_run_option@data+1,w
 21130  23D2  00BA               	movwf	menu_clear@data+1
 21131  23D3  083B               	movf	menu_run_option@data,w
 21132  23D4  00B9               	movwf	menu_clear@data
 21133  23D5  31A5  258A         	fcall	_menu_clear
 21134                           
 21135                           ;menu_task.c: 189: currentTask = LOCKED_TASK;
 21136  23D7  3003               	movlw	3
 21137  23D8  0021               	movlb	1	; select bank1
 21138  23D9  00B8               	movwf	_currentTask^(0+128)
 21139  23DA  3000               	movlw	0
 21140  23DB  00B9               	movwf	(_currentTask^(0+128)+1)
 21141                           
 21142                           ;menu_task.c: 190: break;
 21143  23DC  0008               	return
 21144  23DD                     l7352:	
 21145                           ;menu_task.c: 191: case 3:
 21146                           
 21147                           
 21148                           ;menu_task.c: 192: menu_clear(data);
 21149  23DD  0020               	movlb	0	; select bank0
 21150  23DE  083C               	movf	menu_run_option@data+1,w
 21151  23DF  00BA               	movwf	menu_clear@data+1
 21152  23E0  083B               	movf	menu_run_option@data,w
 21153  23E1  00B9               	movwf	menu_clear@data
 21154  23E2  31A5  258A         	fcall	_menu_clear
 21155                           
 21156                           ;menu_task.c: 193: currentTask = FLASHY_TASK;
 21157  23E4  3002               	movlw	2
 21158  23E5  0021               	movlb	1	; select bank1
 21159  23E6  00B8               	movwf	_currentTask^(0+128)
 21160  23E7  3000               	movlw	0
 21161  23E8  00B9               	movwf	(_currentTask^(0+128)+1)
 21162                           
 21163                           ;menu_task.c: 195: }
 21164                           
 21165                           ;menu_task.c: 194: break;
 21166  23E9  0008               	return
 21167  23EA                     l7358:	
 21168                           
 21169                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 21170                           ; Switch size 1, requested type "space"
 21171                           ; Number of cases is 1, Range of values is 0 to 0
 21172                           ; switch strategies available:
 21173                           ; Name         Instructions Cycles
 21174                           ; simple_byte            4     3 (average)
 21175                           ; direct_byte            8     6 (fixed)
 21176                           ; jumptable            260     6 (fixed)
 21177                           ;	Chosen strategy is simple_byte
 21178  23EA  0021               	movlb	1	; select bank1
 21179  23EB  0835               	movf	(_menu_option_idx+1)^(0+128),w
 21180  23EC  3A00               	xorlw	0	; case 0
 21181  23ED  1903               	skipnz
 21182  23EE  2BF0               	goto	l8998
 21183  23EF  2BFB               	goto	l999
 21184  23F0                     l8998:	
 21185                           
 21186                           ; Switch size 1, requested type "space"
 21187                           ; Number of cases is 3, Range of values is 1 to 3
 21188                           ; switch strategies available:
 21189                           ; Name         Instructions Cycles
 21190                           ; simple_byte           10     6 (average)
 21191                           ; direct_byte           15     9 (fixed)
 21192                           ; jumptable            263     9 (fixed)
 21193                           ;	Chosen strategy is simple_byte
 21194  23F0  0834               	movf	_menu_option_idx^(0+128),w
 21195  23F1  3A01               	xorlw	1	; case 1
 21196  23F2  1903               	skipnz
 21197  23F3  2BC3               	goto	l7344
 21198  23F4  3A03               	xorlw	3	; case 2
 21199  23F5  1903               	skipnz
 21200  23F6  2BD0               	goto	l7348
 21201  23F7  3A01               	xorlw	1	; case 3
 21202  23F8  1903               	skipnz
 21203  23F9  2BDD               	goto	l7352
 21204  23FA  2BFB               	goto	l999
 21205  23FB                     l999:	
 21206  23FB  0008               	return
 21207  23FC                     __end_of_menu_run_option:	
 21208                           
 21209                           	psect	text24
 21210  258A                     __ptext24:	
 21211 ;; *************** function _menu_clear *****************
 21212 ;; Defined at:
 21213 ;;		line 198 in file "menu_task.c"
 21214 ;; Parameters:    Size  Location     Type
 21215 ;;  data            2   25[BANK0 ] PTR struct t_menu_taskDa
 21216 ;;		 -> secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), 
 21217 ;;		 -> flashy_TaskData(30), NULL(0), 
 21218 ;; Auto vars:     Size  Location     Type
 21219 ;;		None
 21220 ;; Return value:  Size  Location     Type
 21221 ;;                  1    wreg      void 
 21222 ;; Registers used:
 21223 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21224 ;; Tracked objects:
 21225 ;;		On entry : 0/0
 21226 ;;		On exit  : 0/0
 21227 ;;		Unchanged: 0/0
 21228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21229 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21230 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21231 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21232 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21233 ;;Total ram usage:        2 bytes
 21234 ;; Hardware stack levels used:    1
 21235 ;; Hardware stack levels required when called:   10
 21236 ;; This function calls:
 21237 ;;		_nullifyBadge_segDisplayErase
 21238 ;;		_nullifyBadge_userLedsClr
 21239 ;; This function is called by:
 21240 ;;		_menu_Main
 21241 ;;		_menu_run_option
 21242 ;; This function uses a non-reentrant model
 21243 ;;
 21244                           
 21245                           
 21246                           ;psect for function _menu_clear
 21247  258A                     _menu_clear:	
 21248                           
 21249                           ;menu_task.c: 200: data->delayTickCount = 50;
 21250                           
 21251                           ;incstack = 0
 21252                           ; Regs used in _menu_clear: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 21253  258A  0020               	movlb	0	; select bank0
 21254  258B  0839               	movf	menu_clear@data,w
 21255  258C  0086               	movwf	6
 21256  258D  083A               	movf	menu_clear@data+1,w
 21257  258E  0087               	movwf	7
 21258  258F  3142               	addfsr 1,2
 21259  2590  3032               	movlw	50
 21260  2591  3FC0               	movwi [0]fsr1
 21261  2592  3000               	movlw	0
 21262  2593  3FC1               	movwi [1]fsr1
 21263                           
 21264                           ;menu_task.c: 201: data->holdCountA = 0;
 21265  2594  0839               	movf	menu_clear@data,w
 21266  2595  0086               	movwf	6
 21267  2596  083A               	movf	menu_clear@data+1,w
 21268  2597  0087               	movwf	7
 21269  2598  3144               	addfsr 1,4
 21270  2599  3000               	movlw	0
 21271  259A  3FC0               	movwi [0]fsr1
 21272  259B  3FC1               	movwi [1]fsr1
 21273                           
 21274                           ;menu_task.c: 202: data->holdCountB = 0;
 21275  259C  0839               	movf	menu_clear@data,w
 21276  259D  0086               	movwf	6
 21277  259E  083A               	movf	menu_clear@data+1,w
 21278  259F  0087               	movwf	7
 21279  25A0  3146               	addfsr 1,6
 21280  25A1  3000               	movlw	0
 21281  25A2  3FC0               	movwi [0]fsr1
 21282  25A3  3FC1               	movwi [1]fsr1
 21283                           
 21284                           ;menu_task.c: 203: data->holdCountX = 0;
 21285  25A4  0839               	movf	menu_clear@data,w
 21286  25A5  0086               	movwf	6
 21287  25A6  083A               	movf	menu_clear@data+1,w
 21288  25A7  0087               	movwf	7
 21289  25A8  3148               	addfsr 1,8
 21290  25A9  3000               	movlw	0
 21291  25AA  3FC0               	movwi [0]fsr1
 21292  25AB  3FC1               	movwi [1]fsr1
 21293                           
 21294                           ;menu_task.c: 204: data->holdCountY = 0;
 21295  25AC  0839               	movf	menu_clear@data,w
 21296  25AD  0086               	movwf	6
 21297  25AE  083A               	movf	menu_clear@data+1,w
 21298  25AF  0087               	movwf	7
 21299  25B0  314A               	addfsr 1,10
 21300  25B1  3000               	movlw	0
 21301  25B2  3FC0               	movwi [0]fsr1
 21302  25B3  3FC1               	movwi [1]fsr1
 21303                           
 21304                           ;menu_task.c: 205: data->noholdCount = 0;
 21305  25B4  0839               	movf	menu_clear@data,w
 21306  25B5  0086               	movwf	6
 21307  25B6  083A               	movf	menu_clear@data+1,w
 21308  25B7  0087               	movwf	7
 21309  25B8  314C               	addfsr 1,12
 21310  25B9  3000               	movlw	0
 21311  25BA  3FC0               	movwi [0]fsr1
 21312  25BB  3FC1               	movwi [1]fsr1
 21313                           
 21314                           ;menu_task.c: 207: menu_option_idx = 0;
 21315  25BC  0021               	movlb	1	; select bank1
 21316  25BD  01B4               	clrf	_menu_option_idx^(0+128)
 21317  25BE  01B5               	clrf	(_menu_option_idx+1)^(0+128)
 21318                           
 21319                           ;menu_task.c: 210: nullifyBadge_userLedsClr(data->badge);
 21320  25BF  0020               	movlb	0	; select bank0
 21321  25C0  0839               	movf	menu_clear@data,w
 21322  25C1  0086               	movwf	6
 21323  25C2  083A               	movf	menu_clear@data+1,w
 21324  25C3  0087               	movwf	7
 21325  25C4  0801               	movf	1,w
 21326  25C5  31AE  260F  31A5   	fcall	_nullifyBadge_userLedsClr
 21327                           
 21328                           ;menu_task.c: 211: nullifyBadge_segDisplayErase(data->badge);
 21329  25C8  0020               	movlb	0	; select bank0
 21330  25C9  0839               	movf	menu_clear@data,w
 21331  25CA  0086               	movwf	6
 21332  25CB  083A               	movf	menu_clear@data+1,w
 21333  25CC  0087               	movwf	7
 21334  25CD  0801               	movf	1,w
 21335  25CE  31AE  2609         	fcall	_nullifyBadge_segDisplayErase
 21336  25D0  0008               	return
 21337  25D1                     __end_of_menu_clear:	
 21338                           
 21339                           	psect	text25
 21340  1867                     __ptext25:	
 21341 ;; *************** function _menu_display_option *****************
 21342 ;; Defined at:
 21343 ;;		line 162 in file "menu_task.c"
 21344 ;; Parameters:    Size  Location     Type
 21345 ;;  data            2   44[BANK0 ] PTR struct t_menu_taskDa
 21346 ;;		 -> secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), 
 21347 ;;		 -> flashy_TaskData(30), NULL(0), 
 21348 ;; Auto vars:     Size  Location     Type
 21349 ;;  led             2   48[BANK0 ] unsigned int 
 21350 ;;  size            2   46[BANK0 ] unsigned int 
 21351 ;; Return value:  Size  Location     Type
 21352 ;;                  1    wreg      void 
 21353 ;; Registers used:
 21354 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21355 ;; Tracked objects:
 21356 ;;		On entry : 0/0
 21357 ;;		On exit  : 0/0
 21358 ;;		Unchanged: 0/0
 21359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21360 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21361 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21362 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21363 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21364 ;;Total ram usage:        6 bytes
 21365 ;; Hardware stack levels used:    1
 21366 ;; Hardware stack levels required when called:   10
 21367 ;; This function calls:
 21368 ;;		___lwmod
 21369 ;;		_marquee
 21370 ;;		_nullifyBadge_segDisplayForceUpdate
 21371 ;;		_nullifyBadge_segDisplayPutStr
 21372 ;;		_nullifyBadge_userLedsSet
 21373 ;; This function is called by:
 21374 ;;		_menu_Main
 21375 ;; This function uses a non-reentrant model
 21376 ;;
 21377                           
 21378                           
 21379                           ;psect for function _menu_display_option
 21380  1867                     _menu_display_option:	
 21381                           
 21382                           ;menu_task.c: 163: u16 size = sizeof(menu_options_leds)/sizeof(menu_options_leds[0]);
 21383                           
 21384                           ;incstack = 0
 21385                           ; Regs used in _menu_display_option: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 21386  1867  3005               	movlw	5
 21387  1868  0020               	movlb	0	; select bank0
 21388  1869  00CE               	movwf	menu_display_option@size
 21389  186A  3000               	movlw	0
 21390  186B  00CF               	movwf	menu_display_option@size+1
 21391                           
 21392                           ;menu_task.c: 164: u16 led = menu_options_leds[menu_option_idx % size];
 21393  186C  084F               	movf	menu_display_option@size+1,w
 21394  186D  00AC               	movwf	___lwmod@divisor+1
 21395  186E  084E               	movf	menu_display_option@size,w
 21396  186F  00AB               	movwf	___lwmod@divisor
 21397  1870  0021               	movlb	1	; select bank1
 21398  1871  0835               	movf	(_menu_option_idx+1)^(0+128),w
 21399  1872  0020               	movlb	0	; select bank0
 21400  1873  00AE               	movwf	___lwmod@dividend+1
 21401  1874  0021               	movlb	1	; select bank1
 21402  1875  0834               	movf	_menu_option_idx^(0+128),w
 21403  1876  0020               	movlb	0	; select bank0
 21404  1877  00AD               	movwf	___lwmod@dividend
 21405  1878  31A1  21F4  3198   	fcall	___lwmod
 21406  187B  0020               	movlb	0	; select bank0
 21407  187C  082B               	movf	?___lwmod,w
 21408  187D  0709               	addwf	9,w
 21409  187E  3EAC               	addlw	(low (_menu_options_leds| (0+256)))& (0+255)
 21410  187F  0086               	movwf	6
 21411  1880  3001               	movlw	1	; select bank3/4
 21412  1881  0087               	movwf	7
 21413  1882  3F40               	moviw [0]fsr1
 21414  1883  00D0               	movwf	menu_display_option@led
 21415  1884  3F41               	moviw [1]fsr1
 21416  1885  00D1               	movwf	menu_display_option@led+1
 21417                           
 21418                           ;menu_task.c: 170: nullifyBadge_userLedsSet(data->badge, led);
 21419  1886  0851               	movf	menu_display_option@led+1,w
 21420  1887  00AE               	movwf	nullifyBadge_userLedsSet@userLedData+1
 21421  1888  0850               	movf	menu_display_option@led,w
 21422  1889  00AD               	movwf	nullifyBadge_userLedsSet@userLedData
 21423  188A  084C               	movf	menu_display_option@data,w
 21424  188B  0086               	movwf	6
 21425  188C  084D               	movf	menu_display_option@data+1,w
 21426  188D  0087               	movwf	7
 21427  188E  0801               	movf	1,w
 21428  188F  31AF  2709  3198   	fcall	_nullifyBadge_userLedsSet
 21429                           
 21430                           ;menu_task.c: 172: if (menu_option_idx == 0){
 21431  1892  0021               	movlb	1	; select bank1
 21432  1893  0834               	movf	_menu_option_idx^(0+128),w
 21433  1894  0435               	iorwf	(_menu_option_idx+1)^(0+128),w
 21434  1895  1D03               	btfss	3,2
 21435  1896  28B2               	goto	l7340
 21436                           
 21437                           ;menu_task.c: 173: nullifyBadge_segDisplayPutStr(data->badge, menu_option[menu_option_id
      +                          x]);
 21438  1897  3534               	lslf	_menu_option_idx^(0+128),w
 21439  1898  3EB6               	addlw	(low (_menu_option| (0+256)))& (0+255)
 21440  1899  0086               	movwf	6
 21441  189A  3001               	movlw	1	; select bank3/4
 21442  189B  0087               	movwf	7
 21443  189C  3F40               	moviw [0]fsr1
 21444  189D  0020               	movlb	0	; select bank0
 21445  189E  00B7               	movwf	nullifyBadge_segDisplayPutStr@str
 21446  189F  3F41               	moviw [1]fsr1
 21447  18A0  00B8               	movwf	nullifyBadge_segDisplayPutStr@str+1
 21448  18A1  084C               	movf	menu_display_option@data,w
 21449  18A2  0086               	movwf	6
 21450  18A3  084D               	movf	menu_display_option@data+1,w
 21451  18A4  0087               	movwf	7
 21452  18A5  0801               	movf	1,w
 21453  18A6  31AE  264B  3198   	fcall	_nullifyBadge_segDisplayPutStr
 21454                           
 21455                           ;menu_task.c: 174: nullifyBadge_segDisplayForceUpdate(data->badge);
 21456  18A9  0020               	movlb	0	; select bank0
 21457  18AA  084C               	movf	menu_display_option@data,w
 21458  18AB  0086               	movwf	6
 21459  18AC  084D               	movf	menu_display_option@data+1,w
 21460  18AD  0087               	movwf	7
 21461  18AE  0801               	movf	1,w
 21462  18AF  31AE  2603         	fcall	_nullifyBadge_segDisplayForceUpdate
 21463                           
 21464                           ;menu_task.c: 175: }
 21465  18B1  0008               	return
 21466  18B2                     l7340:	
 21467                           
 21468                           ;menu_task.c: 176: else {
 21469                           ;menu_task.c: 177: marquee(menu_option[menu_option_idx], data->noholdCount);
 21470  18B2  0021               	movlb	1	; select bank1
 21471  18B3  3534               	lslf	_menu_option_idx^(0+128),w
 21472  18B4  3EB6               	addlw	(low (_menu_option| (0+256)))& (0+255)
 21473  18B5  0086               	movwf	6
 21474  18B6  3001               	movlw	1	; select bank3/4
 21475  18B7  0087               	movwf	7
 21476  18B8  3F40               	moviw [0]fsr1
 21477  18B9  0020               	movlb	0	; select bank0
 21478  18BA  00BA               	movwf	marquee@string
 21479  18BB  3F41               	moviw [1]fsr1
 21480  18BC  00BB               	movwf	marquee@string+1
 21481  18BD  084C               	movf	menu_display_option@data,w
 21482  18BE  0086               	movwf	6
 21483  18BF  084D               	movf	menu_display_option@data+1,w
 21484  18C0  0087               	movwf	7
 21485  18C1  314C               	addfsr 1,12
 21486  18C2  3F40               	moviw [0]fsr1
 21487  18C3  00BC               	movwf	marquee@count
 21488  18C4  3F41               	moviw [1]fsr1
 21489  18C5  00BD               	movwf	marquee@count+1
 21490  18C6  319B  2338         	fcall	_marquee
 21491  18C8  0008               	return
 21492  18C9                     __end_of_menu_display_option:	
 21493                           
 21494                           	psect	text26
 21495  2702                     __ptext26:	
 21496 ;; *************** function _slot_Setup *****************
 21497 ;; Defined at:
 21498 ;;		line 48 in file "slot_task.c"
 21499 ;; Parameters:    Size  Location     Type
 21500 ;;  taskData        2   15[BANK0 ] PTR void 
 21501 ;;		 -> secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), 
 21502 ;;		 -> flashy_TaskData(30), NULL(0), 
 21503 ;; Auto vars:     Size  Location     Type
 21504 ;;  data            2   20[BANK0 ] PTR struct t_slot_taskDa
 21505 ;;		 -> secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), 
 21506 ;;		 -> flashy_TaskData(30), NULL(0), 
 21507 ;; Return value:  Size  Location     Type
 21508 ;;                  1    wreg      void 
 21509 ;; Registers used:
 21510 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21511 ;; Tracked objects:
 21512 ;;		On entry : 0/0
 21513 ;;		On exit  : 0/0
 21514 ;;		Unchanged: 0/0
 21515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21516 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21517 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21518 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21519 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21520 ;;Total ram usage:        7 bytes
 21521 ;; Hardware stack levels used:    1
 21522 ;; Hardware stack levels required when called:    6
 21523 ;; This function calls:
 21524 ;;		___lwmod
 21525 ;;		_memset
 21526 ;;		_rand
 21527 ;; This function is called by:
 21528 ;;		_menu_Main
 21529 ;;		_locked_Main
 21530 ;;		_slot_Init
 21531 ;;		_slot_Main
 21532 ;; This function uses a non-reentrant model
 21533 ;;
 21534                           
 21535                           
 21536                           ;psect for function _slot_Setup
 21537  2702                     _slot_Setup:	
 21538                           
 21539                           ;slot_task.c: 49: struct t_slot_taskData *data = (struct t_slot_taskData *) taskData;
 21540                           
 21541                           ;incstack = 0
 21542                           ; Regs used in _slot_Setup: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 21543  2702  0020               	movlb	0	; select bank0
 21544  2703  0830               	movf	slot_Setup@taskData+1,w
 21545  2704  00B5               	movwf	slot_Setup@data+1
 21546  2705  082F               	movf	slot_Setup@taskData,w
 21547  2706  00B4               	movwf	slot_Setup@data
 21548                           
 21549                           ;slot_task.c: 50: slot_taskData = data;
 21550  2707  0835               	movf	slot_Setup@data+1,w
 21551  2708  0021               	movlb	1	; select bank1
 21552  2709  00BB               	movwf	(_slot_taskData+1)^(0+128)
 21553  270A  0020               	movlb	0	; select bank0
 21554  270B  0834               	movf	slot_Setup@data,w
 21555  270C  0021               	movlb	1	; select bank1
 21556  270D  00BA               	movwf	_slot_taskData^(0+128)
 21557                           
 21558                           ;slot_task.c: 51: data->displayTickCount = 0;
 21559  270E  0020               	movlb	0	; select bank0
 21560  270F  0834               	movf	slot_Setup@data,w
 21561  2710  0086               	movwf	6
 21562  2711  0835               	movf	slot_Setup@data+1,w
 21563  2712  0087               	movwf	7
 21564  2713  3143               	addfsr 1,3
 21565  2714  3000               	movlw	0
 21566  2715  3FC0               	movwi [0]fsr1
 21567  2716  3FC1               	movwi [1]fsr1
 21568                           
 21569                           ;slot_task.c: 52: data->delayTickCount = 0;
 21570  2717  0834               	movf	slot_Setup@data,w
 21571  2718  0086               	movwf	6
 21572  2719  0835               	movf	slot_Setup@data+1,w
 21573  271A  0087               	movwf	7
 21574  271B  3145               	addfsr 1,5
 21575  271C  3000               	movlw	0
 21576  271D  3FC0               	movwi [0]fsr1
 21577  271E  3FC1               	movwi [1]fsr1
 21578                           
 21579                           ;slot_task.c: 53: memset(data->slot_print_buf, 0x00, 20);
 21580  271F  0834               	movf	slot_Setup@data,w
 21581  2720  3E0B               	addlw	11
 21582  2721  00F1               	movwf	memset@p1
 21583  2722  3000               	movlw	0
 21584  2723  3D35               	addwfc	slot_Setup@data+1,w
 21585  2724  00F2               	movwf	memset@p1+1
 21586  2725  3000               	movlw	0
 21587  2726  00F3               	movwf	memset@c
 21588  2727  00F4               	movwf	memset@c+1
 21589  2728  3014               	movlw	20
 21590  2729  00F5               	movwf	memset@n
 21591  272A  3000               	movlw	0
 21592  272B  00F6               	movwf	memset@n+1
 21593  272C  31AF  27CF  31A7   	fcall	_memset
 21594                           
 21595                           ;slot_task.c: 54: if (!badge_locked) {
 21596  272F  0021               	movlb	1	; select bank1
 21597  2730  0844               	movf	_badge_locked^(0+128),w
 21598  2731  1D03               	btfss	3,2
 21599  2732  2F4B               	goto	l7326
 21600                           
 21601                           ;slot_task.c: 55: Shot_Index = (u8)rand() % (sizeof(Shot_Options)/sizeof(Shot_Options[0]
      +                          ));
 21602  2733  3009               	movlw	9
 21603  2734  0020               	movlb	0	; select bank0
 21604  2735  00AB               	movwf	___lwmod@divisor
 21605  2736  3000               	movlw	0
 21606  2737  00AC               	movwf	___lwmod@divisor+1
 21607  2738  31A5  2501  31A7   	fcall	_rand
 21608  273B  0020               	movlb	0	; select bank0
 21609  273C  0824               	movf	?_rand,w
 21610  273D  00B1               	movwf	??_slot_Setup
 21611  273E  01B2               	clrf	??_slot_Setup+1
 21612  273F  0831               	movf	??_slot_Setup,w
 21613  2740  00AD               	movwf	___lwmod@dividend
 21614  2741  0832               	movf	??_slot_Setup+1,w
 21615  2742  00AE               	movwf	___lwmod@dividend+1
 21616  2743  31A1  21F4  31A7   	fcall	___lwmod
 21617  2746  0020               	movlb	0	; select bank0
 21618  2747  082B               	movf	?___lwmod,w
 21619  2748  00B3               	movwf	??_slot_Setup+2
 21620  2749  0833               	movf	??_slot_Setup+2,w
 21621  274A  2F4F               	goto	L13
 21622  274B                     l7326:	
 21623                           ;slot_task.c: 56: }
 21624                           
 21625                           
 21626                           ;slot_task.c: 57: else {
 21627                           ;slot_task.c: 58: Shot_Index = ((sizeof(Shot_Options)/sizeof(Shot_Options[0]))-1);
 21628  274B  3008               	movlw	8
 21629  274C  0020               	movlb	0	; select bank0
 21630  274D  00B1               	movwf	??_slot_Setup
 21631  274E  0831               	movf	??_slot_Setup,w
 21632  274F                     L13:	
 21633  274F  00FC               	movwf	_Shot_Index
 21634                           
 21635                           ;slot_task.c: 59: }
 21636                           ;slot_task.c: 61: Leds_idx = 1;
 21637  2750  3001               	movlw	1
 21638  2751  0021               	movlb	1	; select bank1
 21639  2752  00DD               	movwf	_Leds_idx^(0+128)
 21640  2753  3000               	movlw	0
 21641  2754  00DE               	movwf	(_Leds_idx^(0+128)+1)
 21642  2755  0008               	return
 21643  2756                     __end_of_slot_Setup:	
 21644                           
 21645                           	psect	text27
 21646  2F50                     __ptext27:	
 21647 ;; *************** function _locked_unlock_leds *****************
 21648 ;; Defined at:
 21649 ;;		line 37 in file "locked_task.c"
 21650 ;; Parameters:    Size  Location     Type
 21651 ;;		None
 21652 ;; Auto vars:     Size  Location     Type
 21653 ;;		None
 21654 ;; Return value:  Size  Location     Type
 21655 ;;                  2  1226[None  ] unsigned int 
 21656 ;; Registers used:
 21657 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 21658 ;; Tracked objects:
 21659 ;;		On entry : 0/0
 21660 ;;		On exit  : 0/0
 21661 ;;		Unchanged: 0/0
 21662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21663 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21664 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21665 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21666 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21667 ;;Total ram usage:        2 bytes
 21668 ;; Hardware stack levels used:    1
 21669 ;; Hardware stack levels required when called:    4
 21670 ;; This function calls:
 21671 ;;		Nothing
 21672 ;; This function is called by:
 21673 ;;		_locked_Main
 21674 ;; This function uses a non-reentrant model
 21675 ;;
 21676                           
 21677                           
 21678                           ;psect for function _locked_unlock_leds
 21679  2F50                     _locked_unlock_leds:	
 21680                           
 21681                           ;locked_task.c: 38: locked_locking_leds_idx = 0;
 21682                           
 21683                           ;incstack = 0
 21684                           ; Regs used in _locked_unlock_leds: [wreg+fsr1l+fsr1h+status,2+status,0]
 21685  2F50  0021               	movlb	1	; select bank1
 21686  2F51  01A2               	clrf	_locked_locking_leds_idx^(0+128)
 21687  2F52  01A3               	clrf	(_locked_locking_leds_idx+1)^(0+128)
 21688                           
 21689                           ;locked_task.c: 39: locked_leds = locked_lock_base_leds | locked_locking_leds[locked_loc
      +                          king_leds_idx];
 21690  2F53  3522               	lslf	_locked_locking_leds_idx^(0+128),w
 21691  2F54  3EA0               	addlw	(low (_locked_locking_leds| (0+256)))& (0+255)
 21692  2F55  0086               	movwf	6
 21693  2F56  3001               	movlw	1	; select bank3/4
 21694  2F57  0087               	movwf	7
 21695  2F58  3F40               	moviw [0]fsr1
 21696  2F59  00F1               	movwf	??_locked_unlock_leds
 21697  2F5A  3F41               	moviw [1]fsr1
 21698  2F5B  00F2               	movwf	??_locked_unlock_leds+1
 21699  2F5C  085F               	movf	_locked_lock_base_leds^(0+128),w
 21700  2F5D  0471               	iorwf	??_locked_unlock_leds,w
 21701  2F5E  00A0               	movwf	_locked_leds^(0+128)
 21702  2F5F  0860               	movf	(_locked_lock_base_leds+1)^(0+128),w
 21703  2F60  0472               	iorwf	??_locked_unlock_leds+1,w
 21704  2F61  00A1               	movwf	(_locked_leds+1)^(0+128)
 21705  2F62  0008               	return
 21706  2F63                     __end_of_locked_unlock_leds:	
 21707                           ;locked_task.c: 40: return locked_leds;
 21708                           ;	Return value of _locked_unlock_leds is never used
 21709                           
 21710                           
 21711                           	psect	text28
 21712  202A                     __ptext28:	
 21713 ;; *************** function _locked_lock_leds *****************
 21714 ;; Defined at:
 21715 ;;		line 29 in file "locked_task.c"
 21716 ;; Parameters:    Size  Location     Type
 21717 ;;		None
 21718 ;; Auto vars:     Size  Location     Type
 21719 ;;  size            2    3[COMMON] unsigned int 
 21720 ;; Return value:  Size  Location     Type
 21721 ;;                  2  1223[None  ] unsigned int 
 21722 ;; Registers used:
 21723 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 21724 ;; Tracked objects:
 21725 ;;		On entry : 0/0
 21726 ;;		On exit  : 0/0
 21727 ;;		Unchanged: 0/0
 21728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21729 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21730 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21731 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21732 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21733 ;;Total ram usage:        4 bytes
 21734 ;; Hardware stack levels used:    1
 21735 ;; Hardware stack levels required when called:    4
 21736 ;; This function calls:
 21737 ;;		Nothing
 21738 ;; This function is called by:
 21739 ;;		_locked_Init
 21740 ;;		_locked_Main
 21741 ;; This function uses a non-reentrant model
 21742 ;;
 21743                           
 21744                           
 21745                           ;psect for function _locked_lock_leds
 21746  202A                     _locked_lock_leds:	
 21747                           
 21748                           ;locked_task.c: 30: u16 size = sizeof(locked_locking_leds) / sizeof(locked_locking_leds[
      +                          0]);
 21749                           
 21750                           ;incstack = 0
 21751                           ; Regs used in _locked_lock_leds: [wreg+fsr1l+fsr1h+status,2+status,0]
 21752  202A  3006               	movlw	6
 21753  202B  00F3               	movwf	locked_lock_leds@size
 21754  202C  3000               	movlw	0
 21755  202D  00F4               	movwf	locked_lock_leds@size+1
 21756                           
 21757                           ;locked_task.c: 31: locked_locking_leds_idx = size - 1;
 21758  202E  0873               	movf	locked_lock_leds@size,w
 21759  202F  3EFF               	addlw	255
 21760  2030  0021               	movlb	1	; select bank1
 21761  2031  00A2               	movwf	_locked_locking_leds_idx^(0+128)
 21762  2032  30FF               	movlw	255
 21763  2033  3D74               	addwfc	locked_lock_leds@size+1,w
 21764  2034  00A3               	movwf	(_locked_locking_leds_idx+1)^(0+128)
 21765                           
 21766                           ;locked_task.c: 32: locked_leds = locked_lock_base_leds | locked_locking_leds[locked_loc
      +                          king_leds_idx];
 21767  2035  3522               	lslf	_locked_locking_leds_idx^(0+128),w
 21768  2036  3EA0               	addlw	(low (_locked_locking_leds| (0+256)))& (0+255)
 21769  2037  0086               	movwf	6
 21770  2038  3001               	movlw	1	; select bank3/4
 21771  2039  0087               	movwf	7
 21772  203A  3F40               	moviw [0]fsr1
 21773  203B  00F1               	movwf	??_locked_lock_leds
 21774  203C  3F41               	moviw [1]fsr1
 21775  203D  00F2               	movwf	??_locked_lock_leds+1
 21776  203E  085F               	movf	_locked_lock_base_leds^(0+128),w
 21777  203F  0471               	iorwf	??_locked_lock_leds,w
 21778  2040  00A0               	movwf	_locked_leds^(0+128)
 21779  2041  0860               	movf	(_locked_lock_base_leds+1)^(0+128),w
 21780  2042  0472               	iorwf	??_locked_lock_leds+1,w
 21781  2043  00A1               	movwf	(_locked_leds+1)^(0+128)
 21782  2044  0008               	return
 21783  2045                     __end_of_locked_lock_leds:	
 21784                           ;locked_task.c: 33: return locked_leds;
 21785                           ;	Return value of _locked_lock_leds is never used
 21786                           
 21787                           
 21788                           	psect	text29
 21789  2FE7                     __ptext29:	
 21790 ;; *************** function _locked_get_unlock_leds *****************
 21791 ;; Defined at:
 21792 ;;		line 54 in file "locked_task.c"
 21793 ;; Parameters:    Size  Location     Type
 21794 ;;		None
 21795 ;; Auto vars:     Size  Location     Type
 21796 ;;  leds            2    3[COMMON] unsigned int 
 21797 ;; Return value:  Size  Location     Type
 21798 ;;                  2    1[COMMON] unsigned int 
 21799 ;; Registers used:
 21800 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 21801 ;; Tracked objects:
 21802 ;;		On entry : 0/0
 21803 ;;		On exit  : 0/0
 21804 ;;		Unchanged: 0/0
 21805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21806 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21807 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21808 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21809 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21810 ;;Total ram usage:        4 bytes
 21811 ;; Hardware stack levels used:    1
 21812 ;; Hardware stack levels required when called:    4
 21813 ;; This function calls:
 21814 ;;		Nothing
 21815 ;; This function is called by:
 21816 ;;		_locked_Main
 21817 ;; This function uses a non-reentrant model
 21818 ;;
 21819                           
 21820                           
 21821                           ;psect for function _locked_get_unlock_leds
 21822  2FE7                     _locked_get_unlock_leds:	
 21823                           
 21824                           ;locked_task.c: 55: u16 leds = locked_locking_leds[locked_locking_leds_idx];
 21825                           
 21826                           ;incstack = 0
 21827                           ; Regs used in _locked_get_unlock_leds: [wreg+fsr1l+fsr1h+status,2+status,0]
 21828  2FE7  0021               	movlb	1	; select bank1
 21829  2FE8  3522               	lslf	_locked_locking_leds_idx^(0+128),w
 21830  2FE9  3EA0               	addlw	(low (_locked_locking_leds| (0+256)))& (0+255)
 21831  2FEA  0086               	movwf	6
 21832  2FEB  3001               	movlw	1	; select bank3/4
 21833  2FEC  0087               	movwf	7
 21834  2FED  3F40               	moviw [0]fsr1
 21835  2FEE  00F3               	movwf	locked_get_unlock_leds@leds
 21836  2FEF  3F41               	moviw [1]fsr1
 21837  2FF0  00F4               	movwf	locked_get_unlock_leds@leds+1
 21838                           
 21839                           ;locked_task.c: 58: if (locked_locking_leds_idx > 0){
 21840  2FF1  0822               	movf	_locked_locking_leds_idx^(0+128),w
 21841  2FF2  0423               	iorwf	(_locked_locking_leds_idx+1)^(0+128),w
 21842  2FF3  1903               	btfsc	3,2
 21843  2FF4  2FF9               	goto	l1234
 21844                           
 21845                           ;locked_task.c: 59: locked_locking_leds_idx -= 1;
 21846  2FF5  3001               	movlw	1
 21847  2FF6  02A2               	subwf	_locked_locking_leds_idx^(0+128),f
 21848  2FF7  3000               	movlw	0
 21849  2FF8  3BA3               	subwfb	(_locked_locking_leds_idx+1)^(0+128),f
 21850  2FF9                     l1234:	
 21851                           
 21852                           ;locked_task.c: 60: }
 21853                           ;locked_task.c: 61: return locked_lock_base_leds | leds;
 21854  2FF9  0873               	movf	locked_get_unlock_leds@leds,w
 21855  2FFA  045F               	iorwf	_locked_lock_base_leds^(0+128),w
 21856  2FFB  00F1               	movwf	?_locked_get_unlock_leds
 21857  2FFC  0874               	movf	locked_get_unlock_leds@leds+1,w
 21858  2FFD  0460               	iorwf	(_locked_lock_base_leds+1)^(0+128),w
 21859  2FFE  00F2               	movwf	?_locked_get_unlock_leds+1
 21860  2FFF  0008               	return
 21861  3000                     __end_of_locked_get_unlock_leds:	
 21862                           
 21863                           	psect	text30
 21864  2130                     __ptext30:	
 21865 ;; *************** function _locked_get_lock_leds *****************
 21866 ;; Defined at:
 21867 ;;		line 43 in file "locked_task.c"
 21868 ;; Parameters:    Size  Location     Type
 21869 ;;		None
 21870 ;; Auto vars:     Size  Location     Type
 21871 ;;  leds            2    7[COMMON] unsigned int 
 21872 ;;  size            2    5[COMMON] unsigned int 
 21873 ;; Return value:  Size  Location     Type
 21874 ;;                  2    1[COMMON] unsigned int 
 21875 ;; Registers used:
 21876 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 21877 ;; Tracked objects:
 21878 ;;		On entry : 0/0
 21879 ;;		On exit  : 0/0
 21880 ;;		Unchanged: 0/0
 21881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21882 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21883 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21884 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21885 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21886 ;;Total ram usage:        8 bytes
 21887 ;; Hardware stack levels used:    1
 21888 ;; Hardware stack levels required when called:    4
 21889 ;; This function calls:
 21890 ;;		Nothing
 21891 ;; This function is called by:
 21892 ;;		_locked_Main
 21893 ;; This function uses a non-reentrant model
 21894 ;;
 21895                           
 21896                           
 21897                           ;psect for function _locked_get_lock_leds
 21898  2130                     _locked_get_lock_leds:	
 21899                           
 21900                           ;locked_task.c: 44: u16 size = sizeof(locked_locking_leds) / sizeof(locked_locking_leds[
      +                          0]);
 21901                           
 21902                           ;incstack = 0
 21903                           ; Regs used in _locked_get_lock_leds: [wreg+fsr1l+fsr1h+status,2+status,0]
 21904  2130  3006               	movlw	6
 21905  2131  00F5               	movwf	locked_get_lock_leds@size
 21906  2132  3000               	movlw	0
 21907  2133  00F6               	movwf	locked_get_lock_leds@size+1
 21908                           
 21909                           ;locked_task.c: 45: u16 leds = locked_locking_leds[locked_locking_leds_idx];
 21910  2134  0021               	movlb	1	; select bank1
 21911  2135  3522               	lslf	_locked_locking_leds_idx^(0+128),w
 21912  2136  3EA0               	addlw	(low (_locked_locking_leds| (0+256)))& (0+255)
 21913  2137  0086               	movwf	6
 21914  2138  3001               	movlw	1	; select bank3/4
 21915  2139  0087               	movwf	7
 21916  213A  3F40               	moviw [0]fsr1
 21917  213B  00F7               	movwf	locked_get_lock_leds@leds
 21918  213C  3F41               	moviw [1]fsr1
 21919  213D  00F8               	movwf	locked_get_lock_leds@leds+1
 21920                           
 21921                           ;locked_task.c: 48: if (locked_locking_leds_idx < size - 1){
 21922  213E  0875               	movf	locked_get_lock_leds@size,w
 21923  213F  3EFF               	addlw	255
 21924  2140  00F3               	movwf	??_locked_get_lock_leds
 21925  2141  30FF               	movlw	255
 21926  2142  3D76               	addwfc	locked_get_lock_leds@size+1,w
 21927  2143  00F4               	movwf	??_locked_get_lock_leds+1
 21928  2144  0874               	movf	??_locked_get_lock_leds+1,w
 21929  2145  0223               	subwf	(_locked_locking_leds_idx+1)^(0+128),w
 21930  2146  1D03               	skipz
 21931  2147  294A               	goto	u4795
 21932  2148  0873               	movf	??_locked_get_lock_leds,w
 21933  2149  0222               	subwf	_locked_locking_leds_idx^(0+128),w
 21934  214A                     u4795:	
 21935  214A  1803               	skipnc
 21936  214B  2950               	goto	l1230
 21937                           
 21938                           ;locked_task.c: 49: locked_locking_leds_idx += 1;
 21939  214C  3001               	movlw	1
 21940  214D  07A2               	addwf	_locked_locking_leds_idx^(0+128),f
 21941  214E  3000               	movlw	0
 21942  214F  3DA3               	addwfc	(_locked_locking_leds_idx+1)^(0+128),f
 21943  2150                     l1230:	
 21944                           
 21945                           ;locked_task.c: 50: }
 21946                           ;locked_task.c: 51: return leds;
 21947  2150  0878               	movf	locked_get_lock_leds@leds+1,w
 21948  2151  00F2               	movwf	?_locked_get_lock_leds+1
 21949  2152  0877               	movf	locked_get_lock_leds@leds,w
 21950  2153  00F1               	movwf	?_locked_get_lock_leds
 21951  2154  0008               	return
 21952  2155                     __end_of_locked_get_lock_leds:	
 21953                           
 21954                           	psect	text31
 21955  24BF                     __ptext31:	
 21956 ;; *************** function _locked_clear *****************
 21957 ;; Defined at:
 21958 ;;		line 186 in file "locked_task.c"
 21959 ;; Parameters:    Size  Location     Type
 21960 ;;  data            2   25[BANK0 ] PTR struct t_locked_task
 21961 ;;		 -> secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), 
 21962 ;;		 -> flashy_TaskData(30), NULL(0), 
 21963 ;; Auto vars:     Size  Location     Type
 21964 ;;		None
 21965 ;; Return value:  Size  Location     Type
 21966 ;;                  1    wreg      void 
 21967 ;; Registers used:
 21968 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21969 ;; Tracked objects:
 21970 ;;		On entry : 0/0
 21971 ;;		On exit  : 0/0
 21972 ;;		Unchanged: 0/0
 21973 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21974 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21975 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21976 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21977 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21978 ;;Total ram usage:        2 bytes
 21979 ;; Hardware stack levels used:    1
 21980 ;; Hardware stack levels required when called:   10
 21981 ;; This function calls:
 21982 ;;		_nullifyBadge_segDisplayErase
 21983 ;;		_nullifyBadge_userLedsClr
 21984 ;; This function is called by:
 21985 ;;		_locked_Main
 21986 ;; This function uses a non-reentrant model
 21987 ;;
 21988                           
 21989                           
 21990                           ;psect for function _locked_clear
 21991  24BF                     _locked_clear:	
 21992                           
 21993                           ;locked_task.c: 188: data->delayTickCount = 0;
 21994                           
 21995                           ;incstack = 0
 21996                           ; Regs used in _locked_clear: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 21997  24BF  0020               	movlb	0	; select bank0
 21998  24C0  0839               	movf	locked_clear@data,w
 21999  24C1  0086               	movwf	6
 22000  24C2  083A               	movf	locked_clear@data+1,w
 22001  24C3  0087               	movwf	7
 22002  24C4  3141               	addfsr 1,1
 22003  24C5  3000               	movlw	0
 22004  24C6  3FC0               	movwi [0]fsr1
 22005  24C7  3FC1               	movwi [1]fsr1
 22006                           
 22007                           ;locked_task.c: 189: data->holdCountA = 0;
 22008  24C8  0839               	movf	locked_clear@data,w
 22009  24C9  0086               	movwf	6
 22010  24CA  083A               	movf	locked_clear@data+1,w
 22011  24CB  0087               	movwf	7
 22012  24CC  3143               	addfsr 1,3
 22013  24CD  3000               	movlw	0
 22014  24CE  3FC0               	movwi [0]fsr1
 22015  24CF  3FC1               	movwi [1]fsr1
 22016                           
 22017                           ;locked_task.c: 190: data->holdCountB = 0;
 22018  24D0  0839               	movf	locked_clear@data,w
 22019  24D1  0086               	movwf	6
 22020  24D2  083A               	movf	locked_clear@data+1,w
 22021  24D3  0087               	movwf	7
 22022  24D4  3145               	addfsr 1,5
 22023  24D5  3000               	movlw	0
 22024  24D6  3FC0               	movwi [0]fsr1
 22025  24D7  3FC1               	movwi [1]fsr1
 22026                           
 22027                           ;locked_task.c: 191: data->holdCountX = 0;
 22028  24D8  0839               	movf	locked_clear@data,w
 22029  24D9  0086               	movwf	6
 22030  24DA  083A               	movf	locked_clear@data+1,w
 22031  24DB  0087               	movwf	7
 22032  24DC  3147               	addfsr 1,7
 22033  24DD  3000               	movlw	0
 22034  24DE  3FC0               	movwi [0]fsr1
 22035  24DF  3FC1               	movwi [1]fsr1
 22036                           
 22037                           ;locked_task.c: 192: data->holdCountY = 0;
 22038  24E0  0839               	movf	locked_clear@data,w
 22039  24E1  0086               	movwf	6
 22040  24E2  083A               	movf	locked_clear@data+1,w
 22041  24E3  0087               	movwf	7
 22042  24E4  3149               	addfsr 1,9
 22043  24E5  3000               	movlw	0
 22044  24E6  3FC0               	movwi [0]fsr1
 22045  24E7  3FC1               	movwi [1]fsr1
 22046                           
 22047                           ;locked_task.c: 193: data->noholdCount = 0;
 22048  24E8  0839               	movf	locked_clear@data,w
 22049  24E9  0086               	movwf	6
 22050  24EA  083A               	movf	locked_clear@data+1,w
 22051  24EB  0087               	movwf	7
 22052  24EC  314B               	addfsr 1,11
 22053  24ED  3000               	movlw	0
 22054  24EE  3FC0               	movwi [0]fsr1
 22055  24EF  3FC1               	movwi [1]fsr1
 22056                           
 22057                           ;locked_task.c: 196: nullifyBadge_userLedsClr(data->badge);
 22058  24F0  0839               	movf	locked_clear@data,w
 22059  24F1  0086               	movwf	6
 22060  24F2  083A               	movf	locked_clear@data+1,w
 22061  24F3  0087               	movwf	7
 22062  24F4  0801               	movf	1,w
 22063  24F5  31AE  260F  31A4   	fcall	_nullifyBadge_userLedsClr
 22064                           
 22065                           ;locked_task.c: 197: nullifyBadge_segDisplayErase(data->badge);
 22066  24F8  0020               	movlb	0	; select bank0
 22067  24F9  0839               	movf	locked_clear@data,w
 22068  24FA  0086               	movwf	6
 22069  24FB  083A               	movf	locked_clear@data+1,w
 22070  24FC  0087               	movwf	7
 22071  24FD  0801               	movf	1,w
 22072  24FE  31AE  2609         	fcall	_nullifyBadge_segDisplayErase
 22073  2500  0008               	return
 22074  2501                     __end_of_locked_clear:	
 22075                           
 22076                           	psect	text32
 22077  2E0F                     __ptext32:	
 22078 ;; *************** function _nullifyBadge_userLedsClr *****************
 22079 ;; Defined at:
 22080 ;;		line 177 in file "nullifyBadge.c"
 22081 ;; Parameters:    Size  Location     Type
 22082 ;;  badge           1    wreg     PTR struct t_nullifyBadg
 22083 ;;		 -> badge_inst(18), 
 22084 ;; Auto vars:     Size  Location     Type
 22085 ;;  badge           1   11[BANK0 ] PTR struct t_nullifyBadg
 22086 ;;		 -> badge_inst(18), 
 22087 ;; Return value:  Size  Location     Type
 22088 ;;                  1    wreg      void 
 22089 ;; Registers used:
 22090 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 22091 ;; Tracked objects:
 22092 ;;		On entry : 0/0
 22093 ;;		On exit  : 0/0
 22094 ;;		Unchanged: 0/0
 22095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22096 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22097 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22098 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22099 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22100 ;;Total ram usage:        1 bytes
 22101 ;; Hardware stack levels used:    1
 22102 ;; Hardware stack levels required when called:    8
 22103 ;; This function calls:
 22104 ;;		_displayL2_ClrUserLeds
 22105 ;; This function is called by:
 22106 ;;		_menu_Init
 22107 ;;		_menu_clear
 22108 ;;		_menu_Exit
 22109 ;;		_flashy_Init
 22110 ;;		_flashy_Exit
 22111 ;;		_locked_Init
 22112 ;;		_locked_clear
 22113 ;;		_locked_Exit
 22114 ;;		_secret_Init
 22115 ;;		_secret_Exit
 22116 ;;		_slot_Init
 22117 ;;		_slot_Exit
 22118 ;; This function uses a non-reentrant model
 22119 ;;
 22120                           
 22121                           
 22122                           ;psect for function _nullifyBadge_userLedsClr
 22123  2E0F                     _nullifyBadge_userLedsClr:	
 22124                           
 22125                           ;incstack = 0
 22126                           ; Regs used in _nullifyBadge_userLedsClr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 22127                           ;nullifyBadge_userLedsClr@badge stored from wreg
 22128  2E0F  0020               	movlb	0	; select bank0
 22129  2E10  00AB               	movwf	nullifyBadge_userLedsClr@badge
 22130                           
 22131                           ;nullifyBadge.c: 178: displayL2_ClrUserLeds(&badge->display);
 22132  2E11  082B               	movf	nullifyBadge_userLedsClr@badge,w
 22133  2E12  31AE  26CB         	fcall	_displayL2_ClrUserLeds
 22134  2E14  0008               	return
 22135  2E15                     __end_of_nullifyBadge_userLedsClr:	
 22136                           
 22137                           	psect	text33
 22138  2ECB                     __ptext33:	
 22139 ;; *************** function _displayL2_ClrUserLeds *****************
 22140 ;; Defined at:
 22141 ;;		line 94 in file "nullifyBadge_displayL2.c"
 22142 ;; Parameters:    Size  Location     Type
 22143 ;;  display         1    wreg     PTR struct t_nullifyDisp
 22144 ;;		 -> badge_inst(18), 
 22145 ;; Auto vars:     Size  Location     Type
 22146 ;;  display         1   11[COMMON] PTR struct t_nullifyDisp
 22147 ;;		 -> badge_inst(18), 
 22148 ;; Return value:  Size  Location     Type
 22149 ;;                  1    wreg      void 
 22150 ;; Registers used:
 22151 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 22152 ;; Tracked objects:
 22153 ;;		On entry : 0/0
 22154 ;;		On exit  : 0/0
 22155 ;;		Unchanged: 0/0
 22156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22157 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22158 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22159 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22160 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22161 ;;Total ram usage:        1 bytes
 22162 ;; Hardware stack levels used:    1
 22163 ;; Hardware stack levels required when called:    7
 22164 ;; This function calls:
 22165 ;;		_displayL1_SetUserLed
 22166 ;;		_displayL1_Update
 22167 ;; This function is called by:
 22168 ;;		_nullifyBadge_userLedsClr
 22169 ;; This function uses a non-reentrant model
 22170 ;;
 22171                           
 22172                           
 22173                           ;psect for function _displayL2_ClrUserLeds
 22174  2ECB                     _displayL2_ClrUserLeds:	
 22175                           
 22176                           ;incstack = 0
 22177                           ; Regs used in _displayL2_ClrUserLeds: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 22178                           ;displayL2_ClrUserLeds@display stored from wreg
 22179  2ECB  00FB               	movwf	displayL2_ClrUserLeds@display
 22180                           
 22181                           ;nullifyBadge_displayL2.c: 95: displayL1_SetUserLed(&display->display_l1, 0);
 22182  2ECC  3000               	movlw	0
 22183  2ECD  00F1               	movwf	displayL1_SetUserLed@userLedVect
 22184  2ECE  00F2               	movwf	displayL1_SetUserLed@userLedVect+1
 22185  2ECF  087B               	movf	displayL2_ClrUserLeds@display,w
 22186  2ED0  3E07               	addlw	7
 22187  2ED1  31AF  272B  31AE   	fcall	_displayL1_SetUserLed
 22188                           
 22189                           ;nullifyBadge_displayL2.c: 96: displayL1_Update(&display->display_l1);
 22190  2ED4  087B               	movf	displayL2_ClrUserLeds@display,w
 22191  2ED5  3E07               	addlw	7
 22192  2ED6  31AE  26F8         	fcall	_displayL1_Update
 22193  2ED8  0008               	return
 22194  2ED9                     __end_of_displayL2_ClrUserLeds:	
 22195                           
 22196                           	psect	text34
 22197  2E09                     __ptext34:	
 22198 ;; *************** function _nullifyBadge_segDisplayErase *****************
 22199 ;; Defined at:
 22200 ;;		line 123 in file "nullifyBadge.c"
 22201 ;; Parameters:    Size  Location     Type
 22202 ;;  badge           1    wreg     PTR struct t_nullifyBadg
 22203 ;;		 -> badge_inst(18), 
 22204 ;; Auto vars:     Size  Location     Type
 22205 ;;  badge           1   24[BANK0 ] PTR struct t_nullifyBadg
 22206 ;;		 -> badge_inst(18), 
 22207 ;; Return value:  Size  Location     Type
 22208 ;;                  1    wreg      void 
 22209 ;; Registers used:
 22210 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 22211 ;; Tracked objects:
 22212 ;;		On entry : 0/0
 22213 ;;		On exit  : 0/0
 22214 ;;		Unchanged: 0/0
 22215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22217 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22218 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22219 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22220 ;;Total ram usage:        1 bytes
 22221 ;; Hardware stack levels used:    1
 22222 ;; Hardware stack levels required when called:    9
 22223 ;; This function calls:
 22224 ;;		_displayL2_EraseSegDisplay
 22225 ;; This function is called by:
 22226 ;;		_menu_Init
 22227 ;;		_menu_clear
 22228 ;;		_menu_Exit
 22229 ;;		_flashy_Init
 22230 ;;		_flashy_Exit
 22231 ;;		_locked_Init
 22232 ;;		_locked_clear
 22233 ;;		_locked_Exit
 22234 ;;		_secret_Init
 22235 ;;		_secret_Exit
 22236 ;;		_slot_Init
 22237 ;;		_slot_Exit
 22238 ;;		_fadeDisplay_Init
 22239 ;;		_fadeDisplay_Exit
 22240 ;; This function uses a non-reentrant model
 22241 ;;
 22242                           
 22243                           
 22244                           ;psect for function _nullifyBadge_segDisplayErase
 22245  2E09                     _nullifyBadge_segDisplayErase:	
 22246                           
 22247                           ;incstack = 0
 22248                           ; Regs used in _nullifyBadge_segDisplayErase: [wreg-fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 22249                           ;nullifyBadge_segDisplayErase@badge stored from wreg
 22250  2E09  0020               	movlb	0	; select bank0
 22251  2E0A  00B8               	movwf	nullifyBadge_segDisplayErase@badge
 22252                           
 22253                           ;nullifyBadge.c: 124: displayL2_EraseSegDisplay(&badge->display);
 22254  2E0B  0838               	movf	nullifyBadge_segDisplayErase@badge,w
 22255  2E0C  31AE  26E8         	fcall	_displayL2_EraseSegDisplay
 22256  2E0E  0008               	return
 22257  2E0F                     __end_of_nullifyBadge_segDisplayErase:	
 22258                           
 22259                           	psect	text35
 22260  2EE8                     __ptext35:	
 22261 ;; *************** function _displayL2_EraseSegDisplay *****************
 22262 ;; Defined at:
 22263 ;;		line 83 in file "nullifyBadge_displayL2.c"
 22264 ;; Parameters:    Size  Location     Type
 22265 ;;  display         1    wreg     PTR struct t_nullifyDisp
 22266 ;;		 -> badge_inst(18), 
 22267 ;; Auto vars:     Size  Location     Type
 22268 ;;  display         1   23[BANK0 ] PTR struct t_nullifyDisp
 22269 ;;		 -> badge_inst(18), 
 22270 ;; Return value:  Size  Location     Type
 22271 ;;                  1    wreg      void 
 22272 ;; Registers used:
 22273 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 22274 ;; Tracked objects:
 22275 ;;		On entry : 0/0
 22276 ;;		On exit  : 0/0
 22277 ;;		Unchanged: 0/0
 22278 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22279 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22280 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22281 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22282 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22283 ;;Total ram usage:        1 bytes
 22284 ;; Hardware stack levels used:    1
 22285 ;; Hardware stack levels required when called:    8
 22286 ;; This function calls:
 22287 ;;		_displayL1_Update
 22288 ;;		_displayL2_PutStr
 22289 ;; This function is called by:
 22290 ;;		_nullifyBadge_segDisplayErase
 22291 ;; This function uses a non-reentrant model
 22292 ;;
 22293                           
 22294                           
 22295                           ;psect for function _displayL2_EraseSegDisplay
 22296  2EE8                     _displayL2_EraseSegDisplay:	
 22297                           
 22298                           ;incstack = 0
 22299                           ; Regs used in _displayL2_EraseSegDisplay: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 22300                           ;displayL2_EraseSegDisplay@display stored from wreg
 22301  2EE8  0020               	movlb	0	; select bank0
 22302  2EE9  00B7               	movwf	displayL2_EraseSegDisplay@display
 22303                           
 22304                           ;nullifyBadge_displayL2.c: 84: displayL2_PutStr(display, "    ");
 22305  2EEA  3058               	movlw	low ((STR_22+35)| (0+32768))
 22306  2EEB  00B0               	movwf	displayL2_PutStr@str
 22307  2EEC  30A8               	movlw	high ((STR_22+35)| (0+32768))
 22308  2EED  00B1               	movwf	displayL2_PutStr@str+1
 22309  2EEE  0837               	movf	displayL2_EraseSegDisplay@display,w
 22310  2EEF  31A1  21CA  31AE   	fcall	_displayL2_PutStr
 22311                           
 22312                           ;nullifyBadge_displayL2.c: 85: displayL1_Update(&display->display_l1);
 22313  2EF2  0020               	movlb	0	; select bank0
 22314  2EF3  0837               	movf	displayL2_EraseSegDisplay@display,w
 22315  2EF4  3E07               	addlw	7
 22316  2EF5  31AE  26F8         	fcall	_displayL1_Update
 22317  2EF7  0008               	return
 22318  2EF8                     __end_of_displayL2_EraseSegDisplay:	
 22319                           
 22320                           	psect	text36
 22321  125F                     __ptext36:	
 22322 ;; *************** function _sprintf *****************
 22323 ;; Defined at:
 22324 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\doprnt.c"
 22325 ;; Parameters:    Size  Location     Type
 22326 ;;  sp              2   15[BANK0 ] PTR unsigned char 
 22327 ;;		 -> flashy_Main@hit_counter(6), secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), 
 22328 ;;		 -> menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 22329 ;;  f               2   17[BANK0 ] PTR const unsigned char 
 22330 ;;		 -> STR_53(3), STR_52(9), STR_51(9), STR_50(9), 
 22331 ;;		 -> STR_49(9), STR_48(9), STR_25(4), 
 22332 ;; Auto vars:     Size  Location     Type
 22333 ;;  tmpval          4    0        struct .
 22334 ;;  width           2   40[BANK0 ] int 
 22335 ;;  len             2   38[BANK0 ] unsigned int 
 22336 ;;  val             2   36[BANK0 ] unsigned int 
 22337 ;;  cp              2   33[BANK0 ] PTR const unsigned char 
 22338 ;;		 -> STR_54(7), sprintf@c(1), STR_47(9), STR_46(13), 
 22339 ;;		 -> STR_45(12), STR_44(8), STR_43(11), STR_42(11), 
 22340 ;;		 -> STR_41(9), STR_40(8), STR_39(8), 
 22341 ;;  c               1   42[BANK0 ] char 
 22342 ;;  ap              1   35[BANK0 ] PTR void [1]
 22343 ;;		 -> ?_sprintf(2), 
 22344 ;;  flag            1   32[BANK0 ] unsigned char 
 22345 ;;  prec            1   31[BANK0 ] char 
 22346 ;; Return value:  Size  Location     Type
 22347 ;;                  2   15[BANK0 ] int 
 22348 ;; Registers used:
 22349 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 22350 ;; Tracked objects:
 22351 ;;		On entry : 0/0
 22352 ;;		On exit  : 0/0
 22353 ;;		Unchanged: 0/0
 22354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22355 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22356 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22357 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22358 ;;      Totals:         0      28       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22359 ;;Total ram usage:       28 bytes
 22360 ;; Hardware stack levels used:    1
 22361 ;; Hardware stack levels required when called:    5
 22362 ;; This function calls:
 22363 ;;		___lwdiv
 22364 ;;		___lwmod
 22365 ;;		___wmul
 22366 ;;		_isdigit
 22367 ;; This function is called by:
 22368 ;;		_flashy_Main
 22369 ;;		_slot_Main
 22370 ;; This function uses a non-reentrant model
 22371 ;;
 22372                           
 22373                           
 22374                           ;psect for function _sprintf
 22375  125F                     _sprintf:	
 22376                           
 22377                           ;doprnt.c: 494: va_list ap;
 22378                           ;doprnt.c: 499: signed char c;
 22379                           ;doprnt.c: 501: int width;
 22380                           ;doprnt.c: 506: signed char prec;
 22381                           ;doprnt.c: 508: unsigned char flag;
 22382                           ;doprnt.c: 523: union {
 22383                           ;doprnt.c: 524: unsigned long vd;
 22384                           ;doprnt.c: 525: double integ;
 22385                           ;doprnt.c: 526: } tmpval;
 22386                           ;doprnt.c: 528: unsigned int val;
 22387                           ;doprnt.c: 529: unsigned len;
 22388                           ;doprnt.c: 530: const char * cp;
 22389                           ;doprnt.c: 533: *ap = __va_start();
 22390                           
 22391                           ;incstack = 0
 22392                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 22393  125F  3033               	movlw	(low ((?_sprintf| 0+4)))& (0+255)
 22394  1260  0020               	movlb	0	; select bank0
 22395  1261  00BB               	movwf	??_sprintf
 22396  1262  083B               	movf	??_sprintf,w
 22397  1263  00C3               	movwf	sprintf@ap
 22398  1264                     l7500:	
 22399                           ;doprnt.c: 536: while(c = *f++) {
 22400                           
 22401  1264  0832               	movf	sprintf@f+1,w
 22402  1265  00BC               	movwf	??_sprintf+1
 22403  1266  0831               	movf	sprintf@f,w
 22404  1267  00BB               	movwf	??_sprintf
 22405  1268  0AB1               	incf	sprintf@f,f
 22406  1269  1903               	skipnz
 22407  126A  0AB2               	incf	sprintf@f+1,f
 22408  126B  083B               	movf	??_sprintf,w
 22409  126C  0084               	movwf	4
 22410  126D  083C               	movf	??_sprintf+1,w
 22411  126E  0085               	movwf	5
 22412  126F  0800               	movf	0,w	;code access
 22413  1270  00BD               	movwf	??_sprintf+2
 22414  1271  083D               	movf	??_sprintf+2,w
 22415  1272  00CA               	movwf	sprintf@c
 22416  1273  084A               	movf	sprintf@c,w
 22417  1274  1903               	btfsc	3,2
 22418  1275  2C25               	goto	l7502
 22419                           
 22420                           ;doprnt.c: 538: if(c != '%')
 22421  1276  3025               	movlw	37
 22422  1277  064A               	xorwf	sprintf@c,w
 22423  1278  1903               	btfsc	3,2
 22424  1279  2A85               	goto	l7384
 22425                           
 22426                           ;doprnt.c: 540: {
 22427                           ;doprnt.c: 541: ((*sp++ = (c)));
 22428  127A  082F               	movf	sprintf@sp,w
 22429  127B  0086               	movwf	6
 22430  127C  0830               	movf	sprintf@sp+1,w
 22431  127D  0087               	movwf	7
 22432  127E  084A               	movf	sprintf@c,w
 22433  127F  0081               	movwf	1
 22434  1280  3001               	movlw	1
 22435  1281  07AF               	addwf	sprintf@sp,f
 22436  1282  3000               	movlw	0
 22437  1283  3DB0               	addwfc	sprintf@sp+1,f
 22438                           
 22439                           ;doprnt.c: 542: continue;
 22440  1284  2A64               	goto	l7500
 22441  1285                     l7384:	
 22442                           
 22443                           ;doprnt.c: 543: }
 22444                           ;doprnt.c: 546: width = 0;
 22445  1285  01C8               	clrf	sprintf@width
 22446  1286  01C9               	clrf	sprintf@width+1
 22447                           
 22448                           ;doprnt.c: 548: flag = 0;
 22449  1287  01C0               	clrf	sprintf@flag
 22450                           
 22451                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 22452  1288  0831               	movf	sprintf@f,w
 22453  1289  0084               	movwf	4
 22454  128A  0832               	movf	sprintf@f+1,w
 22455  128B  0085               	movwf	5
 22456  128C  0800               	movf	0,w	;code access
 22457  128D  31AE  26BD  3192   	fcall	_isdigit
 22458  1290  1C03               	btfss	3,0
 22459  1291  2B3E               	goto	l7442
 22460                           
 22461                           ;doprnt.c: 598: width = 0;
 22462  1292  0020               	movlb	0	; select bank0
 22463  1293  01C8               	clrf	sprintf@width
 22464  1294  01C9               	clrf	sprintf@width+1
 22465  1295                     l7390:	
 22466                           ;doprnt.c: 599: do {
 22467                           
 22468                           
 22469                           ;doprnt.c: 600: width *= 10;
 22470  1295  300A               	movlw	10
 22471  1296  00F1               	movwf	___wmul@multiplier
 22472  1297  3000               	movlw	0
 22473  1298  00F2               	movwf	___wmul@multiplier+1
 22474  1299  0020               	movlb	0	; select bank0
 22475  129A  0849               	movf	sprintf@width+1,w
 22476  129B  00F4               	movwf	___wmul@multiplicand+1
 22477  129C  0848               	movf	sprintf@width,w
 22478  129D  00F3               	movwf	___wmul@multiplicand
 22479  129E  31A0  200F  3192   	fcall	___wmul
 22480  12A1  0872               	movf	?___wmul+1,w
 22481  12A2  0020               	movlb	0	; select bank0
 22482  12A3  00C9               	movwf	sprintf@width+1
 22483  12A4  0871               	movf	?___wmul,w
 22484  12A5  00C8               	movwf	sprintf@width
 22485                           
 22486                           ;doprnt.c: 601: width += *f++ - '0';
 22487  12A6  0831               	movf	sprintf@f,w
 22488  12A7  0084               	movwf	4
 22489  12A8  0832               	movf	sprintf@f+1,w
 22490  12A9  0085               	movwf	5
 22491  12AA  0800               	movf	0,w	;code access
 22492  12AB  3ED0               	addlw	208
 22493  12AC  00BB               	movwf	??_sprintf
 22494  12AD  30FF               	movlw	255
 22495  12AE  1803               	skipnc
 22496  12AF  3000               	movlw	0
 22497  12B0  00BC               	movwf	??_sprintf+1
 22498  12B1  083B               	movf	??_sprintf,w
 22499  12B2  07C8               	addwf	sprintf@width,f
 22500  12B3  083C               	movf	??_sprintf+1,w
 22501  12B4  3DC9               	addwfc	sprintf@width+1,f
 22502  12B5  3001               	movlw	1
 22503  12B6  07B1               	addwf	sprintf@f,f
 22504  12B7  3000               	movlw	0
 22505  12B8  3DB2               	addwfc	sprintf@f+1,f
 22506                           
 22507                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 22508  12B9  0831               	movf	sprintf@f,w
 22509  12BA  0084               	movwf	4
 22510  12BB  0832               	movf	sprintf@f+1,w
 22511  12BC  0085               	movwf	5
 22512  12BD  0800               	movf	0,w	;code access
 22513  12BE  31AE  26BD  3192   	fcall	_isdigit
 22514  12C1  1C03               	btfss	3,0
 22515  12C2  2B3E               	goto	l7442
 22516  12C3  2A95               	goto	l7390
 22517  12C4                     l7398:	
 22518                           ;doprnt.c: 728: case 's':
 22519                           
 22520                           ;doprnt.c: 698: case 'i':
 22521                           ;doprnt.c: 699: break;
 22522                           
 22523                           ;doprnt.c: 697: case 'd':
 22524                           
 22525                           ;doprnt.c: 638: goto alldone;
 22526                           
 22527                           ;doprnt.c: 637: case 0:
 22528                           
 22529                           ;doprnt.c: 608: }
 22530                           ;doprnt.c: 635: switch(c = *f++) {
 22531                           
 22532                           
 22533                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 22534  12C4  0020               	movlb	0	; select bank0
 22535  12C5  0843               	movf	sprintf@ap,w
 22536  12C6  0086               	movwf	6
 22537  12C7  0187               	clrf	7
 22538  12C8  3F40               	moviw [0]fsr1
 22539  12C9  00C1               	movwf	sprintf@cp
 22540  12CA  3F41               	moviw [1]fsr1
 22541  12CB  00C2               	movwf	sprintf@cp+1
 22542  12CC  3002               	movlw	2
 22543  12CD  00BB               	movwf	??_sprintf
 22544  12CE  083B               	movf	??_sprintf,w
 22545  12CF  07C3               	addwf	sprintf@ap,f
 22546                           
 22547                           ;doprnt.c: 740: if(!cp)
 22548  12D0  0841               	movf	sprintf@cp,w
 22549  12D1  0442               	iorwf	sprintf@cp+1,w
 22550  12D2  1D03               	btfss	3,2
 22551  12D3  2AD8               	goto	l7406
 22552                           
 22553                           ;doprnt.c: 741: cp = "(null)";
 22554  12D4  30DA               	movlw	low (STR_54| (0+32768))
 22555  12D5  00C1               	movwf	sprintf@cp
 22556  12D6  30B0               	movlw	high (STR_54| (0+32768))
 22557  12D7  00C2               	movwf	sprintf@cp+1
 22558  12D8                     l7406:	
 22559                           
 22560                           ;doprnt.c: 745: len = 0;
 22561  12D8  01C6               	clrf	sprintf@len
 22562  12D9  01C7               	clrf	sprintf@len+1
 22563  12DA                     l7410:	
 22564                           ;doprnt.c: 746: while(cp[len])
 22565                           
 22566  12DA  0841               	movf	sprintf@cp,w
 22567  12DB  0746               	addwf	sprintf@len,w
 22568  12DC  0084               	movwf	4
 22569  12DD  0842               	movf	sprintf@cp+1,w
 22570  12DE  3D47               	addwfc	sprintf@len+1,w
 22571  12DF  0085               	movwf	5
 22572  12E0  0012               	moviw fsr0++
 22573  12E1  1903               	btfsc	3,2
 22574  12E2  2AE8               	goto	l7412
 22575                           
 22576                           ;doprnt.c: 747: len++;
 22577  12E3  3001               	movlw	1
 22578  12E4  07C6               	addwf	sprintf@len,f
 22579  12E5  3000               	movlw	0
 22580  12E6  3DC7               	addwfc	sprintf@len+1,f
 22581  12E7  2ADA               	goto	l7410
 22582  12E8                     l7412:	
 22583                           ;doprnt.c: 750: dostring:
 22584                           
 22585                           
 22586                           ;doprnt.c: 757: if(width > len)
 22587  12E8  0849               	movf	sprintf@width+1,w
 22588  12E9  0247               	subwf	sprintf@len+1,w
 22589  12EA  1D03               	skipz
 22590  12EB  2AEE               	goto	u4645
 22591  12EC  0848               	movf	sprintf@width,w
 22592  12ED  0246               	subwf	sprintf@len,w
 22593  12EE                     u4645:	
 22594  12EE  1803               	skipnc
 22595  12EF  2AF5               	goto	l7416
 22596                           
 22597                           ;doprnt.c: 758: width -= len;
 22598  12F0  0846               	movf	sprintf@len,w
 22599  12F1  02C8               	subwf	sprintf@width,f
 22600  12F2  0847               	movf	sprintf@len+1,w
 22601  12F3  3BC9               	subwfb	sprintf@width+1,f
 22602  12F4  2AF7               	goto	l7422
 22603  12F5                     l7416:	
 22604                           
 22605                           ;doprnt.c: 759: else
 22606                           ;doprnt.c: 760: width = 0;
 22607  12F5  01C8               	clrf	sprintf@width
 22608  12F6  01C9               	clrf	sprintf@width+1
 22609  12F7                     l7422:	
 22610                           ;doprnt.c: 764: while(width--)
 22611                           
 22612  12F7  30FF               	movlw	255
 22613  12F8  07C8               	addwf	sprintf@width,f
 22614  12F9  30FF               	movlw	255
 22615  12FA  3DC9               	addwfc	sprintf@width+1,f
 22616  12FB  0A48               	incf	sprintf@width,w
 22617  12FC  1903               	btfsc	3,2
 22618  12FD  0A49               	incf	sprintf@width+1,w
 22619  12FE  1903               	btfsc	3,2
 22620  12FF  2B1F               	goto	l7430
 22621                           
 22622                           ;doprnt.c: 765: ((*sp++ = (' ')));
 22623  1300  082F               	movf	sprintf@sp,w
 22624  1301  0086               	movwf	6
 22625  1302  0830               	movf	sprintf@sp+1,w
 22626  1303  0087               	movwf	7
 22627  1304  3020               	movlw	32
 22628  1305  0081               	movwf	1
 22629  1306  3001               	movlw	1
 22630  1307  07AF               	addwf	sprintf@sp,f
 22631  1308  3000               	movlw	0
 22632  1309  3DB0               	addwfc	sprintf@sp+1,f
 22633  130A  2AF7               	goto	l7422
 22634  130B                     l7424:	
 22635                           ;doprnt.c: 767: while(len--)
 22636                           
 22637                           
 22638                           ;doprnt.c: 768: ((*sp++ = (*cp++)));
 22639  130B  0841               	movf	sprintf@cp,w
 22640  130C  0084               	movwf	4
 22641  130D  0842               	movf	sprintf@cp+1,w
 22642  130E  0085               	movwf	5
 22643  130F  0800               	movf	0,w	;code access
 22644  1310  00BB               	movwf	??_sprintf
 22645  1311  082F               	movf	sprintf@sp,w
 22646  1312  0086               	movwf	6
 22647  1313  0830               	movf	sprintf@sp+1,w
 22648  1314  0087               	movwf	7
 22649  1315  083B               	movf	??_sprintf,w
 22650  1316  0081               	movwf	1
 22651  1317  3001               	movlw	1
 22652  1318  07C1               	addwf	sprintf@cp,f
 22653  1319  3000               	movlw	0
 22654  131A  3DC2               	addwfc	sprintf@cp+1,f
 22655  131B  3001               	movlw	1
 22656  131C  07AF               	addwf	sprintf@sp,f
 22657  131D  3000               	movlw	0
 22658  131E  3DB0               	addwfc	sprintf@sp+1,f
 22659  131F                     l7430:	
 22660  131F  3001               	movlw	1
 22661  1320  02C6               	subwf	sprintf@len,f
 22662  1321  3000               	movlw	0
 22663  1322  3BC7               	subwfb	sprintf@len+1,f
 22664  1323  0A46               	incf	sprintf@len,w
 22665  1324  1D03               	skipz
 22666  1325  2B0B               	goto	l7424
 22667  1326  0A47               	incf	sprintf@len+1,w
 22668  1327  1903               	btfsc	3,2
 22669  1328  2A64               	goto	l7500
 22670  1329  2B0B               	goto	l7424
 22671  132A                     l7432:	
 22672                           ;doprnt.c: 784: case 'c':
 22673                           
 22674                           ;doprnt.c: 774: continue;
 22675                           
 22676                           
 22677                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 22678  132A  0843               	movf	sprintf@ap,w
 22679  132B  0086               	movwf	6
 22680  132C  0187               	clrf	7
 22681  132D  0801               	movf	1,w
 22682  132E  00BB               	movwf	??_sprintf
 22683  132F  083B               	movf	??_sprintf,w
 22684  1330  00CA               	movwf	sprintf@c
 22685  1331  3002               	movlw	2
 22686  1332  00BB               	movwf	??_sprintf
 22687  1333  083B               	movf	??_sprintf,w
 22688  1334  07C3               	addwf	sprintf@ap,f
 22689  1335                     l7436:	
 22690                           ;doprnt.c: 802: default:
 22691                           
 22692                           
 22693                           ;doprnt.c: 805: cp = (char *)&c;
 22694  1335  304A               	movlw	low sprintf@c
 22695  1336  00C1               	movwf	sprintf@cp
 22696  1337  3000               	movlw	high sprintf@c
 22697  1338  00C2               	movwf	sprintf@cp+1
 22698                           
 22699                           ;doprnt.c: 806: len = 1;
 22700  1339  3001               	movlw	1
 22701  133A  00C6               	movwf	sprintf@len
 22702  133B  3000               	movlw	0
 22703  133C  00C7               	movwf	sprintf@len+1
 22704                           
 22705                           ;doprnt.c: 807: goto dostring;
 22706  133D  2AE8               	goto	l7412
 22707  133E                     l7442:	
 22708                           ;doprnt.c: 822: }
 22709                           
 22710  133E  0020               	movlb	0	; select bank0
 22711  133F  0832               	movf	sprintf@f+1,w
 22712  1340  00BC               	movwf	??_sprintf+1
 22713  1341  0831               	movf	sprintf@f,w
 22714  1342  00BB               	movwf	??_sprintf
 22715  1343  0AB1               	incf	sprintf@f,f
 22716  1344  1903               	skipnz
 22717  1345  0AB2               	incf	sprintf@f+1,f
 22718  1346  083B               	movf	??_sprintf,w
 22719  1347  0084               	movwf	4
 22720  1348  083C               	movf	??_sprintf+1,w
 22721  1349  0085               	movwf	5
 22722  134A  0800               	movf	0,w	;code access
 22723  134B  00CA               	movwf	sprintf@c
 22724                           
 22725                           ; Switch size 1, requested type "space"
 22726                           ; Number of cases is 5, Range of values is 0 to 115
 22727                           ; switch strategies available:
 22728                           ; Name         Instructions Cycles
 22729                           ; simple_byte           16     9 (average)
 22730                           ; direct_byte          238     6 (fixed)
 22731                           ; jumptable            260     6 (fixed)
 22732                           ;	Chosen strategy is simple_byte
 22733  134C  3A00               	xorlw	0	; case 0
 22734  134D  1903               	skipnz
 22735  134E  2C25               	goto	l7502
 22736  134F  3A63               	xorlw	99	; case 99
 22737  1350  1903               	skipnz
 22738  1351  2B2A               	goto	l7432
 22739  1352  3A07               	xorlw	7	; case 100
 22740  1353  1903               	skipnz
 22741  1354  2B5C               	goto	l7444
 22742  1355  3A0D               	xorlw	13	; case 105
 22743  1356  1903               	skipnz
 22744  1357  2B5C               	goto	l7444
 22745  1358  3A1A               	xorlw	26	; case 115
 22746  1359  1903               	skipnz
 22747  135A  2AC4               	goto	l7398
 22748  135B  2B35               	goto	l7436
 22749  135C                     l7444:	
 22750                           
 22751                           ;doprnt.c: 1253: {
 22752                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 22753  135C  0020               	movlb	0	; select bank0
 22754  135D  0843               	movf	sprintf@ap,w
 22755  135E  0086               	movwf	6
 22756  135F  0187               	clrf	7
 22757  1360  3F40               	moviw [0]fsr1
 22758  1361  00C4               	movwf	sprintf@val
 22759  1362  3F41               	moviw [1]fsr1
 22760  1363  00C5               	movwf	sprintf@val+1
 22761  1364  3002               	movlw	2
 22762  1365  00BB               	movwf	??_sprintf
 22763  1366  083B               	movf	??_sprintf,w
 22764  1367  07C3               	addwf	sprintf@ap,f
 22765                           
 22766                           ;doprnt.c: 1261: if((int)val < 0) {
 22767  1368  1FC5               	btfss	sprintf@val+1,7
 22768  1369  2B73               	goto	l7454
 22769                           
 22770                           ;doprnt.c: 1262: flag |= 0x03;
 22771  136A  3003               	movlw	3
 22772  136B  00BB               	movwf	??_sprintf
 22773  136C  083B               	movf	??_sprintf,w
 22774  136D  04C0               	iorwf	sprintf@flag,f
 22775                           
 22776                           ;doprnt.c: 1263: val = -val;
 22777  136E  09C4               	comf	sprintf@val,f
 22778  136F  09C5               	comf	sprintf@val+1,f
 22779  1370  0AC4               	incf	sprintf@val,f
 22780  1371  1903               	skipnz
 22781  1372  0AC5               	incf	sprintf@val+1,f
 22782  1373                     l7454:	
 22783                           
 22784                           ;doprnt.c: 1264: }
 22785                           ;doprnt.c: 1266: }
 22786                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 22787  1373  01CA               	clrf	sprintf@c
 22788  1374  0ACA               	incf	sprintf@c,f
 22789  1375  3005               	movlw	5
 22790  1376  064A               	xorwf	sprintf@c,w
 22791  1377  1903               	btfsc	3,2
 22792  1378  2B98               	goto	l7466
 22793  1379                     l7460:	
 22794                           
 22795                           ;doprnt.c: 1306: if(val < dpowers[c])
 22796  1379  084A               	movf	sprintf@c,w
 22797  137A  00BB               	movwf	??_sprintf
 22798  137B  01BC               	clrf	??_sprintf+1
 22799  137C  35BB               	lslf	??_sprintf,f
 22800  137D  0DBC               	rlf	??_sprintf+1,f
 22801  137E  3000               	movlw	low (_dpowers| (0+32768))
 22802  137F  073B               	addwf	??_sprintf,w
 22803  1380  0084               	movwf	4
 22804  1381  30A8               	movlw	high (_dpowers| (0+32768))
 22805  1382  3D3C               	addwfc	??_sprintf+1,w
 22806  1383  0085               	movwf	5
 22807  1384  3F00               	moviw [0]fsr0
 22808  1385  00BD               	movwf	??_sprintf+2
 22809  1386  3F01               	moviw [1]fsr0
 22810  1387  00BE               	movwf	??_sprintf+3
 22811  1388  083E               	movf	??_sprintf+3,w
 22812  1389  0245               	subwf	sprintf@val+1,w
 22813  138A  1D03               	skipz
 22814  138B  2B8E               	goto	u4695
 22815  138C  083D               	movf	??_sprintf+2,w
 22816  138D  0244               	subwf	sprintf@val,w
 22817  138E                     u4695:	
 22818  138E  1C03               	btfss	3,0
 22819  138F  2B98               	goto	l7466
 22820                           
 22821                           ;doprnt.c: 1307: break;
 22822  1390  3001               	movlw	1
 22823  1391  00BB               	movwf	??_sprintf
 22824  1392  083B               	movf	??_sprintf,w
 22825  1393  07CA               	addwf	sprintf@c,f
 22826  1394  3005               	movlw	5
 22827  1395  064A               	xorwf	sprintf@c,w
 22828  1396  1D03               	btfss	3,2
 22829  1397  2B79               	goto	l7460
 22830  1398                     l7466:	
 22831                           
 22832                           ;doprnt.c: 1345: if(width && flag & 0x03)
 22833  1398  0848               	movf	sprintf@width,w
 22834  1399  0449               	iorwf	sprintf@width+1,w
 22835  139A  1903               	btfsc	3,2
 22836  139B  2BA4               	goto	l1472
 22837  139C  0840               	movf	sprintf@flag,w
 22838  139D  3903               	andlw	3
 22839  139E  1903               	btfsc	3,2
 22840  139F  2BA4               	goto	l1472
 22841                           
 22842                           ;doprnt.c: 1346: width--;
 22843  13A0  30FF               	movlw	255
 22844  13A1  07C8               	addwf	sprintf@width,f
 22845  13A2  30FF               	movlw	255
 22846  13A3  3DC9               	addwfc	sprintf@width+1,f
 22847  13A4                     l1472:	
 22848                           
 22849                           ;doprnt.c: 1381: if(width > c)
 22850  13A4  084A               	movf	sprintf@c,w
 22851  13A5  00BB               	movwf	??_sprintf
 22852  13A6  01BC               	clrf	??_sprintf+1
 22853  13A7  1BBB               	btfsc	??_sprintf,7
 22854  13A8  03BC               	decf	??_sprintf+1,f
 22855  13A9  083C               	movf	??_sprintf+1,w
 22856  13AA  3A80               	xorlw	128
 22857  13AB  00BD               	movwf	??_sprintf+2
 22858  13AC  0849               	movf	sprintf@width+1,w
 22859  13AD  3A80               	xorlw	128
 22860  13AE  023D               	subwf	??_sprintf+2,w
 22861  13AF  1D03               	skipz
 22862  13B0  2BB3               	goto	u4735
 22863  13B1  0848               	movf	sprintf@width,w
 22864  13B2  023B               	subwf	??_sprintf,w
 22865  13B3                     u4735:	
 22866  13B3  1803               	skipnc
 22867  13B4  2BC0               	goto	l7474
 22868                           
 22869                           ;doprnt.c: 1382: width -= c;
 22870  13B5  0020               	movlb	0	; select bank0
 22871  13B6  084A               	movf	sprintf@c,w
 22872  13B7  00BB               	movwf	??_sprintf
 22873  13B8  01BC               	clrf	??_sprintf+1
 22874  13B9  1BBB               	btfsc	??_sprintf,7
 22875  13BA  03BC               	decf	??_sprintf+1,f
 22876  13BB  083B               	movf	??_sprintf,w
 22877  13BC  02C8               	subwf	sprintf@width,f
 22878  13BD  083C               	movf	??_sprintf+1,w
 22879  13BE  3BC9               	subwfb	sprintf@width+1,f
 22880  13BF  2BC3               	goto	l7476
 22881  13C0                     l7474:	
 22882                           
 22883                           ;doprnt.c: 1383: else
 22884                           ;doprnt.c: 1384: width = 0;
 22885  13C0  0020               	movlb	0	; select bank0
 22886  13C1  01C8               	clrf	sprintf@width
 22887  13C2  01C9               	clrf	sprintf@width+1
 22888  13C3                     l7476:	
 22889                           
 22890                           ;doprnt.c: 1422: {
 22891                           ;doprnt.c: 1424: if(width
 22892                           ;doprnt.c: 1428: )
 22893  13C3  0848               	movf	sprintf@width,w
 22894  13C4  0449               	iorwf	sprintf@width+1,w
 22895  13C5  1903               	btfsc	3,2
 22896  13C6  2BD9               	goto	l7484
 22897  13C7                     l7478:	
 22898                           ;doprnt.c: 1429: do
 22899                           
 22900                           
 22901                           ;doprnt.c: 1430: ((*sp++ = (' ')));
 22902  13C7  082F               	movf	sprintf@sp,w
 22903  13C8  0086               	movwf	6
 22904  13C9  0830               	movf	sprintf@sp+1,w
 22905  13CA  0087               	movwf	7
 22906  13CB  3020               	movlw	32
 22907  13CC  0081               	movwf	1
 22908  13CD  3001               	movlw	1
 22909  13CE  07AF               	addwf	sprintf@sp,f
 22910  13CF  3000               	movlw	0
 22911  13D0  3DB0               	addwfc	sprintf@sp+1,f
 22912                           
 22913                           ;doprnt.c: 1431: while(--width);
 22914  13D1  30FF               	movlw	255
 22915  13D2  07C8               	addwf	sprintf@width,f
 22916  13D3  30FF               	movlw	255
 22917  13D4  3DC9               	addwfc	sprintf@width+1,f
 22918  13D5  0848               	movf	sprintf@width,w
 22919  13D6  0449               	iorwf	sprintf@width+1,w
 22920  13D7  1D03               	btfss	3,2
 22921  13D8  2BC7               	goto	l7478
 22922  13D9                     l7484:	
 22923                           
 22924                           ;doprnt.c: 1438: if(flag & 0x03)
 22925  13D9  0840               	movf	sprintf@flag,w
 22926  13DA  3903               	andlw	3
 22927  13DB  1903               	btfsc	3,2
 22928  13DC  2BE7               	goto	l7490
 22929                           
 22930                           ;doprnt.c: 1439: ((*sp++ = ('-')));
 22931  13DD  082F               	movf	sprintf@sp,w
 22932  13DE  0086               	movwf	6
 22933  13DF  0830               	movf	sprintf@sp+1,w
 22934  13E0  0087               	movwf	7
 22935  13E1  302D               	movlw	45
 22936  13E2  0081               	movwf	1
 22937  13E3  3001               	movlw	1
 22938  13E4  07AF               	addwf	sprintf@sp,f
 22939  13E5  3000               	movlw	0
 22940  13E6  3DB0               	addwfc	sprintf@sp+1,f
 22941  13E7                     l7490:	
 22942                           
 22943                           ;doprnt.c: 1469: }
 22944                           ;doprnt.c: 1472: prec = c;
 22945  13E7  084A               	movf	sprintf@c,w
 22946  13E8  00BB               	movwf	??_sprintf
 22947  13E9  083B               	movf	??_sprintf,w
 22948  13EA  00BF               	movwf	sprintf@prec
 22949  13EB                     l7498:	
 22950                           ;doprnt.c: 1474: while(prec--) {
 22951                           
 22952  13EB  30FF               	movlw	255
 22953  13EC  00BB               	movwf	??_sprintf
 22954  13ED  083B               	movf	??_sprintf,w
 22955  13EE  07BF               	addwf	sprintf@prec,f
 22956  13EF  0A3F               	incf	sprintf@prec,w
 22957  13F0  1903               	btfsc	3,2
 22958  13F1  2A64               	goto	l7500
 22959                           
 22960                           ;doprnt.c: 1478: {
 22961                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 22962  13F2  300A               	movlw	10
 22963  13F3  00AB               	movwf	___lwmod@divisor
 22964  13F4  3000               	movlw	0
 22965  13F5  00AC               	movwf	___lwmod@divisor+1
 22966  13F6  083F               	movf	sprintf@prec,w
 22967  13F7  00BB               	movwf	??_sprintf
 22968  13F8  01BC               	clrf	??_sprintf+1
 22969  13F9  35BB               	lslf	??_sprintf,f
 22970  13FA  0DBC               	rlf	??_sprintf+1,f
 22971  13FB  3000               	movlw	low (_dpowers| (0+32768))
 22972  13FC  073B               	addwf	??_sprintf,w
 22973  13FD  0084               	movwf	4
 22974  13FE  30A8               	movlw	high (_dpowers| (0+32768))
 22975  13FF  3D3C               	addwfc	??_sprintf+1,w
 22976  1400  0085               	movwf	5
 22977  1401  3F00               	moviw [0]fsr0
 22978  1402  00F1               	movwf	___lwdiv@divisor
 22979  1403  3F01               	moviw [1]fsr0
 22980  1404  00F2               	movwf	___lwdiv@divisor+1
 22981  1405  0845               	movf	sprintf@val+1,w
 22982  1406  00F4               	movwf	___lwdiv@dividend+1
 22983  1407  0844               	movf	sprintf@val,w
 22984  1408  00F3               	movwf	___lwdiv@dividend
 22985  1409  31A2  22E5  3192   	fcall	___lwdiv
 22986  140C  0872               	movf	?___lwdiv+1,w
 22987  140D  0020               	movlb	0	; select bank0
 22988  140E  00AE               	movwf	___lwmod@dividend+1
 22989  140F  0871               	movf	?___lwdiv,w
 22990  1410  00AD               	movwf	___lwmod@dividend
 22991  1411  31A1  21F4  3192   	fcall	___lwmod
 22992  1414  0020               	movlb	0	; select bank0
 22993  1415  082B               	movf	?___lwmod,w
 22994  1416  3E30               	addlw	48
 22995  1417  00BD               	movwf	??_sprintf+2
 22996  1418  083D               	movf	??_sprintf+2,w
 22997  1419  00CA               	movwf	sprintf@c
 22998                           
 22999                           ;doprnt.c: 1523: }
 23000                           ;doprnt.c: 1524: ((*sp++ = (c)));
 23001  141A  082F               	movf	sprintf@sp,w
 23002  141B  0086               	movwf	6
 23003  141C  0830               	movf	sprintf@sp+1,w
 23004  141D  0087               	movwf	7
 23005  141E  084A               	movf	sprintf@c,w
 23006  141F  0081               	movwf	1
 23007  1420  3001               	movlw	1
 23008  1421  07AF               	addwf	sprintf@sp,f
 23009  1422  3000               	movlw	0
 23010  1423  3DB0               	addwfc	sprintf@sp+1,f
 23011  1424  2BEB               	goto	l7498
 23012  1425                     l7502:	
 23013                           ;doprnt.c: 1525: }
 23014                           ;doprnt.c: 1533: }
 23015                           ;doprnt.c: 1535: alldone:
 23016                           
 23017                           
 23018                           ;doprnt.c: 1538: *sp = 0;
 23019  1425  0020               	movlb	0	; select bank0
 23020  1426  082F               	movf	sprintf@sp,w
 23021  1427  0086               	movwf	6
 23022  1428  0830               	movf	sprintf@sp+1,w
 23023  1429  0087               	movwf	7
 23024  142A  0181               	clrf	1
 23025  142B  0008               	return
 23026  142C                     __end_of_sprintf:	
 23027                           ;doprnt.c: 1540: return 0;
 23028                           ;	Return value of _sprintf is never used
 23029                           
 23030                           
 23031                           	psect	text37
 23032  2EBD                     __ptext37:	
 23033 ;; *************** function _isdigit *****************
 23034 ;; Defined at:
 23035 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\isdigit.c"
 23036 ;; Parameters:    Size  Location     Type
 23037 ;;  c               1    wreg     unsigned char 
 23038 ;; Auto vars:     Size  Location     Type
 23039 ;;  c               1    2[COMMON] unsigned char 
 23040 ;; Return value:  Size  Location     Type
 23041 ;;		None               void
 23042 ;; Registers used:
 23043 ;;		wreg, status,2, status,0
 23044 ;; Tracked objects:
 23045 ;;		On entry : 0/0
 23046 ;;		On exit  : 0/0
 23047 ;;		Unchanged: 0/0
 23048 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23049 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23050 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23051 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23052 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23053 ;;Total ram usage:        2 bytes
 23054 ;; Hardware stack levels used:    1
 23055 ;; Hardware stack levels required when called:    4
 23056 ;; This function calls:
 23057 ;;		Nothing
 23058 ;; This function is called by:
 23059 ;;		_sprintf
 23060 ;; This function uses a non-reentrant model
 23061 ;;
 23062                           
 23063                           
 23064                           ;psect for function _isdigit
 23065  2EBD                     _isdigit:	
 23066                           
 23067                           ;incstack = 0
 23068                           ; Regs used in _isdigit: [wreg+status,2+status,0]
 23069                           ;isdigit@c stored from wreg
 23070  2EBD  00F2               	movwf	isdigit@c
 23071  2EBE  01F1               	clrf	_isdigit$3264
 23072  2EBF  303A               	movlw	58
 23073  2EC0  0272               	subwf	isdigit@c,w
 23074  2EC1  1803               	skipnc
 23075  2EC2  2EC9               	goto	l7222
 23076  2EC3  3030               	movlw	48
 23077  2EC4  0272               	subwf	isdigit@c,w
 23078  2EC5  1C03               	skipc
 23079  2EC6  2EC9               	goto	l7222
 23080  2EC7  01F1               	clrf	_isdigit$3264
 23081  2EC8  0AF1               	incf	_isdigit$3264,f
 23082  2EC9                     l7222:	
 23083  2EC9  0C71               	rrf	_isdigit$3264,w
 23084  2ECA  0008               	return
 23085  2ECB                     __end_of_isdigit:	
 23086                           
 23087                           	psect	text38
 23088  200F                     __ptext38:	
 23089 ;; *************** function ___wmul *****************
 23090 ;; Defined at:
 23091 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\Umul16.c"
 23092 ;; Parameters:    Size  Location     Type
 23093 ;;  multiplier      2    1[COMMON] unsigned int 
 23094 ;;  multiplicand    2    3[COMMON] unsigned int 
 23095 ;; Auto vars:     Size  Location     Type
 23096 ;;  product         2    5[COMMON] unsigned int 
 23097 ;; Return value:  Size  Location     Type
 23098 ;;                  2    1[COMMON] unsigned int 
 23099 ;; Registers used:
 23100 ;;		wreg, status,2, status,0
 23101 ;; Tracked objects:
 23102 ;;		On entry : 0/0
 23103 ;;		On exit  : 0/0
 23104 ;;		Unchanged: 0/0
 23105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23106 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23107 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23108 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23109 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23110 ;;Total ram usage:        6 bytes
 23111 ;; Hardware stack levels used:    1
 23112 ;; Hardware stack levels required when called:    4
 23113 ;; This function calls:
 23114 ;;		Nothing
 23115 ;; This function is called by:
 23116 ;;		_secret_check
 23117 ;;		_sprintf
 23118 ;; This function uses a non-reentrant model
 23119 ;;
 23120                           
 23121                           
 23122                           ;psect for function ___wmul
 23123  200F                     ___wmul:	
 23124                           
 23125                           ;incstack = 0
 23126                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 23127  200F  01F5               	clrf	___wmul@product
 23128  2010  01F6               	clrf	___wmul@product+1
 23129  2011                     l7228:	
 23130  2011  1C71               	btfss	___wmul@multiplier,0
 23131  2012  2817               	goto	l1565
 23132  2013  0873               	movf	___wmul@multiplicand,w
 23133  2014  07F5               	addwf	___wmul@product,f
 23134  2015  0874               	movf	___wmul@multiplicand+1,w
 23135  2016  3DF6               	addwfc	___wmul@product+1,f
 23136  2017                     l1565:	
 23137  2017  3001               	movlw	1
 23138  2018                     u4445:	
 23139  2018  35F3               	lslf	___wmul@multiplicand,f
 23140  2019  0DF4               	rlf	___wmul@multiplicand+1,f
 23141  201A  0B89               	decfsz	9,f
 23142  201B  2818               	goto	u4445
 23143  201C  3001               	movlw	1
 23144  201D                     u4455:	
 23145  201D  36F2               	lsrf	___wmul@multiplier+1,f
 23146  201E  0CF1               	rrf	___wmul@multiplier,f
 23147  201F  0B89               	decfsz	9,f
 23148  2020  281D               	goto	u4455
 23149  2021  0871               	movf	___wmul@multiplier,w
 23150  2022  0472               	iorwf	___wmul@multiplier+1,w
 23151  2023  1D03               	btfss	3,2
 23152  2024  2811               	goto	l7228
 23153  2025  0876               	movf	___wmul@product+1,w
 23154  2026  00F2               	movwf	?___wmul+1
 23155  2027  0875               	movf	___wmul@product,w
 23156  2028  00F1               	movwf	?___wmul
 23157  2029  0008               	return
 23158  202A                     __end_of___wmul:	
 23159                           
 23160                           	psect	text39
 23161  2DEB                     __ptext39:	
 23162 ;; *************** function _nullifyBadge_irTxSet *****************
 23163 ;; Defined at:
 23164 ;;		line 264 in file "nullifyBadge.c"
 23165 ;; Parameters:    Size  Location     Type
 23166 ;;		None
 23167 ;; Auto vars:     Size  Location     Type
 23168 ;;		None
 23169 ;; Return value:  Size  Location     Type
 23170 ;;                  1    wreg      void 
 23171 ;; Registers used:
 23172 ;;		None
 23173 ;; Tracked objects:
 23174 ;;		On entry : 0/0
 23175 ;;		On exit  : 0/0
 23176 ;;		Unchanged: 0/0
 23177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23178 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23179 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23180 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23181 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23182 ;;Total ram usage:        0 bytes
 23183 ;; Hardware stack levels used:    1
 23184 ;; Hardware stack levels required when called:    4
 23185 ;; This function calls:
 23186 ;;		Nothing
 23187 ;; This function is called by:
 23188 ;;		_flashy_Main
 23189 ;; This function uses a non-reentrant model
 23190 ;;
 23191                           
 23192                           
 23193                           ;psect for function _nullifyBadge_irTxSet
 23194  2DEB                     _nullifyBadge_irTxSet:	
 23195                           
 23196                           ;incstack = 0
 23197                           ; Regs used in _nullifyBadge_irTxSet: []
 23198                           ;nullifyBadge.c: 266: do { LATBbits.LATB7 = 0; } while(0);
 23199  2DEB  0022               	movlb	2	; select bank2
 23200  2DEC  138D               	bcf	13,7	;volatile
 23201  2DED  0008               	return
 23202  2DEE                     __end_of_nullifyBadge_irTxSet:	
 23203                           
 23204                           	psect	text40
 23205  2E81                     __ptext40:	
 23206 ;; *************** function _nullifyBadge_irTxRelease *****************
 23207 ;; Defined at:
 23208 ;;		line 254 in file "nullifyBadge.c"
 23209 ;; Parameters:    Size  Location     Type
 23210 ;;  badge           1    wreg     PTR struct t_nullifyBadg
 23211 ;;		 -> badge_inst(18), 
 23212 ;; Auto vars:     Size  Location     Type
 23213 ;;  badge           1    2[COMMON] PTR struct t_nullifyBadg
 23214 ;;		 -> badge_inst(18), 
 23215 ;; Return value:  Size  Location     Type
 23216 ;;                  1    wreg      void 
 23217 ;; Registers used:
 23218 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 23219 ;; Tracked objects:
 23220 ;;		On entry : 0/0
 23221 ;;		On exit  : 0/0
 23222 ;;		Unchanged: 0/0
 23223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23225 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23226 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23227 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23228 ;;Total ram usage:        2 bytes
 23229 ;; Hardware stack levels used:    1
 23230 ;; Hardware stack levels required when called:    4
 23231 ;; This function calls:
 23232 ;;		Nothing
 23233 ;; This function is called by:
 23234 ;;		_flashy_Main
 23235 ;; This function uses a non-reentrant model
 23236 ;;
 23237                           
 23238                           
 23239                           ;psect for function _nullifyBadge_irTxRelease
 23240  2E81                     _nullifyBadge_irTxRelease:	
 23241                           
 23242                           ;incstack = 0
 23243                           ; Regs used in _nullifyBadge_irTxRelease: [wreg+fsr1l+fsr1h+status,2+status,0]
 23244                           ;nullifyBadge_irTxRelease@badge stored from wreg
 23245  2E81  00F2               	movwf	nullifyBadge_irTxRelease@badge
 23246                           
 23247                           ;nullifyBadge.c: 255: badge->registeredHw &= ~(1 << HW_IR_TX);
 23248  2E82  30FB               	movlw	251
 23249  2E83  00F1               	movwf	??_nullifyBadge_irTxRelease
 23250  2E84  0872               	movf	nullifyBadge_irTxRelease@badge,w
 23251  2E85  3E11               	addlw	17
 23252  2E86  0086               	movwf	6
 23253  2E87  3001               	movlw	1	; select bank2/3
 23254  2E88  0087               	movwf	7
 23255  2E89  0871               	movf	??_nullifyBadge_irTxRelease,w
 23256  2E8A  0581               	andwf	1,f
 23257  2E8B  0008               	return
 23258  2E8C                     __end_of_nullifyBadge_irTxRelease:	
 23259                           
 23260                           	psect	text41
 23261  2ED9                     __ptext41:	
 23262 ;; *************** function _nullifyBadge_irTxRegister *****************
 23263 ;; Defined at:
 23264 ;;		line 242 in file "nullifyBadge.c"
 23265 ;; Parameters:    Size  Location     Type
 23266 ;;  badge           1    wreg     PTR struct t_nullifyBadg
 23267 ;;		 -> badge_inst(18), 
 23268 ;; Auto vars:     Size  Location     Type
 23269 ;;  badge           1    1[COMMON] PTR struct t_nullifyBadg
 23270 ;;		 -> badge_inst(18), 
 23271 ;; Return value:  Size  Location     Type
 23272 ;;                  1    wreg      char 
 23273 ;; Registers used:
 23274 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 23275 ;; Tracked objects:
 23276 ;;		On entry : 0/0
 23277 ;;		On exit  : 0/0
 23278 ;;		Unchanged: 0/0
 23279 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23280 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23281 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23282 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23283 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23284 ;;Total ram usage:        1 bytes
 23285 ;; Hardware stack levels used:    1
 23286 ;; Hardware stack levels required when called:    4
 23287 ;; This function calls:
 23288 ;;		Nothing
 23289 ;; This function is called by:
 23290 ;;		_flashy_Main
 23291 ;; This function uses a non-reentrant model
 23292 ;;
 23293                           
 23294                           
 23295                           ;psect for function _nullifyBadge_irTxRegister
 23296  2ED9                     _nullifyBadge_irTxRegister:	
 23297                           
 23298                           ;incstack = 0
 23299                           ; Regs used in _nullifyBadge_irTxRegister: [wreg+fsr1l+fsr1h+status,2+status,0]
 23300                           ;nullifyBadge_irTxRegister@badge stored from wreg
 23301  2ED9  00F1               	movwf	nullifyBadge_irTxRegister@badge
 23302                           
 23303                           ;nullifyBadge.c: 243: if (badge->registeredHw & HW_IR_TX) {
 23304  2EDA  0871               	movf	nullifyBadge_irTxRegister@badge,w
 23305  2EDB  3E11               	addlw	17
 23306  2EDC  0086               	movwf	6
 23307  2EDD  3001               	movlw	1	; select bank2/3
 23308  2EDE  0087               	movwf	7
 23309  2EDF  1881               	btfsc	1,1
 23310  2EE0  0008               	return
 23311                           
 23312                           ;nullifyBadge.c: 246: else {
 23313                           ;nullifyBadge.c: 247: badge->registeredHw |= (1 << HW_IR_TX);
 23314                           
 23315                           ;nullifyBadge.c: 245: }
 23316                           
 23317                           ;nullifyBadge.c: 244: return -1;
 23318                           ;	Return value of _nullifyBadge_irTxRegister is never used
 23319  2EE1  0871               	movf	nullifyBadge_irTxRegister@badge,w
 23320  2EE2  3E11               	addlw	17
 23321  2EE3  0086               	movwf	6
 23322  2EE4  3001               	movlw	1	; select bank2/3
 23323  2EE5  0087               	movwf	7
 23324  2EE6  1501               	bsf	1,2
 23325                           
 23326                           ;nullifyBadge.c: 248: return 0;
 23327                           ;	Return value of _nullifyBadge_irTxRegister is never used
 23328  2EE7  0008               	return
 23329  2EE8                     __end_of_nullifyBadge_irTxRegister:	
 23330                           
 23331                           	psect	text42
 23332  2DE8                     __ptext42:	
 23333 ;; *************** function _nullifyBadge_irTxClr *****************
 23334 ;; Defined at:
 23335 ;;		line 270 in file "nullifyBadge.c"
 23336 ;; Parameters:    Size  Location     Type
 23337 ;;		None
 23338 ;; Auto vars:     Size  Location     Type
 23339 ;;		None
 23340 ;; Return value:  Size  Location     Type
 23341 ;;                  1    wreg      void 
 23342 ;; Registers used:
 23343 ;;		None
 23344 ;; Tracked objects:
 23345 ;;		On entry : 0/0
 23346 ;;		On exit  : 0/0
 23347 ;;		Unchanged: 0/0
 23348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23349 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23350 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23351 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23352 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23353 ;;Total ram usage:        0 bytes
 23354 ;; Hardware stack levels used:    1
 23355 ;; Hardware stack levels required when called:    4
 23356 ;; This function calls:
 23357 ;;		Nothing
 23358 ;; This function is called by:
 23359 ;;		_flashy_Main
 23360 ;; This function uses a non-reentrant model
 23361 ;;
 23362                           
 23363                           
 23364                           ;psect for function _nullifyBadge_irTxClr
 23365  2DE8                     _nullifyBadge_irTxClr:	
 23366                           
 23367                           ;incstack = 0
 23368                           ; Regs used in _nullifyBadge_irTxClr: []
 23369                           ;nullifyBadge.c: 272: do { LATBbits.LATB7 = 1; } while(0);
 23370  2DE8  0022               	movlb	2	; select bank2
 23371  2DE9  178D               	bsf	13,7	;volatile
 23372  2DEA  0008               	return
 23373  2DEB                     __end_of_nullifyBadge_irTxClr:	
 23374                           
 23375                           	psect	text43
 23376  2DF2                     __ptext43:	
 23377 ;; *************** function _nullifyBadge_irGet *****************
 23378 ;; Defined at:
 23379 ;;		line 232 in file "nullifyBadge.c"
 23380 ;; Parameters:    Size  Location     Type
 23381 ;;		None
 23382 ;; Auto vars:     Size  Location     Type
 23383 ;;		None
 23384 ;; Return value:  Size  Location     Type
 23385 ;;                  1    wreg      unsigned char 
 23386 ;; Registers used:
 23387 ;;		wreg, status,2, status,0
 23388 ;; Tracked objects:
 23389 ;;		On entry : 0/0
 23390 ;;		On exit  : 0/0
 23391 ;;		Unchanged: 0/0
 23392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23393 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23394 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23395 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23396 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23397 ;;Total ram usage:        0 bytes
 23398 ;; Hardware stack levels used:    1
 23399 ;; Hardware stack levels required when called:    4
 23400 ;; This function calls:
 23401 ;;		Nothing
 23402 ;; This function is called by:
 23403 ;;		_flashy_Main
 23404 ;; This function uses a non-reentrant model
 23405 ;;
 23406                           
 23407                           
 23408                           ;psect for function _nullifyBadge_irGet
 23409  2DF2                     _nullifyBadge_irGet:	
 23410                           
 23411                           ;nullifyBadge.c: 233: return PORTBbits.RB5;
 23412                           
 23413                           ;incstack = 0
 23414                           ; Regs used in _nullifyBadge_irGet: [wreg+status,2+status,0]
 23415  2DF2  0020               	movlb	0	; select bank0
 23416  2DF3  0E0D               	swapf	13,w	;volatile
 23417  2DF4  0C89               	rrf	9,f
 23418  2DF5  3901               	andlw	1
 23419  2DF6  0008               	return
 23420  2DF7                     __end_of_nullifyBadge_irGet:	
 23421                           
 23422                           	psect	text44
 23423  2250                     __ptext44:	
 23424 ;; *************** function _nullifyBadge_buttonsGet *****************
 23425 ;; Defined at:
 23426 ;;		line 187 in file "nullifyBadge.c"
 23427 ;; Parameters:    Size  Location     Type
 23428 ;;		None
 23429 ;; Auto vars:     Size  Location     Type
 23430 ;;  retVal          1    3[COMMON] unsigned char 
 23431 ;; Return value:  Size  Location     Type
 23432 ;;                  1    wreg      unsigned char 
 23433 ;; Registers used:
 23434 ;;		wreg, status,2, status,0
 23435 ;; Tracked objects:
 23436 ;;		On entry : 0/0
 23437 ;;		On exit  : 0/0
 23438 ;;		Unchanged: 0/0
 23439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23440 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23441 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23442 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23443 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23444 ;;Total ram usage:        3 bytes
 23445 ;; Hardware stack levels used:    1
 23446 ;; Hardware stack levels required when called:    4
 23447 ;; This function calls:
 23448 ;;		Nothing
 23449 ;; This function is called by:
 23450 ;;		_menu_Main
 23451 ;;		_flashy_Main
 23452 ;;		_locked_Main
 23453 ;;		_secret_Main
 23454 ;;		_slot_Main
 23455 ;; This function uses a non-reentrant model
 23456 ;;
 23457                           
 23458                           
 23459                           ;psect for function _nullifyBadge_buttonsGet
 23460  2250                     _nullifyBadge_buttonsGet:	
 23461                           
 23462                           ;nullifyBadge.c: 188: u8 retVal = 0x0F;
 23463                           
 23464                           ;incstack = 0
 23465                           ; Regs used in _nullifyBadge_buttonsGet: [wreg+status,2+status,0]
 23466  2250  300F               	movlw	15
 23467  2251  00F1               	movwf	??_nullifyBadge_buttonsGet
 23468  2252  0871               	movf	??_nullifyBadge_buttonsGet,w
 23469  2253  00F3               	movwf	nullifyBadge_buttonsGet@retVal
 23470                           
 23471                           ;nullifyBadge.c: 190: retVal &= ~(PORTCbits.RC5 << 0);
 23472  2254  0020               	movlb	0	; select bank0
 23473  2255  0E0E               	swapf	14,w	;volatile
 23474  2256  0C89               	rrf	9,f
 23475  2257  3901               	andlw	1
 23476  2258  3AFF               	xorlw	255
 23477  2259  00F1               	movwf	??_nullifyBadge_buttonsGet
 23478  225A  0871               	movf	??_nullifyBadge_buttonsGet,w
 23479  225B  05F3               	andwf	nullifyBadge_buttonsGet@retVal,f
 23480                           
 23481                           ;nullifyBadge.c: 191: retVal &= ~(PORTAbits.RA2 << 1);
 23482  225C  0C0C               	rrf	12,w	;volatile
 23483  225D  0C89               	rrf	9,f
 23484  225E  3901               	andlw	1
 23485  225F  0709               	addwf	9,w
 23486  2260  3AFF               	xorlw	255
 23487  2261  00F1               	movwf	??_nullifyBadge_buttonsGet
 23488  2262  0871               	movf	??_nullifyBadge_buttonsGet,w
 23489  2263  05F3               	andwf	nullifyBadge_buttonsGet@retVal,f
 23490                           
 23491                           ;nullifyBadge.c: 192: retVal &= ~(PORTAbits.RA4 << 2);
 23492  2264  0E0C               	swapf	12,w	;volatile
 23493  2265  3901               	andlw	1
 23494  2266  00F1               	movwf	??_nullifyBadge_buttonsGet
 23495  2267  3001               	movlw	1
 23496  2268                     u4525:	
 23497  2268  35F1               	lslf	??_nullifyBadge_buttonsGet,f
 23498  2269  3EFF               	addlw	-1
 23499  226A  1D03               	skipz
 23500  226B  2A68               	goto	u4525
 23501  226C  3571               	lslf	??_nullifyBadge_buttonsGet,w
 23502  226D  3AFF               	xorlw	255
 23503  226E  00F2               	movwf	??_nullifyBadge_buttonsGet+1
 23504  226F  0872               	movf	??_nullifyBadge_buttonsGet+1,w
 23505  2270  05F3               	andwf	nullifyBadge_buttonsGet@retVal,f
 23506                           
 23507                           ;nullifyBadge.c: 193: retVal &= ~(PORTAbits.RA5 << 3);
 23508  2271  0E0C               	swapf	12,w	;volatile
 23509  2272  0C89               	rrf	9,f
 23510  2273  3901               	andlw	1
 23511  2274  00F1               	movwf	??_nullifyBadge_buttonsGet
 23512  2275  3002               	movlw	2
 23513  2276                     u4535:	
 23514  2276  35F1               	lslf	??_nullifyBadge_buttonsGet,f
 23515  2277  3EFF               	addlw	-1
 23516  2278  1D03               	skipz
 23517  2279  2A76               	goto	u4535
 23518  227A  3571               	lslf	??_nullifyBadge_buttonsGet,w
 23519  227B  3AFF               	xorlw	255
 23520  227C  00F2               	movwf	??_nullifyBadge_buttonsGet+1
 23521  227D  0872               	movf	??_nullifyBadge_buttonsGet+1,w
 23522  227E  05F3               	andwf	nullifyBadge_buttonsGet@retVal,f
 23523                           
 23524                           ;nullifyBadge.c: 195: return retVal;
 23525  227F  0873               	movf	nullifyBadge_buttonsGet@retVal,w
 23526  2280  0008               	return
 23527  2281                     __end_of_nullifyBadge_buttonsGet:	
 23528                           
 23529                           	psect	text45
 23530  2F63                     __ptext45:	
 23531 ;; *************** function _let_alternate *****************
 23532 ;; Defined at:
 23533 ;;		line 191 in file "main.c"
 23534 ;; Parameters:    Size  Location     Type
 23535 ;;  count           2   16[BANK0 ] unsigned int 
 23536 ;; Auto vars:     Size  Location     Type
 23537 ;;		None
 23538 ;; Return value:  Size  Location     Type
 23539 ;;                  1    wreg      void 
 23540 ;; Registers used:
 23541 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 23542 ;; Tracked objects:
 23543 ;;		On entry : 0/0
 23544 ;;		On exit  : 0/0
 23545 ;;		Unchanged: 0/0
 23546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23547 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23548 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23549 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23550 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23551 ;;Total ram usage:        2 bytes
 23552 ;; Hardware stack levels used:    1
 23553 ;; Hardware stack levels required when called:    9
 23554 ;; This function calls:
 23555 ;;		_nullifyBadge_userLedsSet
 23556 ;; This function is called by:
 23557 ;;		_flashy_Main
 23558 ;; This function uses a non-reentrant model
 23559 ;;
 23560                           
 23561                           
 23562                           ;psect for function _let_alternate
 23563  2F63                     _let_alternate:	
 23564                           
 23565                           ;main.c: 192: if(count %2 == 1){
 23566                           
 23567                           ;incstack = 0
 23568                           ; Regs used in _let_alternate: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 23569  2F63  0020               	movlb	0	; select bank0
 23570  2F64  1C30               	btfss	let_alternate@count,0
 23571  2F65  2F6E               	goto	l7270
 23572                           
 23573                           ;main.c: 193: nullifyBadge_userLedsSet(&badge_inst,43349);
 23574  2F66  3055               	movlw	85
 23575  2F67  00AD               	movwf	nullifyBadge_userLedsSet@userLedData
 23576  2F68  30A9               	movlw	169
 23577  2F69  00AE               	movwf	nullifyBadge_userLedsSet@userLedData+1
 23578  2F6A  30DA               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 23579  2F6B  31AF  2709         	fcall	_nullifyBadge_userLedsSet
 23580                           
 23581                           ;main.c: 194: }
 23582  2F6D  0008               	return
 23583  2F6E                     l7270:	
 23584                           
 23585                           ;main.c: 195: else{
 23586                           ;main.c: 196: nullifyBadge_userLedsSet(&badge_inst,21162);
 23587  2F6E  30AA               	movlw	170
 23588  2F6F  0020               	movlb	0	; select bank0
 23589  2F70  00AD               	movwf	nullifyBadge_userLedsSet@userLedData
 23590  2F71  3052               	movlw	82
 23591  2F72  00AE               	movwf	nullifyBadge_userLedsSet@userLedData+1
 23592  2F73  30DA               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 23593  2F74  31AF  2709         	fcall	_nullifyBadge_userLedsSet
 23594  2F76  0008               	return
 23595  2F77                     __end_of_let_alternate:	
 23596                           
 23597                           	psect	text46
 23598  247E                     __ptext46:	
 23599 ;; *************** function _led_roundabout *****************
 23600 ;; Defined at:
 23601 ;;		line 156 in file "main.c"
 23602 ;; Parameters:    Size  Location     Type
 23603 ;;  counter         2   16[BANK0 ] unsigned int 
 23604 ;; Auto vars:     Size  Location     Type
 23605 ;;  size            2   22[BANK0 ] unsigned int 
 23606 ;;  leds            2   20[BANK0 ] unsigned int 
 23607 ;; Return value:  Size  Location     Type
 23608 ;;                  1    wreg      void 
 23609 ;; Registers used:
 23610 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 23611 ;; Tracked objects:
 23612 ;;		On entry : 0/0
 23613 ;;		On exit  : 0/0
 23614 ;;		Unchanged: 0/0
 23615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23616 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23617 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23618 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23619 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23620 ;;Total ram usage:        8 bytes
 23621 ;; Hardware stack levels used:    1
 23622 ;; Hardware stack levels required when called:    9
 23623 ;; This function calls:
 23624 ;;		___lwmod
 23625 ;;		_nullifyBadge_userLedsSet
 23626 ;; This function is called by:
 23627 ;;		_flashy_Main
 23628 ;; This function uses a non-reentrant model
 23629 ;;
 23630                           
 23631                           
 23632                           ;psect for function _led_roundabout
 23633  247E                     _led_roundabout:	
 23634                           
 23635                           ;main.c: 157: u16 size = sizeof(roundabout_leds) / sizeof(roundabout_leds[0]);
 23636                           
 23637                           ;incstack = 0
 23638                           ; Regs used in _led_roundabout: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 23639  247E  300E               	movlw	14
 23640  247F  0020               	movlb	0	; select bank0
 23641  2480  00B6               	movwf	led_roundabout@size
 23642  2481  3000               	movlw	0
 23643  2482  00B7               	movwf	led_roundabout@size+1
 23644                           
 23645                           ;main.c: 158: u16 leds = roundabout_leds[counter % size];
 23646  2483  0837               	movf	led_roundabout@size+1,w
 23647  2484  00AC               	movwf	___lwmod@divisor+1
 23648  2485  0836               	movf	led_roundabout@size,w
 23649  2486  00AB               	movwf	___lwmod@divisor
 23650  2487  0831               	movf	led_roundabout@counter+1,w
 23651  2488  00AE               	movwf	___lwmod@dividend+1
 23652  2489  0830               	movf	led_roundabout@counter,w
 23653  248A  00AD               	movwf	___lwmod@dividend
 23654  248B  31A1  21F4  31A4   	fcall	___lwmod
 23655  248E  0020               	movlb	0	; select bank0
 23656  248F  082B               	movf	?___lwmod,w
 23657  2490  0709               	addwf	9,w
 23658  2491  3E3C               	addlw	(low (_roundabout_leds| (0+768)))& (0+255)
 23659  2492  0086               	movwf	6
 23660  2493  3003               	movlw	3	; select bank6/7
 23661  2494  0087               	movwf	7
 23662  2495  3F40               	moviw [0]fsr1
 23663  2496  00B4               	movwf	led_roundabout@leds
 23664  2497  3F41               	moviw [1]fsr1
 23665  2498  00B5               	movwf	led_roundabout@leds+1
 23666                           
 23667                           ;main.c: 160: size = sizeof(roundabout_leds_inverse) / sizeof(roundabout_leds_inverse[0]
      +                          );
 23668  2499  300E               	movlw	14
 23669  249A  00B6               	movwf	led_roundabout@size
 23670  249B  3000               	movlw	0
 23671  249C  00B7               	movwf	led_roundabout@size+1
 23672                           
 23673                           ;main.c: 161: leds |= roundabout_leds_inverse[counter % size];
 23674  249D  0837               	movf	led_roundabout@size+1,w
 23675  249E  00AC               	movwf	___lwmod@divisor+1
 23676  249F  0836               	movf	led_roundabout@size,w
 23677  24A0  00AB               	movwf	___lwmod@divisor
 23678  24A1  0831               	movf	led_roundabout@counter+1,w
 23679  24A2  00AE               	movwf	___lwmod@dividend+1
 23680  24A3  0830               	movf	led_roundabout@counter,w
 23681  24A4  00AD               	movwf	___lwmod@dividend
 23682  24A5  31A1  21F4  31A4   	fcall	___lwmod
 23683  24A8  0020               	movlb	0	; select bank0
 23684  24A9  082B               	movf	?___lwmod,w
 23685  24AA  0709               	addwf	9,w
 23686  24AB  3EBC               	addlw	(low (_roundabout_leds_inverse| (0+768)))& (0+255)
 23687  24AC  0086               	movwf	6
 23688  24AD  3003               	movlw	3	; select bank7/8
 23689  24AE  0087               	movwf	7
 23690  24AF  3F40               	moviw [0]fsr1
 23691  24B0  00B2               	movwf	??_led_roundabout
 23692  24B1  3F41               	moviw [1]fsr1
 23693  24B2  00B3               	movwf	??_led_roundabout+1
 23694  24B3  0832               	movf	??_led_roundabout,w
 23695  24B4  04B4               	iorwf	led_roundabout@leds,f
 23696  24B5  0833               	movf	??_led_roundabout+1,w
 23697  24B6  04B5               	iorwf	led_roundabout@leds+1,f
 23698                           
 23699                           ;main.c: 163: nullifyBadge_userLedsSet(&badge_inst, leds);
 23700  24B7  0835               	movf	led_roundabout@leds+1,w
 23701  24B8  00AE               	movwf	nullifyBadge_userLedsSet@userLedData+1
 23702  24B9  0834               	movf	led_roundabout@leds,w
 23703  24BA  00AD               	movwf	nullifyBadge_userLedsSet@userLedData
 23704  24BB  30DA               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 23705  24BC  31AF  2709         	fcall	_nullifyBadge_userLedsSet
 23706  24BE  0008               	return
 23707  24BF                     __end_of_led_roundabout:	
 23708                           
 23709                           	psect	text47
 23710  25D1                     __ptext47:	
 23711 ;; *************** function _led_rand *****************
 23712 ;; Defined at:
 23713 ;;		line 176 in file "main.c"
 23714 ;; Parameters:    Size  Location     Type
 23715 ;;		None
 23716 ;; Auto vars:     Size  Location     Type
 23717 ;;  spark           2   27[BANK0 ] unsigned int 
 23718 ;; Return value:  Size  Location     Type
 23719 ;;                  1    wreg      void 
 23720 ;; Registers used:
 23721 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 23722 ;; Tracked objects:
 23723 ;;		On entry : 0/0
 23724 ;;		On exit  : 0/0
 23725 ;;		Unchanged: 0/0
 23726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23727 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23728 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23729 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23730 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23731 ;;Total ram usage:       10 bytes
 23732 ;; Hardware stack levels used:    1
 23733 ;; Hardware stack levels required when called:    9
 23734 ;; This function calls:
 23735 ;;		___almod
 23736 ;;		_nullifyBadge_userLedsSet
 23737 ;;		_rand
 23738 ;; This function is called by:
 23739 ;;		_flashy_Main
 23740 ;;		_slot_Finished_Animation
 23741 ;; This function uses a non-reentrant model
 23742 ;;
 23743                           
 23744                           
 23745                           ;psect for function _led_rand
 23746  25D1                     _led_rand:	
 23747                           
 23748                           ;main.c: 178: u16 spark = rand() % 65535;
 23749                           
 23750                           ;incstack = 0
 23751                           ; Regs used in _led_rand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 23752  25D1  3000               	movlw	0
 23753  25D2  0020               	movlb	0	; select bank0
 23754  25D3  00AE               	movwf	___almod@divisor+3
 23755  25D4  3000               	movlw	0
 23756  25D5  00AD               	movwf	___almod@divisor+2
 23757  25D6  30FF               	movlw	255
 23758  25D7  00AC               	movwf	___almod@divisor+1
 23759  25D8  30FF               	movlw	255
 23760  25D9  00AB               	movwf	___almod@divisor
 23761  25DA  31A5  2501  31A5   	fcall	_rand
 23762  25DD  0020               	movlb	0	; select bank0
 23763  25DE  0824               	movf	?_rand,w
 23764  25DF  00AF               	movwf	___almod@dividend
 23765  25E0  0825               	movf	?_rand+1,w
 23766  25E1  00B0               	movwf	___almod@dividend+1
 23767  25E2  0D89               	rlf	9,f
 23768  25E3  3B89               	subwfb	9,f
 23769  25E4  0989               	comf	9,f
 23770  25E5  00B1               	movwf	___almod@dividend+2
 23771  25E6  00B2               	movwf	___almod@dividend+3
 23772  25E7  319A  2257  31A5   	fcall	___almod
 23773  25EA  0020               	movlb	0	; select bank0
 23774  25EB  082C               	movf	?___almod+1,w
 23775  25EC  00BC               	movwf	led_rand@spark+1
 23776  25ED  082B               	movf	?___almod,w
 23777  25EE  00BB               	movwf	led_rand@spark
 23778                           
 23779                           ;main.c: 179: if ( (spark | 64511) == 65535 ){
 23780  25EF  30FF               	movlw	255
 23781  25F0  00B3               	movwf	??_led_rand
 23782  25F1  30FB               	movlw	251
 23783  25F2  00B4               	movwf	??_led_rand+1
 23784  25F3  3000               	movlw	0
 23785  25F4  00B5               	movwf	??_led_rand+2
 23786  25F5  3000               	movlw	0
 23787  25F6  00B6               	movwf	??_led_rand+3
 23788  25F7  083B               	movf	led_rand@spark,w
 23789  25F8  00B7               	movwf	??_led_rand+4
 23790  25F9  083C               	movf	led_rand@spark+1,w
 23791  25FA  00B8               	movwf	??_led_rand+5
 23792  25FB  01B9               	clrf	??_led_rand+6
 23793  25FC  01BA               	clrf	??_led_rand+7
 23794  25FD  0837               	movf	??_led_rand+4,w
 23795  25FE  04B3               	iorwf	??_led_rand,f
 23796  25FF  0838               	movf	??_led_rand+5,w
 23797  2600  04B4               	iorwf	??_led_rand+1,f
 23798  2601  0839               	movf	??_led_rand+6,w
 23799  2602  04B5               	iorwf	??_led_rand+2,f
 23800  2603  083A               	movf	??_led_rand+7,w
 23801  2604  04B6               	iorwf	??_led_rand+3,f
 23802  2605  0A33               	incf	??_led_rand,w
 23803  2606  1D03               	skipz
 23804  2607  2E11               	goto	l7184
 23805  2608  0A34               	incf	??_led_rand+1,w
 23806  2609  0435               	iorwf	??_led_rand+2,w
 23807  260A  0436               	iorwf	??_led_rand+3,w
 23808  260B  1D03               	btfss	3,2
 23809  260C  2E11               	goto	l7184
 23810                           
 23811                           ;main.c: 180: spark ^= 1024 ;
 23812  260D  3000               	movlw	0
 23813  260E  06BB               	xorwf	led_rand@spark,f
 23814  260F  3004               	movlw	4
 23815  2610  06BC               	xorwf	led_rand@spark+1,f
 23816  2611                     l7184:	
 23817                           
 23818                           ;main.c: 181: }
 23819                           ;main.c: 182: nullifyBadge_userLedsSet(&badge_inst,spark);
 23820  2611  083C               	movf	led_rand@spark+1,w
 23821  2612  00AE               	movwf	nullifyBadge_userLedsSet@userLedData+1
 23822  2613  083B               	movf	led_rand@spark,w
 23823  2614  00AD               	movwf	nullifyBadge_userLedsSet@userLedData
 23824  2615  30DA               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 23825  2616  31AF  2709         	fcall	_nullifyBadge_userLedsSet
 23826  2618  0008               	return
 23827  2619                     __end_of_led_rand:	
 23828                           
 23829                           	psect	text48
 23830  2501                     __ptext48:	
 23831 ;; *************** function _rand *****************
 23832 ;; Defined at:
 23833 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\rand.c"
 23834 ;; Parameters:    Size  Location     Type
 23835 ;;		None
 23836 ;; Auto vars:     Size  Location     Type
 23837 ;;		None
 23838 ;; Return value:  Size  Location     Type
 23839 ;;                  2    4[BANK0 ] int 
 23840 ;; Registers used:
 23841 ;;		wreg, status,2, status,0, pclath, cstack
 23842 ;; Tracked objects:
 23843 ;;		On entry : 0/0
 23844 ;;		On exit  : 0/0
 23845 ;;		Unchanged: 0/0
 23846 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23847 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23848 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23849 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23850 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23851 ;;Total ram usage:        7 bytes
 23852 ;; Hardware stack levels used:    1
 23853 ;; Hardware stack levels required when called:    5
 23854 ;; This function calls:
 23855 ;;		___lmul
 23856 ;; This function is called by:
 23857 ;;		_led_rand
 23858 ;;		_slot_Setup
 23859 ;;		_slot_Main
 23860 ;; This function uses a non-reentrant model
 23861 ;;
 23862                           
 23863                           
 23864                           ;psect for function _rand
 23865  2501                     _rand:	
 23866                           
 23867                           ;incstack = 0
 23868                           ; Regs used in _rand: [wreg+status,2+status,0+pclath+cstack]
 23869  2501  0021               	movlb	1	; select bank1
 23870  2502  085C               	movf	(_randx+3)^(0+128),w
 23871  2503  00F4               	movwf	___lmul@multiplier+3
 23872  2504  085B               	movf	(_randx+2)^(0+128),w
 23873  2505  00F3               	movwf	___lmul@multiplier+2
 23874  2506  085A               	movf	(_randx+1)^(0+128),w
 23875  2507  00F2               	movwf	___lmul@multiplier+1
 23876  2508  0859               	movf	_randx^(0+128),w
 23877  2509  00F1               	movwf	___lmul@multiplier
 23878  250A  3041               	movlw	65
 23879  250B  00F8               	movwf	___lmul@multiplicand+3
 23880  250C  30C6               	movlw	198
 23881  250D  00F7               	movwf	___lmul@multiplicand+2
 23882  250E  304E               	movlw	78
 23883  250F  00F6               	movwf	___lmul@multiplicand+1
 23884  2510  306D               	movlw	109
 23885  2511  00F5               	movwf	___lmul@multiplicand
 23886  2512  31A2  2281  31A5   	fcall	___lmul
 23887  2515  0874               	movf	?___lmul+3,w
 23888  2516  0021               	movlb	1	; select bank1
 23889  2517  00DC               	movwf	(_randx+3)^(0+128)
 23890  2518  0873               	movf	?___lmul+2,w
 23891  2519  00DB               	movwf	(_randx+2)^(0+128)
 23892  251A  0872               	movf	?___lmul+1,w
 23893  251B  00DA               	movwf	(_randx+1)^(0+128)
 23894  251C  0871               	movf	?___lmul,w
 23895  251D  00D9               	movwf	_randx^(0+128)
 23896  251E  3039               	movlw	57
 23897  251F  07D9               	addwf	_randx^(0+128),f
 23898  2520  3030               	movlw	48
 23899  2521  3DDA               	addwfc	(_randx+1)^(0+128),f
 23900  2522  3000               	movlw	0
 23901  2523  3DDB               	addwfc	(_randx+2)^(0+128),f
 23902  2524  3000               	movlw	0
 23903  2525  3DDC               	addwfc	(_randx+3)^(0+128),f
 23904  2526  0859               	movf	_randx^(0+128),w
 23905  2527  0020               	movlb	0	; select bank0
 23906  2528  00A6               	movwf	??_rand
 23907  2529  0021               	movlb	1	; select bank1
 23908  252A  085A               	movf	(_randx+1)^(0+128),w
 23909  252B  0020               	movlb	0	; select bank0
 23910  252C  00A7               	movwf	??_rand+1
 23911  252D  0021               	movlb	1	; select bank1
 23912  252E  085B               	movf	(_randx+2)^(0+128),w
 23913  252F  0020               	movlb	0	; select bank0
 23914  2530  00A8               	movwf	??_rand+2
 23915  2531  0021               	movlb	1	; select bank1
 23916  2532  085C               	movf	(_randx+3)^(0+128),w
 23917  2533  0020               	movlb	0	; select bank0
 23918  2534  00A9               	movwf	??_rand+3
 23919  2535  3010               	movlw	16
 23920  2536  00AA               	movwf	??_rand+4
 23921  2537                     u4105:	
 23922  2537  37A9               	asrf	??_rand+3,f
 23923  2538  0CA8               	rrf	??_rand+2,f
 23924  2539  0CA7               	rrf	??_rand+1,f
 23925  253A  0CA6               	rrf	??_rand,f
 23926  253B  0BAA               	decfsz	??_rand+4,f
 23927  253C  2D37               	goto	u4105
 23928  253D  30FF               	movlw	255
 23929  253E  0526               	andwf	??_rand,w
 23930  253F  00A4               	movwf	?_rand
 23931  2540  307F               	movlw	127
 23932  2541  0527               	andwf	??_rand+1,w
 23933  2542  00A5               	movwf	?_rand+1
 23934  2543  0008               	return
 23935  2544                     __end_of_rand:	
 23936                           
 23937                           	psect	text49
 23938  2281                     __ptext49:	
 23939 ;; *************** function ___lmul *****************
 23940 ;; Defined at:
 23941 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\Umul32.c"
 23942 ;; Parameters:    Size  Location     Type
 23943 ;;  multiplier      4    1[COMMON] unsigned long 
 23944 ;;  multiplicand    4    5[COMMON] unsigned long 
 23945 ;; Auto vars:     Size  Location     Type
 23946 ;;  product         4    0[BANK0 ] unsigned long 
 23947 ;; Return value:  Size  Location     Type
 23948 ;;                  4    1[COMMON] unsigned long 
 23949 ;; Registers used:
 23950 ;;		wreg, status,2, status,0
 23951 ;; Tracked objects:
 23952 ;;		On entry : 0/0
 23953 ;;		On exit  : 0/0
 23954 ;;		Unchanged: 0/0
 23955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23956 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23957 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23958 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23959 ;;      Totals:         8       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23960 ;;Total ram usage:       12 bytes
 23961 ;; Hardware stack levels used:    1
 23962 ;; Hardware stack levels required when called:    4
 23963 ;; This function calls:
 23964 ;;		Nothing
 23965 ;; This function is called by:
 23966 ;;		_rand
 23967 ;; This function uses a non-reentrant model
 23968 ;;
 23969                           
 23970                           
 23971                           ;psect for function ___lmul
 23972  2281                     ___lmul:	
 23973                           
 23974                           ;incstack = 0
 23975                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 23976  2281  3000               	movlw	0
 23977  2282  0020               	movlb	0	; select bank0
 23978  2283  00A3               	movwf	___lmul@product+3
 23979  2284  3000               	movlw	0
 23980  2285  00A2               	movwf	___lmul@product+2
 23981  2286  3000               	movlw	0
 23982  2287  00A1               	movwf	___lmul@product+1
 23983  2288  3000               	movlw	0
 23984  2289  00A0               	movwf	___lmul@product
 23985  228A                     l7008:	
 23986  228A  1C71               	btfss	___lmul@multiplier,0
 23987  228B  2A95               	goto	l7012
 23988  228C  0875               	movf	___lmul@multiplicand,w
 23989  228D  0020               	movlb	0	; select bank0
 23990  228E  07A0               	addwf	___lmul@product,f
 23991  228F  0876               	movf	___lmul@multiplicand+1,w
 23992  2290  3DA1               	addwfc	___lmul@product+1,f
 23993  2291  0877               	movf	___lmul@multiplicand+2,w
 23994  2292  3DA2               	addwfc	___lmul@product+2,f
 23995  2293  0878               	movf	___lmul@multiplicand+3,w
 23996  2294  3DA3               	addwfc	___lmul@product+3,f
 23997  2295                     l7012:	
 23998  2295  3001               	movlw	1
 23999  2296                     u4055:	
 24000  2296  35F5               	lslf	___lmul@multiplicand,f
 24001  2297  0DF6               	rlf	___lmul@multiplicand+1,f
 24002  2298  0DF7               	rlf	___lmul@multiplicand+2,f
 24003  2299  0DF8               	rlf	___lmul@multiplicand+3,f
 24004  229A  0B89               	decfsz	9,f
 24005  229B  2A96               	goto	u4055
 24006  229C  3001               	movlw	1
 24007  229D                     u4065:	
 24008  229D  36F4               	lsrf	___lmul@multiplier+3,f
 24009  229E  0CF3               	rrf	___lmul@multiplier+2,f
 24010  229F  0CF2               	rrf	___lmul@multiplier+1,f
 24011  22A0  0CF1               	rrf	___lmul@multiplier,f
 24012  22A1  0B89               	decfsz	9,f
 24013  22A2  2A9D               	goto	u4065
 24014  22A3  0874               	movf	___lmul@multiplier+3,w
 24015  22A4  0473               	iorwf	___lmul@multiplier+2,w
 24016  22A5  0472               	iorwf	___lmul@multiplier+1,w
 24017  22A6  0471               	iorwf	___lmul@multiplier,w
 24018  22A7  1D03               	skipz
 24019  22A8  2A8A               	goto	l7008
 24020  22A9  0020               	movlb	0	; select bank0
 24021  22AA  0823               	movf	___lmul@product+3,w
 24022  22AB  00F4               	movwf	?___lmul+3
 24023  22AC  0822               	movf	___lmul@product+2,w
 24024  22AD  00F3               	movwf	?___lmul+2
 24025  22AE  0821               	movf	___lmul@product+1,w
 24026  22AF  00F2               	movwf	?___lmul+1
 24027  22B0  0820               	movf	___lmul@product,w
 24028  22B1  00F1               	movwf	?___lmul
 24029  22B2  0008               	return
 24030  22B3                     __end_of___lmul:	
 24031                           
 24032                           	psect	text50
 24033  1A57                     __ptext50:	
 24034 ;; *************** function ___almod *****************
 24035 ;; Defined at:
 24036 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\almod.c"
 24037 ;; Parameters:    Size  Location     Type
 24038 ;;  divisor         4   11[BANK0 ] long 
 24039 ;;  dividend        4   15[BANK0 ] long 
 24040 ;; Auto vars:     Size  Location     Type
 24041 ;;  sign            1   11[COMMON] unsigned char 
 24042 ;;  counter         1   10[COMMON] unsigned char 
 24043 ;; Return value:  Size  Location     Type
 24044 ;;                  4   11[BANK0 ] long 
 24045 ;; Registers used:
 24046 ;;		wreg, status,2, status,0
 24047 ;; Tracked objects:
 24048 ;;		On entry : 0/0
 24049 ;;		On exit  : 0/0
 24050 ;;		Unchanged: 0/0
 24051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24052 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24053 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24054 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24055 ;;      Totals:         3       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24056 ;;Total ram usage:       11 bytes
 24057 ;; Hardware stack levels used:    1
 24058 ;; Hardware stack levels required when called:    4
 24059 ;; This function calls:
 24060 ;;		Nothing
 24061 ;; This function is called by:
 24062 ;;		_led_rand
 24063 ;; This function uses a non-reentrant model
 24064 ;;
 24065                           
 24066                           
 24067                           ;psect for function ___almod
 24068  1A57                     ___almod:	
 24069                           
 24070                           ;incstack = 0
 24071                           ; Regs used in ___almod: [wreg+status,2+status,0]
 24072  1A57  01FB               	clrf	___almod@sign
 24073  1A58  0020               	movlb	0	; select bank0
 24074  1A59  1FB2               	btfss	___almod@dividend+3,7
 24075  1A5A  2A68               	goto	l1633
 24076  1A5B  09AF               	comf	___almod@dividend,f
 24077  1A5C  09B0               	comf	___almod@dividend+1,f
 24078  1A5D  09B1               	comf	___almod@dividend+2,f
 24079  1A5E  09B2               	comf	___almod@dividend+3,f
 24080  1A5F  0AAF               	incf	___almod@dividend,f
 24081  1A60  1903               	skipnz
 24082  1A61  0AB0               	incf	___almod@dividend+1,f
 24083  1A62  1903               	skipnz
 24084  1A63  0AB1               	incf	___almod@dividend+2,f
 24085  1A64  1903               	skipnz
 24086  1A65  0AB2               	incf	___almod@dividend+3,f
 24087  1A66  01FB               	clrf	___almod@sign
 24088  1A67  0AFB               	incf	___almod@sign,f
 24089  1A68                     l1633:	
 24090  1A68  1FAE               	btfss	___almod@divisor+3,7
 24091  1A69  2A75               	goto	l7060
 24092  1A6A  09AB               	comf	___almod@divisor,f
 24093  1A6B  09AC               	comf	___almod@divisor+1,f
 24094  1A6C  09AD               	comf	___almod@divisor+2,f
 24095  1A6D  09AE               	comf	___almod@divisor+3,f
 24096  1A6E  0AAB               	incf	___almod@divisor,f
 24097  1A6F  1903               	skipnz
 24098  1A70  0AAC               	incf	___almod@divisor+1,f
 24099  1A71  1903               	skipnz
 24100  1A72  0AAD               	incf	___almod@divisor+2,f
 24101  1A73  1903               	skipnz
 24102  1A74  0AAE               	incf	___almod@divisor+3,f
 24103  1A75                     l7060:	
 24104  1A75  082E               	movf	___almod@divisor+3,w
 24105  1A76  042D               	iorwf	___almod@divisor+2,w
 24106  1A77  042C               	iorwf	___almod@divisor+1,w
 24107  1A78  042B               	iorwf	___almod@divisor,w
 24108  1A79  1903               	skipnz
 24109  1A7A  2AAE               	goto	l7076
 24110  1A7B  01FA               	clrf	___almod@counter
 24111  1A7C  0AFA               	incf	___almod@counter,f
 24112  1A7D                     l7066:	
 24113  1A7D  1BAE               	btfsc	___almod@divisor+3,7
 24114  1A7E  2A8B               	goto	l7068
 24115  1A7F  3001               	movlw	1
 24116  1A80                     u4145:	
 24117  1A80  35AB               	lslf	___almod@divisor,f
 24118  1A81  0DAC               	rlf	___almod@divisor+1,f
 24119  1A82  0DAD               	rlf	___almod@divisor+2,f
 24120  1A83  0DAE               	rlf	___almod@divisor+3,f
 24121  1A84  0B89               	decfsz	9,f
 24122  1A85  2A80               	goto	u4145
 24123  1A86  3001               	movlw	1
 24124  1A87  00F9               	movwf	??___almod
 24125  1A88  0879               	movf	??___almod,w
 24126  1A89  07FA               	addwf	___almod@counter,f
 24127  1A8A  2A7D               	goto	l7066
 24128  1A8B                     l7068:	
 24129  1A8B  082E               	movf	___almod@divisor+3,w
 24130  1A8C  0232               	subwf	___almod@dividend+3,w
 24131  1A8D  1D03               	skipz
 24132  1A8E  2A99               	goto	u4165
 24133  1A8F  082D               	movf	___almod@divisor+2,w
 24134  1A90  0231               	subwf	___almod@dividend+2,w
 24135  1A91  1D03               	skipz
 24136  1A92  2A99               	goto	u4165
 24137  1A93  082C               	movf	___almod@divisor+1,w
 24138  1A94  0230               	subwf	___almod@dividend+1,w
 24139  1A95  1D03               	skipz
 24140  1A96  2A99               	goto	u4165
 24141  1A97  082B               	movf	___almod@divisor,w
 24142  1A98  022F               	subwf	___almod@dividend,w
 24143  1A99                     u4165:	
 24144  1A99  1C03               	skipc
 24145  1A9A  2AA3               	goto	l7072
 24146  1A9B  082B               	movf	___almod@divisor,w
 24147  1A9C  02AF               	subwf	___almod@dividend,f
 24148  1A9D  082C               	movf	___almod@divisor+1,w
 24149  1A9E  3BB0               	subwfb	___almod@dividend+1,f
 24150  1A9F  082D               	movf	___almod@divisor+2,w
 24151  1AA0  3BB1               	subwfb	___almod@dividend+2,f
 24152  1AA1  082E               	movf	___almod@divisor+3,w
 24153  1AA2  3BB2               	subwfb	___almod@dividend+3,f
 24154  1AA3                     l7072:	
 24155  1AA3  3001               	movlw	1
 24156  1AA4                     u4175:	
 24157  1AA4  36AE               	lsrf	___almod@divisor+3,f
 24158  1AA5  0CAD               	rrf	___almod@divisor+2,f
 24159  1AA6  0CAC               	rrf	___almod@divisor+1,f
 24160  1AA7  0CAB               	rrf	___almod@divisor,f
 24161  1AA8  0B89               	decfsz	9,f
 24162  1AA9  2AA4               	goto	u4175
 24163  1AAA  3001               	movlw	1
 24164  1AAB  02FA               	subwf	___almod@counter,f
 24165  1AAC  1D03               	btfss	3,2
 24166  1AAD  2A8B               	goto	l7068
 24167  1AAE                     l7076:	
 24168  1AAE  087B               	movf	___almod@sign,w
 24169  1AAF  1903               	btfsc	3,2
 24170  1AB0  2ABC               	goto	l7080
 24171  1AB1  09AF               	comf	___almod@dividend,f
 24172  1AB2  09B0               	comf	___almod@dividend+1,f
 24173  1AB3  09B1               	comf	___almod@dividend+2,f
 24174  1AB4  09B2               	comf	___almod@dividend+3,f
 24175  1AB5  0AAF               	incf	___almod@dividend,f
 24176  1AB6  1903               	skipnz
 24177  1AB7  0AB0               	incf	___almod@dividend+1,f
 24178  1AB8  1903               	skipnz
 24179  1AB9  0AB1               	incf	___almod@dividend+2,f
 24180  1ABA  1903               	skipnz
 24181  1ABB  0AB2               	incf	___almod@dividend+3,f
 24182  1ABC                     l7080:	
 24183  1ABC  0832               	movf	___almod@dividend+3,w
 24184  1ABD  00AE               	movwf	?___almod+3
 24185  1ABE  0831               	movf	___almod@dividend+2,w
 24186  1ABF  00AD               	movwf	?___almod+2
 24187  1AC0  0830               	movf	___almod@dividend+1,w
 24188  1AC1  00AC               	movwf	?___almod+1
 24189  1AC2  082F               	movf	___almod@dividend,w
 24190  1AC3  00AB               	movwf	?___almod
 24191  1AC4  0008               	return
 24192  1AC5                     __end_of___almod:	
 24193                           
 24194                           	psect	text51
 24195  243D                     __ptext51:	
 24196 ;; *************** function _led_curtain *****************
 24197 ;; Defined at:
 24198 ;;		line 166 in file "main.c"
 24199 ;; Parameters:    Size  Location     Type
 24200 ;;  counter         2   16[BANK0 ] unsigned int 
 24201 ;; Auto vars:     Size  Location     Type
 24202 ;;  size            2   22[BANK0 ] unsigned int 
 24203 ;;  leds            2   20[BANK0 ] unsigned int 
 24204 ;; Return value:  Size  Location     Type
 24205 ;;                  1    wreg      void 
 24206 ;; Registers used:
 24207 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 24208 ;; Tracked objects:
 24209 ;;		On entry : 0/0
 24210 ;;		On exit  : 0/0
 24211 ;;		Unchanged: 0/0
 24212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24213 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24214 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24215 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24216 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24217 ;;Total ram usage:        8 bytes
 24218 ;; Hardware stack levels used:    1
 24219 ;; Hardware stack levels required when called:    9
 24220 ;; This function calls:
 24221 ;;		___lwmod
 24222 ;;		_nullifyBadge_userLedsSet
 24223 ;; This function is called by:
 24224 ;;		_flashy_Main
 24225 ;; This function uses a non-reentrant model
 24226 ;;
 24227                           
 24228                           
 24229                           ;psect for function _led_curtain
 24230  243D                     _led_curtain:	
 24231                           
 24232                           ;main.c: 167: u16 size = sizeof(curtain_leds) / sizeof(curtain_leds[0]);
 24233                           
 24234                           ;incstack = 0
 24235                           ; Regs used in _led_curtain: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 24236  243D  300E               	movlw	14
 24237  243E  0020               	movlb	0	; select bank0
 24238  243F  00B6               	movwf	led_curtain@size
 24239  2440  3000               	movlw	0
 24240  2441  00B7               	movwf	led_curtain@size+1
 24241                           
 24242                           ;main.c: 168: u16 leds = curtain_leds[counter % size];
 24243  2442  0837               	movf	led_curtain@size+1,w
 24244  2443  00AC               	movwf	___lwmod@divisor+1
 24245  2444  0836               	movf	led_curtain@size,w
 24246  2445  00AB               	movwf	___lwmod@divisor
 24247  2446  0831               	movf	led_curtain@counter+1,w
 24248  2447  00AE               	movwf	___lwmod@dividend+1
 24249  2448  0830               	movf	led_curtain@counter,w
 24250  2449  00AD               	movwf	___lwmod@dividend
 24251  244A  31A1  21F4  31A4   	fcall	___lwmod
 24252  244D  0020               	movlb	0	; select bank0
 24253  244E  082B               	movf	?___lwmod,w
 24254  244F  0709               	addwf	9,w
 24255  2450  3EA0               	addlw	(low (_curtain_leds| (0+768)))& (0+255)
 24256  2451  0086               	movwf	6
 24257  2452  3003               	movlw	3	; select bank7/8
 24258  2453  0087               	movwf	7
 24259  2454  3F40               	moviw [0]fsr1
 24260  2455  00B4               	movwf	led_curtain@leds
 24261  2456  3F41               	moviw [1]fsr1
 24262  2457  00B5               	movwf	led_curtain@leds+1
 24263                           
 24264                           ;main.c: 170: size = sizeof(curtain_leds_inverse) / sizeof(curtain_leds_inverse[0]);
 24265  2458  300E               	movlw	14
 24266  2459  00B6               	movwf	led_curtain@size
 24267  245A  3000               	movlw	0
 24268  245B  00B7               	movwf	led_curtain@size+1
 24269                           
 24270                           ;main.c: 171: leds |= curtain_leds_inverse[counter % size];
 24271  245C  0837               	movf	led_curtain@size+1,w
 24272  245D  00AC               	movwf	___lwmod@divisor+1
 24273  245E  0836               	movf	led_curtain@size,w
 24274  245F  00AB               	movwf	___lwmod@divisor
 24275  2460  0831               	movf	led_curtain@counter+1,w
 24276  2461  00AE               	movwf	___lwmod@dividend+1
 24277  2462  0830               	movf	led_curtain@counter,w
 24278  2463  00AD               	movwf	___lwmod@dividend
 24279  2464  31A1  21F4  31A4   	fcall	___lwmod
 24280  2467  0020               	movlb	0	; select bank0
 24281  2468  082B               	movf	?___lwmod,w
 24282  2469  0709               	addwf	9,w
 24283  246A  3E3E               	addlw	(low (_curtain_leds_inverse| (0+1024)))& (0+255)
 24284  246B  0086               	movwf	6
 24285  246C  3004               	movlw	4	; select bank8/9
 24286  246D  0087               	movwf	7
 24287  246E  3F40               	moviw [0]fsr1
 24288  246F  00B2               	movwf	??_led_curtain
 24289  2470  3F41               	moviw [1]fsr1
 24290  2471  00B3               	movwf	??_led_curtain+1
 24291  2472  0832               	movf	??_led_curtain,w
 24292  2473  04B4               	iorwf	led_curtain@leds,f
 24293  2474  0833               	movf	??_led_curtain+1,w
 24294  2475  04B5               	iorwf	led_curtain@leds+1,f
 24295                           
 24296                           ;main.c: 173: nullifyBadge_userLedsSet(&badge_inst, leds);
 24297  2476  0835               	movf	led_curtain@leds+1,w
 24298  2477  00AE               	movwf	nullifyBadge_userLedsSet@userLedData+1
 24299  2478  0834               	movf	led_curtain@leds,w
 24300  2479  00AD               	movwf	nullifyBadge_userLedsSet@userLedData
 24301  247A  30DA               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 24302  247B  31AF  2709         	fcall	_nullifyBadge_userLedsSet
 24303  247D  0008               	return
 24304  247E                     __end_of_led_curtain:	
 24305                           
 24306                           	psect	text52
 24307  2E2E                     __ptext52:	
 24308 ;; *************** function _led_circle *****************
 24309 ;; Defined at:
 24310 ;;		line 185 in file "main.c"
 24311 ;; Parameters:    Size  Location     Type
 24312 ;;  count           2   16[BANK0 ] unsigned int 
 24313 ;; Auto vars:     Size  Location     Type
 24314 ;;		None
 24315 ;; Return value:  Size  Location     Type
 24316 ;;                  1    wreg      void 
 24317 ;; Registers used:
 24318 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 24319 ;; Tracked objects:
 24320 ;;		On entry : 0/0
 24321 ;;		On exit  : 0/0
 24322 ;;		Unchanged: 0/0
 24323 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24324 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24325 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24326 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24327 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24328 ;;Total ram usage:        2 bytes
 24329 ;; Hardware stack levels used:    1
 24330 ;; Hardware stack levels required when called:    9
 24331 ;; This function calls:
 24332 ;;		_nullifyBadge_userLedsSet
 24333 ;; This function is called by:
 24334 ;;		_flashy_Main
 24335 ;;		_slot_Running_Animation
 24336 ;; This function uses a non-reentrant model
 24337 ;;
 24338                           
 24339                           
 24340                           ;psect for function _led_circle
 24341  2E2E                     _led_circle:	
 24342                           
 24343                           ;main.c: 187: nullifyBadge_userLedsSet(&badge_inst,count);
 24344                           
 24345                           ;incstack = 0
 24346                           ; Regs used in _led_circle: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 24347  2E2E  0020               	movlb	0	; select bank0
 24348  2E2F  0831               	movf	led_circle@count+1,w
 24349  2E30  00AE               	movwf	nullifyBadge_userLedsSet@userLedData+1
 24350  2E31  0830               	movf	led_circle@count,w
 24351  2E32  00AD               	movwf	nullifyBadge_userLedsSet@userLedData
 24352  2E33  30DA               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 24353  2E34  31AF  2709         	fcall	_nullifyBadge_userLedsSet
 24354  2E36  0008               	return
 24355  2E37                     __end_of_led_circle:	
 24356                           
 24357                           	psect	text53
 24358  19F2                     __ptext53:	
 24359 ;; *************** function _led_Parody *****************
 24360 ;; Defined at:
 24361 ;;		line 200 in file "main.c"
 24362 ;; Parameters:    Size  Location     Type
 24363 ;;  count           2   16[BANK0 ] unsigned int 
 24364 ;; Auto vars:     Size  Location     Type
 24365 ;;  size            2   22[BANK0 ] unsigned int 
 24366 ;;  leds            2   20[BANK0 ] unsigned int 
 24367 ;; Return value:  Size  Location     Type
 24368 ;;                  1    wreg      void 
 24369 ;; Registers used:
 24370 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 24371 ;; Tracked objects:
 24372 ;;		On entry : 0/0
 24373 ;;		On exit  : 0/0
 24374 ;;		Unchanged: 0/0
 24375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24376 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24377 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24378 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24379 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24380 ;;Total ram usage:        8 bytes
 24381 ;; Hardware stack levels used:    1
 24382 ;; Hardware stack levels required when called:    9
 24383 ;; This function calls:
 24384 ;;		___lwmod
 24385 ;;		_nullifyBadge_userLedsSet
 24386 ;; This function is called by:
 24387 ;;		_flashy_Main
 24388 ;; This function uses a non-reentrant model
 24389 ;;
 24390                           
 24391                           
 24392                           ;psect for function _led_Parody
 24393  19F2                     _led_Parody:	
 24394                           
 24395                           ;main.c: 201: u16 size;
 24396                           ;main.c: 202: u16 leds;
 24397                           ;main.c: 204: if (count % 30 == 0){
 24398                           
 24399                           ;incstack = 0
 24400                           ; Regs used in _led_Parody: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 24401  19F2  301E               	movlw	30
 24402  19F3  0020               	movlb	0	; select bank0
 24403  19F4  00AB               	movwf	___lwmod@divisor
 24404  19F5  3000               	movlw	0
 24405  19F6  00AC               	movwf	___lwmod@divisor+1
 24406  19F7  0831               	movf	led_Parody@count+1,w
 24407  19F8  00AE               	movwf	___lwmod@dividend+1
 24408  19F9  0830               	movf	led_Parody@count,w
 24409  19FA  00AD               	movwf	___lwmod@dividend
 24410  19FB  31A1  21F4  3199   	fcall	___lwmod
 24411  19FE  0020               	movlb	0	; select bank0
 24412  19FF  082B               	movf	?___lwmod,w
 24413  1A00  042C               	iorwf	?___lwmod+1,w
 24414  1A01  1D03               	btfss	3,2
 24415  1A02  2A08               	goto	l615
 24416                           
 24417                           ;main.c: 205: oddeven ^= 1 ;
 24418  1A03  3001               	movlw	1
 24419  1A04  0021               	movlb	1	; select bank1
 24420  1A05  06B6               	xorwf	_oddeven^(0+128),f
 24421  1A06  3000               	movlw	0
 24422  1A07  06B7               	xorwf	(_oddeven+1)^(0+128),f
 24423  1A08                     l615:	
 24424                           
 24425                           ;main.c: 206: }
 24426                           ;main.c: 208: if(count %2 == oddeven){
 24427  1A08  3001               	movlw	1
 24428  1A09  0020               	movlb	0	; select bank0
 24429  1A0A  0530               	andwf	led_Parody@count,w
 24430  1A0B  00B2               	movwf	??_led_Parody
 24431  1A0C  3000               	movlw	0
 24432  1A0D  0531               	andwf	led_Parody@count+1,w
 24433  1A0E  00B3               	movwf	??_led_Parody+1
 24434  1A0F  0021               	movlb	1	; select bank1
 24435  1A10  0837               	movf	(_oddeven+1)^(0+128),w
 24436  1A11  0020               	movlb	0	; select bank0
 24437  1A12  0633               	xorwf	??_led_Parody+1,w
 24438  1A13  1D03               	skipz
 24439  1A14  2A19               	goto	u4515
 24440  1A15  0021               	movlb	1	; select bank1
 24441  1A16  0836               	movf	_oddeven^(0+128),w
 24442  1A17  0020               	movlb	0	; select bank0
 24443  1A18  0632               	xorwf	??_led_Parody,w
 24444  1A19                     u4515:	
 24445  1A19  1D03               	skipz
 24446  1A1A  2A35               	goto	l7280
 24447                           
 24448                           ;main.c: 210: size = sizeof(roundabout_leds) / sizeof(roundabout_leds[0]);
 24449  1A1B  300E               	movlw	14
 24450  1A1C  00B6               	movwf	led_Parody@size
 24451  1A1D  3000               	movlw	0
 24452  1A1E  00B7               	movwf	led_Parody@size+1
 24453                           
 24454                           ;main.c: 211: leds = roundabout_leds[count % size];
 24455  1A1F  0837               	movf	led_Parody@size+1,w
 24456  1A20  00AC               	movwf	___lwmod@divisor+1
 24457  1A21  0836               	movf	led_Parody@size,w
 24458  1A22  00AB               	movwf	___lwmod@divisor
 24459  1A23  0831               	movf	led_Parody@count+1,w
 24460  1A24  00AE               	movwf	___lwmod@dividend+1
 24461  1A25  0830               	movf	led_Parody@count,w
 24462  1A26  00AD               	movwf	___lwmod@dividend
 24463  1A27  31A1  21F4  3199   	fcall	___lwmod
 24464  1A2A  0020               	movlb	0	; select bank0
 24465  1A2B  082B               	movf	?___lwmod,w
 24466  1A2C  0709               	addwf	9,w
 24467  1A2D  3E3C               	addlw	(low (_roundabout_leds| (0+768)))& (0+255)
 24468  1A2E  0086               	movwf	6
 24469  1A2F  3003               	movlw	3	; select bank6/7
 24470  1A30  0087               	movwf	7
 24471  1A31  3F40               	moviw [0]fsr1
 24472  1A32  00B4               	movwf	led_Parody@leds
 24473  1A33  3F41               	moviw [1]fsr1
 24474  1A34  2A4E               	goto	L14
 24475  1A35                     l7280:	
 24476                           ;main.c: 212: }
 24477                           
 24478                           
 24479                           ;main.c: 213: else{
 24480                           ;main.c: 214: size = sizeof(roundabout_leds_inverse) / sizeof(roundabout_leds_inverse[0]
      +                          );
 24481  1A35  300E               	movlw	14
 24482  1A36  00B6               	movwf	led_Parody@size
 24483  1A37  3000               	movlw	0
 24484  1A38  00B7               	movwf	led_Parody@size+1
 24485                           
 24486                           ;main.c: 215: leds = roundabout_leds_inverse[count % size];
 24487  1A39  0837               	movf	led_Parody@size+1,w
 24488  1A3A  00AC               	movwf	___lwmod@divisor+1
 24489  1A3B  0836               	movf	led_Parody@size,w
 24490  1A3C  00AB               	movwf	___lwmod@divisor
 24491  1A3D  0831               	movf	led_Parody@count+1,w
 24492  1A3E  00AE               	movwf	___lwmod@dividend+1
 24493  1A3F  0830               	movf	led_Parody@count,w
 24494  1A40  00AD               	movwf	___lwmod@dividend
 24495  1A41  31A1  21F4  3199   	fcall	___lwmod
 24496  1A44  0020               	movlb	0	; select bank0
 24497  1A45  082B               	movf	?___lwmod,w
 24498  1A46  0709               	addwf	9,w
 24499  1A47  3EBC               	addlw	(low (_roundabout_leds_inverse| (0+768)))& (0+255)
 24500  1A48  0086               	movwf	6
 24501  1A49  3003               	movlw	3	; select bank7/8
 24502  1A4A  0087               	movwf	7
 24503  1A4B  3F40               	moviw [0]fsr1
 24504  1A4C  00B4               	movwf	led_Parody@leds
 24505  1A4D  3F41               	moviw [1]fsr1
 24506  1A4E                     L14:	
 24507  1A4E  00B5               	movwf	led_Parody@leds+1
 24508                           
 24509                           ;main.c: 216: }
 24510                           ;main.c: 217: nullifyBadge_userLedsSet(&badge_inst, leds);
 24511  1A4F  0835               	movf	led_Parody@leds+1,w
 24512  1A50  00AE               	movwf	nullifyBadge_userLedsSet@userLedData+1
 24513  1A51  0834               	movf	led_Parody@leds,w
 24514  1A52  00AD               	movwf	nullifyBadge_userLedsSet@userLedData
 24515  1A53  30DA               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 24516  1A54  31AF  2709         	fcall	_nullifyBadge_userLedsSet
 24517  1A56  0008               	return
 24518  1A57                     __end_of_led_Parody:	
 24519                           
 24520                           	psect	text54
 24521  2F09                     __ptext54:	
 24522 ;; *************** function _nullifyBadge_userLedsSet *****************
 24523 ;; Defined at:
 24524 ;;		line 164 in file "nullifyBadge.c"
 24525 ;; Parameters:    Size  Location     Type
 24526 ;;  badge           1    wreg     PTR struct t_nullifyBadg
 24527 ;;		 -> badge_inst(18), 
 24528 ;;  userLedData     2   13[BANK0 ] unsigned int 
 24529 ;; Auto vars:     Size  Location     Type
 24530 ;;  badge           1   15[BANK0 ] PTR struct t_nullifyBadg
 24531 ;;		 -> badge_inst(18), 
 24532 ;; Return value:  Size  Location     Type
 24533 ;;                  1    wreg      void 
 24534 ;; Registers used:
 24535 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 24536 ;; Tracked objects:
 24537 ;;		On entry : 0/0
 24538 ;;		On exit  : 0/0
 24539 ;;		Unchanged: 0/0
 24540 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24541 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24542 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24543 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24544 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24545 ;;Total ram usage:        3 bytes
 24546 ;; Hardware stack levels used:    1
 24547 ;; Hardware stack levels required when called:    8
 24548 ;; This function calls:
 24549 ;;		_displayL2_SetUserLeds
 24550 ;; This function is called by:
 24551 ;;		_led_roundabout
 24552 ;;		_led_curtain
 24553 ;;		_led_rand
 24554 ;;		_led_circle
 24555 ;;		_let_alternate
 24556 ;;		_led_Parody
 24557 ;;		_menu_display_option
 24558 ;;		_flashy_Main
 24559 ;;		_locked_Main
 24560 ;; This function uses a non-reentrant model
 24561 ;;
 24562                           
 24563                           
 24564                           ;psect for function _nullifyBadge_userLedsSet
 24565  2F09                     _nullifyBadge_userLedsSet:	
 24566                           
 24567                           ;incstack = 0
 24568                           ; Regs used in _nullifyBadge_userLedsSet: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 24569                           ;nullifyBadge_userLedsSet@badge stored from wreg
 24570  2F09  0020               	movlb	0	; select bank0
 24571  2F0A  00AF               	movwf	nullifyBadge_userLedsSet@badge
 24572                           
 24573                           ;nullifyBadge.c: 165: if (badge_locked) {
 24574  2F0B  0021               	movlb	1	; select bank1
 24575  2F0C  0844               	movf	_badge_locked^(0+128),w
 24576  2F0D  1903               	btfsc	3,2
 24577  2F0E  2F11               	goto	l7040
 24578                           
 24579                           ;nullifyBadge.c: 166: userLedData |= 1024;
 24580  2F0F  0020               	movlb	0	; select bank0
 24581  2F10  152E               	bsf	nullifyBadge_userLedsSet@userLedData+1,2
 24582  2F11                     l7040:	
 24583                           
 24584                           ;nullifyBadge.c: 167: }
 24585                           ;nullifyBadge.c: 168: displayL2_SetUserLeds(&badge->display, userLedData);
 24586  2F11  0020               	movlb	0	; select bank0
 24587  2F12  082E               	movf	nullifyBadge_userLedsSet@userLedData+1,w
 24588  2F13  00AC               	movwf	displayL2_SetUserLeds@userLedData+1
 24589  2F14  082D               	movf	nullifyBadge_userLedsSet@userLedData,w
 24590  2F15  00AB               	movwf	displayL2_SetUserLeds@userLedData
 24591  2F16  082F               	movf	nullifyBadge_userLedsSet@badge,w
 24592  2F17  31A0  20F1         	fcall	_displayL2_SetUserLeds
 24593  2F19  0008               	return
 24594  2F1A                     __end_of_nullifyBadge_userLedsSet:	
 24595                           
 24596                           	psect	text55
 24597  20F1                     __ptext55:	
 24598 ;; *************** function _displayL2_SetUserLeds *****************
 24599 ;; Defined at:
 24600 ;;		line 88 in file "nullifyBadge_displayL2.c"
 24601 ;; Parameters:    Size  Location     Type
 24602 ;;  display         1    wreg     PTR struct t_nullifyDisp
 24603 ;;		 -> badge_inst(18), 
 24604 ;;  userLedData     2   11[BANK0 ] unsigned int 
 24605 ;; Auto vars:     Size  Location     Type
 24606 ;;  display         1   11[COMMON] PTR struct t_nullifyDisp
 24607 ;;		 -> badge_inst(18), 
 24608 ;; Return value:  Size  Location     Type
 24609 ;;                  1    wreg      void 
 24610 ;; Registers used:
 24611 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 24612 ;; Tracked objects:
 24613 ;;		On entry : 0/0
 24614 ;;		On exit  : 0/0
 24615 ;;		Unchanged: 0/0
 24616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24617 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24618 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24619 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24620 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24621 ;;Total ram usage:        3 bytes
 24622 ;; Hardware stack levels used:    1
 24623 ;; Hardware stack levels required when called:    7
 24624 ;; This function calls:
 24625 ;;		_displayL1_SetUserLed
 24626 ;;		_displayL1_Update
 24627 ;; This function is called by:
 24628 ;;		_nullifyBadge_userLedsSet
 24629 ;;		_nullifyBadge_userLedsSetForce
 24630 ;; This function uses a non-reentrant model
 24631 ;;
 24632                           
 24633                           
 24634                           ;psect for function _displayL2_SetUserLeds
 24635  20F1                     _displayL2_SetUserLeds:	
 24636                           
 24637                           ;incstack = 0
 24638                           ; Regs used in _displayL2_SetUserLeds: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 24639                           ;displayL2_SetUserLeds@display stored from wreg
 24640  20F1  00FB               	movwf	displayL2_SetUserLeds@display
 24641                           
 24642                           ;nullifyBadge_displayL2.c: 89: display->ledVect = userLedData;
 24643  20F2  087B               	movf	displayL2_SetUserLeds@display,w
 24644  20F3  3E05               	addlw	5
 24645  20F4  0086               	movwf	6
 24646  20F5  3001               	movlw	1	; select bank2/3
 24647  20F6  0087               	movwf	7
 24648  20F7  0020               	movlb	0	; select bank0
 24649  20F8  082B               	movf	displayL2_SetUserLeds@userLedData,w
 24650  20F9  3FC0               	movwi [0]fsr1
 24651  20FA  082C               	movf	displayL2_SetUserLeds@userLedData+1,w
 24652  20FB  3FC1               	movwi [1]fsr1
 24653                           
 24654                           ;nullifyBadge_displayL2.c: 90: displayL1_SetUserLed(&display->display_l1, display->ledVe
      +                          ct);
 24655  20FC  087B               	movf	displayL2_SetUserLeds@display,w
 24656  20FD  3E05               	addlw	5
 24657  20FE  0086               	movwf	6
 24658  20FF  3001               	movlw	1	; select bank2/3
 24659  2100  0087               	movwf	7
 24660  2101  3F40               	moviw [0]fsr1
 24661  2102  00F1               	movwf	displayL1_SetUserLed@userLedVect
 24662  2103  3F41               	moviw [1]fsr1
 24663  2104  00F2               	movwf	displayL1_SetUserLed@userLedVect+1
 24664  2105  087B               	movf	displayL2_SetUserLeds@display,w
 24665  2106  3E07               	addlw	7
 24666  2107  31AF  272B  31A0   	fcall	_displayL1_SetUserLed
 24667                           
 24668                           ;nullifyBadge_displayL2.c: 91: displayL1_Update(&display->display_l1);
 24669  210A  087B               	movf	displayL2_SetUserLeds@display,w
 24670  210B  3E07               	addlw	7
 24671  210C  31AE  26F8         	fcall	_displayL1_Update
 24672  210E  0008               	return
 24673  210F                     __end_of_displayL2_SetUserLeds:	
 24674                           
 24675                           	psect	text56
 24676  2F2B                     __ptext56:	
 24677 ;; *************** function _displayL1_SetUserLed *****************
 24678 ;; Defined at:
 24679 ;;		line 71 in file "nullifyBadge_displayL1.c"
 24680 ;; Parameters:    Size  Location     Type
 24681 ;;  display         1    wreg     PTR struct t_nullifyDisp
 24682 ;;		 -> badge_inst(18), 
 24683 ;;  userLedVect     2    1[COMMON] unsigned int 
 24684 ;; Auto vars:     Size  Location     Type
 24685 ;;  display         1    4[COMMON] PTR struct t_nullifyDisp
 24686 ;;		 -> badge_inst(18), 
 24687 ;; Return value:  Size  Location     Type
 24688 ;;                  1    wreg      void 
 24689 ;; Registers used:
 24690 ;;		wreg, fsr1l, fsr1h, status,2
 24691 ;; Tracked objects:
 24692 ;;		On entry : 0/0
 24693 ;;		On exit  : 0/0
 24694 ;;		Unchanged: 0/0
 24695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24696 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24697 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24698 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24699 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24700 ;;Total ram usage:        4 bytes
 24701 ;; Hardware stack levels used:    1
 24702 ;; Hardware stack levels required when called:    4
 24703 ;; This function calls:
 24704 ;;		Nothing
 24705 ;; This function is called by:
 24706 ;;		_displayL2_SetUserLeds
 24707 ;;		_displayL2_ClrUserLeds
 24708 ;; This function uses a non-reentrant model
 24709 ;;
 24710                           
 24711                           
 24712                           ;psect for function _displayL1_SetUserLed
 24713  2F2B                     _displayL1_SetUserLed:	
 24714                           
 24715                           ;incstack = 0
 24716                           ; Regs used in _displayL1_SetUserLed: [wreg+fsr1l+fsr1h+status,2]
 24717                           ;displayL1_SetUserLed@display stored from wreg
 24718  2F2B  00F4               	movwf	displayL1_SetUserLed@display
 24719                           
 24720                           ;nullifyBadge_displayL1.c: 73: display->displayVect[0] = (u8) (userLedVect >> 8);
 24721  2F2C  0872               	movf	displayL1_SetUserLed@userLedVect+1,w
 24722  2F2D  00F3               	movwf	??_displayL1_SetUserLed
 24723  2F2E  0874               	movf	displayL1_SetUserLed@display,w
 24724  2F2F  0086               	movwf	6
 24725  2F30  3001               	movlw	1	; select bank2/3
 24726  2F31  0087               	movwf	7
 24727  2F32  0873               	movf	??_displayL1_SetUserLed,w
 24728  2F33  0081               	movwf	1
 24729                           
 24730                           ;nullifyBadge_displayL1.c: 74: display->displayVect[1] = (u8) (userLedVect & 0xFF);
 24731  2F34  0871               	movf	displayL1_SetUserLed@userLedVect,w
 24732  2F35  00F3               	movwf	??_displayL1_SetUserLed
 24733  2F36  0A74               	incf	displayL1_SetUserLed@display,w
 24734  2F37  0086               	movwf	6
 24735  2F38  3001               	movlw	1	; select bank2/3
 24736  2F39  0087               	movwf	7
 24737  2F3A  0873               	movf	??_displayL1_SetUserLed,w
 24738  2F3B  0081               	movwf	1
 24739  2F3C  0008               	return
 24740  2F3D                     __end_of_displayL1_SetUserLed:	
 24741                           
 24742                           	psect	text57
 24743  1200                     __ptext57:	
 24744 ;; *************** function _flashy_display_option *****************
 24745 ;; Defined at:
 24746 ;;		line 89 in file "flashy_task.c"
 24747 ;; Parameters:    Size  Location     Type
 24748 ;;  data            2   44[BANK0 ] PTR struct t_flashy_task
 24749 ;;		 -> secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), 
 24750 ;;		 -> flashy_TaskData(30), NULL(0), 
 24751 ;; Auto vars:     Size  Location     Type
 24752 ;;		None
 24753 ;; Return value:  Size  Location     Type
 24754 ;;                  1    wreg      void 
 24755 ;; Registers used:
 24756 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 24757 ;; Tracked objects:
 24758 ;;		On entry : 0/0
 24759 ;;		On exit  : 0/0
 24760 ;;		Unchanged: 0/0
 24761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24762 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24763 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24764 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24765 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24766 ;;Total ram usage:        2 bytes
 24767 ;; Hardware stack levels used:    1
 24768 ;; Hardware stack levels required when called:   10
 24769 ;; This function calls:
 24770 ;;		_marquee
 24771 ;;		_marquee_speedy
 24772 ;;		_nullifyBadge_segDisplayForceUpdate
 24773 ;;		_nullifyBadge_segDisplayPutStr
 24774 ;; This function is called by:
 24775 ;;		_flashy_Main
 24776 ;; This function uses a non-reentrant model
 24777 ;;
 24778                           
 24779                           
 24780                           ;psect for function _flashy_display_option
 24781  1200                     _flashy_display_option:	
 24782                           
 24783                           ;flashy_task.c: 90: if (flashy_option_idx == 0){
 24784                           
 24785                           ;incstack = 0
 24786                           ; Regs used in _flashy_display_option: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 24787  1200  0021               	movlb	1	; select bank1
 24788  1201  0826               	movf	_flashy_option_idx^(0+128),w
 24789  1202  0427               	iorwf	(_flashy_option_idx+1)^(0+128),w
 24790  1203  1D03               	btfss	3,2
 24791  1204  2A20               	goto	l7370
 24792                           
 24793                           ;flashy_task.c: 91: nullifyBadge_segDisplayPutStr(data->badge, flashy_option[flashy_opti
      +                          on_idx]);
 24794  1205  3526               	lslf	_flashy_option_idx^(0+128),w
 24795  1206  3E20               	addlw	(low (_flashy_option| (0+768)))& (0+255)
 24796  1207  0086               	movwf	6
 24797  1208  3003               	movlw	3	; select bank6/7
 24798  1209  0087               	movwf	7
 24799  120A  3F40               	moviw [0]fsr1
 24800  120B  0020               	movlb	0	; select bank0
 24801  120C  00B7               	movwf	nullifyBadge_segDisplayPutStr@str
 24802  120D  3F41               	moviw [1]fsr1
 24803  120E  00B8               	movwf	nullifyBadge_segDisplayPutStr@str+1
 24804  120F  084C               	movf	flashy_display_option@data,w
 24805  1210  0086               	movwf	6
 24806  1211  084D               	movf	flashy_display_option@data+1,w
 24807  1212  0087               	movwf	7
 24808  1213  0801               	movf	1,w
 24809  1214  31AE  264B  3192   	fcall	_nullifyBadge_segDisplayPutStr
 24810                           
 24811                           ;flashy_task.c: 92: nullifyBadge_segDisplayForceUpdate(data->badge);
 24812  1217  0020               	movlb	0	; select bank0
 24813  1218  084C               	movf	flashy_display_option@data,w
 24814  1219  0086               	movwf	6
 24815  121A  084D               	movf	flashy_display_option@data+1,w
 24816  121B  0087               	movwf	7
 24817  121C  0801               	movf	1,w
 24818  121D  31AE  2603         	fcall	_nullifyBadge_segDisplayForceUpdate
 24819                           
 24820                           ;flashy_task.c: 93: }
 24821  121F  0008               	return
 24822  1220                     l7370:	
 24823                           
 24824                           ;flashy_task.c: 94: else {
 24825                           ;flashy_task.c: 95: if (data->display_state==FLASHY_STATE_DISPLAY ){
 24826  1220  0020               	movlb	0	; select bank0
 24827  1221  084C               	movf	flashy_display_option@data,w
 24828  1222  0086               	movwf	6
 24829  1223  084D               	movf	flashy_display_option@data+1,w
 24830  1224  0087               	movwf	7
 24831  1225  3146               	addfsr 1,6
 24832  1226  0801               	movf	1,w
 24833  1227  1D03               	btfss	3,2
 24834  1228  2A48               	goto	l7374
 24835                           
 24836                           ;flashy_task.c: 97: marquee_speedy(flashy_option[flashy_option_idx], data->noholdCount, 
      +                          flashy_scroll_rate);
 24837  1229  0021               	movlb	1	; select bank1
 24838  122A  3526               	lslf	_flashy_option_idx^(0+128),w
 24839  122B  3E20               	addlw	(low (_flashy_option| (0+768)))& (0+255)
 24840  122C  0086               	movwf	6
 24841  122D  3003               	movlw	3	; select bank6/7
 24842  122E  0087               	movwf	7
 24843  122F  3F40               	moviw [0]fsr1
 24844  1230  0020               	movlb	0	; select bank0
 24845  1231  00BA               	movwf	marquee_speedy@string
 24846  1232  3F41               	moviw [1]fsr1
 24847  1233  00BB               	movwf	marquee_speedy@string+1
 24848  1234  084C               	movf	flashy_display_option@data,w
 24849  1235  0086               	movwf	6
 24850  1236  084D               	movf	flashy_display_option@data+1,w
 24851  1237  0087               	movwf	7
 24852  1238  315C               	addfsr 1,28
 24853  1239  3F40               	moviw [0]fsr1
 24854  123A  00BC               	movwf	marquee_speedy@count
 24855  123B  3F41               	moviw [1]fsr1
 24856  123C  00BD               	movwf	marquee_speedy@count+1
 24857  123D  0021               	movlb	1	; select bank1
 24858  123E  082B               	movf	(_flashy_scroll_rate+1)^(0+128),w
 24859  123F  0020               	movlb	0	; select bank0
 24860  1240  00BF               	movwf	marquee_speedy@multiplier+1
 24861  1241  0021               	movlb	1	; select bank1
 24862  1242  082A               	movf	_flashy_scroll_rate^(0+128),w
 24863  1243  0020               	movlb	0	; select bank0
 24864  1244  00BE               	movwf	marquee_speedy@multiplier
 24865  1245  319A  22C5         	fcall	_marquee_speedy
 24866                           
 24867                           ;flashy_task.c: 98: }
 24868  1247  0008               	return
 24869  1248                     l7374:	
 24870                           
 24871                           ;flashy_task.c: 99: else{
 24872                           ;flashy_task.c: 100: marquee(flashy_option[flashy_option_idx], data->noholdCount);
 24873  1248  0021               	movlb	1	; select bank1
 24874  1249  3526               	lslf	_flashy_option_idx^(0+128),w
 24875  124A  3E20               	addlw	(low (_flashy_option| (0+768)))& (0+255)
 24876  124B  0086               	movwf	6
 24877  124C  3003               	movlw	3	; select bank6/7
 24878  124D  0087               	movwf	7
 24879  124E  3F40               	moviw [0]fsr1
 24880  124F  0020               	movlb	0	; select bank0
 24881  1250  00BA               	movwf	marquee@string
 24882  1251  3F41               	moviw [1]fsr1
 24883  1252  00BB               	movwf	marquee@string+1
 24884  1253  084C               	movf	flashy_display_option@data,w
 24885  1254  0086               	movwf	6
 24886  1255  084D               	movf	flashy_display_option@data+1,w
 24887  1256  0087               	movwf	7
 24888  1257  315C               	addfsr 1,28
 24889  1258  3F40               	moviw [0]fsr1
 24890  1259  00BC               	movwf	marquee@count
 24891  125A  3F41               	moviw [1]fsr1
 24892  125B  00BD               	movwf	marquee@count+1
 24893  125C  319B  2338         	fcall	_marquee
 24894  125E  0008               	return
 24895  125F                     __end_of_flashy_display_option:	
 24896                           
 24897                           	psect	text58
 24898  1AC5                     __ptext58:	
 24899 ;; *************** function _marquee_speedy *****************
 24900 ;; Defined at:
 24901 ;;		line 130 in file "main.c"
 24902 ;; Parameters:    Size  Location     Type
 24903 ;;  string          2   26[BANK0 ] PTR unsigned char 
 24904 ;;		 -> STR_23(43), STR_22(40), STR_21(27), STR_20(25), 
 24905 ;;		 -> STR_19(30), STR_18(35), STR_17(22), STR_16(26), 
 24906 ;;		 -> STR_15(21), STR_14(19), STR_13(6), STR_12(8), 
 24907 ;;		 -> STR_11(9), STR_10(5), secret_TaskData(14), locked_TaskData(14), 
 24908 ;;		 -> slot_TaskData(40), menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 24909 ;;  count           2   28[BANK0 ] unsigned int 
 24910 ;;  multiplier      2   30[BANK0 ] unsigned int 
 24911 ;; Auto vars:     Size  Location     Type
 24912 ;;  j               2   42[BANK0 ] unsigned int 
 24913 ;;  display_stri    5   33[BANK0 ] unsigned char [5]
 24914 ;;  string_lengt    2   40[BANK0 ] unsigned int 
 24915 ;;  i               2   38[BANK0 ] unsigned int 
 24916 ;; Return value:  Size  Location     Type
 24917 ;;                  1    wreg      void 
 24918 ;; Registers used:
 24919 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 24920 ;; Tracked objects:
 24921 ;;		On entry : 0/0
 24922 ;;		On exit  : 0/0
 24923 ;;		Unchanged: 0/0
 24924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24925 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24926 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24927 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24928 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24929 ;;Total ram usage:       18 bytes
 24930 ;; Hardware stack levels used:    1
 24931 ;; Hardware stack levels required when called:    9
 24932 ;; This function calls:
 24933 ;;		___lwdiv
 24934 ;;		___lwmod
 24935 ;;		_nullifyBadge_segDisplayForceUpdate
 24936 ;;		_nullifyBadge_segDisplayPutStr
 24937 ;;		_strlen
 24938 ;; This function is called by:
 24939 ;;		_flashy_display_option
 24940 ;;		_slot_Main
 24941 ;; This function uses a non-reentrant model
 24942 ;;
 24943                           
 24944                           
 24945                           ;psect for function _marquee_speedy
 24946  1AC5                     _marquee_speedy:	
 24947                           
 24948                           ;main.c: 131: u16 string_length = strlen((const char *) string);
 24949                           
 24950                           ;incstack = 0
 24951                           ; Regs used in _marquee_speedy: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 24952  1AC5  0020               	movlb	0	; select bank0
 24953  1AC6  083B               	movf	marquee_speedy@string+1,w
 24954  1AC7  00F2               	movwf	strlen@s+1
 24955  1AC8  083A               	movf	marquee_speedy@string,w
 24956  1AC9  00F1               	movwf	strlen@s
 24957  1ACA  31A0  20D3  319A   	fcall	_strlen
 24958  1ACD  0872               	movf	?_strlen+1,w
 24959  1ACE  0020               	movlb	0	; select bank0
 24960  1ACF  00C9               	movwf	marquee_speedy@string_length+1
 24961  1AD0  0871               	movf	?_strlen,w
 24962  1AD1  00C8               	movwf	marquee_speedy@string_length
 24963                           
 24964                           ;main.c: 132: char display_string[] = { ' ', ' ', ' ', ' ', '\0' };
 24965  1AD2  30C3               	movlw	low marquee_speedy@F8639
 24966  1AD3  0086               	movwf	6
 24967  1AD4  3001               	movlw	high marquee_speedy@F8639
 24968  1AD5  0087               	movwf	7
 24969  1AD6  3041               	movlw	low marquee_speedy@display_string
 24970  1AD7  0084               	movwf	4
 24971  1AD8  3000               	movlw	high marquee_speedy@display_string
 24972  1AD9  0085               	movwf	5
 24973  1ADA  3005               	movlw	5
 24974  1ADB  00C0               	movwf	??_marquee_speedy
 24975  1ADC                     u4330:	
 24976  1ADC  0016               	moviw fsr1++
 24977  1ADD  001A               	movwi fsr0++
 24978  1ADE  0BC0               	decfsz	??_marquee_speedy,f
 24979  1ADF  2ADC               	goto	u4330
 24980                           
 24981                           ;main.c: 133: u16 i = (count / multiplier) % string_length;
 24982  1AE0  0849               	movf	marquee_speedy@string_length+1,w
 24983  1AE1  00AC               	movwf	___lwmod@divisor+1
 24984  1AE2  0848               	movf	marquee_speedy@string_length,w
 24985  1AE3  00AB               	movwf	___lwmod@divisor
 24986  1AE4  083F               	movf	marquee_speedy@multiplier+1,w
 24987  1AE5  00F2               	movwf	___lwdiv@divisor+1
 24988  1AE6  083E               	movf	marquee_speedy@multiplier,w
 24989  1AE7  00F1               	movwf	___lwdiv@divisor
 24990  1AE8  083D               	movf	marquee_speedy@count+1,w
 24991  1AE9  00F4               	movwf	___lwdiv@dividend+1
 24992  1AEA  083C               	movf	marquee_speedy@count,w
 24993  1AEB  00F3               	movwf	___lwdiv@dividend
 24994  1AEC  31A2  22E5  319A   	fcall	___lwdiv
 24995  1AEF  0872               	movf	?___lwdiv+1,w
 24996  1AF0  0020               	movlb	0	; select bank0
 24997  1AF1  00AE               	movwf	___lwmod@dividend+1
 24998  1AF2  0871               	movf	?___lwdiv,w
 24999  1AF3  00AD               	movwf	___lwmod@dividend
 25000  1AF4  31A1  21F4  319A   	fcall	___lwmod
 25001  1AF7  0020               	movlb	0	; select bank0
 25002  1AF8  082C               	movf	?___lwmod+1,w
 25003  1AF9  00C7               	movwf	marquee_speedy@i+1
 25004  1AFA  082B               	movf	?___lwmod,w
 25005  1AFB  00C6               	movwf	marquee_speedy@i
 25006                           
 25007                           ;main.c: 135: for (u16 j=0; j < 4; j++){
 25008  1AFC  01CA               	clrf	marquee_speedy@j
 25009  1AFD  01CB               	clrf	marquee_speedy@j+1
 25010  1AFE  3000               	movlw	0
 25011  1AFF  024B               	subwf	marquee_speedy@j+1,w
 25012  1B00  3004               	movlw	4
 25013  1B01  1903               	skipnz
 25014  1B02  024A               	subwf	marquee_speedy@j,w
 25015  1B03  1803               	btfsc	3,0
 25016  1B04  2B2C               	goto	l7150
 25017  1B05                     l7144:	
 25018                           
 25019                           ;main.c: 136: display_string[j] = string[(i + j) % string_length];
 25020  1B05  0849               	movf	marquee_speedy@string_length+1,w
 25021  1B06  00AC               	movwf	___lwmod@divisor+1
 25022  1B07  0848               	movf	marquee_speedy@string_length,w
 25023  1B08  00AB               	movwf	___lwmod@divisor
 25024  1B09  084A               	movf	marquee_speedy@j,w
 25025  1B0A  0746               	addwf	marquee_speedy@i,w
 25026  1B0B  00AD               	movwf	___lwmod@dividend
 25027  1B0C  084B               	movf	marquee_speedy@j+1,w
 25028  1B0D  3D47               	addwfc	marquee_speedy@i+1,w
 25029  1B0E  00AE               	movwf	___lwmod@dividend+1
 25030  1B0F  31A1  21F4  319A   	fcall	___lwmod
 25031  1B12  0020               	movlb	0	; select bank0
 25032  1B13  083A               	movf	marquee_speedy@string,w
 25033  1B14  072B               	addwf	?___lwmod,w
 25034  1B15  0084               	movwf	4
 25035  1B16  083B               	movf	marquee_speedy@string+1,w
 25036  1B17  3D2C               	addwfc	?___lwmod+1,w
 25037  1B18  0085               	movwf	5
 25038  1B19  0800               	movf	0,w	;code access
 25039  1B1A  00C0               	movwf	??_marquee_speedy
 25040  1B1B  084A               	movf	marquee_speedy@j,w
 25041  1B1C  3E41               	addlw	(low (marquee_speedy@display_string| 0))& (0+255)
 25042  1B1D  0086               	movwf	6
 25043  1B1E  0187               	clrf	7
 25044  1B1F  0840               	movf	??_marquee_speedy,w
 25045  1B20  0081               	movwf	1
 25046  1B21  3001               	movlw	1
 25047  1B22  07CA               	addwf	marquee_speedy@j,f
 25048  1B23  3000               	movlw	0
 25049  1B24  3DCB               	addwfc	marquee_speedy@j+1,f
 25050  1B25  3000               	movlw	0
 25051  1B26  024B               	subwf	marquee_speedy@j+1,w
 25052  1B27  3004               	movlw	4
 25053  1B28  1903               	skipnz
 25054  1B29  024A               	subwf	marquee_speedy@j,w
 25055  1B2A  1C03               	skipc
 25056  1B2B  2B05               	goto	l7144
 25057  1B2C                     l7150:	
 25058                           
 25059                           ;main.c: 137: }
 25060                           ;main.c: 138: nullifyBadge_segDisplayPutStr(&badge_inst, display_string);
 25061  1B2C  3041               	movlw	low marquee_speedy@display_string
 25062  1B2D  00B7               	movwf	nullifyBadge_segDisplayPutStr@str
 25063  1B2E  3000               	movlw	high marquee_speedy@display_string
 25064  1B2F  00B8               	movwf	nullifyBadge_segDisplayPutStr@str+1
 25065  1B30  30DA               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 25066  1B31  31AE  264B  319A   	fcall	_nullifyBadge_segDisplayPutStr
 25067                           
 25068                           ;main.c: 139: nullifyBadge_segDisplayForceUpdate(&badge_inst);
 25069  1B34  30DA               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 25070  1B35  31AE  2603         	fcall	_nullifyBadge_segDisplayForceUpdate
 25071  1B37  0008               	return
 25072  1B38                     __end_of_marquee_speedy:	
 25073                           
 25074                           	psect	text59
 25075  1B38                     __ptext59:	
 25076 ;; *************** function _marquee *****************
 25077 ;; Defined at:
 25078 ;;		line 143 in file "main.c"
 25079 ;; Parameters:    Size  Location     Type
 25080 ;;  string          2   26[BANK0 ] PTR unsigned char 
 25081 ;;		 -> STR_29(5), STR_28(5), STR_27(11), STR_26(13), 
 25082 ;;		 -> STR_23(43), STR_22(40), STR_21(27), STR_20(25), 
 25083 ;;		 -> STR_19(30), STR_18(35), STR_17(22), STR_16(26), 
 25084 ;;		 -> STR_15(21), STR_14(19), STR_13(6), STR_12(8), 
 25085 ;;		 -> STR_11(9), STR_10(5), STR_9(18), STR_7(6), 
 25086 ;;		 -> STR_6(10), STR_5(6), STR_4(5), secret_TaskData(14), 
 25087 ;;		 -> locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), flashy_TaskData(30), 
 25088 ;;		 -> NULL(0), 
 25089 ;;  count           2   28[BANK0 ] unsigned int 
 25090 ;; Auto vars:     Size  Location     Type
 25091 ;;  j               2   42[BANK0 ] unsigned int 
 25092 ;;  display_stri    5   31[BANK0 ] unsigned char [5]
 25093 ;;  string_lengt    2   40[BANK0 ] unsigned int 
 25094 ;;  i               2   38[BANK0 ] unsigned int 
 25095 ;;  multiplier      2   36[BANK0 ] unsigned int 
 25096 ;; Return value:  Size  Location     Type
 25097 ;;                  1    wreg      void 
 25098 ;; Registers used:
 25099 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 25100 ;; Tracked objects:
 25101 ;;		On entry : 0/0
 25102 ;;		On exit  : 0/0
 25103 ;;		Unchanged: 0/0
 25104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25105 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25106 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25107 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25108 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25109 ;;Total ram usage:       18 bytes
 25110 ;; Hardware stack levels used:    1
 25111 ;; Hardware stack levels required when called:    9
 25112 ;; This function calls:
 25113 ;;		___lwdiv
 25114 ;;		___lwmod
 25115 ;;		_nullifyBadge_segDisplayForceUpdate
 25116 ;;		_nullifyBadge_segDisplayPutStr
 25117 ;;		_strlen
 25118 ;; This function is called by:
 25119 ;;		_menu_display_option
 25120 ;;		_flashy_display_option
 25121 ;;		_flashy_Main
 25122 ;;		_locked_Main
 25123 ;;		_slot_Main
 25124 ;; This function uses a non-reentrant model
 25125 ;;
 25126                           
 25127                           
 25128                           ;psect for function _marquee
 25129  1B38                     _marquee:	
 25130                           
 25131                           ;main.c: 144: u16 multiplier = 50;
 25132                           
 25133                           ;incstack = 0
 25134                           ; Regs used in _marquee: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 25135  1B38  3032               	movlw	50
 25136  1B39  0020               	movlb	0	; select bank0
 25137  1B3A  00C4               	movwf	marquee@multiplier
 25138  1B3B  3000               	movlw	0
 25139  1B3C  00C5               	movwf	marquee@multiplier+1
 25140                           
 25141                           ;main.c: 145: u16 string_length = strlen((const char *) string);
 25142  1B3D  083B               	movf	marquee@string+1,w
 25143  1B3E  00F2               	movwf	strlen@s+1
 25144  1B3F  083A               	movf	marquee@string,w
 25145  1B40  00F1               	movwf	strlen@s
 25146  1B41  31A0  20D3  319B   	fcall	_strlen
 25147  1B44  0872               	movf	?_strlen+1,w
 25148  1B45  0020               	movlb	0	; select bank0
 25149  1B46  00C9               	movwf	marquee@string_length+1
 25150  1B47  0871               	movf	?_strlen,w
 25151  1B48  00C8               	movwf	marquee@string_length
 25152                           
 25153                           ;main.c: 146: char display_string[] = { ' ', ' ', ' ', ' ', '\0' };
 25154  1B49  30BE               	movlw	low marquee@F8648
 25155  1B4A  0086               	movwf	6
 25156  1B4B  3001               	movlw	high marquee@F8648
 25157  1B4C  0087               	movwf	7
 25158  1B4D  303F               	movlw	low marquee@display_string
 25159  1B4E  0084               	movwf	4
 25160  1B4F  3000               	movlw	high marquee@display_string
 25161  1B50  0085               	movwf	5
 25162  1B51  3005               	movlw	5
 25163  1B52  00BE               	movwf	??_marquee
 25164  1B53                     u4360:	
 25165  1B53  0016               	moviw fsr1++
 25166  1B54  001A               	movwi fsr0++
 25167  1B55  0BBE               	decfsz	??_marquee,f
 25168  1B56  2B53               	goto	u4360
 25169                           
 25170                           ;main.c: 147: u16 i = (count / multiplier) % string_length;
 25171  1B57  0849               	movf	marquee@string_length+1,w
 25172  1B58  00AC               	movwf	___lwmod@divisor+1
 25173  1B59  0848               	movf	marquee@string_length,w
 25174  1B5A  00AB               	movwf	___lwmod@divisor
 25175  1B5B  0845               	movf	marquee@multiplier+1,w
 25176  1B5C  00F2               	movwf	___lwdiv@divisor+1
 25177  1B5D  0844               	movf	marquee@multiplier,w
 25178  1B5E  00F1               	movwf	___lwdiv@divisor
 25179  1B5F  083D               	movf	marquee@count+1,w
 25180  1B60  00F4               	movwf	___lwdiv@dividend+1
 25181  1B61  083C               	movf	marquee@count,w
 25182  1B62  00F3               	movwf	___lwdiv@dividend
 25183  1B63  31A2  22E5  319B   	fcall	___lwdiv
 25184  1B66  0872               	movf	?___lwdiv+1,w
 25185  1B67  0020               	movlb	0	; select bank0
 25186  1B68  00AE               	movwf	___lwmod@dividend+1
 25187  1B69  0871               	movf	?___lwdiv,w
 25188  1B6A  00AD               	movwf	___lwmod@dividend
 25189  1B6B  31A1  21F4  319B   	fcall	___lwmod
 25190  1B6E  0020               	movlb	0	; select bank0
 25191  1B6F  082C               	movf	?___lwmod+1,w
 25192  1B70  00C7               	movwf	marquee@i+1
 25193  1B71  082B               	movf	?___lwmod,w
 25194  1B72  00C6               	movwf	marquee@i
 25195                           
 25196                           ;main.c: 149: for (u16 j=0; j < 4; j++){
 25197  1B73  01CA               	clrf	marquee@j
 25198  1B74  01CB               	clrf	marquee@j+1
 25199  1B75  3000               	movlw	0
 25200  1B76  024B               	subwf	marquee@j+1,w
 25201  1B77  3004               	movlw	4
 25202  1B78  1903               	skipnz
 25203  1B79  024A               	subwf	marquee@j,w
 25204  1B7A  1803               	btfsc	3,0
 25205  1B7B  2BA3               	goto	l7174
 25206  1B7C                     l7168:	
 25207                           
 25208                           ;main.c: 150: display_string[j] = string[(i + j) % string_length];
 25209  1B7C  0849               	movf	marquee@string_length+1,w
 25210  1B7D  00AC               	movwf	___lwmod@divisor+1
 25211  1B7E  0848               	movf	marquee@string_length,w
 25212  1B7F  00AB               	movwf	___lwmod@divisor
 25213  1B80  084A               	movf	marquee@j,w
 25214  1B81  0746               	addwf	marquee@i,w
 25215  1B82  00AD               	movwf	___lwmod@dividend
 25216  1B83  084B               	movf	marquee@j+1,w
 25217  1B84  3D47               	addwfc	marquee@i+1,w
 25218  1B85  00AE               	movwf	___lwmod@dividend+1
 25219  1B86  31A1  21F4  319B   	fcall	___lwmod
 25220  1B89  0020               	movlb	0	; select bank0
 25221  1B8A  083A               	movf	marquee@string,w
 25222  1B8B  072B               	addwf	?___lwmod,w
 25223  1B8C  0084               	movwf	4
 25224  1B8D  083B               	movf	marquee@string+1,w
 25225  1B8E  3D2C               	addwfc	?___lwmod+1,w
 25226  1B8F  0085               	movwf	5
 25227  1B90  0800               	movf	0,w	;code access
 25228  1B91  00BE               	movwf	??_marquee
 25229  1B92  084A               	movf	marquee@j,w
 25230  1B93  3E3F               	addlw	(low (marquee@display_string| 0))& (0+255)
 25231  1B94  0086               	movwf	6
 25232  1B95  0187               	clrf	7
 25233  1B96  083E               	movf	??_marquee,w
 25234  1B97  0081               	movwf	1
 25235  1B98  3001               	movlw	1
 25236  1B99  07CA               	addwf	marquee@j,f
 25237  1B9A  3000               	movlw	0
 25238  1B9B  3DCB               	addwfc	marquee@j+1,f
 25239  1B9C  3000               	movlw	0
 25240  1B9D  024B               	subwf	marquee@j+1,w
 25241  1B9E  3004               	movlw	4
 25242  1B9F  1903               	skipnz
 25243  1BA0  024A               	subwf	marquee@j,w
 25244  1BA1  1C03               	skipc
 25245  1BA2  2B7C               	goto	l7168
 25246  1BA3                     l7174:	
 25247                           
 25248                           ;main.c: 151: }
 25249                           ;main.c: 152: nullifyBadge_segDisplayPutStr(&badge_inst, display_string);
 25250  1BA3  303F               	movlw	low marquee@display_string
 25251  1BA4  00B7               	movwf	nullifyBadge_segDisplayPutStr@str
 25252  1BA5  3000               	movlw	high marquee@display_string
 25253  1BA6  00B8               	movwf	nullifyBadge_segDisplayPutStr@str+1
 25254  1BA7  30DA               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 25255  1BA8  31AE  264B  319B   	fcall	_nullifyBadge_segDisplayPutStr
 25256                           
 25257                           ;main.c: 153: nullifyBadge_segDisplayForceUpdate(&badge_inst);
 25258  1BAB  30DA               	movlw	(low (_badge_inst| (0+256)))& (0+255)
 25259  1BAC  31AE  2603         	fcall	_nullifyBadge_segDisplayForceUpdate
 25260  1BAE  0008               	return
 25261  1BAF                     __end_of_marquee:	
 25262                           
 25263                           	psect	text60
 25264  20D3                     __ptext60:	
 25265 ;; *************** function _strlen *****************
 25266 ;; Defined at:
 25267 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\strlen.c"
 25268 ;; Parameters:    Size  Location     Type
 25269 ;;  s               2    1[COMMON] PTR const unsigned char 
 25270 ;;		 -> Slot_Wheel(55), secret_inputs.inputs(20), secret_inputs(25), STR_29(5), 
 25271 ;;		 -> STR_28(5), STR_27(11), STR_26(13), STR_23(43), 
 25272 ;;		 -> STR_22(40), STR_21(27), STR_20(25), STR_19(30), 
 25273 ;;		 -> STR_18(35), STR_17(22), STR_16(26), STR_15(21), 
 25274 ;;		 -> STR_14(19), STR_13(6), STR_12(8), STR_11(9), 
 25275 ;;		 -> STR_10(5), STR_9(18), STR_7(6), STR_6(10), 
 25276 ;;		 -> STR_5(6), STR_4(5), secret_TaskData(14), locked_TaskData(14), 
 25277 ;;		 -> slot_TaskData(40), menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 25278 ;; Auto vars:     Size  Location     Type
 25279 ;;  cp              2    5[COMMON] PTR const unsigned char 
 25280 ;;		 -> Slot_Wheel(55), secret_inputs.inputs(20), secret_inputs(25), STR_29(5), 
 25281 ;;		 -> STR_28(5), STR_27(11), STR_26(13), STR_23(43), 
 25282 ;;		 -> STR_22(40), STR_21(27), STR_20(25), STR_19(30), 
 25283 ;;		 -> STR_18(35), STR_17(22), STR_16(26), STR_15(21), 
 25284 ;;		 -> STR_14(19), STR_13(6), STR_12(8), STR_11(9), 
 25285 ;;		 -> STR_10(5), STR_9(18), STR_7(6), STR_6(10), 
 25286 ;;		 -> STR_5(6), STR_4(5), secret_TaskData(14), locked_TaskData(14), 
 25287 ;;		 -> slot_TaskData(40), menu_TaskData(14), flashy_TaskData(30), NULL(0), 
 25288 ;; Return value:  Size  Location     Type
 25289 ;;                  2    1[COMMON] unsigned int 
 25290 ;; Registers used:
 25291 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 25292 ;; Tracked objects:
 25293 ;;		On entry : 0/0
 25294 ;;		On exit  : 0/0
 25295 ;;		Unchanged: 0/0
 25296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25297 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25298 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25299 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25300 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25301 ;;Total ram usage:        6 bytes
 25302 ;; Hardware stack levels used:    1
 25303 ;; Hardware stack levels required when called:    4
 25304 ;; This function calls:
 25305 ;;		Nothing
 25306 ;; This function is called by:
 25307 ;;		_marquee_speedy
 25308 ;;		_marquee
 25309 ;;		_secret_check
 25310 ;;		_slot_Main
 25311 ;; This function uses a non-reentrant model
 25312 ;;
 25313                           
 25314                           
 25315                           ;psect for function _strlen
 25316  20D3                     _strlen:	
 25317                           
 25318                           ;incstack = 0
 25319                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0]
 25320  20D3  0872               	movf	strlen@s+1,w
 25321  20D4  00F6               	movwf	strlen@cp+1
 25322  20D5  0871               	movf	strlen@s,w
 25323  20D6  00F5               	movwf	strlen@cp
 25324  20D7                     l7026:	
 25325  20D7  0875               	movf	strlen@cp,w
 25326  20D8  0084               	movwf	4
 25327  20D9  0876               	movf	strlen@cp+1,w
 25328  20DA  0085               	movwf	5
 25329  20DB  0012               	moviw fsr0++
 25330  20DC  1903               	btfsc	3,2
 25331  20DD  28E3               	goto	l7028
 25332  20DE  3001               	movlw	1
 25333  20DF  07F5               	addwf	strlen@cp,f
 25334  20E0  3000               	movlw	0
 25335  20E1  3DF6               	addwfc	strlen@cp+1,f
 25336  20E2  28D7               	goto	l7026
 25337  20E3                     l7028:	
 25338  20E3  0971               	comf	strlen@s,w
 25339  20E4  00F3               	movwf	??_strlen
 25340  20E5  0972               	comf	strlen@s+1,w
 25341  20E6  00F4               	movwf	??_strlen+1
 25342  20E7  0AF3               	incf	??_strlen,f
 25343  20E8  1903               	skipnz
 25344  20E9  0AF4               	incf	??_strlen+1,f
 25345  20EA  0875               	movf	strlen@cp,w
 25346  20EB  0773               	addwf	??_strlen,w
 25347  20EC  00F1               	movwf	?_strlen
 25348  20ED  0876               	movf	strlen@cp+1,w
 25349  20EE  3D74               	addwfc	??_strlen+1,w
 25350  20EF  00F2               	movwf	?_strlen+1
 25351  20F0  0008               	return
 25352  20F1                     __end_of_strlen:	
 25353                           
 25354                           	psect	text61
 25355  2E4B                     __ptext61:	
 25356 ;; *************** function _nullifyBadge_segDisplayPutStr *****************
 25357 ;; Defined at:
 25358 ;;		line 113 in file "nullifyBadge.c"
 25359 ;; Parameters:    Size  Location     Type
 25360 ;;  badge           1    wreg     PTR struct t_nullifyBadg
 25361 ;;		 -> badge_inst(18), 
 25362 ;;  str             2   23[BANK0 ] PTR unsigned char 
 25363 ;;		 -> flashy_Main@hit_counter(6), STR_24(5), STR_23(43), STR_22(40), 
 25364 ;;		 -> STR_21(27), STR_20(25), STR_19(30), STR_18(35), 
 25365 ;;		 -> STR_17(22), STR_16(26), STR_15(21), STR_14(19), 
 25366 ;;		 -> STR_13(6), STR_12(8), STR_11(9), STR_10(5), 
 25367 ;;		 -> STR_7(6), STR_6(10), STR_5(6), STR_4(5), 
 25368 ;;		 -> marquee@display_string(5), marquee_speedy@display_string(5), 
 25369 ;; Auto vars:     Size  Location     Type
 25370 ;;  badge           1   25[BANK0 ] PTR struct t_nullifyBadg
 25371 ;;		 -> badge_inst(18), 
 25372 ;; Return value:  Size  Location     Type
 25373 ;;                  1    wreg      void 
 25374 ;; Registers used:
 25375 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 25376 ;; Tracked objects:
 25377 ;;		On entry : 0/0
 25378 ;;		On exit  : 0/0
 25379 ;;		Unchanged: 0/0
 25380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25381 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25382 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25383 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25384 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25385 ;;Total ram usage:        3 bytes
 25386 ;; Hardware stack levels used:    1
 25387 ;; Hardware stack levels required when called:    8
 25388 ;; This function calls:
 25389 ;;		_displayL2_PutStr
 25390 ;; This function is called by:
 25391 ;;		_marquee_speedy
 25392 ;;		_marquee
 25393 ;;		_menu_display_option
 25394 ;;		_flashy_display_option
 25395 ;;		_flashy_Main
 25396 ;; This function uses a non-reentrant model
 25397 ;;
 25398                           
 25399                           
 25400                           ;psect for function _nullifyBadge_segDisplayPutStr
 25401  2E4B                     _nullifyBadge_segDisplayPutStr:	
 25402                           
 25403                           ;incstack = 0
 25404                           ; Regs used in _nullifyBadge_segDisplayPutStr: [wreg-fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 25405                           ;nullifyBadge_segDisplayPutStr@badge stored from wreg
 25406  2E4B  0020               	movlb	0	; select bank0
 25407  2E4C  00B9               	movwf	nullifyBadge_segDisplayPutStr@badge
 25408                           
 25409                           ;nullifyBadge.c: 114: displayL2_PutStr(&badge->display, str);
 25410  2E4D  0838               	movf	nullifyBadge_segDisplayPutStr@str+1,w
 25411  2E4E  00B1               	movwf	displayL2_PutStr@str+1
 25412  2E4F  0837               	movf	nullifyBadge_segDisplayPutStr@str,w
 25413  2E50  00B0               	movwf	displayL2_PutStr@str
 25414  2E51  0839               	movf	nullifyBadge_segDisplayPutStr@badge,w
 25415  2E52  31A1  21CA         	fcall	_displayL2_PutStr
 25416  2E54  0008               	return
 25417  2E55                     __end_of_nullifyBadge_segDisplayPutStr:	
 25418                           
 25419                           	psect	text62
 25420  21CA                     __ptext62:	
 25421 ;; *************** function _displayL2_PutStr *****************
 25422 ;; Defined at:
 25423 ;;		line 55 in file "nullifyBadge_displayL2.c"
 25424 ;; Parameters:    Size  Location     Type
 25425 ;;  display         1    wreg     PTR struct t_nullifyDisp
 25426 ;;		 -> badge_inst(18), 
 25427 ;;  str             2   16[BANK0 ] PTR unsigned char 
 25428 ;;		 -> flashy_Main@hit_counter(6), STR_24(5), STR_23(43), STR_22(40), 
 25429 ;;		 -> STR_21(27), STR_20(25), STR_19(30), STR_18(35), 
 25430 ;;		 -> STR_17(22), STR_16(26), STR_15(21), STR_14(19), 
 25431 ;;		 -> STR_13(6), STR_12(8), STR_11(9), STR_10(5), 
 25432 ;;		 -> STR_7(6), STR_6(10), STR_5(6), STR_4(5), 
 25433 ;;		 -> STR_3(5), marquee@display_string(5), marquee_speedy@display_string(5), 
 25434 ;; Auto vars:     Size  Location     Type
 25435 ;;  display         1   21[BANK0 ] PTR struct t_nullifyDisp
 25436 ;;		 -> badge_inst(18), 
 25437 ;;  k               1   22[BANK0 ] unsigned char 
 25438 ;; Return value:  Size  Location     Type
 25439 ;;                  1    wreg      void 
 25440 ;; Registers used:
 25441 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 25442 ;; Tracked objects:
 25443 ;;		On entry : 0/0
 25444 ;;		On exit  : 0/0
 25445 ;;		Unchanged: 0/0
 25446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25447 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25448 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25449 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25450 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25451 ;;Total ram usage:        7 bytes
 25452 ;; Hardware stack levels used:    1
 25453 ;; Hardware stack levels required when called:    7
 25454 ;; This function calls:
 25455 ;;		_displayL2_PutChar
 25456 ;; This function is called by:
 25457 ;;		_nullifyBadge_segDisplayPutStr
 25458 ;;		_displayL2_EraseSegDisplay
 25459 ;; This function uses a non-reentrant model
 25460 ;;
 25461                           
 25462                           
 25463                           ;psect for function _displayL2_PutStr
 25464  21CA                     _displayL2_PutStr:	
 25465                           
 25466                           ;incstack = 0
 25467                           ; Regs used in _displayL2_PutStr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 25468                           ;displayL2_PutStr@display stored from wreg
 25469  21CA  0020               	movlb	0	; select bank0
 25470  21CB  00B5               	movwf	displayL2_PutStr@display
 25471                           
 25472                           ;nullifyBadge_displayL2.c: 57: u8 k = 0;
 25473  21CC  01B6               	clrf	displayL2_PutStr@k
 25474  21CD                     l6980:	
 25475                           ;nullifyBadge_displayL2.c: 59: while (str[k] != '\0') {
 25476                           
 25477  21CD  0831               	movf	displayL2_PutStr@str+1,w
 25478  21CE  00B3               	movwf	??_displayL2_PutStr+1
 25479  21CF  0830               	movf	displayL2_PutStr@str,w
 25480  21D0  00B2               	movwf	??_displayL2_PutStr
 25481  21D1  0836               	movf	displayL2_PutStr@k,w
 25482  21D2  0732               	addwf	??_displayL2_PutStr,w
 25483  21D3  0084               	movwf	4
 25484  21D4  0833               	movf	??_displayL2_PutStr+1,w
 25485  21D5  1803               	skipnc
 25486  21D6  0A33               	incf	??_displayL2_PutStr+1,w
 25487  21D7  0085               	movwf	5
 25488  21D8  0012               	moviw fsr0++
 25489  21D9  1903               	btfsc	3,2
 25490  21DA  0008               	return
 25491                           
 25492                           ;nullifyBadge_displayL2.c: 60: displayL2_PutChar(display, str[k]);
 25493  21DB  0831               	movf	displayL2_PutStr@str+1,w
 25494  21DC  00B3               	movwf	??_displayL2_PutStr+1
 25495  21DD  0830               	movf	displayL2_PutStr@str,w
 25496  21DE  00B2               	movwf	??_displayL2_PutStr
 25497  21DF  0836               	movf	displayL2_PutStr@k,w
 25498  21E0  0732               	addwf	??_displayL2_PutStr,w
 25499  21E1  0084               	movwf	4
 25500  21E2  0833               	movf	??_displayL2_PutStr+1,w
 25501  21E3  1803               	skipnc
 25502  21E4  0A33               	incf	??_displayL2_PutStr+1,w
 25503  21E5  0085               	movwf	5
 25504  21E6  0800               	movf	0,w	;code access
 25505  21E7  00B4               	movwf	??_displayL2_PutStr+2
 25506  21E8  0834               	movf	??_displayL2_PutStr+2,w
 25507  21E9  00AA               	movwf	displayL2_PutChar@c
 25508  21EA  0835               	movf	displayL2_PutStr@display,w
 25509  21EB  31A6  26B0  31A1   	fcall	_displayL2_PutChar
 25510                           
 25511                           ;nullifyBadge_displayL2.c: 61: k++;
 25512  21EE  3001               	movlw	1
 25513  21EF  0020               	movlb	0	; select bank0
 25514  21F0  00B2               	movwf	??_displayL2_PutStr
 25515  21F1  0832               	movf	??_displayL2_PutStr,w
 25516  21F2  07B6               	addwf	displayL2_PutStr@k,f
 25517  21F3  29CD               	goto	l6980
 25518  21F4                     __end_of_displayL2_PutStr:	
 25519                           
 25520                           	psect	text63
 25521  26B0                     __ptext63:	
 25522 ;; *************** function _displayL2_PutChar *****************
 25523 ;; Defined at:
 25524 ;;		line 38 in file "nullifyBadge_displayL2.c"
 25525 ;; Parameters:    Size  Location     Type
 25526 ;;  display         1    wreg     PTR struct t_nullifyDisp
 25527 ;;		 -> badge_inst(18), 
 25528 ;;  c               1   10[BANK0 ] unsigned char 
 25529 ;; Auto vars:     Size  Location     Type
 25530 ;;  display         1   15[BANK0 ] PTR struct t_nullifyDisp
 25531 ;;		 -> badge_inst(18), 
 25532 ;;  k               1   14[BANK0 ] unsigned char 
 25533 ;; Return value:  Size  Location     Type
 25534 ;;                  1    wreg      void 
 25535 ;; Registers used:
 25536 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 25537 ;; Tracked objects:
 25538 ;;		On entry : 0/0
 25539 ;;		On exit  : 0/0
 25540 ;;		Unchanged: 0/0
 25541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25542 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25543 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25544 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25545 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25546 ;;Total ram usage:        6 bytes
 25547 ;; Hardware stack levels used:    1
 25548 ;; Hardware stack levels required when called:    6
 25549 ;; This function calls:
 25550 ;;		_displayL1_SetSegChar
 25551 ;; This function is called by:
 25552 ;;		_displayL2_PutStr
 25553 ;;		_nullifyBadge_segDisplayPutChar
 25554 ;; This function uses a non-reentrant model
 25555 ;;
 25556                           
 25557                           
 25558                           ;psect for function _displayL2_PutChar
 25559  26B0                     _displayL2_PutChar:	
 25560                           
 25561                           ;incstack = 0
 25562                           ; Regs used in _displayL2_PutChar: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 25563                           ;displayL2_PutChar@display stored from wreg
 25564  26B0  0020               	movlb	0	; select bank0
 25565  26B1  00AF               	movwf	displayL2_PutChar@display
 25566                           
 25567                           ;nullifyBadge_displayL2.c: 40: display->charVect[0] = display->charVect[1];
 25568  26B2  0A2F               	incf	displayL2_PutChar@display,w
 25569  26B3  0086               	movwf	6
 25570  26B4  3001               	movlw	1	; select bank2/3
 25571  26B5  0087               	movwf	7
 25572  26B6  0801               	movf	1,w
 25573  26B7  00AB               	movwf	??_displayL2_PutChar
 25574  26B8  082F               	movf	displayL2_PutChar@display,w
 25575  26B9  0086               	movwf	6
 25576  26BA  3001               	movlw	1	; select bank2/3
 25577  26BB  0087               	movwf	7
 25578  26BC  082B               	movf	??_displayL2_PutChar,w
 25579  26BD  0081               	movwf	1
 25580                           
 25581                           ;nullifyBadge_displayL2.c: 41: display->charVect[1] = display->charVect[2];
 25582  26BE  082F               	movf	displayL2_PutChar@display,w
 25583  26BF  3E02               	addlw	2
 25584  26C0  0086               	movwf	6
 25585  26C1  3001               	movlw	1	; select bank2/3
 25586  26C2  0087               	movwf	7
 25587  26C3  0801               	movf	1,w
 25588  26C4  00AB               	movwf	??_displayL2_PutChar
 25589  26C5  0A2F               	incf	displayL2_PutChar@display,w
 25590  26C6  0086               	movwf	6
 25591  26C7  3001               	movlw	1	; select bank2/3
 25592  26C8  0087               	movwf	7
 25593  26C9  082B               	movf	??_displayL2_PutChar,w
 25594  26CA  0081               	movwf	1
 25595                           
 25596                           ;nullifyBadge_displayL2.c: 42: display->charVect[2] = display->charVect[3];
 25597  26CB  082F               	movf	displayL2_PutChar@display,w
 25598  26CC  3E03               	addlw	3
 25599  26CD  0086               	movwf	6
 25600  26CE  3001               	movlw	1	; select bank2/3
 25601  26CF  0087               	movwf	7
 25602  26D0  0801               	movf	1,w
 25603  26D1  00AB               	movwf	??_displayL2_PutChar
 25604  26D2  082F               	movf	displayL2_PutChar@display,w
 25605  26D3  3E02               	addlw	2
 25606  26D4  0086               	movwf	6
 25607  26D5  3001               	movlw	1	; select bank2/3
 25608  26D6  0087               	movwf	7
 25609  26D7  082B               	movf	??_displayL2_PutChar,w
 25610  26D8  0081               	movwf	1
 25611                           
 25612                           ;nullifyBadge_displayL2.c: 45: display->charVect[3] = c;
 25613  26D9  082A               	movf	displayL2_PutChar@c,w
 25614  26DA  00AB               	movwf	??_displayL2_PutChar
 25615  26DB  082F               	movf	displayL2_PutChar@display,w
 25616  26DC  3E03               	addlw	3
 25617  26DD  0086               	movwf	6
 25618  26DE  3001               	movlw	1	; select bank2/3
 25619  26DF  0087               	movwf	7
 25620  26E0  082B               	movf	??_displayL2_PutChar,w
 25621  26E1  0081               	movwf	1
 25622                           
 25623                           ;nullifyBadge_displayL2.c: 48: u8 k = 0;
 25624  26E2  01AE               	clrf	displayL2_PutChar@k
 25625                           
 25626                           ;nullifyBadge_displayL2.c: 49: for (k = 0; k < 4; k++) {
 25627  26E3  01AE               	clrf	displayL2_PutChar@k
 25628  26E4                     L15:	
 25629  26E4  3004               	movlw	4
 25630  26E5  022E               	subwf	displayL2_PutChar@k,w
 25631  26E6  1803               	btfsc	3,0
 25632  26E7  0008               	return
 25633                           
 25634                           ;nullifyBadge_displayL2.c: 50: displayL1_SetSegChar(&display->display_l1, display->charV
      +                          ect[k], k);
 25635  26E8  082E               	movf	displayL2_PutChar@k,w
 25636  26E9  072F               	addwf	displayL2_PutChar@display,w
 25637  26EA  00AB               	movwf	??_displayL2_PutChar
 25638  26EB  082B               	movf	??_displayL2_PutChar,w
 25639  26EC  0086               	movwf	6
 25640  26ED  3001               	movlw	1	; select bank2/3
 25641  26EE  0087               	movwf	7
 25642  26EF  0801               	movf	1,w
 25643  26F0  00AC               	movwf	??_displayL2_PutChar+1
 25644  26F1  082C               	movf	??_displayL2_PutChar+1,w
 25645  26F2  00A0               	movwf	displayL1_SetSegChar@c
 25646  26F3  082E               	movf	displayL2_PutChar@k,w
 25647  26F4  00AD               	movwf	??_displayL2_PutChar+2
 25648  26F5  082D               	movf	??_displayL2_PutChar+2,w
 25649  26F6  00A1               	movwf	displayL1_SetSegChar@charPos
 25650  26F7  082F               	movf	displayL2_PutChar@display,w
 25651  26F8  3E07               	addlw	7
 25652  26F9  31A3  23FC  31A6   	fcall	_displayL1_SetSegChar
 25653  26FC  3001               	movlw	1
 25654  26FD  0020               	movlb	0	; select bank0
 25655  26FE  00AB               	movwf	??_displayL2_PutChar
 25656  26FF  082B               	movf	??_displayL2_PutChar,w
 25657  2700  07AE               	addwf	displayL2_PutChar@k,f
 25658  2701  2EE4               	goto	L15
 25659  2702                     __end_of_displayL2_PutChar:	
 25660                           
 25661                           	psect	text64
 25662  23FC                     __ptext64:	
 25663 ;; *************** function _displayL1_SetSegChar *****************
 25664 ;; Defined at:
 25665 ;;		line 18 in file "nullifyBadge_displayL1.c"
 25666 ;; Parameters:    Size  Location     Type
 25667 ;;  display         1    wreg     PTR struct t_nullifyDisp
 25668 ;;		 -> badge_inst(18), 
 25669 ;;  c               1    0[BANK0 ] unsigned char 
 25670 ;;  charPos         1    1[BANK0 ] unsigned char 
 25671 ;; Auto vars:     Size  Location     Type
 25672 ;;  display         1    7[BANK0 ] PTR struct t_nullifyDisp
 25673 ;;		 -> badge_inst(18), 
 25674 ;;  charData        2    8[BANK0 ] unsigned int 
 25675 ;;  dispDataVect    1    6[BANK0 ] unsigned char 
 25676 ;; Return value:  Size  Location     Type
 25677 ;;                  1    wreg      void 
 25678 ;; Registers used:
 25679 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 25680 ;; Tracked objects:
 25681 ;;		On entry : 0/0
 25682 ;;		On exit  : 0/0
 25683 ;;		Unchanged: 0/0
 25684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25685 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25686 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25687 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25688 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25689 ;;Total ram usage:       10 bytes
 25690 ;; Hardware stack levels used:    1
 25691 ;; Hardware stack levels required when called:    5
 25692 ;; This function calls:
 25693 ;;		_displayCharReverse
 25694 ;; This function is called by:
 25695 ;;		_displayL2_PutChar
 25696 ;;		_nullifyBadge_segDisplayPutCharPos
 25697 ;;		_displayL2_PrintChar
 25698 ;; This function uses a non-reentrant model
 25699 ;;
 25700                           
 25701                           
 25702                           ;psect for function _displayL1_SetSegChar
 25703  23FC                     _displayL1_SetSegChar:	
 25704                           
 25705                           ;incstack = 0
 25706                           ; Regs used in _displayL1_SetSegChar: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 25707                           ;displayL1_SetSegChar@display stored from wreg
 25708  23FC  0020               	movlb	0	; select bank0
 25709  23FD  00A7               	movwf	displayL1_SetSegChar@display
 25710                           
 25711                           ;nullifyBadge_displayL1.c: 23: u16 charData = asciiCharTableLookup[(u8) c];
 25712  23FE  0820               	movf	displayL1_SetSegChar@c,w
 25713  23FF  00A2               	movwf	??_displayL1_SetSegChar
 25714  2400  01A3               	clrf	??_displayL1_SetSegChar+1
 25715  2401  35A2               	lslf	??_displayL1_SetSegChar,f
 25716  2402  0DA3               	rlf	??_displayL1_SetSegChar+1,f
 25717  2403  30F0               	movlw	240
 25718  2404  00A4               	movwf	??_displayL1_SetSegChar+2
 25719  2405  3026               	movlw	38
 25720  2406  00A5               	movwf	??_displayL1_SetSegChar+3
 25721  2407  0822               	movf	??_displayL1_SetSegChar,w
 25722  2408  0724               	addwf	??_displayL1_SetSegChar+2,w
 25723  2409  0086               	movwf	6
 25724  240A  0823               	movf	??_displayL1_SetSegChar+1,w
 25725  240B  3D25               	addwfc	??_displayL1_SetSegChar+3,w
 25726  240C  0087               	movwf	7
 25727  240D  3F40               	moviw [0]fsr1
 25728  240E  00A8               	movwf	displayL1_SetSegChar@charData
 25729  240F  3F41               	moviw [1]fsr1
 25730  2410  00A9               	movwf	displayL1_SetSegChar@charData+1
 25731                           
 25732                           ;nullifyBadge_displayL1.c: 29: if (charPos & 0x1) {
 25733  2411  1C21               	btfss	displayL1_SetSegChar@charPos,0
 25734  2412  2C1E               	goto	l6918
 25735                           
 25736                           ;nullifyBadge_displayL1.c: 30: charData = displayCharReverse(charData);
 25737  2413  0829               	movf	displayL1_SetSegChar@charData+1,w
 25738  2414  00F2               	movwf	displayCharReverse@cVal+1
 25739  2415  0828               	movf	displayL1_SetSegChar@charData,w
 25740  2416  00F1               	movwf	displayCharReverse@cVal
 25741  2417  31A2  2221         	fcall	_displayCharReverse
 25742  2419  0872               	movf	?_displayCharReverse+1,w
 25743  241A  0020               	movlb	0	; select bank0
 25744  241B  00A9               	movwf	displayL1_SetSegChar@charData+1
 25745  241C  0871               	movf	?_displayCharReverse,w
 25746  241D  00A8               	movwf	displayL1_SetSegChar@charData
 25747  241E                     l6918:	
 25748                           
 25749                           ;nullifyBadge_displayL1.c: 31: }
 25750                           ;nullifyBadge_displayL1.c: 61: u8 dispDataVectBaseIdx = 8 - ( charPos << 1 );
 25751  241E  3521               	lslf	displayL1_SetSegChar@charPos,w
 25752  241F  3AFF               	xorlw	255
 25753  2420  3E01               	addlw	1
 25754  2421  3E08               	addlw	8
 25755  2422  00A2               	movwf	??_displayL1_SetSegChar
 25756  2423  0822               	movf	??_displayL1_SetSegChar,w
 25757  2424  00A6               	movwf	displayL1_SetSegChar@dispDataVectBaseIdx
 25758                           
 25759                           ;nullifyBadge_displayL1.c: 64: display->displayVect[dispDataVectBaseIdx] = (u8) (charDat
      +                          a >> 8);
 25760  2425  0829               	movf	displayL1_SetSegChar@charData+1,w
 25761  2426  00A2               	movwf	??_displayL1_SetSegChar
 25762  2427  0826               	movf	displayL1_SetSegChar@dispDataVectBaseIdx,w
 25763  2428  0727               	addwf	displayL1_SetSegChar@display,w
 25764  2429  00A3               	movwf	??_displayL1_SetSegChar+1
 25765  242A  0823               	movf	??_displayL1_SetSegChar+1,w
 25766  242B  0086               	movwf	6
 25767  242C  3001               	movlw	1	; select bank2/3
 25768  242D  0087               	movwf	7
 25769  242E  0822               	movf	??_displayL1_SetSegChar,w
 25770  242F  0081               	movwf	1
 25771                           
 25772                           ;nullifyBadge_displayL1.c: 67: display->displayVect[dispDataVectBaseIdx+1] = (u8) (charD
      +                          ata & 0xFF);
 25773  2430  0828               	movf	displayL1_SetSegChar@charData,w
 25774  2431  00A2               	movwf	??_displayL1_SetSegChar
 25775  2432  0826               	movf	displayL1_SetSegChar@dispDataVectBaseIdx,w
 25776  2433  3E01               	addlw	1
 25777  2434  0727               	addwf	displayL1_SetSegChar@display,w
 25778  2435  00A3               	movwf	??_displayL1_SetSegChar+1
 25779  2436  0823               	movf	??_displayL1_SetSegChar+1,w
 25780  2437  0086               	movwf	6
 25781  2438  3001               	movlw	1	; select bank2/3
 25782  2439  0087               	movwf	7
 25783  243A  0822               	movf	??_displayL1_SetSegChar,w
 25784  243B  0081               	movwf	1
 25785  243C  0008               	return
 25786  243D                     __end_of_displayL1_SetSegChar:	
 25787                           
 25788                           	psect	text65
 25789  2221                     __ptext65:	
 25790 ;; *************** function _displayCharReverse *****************
 25791 ;; Defined at:
 25792 ;;		line 105 in file "nullifyBadge_displayL1.c"
 25793 ;; Parameters:    Size  Location     Type
 25794 ;;  cVal            2    1[COMMON] unsigned int 
 25795 ;; Auto vars:     Size  Location     Type
 25796 ;;  k               1   11[COMMON] unsigned char 
 25797 ;;  retValUpperR    1   10[COMMON] unsigned char 
 25798 ;;  retValUpper     1    9[COMMON] unsigned char 
 25799 ;;  retValLower     1    8[COMMON] unsigned char 
 25800 ;; Return value:  Size  Location     Type
 25801 ;;                  2    1[COMMON] unsigned int 
 25802 ;; Registers used:
 25803 ;;		wreg, status,2, status,0
 25804 ;; Tracked objects:
 25805 ;;		On entry : 0/0
 25806 ;;		On exit  : 0/0
 25807 ;;		Unchanged: 0/0
 25808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25809 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25810 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25811 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25812 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25813 ;;Total ram usage:       11 bytes
 25814 ;; Hardware stack levels used:    1
 25815 ;; Hardware stack levels required when called:    4
 25816 ;; This function calls:
 25817 ;;		Nothing
 25818 ;; This function is called by:
 25819 ;;		_displayL1_SetSegChar
 25820 ;; This function uses a non-reentrant model
 25821 ;;
 25822                           
 25823                           
 25824                           ;psect for function _displayCharReverse
 25825  2221                     _displayCharReverse:	
 25826                           
 25827                           ;nullifyBadge_displayL1.c: 106: u8 retValUpper, retValLower, retValUpperRev;
 25828                           ;nullifyBadge_displayL1.c: 108: u8 k;
 25829                           ;nullifyBadge_displayL1.c: 111: retValUpper = cVal >> 8;
 25830                           
 25831                           ;incstack = 0
 25832                           ; Regs used in _displayCharReverse: [wreg+status,2+status,0]
 25833  2221  0872               	movf	displayCharReverse@cVal+1,w
 25834  2222  00F3               	movwf	??_displayCharReverse
 25835  2223  0873               	movf	??_displayCharReverse,w
 25836  2224  00F9               	movwf	displayCharReverse@retValUpper
 25837                           
 25838                           ;nullifyBadge_displayL1.c: 112: retValLower = cVal & 0xFF;
 25839  2225  0871               	movf	displayCharReverse@cVal,w
 25840  2226  00F3               	movwf	??_displayCharReverse
 25841  2227  0873               	movf	??_displayCharReverse,w
 25842  2228  00F8               	movwf	displayCharReverse@retValLower
 25843                           
 25844                           ;nullifyBadge_displayL1.c: 115: retValUpperRev = 0;
 25845  2229  01FA               	clrf	displayCharReverse@retValUpperRev
 25846                           
 25847                           ;nullifyBadge_displayL1.c: 117: for (k = 0; k < 7; k++) {
 25848  222A  01FB               	clrf	displayCharReverse@k
 25849  222B  3007               	movlw	7
 25850  222C  027B               	subwf	displayCharReverse@k,w
 25851  222D  1803               	btfsc	3,0
 25852  222E  2A40               	goto	l6900
 25853  222F                     l6892:	
 25854                           
 25855                           ;nullifyBadge_displayL1.c: 118: retValUpperRev |= (retValUpper & 0x1);
 25856  222F  0879               	movf	displayCharReverse@retValUpper,w
 25857  2230  3901               	andlw	1
 25858  2231  00F3               	movwf	??_displayCharReverse
 25859  2232  0873               	movf	??_displayCharReverse,w
 25860  2233  04FA               	iorwf	displayCharReverse@retValUpperRev,f
 25861                           
 25862                           ;nullifyBadge_displayL1.c: 119: retValUpper >>= 1;
 25863  2234  1003               	clrc
 25864  2235  0CF9               	rrf	displayCharReverse@retValUpper,f
 25865                           
 25866                           ;nullifyBadge_displayL1.c: 120: retValUpperRev <<= 1;
 25867  2236  1003               	clrc
 25868  2237  0DFA               	rlf	displayCharReverse@retValUpperRev,f
 25869  2238  3001               	movlw	1
 25870  2239  00F3               	movwf	??_displayCharReverse
 25871  223A  0873               	movf	??_displayCharReverse,w
 25872  223B  07FB               	addwf	displayCharReverse@k,f
 25873  223C  3007               	movlw	7
 25874  223D  027B               	subwf	displayCharReverse@k,w
 25875  223E  1C03               	skipc
 25876  223F  2A2F               	goto	l6892
 25877  2240                     l6900:	
 25878                           
 25879                           ;nullifyBadge_displayL1.c: 121: }
 25880                           ;nullifyBadge_displayL1.c: 123: return (retValLower << 8) | (retValUpperRev);
 25881  2240  087A               	movf	displayCharReverse@retValUpperRev,w
 25882  2241  00F3               	movwf	??_displayCharReverse
 25883  2242  01F4               	clrf	??_displayCharReverse+1
 25884  2243  0878               	movf	displayCharReverse@retValLower,w
 25885  2244  00F5               	movwf	??_displayCharReverse+2
 25886  2245  01F6               	clrf	??_displayCharReverse+3
 25887  2246  0875               	movf	??_displayCharReverse+2,w
 25888  2247  00F6               	movwf	??_displayCharReverse+3
 25889  2248  01F5               	clrf	??_displayCharReverse+2
 25890  2249  0873               	movf	??_displayCharReverse,w
 25891  224A  0475               	iorwf	??_displayCharReverse+2,w
 25892  224B  00F1               	movwf	?_displayCharReverse
 25893  224C  0874               	movf	??_displayCharReverse+1,w
 25894  224D  0476               	iorwf	??_displayCharReverse+3,w
 25895  224E  00F2               	movwf	?_displayCharReverse+1
 25896  224F  0008               	return
 25897  2250                     __end_of_displayCharReverse:	
 25898                           
 25899                           	psect	text66
 25900  2E03                     __ptext66:	
 25901 ;; *************** function _nullifyBadge_segDisplayForceUpdate *****************
 25902 ;; Defined at:
 25903 ;;		line 108 in file "nullifyBadge.c"
 25904 ;; Parameters:    Size  Location     Type
 25905 ;;  badge           1    wreg     PTR struct t_nullifyBadg
 25906 ;;		 -> badge_inst(18), 
 25907 ;; Auto vars:     Size  Location     Type
 25908 ;;  badge           1   11[BANK0 ] PTR struct t_nullifyBadg
 25909 ;;		 -> badge_inst(18), 
 25910 ;; Return value:  Size  Location     Type
 25911 ;;                  1    wreg      void 
 25912 ;; Registers used:
 25913 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 25914 ;; Tracked objects:
 25915 ;;		On entry : 0/0
 25916 ;;		On exit  : 0/0
 25917 ;;		Unchanged: 0/0
 25918 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25919 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25920 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25921 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25922 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25923 ;;Total ram usage:        1 bytes
 25924 ;; Hardware stack levels used:    1
 25925 ;; Hardware stack levels required when called:    8
 25926 ;; This function calls:
 25927 ;;		_displayL2_ForceUpdate
 25928 ;; This function is called by:
 25929 ;;		_marquee_speedy
 25930 ;;		_marquee
 25931 ;;		_menu_display_option
 25932 ;;		_flashy_display_option
 25933 ;;		_flashy_Main
 25934 ;; This function uses a non-reentrant model
 25935 ;;
 25936                           
 25937                           
 25938                           ;psect for function _nullifyBadge_segDisplayForceUpdate
 25939  2E03                     _nullifyBadge_segDisplayForceUpdate:	
 25940                           
 25941                           ;incstack = 0
 25942                           ; Regs used in _nullifyBadge_segDisplayForceUpdate: [wreg+fsr1l+fsr1h+status,2+status,0+
      +                          pclath+cstack]
 25943                           ;nullifyBadge_segDisplayForceUpdate@badge stored from wreg
 25944  2E03  0020               	movlb	0	; select bank0
 25945  2E04  00AB               	movwf	nullifyBadge_segDisplayForceUpdate@badge
 25946                           
 25947                           ;nullifyBadge.c: 109: displayL2_ForceUpdate(&badge->display);
 25948  2E05  082B               	movf	nullifyBadge_segDisplayForceUpdate@badge,w
 25949  2E06  31AD  25FD         	fcall	_displayL2_ForceUpdate
 25950  2E08  0008               	return
 25951  2E09                     __end_of_nullifyBadge_segDisplayForceUpdate:	
 25952                           
 25953                           	psect	text67
 25954  2DFD                     __ptext67:	
 25955 ;; *************** function _displayL2_ForceUpdate *****************
 25956 ;; Defined at:
 25957 ;;		line 79 in file "nullifyBadge_displayL2.c"
 25958 ;; Parameters:    Size  Location     Type
 25959 ;;  display         1    wreg     PTR struct t_nullifyDisp
 25960 ;;		 -> badge_inst(18), 
 25961 ;; Auto vars:     Size  Location     Type
 25962 ;;  display         1   11[COMMON] PTR struct t_nullifyDisp
 25963 ;;		 -> badge_inst(18), 
 25964 ;; Return value:  Size  Location     Type
 25965 ;;                  1    wreg      void 
 25966 ;; Registers used:
 25967 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 25968 ;; Tracked objects:
 25969 ;;		On entry : 0/0
 25970 ;;		On exit  : 0/0
 25971 ;;		Unchanged: 0/0
 25972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25973 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25974 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25975 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25976 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25977 ;;Total ram usage:        1 bytes
 25978 ;; Hardware stack levels used:    1
 25979 ;; Hardware stack levels required when called:    7
 25980 ;; This function calls:
 25981 ;;		_displayL1_Update
 25982 ;; This function is called by:
 25983 ;;		_nullifyBadge_segDisplayForceUpdate
 25984 ;; This function uses a non-reentrant model
 25985 ;;
 25986                           
 25987                           
 25988                           ;psect for function _displayL2_ForceUpdate
 25989  2DFD                     _displayL2_ForceUpdate:	
 25990                           
 25991                           ;incstack = 0
 25992                           ; Regs used in _displayL2_ForceUpdate: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 25993                           ;displayL2_ForceUpdate@display stored from wreg
 25994  2DFD  00FB               	movwf	displayL2_ForceUpdate@display
 25995                           
 25996                           ;nullifyBadge_displayL2.c: 80: displayL1_Update(&display->display_l1);
 25997  2DFE  087B               	movf	displayL2_ForceUpdate@display,w
 25998  2DFF  3E07               	addlw	7
 25999  2E00  31AE  26F8         	fcall	_displayL1_Update
 26000  2E02  0008               	return
 26001  2E03                     __end_of_displayL2_ForceUpdate:	
 26002                           
 26003                           	psect	text68
 26004  21F4                     __ptext68:	
 26005 ;; *************** function ___lwmod *****************
 26006 ;; Defined at:
 26007 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwmod.c"
 26008 ;; Parameters:    Size  Location     Type
 26009 ;;  divisor         2   11[BANK0 ] unsigned int 
 26010 ;;  dividend        2   13[BANK0 ] unsigned int 
 26011 ;; Auto vars:     Size  Location     Type
 26012 ;;  counter         1   10[COMMON] unsigned char 
 26013 ;; Return value:  Size  Location     Type
 26014 ;;                  2   11[BANK0 ] unsigned int 
 26015 ;; Registers used:
 26016 ;;		wreg, status,2, status,0
 26017 ;; Tracked objects:
 26018 ;;		On entry : 0/0
 26019 ;;		On exit  : 0/0
 26020 ;;		Unchanged: 0/0
 26021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26022 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26023 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26024 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26025 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26026 ;;Total ram usage:        6 bytes
 26027 ;; Hardware stack levels used:    1
 26028 ;; Hardware stack levels required when called:    4
 26029 ;; This function calls:
 26030 ;;		Nothing
 26031 ;; This function is called by:
 26032 ;;		_marquee_speedy
 26033 ;;		_marquee
 26034 ;;		_led_roundabout
 26035 ;;		_led_curtain
 26036 ;;		_led_Parody
 26037 ;;		_menu_display_option
 26038 ;;		_locked_Main
 26039 ;;		_slot_Setup
 26040 ;;		_slot_Main
 26041 ;;		_sprintf
 26042 ;; This function uses a non-reentrant model
 26043 ;;
 26044                           
 26045                           
 26046                           ;psect for function ___lwmod
 26047  21F4                     ___lwmod:	
 26048                           
 26049                           ;incstack = 0
 26050                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
 26051  21F4  0020               	movlb	0	; select bank0
 26052  21F5  082B               	movf	___lwmod@divisor,w
 26053  21F6  042C               	iorwf	___lwmod@divisor+1,w
 26054  21F7  1903               	btfsc	3,2
 26055  21F8  2A1C               	goto	l7128
 26056  21F9  01FA               	clrf	___lwmod@counter
 26057  21FA  0AFA               	incf	___lwmod@counter,f
 26058  21FB                     l7118:	
 26059  21FB  1BAC               	btfsc	___lwmod@divisor+1,7
 26060  21FC  2A07               	goto	l7120
 26061  21FD  3001               	movlw	1
 26062  21FE                     u4285:	
 26063  21FE  35AB               	lslf	___lwmod@divisor,f
 26064  21FF  0DAC               	rlf	___lwmod@divisor+1,f
 26065  2200  0B89               	decfsz	9,f
 26066  2201  29FE               	goto	u4285
 26067  2202  3001               	movlw	1
 26068  2203  00F9               	movwf	??___lwmod
 26069  2204  0879               	movf	??___lwmod,w
 26070  2205  07FA               	addwf	___lwmod@counter,f
 26071  2206  29FB               	goto	l7118
 26072  2207                     l7120:	
 26073  2207  082C               	movf	___lwmod@divisor+1,w
 26074  2208  022E               	subwf	___lwmod@dividend+1,w
 26075  2209  1D03               	skipz
 26076  220A  2A0D               	goto	u4305
 26077  220B  082B               	movf	___lwmod@divisor,w
 26078  220C  022D               	subwf	___lwmod@dividend,w
 26079  220D                     u4305:	
 26080  220D  1C03               	skipc
 26081  220E  2A13               	goto	l7124
 26082  220F  082B               	movf	___lwmod@divisor,w
 26083  2210  02AD               	subwf	___lwmod@dividend,f
 26084  2211  082C               	movf	___lwmod@divisor+1,w
 26085  2212  3BAE               	subwfb	___lwmod@dividend+1,f
 26086  2213                     l7124:	
 26087  2213  3001               	movlw	1
 26088  2214                     u4315:	
 26089  2214  36AC               	lsrf	___lwmod@divisor+1,f
 26090  2215  0CAB               	rrf	___lwmod@divisor,f
 26091  2216  0B89               	decfsz	9,f
 26092  2217  2A14               	goto	u4315
 26093  2218  3001               	movlw	1
 26094  2219  02FA               	subwf	___lwmod@counter,f
 26095  221A  1D03               	btfss	3,2
 26096  221B  2A07               	goto	l7120
 26097  221C                     l7128:	
 26098  221C  082E               	movf	___lwmod@dividend+1,w
 26099  221D  00AC               	movwf	?___lwmod+1
 26100  221E  082D               	movf	___lwmod@dividend,w
 26101  221F  00AB               	movwf	?___lwmod
 26102  2220  0008               	return
 26103  2221                     __end_of___lwmod:	
 26104                           
 26105                           	psect	text69
 26106  22E5                     __ptext69:	
 26107 ;; *************** function ___lwdiv *****************
 26108 ;; Defined at:
 26109 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwdiv.c"
 26110 ;; Parameters:    Size  Location     Type
 26111 ;;  divisor         2    1[COMMON] unsigned int 
 26112 ;;  dividend        2    3[COMMON] unsigned int 
 26113 ;; Auto vars:     Size  Location     Type
 26114 ;;  quotient        2    7[COMMON] unsigned int 
 26115 ;;  counter         1    6[COMMON] unsigned char 
 26116 ;; Return value:  Size  Location     Type
 26117 ;;                  2    1[COMMON] unsigned int 
 26118 ;; Registers used:
 26119 ;;		wreg, status,2, status,0
 26120 ;; Tracked objects:
 26121 ;;		On entry : 0/0
 26122 ;;		On exit  : 0/0
 26123 ;;		Unchanged: 0/0
 26124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26125 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26126 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26127 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26128 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26129 ;;Total ram usage:        8 bytes
 26130 ;; Hardware stack levels used:    1
 26131 ;; Hardware stack levels required when called:    4
 26132 ;; This function calls:
 26133 ;;		Nothing
 26134 ;; This function is called by:
 26135 ;;		_marquee_speedy
 26136 ;;		_marquee
 26137 ;;		_sprintf
 26138 ;; This function uses a non-reentrant model
 26139 ;;
 26140                           
 26141                           
 26142                           ;psect for function ___lwdiv
 26143  22E5                     ___lwdiv:	
 26144                           
 26145                           ;incstack = 0
 26146                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 26147  22E5  01F7               	clrf	___lwdiv@quotient
 26148  22E6  01F8               	clrf	___lwdiv@quotient+1
 26149  22E7  0871               	movf	___lwdiv@divisor,w
 26150  22E8  0472               	iorwf	___lwdiv@divisor+1,w
 26151  22E9  1903               	btfsc	3,2
 26152  22EA  2B14               	goto	l7106
 26153  22EB  01F6               	clrf	___lwdiv@counter
 26154  22EC  0AF6               	incf	___lwdiv@counter,f
 26155  22ED                     l7094:	
 26156  22ED  1BF2               	btfsc	___lwdiv@divisor+1,7
 26157  22EE  2AF9               	goto	l7096
 26158  22EF  3001               	movlw	1
 26159  22F0                     u4215:	
 26160  22F0  35F1               	lslf	___lwdiv@divisor,f
 26161  22F1  0DF2               	rlf	___lwdiv@divisor+1,f
 26162  22F2  0B89               	decfsz	9,f
 26163  22F3  2AF0               	goto	u4215
 26164  22F4  3001               	movlw	1
 26165  22F5  00F5               	movwf	??___lwdiv
 26166  22F6  0875               	movf	??___lwdiv,w
 26167  22F7  07F6               	addwf	___lwdiv@counter,f
 26168  22F8  2AED               	goto	l7094
 26169  22F9                     l7096:	
 26170  22F9  3001               	movlw	1
 26171  22FA                     u4235:	
 26172  22FA  35F7               	lslf	___lwdiv@quotient,f
 26173  22FB  0DF8               	rlf	___lwdiv@quotient+1,f
 26174  22FC  0B89               	decfsz	9,f
 26175  22FD  2AFA               	goto	u4235
 26176  22FE  0872               	movf	___lwdiv@divisor+1,w
 26177  22FF  0274               	subwf	___lwdiv@dividend+1,w
 26178  2300  1D03               	skipz
 26179  2301  2B04               	goto	u4245
 26180  2302  0871               	movf	___lwdiv@divisor,w
 26181  2303  0273               	subwf	___lwdiv@dividend,w
 26182  2304                     u4245:	
 26183  2304  1C03               	skipc
 26184  2305  2B0B               	goto	l7102
 26185  2306  0871               	movf	___lwdiv@divisor,w
 26186  2307  02F3               	subwf	___lwdiv@dividend,f
 26187  2308  0872               	movf	___lwdiv@divisor+1,w
 26188  2309  3BF4               	subwfb	___lwdiv@dividend+1,f
 26189  230A  1477               	bsf	___lwdiv@quotient,0
 26190  230B                     l7102:	
 26191  230B  3001               	movlw	1
 26192  230C                     u4255:	
 26193  230C  36F2               	lsrf	___lwdiv@divisor+1,f
 26194  230D  0CF1               	rrf	___lwdiv@divisor,f
 26195  230E  0B89               	decfsz	9,f
 26196  230F  2B0C               	goto	u4255
 26197  2310  3001               	movlw	1
 26198  2311  02F6               	subwf	___lwdiv@counter,f
 26199  2312  1D03               	btfss	3,2
 26200  2313  2AF9               	goto	l7096
 26201  2314                     l7106:	
 26202  2314  0878               	movf	___lwdiv@quotient+1,w
 26203  2315  00F2               	movwf	?___lwdiv+1
 26204  2316  0877               	movf	___lwdiv@quotient,w
 26205  2317  00F1               	movwf	?___lwdiv
 26206  2318  0008               	return
 26207  2319                     __end_of___lwdiv:	
 26208                           
 26209                           	psect	text70
 26210  2098                     __ptext70:	
 26211 ;; *************** function _TMR0_Read16bitTimer *****************
 26212 ;; Defined at:
 26213 ;;		line 109 in file "mcc_generated_files/tmr0.c"
 26214 ;; Parameters:    Size  Location     Type
 26215 ;;		None
 26216 ;; Auto vars:     Size  Location     Type
 26217 ;;  readVal         2    8[COMMON] unsigned int 
 26218 ;;  readValHigh     1   11[COMMON] unsigned char 
 26219 ;;  readValLow      1   10[COMMON] unsigned char 
 26220 ;; Return value:  Size  Location     Type
 26221 ;;                  2    1[COMMON] unsigned int 
 26222 ;; Registers used:
 26223 ;;		wreg, status,2, status,0
 26224 ;; Tracked objects:
 26225 ;;		On entry : 0/0
 26226 ;;		On exit  : 0/0
 26227 ;;		Unchanged: 0/0
 26228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26229 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26230 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26231 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26232 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26233 ;;Total ram usage:       11 bytes
 26234 ;; Hardware stack levels used:    1
 26235 ;; Hardware stack levels required when called:    4
 26236 ;; This function calls:
 26237 ;;		Nothing
 26238 ;; This function is called by:
 26239 ;;		_scheduler_TaskRun
 26240 ;;		_schedulerExecute
 26241 ;; This function uses a non-reentrant model
 26242 ;;
 26243                           
 26244                           
 26245                           ;psect for function _TMR0_Read16bitTimer
 26246  2098                     _TMR0_Read16bitTimer:	
 26247                           
 26248                           ;tmr0.c: 111: uint16_t readVal;
 26249                           ;tmr0.c: 112: uint8_t readValLow;
 26250                           ;tmr0.c: 113: uint8_t readValHigh;
 26251                           ;tmr0.c: 115: readValLow = TMR0L;
 26252                           
 26253                           ;incstack = 0
 26254                           ; Regs used in _TMR0_Read16bitTimer: [wreg+status,2+status,0]
 26255  2098  0020               	movlb	0	; select bank0
 26256  2099  0815               	movf	21,w	;volatile
 26257  209A  00F3               	movwf	??_TMR0_Read16bitTimer
 26258  209B  0873               	movf	??_TMR0_Read16bitTimer,w
 26259  209C  00FA               	movwf	TMR0_Read16bitTimer@readValLow
 26260                           
 26261                           ;tmr0.c: 116: readValHigh = TMR0H;
 26262  209D  0816               	movf	22,w	;volatile
 26263  209E  00F3               	movwf	??_TMR0_Read16bitTimer
 26264  209F  0873               	movf	??_TMR0_Read16bitTimer,w
 26265  20A0  00FB               	movwf	TMR0_Read16bitTimer@readValHigh
 26266                           
 26267                           ;tmr0.c: 117: readVal = ((uint16_t)readValHigh << 8) + readValLow;
 26268  20A1  087A               	movf	TMR0_Read16bitTimer@readValLow,w
 26269  20A2  00F3               	movwf	??_TMR0_Read16bitTimer
 26270  20A3  01F4               	clrf	??_TMR0_Read16bitTimer+1
 26271  20A4  087B               	movf	TMR0_Read16bitTimer@readValHigh,w
 26272  20A5  00F5               	movwf	??_TMR0_Read16bitTimer+2
 26273  20A6  01F6               	clrf	??_TMR0_Read16bitTimer+3
 26274  20A7  0875               	movf	??_TMR0_Read16bitTimer+2,w
 26275  20A8  00F6               	movwf	??_TMR0_Read16bitTimer+3
 26276  20A9  01F5               	clrf	??_TMR0_Read16bitTimer+2
 26277  20AA  0873               	movf	??_TMR0_Read16bitTimer,w
 26278  20AB  0775               	addwf	??_TMR0_Read16bitTimer+2,w
 26279  20AC  00F8               	movwf	TMR0_Read16bitTimer@readVal
 26280  20AD  0874               	movf	??_TMR0_Read16bitTimer+1,w
 26281  20AE  3D76               	addwfc	??_TMR0_Read16bitTimer+3,w
 26282  20AF  00F9               	movwf	TMR0_Read16bitTimer@readVal+1
 26283                           
 26284                           ;tmr0.c: 119: return readVal;
 26285  20B0  0879               	movf	TMR0_Read16bitTimer@readVal+1,w
 26286  20B1  00F2               	movwf	?_TMR0_Read16bitTimer+1
 26287  20B2  0878               	movf	TMR0_Read16bitTimer@readVal,w
 26288  20B3  00F1               	movwf	?_TMR0_Read16bitTimer
 26289  20B4  0008               	return
 26290  20B5                     __end_of_TMR0_Read16bitTimer:	
 26291                           
 26292                           	psect	text71
 26293  27AB                     __ptext71:	
 26294 ;; *************** function _nullifyBadge_platformInit *****************
 26295 ;; Defined at:
 26296 ;;		line 13 in file "nullifyBadge.c"
 26297 ;; Parameters:    Size  Location     Type
 26298 ;;  badge           1    wreg     PTR struct t_nullifyBadg
 26299 ;;		 -> badge_inst(18), 
 26300 ;; Auto vars:     Size  Location     Type
 26301 ;;  badge           1   12[BANK0 ] PTR struct t_nullifyBadg
 26302 ;;		 -> badge_inst(18), 
 26303 ;; Return value:  Size  Location     Type
 26304 ;;                  1    wreg      void 
 26305 ;; Registers used:
 26306 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 26307 ;; Tracked objects:
 26308 ;;		On entry : 0/0
 26309 ;;		On exit  : 0/0
 26310 ;;		Unchanged: 0/0
 26311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26312 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26313 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26314 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26315 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26316 ;;Total ram usage:        1 bytes
 26317 ;; Hardware stack levels used:    1
 26318 ;; Hardware stack levels required when called:    9
 26319 ;; This function calls:
 26320 ;;		_OSCILLATOR_Initialize
 26321 ;;		_PIN_MANAGER_Initialize
 26322 ;;		_PWM1_Initialize
 26323 ;;		_PWM1_LoadDutyValue
 26324 ;;		_PWM2_Initialize
 26325 ;;		_PWM2_LoadDutyValue
 26326 ;;		_PWM5_Initialize
 26327 ;;		_PWM5_LoadDutyValue
 26328 ;;		_PWM6_Initialize
 26329 ;;		_PWM6_LoadDutyValue
 26330 ;;		_SPI1_Initialize
 26331 ;;		_SYSTEM_Initialize
 26332 ;;		_TMR0_Initialize
 26333 ;;		_TMR2_Initialize
 26334 ;;		_TMR4_Initialize
 26335 ;;		_displayL2_Initialize
 26336 ;; This function is called by:
 26337 ;;		_main
 26338 ;; This function uses a non-reentrant model
 26339 ;;
 26340                           
 26341                           
 26342                           ;psect for function _nullifyBadge_platformInit
 26343  27AB                     _nullifyBadge_platformInit:	
 26344                           
 26345                           ;incstack = 0
 26346                           ; Regs used in _nullifyBadge_platformInit: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 26347                           ;nullifyBadge_platformInit@badge stored from wreg
 26348  27AB  0020               	movlb	0	; select bank0
 26349  27AC  00AC               	movwf	nullifyBadge_platformInit@badge
 26350                           
 26351                           ;nullifyBadge.c: 15: SYSTEM_Initialize();
 26352  27AD  31A1  210F  31A7   	fcall	_SYSTEM_Initialize
 26353                           
 26354                           ;nullifyBadge.c: 16: OSCILLATOR_Initialize();
 26355  27B0  31AE  2637  31A7   	fcall	_OSCILLATOR_Initialize
 26356                           
 26357                           ;nullifyBadge.c: 19: TMR0_Initialize();
 26358  27B3  31A0  20B5  31A7   	fcall	_TMR0_Initialize
 26359                           
 26360                           ;nullifyBadge.c: 20: TMR2_Initialize();
 26361  27B6  31AE  2641  31A7   	fcall	_TMR2_Initialize
 26362                           
 26363                           ;nullifyBadge.c: 21: TMR4_Initialize();
 26364  27B9  31AE  2676  31A7   	fcall	_TMR4_Initialize
 26365                           
 26366                           ;nullifyBadge.c: 23: PIN_MANAGER_Initialize();
 26367  27BC  31A7  2756  31A7   	fcall	_PIN_MANAGER_Initialize
 26368                           
 26369                           ;nullifyBadge.c: 24: PWM1_Initialize();
 26370  27BF  31AE  2660  31A7   	fcall	_PWM1_Initialize
 26371                           
 26372                           ;nullifyBadge.c: 26: PWM2_Initialize();
 26373  27C2  31AE  266B  31A7   	fcall	_PWM2_Initialize
 26374                           
 26375                           ;nullifyBadge.c: 27: PWM5_Initialize();
 26376  27C5  31AE  268C  31A7   	fcall	_PWM5_Initialize
 26377                           
 26378                           ;nullifyBadge.c: 28: PWM6_Initialize();
 26379  27C8  31AE  2698  31A7   	fcall	_PWM6_Initialize
 26380                           
 26381                           ;nullifyBadge.c: 29: SPI1_Initialize();
 26382  27CB  31AE  2615  31A7   	fcall	_SPI1_Initialize
 26383                           
 26384                           ;nullifyBadge.c: 32: PWM1_LoadDutyValue(128);
 26385  27CE  3080               	movlw	128
 26386  27CF  00F1               	movwf	PWM1_LoadDutyValue@dutyValue
 26387  27D0  3000               	movlw	0
 26388  27D1  00F2               	movwf	PWM1_LoadDutyValue@dutyValue+1
 26389  27D2  31AF  2777  31A7   	fcall	_PWM1_LoadDutyValue
 26390                           
 26391                           ;nullifyBadge.c: 44: do { LATBbits.LATB7 = 1; } while(0);
 26392  27D5  0022               	movlb	2	; select bank2
 26393  27D6  178D               	bsf	13,7	;volatile
 26394                           
 26395                           ;nullifyBadge.c: 45: PWM2_LoadDutyValue(192);
 26396  27D7  30C0               	movlw	192
 26397  27D8  00F1               	movwf	PWM2_LoadDutyValue@dutyValue
 26398  27D9  3000               	movlw	0
 26399  27DA  00F2               	movwf	PWM2_LoadDutyValue@dutyValue+1
 26400  27DB  31AF  278D  31A7   	fcall	_PWM2_LoadDutyValue
 26401                           
 26402                           ;nullifyBadge.c: 50: PWM5_LoadDutyValue(gamma_table_256x1k[128]);
 26403  27DE  3000               	movlw	low ((_gamma_table_256x1k+256)| (0+32768))
 26404  27DF  0084               	movwf	4
 26405  27E0  3091               	movlw	high ((_gamma_table_256x1k+256)| (0+32768))
 26406  27E1  0085               	movwf	5
 26407  27E2  3F00               	moviw [0]fsr0
 26408  27E3  00F1               	movwf	PWM5_LoadDutyValue@dutyValue
 26409  27E4  3F01               	moviw [1]fsr0
 26410  27E5  00F2               	movwf	PWM5_LoadDutyValue@dutyValue+1
 26411  27E6  31AF  27A3  31A7   	fcall	_PWM5_LoadDutyValue
 26412                           
 26413                           ;nullifyBadge.c: 51: PWM6_LoadDutyValue(gamma_table_256x1k[128]);
 26414  27E9  3000               	movlw	low ((_gamma_table_256x1k+256)| (0+32768))
 26415  27EA  0084               	movwf	4
 26416  27EB  3091               	movlw	high ((_gamma_table_256x1k+256)| (0+32768))
 26417  27EC  0085               	movwf	5
 26418  27ED  3F00               	moviw [0]fsr0
 26419  27EE  00F1               	movwf	PWM6_LoadDutyValue@dutyValue
 26420  27EF  3F01               	moviw [1]fsr0
 26421  27F0  00F2               	movwf	PWM6_LoadDutyValue@dutyValue+1
 26422  27F1  31AF  27B9  31A7   	fcall	_PWM6_LoadDutyValue
 26423                           
 26424                           ;nullifyBadge.c: 54: displayL2_Initialize(&badge->display);
 26425  27F4  0020               	movlb	0	; select bank0
 26426  27F5  082C               	movf	nullifyBadge_platformInit@badge,w
 26427  27F6  31A1  2155         	fcall	_displayL2_Initialize
 26428                           
 26429                           ;nullifyBadge.c: 57: badge->registeredHw = 0x0;
 26430  27F8  0020               	movlb	0	; select bank0
 26431  27F9  082C               	movf	nullifyBadge_platformInit@badge,w
 26432  27FA  3E11               	addlw	17
 26433  27FB  0086               	movwf	6
 26434  27FC  3001               	movlw	1	; select bank2/3
 26435  27FD  0087               	movwf	7
 26436  27FE  0181               	clrf	1
 26437  27FF  0008               	return
 26438  2800                     __end_of_nullifyBadge_platformInit:	
 26439                           
 26440                           	psect	text72
 26441  2155                     __ptext72:	
 26442 ;; *************** function _displayL2_Initialize *****************
 26443 ;; Defined at:
 26444 ;;		line 12 in file "nullifyBadge_displayL2.c"
 26445 ;; Parameters:    Size  Location     Type
 26446 ;;  display         1    wreg     PTR struct t_nullifyDisp
 26447 ;;		 -> badge_inst(18), 
 26448 ;; Auto vars:     Size  Location     Type
 26449 ;;  display         1   11[BANK0 ] PTR struct t_nullifyDisp
 26450 ;;		 -> badge_inst(18), 
 26451 ;; Return value:  Size  Location     Type
 26452 ;;                  1    wreg      void 
 26453 ;; Registers used:
 26454 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 26455 ;; Tracked objects:
 26456 ;;		On entry : 0/0
 26457 ;;		On exit  : 0/0
 26458 ;;		Unchanged: 0/0
 26459 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26460 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26461 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26462 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26463 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26464 ;;Total ram usage:        1 bytes
 26465 ;; Hardware stack levels used:    1
 26466 ;; Hardware stack levels required when called:    8
 26467 ;; This function calls:
 26468 ;;		_displayL1_Initialize
 26469 ;;		_memset
 26470 ;; This function is called by:
 26471 ;;		_nullifyBadge_platformInit
 26472 ;; This function uses a non-reentrant model
 26473 ;;
 26474                           
 26475                           
 26476                           ;psect for function _displayL2_Initialize
 26477  2155                     _displayL2_Initialize:	
 26478                           
 26479                           ;incstack = 0
 26480                           ; Regs used in _displayL2_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 26481                           ;displayL2_Initialize@display stored from wreg
 26482  2155  0020               	movlb	0	; select bank0
 26483  2156  00AB               	movwf	displayL2_Initialize@display
 26484                           
 26485                           ;nullifyBadge_displayL2.c: 13: displayL1_Initialize(&display->display_l1);
 26486  2157  082B               	movf	displayL2_Initialize@display,w
 26487  2158  3E07               	addlw	7
 26488  2159  31AF  273D  31A1   	fcall	_displayL1_Initialize
 26489                           
 26490                           ;nullifyBadge_displayL2.c: 14: memset(display->charVect, ' ', sizeof(display->charVect))
      +                          ;
 26491  215C  0020               	movlb	0	; select bank0
 26492  215D  082B               	movf	displayL2_Initialize@display,w
 26493  215E  00F1               	movwf	memset@p1
 26494  215F  3001               	movlw	1
 26495  2160  00F2               	movwf	memset@p1+1
 26496  2161  3020               	movlw	32
 26497  2162  00F3               	movwf	memset@c
 26498  2163  3000               	movlw	0
 26499  2164  00F4               	movwf	memset@c+1
 26500  2165  3004               	movlw	4
 26501  2166  00F5               	movwf	memset@n
 26502  2167  3000               	movlw	0
 26503  2168  00F6               	movwf	memset@n+1
 26504  2169  31AF  27CF         	fcall	_memset
 26505                           
 26506                           ;nullifyBadge_displayL2.c: 15: display->dpVect = 0;
 26507  216B  0020               	movlb	0	; select bank0
 26508  216C  082B               	movf	displayL2_Initialize@display,w
 26509  216D  3E04               	addlw	4
 26510  216E  0086               	movwf	6
 26511  216F  3001               	movlw	1	; select bank2/3
 26512  2170  0087               	movwf	7
 26513  2171  0181               	clrf	1
 26514                           
 26515                           ;nullifyBadge_displayL2.c: 16: display->ledVect = 0;
 26516  2172  082B               	movf	displayL2_Initialize@display,w
 26517  2173  3E05               	addlw	5
 26518  2174  0086               	movwf	6
 26519  2175  3001               	movlw	1	; select bank2/3
 26520  2176  0087               	movwf	7
 26521  2177  3000               	movlw	0
 26522  2178  3FC0               	movwi [0]fsr1
 26523  2179  3FC1               	movwi [1]fsr1
 26524  217A  0008               	return
 26525  217B                     __end_of_displayL2_Initialize:	
 26526                           
 26527                           	psect	text73
 26528  2F3D                     __ptext73:	
 26529 ;; *************** function _displayL1_Initialize *****************
 26530 ;; Defined at:
 26531 ;;		line 13 in file "nullifyBadge_displayL1.c"
 26532 ;; Parameters:    Size  Location     Type
 26533 ;;  display         1    wreg     PTR struct t_nullifyDisp
 26534 ;;		 -> badge_inst(18), 
 26535 ;; Auto vars:     Size  Location     Type
 26536 ;;  display         1   11[COMMON] PTR struct t_nullifyDisp
 26537 ;;		 -> badge_inst(18), 
 26538 ;; Return value:  Size  Location     Type
 26539 ;;                  1    wreg      void 
 26540 ;; Registers used:
 26541 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 26542 ;; Tracked objects:
 26543 ;;		On entry : 0/0
 26544 ;;		On exit  : 0/0
 26545 ;;		Unchanged: 0/0
 26546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26547 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26548 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26549 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26550 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26551 ;;Total ram usage:        1 bytes
 26552 ;; Hardware stack levels used:    1
 26553 ;; Hardware stack levels required when called:    7
 26554 ;; This function calls:
 26555 ;;		_displayL1_Update
 26556 ;;		_memset
 26557 ;; This function is called by:
 26558 ;;		_displayL2_Initialize
 26559 ;; This function uses a non-reentrant model
 26560 ;;
 26561                           
 26562                           
 26563                           ;psect for function _displayL1_Initialize
 26564  2F3D                     _displayL1_Initialize:	
 26565                           
 26566                           ;incstack = 0
 26567                           ; Regs used in _displayL1_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 26568                           ;displayL1_Initialize@display stored from wreg
 26569  2F3D  00FB               	movwf	displayL1_Initialize@display
 26570                           
 26571                           ;nullifyBadge_displayL1.c: 14: memset(display->displayVect, 0, sizeof(struct t_nullifyDi
      +                          splay_l1));
 26572  2F3E  087B               	movf	displayL1_Initialize@display,w
 26573  2F3F  00F1               	movwf	memset@p1
 26574  2F40  3001               	movlw	1
 26575  2F41  00F2               	movwf	memset@p1+1
 26576  2F42  3000               	movlw	0
 26577  2F43  00F3               	movwf	memset@c
 26578  2F44  00F4               	movwf	memset@c+1
 26579  2F45  300A               	movlw	10
 26580  2F46  00F5               	movwf	memset@n
 26581  2F47  3000               	movlw	0
 26582  2F48  00F6               	movwf	memset@n+1
 26583  2F49  31AF  27CF  31AF   	fcall	_memset
 26584                           
 26585                           ;nullifyBadge_displayL1.c: 15: displayL1_Update(display);
 26586  2F4C  087B               	movf	displayL1_Initialize@display,w
 26587  2F4D  31AE  26F8         	fcall	_displayL1_Update
 26588  2F4F  0008               	return
 26589  2F50                     __end_of_displayL1_Initialize:	
 26590                           
 26591                           	psect	text74
 26592  2FCF                     __ptext74:	
 26593 ;; *************** function _memset *****************
 26594 ;; Defined at:
 26595 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\memset.c"
 26596 ;; Parameters:    Size  Location     Type
 26597 ;;  p1              2    1[COMMON] PTR void 
 26598 ;;		 -> secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), 
 26599 ;;		 -> flashy_TaskData(30), badge_inst(18), NULL(0), 
 26600 ;;  c               2    3[COMMON] int 
 26601 ;;  n               2    5[COMMON] unsigned int 
 26602 ;; Auto vars:     Size  Location     Type
 26603 ;;  p               2    7[COMMON] PTR unsigned char 
 26604 ;;		 -> secret_TaskData(14), locked_TaskData(14), slot_TaskData(40), menu_TaskData(14), 
 26605 ;;		 -> flashy_TaskData(30), badge_inst(18), NULL(0), 
 26606 ;; Return value:  Size  Location     Type
 26607 ;;                  2    1[COMMON] PTR void 
 26608 ;; Registers used:
 26609 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 26610 ;; Tracked objects:
 26611 ;;		On entry : 0/0
 26612 ;;		On exit  : 0/0
 26613 ;;		Unchanged: 0/0
 26614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26615 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26616 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26617 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26618 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26619 ;;Total ram usage:        8 bytes
 26620 ;; Hardware stack levels used:    1
 26621 ;; Hardware stack levels required when called:    4
 26622 ;; This function calls:
 26623 ;;		Nothing
 26624 ;; This function is called by:
 26625 ;;		_displayL1_Initialize
 26626 ;;		_displayL2_Initialize
 26627 ;;		_slot_Setup
 26628 ;;		_slot_Main
 26629 ;; This function uses a non-reentrant model
 26630 ;;
 26631                           
 26632                           
 26633                           ;psect for function _memset
 26634  2FCF                     _memset:	
 26635                           
 26636                           ;incstack = 0
 26637                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
 26638  2FCF  0872               	movf	memset@p1+1,w
 26639  2FD0  00F8               	movwf	memset@p+1
 26640  2FD1  0871               	movf	memset@p1,w
 26641  2FD2  00F7               	movwf	memset@p
 26642  2FD3                     l7194:	
 26643  2FD3  3001               	movlw	1
 26644  2FD4  02F5               	subwf	memset@n,f
 26645  2FD5  3000               	movlw	0
 26646  2FD6  3BF6               	subwfb	memset@n+1,f
 26647  2FD7  0A75               	incf	memset@n,w
 26648  2FD8  1903               	btfsc	3,2
 26649  2FD9  0A76               	incf	memset@n+1,w
 26650  2FDA  1903               	btfsc	3,2
 26651  2FDB  0008               	return
 26652  2FDC  0877               	movf	memset@p,w
 26653  2FDD  0086               	movwf	6
 26654  2FDE  0878               	movf	memset@p+1,w
 26655  2FDF  0087               	movwf	7
 26656  2FE0  0873               	movf	memset@c,w
 26657  2FE1  0081               	movwf	1
 26658  2FE2  3001               	movlw	1
 26659  2FE3  07F7               	addwf	memset@p,f
 26660  2FE4  3000               	movlw	0
 26661  2FE5  3DF8               	addwfc	memset@p+1,f
 26662  2FE6  2FD3               	goto	l7194
 26663  2FE7                     __end_of_memset:	
 26664                           ;	Return value of _memset is never used
 26665                           
 26666                           
 26667                           	psect	text75
 26668  2EF8                     __ptext75:	
 26669 ;; *************** function _displayL1_Update *****************
 26670 ;; Defined at:
 26671 ;;		line 97 in file "nullifyBadge_displayL1.c"
 26672 ;; Parameters:    Size  Location     Type
 26673 ;;  display         1    wreg     PTR struct t_nullifyDisp
 26674 ;;		 -> badge_inst(18), 
 26675 ;; Auto vars:     Size  Location     Type
 26676 ;;  display         1   10[BANK0 ] PTR struct t_nullifyDisp
 26677 ;;		 -> badge_inst(18), 
 26678 ;;  tmpRxBuf       10    0[BANK0 ] unsigned char [10]
 26679 ;; Return value:  Size  Location     Type
 26680 ;;                  1    wreg      void 
 26681 ;; Registers used:
 26682 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 26683 ;; Tracked objects:
 26684 ;;		On entry : 0/0
 26685 ;;		On exit  : 0/0
 26686 ;;		Unchanged: 0/0
 26687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26688 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26689 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26690 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26691 ;;      Totals:         2      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26692 ;;Total ram usage:       13 bytes
 26693 ;; Hardware stack levels used:    1
 26694 ;; Hardware stack levels required when called:    6
 26695 ;; This function calls:
 26696 ;;		_SPI1_Exchange8bitBuffer
 26697 ;; This function is called by:
 26698 ;;		_displayL1_Initialize
 26699 ;;		_displayL2_ForceUpdate
 26700 ;;		_displayL2_EraseSegDisplay
 26701 ;;		_displayL2_SetUserLeds
 26702 ;;		_displayL2_ClrUserLeds
 26703 ;;		_displayL2_PrintChar
 26704 ;;		_displayL2_PrintStr
 26705 ;; This function uses a non-reentrant model
 26706 ;;
 26707                           
 26708                           
 26709                           ;psect for function _displayL1_Update
 26710  2EF8                     _displayL1_Update:	
 26711                           
 26712                           ;incstack = 0
 26713                           ; Regs used in _displayL1_Update: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 26714                           ;displayL1_Update@display stored from wreg
 26715  2EF8  0020               	movlb	0	; select bank0
 26716  2EF9  00AA               	movwf	displayL1_Update@display
 26717                           
 26718                           ;nullifyBadge_displayL1.c: 98: u8 tmpRxBuf[10];
 26719                           ;nullifyBadge_displayL1.c: 100: SPI1_Exchange8bitBuffer(display->displayVect, 10, tmpRxB
      +                          uf);
 26720  2EFA  300A               	movlw	10
 26721  2EFB  00F9               	movwf	??_displayL1_Update
 26722  2EFC  0879               	movf	??_displayL1_Update,w
 26723  2EFD  00F2               	movwf	SPI1_Exchange8bitBuffer@bufLen
 26724  2EFE  3020               	movlw	(low (displayL1_Update@tmpRxBuf| 0))& (0+255)
 26725  2EFF  00FA               	movwf	??_displayL1_Update+1
 26726  2F00  087A               	movf	??_displayL1_Update+1,w
 26727  2F01  00F3               	movwf	SPI1_Exchange8bitBuffer@dataOut
 26728  2F02  082A               	movf	displayL1_Update@display,w
 26729  2F03  31A6  2662         	fcall	_SPI1_Exchange8bitBuffer
 26730                           
 26731                           ;nullifyBadge_displayL1.c: 101: do { LATCbits.LATC7 = 1; } while(0);
 26732  2F05  0022               	movlb	2	; select bank2
 26733  2F06  178E               	bsf	14,7	;volatile
 26734                           
 26735                           ;nullifyBadge_displayL1.c: 102: do { LATCbits.LATC7 = 0; } while(0);
 26736  2F07  138E               	bcf	14,7	;volatile
 26737  2F08  0008               	return
 26738  2F09                     __end_of_displayL1_Update:	
 26739                           
 26740                           	psect	text76
 26741  2662                     __ptext76:	
 26742 ;; *************** function _SPI1_Exchange8bitBuffer *****************
 26743 ;; Defined at:
 26744 ;;		line 91 in file "mcc_generated_files/spi1.c"
 26745 ;; Parameters:    Size  Location     Type
 26746 ;;  dataIn          1    wreg     PTR unsigned char 
 26747 ;;		 -> badge_inst(18), 
 26748 ;;  bufLen          1    2[COMMON] unsigned char 
 26749 ;;  dataOut         1    3[COMMON] PTR unsigned char 
 26750 ;;		 -> displayL1_Update@tmpRxBuf(10), 
 26751 ;; Auto vars:     Size  Location     Type
 26752 ;;  dataIn          1    7[COMMON] PTR unsigned char 
 26753 ;;		 -> badge_inst(18), 
 26754 ;;  bytesWritten    1    8[COMMON] unsigned char 
 26755 ;; Return value:  Size  Location     Type
 26756 ;;                  1    wreg      unsigned char 
 26757 ;; Registers used:
 26758 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 26759 ;; Tracked objects:
 26760 ;;		On entry : 0/0
 26761 ;;		On exit  : 0/0
 26762 ;;		Unchanged: 0/0
 26763 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26764 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26765 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26766 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26767 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26768 ;;Total ram usage:        7 bytes
 26769 ;; Hardware stack levels used:    1
 26770 ;; Hardware stack levels required when called:    5
 26771 ;; This function calls:
 26772 ;;		_SPI1_Exchange8bit
 26773 ;; This function is called by:
 26774 ;;		_displayL1_Update
 26775 ;; This function uses a non-reentrant model
 26776 ;;
 26777                           
 26778                           
 26779                           ;psect for function _SPI1_Exchange8bitBuffer
 26780  2662                     _SPI1_Exchange8bitBuffer:	
 26781                           
 26782                           ;incstack = 0
 26783                           ; Regs used in _SPI1_Exchange8bitBuffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 26784                           ;SPI1_Exchange8bitBuffer@dataIn stored from wreg
 26785  2662  00F7               	movwf	SPI1_Exchange8bitBuffer@dataIn
 26786                           
 26787                           ;spi1.c: 93: uint8_t bytesWritten = 0;
 26788  2663  01F8               	clrf	SPI1_Exchange8bitBuffer@bytesWritten
 26789                           
 26790                           ;spi1.c: 95: if(bufLen != 0)
 26791  2664  0872               	movf	SPI1_Exchange8bitBuffer@bufLen,w
 26792  2665  1903               	btfsc	3,2
 26793  2666  0008               	return
 26794                           
 26795                           ;spi1.c: 96: {
 26796                           ;spi1.c: 97: if(dataIn != (0))
 26797  2667  0877               	movf	SPI1_Exchange8bitBuffer@dataIn,w
 26798  2668  1D03               	btfss	3,2
 26799  2669  2E92               	goto	l6940
 26800  266A  2E97               	goto	l6942
 26801  266B                     l6932:	
 26802                           ;spi1.c: 98: {
 26803                           ;spi1.c: 99: while(bytesWritten < bufLen)
 26804                           
 26805                           
 26806                           ;spi1.c: 100: {
 26807                           ;spi1.c: 101: if(dataOut == (0))
 26808  266B  0873               	movf	SPI1_Exchange8bitBuffer@dataOut,w
 26809  266C  1D03               	btfss	3,2
 26810  266D  2E7A               	goto	l6936
 26811                           
 26812                           ;spi1.c: 102: {
 26813                           ;spi1.c: 103: SPI1_Exchange8bit(dataIn[bytesWritten]);
 26814  266E  0878               	movf	SPI1_Exchange8bitBuffer@bytesWritten,w
 26815  266F  0777               	addwf	SPI1_Exchange8bitBuffer@dataIn,w
 26816  2670  00F4               	movwf	??_SPI1_Exchange8bitBuffer
 26817  2671  0874               	movf	??_SPI1_Exchange8bitBuffer,w
 26818  2672  0086               	movwf	6
 26819  2673  3001               	movlw	1	; select bank2/3
 26820  2674  0087               	movwf	7
 26821  2675  0801               	movf	1,w
 26822  2676  31AE  2625  31A6   	fcall	_SPI1_Exchange8bit
 26823                           
 26824                           ;spi1.c: 104: }
 26825  2679  2E8E               	goto	l6938
 26826  267A                     l6936:	
 26827                           
 26828                           ;spi1.c: 105: else
 26829                           ;spi1.c: 106: {
 26830                           ;spi1.c: 107: dataOut[bytesWritten] = SPI1_Exchange8bit(dataIn[bytesWritten]);
 26831  267A  0878               	movf	SPI1_Exchange8bitBuffer@bytesWritten,w
 26832  267B  0777               	addwf	SPI1_Exchange8bitBuffer@dataIn,w
 26833  267C  00F4               	movwf	??_SPI1_Exchange8bitBuffer
 26834  267D  0874               	movf	??_SPI1_Exchange8bitBuffer,w
 26835  267E  0086               	movwf	6
 26836  267F  3001               	movlw	1	; select bank2/3
 26837  2680  0087               	movwf	7
 26838  2681  0801               	movf	1,w
 26839  2682  31AE  2625  31A6   	fcall	_SPI1_Exchange8bit
 26840  2685  00F5               	movwf	??_SPI1_Exchange8bitBuffer+1
 26841  2686  0878               	movf	SPI1_Exchange8bitBuffer@bytesWritten,w
 26842  2687  0773               	addwf	SPI1_Exchange8bitBuffer@dataOut,w
 26843  2688  00F6               	movwf	??_SPI1_Exchange8bitBuffer+2
 26844  2689  0876               	movf	??_SPI1_Exchange8bitBuffer+2,w
 26845  268A  0086               	movwf	6
 26846  268B  0187               	clrf	7
 26847  268C  0875               	movf	??_SPI1_Exchange8bitBuffer+1,w
 26848  268D  0081               	movwf	1
 26849  268E                     l6938:	
 26850                           
 26851                           ;spi1.c: 108: }
 26852                           ;spi1.c: 110: bytesWritten++;
 26853  268E  3001               	movlw	1
 26854  268F  00F4               	movwf	??_SPI1_Exchange8bitBuffer
 26855  2690  0874               	movf	??_SPI1_Exchange8bitBuffer,w
 26856  2691  07F8               	addwf	SPI1_Exchange8bitBuffer@bytesWritten,f
 26857  2692                     l6940:	
 26858  2692  0872               	movf	SPI1_Exchange8bitBuffer@bufLen,w
 26859  2693  0278               	subwf	SPI1_Exchange8bitBuffer@bytesWritten,w
 26860  2694  1803               	btfsc	3,0
 26861  2695  0008               	return
 26862  2696  2E6B               	goto	l6932
 26863  2697                     l6942:	
 26864                           ;spi1.c: 111: }
 26865                           ;spi1.c: 112: }
 26866                           
 26867                           
 26868                           ;spi1.c: 113: else
 26869                           ;spi1.c: 114: {
 26870                           ;spi1.c: 115: if(dataOut != (0))
 26871  2697  0873               	movf	SPI1_Exchange8bitBuffer@dataOut,w
 26872  2698  1903               	btfsc	3,2
 26873  2699  0008               	return
 26874  269A                     l6950:	
 26875  269A  0872               	movf	SPI1_Exchange8bitBuffer@bufLen,w
 26876  269B  0278               	subwf	SPI1_Exchange8bitBuffer@bytesWritten,w
 26877  269C  1803               	btfsc	3,0
 26878  269D  0008               	return
 26879                           
 26880                           ;spi1.c: 118: {
 26881                           ;spi1.c: 119: dataOut[bytesWritten] = SPI1_Exchange8bit(0x0);
 26882                           
 26883                           ;spi1.c: 116: {
 26884                           ;spi1.c: 117: while(bytesWritten < bufLen )
 26885  269E  3000               	movlw	0
 26886  269F  31AE  2625  31A6   	fcall	_SPI1_Exchange8bit
 26887  26A2  00F4               	movwf	??_SPI1_Exchange8bitBuffer
 26888  26A3  0878               	movf	SPI1_Exchange8bitBuffer@bytesWritten,w
 26889  26A4  0773               	addwf	SPI1_Exchange8bitBuffer@dataOut,w
 26890  26A5  00F5               	movwf	??_SPI1_Exchange8bitBuffer+1
 26891  26A6  0875               	movf	??_SPI1_Exchange8bitBuffer+1,w
 26892  26A7  0086               	movwf	6
 26893  26A8  0187               	clrf	7
 26894  26A9  0874               	movf	??_SPI1_Exchange8bitBuffer,w
 26895  26AA  0081               	movwf	1
 26896                           
 26897                           ;spi1.c: 121: bytesWritten++;
 26898  26AB  3001               	movlw	1
 26899  26AC  00F4               	movwf	??_SPI1_Exchange8bitBuffer
 26900  26AD  0874               	movf	??_SPI1_Exchange8bitBuffer,w
 26901  26AE  07F8               	addwf	SPI1_Exchange8bitBuffer@bytesWritten,f
 26902  26AF  2E9A               	goto	l6950
 26903  26B0                     __end_of_SPI1_Exchange8bitBuffer:	
 26904                           ;spi1.c: 122: }
 26905                           ;spi1.c: 123: }
 26906                           ;spi1.c: 124: }
 26907                           ;spi1.c: 125: }
 26908                           ;spi1.c: 127: return bytesWritten;
 26909                           ;	Return value of _SPI1_Exchange8bitBuffer is never used
 26910                           
 26911                           
 26912                           	psect	text77
 26913  2E25                     __ptext77:	
 26914 ;; *************** function _SPI1_Exchange8bit *****************
 26915 ;; Defined at:
 26916 ;;		line 77 in file "mcc_generated_files/spi1.c"
 26917 ;; Parameters:    Size  Location     Type
 26918 ;;  data            1    wreg     unsigned char 
 26919 ;; Auto vars:     Size  Location     Type
 26920 ;;  data            1    1[COMMON] unsigned char 
 26921 ;; Return value:  Size  Location     Type
 26922 ;;                  1    wreg      unsigned char 
 26923 ;; Registers used:
 26924 ;;		wreg
 26925 ;; Tracked objects:
 26926 ;;		On entry : 0/0
 26927 ;;		On exit  : 0/0
 26928 ;;		Unchanged: 0/0
 26929 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26931 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26932 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26933 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26934 ;;Total ram usage:        1 bytes
 26935 ;; Hardware stack levels used:    1
 26936 ;; Hardware stack levels required when called:    4
 26937 ;; This function calls:
 26938 ;;		Nothing
 26939 ;; This function is called by:
 26940 ;;		_SPI1_Exchange8bitBuffer
 26941 ;; This function uses a non-reentrant model
 26942 ;;
 26943                           
 26944                           
 26945                           ;psect for function _SPI1_Exchange8bit
 26946  2E25                     _SPI1_Exchange8bit:	
 26947                           
 26948                           ;incstack = 0
 26949                           ; Regs used in _SPI1_Exchange8bit: [wreg]
 26950                           ;SPI1_Exchange8bit@data stored from wreg
 26951  2E25  00F1               	movwf	SPI1_Exchange8bit@data
 26952                           
 26953                           ;spi1.c: 80: SSP1CON1bits.WCOL = 0;
 26954  2E26  0024               	movlb	4	; select bank4
 26955  2E27  1395               	bcf	21,7	;volatile
 26956                           
 26957                           ;spi1.c: 82: SSP1BUF = data;
 26958  2E28  0871               	movf	SPI1_Exchange8bit@data,w
 26959  2E29  0091               	movwf	17	;volatile
 26960  2E2A                     l18:	
 26961                           ;spi1.c: 85: {
 26962                           
 26963                           ;spi1.c: 84: while(SSP1STATbits.BF == 0x0)
 26964                           
 26965  2E2A  1C14               	btfss	20,0	;volatile
 26966  2E2B  2E2A               	goto	l18
 26967                           
 26968                           ;spi1.c: 86: }
 26969                           ;spi1.c: 88: return (SSP1BUF);
 26970  2E2C  0811               	movf	17,w	;volatile
 26971  2E2D  0008               	return
 26972  2E2E                     __end_of_SPI1_Exchange8bit:	
 26973                           
 26974                           	psect	text78
 26975  210F                     __ptext78:	
 26976 ;; *************** function _SYSTEM_Initialize *****************
 26977 ;; Defined at:
 26978 ;;		line 76 in file "mcc_generated_files/mcc.c"
 26979 ;; Parameters:    Size  Location     Type
 26980 ;;		None
 26981 ;; Auto vars:     Size  Location     Type
 26982 ;;		None
 26983 ;; Return value:  Size  Location     Type
 26984 ;;                  1    wreg      void 
 26985 ;; Registers used:
 26986 ;;		wreg, status,2, status,0, pclath, cstack
 26987 ;; Tracked objects:
 26988 ;;		On entry : 0/0
 26989 ;;		On exit  : 0/0
 26990 ;;		Unchanged: 0/0
 26991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26992 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26993 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26994 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26995 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26996 ;;Total ram usage:        0 bytes
 26997 ;; Hardware stack levels used:    1
 26998 ;; Hardware stack levels required when called:    6
 26999 ;; This function calls:
 27000 ;;		_OSCILLATOR_Initialize
 27001 ;;		_PIN_MANAGER_Initialize
 27002 ;;		_PWM1_Initialize
 27003 ;;		_PWM2_Initialize
 27004 ;;		_PWM5_Initialize
 27005 ;;		_PWM6_Initialize
 27006 ;;		_SPI1_Initialize
 27007 ;;		_TMR0_Initialize
 27008 ;;		_TMR2_Initialize
 27009 ;;		_TMR4_Initialize
 27010 ;;		_WDT_Initialize
 27011 ;; This function is called by:
 27012 ;;		_nullifyBadge_platformInit
 27013 ;; This function uses a non-reentrant model
 27014 ;;
 27015                           
 27016                           
 27017                           ;psect for function _SYSTEM_Initialize
 27018  210F                     _SYSTEM_Initialize:	
 27019                           
 27020                           ;mcc.c: 79: PIN_MANAGER_Initialize();
 27021                           
 27022                           ;incstack = 0
 27023                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
 27024  210F  31A7  2756  31A1   	fcall	_PIN_MANAGER_Initialize
 27025                           
 27026                           ;mcc.c: 80: OSCILLATOR_Initialize();
 27027  2112  31AE  2637  31A1   	fcall	_OSCILLATOR_Initialize
 27028                           
 27029                           ;mcc.c: 81: WDT_Initialize();
 27030  2115  31AD  25EE  31A1   	fcall	_WDT_Initialize
 27031                           
 27032                           ;mcc.c: 82: SPI1_Initialize();
 27033  2118  31AE  2615  31A1   	fcall	_SPI1_Initialize
 27034                           
 27035                           ;mcc.c: 83: PWM6_Initialize();
 27036  211B  31AE  2698  31A1   	fcall	_PWM6_Initialize
 27037                           
 27038                           ;mcc.c: 84: PWM1_Initialize();
 27039  211E  31AE  2660  31A1   	fcall	_PWM1_Initialize
 27040                           
 27041                           ;mcc.c: 85: PWM2_Initialize();
 27042  2121  31AE  266B  31A1   	fcall	_PWM2_Initialize
 27043                           
 27044                           ;mcc.c: 86: TMR4_Initialize();
 27045  2124  31AE  2676  31A1   	fcall	_TMR4_Initialize
 27046                           
 27047                           ;mcc.c: 87: TMR2_Initialize();
 27048  2127  31AE  2641  31A1   	fcall	_TMR2_Initialize
 27049                           
 27050                           ;mcc.c: 88: PWM5_Initialize();
 27051  212A  31AE  268C  31A1   	fcall	_PWM5_Initialize
 27052                           
 27053                           ;mcc.c: 89: TMR0_Initialize();
 27054  212D  31A0  20B5         	fcall	_TMR0_Initialize
 27055  212F  0008               	return
 27056  2130                     __end_of_SYSTEM_Initialize:	
 27057                           
 27058                           	psect	text79
 27059  2DEE                     __ptext79:	
 27060 ;; *************** function _WDT_Initialize *****************
 27061 ;; Defined at:
 27062 ;;		line 110 in file "mcc_generated_files/mcc.c"
 27063 ;; Parameters:    Size  Location     Type
 27064 ;;		None
 27065 ;; Auto vars:     Size  Location     Type
 27066 ;;		None
 27067 ;; Return value:  Size  Location     Type
 27068 ;;                  1    wreg      void 
 27069 ;; Registers used:
 27070 ;;		wreg
 27071 ;; Tracked objects:
 27072 ;;		On entry : 0/0
 27073 ;;		On exit  : 0/0
 27074 ;;		Unchanged: 0/0
 27075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27076 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27077 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27078 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27079 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27080 ;;Total ram usage:        0 bytes
 27081 ;; Hardware stack levels used:    1
 27082 ;; Hardware stack levels required when called:    4
 27083 ;; This function calls:
 27084 ;;		Nothing
 27085 ;; This function is called by:
 27086 ;;		_SYSTEM_Initialize
 27087 ;; This function uses a non-reentrant model
 27088 ;;
 27089                           
 27090                           
 27091                           ;psect for function _WDT_Initialize
 27092  2DEE                     _WDT_Initialize:	
 27093                           
 27094                           ;mcc.c: 113: WDTCON = 0x16;
 27095                           
 27096                           ;incstack = 0
 27097                           ; Regs used in _WDT_Initialize: [wreg]
 27098  2DEE  3016               	movlw	22
 27099  2DEF  0021               	movlb	1	; select bank1
 27100  2DF0  0097               	movwf	23	;volatile
 27101  2DF1  0008               	return
 27102  2DF2                     __end_of_WDT_Initialize:	
 27103                           
 27104                           	psect	text80
 27105  2E76                     __ptext80:	
 27106 ;; *************** function _TMR4_Initialize *****************
 27107 ;; Defined at:
 27108 ;;		line 63 in file "mcc_generated_files/tmr4.c"
 27109 ;; Parameters:    Size  Location     Type
 27110 ;;		None
 27111 ;; Auto vars:     Size  Location     Type
 27112 ;;		None
 27113 ;; Return value:  Size  Location     Type
 27114 ;;                  1    wreg      void 
 27115 ;; Registers used:
 27116 ;;		wreg, status,2, status,0, pclath, cstack
 27117 ;; Tracked objects:
 27118 ;;		On entry : 0/0
 27119 ;;		On exit  : 0/0
 27120 ;;		Unchanged: 0/0
 27121 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27122 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27123 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27124 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27125 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27126 ;;Total ram usage:        0 bytes
 27127 ;; Hardware stack levels used:    1
 27128 ;; Hardware stack levels required when called:    5
 27129 ;; This function calls:
 27130 ;;		_TMR4_StartTimer
 27131 ;; This function is called by:
 27132 ;;		_SYSTEM_Initialize
 27133 ;;		_nullifyBadge_platformInit
 27134 ;; This function uses a non-reentrant model
 27135 ;;
 27136                           
 27137                           
 27138                           ;psect for function _TMR4_Initialize
 27139  2E76                     _TMR4_Initialize:	
 27140                           
 27141                           ;tmr4.c: 68: T4CON = 0x7B;
 27142                           
 27143                           ;incstack = 0
 27144                           ; Regs used in _TMR4_Initialize: [wreg+status,2+status,0+pclath+cstack]
 27145  2E76  307B               	movlw	123
 27146  2E77  0028               	movlb	8	; select bank8
 27147  2E78  0097               	movwf	23	;volatile
 27148                           
 27149                           ;tmr4.c: 71: PR4 = 0xFF;
 27150  2E79  30FF               	movlw	255
 27151  2E7A  0096               	movwf	22	;volatile
 27152                           
 27153                           ;tmr4.c: 74: TMR4 = 0x00;
 27154  2E7B  0195               	clrf	21	;volatile
 27155                           
 27156                           ;tmr4.c: 77: PIR2bits.TMR4IF = 0;
 27157  2E7C  0020               	movlb	0	; select bank0
 27158  2E7D  1092               	bcf	18,1	;volatile
 27159                           
 27160                           ;tmr4.c: 80: TMR4_StartTimer();
 27161  2E7E  31AD  25E5         	fcall	_TMR4_StartTimer
 27162  2E80  0008               	return
 27163  2E81                     __end_of_TMR4_Initialize:	
 27164                           
 27165                           	psect	text81
 27166  2DE5                     __ptext81:	
 27167 ;; *************** function _TMR4_StartTimer *****************
 27168 ;; Defined at:
 27169 ;;		line 83 in file "mcc_generated_files/tmr4.c"
 27170 ;; Parameters:    Size  Location     Type
 27171 ;;		None
 27172 ;; Auto vars:     Size  Location     Type
 27173 ;;		None
 27174 ;; Return value:  Size  Location     Type
 27175 ;;                  1    wreg      void 
 27176 ;; Registers used:
 27177 ;;		None
 27178 ;; Tracked objects:
 27179 ;;		On entry : 0/0
 27180 ;;		On exit  : 0/0
 27181 ;;		Unchanged: 0/0
 27182 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27183 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27184 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27185 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27186 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27187 ;;Total ram usage:        0 bytes
 27188 ;; Hardware stack levels used:    1
 27189 ;; Hardware stack levels required when called:    4
 27190 ;; This function calls:
 27191 ;;		Nothing
 27192 ;; This function is called by:
 27193 ;;		_TMR4_Initialize
 27194 ;; This function uses a non-reentrant model
 27195 ;;
 27196                           
 27197                           
 27198                           ;psect for function _TMR4_StartTimer
 27199  2DE5                     _TMR4_StartTimer:	
 27200                           
 27201                           ;tmr4.c: 86: T4CONbits.TMR4ON = 1;
 27202                           
 27203                           ;incstack = 0
 27204                           ; Regs used in _TMR4_StartTimer: []
 27205  2DE5  0028               	movlb	8	; select bank8
 27206  2DE6  1517               	bsf	23,2	;volatile
 27207  2DE7  0008               	return
 27208  2DE8                     __end_of_TMR4_StartTimer:	
 27209                           
 27210                           	psect	text82
 27211  2E41                     __ptext82:	
 27212 ;; *************** function _TMR2_Initialize *****************
 27213 ;; Defined at:
 27214 ;;		line 63 in file "mcc_generated_files/tmr2.c"
 27215 ;; Parameters:    Size  Location     Type
 27216 ;;		None
 27217 ;; Auto vars:     Size  Location     Type
 27218 ;;		None
 27219 ;; Return value:  Size  Location     Type
 27220 ;;                  1    wreg      void 
 27221 ;; Registers used:
 27222 ;;		wreg, status,2, status,0, pclath, cstack
 27223 ;; Tracked objects:
 27224 ;;		On entry : 0/0
 27225 ;;		On exit  : 0/0
 27226 ;;		Unchanged: 0/0
 27227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27228 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27229 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27230 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27231 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27232 ;;Total ram usage:        0 bytes
 27233 ;; Hardware stack levels used:    1
 27234 ;; Hardware stack levels required when called:    5
 27235 ;; This function calls:
 27236 ;;		_TMR2_StartTimer
 27237 ;; This function is called by:
 27238 ;;		_SYSTEM_Initialize
 27239 ;;		_nullifyBadge_platformInit
 27240 ;; This function uses a non-reentrant model
 27241 ;;
 27242                           
 27243                           
 27244                           ;psect for function _TMR2_Initialize
 27245  2E41                     _TMR2_Initialize:	
 27246                           
 27247                           ;tmr2.c: 68: T2CON = 0x01;
 27248                           
 27249                           ;incstack = 0
 27250                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
 27251  2E41  3001               	movlw	1
 27252  2E42  0020               	movlb	0	; select bank0
 27253  2E43  009F               	movwf	31	;volatile
 27254                           
 27255                           ;tmr2.c: 71: PR2 = 0x4A;
 27256  2E44  304A               	movlw	74
 27257  2E45  009E               	movwf	30	;volatile
 27258                           
 27259                           ;tmr2.c: 74: TMR2 = 0x00;
 27260  2E46  019D               	clrf	29	;volatile
 27261                           
 27262                           ;tmr2.c: 77: PIR1bits.TMR2IF = 0;
 27263  2E47  1091               	bcf	17,1	;volatile
 27264                           
 27265                           ;tmr2.c: 80: TMR2_StartTimer();
 27266  2E48  31AD  25E2         	fcall	_TMR2_StartTimer
 27267  2E4A  0008               	return
 27268  2E4B                     __end_of_TMR2_Initialize:	
 27269                           
 27270                           	psect	text83
 27271  2DE2                     __ptext83:	
 27272 ;; *************** function _TMR2_StartTimer *****************
 27273 ;; Defined at:
 27274 ;;		line 83 in file "mcc_generated_files/tmr2.c"
 27275 ;; Parameters:    Size  Location     Type
 27276 ;;		None
 27277 ;; Auto vars:     Size  Location     Type
 27278 ;;		None
 27279 ;; Return value:  Size  Location     Type
 27280 ;;                  1    wreg      void 
 27281 ;; Registers used:
 27282 ;;		None
 27283 ;; Tracked objects:
 27284 ;;		On entry : 0/0
 27285 ;;		On exit  : 0/0
 27286 ;;		Unchanged: 0/0
 27287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27288 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27289 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27290 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27291 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27292 ;;Total ram usage:        0 bytes
 27293 ;; Hardware stack levels used:    1
 27294 ;; Hardware stack levels required when called:    4
 27295 ;; This function calls:
 27296 ;;		Nothing
 27297 ;; This function is called by:
 27298 ;;		_TMR2_Initialize
 27299 ;; This function uses a non-reentrant model
 27300 ;;
 27301                           
 27302                           
 27303                           ;psect for function _TMR2_StartTimer
 27304  2DE2                     _TMR2_StartTimer:	
 27305                           
 27306                           ;tmr2.c: 86: T2CONbits.TMR2ON = 1;
 27307                           
 27308                           ;incstack = 0
 27309                           ; Regs used in _TMR2_StartTimer: []
 27310  2DE2  0020               	movlb	0	; select bank0
 27311  2DE3  151F               	bsf	31,2	;volatile
 27312  2DE4  0008               	return
 27313  2DE5                     __end_of_TMR2_StartTimer:	
 27314                           
 27315                           	psect	text84
 27316  20B5                     __ptext84:	
 27317 ;; *************** function _TMR0_Initialize *****************
 27318 ;; Defined at:
 27319 ;;		line 65 in file "mcc_generated_files/tmr0.c"
 27320 ;; Parameters:    Size  Location     Type
 27321 ;;		None
 27322 ;; Auto vars:     Size  Location     Type
 27323 ;;		None
 27324 ;; Return value:  Size  Location     Type
 27325 ;;                  1    wreg      void 
 27326 ;; Registers used:
 27327 ;;		wreg, status,2, status,0, pclath, cstack
 27328 ;; Tracked objects:
 27329 ;;		On entry : 0/0
 27330 ;;		On exit  : 0/0
 27331 ;;		Unchanged: 0/0
 27332 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27333 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27334 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27335 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27336 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27337 ;;Total ram usage:        0 bytes
 27338 ;; Hardware stack levels used:    1
 27339 ;; Hardware stack levels required when called:    5
 27340 ;; This function calls:
 27341 ;;		_TMR0_SetInterruptHandler
 27342 ;;		_TMR0_StartTimer
 27343 ;; This function is called by:
 27344 ;;		_SYSTEM_Initialize
 27345 ;;		_nullifyBadge_platformInit
 27346 ;; This function uses a non-reentrant model
 27347 ;;
 27348                           
 27349                           
 27350                           ;psect for function _TMR0_Initialize
 27351  20B5                     _TMR0_Initialize:	
 27352                           
 27353                           ;tmr0.c: 70: T0CON0 = 0x10;
 27354                           
 27355                           ;incstack = 0
 27356                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
 27357  20B5  3010               	movlw	16
 27358  20B6  0020               	movlb	0	; select bank0
 27359  20B7  0097               	movwf	23	;volatile
 27360                           
 27361                           ;tmr0.c: 73: T0CON1 = 0x4D;
 27362  20B8  304D               	movlw	77
 27363  20B9  0098               	movwf	24	;volatile
 27364                           
 27365                           ;tmr0.c: 76: TMR0H = 0xFF;
 27366  20BA  30FF               	movlw	255
 27367  20BB  0096               	movwf	22	;volatile
 27368                           
 27369                           ;tmr0.c: 79: TMR0L = 0xFF;
 27370  20BC  30FF               	movlw	255
 27371  20BD  0095               	movwf	21	;volatile
 27372                           
 27373                           ;tmr0.c: 82: timer0ReloadVal16bit = (TMR0H << 8) | TMR0L;
 27374  20BE  0816               	movf	22,w	;volatile
 27375  20BF  0021               	movlb	1	; select bank1
 27376  20C0  00BF               	movwf	(_timer0ReloadVal16bit+1)^(0+128)	;volatile
 27377  20C1  0020               	movlb	0	; select bank0
 27378  20C2  0815               	movf	21,w	;volatile
 27379  20C3  0021               	movlb	1	; select bank1
 27380  20C4  00BE               	movwf	_timer0ReloadVal16bit^(0+128)	;volatile
 27381                           
 27382                           ;tmr0.c: 85: PIR0bits.TMR0IF = 0;
 27383  20C5  0020               	movlb	0	; select bank0
 27384  20C6  1290               	bcf	16,5	;volatile
 27385                           
 27386                           ;tmr0.c: 88: PIE0bits.TMR0IE = 1;
 27387  20C7  0021               	movlb	1	; select bank1
 27388  20C8  1690               	bsf	16,5	;volatile
 27389                           
 27390                           ;tmr0.c: 91: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
 27391  20C9  30DE               	movlw	low _TMR0_DefaultInterruptHandler
 27392  20CA  00F1               	movwf	TMR0_SetInterruptHandler@InterruptHandler
 27393  20CB  302D               	movlw	high _TMR0_DefaultInterruptHandler
 27394  20CC  00F2               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
 27395  20CD  31AD  25F7  31A0   	fcall	_TMR0_SetInterruptHandler
 27396                           
 27397                           ;tmr0.c: 94: TMR0_StartTimer();
 27398  20D0  31AD  25DF         	fcall	_TMR0_StartTimer
 27399  20D2  0008               	return
 27400  20D3                     __end_of_TMR0_Initialize:	
 27401                           
 27402                           	psect	text85
 27403  2DDF                     __ptext85:	
 27404 ;; *************** function _TMR0_StartTimer *****************
 27405 ;; Defined at:
 27406 ;;		line 97 in file "mcc_generated_files/tmr0.c"
 27407 ;; Parameters:    Size  Location     Type
 27408 ;;		None
 27409 ;; Auto vars:     Size  Location     Type
 27410 ;;		None
 27411 ;; Return value:  Size  Location     Type
 27412 ;;                  1    wreg      void 
 27413 ;; Registers used:
 27414 ;;		None
 27415 ;; Tracked objects:
 27416 ;;		On entry : 0/0
 27417 ;;		On exit  : 0/0
 27418 ;;		Unchanged: 0/0
 27419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27420 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27421 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27422 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27423 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27424 ;;Total ram usage:        0 bytes
 27425 ;; Hardware stack levels used:    1
 27426 ;; Hardware stack levels required when called:    4
 27427 ;; This function calls:
 27428 ;;		Nothing
 27429 ;; This function is called by:
 27430 ;;		_TMR0_Initialize
 27431 ;; This function uses a non-reentrant model
 27432 ;;
 27433                           
 27434                           
 27435                           ;psect for function _TMR0_StartTimer
 27436  2DDF                     _TMR0_StartTimer:	
 27437                           
 27438                           ;tmr0.c: 100: T0CON0bits.T0EN = 1;
 27439                           
 27440                           ;incstack = 0
 27441                           ; Regs used in _TMR0_StartTimer: []
 27442  2DDF  0020               	movlb	0	; select bank0
 27443  2DE0  1797               	bsf	23,7	;volatile
 27444  2DE1  0008               	return
 27445  2DE2                     __end_of_TMR0_StartTimer:	
 27446                           
 27447                           	psect	text86
 27448  2DF7                     __ptext86:	
 27449 ;; *************** function _TMR0_SetInterruptHandler *****************
 27450 ;; Defined at:
 27451 ;;		line 161 in file "mcc_generated_files/tmr0.c"
 27452 ;; Parameters:    Size  Location     Type
 27453 ;;  InterruptHan    2    1[COMMON] PTR void 
 27454 ;;		 -> TMR0_DefaultInterruptHandler(1), 
 27455 ;; Auto vars:     Size  Location     Type
 27456 ;;		None
 27457 ;; Return value:  Size  Location     Type
 27458 ;;                  1    wreg      void 
 27459 ;; Registers used:
 27460 ;;		wreg
 27461 ;; Tracked objects:
 27462 ;;		On entry : 0/0
 27463 ;;		On exit  : 0/0
 27464 ;;		Unchanged: 0/0
 27465 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27466 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27467 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27468 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27469 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27470 ;;Total ram usage:        2 bytes
 27471 ;; Hardware stack levels used:    1
 27472 ;; Hardware stack levels required when called:    4
 27473 ;; This function calls:
 27474 ;;		Nothing
 27475 ;; This function is called by:
 27476 ;;		_TMR0_Initialize
 27477 ;; This function uses a non-reentrant model
 27478 ;;
 27479                           
 27480                           
 27481                           ;psect for function _TMR0_SetInterruptHandler
 27482  2DF7                     _TMR0_SetInterruptHandler:	
 27483                           
 27484                           ;tmr0.c: 162: TMR0_InterruptHandler = InterruptHandler;
 27485                           
 27486                           ;incstack = 0
 27487                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
 27488  2DF7  0872               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
 27489  2DF8  0021               	movlb	1	; select bank1
 27490  2DF9  00BD               	movwf	(_TMR0_InterruptHandler+1)^(0+128)
 27491  2DFA  0871               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
 27492  2DFB  00BC               	movwf	_TMR0_InterruptHandler^(0+128)
 27493  2DFC  0008               	return
 27494  2DFD                     __end_of_TMR0_SetInterruptHandler:	
 27495                           
 27496                           	psect	text87
 27497  2E15                     __ptext87:	
 27498 ;; *************** function _SPI1_Initialize *****************
 27499 ;; Defined at:
 27500 ;;		line 63 in file "mcc_generated_files/spi1.c"
 27501 ;; Parameters:    Size  Location     Type
 27502 ;;		None
 27503 ;; Auto vars:     Size  Location     Type
 27504 ;;		None
 27505 ;; Return value:  Size  Location     Type
 27506 ;;                  1    wreg      void 
 27507 ;; Registers used:
 27508 ;;		wreg
 27509 ;; Tracked objects:
 27510 ;;		On entry : 0/0
 27511 ;;		On exit  : 0/0
 27512 ;;		Unchanged: 0/0
 27513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27514 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27515 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27516 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27517 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27518 ;;Total ram usage:        0 bytes
 27519 ;; Hardware stack levels used:    1
 27520 ;; Hardware stack levels required when called:    4
 27521 ;; This function calls:
 27522 ;;		Nothing
 27523 ;; This function is called by:
 27524 ;;		_SYSTEM_Initialize
 27525 ;;		_nullifyBadge_platformInit
 27526 ;; This function uses a non-reentrant model
 27527 ;;
 27528                           
 27529                           
 27530                           ;psect for function _SPI1_Initialize
 27531  2E15                     _SPI1_Initialize:	
 27532                           
 27533                           ;spi1.c: 68: SSP1STAT = 0x40;
 27534                           
 27535                           ;incstack = 0
 27536                           ; Regs used in _SPI1_Initialize: [wreg]
 27537  2E15  3040               	movlw	64
 27538  2E16  0024               	movlb	4	; select bank4
 27539  2E17  0094               	movwf	20	;volatile
 27540                           
 27541                           ;spi1.c: 71: SSP1CON1 = 0x22;
 27542  2E18  3022               	movlw	34
 27543  2E19  0095               	movwf	21	;volatile
 27544                           
 27545                           ;spi1.c: 74: SSP1ADD = 0x01;
 27546  2E1A  3001               	movlw	1
 27547  2E1B  0092               	movwf	18	;volatile
 27548  2E1C  0008               	return
 27549  2E1D                     __end_of_SPI1_Initialize:	
 27550                           
 27551                           	psect	text88
 27552  2E98                     __ptext88:	
 27553 ;; *************** function _PWM6_Initialize *****************
 27554 ;; Defined at:
 27555 ;;		line 57 in file "mcc_generated_files/pwm6.c"
 27556 ;; Parameters:    Size  Location     Type
 27557 ;;		None
 27558 ;; Auto vars:     Size  Location     Type
 27559 ;;		None
 27560 ;; Return value:  Size  Location     Type
 27561 ;;                  1    wreg      void 
 27562 ;; Registers used:
 27563 ;;		wreg, status,2, status,0
 27564 ;; Tracked objects:
 27565 ;;		On entry : 0/0
 27566 ;;		On exit  : 0/0
 27567 ;;		Unchanged: 0/0
 27568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27569 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27570 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27571 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27572 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27573 ;;Total ram usage:        0 bytes
 27574 ;; Hardware stack levels used:    1
 27575 ;; Hardware stack levels required when called:    4
 27576 ;; This function calls:
 27577 ;;		Nothing
 27578 ;; This function is called by:
 27579 ;;		_SYSTEM_Initialize
 27580 ;;		_nullifyBadge_platformInit
 27581 ;; This function uses a non-reentrant model
 27582 ;;
 27583                           
 27584                           
 27585                           ;psect for function _PWM6_Initialize
 27586  2E98                     _PWM6_Initialize:	
 27587                           
 27588                           ;pwm6.c: 61: PWM6CON = 0x90;
 27589                           
 27590                           ;incstack = 0
 27591                           ; Regs used in _PWM6_Initialize: [wreg+status,2+status,0]
 27592  2E98  3090               	movlw	144
 27593  2E99  002C               	movlb	12	; select bank12
 27594  2E9A  009C               	movwf	28	;volatile
 27595                           
 27596                           ;pwm6.c: 64: PWM6DCH = 0x7F;
 27597  2E9B  307F               	movlw	127
 27598  2E9C  009B               	movwf	27	;volatile
 27599                           
 27600                           ;pwm6.c: 67: PWM6DCL = 0xC0;
 27601  2E9D  30C0               	movlw	192
 27602  2E9E  009A               	movwf	26	;volatile
 27603                           
 27604                           ;pwm6.c: 71: PWMTMRSbits.P6TSEL = 0x2;
 27605  2E9F  081F               	movf	31,w	;volatile
 27606  2EA0  39F3               	andlw	-13
 27607  2EA1  3808               	iorlw	8
 27608  2EA2  009F               	movwf	31	;volatile
 27609  2EA3  0008               	return
 27610  2EA4                     __end_of_PWM6_Initialize:	
 27611                           
 27612                           	psect	text89
 27613  2E8C                     __ptext89:	
 27614 ;; *************** function _PWM5_Initialize *****************
 27615 ;; Defined at:
 27616 ;;		line 57 in file "mcc_generated_files/pwm5.c"
 27617 ;; Parameters:    Size  Location     Type
 27618 ;;		None
 27619 ;; Auto vars:     Size  Location     Type
 27620 ;;		None
 27621 ;; Return value:  Size  Location     Type
 27622 ;;                  1    wreg      void 
 27623 ;; Registers used:
 27624 ;;		wreg, status,2, status,0
 27625 ;; Tracked objects:
 27626 ;;		On entry : 0/0
 27627 ;;		On exit  : 0/0
 27628 ;;		Unchanged: 0/0
 27629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27630 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27631 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27633 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27634 ;;Total ram usage:        0 bytes
 27635 ;; Hardware stack levels used:    1
 27636 ;; Hardware stack levels required when called:    4
 27637 ;; This function calls:
 27638 ;;		Nothing
 27639 ;; This function is called by:
 27640 ;;		_SYSTEM_Initialize
 27641 ;;		_nullifyBadge_platformInit
 27642 ;; This function uses a non-reentrant model
 27643 ;;
 27644                           
 27645                           
 27646                           ;psect for function _PWM5_Initialize
 27647  2E8C                     _PWM5_Initialize:	
 27648                           
 27649                           ;pwm5.c: 61: PWM5CON = 0x90;
 27650                           
 27651                           ;incstack = 0
 27652                           ; Regs used in _PWM5_Initialize: [wreg+status,2+status,0]
 27653  2E8C  3090               	movlw	144
 27654  2E8D  002C               	movlb	12	; select bank12
 27655  2E8E  0099               	movwf	25	;volatile
 27656                           
 27657                           ;pwm5.c: 64: PWM5DCH = 0x7F;
 27658  2E8F  307F               	movlw	127
 27659  2E90  0098               	movwf	24	;volatile
 27660                           
 27661                           ;pwm5.c: 67: PWM5DCL = 0xC0;
 27662  2E91  30C0               	movlw	192
 27663  2E92  0097               	movwf	23	;volatile
 27664                           
 27665                           ;pwm5.c: 71: PWMTMRSbits.P5TSEL = 0x2;
 27666  2E93  081F               	movf	31,w	;volatile
 27667  2E94  39FC               	andlw	-4
 27668  2E95  3802               	iorlw	2
 27669  2E96  009F               	movwf	31	;volatile
 27670  2E97  0008               	return
 27671  2E98                     __end_of_PWM5_Initialize:	
 27672                           
 27673                           	psect	text90
 27674  2E6B                     __ptext90:	
 27675 ;; *************** function _PWM2_Initialize *****************
 27676 ;; Defined at:
 27677 ;;		line 63 in file "mcc_generated_files/pwm2.c"
 27678 ;; Parameters:    Size  Location     Type
 27679 ;;		None
 27680 ;; Auto vars:     Size  Location     Type
 27681 ;;		None
 27682 ;; Return value:  Size  Location     Type
 27683 ;;                  1    wreg      void 
 27684 ;; Registers used:
 27685 ;;		wreg, status,2, status,0
 27686 ;; Tracked objects:
 27687 ;;		On entry : 0/0
 27688 ;;		On exit  : 0/0
 27689 ;;		Unchanged: 0/0
 27690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27691 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27692 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27693 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27694 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27695 ;;Total ram usage:        0 bytes
 27696 ;; Hardware stack levels used:    1
 27697 ;; Hardware stack levels required when called:    4
 27698 ;; This function calls:
 27699 ;;		Nothing
 27700 ;; This function is called by:
 27701 ;;		_SYSTEM_Initialize
 27702 ;;		_nullifyBadge_platformInit
 27703 ;; This function uses a non-reentrant model
 27704 ;;
 27705                           
 27706                           
 27707                           ;psect for function _PWM2_Initialize
 27708  2E6B                     _PWM2_Initialize:	
 27709                           
 27710                           ;pwm2.c: 68: CCP2CON = 0x8F;
 27711                           
 27712                           ;incstack = 0
 27713                           ; Regs used in _PWM2_Initialize: [wreg+status,2+status,0]
 27714  2E6B  308F               	movlw	143
 27715  2E6C  0025               	movlb	5	; select bank5
 27716  2E6D  0097               	movwf	23	;volatile
 27717                           
 27718                           ;pwm2.c: 71: CCPR2H = 0x00;
 27719  2E6E  0196               	clrf	22	;volatile
 27720                           
 27721                           ;pwm2.c: 74: CCPR2L = 0xE0;
 27722  2E6F  30E0               	movlw	224
 27723  2E70  0095               	movwf	21	;volatile
 27724                           
 27725                           ;pwm2.c: 77: CCPTMRSbits.C2TSEL = 0x1;
 27726  2E71  081F               	movf	31,w	;volatile
 27727  2E72  39F3               	andlw	-13
 27728  2E73  3804               	iorlw	4
 27729  2E74  009F               	movwf	31	;volatile
 27730  2E75  0008               	return
 27731  2E76                     __end_of_PWM2_Initialize:	
 27732                           
 27733                           	psect	text91
 27734  2E60                     __ptext91:	
 27735 ;; *************** function _PWM1_Initialize *****************
 27736 ;; Defined at:
 27737 ;;		line 63 in file "mcc_generated_files/pwm1.c"
 27738 ;; Parameters:    Size  Location     Type
 27739 ;;		None
 27740 ;; Auto vars:     Size  Location     Type
 27741 ;;		None
 27742 ;; Return value:  Size  Location     Type
 27743 ;;                  1    wreg      void 
 27744 ;; Registers used:
 27745 ;;		wreg, status,2, status,0
 27746 ;; Tracked objects:
 27747 ;;		On entry : 0/0
 27748 ;;		On exit  : 0/0
 27749 ;;		Unchanged: 0/0
 27750 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27751 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27752 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27753 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27754 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27755 ;;Total ram usage:        0 bytes
 27756 ;; Hardware stack levels used:    1
 27757 ;; Hardware stack levels required when called:    4
 27758 ;; This function calls:
 27759 ;;		Nothing
 27760 ;; This function is called by:
 27761 ;;		_SYSTEM_Initialize
 27762 ;;		_nullifyBadge_platformInit
 27763 ;; This function uses a non-reentrant model
 27764 ;;
 27765                           
 27766                           
 27767                           ;psect for function _PWM1_Initialize
 27768  2E60                     _PWM1_Initialize:	
 27769                           
 27770                           ;pwm1.c: 68: CCP1CON = 0x8F;
 27771                           
 27772                           ;incstack = 0
 27773                           ; Regs used in _PWM1_Initialize: [wreg+status,2+status,0]
 27774  2E60  308F               	movlw	143
 27775  2E61  0025               	movlb	5	; select bank5
 27776  2E62  0093               	movwf	19	;volatile
 27777                           
 27778                           ;pwm1.c: 71: CCPR1H = 0x00;
 27779  2E63  0192               	clrf	18	;volatile
 27780                           
 27781                           ;pwm1.c: 74: CCPR1L = 0x95;
 27782  2E64  3095               	movlw	149
 27783  2E65  0091               	movwf	17	;volatile
 27784                           
 27785                           ;pwm1.c: 77: CCPTMRSbits.C1TSEL = 0x1;
 27786  2E66  081F               	movf	31,w	;volatile
 27787  2E67  39FC               	andlw	-4
 27788  2E68  3801               	iorlw	1
 27789  2E69  009F               	movwf	31	;volatile
 27790  2E6A  0008               	return
 27791  2E6B                     __end_of_PWM1_Initialize:	
 27792                           
 27793                           	psect	text92
 27794  2756                     __ptext92:	
 27795 ;; *************** function _PIN_MANAGER_Initialize *****************
 27796 ;; Defined at:
 27797 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
 27798 ;; Parameters:    Size  Location     Type
 27799 ;;		None
 27800 ;; Auto vars:     Size  Location     Type
 27801 ;;  state           1    1[COMMON] unsigned char 
 27802 ;; Return value:  Size  Location     Type
 27803 ;;                  1    wreg      void 
 27804 ;; Registers used:
 27805 ;;		wreg, status,2, status,0
 27806 ;; Tracked objects:
 27807 ;;		On entry : 0/0
 27808 ;;		On exit  : 0/0
 27809 ;;		Unchanged: 0/0
 27810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 27811 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27812 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27813 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27814 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 27815 ;;Total ram usage:        1 bytes
 27816 ;; Hardware stack levels used:    1
 27817 ;; Hardware stack levels required when called:    4
 27818 ;; This function calls:
 27819 ;;		Nothing
 27820 ;; This function is called by:
 27821 ;;		_SYSTEM_Initialize
 27822 ;;		_nullifyBadge_platformInit
 27823 ;; This function uses a non-reentrant model
 27824 ;;
 27825                           
 27826                           
 27827                           ;psect for function _PIN_MANAGER_Initialize
 27828  2756                     _PIN_MANAGER_Initialize:	
 27829                           
 27830                           ;pin_manager.c: 56: LATA = 0x00;
 27831                           
 27832                           ;incstack = 0
 27833                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0]
 27834  2756  0022               	movlb	2	; select bank2
 27835  2757  018C               	clrf	12	;volatile
 27836                           
 27837                           ;pin_manager.c: 57: LATB = 0x80;
 27838  2758  3080               	movlw	128
 27839  2759  008D               	movwf	13	;volatile
 27840                           
 27841                           ;pin_manager.c: 58: LATC = 0x1A;
 27842  275A  301A               	movlw	26
 27843  275B  008E               	movwf	14	;volatile
 27844                           
 27845                           ;pin_manager.c: 63: TRISA = 0x37;
 27846  275C  3037               	movlw	55
 27847  275D  0021               	movlb	1	; select bank1
 27848  275E  008C               	movwf	12	;volatile
 27849                           
 27850                           ;pin_manager.c: 64: TRISB = 0x30;
 27851  275F  3030               	movlw	48
 27852  2760  008D               	movwf	13	;volatile
 27853                           
 27854                           ;pin_manager.c: 65: TRISC = 0x60;
 27855  2761  3060               	movlw	96
 27856  2762  008E               	movwf	14	;volatile
 27857                           
 27858                           ;pin_manager.c: 70: ANSELC = 0x40;
 27859  2763  3040               	movlw	64
 27860  2764  0023               	movlb	3	; select bank3
 27861  2765  008E               	movwf	14	;volatile
 27862                           
 27863                           ;pin_manager.c: 71: ANSELB = 0x00;
 27864  2766  018D               	clrf	13	;volatile
 27865                           
 27866                           ;pin_manager.c: 72: ANSELA = 0x03;
 27867  2767  3003               	movlw	3
 27868  2768  008C               	movwf	12	;volatile
 27869                           
 27870                           ;pin_manager.c: 77: WPUB = 0x00;
 27871  2769  0024               	movlb	4	; select bank4
 27872  276A  018D               	clrf	13	;volatile
 27873                           
 27874                           ;pin_manager.c: 78: WPUA = 0x00;
 27875  276B  018C               	clrf	12	;volatile
 27876                           
 27877                           ;pin_manager.c: 79: WPUC = 0x00;
 27878  276C  018E               	clrf	14	;volatile
 27879                           
 27880                           ;pin_manager.c: 84: ODCONA = 0x00;
 27881  276D  0025               	movlb	5	; select bank5
 27882  276E  018C               	clrf	12	;volatile
 27883                           
 27884                           ;pin_manager.c: 85: ODCONB = 0x00;
 27885  276F  018D               	clrf	13	;volatile
 27886                           
 27887                           ;pin_manager.c: 86: ODCONC = 0x00;
 27888  2770  018E               	clrf	14	;volatile
 27889                           
 27890                           ;pin_manager.c: 93: bool state = GIE;
 27891  2771  3000               	movlw	0
 27892  2772  1B8B               	btfsc	11,7	;volatile
 27893  2773  3001               	movlw	1
 27894  2774  00F1               	movwf	PIN_MANAGER_Initialize@state
 27895                           
 27896                           ;pin_manager.c: 94: GIE = 0;
 27897  2775  138B               	bcf	11,7	;volatile
 27898                           
 27899                           ;pin_manager.c: 95: PPSLOCK = 0x55;
 27900  2776  3055               	movlw	85
 27901  2777  003C               	movlb	28	; select bank28
 27902  2778  008F               	movwf	15	;volatile
 27903                           
 27904                           ;pin_manager.c: 96: PPSLOCK = 0xAA;
 27905  2779  30AA               	movlw	170
 27906  277A  008F               	movwf	15	;volatile
 27907                           
 27908                           ;pin_manager.c: 97: PPSLOCKbits.PPSLOCKED = 0x00;
 27909  277B  100F               	bcf	15,0	;volatile
 27910                           
 27911                           ;pin_manager.c: 99: RC1PPSbits.RC1PPS = 0x0D;
 27912  277C  003D               	movlb	29	; select bank29
 27913  277D  0821               	movf	33,w	;volatile
 27914  277E  39E0               	andlw	-32
 27915  277F  380D               	iorlw	13
 27916  2780  00A1               	movwf	33	;volatile
 27917                           
 27918                           ;pin_manager.c: 100: SSP1DATPPSbits.SSP1DATPPS = 0x0C;
 27919  2781  003C               	movlb	28	; select bank28
 27920  2782  0821               	movf	33,w	;volatile
 27921  2783  39E0               	andlw	-32
 27922  2784  380C               	iorlw	12
 27923  2785  00A1               	movwf	33	;volatile
 27924                           
 27925                           ;pin_manager.c: 101: SSP1CLKPPSbits.SSP1CLKPPS = 0x0E;
 27926  2786  0820               	movf	32,w	;volatile
 27927  2787  39E0               	andlw	-32
 27928  2788  380E               	iorlw	14
 27929  2789  00A0               	movwf	32	;volatile
 27930                           
 27931                           ;pin_manager.c: 102: RC4PPSbits.RC4PPS = 0x02;
 27932  278A  003D               	movlb	29	; select bank29
 27933  278B  0824               	movf	36,w	;volatile
 27934  278C  39E0               	andlw	-32
 27935  278D  3802               	iorlw	2
 27936  278E  00A4               	movwf	36	;volatile
 27937                           
 27938                           ;pin_manager.c: 103: RC0PPSbits.RC0PPS = 0x0C;
 27939  278F  0820               	movf	32,w	;volatile
 27940  2790  39E0               	andlw	-32
 27941  2791  380C               	iorlw	12
 27942  2792  00A0               	movwf	32	;volatile
 27943                           
 27944                           ;pin_manager.c: 104: RC3PPSbits.RC3PPS = 0x03;
 27945  2793  0823               	movf	35,w	;volatile
 27946  2794  39E0               	andlw	-32
 27947  2795  3803               	iorlw	3
 27948  2796  00A3               	movwf	35	;volatile
 27949                           
 27950                           ;pin_manager.c: 105: RB6PPSbits.RB6PPS = 0x18;
 27951  2797  081E               	movf	30,w	;volatile
 27952  2798  39E0               	andlw	-32
 27953  2799  3818               	iorlw	24
 27954  279A  009E               	movwf	30	;volatile
 27955                           
 27956                           ;pin_manager.c: 106: RC2PPSbits.RC2PPS = 0x19;
 27957  279B  0822               	movf	34,w	;volatile
 27958  279C  39E0               	andlw	-32
 27959  279D  3819               	iorlw	25
 27960  279E  00A2               	movwf	34	;volatile
 27961                           
 27962                           ;pin_manager.c: 108: PPSLOCK = 0x55;
 27963  279F  3055               	movlw	85
 27964  27A0  003C               	movlb	28	; select bank28
 27965  27A1  008F               	movwf	15	;volatile
 27966                           
 27967                           ;pin_manager.c: 109: PPSLOCK = 0xAA;
 27968  27A2  30AA               	movlw	170
 27969  27A3  008F               	movwf	15	;volatile
 27970                           
 27971                           ;pin_manager.c: 110: PPSLOCKbits.PPSLOCKED = 0x01;
 27972  27A4  140F               	bsf	15,0	;volatile
 27973                           
 27974                           ;pin_manager.c: 112: GIE = state;
 27975  27A5  1C71               	btfss	PIN_MANAGER_Initialize@state,0
 27976  27A6  2FA9               	goto	u2960
 27977  27A7  178B               	bsf	11,7	;volatile
 27978  27A8  0008               	return
 27979  27A9                     u2960:	
 27980  27A9  138B               	bcf	11,7	;volatile
 27981  27AA  0008               	return
 27982  27AB                     __end_of_PIN_MANAGER_Initialize:	
 27983                           
 27984                           	psect	text93
 27985  2E37                     __ptext93:	
 27986 ;; *************** function _OSCILLATOR_Initialize *****************
 27987 ;; Defined at:
 27988 ;;		line 92 in file "mcc_generated_files/mcc.c"
 27989 ;; Parameters:    Size  Location     Type
 27990 ;;		None
 27991 ;; Auto vars:     Size  Location     Type
 27992 ;;		None
 27993 ;; Return value:  Size  Location     Type
 27994 ;;                  1    wreg      void 
 27995 ;; Registers used:
 27996 ;;		wreg, status,2
 27997 ;; Tracked objects:
 27998 ;;		On entry : 0/0
 27999 ;;		On exit  : 0/0
 28000 ;;		Unchanged: 0/0
 28001 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28002 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28003 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28004 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28005 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28006 ;;Total ram usage:        0 bytes
 28007 ;; Hardware stack levels used:    1
 28008 ;; Hardware stack levels required when called:    4
 28009 ;; This function calls:
 28010 ;;		Nothing
 28011 ;; This function is called by:
 28012 ;;		_SYSTEM_Initialize
 28013 ;;		_nullifyBadge_platformInit
 28014 ;; This function uses a non-reentrant model
 28015 ;;
 28016                           
 28017                           
 28018                           ;psect for function _OSCILLATOR_Initialize
 28019  2E37                     _OSCILLATOR_Initialize:	
 28020                           
 28021                           ;mcc.c: 95: OSCCON1 = 0x00;
 28022                           
 28023                           ;incstack = 0
 28024                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 28025  2E37  0032               	movlb	18	; select bank18
 28026  2E38  0199               	clrf	25	;volatile
 28027                           
 28028                           ;mcc.c: 97: OSCCON3 = 0x00;
 28029  2E39  019B               	clrf	27	;volatile
 28030                           
 28031                           ;mcc.c: 99: OSCEN = 0x00;
 28032  2E3A  019D               	clrf	29	;volatile
 28033                           
 28034                           ;mcc.c: 101: OSCFRQ = 0x06;
 28035  2E3B  3006               	movlw	6
 28036  2E3C  009F               	movwf	31	;volatile
 28037                           
 28038                           ;mcc.c: 103: OSCTUNE = 0x00;
 28039  2E3D  019E               	clrf	30	;volatile
 28040  2E3E                     l208:	
 28041                           ;mcc.c: 106: {
 28042                           
 28043                           ;mcc.c: 105: while(PLLR == 0)
 28044                           
 28045  2E3E  181C               	btfsc	28,0	;volatile
 28046  2E3F  0008               	return
 28047  2E40  2E3E               	goto	l208
 28048  2E41                     __end_of_OSCILLATOR_Initialize:	
 28049                           
 28050                           	psect	text94
 28051  2FB9                     __ptext94:	
 28052 ;; *************** function _PWM6_LoadDutyValue *****************
 28053 ;; Defined at:
 28054 ;;		line 74 in file "mcc_generated_files/pwm6.c"
 28055 ;; Parameters:    Size  Location     Type
 28056 ;;  dutyValue       2    1[COMMON] unsigned int 
 28057 ;; Auto vars:     Size  Location     Type
 28058 ;;		None
 28059 ;; Return value:  Size  Location     Type
 28060 ;;                  1    wreg      void 
 28061 ;; Registers used:
 28062 ;;		wreg, status,2, status,0
 28063 ;; Tracked objects:
 28064 ;;		On entry : 0/0
 28065 ;;		On exit  : 0/0
 28066 ;;		Unchanged: 0/0
 28067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28068 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28069 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28070 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28071 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28072 ;;Total ram usage:        4 bytes
 28073 ;; Hardware stack levels used:    1
 28074 ;; Hardware stack levels required when called:    4
 28075 ;; This function calls:
 28076 ;;		Nothing
 28077 ;; This function is called by:
 28078 ;;		_nullifyBadge_platformInit
 28079 ;;		_nullifyBadge_userLedsSetBrightness
 28080 ;; This function uses a non-reentrant model
 28081 ;;
 28082                           
 28083                           
 28084                           ;psect for function _PWM6_LoadDutyValue
 28085  2FB9                     _PWM6_LoadDutyValue:	
 28086                           
 28087                           ;pwm6.c: 77: PWM6DCH = (dutyValue & 0x03FC)>>2;
 28088                           
 28089                           ;incstack = 0
 28090                           ; Regs used in _PWM6_LoadDutyValue: [wreg+status,2+status,0]
 28091  2FB9  0872               	movf	PWM6_LoadDutyValue@dutyValue+1,w
 28092  2FBA  00F4               	movwf	??_PWM6_LoadDutyValue+1
 28093  2FBB  0871               	movf	PWM6_LoadDutyValue@dutyValue,w
 28094  2FBC  00F3               	movwf	??_PWM6_LoadDutyValue
 28095  2FBD  36F4               	lsrf	??_PWM6_LoadDutyValue+1,f
 28096  2FBE  0CF3               	rrf	??_PWM6_LoadDutyValue,f
 28097  2FBF  36F4               	lsrf	??_PWM6_LoadDutyValue+1,f
 28098  2FC0  0CF3               	rrf	??_PWM6_LoadDutyValue,f
 28099  2FC1  0873               	movf	??_PWM6_LoadDutyValue,w
 28100  2FC2  002C               	movlb	12	; select bank12
 28101  2FC3  009B               	movwf	27	;volatile
 28102                           
 28103                           ;pwm6.c: 80: PWM6DCL = (dutyValue & 0x0003)<<6;
 28104  2FC4  0871               	movf	PWM6_LoadDutyValue@dutyValue,w
 28105  2FC5  3903               	andlw	3
 28106  2FC6  00F3               	movwf	??_PWM6_LoadDutyValue
 28107  2FC7  3005               	movlw	5
 28108  2FC8                     u3675:	
 28109  2FC8  35F3               	lslf	??_PWM6_LoadDutyValue,f
 28110  2FC9  3EFF               	addlw	-1
 28111  2FCA  1D03               	skipz
 28112  2FCB  2FC8               	goto	u3675
 28113  2FCC  3573               	lslf	??_PWM6_LoadDutyValue,w
 28114  2FCD  009A               	movwf	26	;volatile
 28115  2FCE  0008               	return
 28116  2FCF                     __end_of_PWM6_LoadDutyValue:	
 28117                           
 28118                           	psect	text95
 28119  2FA3                     __ptext95:	
 28120 ;; *************** function _PWM5_LoadDutyValue *****************
 28121 ;; Defined at:
 28122 ;;		line 74 in file "mcc_generated_files/pwm5.c"
 28123 ;; Parameters:    Size  Location     Type
 28124 ;;  dutyValue       2    1[COMMON] unsigned int 
 28125 ;; Auto vars:     Size  Location     Type
 28126 ;;		None
 28127 ;; Return value:  Size  Location     Type
 28128 ;;                  1    wreg      void 
 28129 ;; Registers used:
 28130 ;;		wreg, status,2, status,0
 28131 ;; Tracked objects:
 28132 ;;		On entry : 0/0
 28133 ;;		On exit  : 0/0
 28134 ;;		Unchanged: 0/0
 28135 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28136 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28137 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28138 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28139 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28140 ;;Total ram usage:        4 bytes
 28141 ;; Hardware stack levels used:    1
 28142 ;; Hardware stack levels required when called:    4
 28143 ;; This function calls:
 28144 ;;		Nothing
 28145 ;; This function is called by:
 28146 ;;		_nullifyBadge_platformInit
 28147 ;;		_fadeDisplay_Init
 28148 ;;		_nullifyBadge_segDisplaySetBrightness
 28149 ;; This function uses a non-reentrant model
 28150 ;;
 28151                           
 28152                           
 28153                           ;psect for function _PWM5_LoadDutyValue
 28154  2FA3                     _PWM5_LoadDutyValue:	
 28155                           
 28156                           ;pwm5.c: 77: PWM5DCH = (dutyValue & 0x03FC)>>2;
 28157                           
 28158                           ;incstack = 0
 28159                           ; Regs used in _PWM5_LoadDutyValue: [wreg+status,2+status,0]
 28160  2FA3  0872               	movf	PWM5_LoadDutyValue@dutyValue+1,w
 28161  2FA4  00F4               	movwf	??_PWM5_LoadDutyValue+1
 28162  2FA5  0871               	movf	PWM5_LoadDutyValue@dutyValue,w
 28163  2FA6  00F3               	movwf	??_PWM5_LoadDutyValue
 28164  2FA7  36F4               	lsrf	??_PWM5_LoadDutyValue+1,f
 28165  2FA8  0CF3               	rrf	??_PWM5_LoadDutyValue,f
 28166  2FA9  36F4               	lsrf	??_PWM5_LoadDutyValue+1,f
 28167  2FAA  0CF3               	rrf	??_PWM5_LoadDutyValue,f
 28168  2FAB  0873               	movf	??_PWM5_LoadDutyValue,w
 28169  2FAC  002C               	movlb	12	; select bank12
 28170  2FAD  0098               	movwf	24	;volatile
 28171                           
 28172                           ;pwm5.c: 80: PWM5DCL = (dutyValue & 0x0003)<<6;
 28173  2FAE  0871               	movf	PWM5_LoadDutyValue@dutyValue,w
 28174  2FAF  3903               	andlw	3
 28175  2FB0  00F3               	movwf	??_PWM5_LoadDutyValue
 28176  2FB1  3005               	movlw	5
 28177  2FB2                     u3665:	
 28178  2FB2  35F3               	lslf	??_PWM5_LoadDutyValue,f
 28179  2FB3  3EFF               	addlw	-1
 28180  2FB4  1D03               	skipz
 28181  2FB5  2FB2               	goto	u3665
 28182  2FB6  3573               	lslf	??_PWM5_LoadDutyValue,w
 28183  2FB7  0097               	movwf	23	;volatile
 28184  2FB8  0008               	return
 28185  2FB9                     __end_of_PWM5_LoadDutyValue:	
 28186                           
 28187                           	psect	text96
 28188  2F8D                     __ptext96:	
 28189 ;; *************** function _PWM2_LoadDutyValue *****************
 28190 ;; Defined at:
 28191 ;;		line 80 in file "mcc_generated_files/pwm2.c"
 28192 ;; Parameters:    Size  Location     Type
 28193 ;;  dutyValue       2    1[COMMON] unsigned int 
 28194 ;; Auto vars:     Size  Location     Type
 28195 ;;		None
 28196 ;; Return value:  Size  Location     Type
 28197 ;;                  1    wreg      void 
 28198 ;; Registers used:
 28199 ;;		wreg, status,2
 28200 ;; Tracked objects:
 28201 ;;		On entry : 0/0
 28202 ;;		On exit  : 0/0
 28203 ;;		Unchanged: 0/0
 28204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28205 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28206 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28207 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28208 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28209 ;;Total ram usage:        2 bytes
 28210 ;; Hardware stack levels used:    1
 28211 ;; Hardware stack levels required when called:    4
 28212 ;; This function calls:
 28213 ;;		Nothing
 28214 ;; This function is called by:
 28215 ;;		_nullifyBadge_platformInit
 28216 ;; This function uses a non-reentrant model
 28217 ;;
 28218                           
 28219                           
 28220                           ;psect for function _PWM2_LoadDutyValue
 28221  2F8D                     _PWM2_LoadDutyValue:	
 28222                           
 28223                           ;pwm2.c: 82: dutyValue &= 0x03FF;
 28224                           
 28225                           ;incstack = 0
 28226                           ; Regs used in _PWM2_LoadDutyValue: [wreg+status,2]
 28227  2F8D  30FF               	movlw	255
 28228  2F8E  05F1               	andwf	PWM2_LoadDutyValue@dutyValue,f
 28229  2F8F  3003               	movlw	3
 28230  2F90  05F2               	andwf	PWM2_LoadDutyValue@dutyValue+1,f
 28231                           
 28232                           ;pwm2.c: 85: if(CCP2CONbits.CCP2FMT)
 28233  2F91  0025               	movlb	5	; select bank5
 28234  2F92  1E17               	btfss	23,4	;volatile
 28235  2F93  2F9E               	goto	l6314
 28236                           
 28237                           ;pwm2.c: 86: {
 28238                           ;pwm2.c: 87: dutyValue <<= 6;
 28239  2F94  3006               	movlw	6
 28240  2F95                     u3715:	
 28241  2F95  35F1               	lslf	PWM2_LoadDutyValue@dutyValue,f
 28242  2F96  0DF2               	rlf	PWM2_LoadDutyValue@dutyValue+1,f
 28243  2F97  0B89               	decfsz	9,f
 28244  2F98  2F95               	goto	u3715
 28245                           
 28246                           ;pwm2.c: 88: CCPR2H = dutyValue >> 8;
 28247  2F99  0872               	movf	PWM2_LoadDutyValue@dutyValue+1,w
 28248  2F9A  0096               	movwf	22	;volatile
 28249                           
 28250                           ;pwm2.c: 89: CCPR2L = dutyValue;
 28251  2F9B  0871               	movf	PWM2_LoadDutyValue@dutyValue,w
 28252  2F9C  0095               	movwf	21	;volatile
 28253                           
 28254                           ;pwm2.c: 90: }
 28255  2F9D  0008               	return
 28256  2F9E                     l6314:	
 28257                           
 28258                           ;pwm2.c: 91: else
 28259                           ;pwm2.c: 92: {
 28260                           ;pwm2.c: 93: CCPR2H = dutyValue >> 8;
 28261  2F9E  0872               	movf	PWM2_LoadDutyValue@dutyValue+1,w
 28262  2F9F  0096               	movwf	22	;volatile
 28263                           
 28264                           ;pwm2.c: 94: CCPR2L = dutyValue;
 28265  2FA0  0871               	movf	PWM2_LoadDutyValue@dutyValue,w
 28266  2FA1  0095               	movwf	21	;volatile
 28267  2FA2  0008               	return
 28268  2FA3                     __end_of_PWM2_LoadDutyValue:	
 28269                           
 28270                           	psect	text97
 28271  2F77                     __ptext97:	
 28272 ;; *************** function _PWM1_LoadDutyValue *****************
 28273 ;; Defined at:
 28274 ;;		line 80 in file "mcc_generated_files/pwm1.c"
 28275 ;; Parameters:    Size  Location     Type
 28276 ;;  dutyValue       2    1[COMMON] unsigned int 
 28277 ;; Auto vars:     Size  Location     Type
 28278 ;;		None
 28279 ;; Return value:  Size  Location     Type
 28280 ;;                  1    wreg      void 
 28281 ;; Registers used:
 28282 ;;		wreg, status,2
 28283 ;; Tracked objects:
 28284 ;;		On entry : 0/0
 28285 ;;		On exit  : 0/0
 28286 ;;		Unchanged: 0/0
 28287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28288 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28289 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28290 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28291 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28292 ;;Total ram usage:        2 bytes
 28293 ;; Hardware stack levels used:    1
 28294 ;; Hardware stack levels required when called:    4
 28295 ;; This function calls:
 28296 ;;		Nothing
 28297 ;; This function is called by:
 28298 ;;		_nullifyBadge_platformInit
 28299 ;; This function uses a non-reentrant model
 28300 ;;
 28301                           
 28302                           
 28303                           ;psect for function _PWM1_LoadDutyValue
 28304  2F77                     _PWM1_LoadDutyValue:	
 28305                           
 28306                           ;pwm1.c: 82: dutyValue &= 0x03FF;
 28307                           
 28308                           ;incstack = 0
 28309                           ; Regs used in _PWM1_LoadDutyValue: [wreg+status,2]
 28310  2F77  30FF               	movlw	255
 28311  2F78  05F1               	andwf	PWM1_LoadDutyValue@dutyValue,f
 28312  2F79  3003               	movlw	3
 28313  2F7A  05F2               	andwf	PWM1_LoadDutyValue@dutyValue+1,f
 28314                           
 28315                           ;pwm1.c: 85: if(CCP1CONbits.CCP1FMT)
 28316  2F7B  0025               	movlb	5	; select bank5
 28317  2F7C  1E13               	btfss	19,4	;volatile
 28318  2F7D  2F88               	goto	l6298
 28319                           
 28320                           ;pwm1.c: 86: {
 28321                           ;pwm1.c: 87: dutyValue <<= 6;
 28322  2F7E  3006               	movlw	6
 28323  2F7F                     u3695:	
 28324  2F7F  35F1               	lslf	PWM1_LoadDutyValue@dutyValue,f
 28325  2F80  0DF2               	rlf	PWM1_LoadDutyValue@dutyValue+1,f
 28326  2F81  0B89               	decfsz	9,f
 28327  2F82  2F7F               	goto	u3695
 28328                           
 28329                           ;pwm1.c: 88: CCPR1H = dutyValue >> 8;
 28330  2F83  0872               	movf	PWM1_LoadDutyValue@dutyValue+1,w
 28331  2F84  0092               	movwf	18	;volatile
 28332                           
 28333                           ;pwm1.c: 89: CCPR1L = dutyValue;
 28334  2F85  0871               	movf	PWM1_LoadDutyValue@dutyValue,w
 28335  2F86  0091               	movwf	17	;volatile
 28336                           
 28337                           ;pwm1.c: 90: }
 28338  2F87  0008               	return
 28339  2F88                     l6298:	
 28340                           
 28341                           ;pwm1.c: 91: else
 28342                           ;pwm1.c: 92: {
 28343                           ;pwm1.c: 93: CCPR1H = dutyValue >> 8;
 28344  2F88  0872               	movf	PWM1_LoadDutyValue@dutyValue+1,w
 28345  2F89  0092               	movwf	18	;volatile
 28346                           
 28347                           ;pwm1.c: 94: CCPR1L = dutyValue;
 28348  2F8A  0871               	movf	PWM1_LoadDutyValue@dutyValue,w
 28349  2F8B  0091               	movwf	17	;volatile
 28350  2F8C  0008               	return
 28351  2F8D                     __end_of_PWM1_LoadDutyValue:	
 28352                           
 28353                           	psect	intentry
 28354  0004                     __pintentry:	
 28355 ;; *************** function _INTERRUPT_InterruptManager *****************
 28356 ;; Defined at:
 28357 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
 28358 ;; Parameters:    Size  Location     Type
 28359 ;;		None
 28360 ;; Auto vars:     Size  Location     Type
 28361 ;;		None
 28362 ;; Return value:  Size  Location     Type
 28363 ;;                  1    wreg      void 
 28364 ;; Registers used:
 28365 ;;		wreg, status,2, status,0, pclath, cstack
 28366 ;; Tracked objects:
 28367 ;;		On entry : 0/0
 28368 ;;		On exit  : 0/0
 28369 ;;		Unchanged: 0/0
 28370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28371 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28372 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28373 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28374 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28375 ;;Total ram usage:        1 bytes
 28376 ;; Hardware stack levels used:    1
 28377 ;; Hardware stack levels required when called:    3
 28378 ;; This function calls:
 28379 ;;		_TMR0_ISR
 28380 ;; This function is called by:
 28381 ;;		Interrupt level 1
 28382 ;; This function uses a non-reentrant model
 28383 ;;
 28384                           
 28385  0004                     _INTERRUPT_InterruptManager:	
 28386                           
 28387                           ;incstack = 0
 28388  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 28389                           
 28390                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+status,2+status,0+pclath+cstack]
 28391  0005  3180               	pagesel	$
 28392  0006  0020               	movlb	0	; select bank0
 28393  0007  087F               	movf	127,w
 28394  0008  00F0               	movwf	??_INTERRUPT_InterruptManager
 28395                           
 28396                           ;interrupt_manager.c: 54: if(PIE0bits.TMR0IE == 1 && PIR0bits.TMR0IF == 1)
 28397  0009  0021               	movlb	1	; select bank1
 28398  000A  1E90               	btfss	16,5	;volatile
 28399  000B  2811               	goto	i1l363
 28400  000C  0020               	movlb	0	; select bank0
 28401  000D  1E90               	btfss	16,5	;volatile
 28402  000E  2811               	goto	i1l363
 28403                           
 28404                           ;interrupt_manager.c: 55: {
 28405                           ;interrupt_manager.c: 56: TMR0_ISR();
 28406  000F  31AE  26B0         	fcall	_TMR0_ISR
 28407  0011                     i1l363:	
 28408                           ;interrupt_manager.c: 58: else
 28409                           ;interrupt_manager.c: 59: {
 28410                           
 28411                           ;interrupt_manager.c: 57: }
 28412                           
 28413  0011  0870               	movf	??_INTERRUPT_InterruptManager,w
 28414  0012  0020               	movlb	0	; select bank0
 28415  0013  00FF               	movwf	127
 28416  0014  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 28417  0015  0009               	retfie
 28418  0016                     __end_of_INTERRUPT_InterruptManager:	
 28419                           
 28420                           	psect	text99
 28421  2EB0                     __ptext99:	
 28422 ;; *************** function _TMR0_ISR *****************
 28423 ;; Defined at:
 28424 ;;		line 136 in file "mcc_generated_files/tmr0.c"
 28425 ;; Parameters:    Size  Location     Type
 28426 ;;		None
 28427 ;; Auto vars:     Size  Location     Type
 28428 ;;		None
 28429 ;; Return value:  Size  Location     Type
 28430 ;;                  1    wreg      void 
 28431 ;; Registers used:
 28432 ;;		wreg, status,2, status,0, pclath, cstack
 28433 ;; Tracked objects:
 28434 ;;		On entry : 0/0
 28435 ;;		On exit  : 0/0
 28436 ;;		Unchanged: 0/0
 28437 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28438 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28439 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28440 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28441 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28442 ;;Total ram usage:        0 bytes
 28443 ;; Hardware stack levels used:    1
 28444 ;; Hardware stack levels required when called:    2
 28445 ;; This function calls:
 28446 ;;		_TMR0_CallBack
 28447 ;; This function is called by:
 28448 ;;		_INTERRUPT_InterruptManager
 28449 ;; This function uses a non-reentrant model
 28450 ;;
 28451                           
 28452                           
 28453                           ;psect for function _TMR0_ISR
 28454  2EB0                     _TMR0_ISR:	
 28455                           
 28456                           ;tmr0.c: 139: PIR0bits.TMR0IF = 0;
 28457                           
 28458                           ;incstack = 0
 28459                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
 28460  2EB0  0020               	movlb	0	; select bank0
 28461  2EB1  1290               	bcf	16,5	;volatile
 28462                           
 28463                           ;tmr0.c: 141: TMR0H = timer0ReloadVal16bit >> 8;
 28464  2EB2  0021               	movlb	1	; select bank1
 28465  2EB3  083F               	movf	(_timer0ReloadVal16bit+1)^(0+128),w	;volatile
 28466  2EB4  0020               	movlb	0	; select bank0
 28467  2EB5  0096               	movwf	22	;volatile
 28468                           
 28469                           ;tmr0.c: 142: TMR0L = (uint8_t) timer0ReloadVal16bit;
 28470  2EB6  0021               	movlb	1	; select bank1
 28471  2EB7  083E               	movf	_timer0ReloadVal16bit^(0+128),w	;volatile
 28472  2EB8  0020               	movlb	0	; select bank0
 28473  2EB9  0095               	movwf	21	;volatile
 28474                           
 28475                           ;tmr0.c: 146: TMR0_CallBack();
 28476  2EBA  31AE  2655         	fcall	_TMR0_CallBack
 28477  2EBC  0008               	return
 28478  2EBD                     __end_of_TMR0_ISR:	
 28479                           
 28480                           	psect	text100
 28481  2E55                     __ptext100:	
 28482 ;; *************** function _TMR0_CallBack *****************
 28483 ;; Defined at:
 28484 ;;		line 151 in file "mcc_generated_files/tmr0.c"
 28485 ;; Parameters:    Size  Location     Type
 28486 ;;		None
 28487 ;; Auto vars:     Size  Location     Type
 28488 ;;		None
 28489 ;; Return value:  Size  Location     Type
 28490 ;;                  1    wreg      void 
 28491 ;; Registers used:
 28492 ;;		wreg, status,2, status,0, pclath, cstack
 28493 ;; Tracked objects:
 28494 ;;		On entry : 0/0
 28495 ;;		On exit  : 0/0
 28496 ;;		Unchanged: 0/0
 28497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28498 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28499 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28500 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28501 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28502 ;;Total ram usage:        0 bytes
 28503 ;; Hardware stack levels used:    1
 28504 ;; Hardware stack levels required when called:    1
 28505 ;; This function calls:
 28506 ;;		Absolute function
 28507 ;;		_TMR0_DefaultInterruptHandler
 28508 ;; This function is called by:
 28509 ;;		_TMR0_ISR
 28510 ;; This function uses a non-reentrant model
 28511 ;;
 28512                           
 28513                           
 28514                           ;psect for function _TMR0_CallBack
 28515  2E55                     _TMR0_CallBack:	
 28516                           
 28517                           ;tmr0.c: 155: if(TMR0_InterruptHandler)
 28518                           
 28519                           ;incstack = 0
 28520                           ; Regs used in _TMR0_CallBack: [wreg+status,2+status,0+pclath+cstack]
 28521  2E55  0021               	movlb	1	; select bank1
 28522  2E56  083C               	movf	_TMR0_InterruptHandler^(0+128),w
 28523  2E57  043D               	iorwf	(_TMR0_InterruptHandler+1)^(0+128),w
 28524  2E58  1903               	btfsc	3,2
 28525  2E59  0008               	return
 28526                           
 28527                           ;tmr0.c: 156: {
 28528                           ;tmr0.c: 157: TMR0_InterruptHandler();
 28529  2E5A  083D               	movf	(_TMR0_InterruptHandler+1)^(0+128),w
 28530  2E5B  008A               	movwf	10
 28531  2E5C  083C               	movf	_TMR0_InterruptHandler^(0+128),w
 28532  2E5D  000A               	callw
 28533  2E5E  31AE               	pagesel	$
 28534  2E5F  0008               	return
 28535  2E60                     __end_of_TMR0_CallBack:	
 28536                           
 28537                           	psect	text101
 28538  2DDE                     __ptext101:	
 28539 ;; *************** function _TMR0_DefaultInterruptHandler *****************
 28540 ;; Defined at:
 28541 ;;		line 165 in file "mcc_generated_files/tmr0.c"
 28542 ;; Parameters:    Size  Location     Type
 28543 ;;		None
 28544 ;; Auto vars:     Size  Location     Type
 28545 ;;		None
 28546 ;; Return value:  Size  Location     Type
 28547 ;;                  1    wreg      void 
 28548 ;; Registers used:
 28549 ;;		None
 28550 ;; Tracked objects:
 28551 ;;		On entry : 0/0
 28552 ;;		On exit  : 0/0
 28553 ;;		Unchanged: 0/0
 28554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 28555 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28556 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28557 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28558 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 28559 ;;Total ram usage:        0 bytes
 28560 ;; Hardware stack levels used:    1
 28561 ;; This function calls:
 28562 ;;		Nothing
 28563 ;; This function is called by:
 28564 ;;		_TMR0_Initialize
 28565 ;;		_TMR0_CallBack
 28566 ;; This function uses a non-reentrant model
 28567 ;;
 28568                           
 28569                           
 28570                           ;psect for function _TMR0_DefaultInterruptHandler
 28571  2DDE                     _TMR0_DefaultInterruptHandler:	
 28572                           
 28573                           ;incstack = 0
 28574                           ; Regs used in _TMR0_DefaultInterruptHandler: []
 28575  2DDE  0008               	return
 28576  2DDF                     __end_of_TMR0_DefaultInterruptHandler:	
 28577  007E                     btemp	set	126	;btemp
 28578  007E                     int$flags	set	126
 28579  007E                     wtemp0	set	126


Data Sizes:
    Strings     556
    Constant    522
    Data        564
    BSS         253
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80     79      79
    BANK1            80      8      75
    BANK2            80      0      67
    BANK3            80      0      76
    BANK4            80      0      67
    BANK5            80      0      73
    BANK6            80      0      56
    BANK7            80      0      56
    BANK8            80      0      58
    BANK9            80      0      40
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           80      0       0
    BANK13           80      0       0
    BANK14           80      0       0
    BANK15           80      0       0
    BANK16           80      0       0
    BANK17           80      0       0
    BANK18           80      0       0
    BANK19           80      0       0
    BANK20           80      0       0
    BANK21           80      0       0
    BANK22           16      0       0
    BANK23            0      0       0
    BANK24            0      0       0
    BANK25            0      0       0

Pointer List with Targets:

    menu_run_option@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    flashy_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    menu_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    slot_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    locked_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    secret_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    flashy_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    menu_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    slot_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    locked_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    flashy_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    menu_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    slot_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    secret_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    menu_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    slot_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    locked_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    secret_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    flashy_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    slot_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    locked_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    secret_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    schedulerInst.tasks.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 0
		 -> secret_Main(), locked_Main(), slot_Main(), menu_Main(), 
		 -> flashy_Main(), Absolute function(), 

    schedulerInst.tasks.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 0
		 -> secret_Exit(), locked_Exit(), slot_Exit(), menu_Exit(), 
		 -> flashy_Exit(), Absolute function(), 

    schedulerInst.tasks.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 0
		 -> secret_Init(), locked_Init(), slot_Init(), menu_Init(), 
		 -> flashy_Init(), Absolute function(), 

    schedulerInst.tasks.taskData	PTR void  size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    schedulerExecute$3719	PTR struct t_schedulerTask size(1) Largest target is 13
		 -> secret_task(BANK2[13]), locked_task(BANK2[13]), slot_task(BANK2[13]), menu_task(BANK2[13]), 
		 -> flashy_task(BANK2[13]), NULL(NULL[0]), 

    secret_check@data	PTR struct t_secret_taskData size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    S902$3$0	PTR void  size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    S902$2$0	PTR void  size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    S902$4$0	PTR void  size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    TMR4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 55
		 -> Slot_Wheel(BANK5[55]), secret_inputs.inputs(BANK4[20]), secret_inputs(BANK4[25]), STR_29(CODE[5]), 
		 -> STR_28(CODE[5]), STR_27(CODE[11]), STR_26(CODE[13]), STR_23(CODE[43]), 
		 -> STR_22(CODE[40]), STR_21(CODE[27]), STR_20(CODE[25]), STR_19(CODE[30]), 
		 -> STR_18(CODE[35]), STR_17(CODE[22]), STR_16(CODE[26]), STR_15(CODE[21]), 
		 -> STR_14(CODE[19]), STR_13(CODE[6]), STR_12(CODE[8]), STR_11(CODE[9]), 
		 -> STR_10(CODE[5]), STR_9(CODE[18]), STR_7(CODE[6]), STR_6(CODE[10]), 
		 -> STR_5(CODE[6]), STR_4(CODE[5]), secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), 
		 -> slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 55
		 -> Slot_Wheel(BANK5[55]), secret_inputs.inputs(BANK4[20]), secret_inputs(BANK4[25]), STR_29(CODE[5]), 
		 -> STR_28(CODE[5]), STR_27(CODE[11]), STR_26(CODE[13]), STR_23(CODE[43]), 
		 -> STR_22(CODE[40]), STR_21(CODE[27]), STR_20(CODE[25]), STR_19(CODE[30]), 
		 -> STR_18(CODE[35]), STR_17(CODE[22]), STR_16(CODE[26]), STR_15(CODE[21]), 
		 -> STR_14(CODE[19]), STR_13(CODE[6]), STR_12(CODE[8]), STR_11(CODE[9]), 
		 -> STR_10(CODE[5]), STR_9(CODE[18]), STR_7(CODE[6]), STR_6(CODE[10]), 
		 -> STR_5(CODE[6]), STR_4(CODE[5]), secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), 
		 -> slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    memset@p1	PTR void  size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), badge_inst(BANK3[18]), NULL(NULL[0]), 

    memset@p	PTR unsigned char  size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), badge_inst(BANK3[18]), NULL(NULL[0]), 

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_54(CODE[7]), sprintf@c(BANK0[1]), STR_47(CODE[9]), STR_46(CODE[13]), 
		 -> STR_45(CODE[12]), STR_44(CODE[8]), STR_43(CODE[11]), STR_42(CODE[11]), 
		 -> STR_41(CODE[9]), STR_40(CODE[8]), STR_39(CODE[8]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_53(CODE[3]), STR_52(CODE[9]), STR_51(CODE[9]), STR_50(CODE[9]), 
		 -> STR_49(CODE[9]), STR_48(CODE[9]), STR_25(CODE[4]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 41
		 -> flashy_Main@hit_counter(BANK0[6]), secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), 
		 -> menu_TaskData(BANK4[14]), flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    slot_Exit@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    slot_Main@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    slot_Main@taskData	PTR void  size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    slot_Main@data	PTR struct t_slot_taskData size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    slot_Finished_Animation@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    slot_Finished_Animation@taskData	PTR void  size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    slot_Finished_Animation@data	PTR struct t_slot_taskData size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    slot_Running_Animation@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    slot_Running_Animation@taskData	PTR void  size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    slot_Running_Animation@data	PTR struct t_slot_taskData size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    slot_Setup@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    slot_taskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    slot_Setup@taskData	PTR void  size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    slot_Setup@data	PTR struct t_slot_taskData size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    S2252t_slot_taskData$badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    slot_Init@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    slot_Init@taskData	PTR void  size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    slot_Init@data	PTR struct t_slot_taskData size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    Shot_Options_Long	PTR unsigned char [9] size(2) Largest target is 13
		 -> STR_47(CODE[9]), STR_46(CODE[13]), STR_45(CODE[12]), STR_44(CODE[8]), 
		 -> STR_43(CODE[11]), STR_42(CODE[11]), STR_41(CODE[9]), STR_40(CODE[8]), 
		 -> STR_39(CODE[8]), 

    Shot_Options	PTR unsigned char [9] size(2) Largest target is 5
		 -> STR_38(CODE[5]), STR_37(CODE[5]), STR_36(CODE[5]), STR_35(CODE[5]), 
		 -> STR_34(CODE[5]), STR_33(CODE[5]), STR_32(CODE[5]), STR_31(CODE[5]), 
		 -> STR_30(CODE[5]), 

    secret_Exit@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    secret_clear@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    secret_clear@data	PTR struct t_secret_taskData size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    secret_Main@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    secret_Main@taskData	PTR void  size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    secret_Main@data	PTR struct t_secret_taskData size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    secret_check@inputs	PTR unsigned char  size(1) Largest target is 26
		 -> secret_inputs.inputs(BANK4[20]), secret_inputs(BANK4[25]), 

    secret_Init@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    secret_Init@taskData	PTR void  size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    secret_Init@data	PTR struct t_secret_taskData size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    S2709secret_input$variable	PTR unsigned int  size(1) Largest target is 2
		 -> secret_value(BANK1[2]), 

    secret_inputs.variable	PTR unsigned int  size(1) Largest target is 2
		 -> secret_value(BANK1[2]), 

    locked_Exit@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    locked_clear@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    locked_clear@data	PTR struct t_locked_taskData size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    locked_Main@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    locked_Main@taskData	PTR void  size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    locked_Main@data	PTR struct t_locked_taskData size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    locked_Init@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    locked_Init@taskData	PTR void  size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    locked_Init@data	PTR struct t_locked_taskData size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    flashy_Exit@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    flashy_Main@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    flashy_Main@taskData	PTR void  size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    flashy_Main@data	PTR struct t_flashy_taskData size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    flashy_display_option@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    flashy_display_option@data	PTR struct t_flashy_taskData size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    flashy_Init@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    flashy_Init@taskData	PTR void  size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    flashy_Init@data	PTR struct t_flashy_taskData size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    flashy_option	PTR unsigned char [14] size(2) Largest target is 43
		 -> STR_23(CODE[43]), STR_22(CODE[40]), STR_21(CODE[27]), STR_20(CODE[25]), 
		 -> STR_19(CODE[30]), STR_18(CODE[35]), STR_17(CODE[22]), STR_16(CODE[26]), 
		 -> STR_15(CODE[21]), STR_14(CODE[19]), STR_13(CODE[6]), STR_12(CODE[8]), 
		 -> STR_11(CODE[9]), STR_10(CODE[5]), 

    FLASHY_TEXT_SECRET_TEST	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_9(CODE[18]), 

    FLASHY_TEXT	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_8(CODE[5]), 

    menu_Exit@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    menu_clear@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    menu_clear@data	PTR struct t_menu_taskData size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    menu_run_option@data	PTR struct t_menu_taskData size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    menu_display_option@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    menu_display_option@data	PTR struct t_menu_taskData size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    menu_Main@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    slot_taskData	PTR struct t_slot_taskData size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    menu_Main@taskData	PTR void  size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    menu_Main@data	PTR struct t_menu_taskData size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    menu_Init@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    menu_Init@taskData	PTR void  size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    menu_Init@data	PTR struct t_menu_taskData size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    menu_option	PTR unsigned char [4] size(2) Largest target is 10
		 -> STR_7(CODE[6]), STR_6(CODE[10]), STR_5(CODE[6]), STR_4(CODE[5]), 

    displayL2_ClrUserLeds@display	PTR struct t_nullifyDisplay_l2 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    displayL2_SetUserLeds@display	PTR struct t_nullifyDisplay_l2 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    displayL2_EraseSegDisplay@display	PTR struct t_nullifyDisplay_l2 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    displayL2_ForceUpdate@display	PTR struct t_nullifyDisplay_l2 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    displayL2_PutStr@str	PTR unsigned char  size(2) Largest target is 43
		 -> flashy_Main@hit_counter(BANK0[6]), STR_24(CODE[5]), STR_23(CODE[43]), STR_22(CODE[40]), 
		 -> STR_21(CODE[27]), STR_20(CODE[25]), STR_19(CODE[30]), STR_18(CODE[35]), 
		 -> STR_17(CODE[22]), STR_16(CODE[26]), STR_15(CODE[21]), STR_14(CODE[19]), 
		 -> STR_13(CODE[6]), STR_12(CODE[8]), STR_11(CODE[9]), STR_10(CODE[5]), 
		 -> STR_7(CODE[6]), STR_6(CODE[10]), STR_5(CODE[6]), STR_4(CODE[5]), 
		 -> STR_3(CODE[5]), marquee@display_string(BANK0[5]), marquee_speedy@display_string(BANK0[5]), 

    displayL2_PutStr@display	PTR struct t_nullifyDisplay_l2 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    displayL2_PutChar@display	PTR struct t_nullifyDisplay_l2 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    displayL2_Initialize@display	PTR struct t_nullifyDisplay_l2 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    displayL1_Update@display	PTR struct t_nullifyDisplay_l1 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    displayL1_SetUserLed@display	PTR struct t_nullifyDisplay_l1 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    displayL1_SetSegChar@display	PTR struct t_nullifyDisplay_l1 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    sp__memset	PTR void  size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), badge_inst(BANK3[18]), NULL(NULL[0]), 

    displayL1_Initialize@display	PTR struct t_nullifyDisplay_l1 size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    nullifyBadge_irTxRelease@badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    nullifyBadge_irTxRegister@badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    nullifyBadge_userLedsClr@badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    nullifyBadge_userLedsSet@badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    nullifyBadge_userLedsRegister@badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    nullifyBadge_segDisplayErase@badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    nullifyBadge_segDisplayPutStr@str	PTR unsigned char  size(2) Largest target is 43
		 -> flashy_Main@hit_counter(BANK0[6]), STR_24(CODE[5]), STR_23(CODE[43]), STR_22(CODE[40]), 
		 -> STR_21(CODE[27]), STR_20(CODE[25]), STR_19(CODE[30]), STR_18(CODE[35]), 
		 -> STR_17(CODE[22]), STR_16(CODE[26]), STR_15(CODE[21]), STR_14(CODE[19]), 
		 -> STR_13(CODE[6]), STR_12(CODE[8]), STR_11(CODE[9]), STR_10(CODE[5]), 
		 -> STR_7(CODE[6]), STR_6(CODE[10]), STR_5(CODE[6]), STR_4(CODE[5]), 
		 -> marquee@display_string(BANK0[5]), marquee_speedy@display_string(BANK0[5]), 

    nullifyBadge_segDisplayPutStr@badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    nullifyBadge_segDisplayForceUpdate@badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    nullifyBadge_segDisplayRegister@badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    nullifyBadge_platformInit@badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    secret_task.taskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    locked_task.taskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    slot_task.taskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    menu_task.taskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    flashy_task.taskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    marquee@string	PTR unsigned char  size(2) Largest target is 43
		 -> STR_29(CODE[5]), STR_28(CODE[5]), STR_27(CODE[11]), STR_26(CODE[13]), 
		 -> STR_23(CODE[43]), STR_22(CODE[40]), STR_21(CODE[27]), STR_20(CODE[25]), 
		 -> STR_19(CODE[30]), STR_18(CODE[35]), STR_17(CODE[22]), STR_16(CODE[26]), 
		 -> STR_15(CODE[21]), STR_14(CODE[19]), STR_13(CODE[6]), STR_12(CODE[8]), 
		 -> STR_11(CODE[9]), STR_10(CODE[5]), STR_9(CODE[18]), STR_7(CODE[6]), 
		 -> STR_6(CODE[10]), STR_5(CODE[6]), STR_4(CODE[5]), secret_TaskData(BANK4[14]), 
		 -> locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), flashy_TaskData(BANK8[30]), 
		 -> NULL(NULL[0]), 

    marquee_speedy@string	PTR unsigned char  size(2) Largest target is 43
		 -> STR_23(CODE[43]), STR_22(CODE[40]), STR_21(CODE[27]), STR_20(CODE[25]), 
		 -> STR_19(CODE[30]), STR_18(CODE[35]), STR_17(CODE[22]), STR_16(CODE[26]), 
		 -> STR_15(CODE[21]), STR_14(CODE[19]), STR_13(CODE[6]), STR_12(CODE[8]), 
		 -> STR_11(CODE[9]), STR_10(CODE[5]), secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), 
		 -> slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    schedulerInst.tasks	PTR struct t_schedulerTask[16] size(1) Largest target is 13
		 -> secret_task(BANK2[13]), locked_task(BANK2[13]), slot_task(BANK2[13]), menu_task(BANK2[13]), 
		 -> flashy_task(BANK2[13]), NULL(NULL[0]), 

    S1170t_secret_taskData$badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    secret_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    S1161t_locked_taskData$badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    locked_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    S1067t_slot_taskData$badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    slot_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    S1136t_menu_taskData$badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    menu_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    S1118t_flashy_taskData$badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    flashy_TaskData.badge	PTR struct t_nullifyBadge size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 

    secret_task.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> secret_Main(), locked_Main(), slot_Main(), menu_Main(), 
		 -> flashy_Main(), Absolute function(), 

    secret_task.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> secret_Exit(), locked_Exit(), slot_Exit(), menu_Exit(), 
		 -> flashy_Exit(), Absolute function(), 

    secret_task.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> secret_Init(), locked_Init(), slot_Init(), menu_Init(), 
		 -> flashy_Init(), Absolute function(), 

    secret_task.taskData	PTR void  size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    locked_task.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> secret_Main(), locked_Main(), slot_Main(), menu_Main(), 
		 -> flashy_Main(), Absolute function(), 

    locked_task.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> secret_Exit(), locked_Exit(), slot_Exit(), menu_Exit(), 
		 -> flashy_Exit(), Absolute function(), 

    locked_task.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> secret_Init(), locked_Init(), slot_Init(), menu_Init(), 
		 -> flashy_Init(), Absolute function(), 

    locked_task.taskData	PTR void  size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    slot_task.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> secret_Main(), locked_Main(), slot_Main(), menu_Main(), 
		 -> flashy_Main(), Absolute function(), 

    slot_task.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> secret_Exit(), locked_Exit(), slot_Exit(), menu_Exit(), 
		 -> flashy_Exit(), Absolute function(), 

    slot_task.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> secret_Init(), locked_Init(), slot_Init(), menu_Init(), 
		 -> flashy_Init(), Absolute function(), 

    slot_task.taskData	PTR void  size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    menu_task.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> secret_Main(), locked_Main(), slot_Main(), menu_Main(), 
		 -> flashy_Main(), Absolute function(), 

    menu_task.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> secret_Exit(), locked_Exit(), slot_Exit(), menu_Exit(), 
		 -> flashy_Exit(), Absolute function(), 

    menu_task.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> secret_Init(), locked_Init(), slot_Init(), menu_Init(), 
		 -> flashy_Init(), Absolute function(), 

    menu_task.taskData	PTR void  size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    flashy_task.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> secret_Main(), locked_Main(), slot_Main(), menu_Main(), 
		 -> flashy_Main(), Absolute function(), 

    flashy_task.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> secret_Exit(), locked_Exit(), slot_Exit(), menu_Exit(), 
		 -> flashy_Exit(), Absolute function(), 

    flashy_task.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> secret_Init(), locked_Init(), slot_Init(), menu_Init(), 
		 -> flashy_Init(), Absolute function(), 

    flashy_task.taskData	PTR void  size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    fadeDisplay_Exit@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    fadeDisplay_Main@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    S1013t_fadeDisplay_taskData$badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    fadeDisplay_Init@data.badge	PTR struct t_nullifyBadge size(1) Largest target is 0

    schedulerExecute@scheduler.tasks.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> secret_Main(), locked_Main(), slot_Main(), menu_Main(), 
		 -> flashy_Main(), Absolute function(), 

    schedulerExecute@scheduler.tasks.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> secret_Exit(), locked_Exit(), slot_Exit(), menu_Exit(), 
		 -> flashy_Exit(), Absolute function(), 

    schedulerExecute@scheduler.tasks.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> secret_Init(), locked_Init(), slot_Init(), menu_Init(), 
		 -> flashy_Init(), Absolute function(), 

    schedulerExecute@scheduler.tasks.taskData	PTR void  size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    schedulerExecute@scheduler.tasks	PTR struct t_schedulerTask[16] size(1) Largest target is 13
		 -> secret_task(BANK2[13]), locked_task(BANK2[13]), slot_task(BANK2[13]), menu_task(BANK2[13]), 
		 -> flashy_task(BANK2[13]), NULL(NULL[0]), 

    schedulerExecute@scheduler	PTR struct t_scheduler size(1) Largest target is 34
		 -> schedulerInst(BANK3[18]), 

    scheduler_TaskRemove@task.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> secret_Main(), locked_Main(), slot_Main(), menu_Main(), 
		 -> flashy_Main(), Absolute function(), 

    scheduler_TaskRemove@task.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> secret_Exit(), locked_Exit(), slot_Exit(), menu_Exit(), 
		 -> flashy_Exit(), Absolute function(), 

    scheduler_TaskRemove@task.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> secret_Init(), locked_Init(), slot_Init(), menu_Init(), 
		 -> flashy_Init(), Absolute function(), 

    scheduler_TaskRemove@task.taskData	PTR void  size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    scheduler_TaskRemove@scheduler.tasks	PTR struct t_schedulerTask[16] size(1) Largest target is 13
		 -> secret_task(BANK2[13]), locked_task(BANK2[13]), slot_task(BANK2[13]), menu_task(BANK2[13]), 
		 -> flashy_task(BANK2[13]), NULL(NULL[0]), 

    scheduler_TaskAdd@task.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> secret_Main(), locked_Main(), slot_Main(), menu_Main(), 
		 -> flashy_Main(), Absolute function(), 

    scheduler_TaskAdd@task.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> secret_Exit(), locked_Exit(), slot_Exit(), menu_Exit(), 
		 -> flashy_Exit(), Absolute function(), 

    scheduler_TaskAdd@task.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> secret_Init(), locked_Init(), slot_Init(), menu_Init(), 
		 -> flashy_Init(), Absolute function(), 

    scheduler_TaskAdd@task.taskData	PTR void  size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    scheduler_TaskAdd@scheduler.tasks.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> secret_Main(), locked_Main(), slot_Main(), menu_Main(), 
		 -> flashy_Main(), Absolute function(), 

    scheduler_TaskAdd@scheduler.tasks.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> secret_Exit(), locked_Exit(), slot_Exit(), menu_Exit(), 
		 -> flashy_Exit(), Absolute function(), 

    scheduler_TaskAdd@scheduler.tasks.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> secret_Init(), locked_Init(), slot_Init(), menu_Init(), 
		 -> flashy_Init(), Absolute function(), 

    scheduler_TaskAdd@scheduler.tasks.taskData	PTR void  size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    scheduler_TaskAdd@task	PTR struct t_schedulerTask size(1) Largest target is 13
		 -> secret_task(BANK2[13]), locked_task(BANK2[13]), slot_task(BANK2[13]), menu_task(BANK2[13]), 
		 -> flashy_task(BANK2[13]), 

    scheduler_TaskAdd@scheduler.tasks	PTR struct t_schedulerTask[16] size(1) Largest target is 13
		 -> secret_task(BANK2[13]), locked_task(BANK2[13]), slot_task(BANK2[13]), menu_task(BANK2[13]), 
		 -> flashy_task(BANK2[13]), NULL(NULL[0]), 

    scheduler_TaskAdd@scheduler	PTR struct t_scheduler size(1) Largest target is 34
		 -> schedulerInst(BANK3[18]), 

    scheduler_TaskInit@task.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> secret_Main(), locked_Main(), slot_Main(), menu_Main(), 
		 -> flashy_Main(), Absolute function(), 

    scheduler_TaskInit@task.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> secret_Exit(), locked_Exit(), slot_Exit(), menu_Exit(), 
		 -> flashy_Exit(), Absolute function(), 

    scheduler_TaskInit@task.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> secret_Init(), locked_Init(), slot_Init(), menu_Init(), 
		 -> flashy_Init(), Absolute function(), 

    scheduler_TaskInit@task.taskData	PTR void  size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    scheduler_TaskInit@task	PTR struct t_schedulerTask size(1) Largest target is 13
		 -> secret_task(BANK2[13]), locked_task(BANK2[13]), slot_task(BANK2[13]), menu_task(BANK2[13]), 
		 -> flashy_task(BANK2[13]), 

    S923t_scheduler$tasks	PTR struct t_schedulerTask[16] size(1) Largest target is 13
		 -> secret_task(BANK2[13]), locked_task(BANK2[13]), slot_task(BANK2[13]), menu_task(BANK2[13]), 
		 -> flashy_task(BANK2[13]), NULL(NULL[0]), 

    scheduler_Init@scheduler.tasks	PTR struct t_schedulerTask[16] size(1) Largest target is 13
		 -> secret_task(BANK2[13]), locked_task(BANK2[13]), slot_task(BANK2[13]), menu_task(BANK2[13]), 
		 -> flashy_task(BANK2[13]), NULL(NULL[0]), 

    scheduler_Init@scheduler	PTR struct t_scheduler size(1) Largest target is 34
		 -> schedulerInst(BANK3[18]), 

    S902t_schedulerTask$taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> secret_Main(), locked_Main(), slot_Main(), menu_Main(), 
		 -> flashy_Main(), Absolute function(), 

    scheduler_TaskRun@task.taskExecuteCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> secret_Main(), locked_Main(), slot_Main(), menu_Main(), 
		 -> flashy_Main(), Absolute function(), 

    S902t_schedulerTask$taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> secret_Exit(), locked_Exit(), slot_Exit(), menu_Exit(), 
		 -> flashy_Exit(), Absolute function(), 

    scheduler_TaskRun@task.taskExitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> secret_Exit(), locked_Exit(), slot_Exit(), menu_Exit(), 
		 -> flashy_Exit(), Absolute function(), 

    S902t_schedulerTask$taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> secret_Init(), locked_Init(), slot_Init(), menu_Init(), 
		 -> flashy_Init(), Absolute function(), 

    scheduler_TaskRun@task.taskInitCallback	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> secret_Init(), locked_Init(), slot_Init(), menu_Init(), 
		 -> flashy_Init(), Absolute function(), 

    S902t_schedulerTask$taskData	PTR void  size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    scheduler_TaskRun@task.taskData	PTR void  size(2) Largest target is 41
		 -> secret_TaskData(BANK4[14]), locked_TaskData(BANK4[14]), slot_TaskData(BANK9[40]), menu_TaskData(BANK4[14]), 
		 -> flashy_TaskData(BANK8[30]), NULL(NULL[0]), 

    scheduler_TaskRun@task	PTR struct t_schedulerTask size(1) Largest target is 13
		 -> secret_task(BANK2[13]), locked_task(BANK2[13]), slot_task(BANK2[13]), menu_task(BANK2[13]), 
		 -> flashy_task(BANK2[13]), NULL(NULL[0]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR0_DefaultInterruptHandler(), 

    SPI1_Exchange8bitBuffer@dataOut	PTR unsigned char  size(1) Largest target is 10
		 -> displayL1_Update@tmpRxBuf(BANK0[10]), 

    SPI1_Exchange8bitBuffer@dataIn	PTR unsigned char  size(1) Largest target is 18
		 -> badge_inst(BANK3[18]), 


Critical Paths under _main in COMMON

    _schedulerExecute->_TMR0_Read16bitTimer
    _scheduler_TaskRun->_TMR0_Read16bitTimer
    _secret_check->_strlen
    _slot_Setup->___lwmod
    _nullifyBadge_userLedsClr->_displayL2_ClrUserLeds
    _displayL2_ClrUserLeds->_displayL1_Update
    _sprintf->___lwmod
    _led_rand->___almod
    _rand->___lmul
    _nullifyBadge_userLedsSet->_displayL2_SetUserLeds
    _displayL2_SetUserLeds->_displayL1_Update
    _displayL1_SetSegChar->_displayCharReverse
    _nullifyBadge_segDisplayForceUpdate->_displayL2_ForceUpdate
    _displayL2_ForceUpdate->_displayL1_Update
    ___lwmod->___lwdiv
    _displayL2_Initialize->_displayL1_Initialize
    _displayL1_Initialize->_displayL1_Update
    _displayL1_Update->_SPI1_Exchange8bitBuffer
    _SPI1_Exchange8bitBuffer->_SPI1_Exchange8bit
    _TMR0_Initialize->_TMR0_SetInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_schedulerExecute
    _scheduler_TaskAdd->_flashy_Init
    _scheduler_TaskAdd->_locked_Init
    _scheduler_TaskAdd->_menu_Init
    _scheduler_TaskAdd->_secret_Init
    _scheduler_TaskAdd->_slot_Init
    _slot_Init->_nullifyBadge_segDisplayErase
    _secret_Init->_nullifyBadge_segDisplayErase
    _menu_Init->_nullifyBadge_segDisplayErase
    _locked_Init->_nullifyBadge_segDisplayErase
    _flashy_Init->_nullifyBadge_segDisplayErase
    _schedulerExecute->_scheduler_TaskRun
    _scheduler_TaskRun->_slot_Main
    _slot_Running_Animation->_led_circle
    _slot_Finished_Animation->_led_rand
    _menu_Main->_menu_display_option
    _menu_run_option->_menu_clear
    _menu_clear->_nullifyBadge_segDisplayErase
    _menu_display_option->_marquee
    _slot_Setup->___lwmod
    _locked_clear->_nullifyBadge_segDisplayErase
    _displayL2_ClrUserLeds->_displayL1_Update
    _nullifyBadge_segDisplayErase->_displayL2_EraseSegDisplay
    _displayL2_EraseSegDisplay->_displayL2_PutStr
    _sprintf->___lwmod
    _let_alternate->_nullifyBadge_userLedsSet
    _led_roundabout->_nullifyBadge_userLedsSet
    _led_rand->___almod
    _rand->___lmul
    ___almod->_rand
    _led_curtain->_nullifyBadge_userLedsSet
    _led_circle->_nullifyBadge_userLedsSet
    _led_Parody->_nullifyBadge_userLedsSet
    _nullifyBadge_userLedsSet->_displayL2_SetUserLeds
    _displayL2_SetUserLeds->_displayL1_Update
    _flashy_display_option->_marquee
    _flashy_display_option->_marquee_speedy
    _marquee_speedy->_nullifyBadge_segDisplayPutStr
    _marquee->_nullifyBadge_segDisplayPutStr
    _nullifyBadge_segDisplayPutStr->_displayL2_PutStr
    _displayL2_PutStr->_displayL2_PutChar
    _displayL2_PutChar->_displayL1_SetSegChar
    _displayL2_ForceUpdate->_displayL1_Update
    ___lwmod->_rand
    _nullifyBadge_platformInit->_displayL2_Initialize
    _displayL1_Initialize->_displayL1_Update

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_schedulerExecute

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK15

    None.

Critical Paths under _main in BANK16

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK16

    None.

Critical Paths under _main in BANK17

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK17

    None.

Critical Paths under _main in BANK18

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK18

    None.

Critical Paths under _main in BANK19

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK19

    None.

Critical Paths under _main in BANK20

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK20

    None.

Critical Paths under _main in BANK21

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK21

    None.

Critical Paths under _main in BANK22

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK22

    None.

Critical Paths under _main in BANK23

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK23

    None.

Critical Paths under _main in BANK24

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK24

    None.

Critical Paths under _main in BANK25

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK25

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0  325035
                                             78 BANK0      1     1      0
          _nullifyBadge_platformInit
                   _schedulerExecute
                     _scheduler_Init
                  _scheduler_TaskAdd
                 _scheduler_TaskInit
 ---------------------------------------------------------------------------------
 (1) _scheduler_TaskInit                                   1     1      0     319
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _scheduler_TaskAdd                                    9     8      1   43422
                                             29 BANK0      9     8      1
                   Absolute function *
                        _flashy_Init *
                        _locked_Init *
                          _menu_Init *
                        _secret_Init *
                          _slot_Init *
 ---------------------------------------------------------------------------------
 (2) _slot_Init                                            4     2      2   14353
                                             25 BANK0      4     2      2
       _nullifyBadge_segDisplayErase
    _nullifyBadge_segDisplayRegister
           _nullifyBadge_userLedsClr
      _nullifyBadge_userLedsRegister
                         _slot_Setup
 ---------------------------------------------------------------------------------
 (2) _secret_Init                                          4     2      2    6984
                                             25 BANK0      4     2      2
       _nullifyBadge_segDisplayErase
    _nullifyBadge_segDisplayRegister
           _nullifyBadge_userLedsClr
      _nullifyBadge_userLedsRegister
 ---------------------------------------------------------------------------------
 (2) _menu_Init                                            4     2      2    6919
                                             25 BANK0      4     2      2
       _nullifyBadge_segDisplayErase
    _nullifyBadge_segDisplayRegister
           _nullifyBadge_userLedsClr
      _nullifyBadge_userLedsRegister
 ---------------------------------------------------------------------------------
 (2) _locked_Init                                          4     2      2    6984
                                             25 BANK0      4     2      2
                   _locked_lock_leds
       _nullifyBadge_segDisplayErase
    _nullifyBadge_segDisplayRegister
           _nullifyBadge_userLedsClr
      _nullifyBadge_userLedsRegister
 ---------------------------------------------------------------------------------
 (2) _flashy_Init                                          4     2      2    7074
                                             25 BANK0      4     2      2
       _nullifyBadge_segDisplayErase
    _nullifyBadge_segDisplayRegister
           _nullifyBadge_userLedsClr
      _nullifyBadge_userLedsRegister
 ---------------------------------------------------------------------------------
 (3) _nullifyBadge_userLedsRegister                        1     1      0     209
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _nullifyBadge_segDisplayRegister                      1     1      0     220
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _scheduler_Init                                       3     3      0     145
                                              1 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _schedulerExecute                                    14    14      0  275752
                                             72 BANK0      6     6      0
                                              0 BANK1      8     8      0
                _TMR0_Read16bitTimer
                  _scheduler_TaskRun
 ---------------------------------------------------------------------------------
 (2) _scheduler_TaskRun                                    1     1      0  275196
                                             71 BANK0      1     1      0
                   Absolute function *
                _TMR0_Read16bitTimer
                        _flashy_Main *
                        _locked_Main *
                          _menu_Main *
                        _secret_Main *
                          _slot_Main *
 ---------------------------------------------------------------------------------
 (3) _slot_Main                                           21    19      2   67882
                                             50 BANK0     21    19      2
                            ___lwmod
                            _marquee
                     _marquee_speedy
                             _memset
            _nullifyBadge_buttonsGet
                               _rand
            _slot_Finished_Animation
             _slot_Running_Animation
                         _slot_Setup
                            _sprintf
                             _strlen
 ---------------------------------------------------------------------------------
 (4) _slot_Running_Animation                               6     4      2    3731
                                             18 BANK0      6     4      2
                         _led_circle
 ---------------------------------------------------------------------------------
 (4) _slot_Finished_Animation                              6     4      2    4417
                                             29 BANK0      6     4      2
                           _led_rand
 ---------------------------------------------------------------------------------
 (3) _secret_Main                                          8     6      2    4670
                                             50 BANK0      8     6      2
            _nullifyBadge_buttonsGet
                       _secret_check
                       _secret_clear
 ---------------------------------------------------------------------------------
 (4) _secret_clear                                         2     0      2     286
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (4) _secret_check                                        19    16      3    2671
                                              7 COMMON     3     0      3
                                              0 BANK0     10    10      0
                             ___bmul
                             _strlen
 ---------------------------------------------------------------------------------
 (5) ___bmul                                               4     3      1      28
                                              1 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (3) _menu_Main                                            7     5      2   50835
                                             50 BANK0      7     5      2
                         _menu_clear
                _menu_display_option
                    _menu_run_option
            _nullifyBadge_buttonsGet
                         _slot_Setup
 ---------------------------------------------------------------------------------
 (4) _menu_run_option                                      2     0      2    6787
                                             27 BANK0      2     0      2
                         _menu_clear
 ---------------------------------------------------------------------------------
 (5) _menu_clear                                           2     0      2    6644
                                             25 BANK0      2     0      2
       _nullifyBadge_segDisplayErase
           _nullifyBadge_userLedsClr
 ---------------------------------------------------------------------------------
 (4) _menu_display_option                                  6     4      2   28489
                                             44 BANK0      6     4      2
                            ___lwmod
                            _marquee
 _nullifyBadge_segDisplayForceUpdate
      _nullifyBadge_segDisplayPutStr
           _nullifyBadge_userLedsSet
 ---------------------------------------------------------------------------------
 (3) _locked_Main                                          7     5      2   38656
                                             50 BANK0      7     5      2
                            ___lwmod
                       _locked_clear
               _locked_get_lock_leds
             _locked_get_unlock_leds
                   _locked_lock_leds
                 _locked_unlock_leds
                            _marquee
            _nullifyBadge_buttonsGet
           _nullifyBadge_userLedsSet
                         _slot_Setup
 ---------------------------------------------------------------------------------
 (3) _slot_Setup                                           7     5      2    7403
                                             15 BANK0      7     5      2
                            ___lwmod
                             _memset
                               _rand
 ---------------------------------------------------------------------------------
 (4) _locked_unlock_leds                                   2     2      0       0
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _locked_lock_leds                                     4     4      0      34
                                              1 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (4) _locked_get_unlock_leds                               4     2      2      34
                                              1 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (4) _locked_get_lock_leds                                 8     6      2      68
                                              1 COMMON     8     6      2
 ---------------------------------------------------------------------------------
 (4) _locked_clear                                         2     0      2    6444
                                             25 BANK0      2     0      2
       _nullifyBadge_segDisplayErase
           _nullifyBadge_userLedsClr
 ---------------------------------------------------------------------------------
 (3) _nullifyBadge_userLedsClr                             1     1      0    2022
                                             11 BANK0      1     1      0
              _displayL2_ClrUserLeds
 ---------------------------------------------------------------------------------
 (4) _displayL2_ClrUserLeds                                1     1      0    1559
                                             11 COMMON     1     1      0
               _displayL1_SetUserLed
                   _displayL1_Update
 ---------------------------------------------------------------------------------
 (3) _nullifyBadge_segDisplayErase                         1     1      0    4124
                                             24 BANK0      1     1      0
          _displayL2_EraseSegDisplay
 ---------------------------------------------------------------------------------
 (4) _displayL2_EraseSegDisplay                            1     1      0    3589
                                             23 BANK0      1     1      0
                   _displayL1_Update
                   _displayL2_PutStr
 ---------------------------------------------------------------------------------
 (3) _flashy_Main                                         14    12      2  112922
                                             50 BANK0     14    12      2
              _flashy_display_option
                         _led_Parody
                         _led_circle
                        _led_curtain
                           _led_rand
                     _led_roundabout
                      _let_alternate
                            _marquee
            _nullifyBadge_buttonsGet
                 _nullifyBadge_irGet
               _nullifyBadge_irTxClr
          _nullifyBadge_irTxRegister
           _nullifyBadge_irTxRelease
               _nullifyBadge_irTxSet
 _nullifyBadge_segDisplayForceUpdate
      _nullifyBadge_segDisplayPutStr
           _nullifyBadge_userLedsSet
                            _sprintf
 ---------------------------------------------------------------------------------
 (4) _sprintf                                             32    20     12   13521
                                             15 BANK0     28    16     12
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              2     2      0      99
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    4442
                                              1 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (4) _nullifyBadge_irTxSet                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _nullifyBadge_irTxRelease                             2     2      0      67
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _nullifyBadge_irTxRegister                            1     1      0      98
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _nullifyBadge_irTxClr                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _nullifyBadge_irGet                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _nullifyBadge_buttonsGet                              3     3      0      46
                                              1 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (4) _let_alternate                                        2     0      2    3314
                                             16 BANK0      2     0      2
           _nullifyBadge_userLedsSet
 ---------------------------------------------------------------------------------
 (4) _led_roundabout                                       8     6      2    8722
                                             16 BANK0      8     6      2
                            ___lwmod
           _nullifyBadge_userLedsSet
 ---------------------------------------------------------------------------------
 (5) _led_rand                                            10    10      0    4190
                                             19 BANK0     10    10      0
                            ___almod
           _nullifyBadge_userLedsSet
                               _rand
 ---------------------------------------------------------------------------------
 (4) _rand                                                 7     5      2     316
                                              4 BANK0      7     5      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (5) ___lmul                                              12     4      8     316
                                              1 COMMON     8     0      8
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (6) ___almod                                             11     3      8     613
                                              9 COMMON     3     3      0
                                             11 BANK0      8     0      8
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (4) _led_curtain                                          8     6      2    8722
                                             16 BANK0      8     6      2
                            ___lwmod
           _nullifyBadge_userLedsSet
 ---------------------------------------------------------------------------------
 (5) _led_circle                                           2     0      2    3404
                                             16 BANK0      2     0      2
           _nullifyBadge_userLedsSet
 ---------------------------------------------------------------------------------
 (4) _led_Parody                                           8     6      2    8784
                                             16 BANK0      8     6      2
                            ___lwmod
           _nullifyBadge_userLedsSet
 ---------------------------------------------------------------------------------
 (6) _nullifyBadge_userLedsSet                             3     1      2    3193
                                             13 BANK0      3     1      2
              _displayL2_SetUserLeds
 ---------------------------------------------------------------------------------
 (7) _displayL2_SetUserLeds                                3     1      2    1868
                                             11 COMMON     1     1      0
                                             11 BANK0      2     0      2
               _displayL1_SetUserLed
                   _displayL1_Update
 ---------------------------------------------------------------------------------
 (5) _displayL1_SetUserLed                                 4     2      2     376
                                              1 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (4) _flashy_display_option                                2     0      2   33223
                                             44 BANK0      2     0      2
                            _marquee
                     _marquee_speedy
 _nullifyBadge_segDisplayForceUpdate
      _nullifyBadge_segDisplayPutStr
 ---------------------------------------------------------------------------------
 (4) _marquee_speedy                                      18    12      6   13386
                                             26 BANK0     18    12      6
                            ___lwdiv
                            ___lwmod
 _nullifyBadge_segDisplayForceUpdate
      _nullifyBadge_segDisplayPutStr
                             _strlen
 ---------------------------------------------------------------------------------
 (4) _marquee                                             18    14      4   15009
                                             26 BANK0     18    14      4
                            ___lwdiv
                            ___lwmod
 _nullifyBadge_segDisplayForceUpdate
      _nullifyBadge_segDisplayPutStr
                             _strlen
 ---------------------------------------------------------------------------------
 (4) _strlen                                               6     4      2    1300
                                              1 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (5) _nullifyBadge_segDisplayPutStr                        3     1      2    3224
                                             23 BANK0      3     1      2
                   _displayL2_PutStr
 ---------------------------------------------------------------------------------
 (5) _displayL2_PutStr                                     7     5      2    2406
                                             16 BANK0      7     5      2
                  _displayL2_PutChar
 ---------------------------------------------------------------------------------
 (6) _displayL2_PutChar                                    6     5      1    1993
                                             10 BANK0      6     5      1
               _displayL1_SetSegChar
 ---------------------------------------------------------------------------------
 (7) _displayL1_SetSegChar                                10     8      2    1298
                                              0 BANK0     10     8      2
                 _displayCharReverse
 ---------------------------------------------------------------------------------
 (8) _displayCharReverse                                  11     9      2     331
                                              1 COMMON    11     9      2
 ---------------------------------------------------------------------------------
 (5) _nullifyBadge_segDisplayForceUpdate                   1     1      0    1399
                                             11 BANK0      1     1      0
              _displayL2_ForceUpdate
 ---------------------------------------------------------------------------------
 (6) _displayL2_ForceUpdate                                1     1      0    1152
                                             11 COMMON     1     1      0
                   _displayL1_Update
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              6     2      4    5272
                                              9 COMMON     2     2      0
                                             11 BANK0      4     0      4
                            ___lwdiv (ARG)
                               _rand (ARG)
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              8     4      4    1221
                                              1 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (3) _TMR0_Read16bitTimer                                 11     9      2     102
                                              1 COMMON    11     9      2
 ---------------------------------------------------------------------------------
 (15) Absolute function(Fake)                              2     0      2       0
 ---------------------------------------------------------------------------------
 (1) _nullifyBadge_platformInit                            1     1      0    5397
                                             12 BANK0      1     1      0
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM1_Initialize
                 _PWM1_LoadDutyValue
                    _PWM2_Initialize
                 _PWM2_LoadDutyValue
                    _PWM5_Initialize
                 _PWM5_LoadDutyValue
                    _PWM6_Initialize
                 _PWM6_LoadDutyValue
                    _SPI1_Initialize
                  _SYSTEM_Initialize
                    _TMR0_Initialize
                    _TMR2_Initialize
                    _TMR4_Initialize
               _displayL2_Initialize
 ---------------------------------------------------------------------------------
 (2) _displayL2_Initialize                                 1     1      0    4257
                                             11 BANK0      1     1      0
               _displayL1_Initialize
                             _memset
 ---------------------------------------------------------------------------------
 (3) _displayL1_Initialize                                 1     1      0    2640
                                             11 COMMON     1     1      0
                   _displayL1_Update
                             _memset
 ---------------------------------------------------------------------------------
 (4) _memset                                               8     2      6    1457
                                              1 COMMON     8     2      6
 ---------------------------------------------------------------------------------
 (5) _displayL1_Update                                    13    13      0    1085
                                              9 COMMON     2     2      0
                                              0 BANK0     11    11      0
            _SPI1_Exchange8bitBuffer
 ---------------------------------------------------------------------------------
 (6) _SPI1_Exchange8bitBuffer                              7     5      2     759
                                              2 COMMON     7     5      2
                  _SPI1_Exchange8bit
 ---------------------------------------------------------------------------------
 (7) _SPI1_Exchange8bit                                    1     1      0      31
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _SYSTEM_Initialize                                    0     0      0     121
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM1_Initialize
                    _PWM2_Initialize
                    _PWM5_Initialize
                    _PWM6_Initialize
                    _SPI1_Initialize
                    _TMR0_Initialize
                    _TMR2_Initialize
                    _TMR4_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (3) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR4_Initialize                                      0     0      0       0
                    _TMR4_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR4_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0      98
           _TMR0_SetInterruptHandler
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR0_SetInterruptHandler                             2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _SPI1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _PWM6_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _PWM5_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _PWM2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _PWM1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _PIN_MANAGER_Initialize                               1     1      0      23
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM6_LoadDutyValue                                   4     2      2     196
                                              1 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (2) _PWM5_LoadDutyValue                                   4     2      2     272
                                              1 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (2) _PWM2_LoadDutyValue                                   2     0      2     166
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PWM1_LoadDutyValue                                   2     0      2     166
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _INTERRUPT_InterruptManager                          1     1      0       0
                                              0 COMMON     1     1      0
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (13) _TMR0_ISR                                            0     0      0       0
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (14) _TMR0_CallBack                                       0     0      0       0
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (15) _TMR0_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (15) Absolute function(Fake)                              2     0      2       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _nullifyBadge_platformInit
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM1_Initialize
     _PWM1_LoadDutyValue
     _PWM2_Initialize
     _PWM2_LoadDutyValue
     _PWM5_Initialize
     _PWM5_LoadDutyValue
     _PWM6_Initialize
     _PWM6_LoadDutyValue
     _SPI1_Initialize
     _SYSTEM_Initialize
       _OSCILLATOR_Initialize
       _PIN_MANAGER_Initialize
       _PWM1_Initialize
       _PWM2_Initialize
       _PWM5_Initialize
       _PWM6_Initialize
       _SPI1_Initialize
       _TMR0_Initialize
         _TMR0_SetInterruptHandler
         _TMR0_StartTimer
       _TMR2_Initialize
         _TMR2_StartTimer
       _TMR4_Initialize
         _TMR4_StartTimer
       _WDT_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
       _TMR0_StartTimer
     _TMR2_Initialize
       _TMR2_StartTimer
     _TMR4_Initialize
       _TMR4_StartTimer
     _displayL2_Initialize
       _displayL1_Initialize
         _displayL1_Update
           _SPI1_Exchange8bitBuffer
             _SPI1_Exchange8bit
         _memset
       _memset
   _schedulerExecute
     _TMR0_Read16bitTimer
     _scheduler_TaskRun
       Absolute function(Fake) *
       _TMR0_Read16bitTimer *
       _flashy_Main *
         _flashy_display_option
           _marquee
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
               _rand (ARG)
                 ___lmul
               _strlen (ARG)
             _nullifyBadge_segDisplayForceUpdate
               _displayL2_ForceUpdate
                 _displayL1_Update
                   _SPI1_Exchange8bitBuffer
                     _SPI1_Exchange8bit
             _nullifyBadge_segDisplayPutStr
               _displayL2_PutStr
                 _displayL2_PutChar
                   _displayL1_SetSegChar
                     _displayCharReverse
             _strlen
           _marquee_speedy
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
               _rand (ARG)
                 ___lmul
               _strlen (ARG)
             _nullifyBadge_segDisplayForceUpdate
               _displayL2_ForceUpdate
                 _displayL1_Update
                   _SPI1_Exchange8bitBuffer
                     _SPI1_Exchange8bit
             _nullifyBadge_segDisplayPutStr
               _displayL2_PutStr
                 _displayL2_PutChar
                   _displayL1_SetSegChar
                     _displayCharReverse
             _strlen
           _nullifyBadge_segDisplayForceUpdate
             _displayL2_ForceUpdate
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
           _nullifyBadge_segDisplayPutStr
             _displayL2_PutStr
               _displayL2_PutChar
                 _displayL1_SetSegChar
                   _displayCharReverse
         _led_Parody
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _nullifyBadge_userLedsSet
             _displayL2_SetUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
         _led_circle
           _nullifyBadge_userLedsSet
             _displayL2_SetUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
         _led_curtain
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _nullifyBadge_userLedsSet
             _displayL2_SetUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
         _led_rand
           ___almod
             _rand (ARG)
               ___lmul
           _nullifyBadge_userLedsSet
             _displayL2_SetUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
           _rand
             ___lmul
         _led_roundabout
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _nullifyBadge_userLedsSet
             _displayL2_SetUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
         _let_alternate
           _nullifyBadge_userLedsSet
             _displayL2_SetUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
         _marquee
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _nullifyBadge_segDisplayForceUpdate
             _displayL2_ForceUpdate
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
           _nullifyBadge_segDisplayPutStr
             _displayL2_PutStr
               _displayL2_PutChar
                 _displayL1_SetSegChar
                   _displayCharReverse
           _strlen
         _nullifyBadge_buttonsGet
         _nullifyBadge_irGet
         _nullifyBadge_irTxClr
         _nullifyBadge_irTxRegister
         _nullifyBadge_irTxRelease
         _nullifyBadge_irTxSet
         _nullifyBadge_segDisplayForceUpdate
           _displayL2_ForceUpdate
             _displayL1_Update
               _SPI1_Exchange8bitBuffer
                 _SPI1_Exchange8bit
         _nullifyBadge_segDisplayPutStr
           _displayL2_PutStr
             _displayL2_PutChar
               _displayL1_SetSegChar
                 _displayCharReverse
         _nullifyBadge_userLedsSet
           _displayL2_SetUserLeds
             _displayL1_SetUserLed
             _displayL1_Update
               _SPI1_Exchange8bitBuffer
                 _SPI1_Exchange8bit
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           ___wmul
           _isdigit
       _locked_Main *
         ___lwmod
           ___lwdiv (ARG)
           _rand (ARG)
             ___lmul
           _strlen (ARG)
         _locked_clear
           _nullifyBadge_segDisplayErase
             _displayL2_EraseSegDisplay
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
               _displayL2_PutStr
                 _displayL2_PutChar
                   _displayL1_SetSegChar
                     _displayCharReverse
           _nullifyBadge_userLedsClr
             _displayL2_ClrUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
         _locked_get_lock_leds
         _locked_get_unlock_leds
         _locked_lock_leds
         _locked_unlock_leds
         _marquee
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _nullifyBadge_segDisplayForceUpdate
             _displayL2_ForceUpdate
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
           _nullifyBadge_segDisplayPutStr
             _displayL2_PutStr
               _displayL2_PutChar
                 _displayL1_SetSegChar
                   _displayCharReverse
           _strlen
         _nullifyBadge_buttonsGet
         _nullifyBadge_userLedsSet
           _displayL2_SetUserLeds
             _displayL1_SetUserLed
             _displayL1_Update
               _SPI1_Exchange8bitBuffer
                 _SPI1_Exchange8bit
         _slot_Setup
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _memset
           _rand
             ___lmul
       _menu_Main *
         _menu_clear
           _nullifyBadge_segDisplayErase
             _displayL2_EraseSegDisplay
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
               _displayL2_PutStr
                 _displayL2_PutChar
                   _displayL1_SetSegChar
                     _displayCharReverse
           _nullifyBadge_userLedsClr
             _displayL2_ClrUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
         _menu_display_option
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _marquee
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
               _rand (ARG)
                 ___lmul
               _strlen (ARG)
             _nullifyBadge_segDisplayForceUpdate
               _displayL2_ForceUpdate
                 _displayL1_Update
                   _SPI1_Exchange8bitBuffer
                     _SPI1_Exchange8bit
             _nullifyBadge_segDisplayPutStr
               _displayL2_PutStr
                 _displayL2_PutChar
                   _displayL1_SetSegChar
                     _displayCharReverse
             _strlen
           _nullifyBadge_segDisplayForceUpdate
             _displayL2_ForceUpdate
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
           _nullifyBadge_segDisplayPutStr
             _displayL2_PutStr
               _displayL2_PutChar
                 _displayL1_SetSegChar
                   _displayCharReverse
           _nullifyBadge_userLedsSet
             _displayL2_SetUserLeds
               _displayL1_SetUserLed
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
         _menu_run_option
           _menu_clear
             _nullifyBadge_segDisplayErase
               _displayL2_EraseSegDisplay
                 _displayL1_Update
                   _SPI1_Exchange8bitBuffer
                     _SPI1_Exchange8bit
                 _displayL2_PutStr
                   _displayL2_PutChar
                     _displayL1_SetSegChar
                       _displayCharReverse
             _nullifyBadge_userLedsClr
               _displayL2_ClrUserLeds
                 _displayL1_SetUserLed
                 _displayL1_Update
                   _SPI1_Exchange8bitBuffer
                     _SPI1_Exchange8bit
         _nullifyBadge_buttonsGet
         _slot_Setup
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _memset
           _rand
             ___lmul
       _secret_Main *
         _nullifyBadge_buttonsGet
         _secret_check
           ___bmul
           _strlen
         _secret_clear
       _slot_Main *
         ___lwmod
           ___lwdiv (ARG)
           _rand (ARG)
             ___lmul
           _strlen (ARG)
         _marquee
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _nullifyBadge_segDisplayForceUpdate
             _displayL2_ForceUpdate
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
           _nullifyBadge_segDisplayPutStr
             _displayL2_PutStr
               _displayL2_PutChar
                 _displayL1_SetSegChar
                   _displayCharReverse
           _strlen
         _marquee_speedy
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _nullifyBadge_segDisplayForceUpdate
             _displayL2_ForceUpdate
               _displayL1_Update
                 _SPI1_Exchange8bitBuffer
                   _SPI1_Exchange8bit
           _nullifyBadge_segDisplayPutStr
             _displayL2_PutStr
               _displayL2_PutChar
                 _displayL1_SetSegChar
                   _displayCharReverse
           _strlen
         _memset
         _nullifyBadge_buttonsGet
         _rand
           ___lmul
         _slot_Finished_Animation
           _led_rand
             ___almod
               _rand (ARG)
                 ___lmul
             _nullifyBadge_userLedsSet
               _displayL2_SetUserLeds
                 _displayL1_SetUserLed
                 _displayL1_Update
                   _SPI1_Exchange8bitBuffer
                     _SPI1_Exchange8bit
             _rand
               ___lmul
         _slot_Running_Animation
           _led_circle
             _nullifyBadge_userLedsSet
               _displayL2_SetUserLeds
                 _displayL1_SetUserLed
                 _displayL1_Update
                   _SPI1_Exchange8bitBuffer
                     _SPI1_Exchange8bit
         _slot_Setup
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           _memset
           _rand
             ___lmul
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
             _rand (ARG)
               ___lmul
             _strlen (ARG)
           ___wmul
           _isdigit
         _strlen
   _scheduler_Init
   _scheduler_TaskAdd
     Absolute function(Fake) *
     _flashy_Init *
       _nullifyBadge_segDisplayErase
         _displayL2_EraseSegDisplay
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
           _displayL2_PutStr
             _displayL2_PutChar
               _displayL1_SetSegChar
                 _displayCharReverse
       _nullifyBadge_segDisplayRegister
       _nullifyBadge_userLedsClr
         _displayL2_ClrUserLeds
           _displayL1_SetUserLed
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
       _nullifyBadge_userLedsRegister
     _locked_Init *
       _locked_lock_leds
       _nullifyBadge_segDisplayErase
         _displayL2_EraseSegDisplay
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
           _displayL2_PutStr
             _displayL2_PutChar
               _displayL1_SetSegChar
                 _displayCharReverse
       _nullifyBadge_segDisplayRegister
       _nullifyBadge_userLedsClr
         _displayL2_ClrUserLeds
           _displayL1_SetUserLed
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
       _nullifyBadge_userLedsRegister
     _menu_Init *
       _nullifyBadge_segDisplayErase
         _displayL2_EraseSegDisplay
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
           _displayL2_PutStr
             _displayL2_PutChar
               _displayL1_SetSegChar
                 _displayCharReverse
       _nullifyBadge_segDisplayRegister
       _nullifyBadge_userLedsClr
         _displayL2_ClrUserLeds
           _displayL1_SetUserLed
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
       _nullifyBadge_userLedsRegister
     _secret_Init *
       _nullifyBadge_segDisplayErase
         _displayL2_EraseSegDisplay
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
           _displayL2_PutStr
             _displayL2_PutChar
               _displayL1_SetSegChar
                 _displayCharReverse
       _nullifyBadge_segDisplayRegister
       _nullifyBadge_userLedsClr
         _displayL2_ClrUserLeds
           _displayL1_SetUserLed
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
       _nullifyBadge_userLedsRegister
     _slot_Init *
       _nullifyBadge_segDisplayErase
         _displayL2_EraseSegDisplay
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
           _displayL2_PutStr
             _displayL2_PutChar
               _displayL1_SetSegChar
                 _displayCharReverse
       _nullifyBadge_segDisplayRegister
       _nullifyBadge_userLedsClr
         _displayL2_ClrUserLeds
           _displayL1_SetUserLed
           _displayL1_Update
             _SPI1_Exchange8bitBuffer
               _SPI1_Exchange8bit
       _nullifyBadge_userLedsRegister
       _slot_Setup
         ___lwmod
           ___lwdiv (ARG)
           _rand (ARG)
             ___lmul
           _strlen (ARG)
         _memset
         _rand
           ___lmul
   _scheduler_TaskInit

 _INTERRUPT_InterruptManager (ROOT)
   _TMR0_ISR
     _TMR0_CallBack
       Absolute function(Fake) *
       _TMR0_DefaultInterruptHandler *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4F      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      8      4B       7       93.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      43       9       83.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      4C      11       95.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      43      13       83.8%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
ABS                  0      0     294      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0      49      16       91.3%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0      38      18       70.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0      38      20       70.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0      3A      22       72.5%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0      28      24       50.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
DATA                 0      0     294      28        0.0%
BANK11              50      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITBANK12           50      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12              50      0       0      31        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITBANK13           50      0       0      32        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BANK13              50      0       0      33        0.0%
BITBANK14           50      0       0      34        0.0%
BANK14              50      0       0      35        0.0%
BITBANK15           50      0       0      36        0.0%
BANK15              50      0       0      37        0.0%
BITBANK16           50      0       0      38        0.0%
BANK16              50      0       0      39        0.0%
BITBANK17           50      0       0      40        0.0%
BANK17              50      0       0      41        0.0%
BITBANK18           50      0       0      42        0.0%
BANK18              50      0       0      43        0.0%
BITBANK19           50      0       0      44        0.0%
BANK19              50      0       0      45        0.0%
BITBANK20           50      0       0      46        0.0%
BANK20              50      0       0      47        0.0%
BITBANK21           50      0       0      48        0.0%
BANK21              50      0       0      49        0.0%
BITBANK22           50      0       0      50        0.0%
BANK22              10      0       0      51        0.0%
BITBANK23           50      0       0      52        0.0%
BANK23               0      0       0      53        0.0%
BITBANK24           50      0       0      54        0.0%
BANK24               0      0       0      55        0.0%
BITBANK25           20      0       0      56        0.0%
BANK25               0      0       0      57        0.0%


Microchip Technology PIC Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Tue Jul 25 01:25:02 2017

                          _SPI1_Exchange8bit 2E25                                            pc 0002  
           __size_of_slot_Finished_Animation 0027                               ___bmul@product 0073  
                 __end_of_gamma_table_256x1k 1200                           ?_SPI1_Exchange8bit 0070  
                                __CFG_CP$OFF 0000                                           l18 2E2A  
                      _displayL2_ClrUserLeds 2ECB                          ___wmul@multiplicand 0073  
                   marquee_speedy@multiplier 003E                                 ?_led_curtain 0030  
              nullifyBadge_buttonsGet@retVal 0073                  __size_of_PWM6_LoadDutyValue 0016  
                                __CFG_LVP$ON 0000                   ??_nullifyBadge_userLedsClr 007C  
                 ??_nullifyBadge_userLedsSet 007C                                          l208 2E3E  
                                        l615 1A08                                          _GIE 005F  
                                        l999 23FB                               led_Parody@leds 0034  
            ??_nullifyBadge_segDisplayPutStr 007C                                          _PR2 001E  
                                        _PR4 0416                                 __CFG_CPD$OFF 0000  
                             _scheduler_Init 2045                               led_Parody@size 0036  
                        ??_SPI1_Exchange8bit 0071                     ??_slot_Running_Animation 0034  
                         _locked_unlock_leds 2F50                  marquee_speedy@string_length 0048  
                            _TMR2_Initialize 2E41               SPI1_Exchange8bitBuffer@dataOut 0073  
                   displayL1_Update@tmpRxBuf 0020                                          wreg 0009  
                              _slot_taskData 00BA                 marquee_speedy@display_string 0041  
                displayL1_Initialize@display 007B                                         S8994 28EC  
        nullifyBadge_userLedsSet@userLedData 002D                              led_curtain@leds 0034  
                    secret_Main@secret_found 0056                              led_curtain@size 0036  
                       _displayL1_Initialize 2F3D                  slot_Finished_Animation@data 0041  
                                       l1230 2150                                         l1144 0BD4  
                                       l1136 0AF4                                         l1234 2FF9  
                                       l1139 0B61                                         l1421 055C  
                                       l1149 0C49                                         l1254 152C  
                                       l1424 05B5                                         l1472 13A4  
                                       l1633 1A68                                         l1394 256F  
                                       l1565 2017                                         l7012 2295  
                                       l7102 230B                                         l7120 2207  
                                       l7040 2F11                                         l7008 228A  
                                       l6314 2F9E                                         l7106 2314  
                                       l7026 20D7                                         l7124 2213  
                                       l7028 20E3                                         l7060 1A75  
                                       l8100 0E06                                         l7118 21FB  
                                       l7150 1B2C                                         l7222 2EC9  
                                       l7128 221C                                         l7144 1B05  
                                       l7080 1ABC                                         l7072 1AA3  
                                       l8112 0E39                                         l8104 0E19  
                                       l7066 1A7D                                         l7410 12DA  
                                       l7242 2F1C                                         l8114 0E3E  
                                       l8018 0CA5                                         l8202 145D  
                                       l7068 1A8B                                         l7076 1AAE  
                                       l7228 2011                                         l7412 12E8  
                                       l7500 1264                                         l7340 18B2  
                                       l8108 0E26                                         l8036 0CFB  
                                       l8140 0F36                                         l8220 14BD  
                                       l8212 149A                                         l7094 22ED  
                                       l7174 1BA3                                         l7270 2F6E  
                                       l7430 131F                                         l7422 12F7  
                                       l7406 12D8                                         l7502 1425  
                                       l7326 274B                                         l7246 2F22  
                                       l8142 0F59                                         l8134 0E92  
                                       l7096 22F9                                         l7168 1B7C  
                                       l7280 1A35                                         l7184 2611  
                                       l7432 132A                                         l7424 130B  
                                       l7416 12F5                                         l7352 23DD  
                                       l7344 23C3                                         l8064 0D77  
                                       l8056 0D4E                                         l8232 150A  
                                       l8320 1EEE                                         l8304 1EA2  
                                       l6298 2F88                                         l7194 2FD3  
                                       l7370 1220                                         l7442 133E  
                                       l8154 0F89                                         l8138 0EE5  
                                       l8066 0D7C                                         l8170 0FC9  
                                       l8234 1515                                         l8226 14ED  
                                       l6900 2240                                         l7460 1379  
                                       l7436 1335                                         l7444 135C  
                                       l7348 23D0                                         l7604 257E  
                                       l8172 0FD6                                         l8148 0F70  
                                       l8092 0DE3                                         l8252 1570  
                                       l8340 1F52                                         l8324 1F06  
                                       l8308 1EBA                                         l7374 1248  
                                       l7454 1373                                         l7390 1295  
                                       l7358 23EA                                         l7614 2196  
                                       l8422 0338                                         l8166 0FBD  
                                       l8086 0DD0                                         l8246 1544  
                                       l7384 1285                                         l8408 0243  
                                       l8096 0DF4                                         l7800 091E  
                                       l7704 1753                                         l7632 161B  
                                       l8264 159D                                         l8256 157A  
                                       l8248 1558                                         l8352 1F86  
                                       l8336 1F3A                                         l7490 13E7  
                                       l7474 13C0                                         l7466 1398  
                                       l7570 1CB4                                         l8450 04F9  
                                       l8434 0409                                         l7714 177F  
                                       l7650 1661                                         l8274 15D5  
                                       l8266 15AA                                         l6932 266B  
                                       l6940 2692                                         l7484 13D9  
                                       l7476 13C3                                         l7572 1D66  
                                       l8452 056B                                         l8444 04B6  
                                       l7820 095D                                         l7740 17EE  
                                       l8356 1F9E                                         l8292 1E6B  
                                       l8372 1FE3                                         l6950 269A  
                                       l6942 2697                                         l6918 241E  
                                       l7478 13C7                                         l7398 12C4  
                                       l7566 1D4F                                         l7814 0949  
                                       l7750 0865                                         l7718 178F  
                                       l7654 1687                                         l8278 1600  
                                       l8374 1FF5                                         l8286 1E51  
                                       l6936 267A                                         l7568 1D60  
                                       l8456 059E                                         l8472 060F  
                                       l7912 0AF8                                         l7808 0936  
                                       l7728 17BB                                         l7664 16AA  
                                       l7656 168D                                         l8368 1FD2  
                                       l6938 268E                                         l7498 13EB  
                                       l7906 0ADF                                         l7850 09D5  
                                       l7826 096D                                         l7666 16AE  
                                       l7658 1695                                         l8642 1BB6  
                                       l6892 222F                                         l6980 21CD  
                                       l7596 255C                                         l8388 0110  
                                       l7932 0B4C                                         l7844 09B7  
                                       l7836 0992                                         l7780 08D5  
                                       l7684 1705                                         l8652 1C19  
                                       l7790 08FA                                         l7686 170A  
                                       l7678 16E2                                         l7872 0A4B  
                                       l7856 09EB                                         l7880 0A72  
                                       l7848 09C4                                         l8680 1CA6  
                                       l8648 1C0E                                         l8656 1C21  
                                       l7938 0B65                                         l7882 0A7D  
                                       l7778 08C6                                         l7698 173E  
                                       l8842 1E3E                                         l7868 0A36  
                                       l7958 0BBB                                         l7886 0A8C  
                                       l7878 0A5E                                         l7968 0BD8  
                                       l7988 0C30                                         l7998 0C4D  
                                       STR_1 313E                                         l8992 08CC  
                                       STR_2 3139                          ?_locked_unlock_leds 0070  
                                       STR_3 2858                                         STR_4 3134  
                                       STR_5 30ED                                         l8996 0F3B  
                                       STR_6 308C                                         STR_7 30E7  
                                       l8998 23F0                                         STR_8 312F  
                                       STR_9 303E                      __end_of_PWM1_Initialize 2E6B  
                                       _LATA 010C                                         _LATB 010D  
                                       _LATC 010E                                         u4105 2537  
                                       u4215 22F0                                         u4055 2296  
                                       u4305 220D                                         u4145 1A80  
                                       u4065 229D                                         u4330 1ADC  
                                       u4235 22FA                                         u4315 2214  
                                       u4245 2304                                         u4165 1A99  
                                       u4255 230C                                         u4175 1AA4  
                                       u4360 1B53                                         u3715 2F95  
                                       u4515 1A19                              led_Parody@count 0030  
                                       u4285 21FE                                         u4525 2268  
                                       u4445 2018                                         u4535 2276  
                                       u4455 201D                                         u2960 27A9  
                                       u3665 2FB2                                         u3675 2FC8  
                                       u5195 0D71                                         u4645 12EE  
                                       u5614 1C44                                         u3695 2F7F  
                                       u4735 13B3                                         u5615 1C42  
                                       u4825 1D19                                         u5554 1BC7  
                                       u4835 1CBA                                         u5635 1C98  
                                       u5555 1BC5                                         u4925 16FF  
                                       u5574 1BE6                                         u4695 138E  
                                       u5575 1BE4                                         u4795 214A  
                                       _PLLR 48E0                                         _TMR2 001D  
                                       _TMR4 0415                                         _WPUA 020C  
                                       _WPUB 020D                                         _WPUC 020E  
                               __CFG_WRT$OFF 0000                                __CFG_FCMEN$ON 0000  
                                       _main 1D68                                         _rand 2501  
                            _TMR0_StartTimer 2DDF                                         fsr0h 0005  
                                       fsr1h 0007                                         indf0 0000  
                                       fsr0l 0004                                         indf1 0001  
                                       fsr1l 0006                                         btemp 007E  
                              __CFG_BOREN$ON 0000                             ??_marquee_speedy 0040  
                              __CFG_BORV$LOW 0000                                         start 0016  
                  __end_of_SPI1_Exchange8bit 2E2E                          _menu_display_option 1867  
                            _PWM5_Initialize 2E8C                          locked_Main@taskData 0052  
               displayL2_ClrUserLeds@display 007B                      displayL2_PutStr@display 0035  
                              __CFG_CSWEN$ON 0000                            ___bmul@multiplier 0074  
                              __CFG_MCLRE$ON 0000                         _displayL1_SetSegChar 23FC  
                 __end_of_PWM5_LoadDutyValue 2FB9                          menu_run_option@data 003B  
                       _displayL2_Initialize 2155                         ??_locked_unlock_leds 0071  
                    __end_of_PWM2_Initialize 2E76                      __end_of_TMR0_Initialize 20D3  
             ??_TMR0_DefaultInterruptHandler 0070               __size_of_OSCILLATOR_Initialize 000A  
                     __end_of_scheduler_Init 2060                         _displayL1_SetUserLed 2F2B  
                      marquee@display_string 003F                __end_of_OSCILLATOR_Initialize 2E41  
                    ?_locked_get_unlock_leds 0071                      _locked_locking_leds_idx 00A2  
                            __end_of___almod 1AC5                                        ?_main 0070  
                                      ?_rand 0024                                        STR_10 312F  
                                      STR_11 30B1                                        STR_20 28D3  
                                      STR_12 30D2                                        STR_21 289E  
                                      STR_13 30E1                                        STR_22 2835  
                                      STR_14 302B                                        STR_30 3116  
                                      STR_23 280A                                        STR_15 3016  
                                      STR_31 310C                                        STR_24 312A  
                                      STR_16 28B9                                        STR_40 30C2  
                                      STR_32 30F3                                        STR_25 3143  
                                      STR_17 3000                                        STR_41 3096  
                                      STR_33 311B                                __CFG_WDTE$OFF 0000  
                                      STR_50 30A8                                        STR_26 305D  
                                      STR_18 285D                                        STR_42 3081  
                                      STR_34 30F8                                        STR_27 305F  
                                      STR_51 30A8                                        STR_19 2880  
                                      STR_43 3076                                        STR_35 3102  
                                      STR_52 30A8                                        STR_28 3125  
                                      STR_44 30BA                                        STR_36 3107  
                                      STR_53 3147                                        STR_29 3120  
                                      STR_45 306A                                        STR_37 30FD  
                                      STR_54 30DA                                        STR_46 3050  
                                      STR_38 3111                                        STR_47 309F  
                                      STR_39 30CA                                        STR_48 30A8  
                                      STR_49 30A8                             _schedulerExecute 1C29  
                                      _T2CON 001F                      _flashy_leds_state_track 00AE  
                                      _T4CON 0417                               __CFG_DEBUG$OFF 0000  
                            __end_of___lwdiv 2319                              __end_of___lwmod 2221  
                                      i1l363 0011                                        _OSCEN 091D  
                                      _TMR0H 0016                                        _TMR0L 0015  
                             _led_roundabout 247E                         ?_menu_display_option 004C  
             nullifyBadge_irTxRegister@badge 0071                   __end_of_scheduler_TaskInit 23C2  
                                      _TRISA 008C                                        _TRISB 008D  
                                      _TRISC 008E             __size_of_nullifyBadge_buttonsGet 0031  
          __size_of_TMR0_SetInterruptHandler 0006                              _TMR4_Initialize 2E76  
                            _PWM6_Initialize 2E98                          ___lmul@multiplicand 0075  
                  ?_TMR0_SetInterruptHandler 0071                        _displayL2_ForceUpdate 2DFD  
                     ??_locked_get_lock_leds 0073                             __end_of_TMR0_ISR 2EBD  
                               _badge_locked 00C4                                 ?_locked_Main 0052  
                               ?_locked_Init 0039                        ?_displayL1_Initialize 0070  
                            __end_of_dpowers 280A                      _SPI1_Exchange8bitBuffer 2662  
                             _WDT_Initialize 2DEE                              __end_of_isdigit 2ECB  
                            __end_of_marquee 1BAF                                        _randx 00D9  
                                      pclath 000A           __size_of_nullifyBadge_platformInit 0055  
                                      status 0003                                        wtemp0 007E  
                            __end_of_sprintf 142C                              _TMR2_StartTimer 2DE2  
          __size_of_nullifyBadge_irTxRelease 000B                             _menu_option_size 00B2  
                  ?_nullifyBadge_irTxRelease 0070                     __size_of_SPI1_Initialize 0008  
                     menu_Main@buttonPressed 0056                 displayL1_SetSegChar@charData 0028  
                      ?_displayL1_SetSegChar 0020                              __initialization 0018  
                          ?_displayL1_Update 0070                                 __end_of_main 1E43  
                               __end_of_rand 2544                        ?_displayL2_Initialize 0070  
                          ?_displayL2_PutStr 0030                       __size_of_let_alternate 0014  
                     ?_displayL2_ClrUserLeds 0070               __end_of_locked_get_unlock_leds 3000  
                         ??_displayL1_Update 0079                      __end_of_TMR2_Initialize 2E4B  
                      ?_displayL1_SetUserLed 0071                  ?_INTERRUPT_InterruptManager 0070  
                         ??_displayL2_PutStr 0032             displayCharReverse@retValUpperRev 007A  
                            ?_scheduler_Init 0070                       __end_of_led_roundabout 24BF  
                                     ??_main 006E                                       ??_rand 0026  
                              slot_Main@data 0065                         _nullifyBadge_irTxClr 2DE8  
                      ??_menu_display_option 007C                         _nullifyBadge_irTxSet 2DEB  
                               ?_secret_Main 0052                                 ?_secret_Init 0039  
            __size_of_slot_Running_Animation 0046                       __end_of_WDT_Initialize 2DF2  
                              slot_Init@data 003B        __end_of_nullifyBadge_segDisplayPutStr 2E55  
     __size_of_nullifyBadge_segDisplayPutStr 000A                _nullifyBadge_segDisplayPutStr 2E4B  
                    __end_of_TMR0_StartTimer 2DE2                              scheduler_Init@k 0073  
             nullifyBadge_platformInit@badge 002C                                       _CCPR1H 0292  
                                     _CCPR2H 0296                                       _CCPR1L 0291  
                                     _CCPR2L 0295                                       _ANSELA 018C  
                                     _ANSELB 018D                                       _ANSELC 018E  
                                     _T0CON0 0017                                       _T0CON1 0018  
                           ?_PWM1_Initialize 0070                                       _ODCONA 028C  
                                     _ODCONB 028D                                       _ODCONC 028E  
                    __end_of_PWM5_Initialize 2E98                  __end_of_TMR0_Read16bitTimer 20B5  
                                     _OSCFRQ 091F                                       _WDTCON 0097  
                            _TMR4_StartTimer 2DE5                        SPI1_Exchange8bit@data 0071  
                          _scheduler_TaskAdd 1BAF                     __size_of_menu_run_option 003A  
                   __end_of_locked_lock_leds 2045            __end_of_nullifyBadge_platformInit 2800  
                 __size_of_SPI1_Exchange8bit 0009                            _scheduler_TaskRun 07DF  
                             __CFG_PWRTE$OFF 0000                           ?_scheduler_TaskAdd 003D  
                         ?_scheduler_TaskRun 0070                      _slot_Finished_Animation 217B  
                                     ___bmul 2F1A                             __end_of_led_rand 2619  
                                     ___lmul 2281                                    ??___almod 0079  
                   locked_get_lock_leds@leds 0077                                   _Shot_Index 007C  
                                     ___wmul 200F                               __CFG_STVREN$ON 0000  
                   locked_get_lock_leds@size 0075                                       _deaths 00A8  
                       __size_of_flashy_Main 07E7                         __size_of_flashy_Init 0096  
                                  ??___lwdiv 0075                                    ??___lwmod 0079  
                      _flashy_display_option 1200                             ?_TMR0_Initialize 0070  
                           ?_PWM2_Initialize 0070                                ?_locked_clear 0039  
                                     _memset 2FCF                      __end_of_PWM6_Initialize 2EA4  
                    __end_of_TMR4_Initialize 2E81                          ??_scheduler_TaskAdd 003E  
           nullifyBadge_segDisplayPutStr@str 0037             __end_of_nullifyBadge_userLedsClr 2E15  
           __end_of_nullifyBadge_userLedsSet 2F1A                          ??_scheduler_TaskRun 007C  
                            ?_led_roundabout 0030                        ?_nullifyBadge_irTxClr 0070  
                      ?_nullifyBadge_irTxSet 0070                                       _strlen 20D3  
                               __pdataBIGRAM 26F0                         __size_of_led_curtain 0041  
                                 _Slot_Wheel 02B2                       ?_displayL2_ForceUpdate 0070  
                                  ??_isdigit 0071                                    ??_marquee 003E  
                  ??_SPI1_Exchange8bitBuffer 0074                              ?_WDT_Initialize 0070  
                     ??_displayL1_Initialize 007B                        _displayL2_SetUserLeds 20F1  
              TMR0_Read16bitTimer@readValLow 007A                        __end_of_TMR0_CallBack 2E60  
                              _let_alternate 2F63                      __end_of_TMR2_StartTimer 2DE5  
   TMR0_SetInterruptHandler@InterruptHandler 0071                                    ??_sprintf 003B  
                 ?_displayL2_EraseSegDisplay 0070                   __end_of_nullifyBadge_irGet 2DF7  
                       locked_lock_leds@size 0073                            _SYSTEM_Initialize 210F  
           displayL2_EraseSegDisplay@display 0037                   ?_nullifyBadge_irTxRegister 0070  
                          _menu_options_leds 01AC                    __end_of_scheduler_TaskAdd 1C29  
                    __end_of__initialization 00D3                    secret_check@buttonPressed 0079  
                  __end_of_scheduler_TaskRun 0800                       menu_display_option@led 0050  
                    _roundabout_leds_inverse 03BC                           ?_SYSTEM_Initialize 0070  
                 __end_of_PWM2_LoadDutyValue 2FA3                       _slot_Running_Animation 2544  
                     ??_displayL1_SetSegChar 0022                  PWM1_LoadDutyValue@dutyValue 0071  
                  secret_check@currents_size 0025                          ___bmul@multiplicand 0071  
                              led_rand@spark 003B                       ??_displayL2_Initialize 007C  
                          _displayL2_PutChar 26B0                               __pcstackCOMMON 0070  
                displayL1_SetSegChar@charPos 0021                  __size_of_displayCharReverse 002F  
                               __pidataBANK1 207C                                 __pidataBANK2 0002  
                               __pidataBANK3 21A2                                 __pidataBANK4 0800  
                               __pidataBANK5 2619                                 __pidataBANK6 2351  
                               __pidataBANK7 2319                                 __pidataBANK8 2060  
                        ??_SYSTEM_Initialize 0073                                    ?_TMR0_ISR 0070  
                     ??_displayL1_SetUserLed 0073                           ?_displayL2_PutChar 002A  
                                 _badge_inst 01DA                               ??_locked_clear 007C  
                          ??_SPI1_Initialize 0071                  displayL1_SetSegChar@display 0027  
                         _PWM1_LoadDutyValue 2F77                        scheduler_TaskAdd@task 003D  
                           ?_TMR2_Initialize 0070                          locked_Init@taskData 0039  
                        _flashy_sparkle_rate 00AC         __end_of_nullifyBadge_segDisplayErase 2E0F  
      __size_of_nullifyBadge_segDisplayErase 0006                 _nullifyBadge_segDisplayErase 2E09  
                    _nullifyBadge_buttonsGet 2250                          ??_displayL2_PutChar 002B  
                        ?_PWM1_LoadDutyValue 0071                               ?_let_alternate 0030  
                         _gamma_table_256x1k 1000                             ?_TMR0_StartTimer 0070  
                    __end_of_TMR4_StartTimer 2DE8                    __end_of_SYSTEM_Initialize 2130  
                         led_curtain@counter 0030                                 sprintf@width 0048  
                              _menu_TaskData 023C                                   __pbssBANK1 00A0  
                                 __pbssBANK2 0120                                   __pbssBANK3 01C8  
                                 __pbssBANK4 0220                                   __pbssBANK8 0420  
                                 __pbssBANK9 04A0                         __size_of_locked_Main 01DD  
                       __size_of_locked_Init 0063                          secret_Main@taskData 0052  
                           ?_PWM5_Initialize 0070               ?_nullifyBadge_segDisplayPutStr 0037  
                          _flashy_option_idx 00A6                     __end_of_schedulerExecute 1CAD  
                      _TMR4_InterruptHandler 00C0           nullifyBadge_userLedsRegister@badge 0071  
                         __size_of_menu_Main 01F7                           __size_of_menu_Init 0062  
                  __end_of_displayL2_PutChar 2702                    ??_slot_Finished_Animation 003F  
                              ?_secret_check 0077                         ??_PWM1_LoadDutyValue 0073  
                              ?_secret_clear 0071                               _SSP1DATPPSbits 0E21  
                            _secret_TaskData 0220                                   __pmaintext 1D68  
                                    ?___bmul 0071             __end_of_TMR0_SetInterruptHandler 2DFD  
                                    ?___lmul 0071                       ?_flashy_display_option 004C  
                                    ?___wmul 0071                        scheduler_TaskRun@task 0067  
                                 ??_TMR0_ISR 0070                              __CFG_PPS1WAY$ON 0000  
                 __end_of_PWM6_LoadDutyValue 2FCF                                   __pintentry 0004  
                          ??_menu_run_option 007C                                      _CCP1CON 0293  
                                    _CCP2CON 0297                                      ?_memset 0071  
                             ___lmul@product 0020                       ??_nullifyBadge_irTxClr 0071  
                           ?_TMR4_Initialize 0070                             ?_PWM6_Initialize 0070  
                     ??_nullifyBadge_irTxSet 0071                               _SSP1CLKPPSbits 0E20  
                        __CFG_RSTOSC$HFINT32 0000                                      ?_strlen 0071  
                                 _led_Parody 19F2                ?_nullifyBadge_segDisplayErase 0070  
                     ?_displayL2_SetUserLeds 002B                           _PWM5_LoadDutyValue 2FA3  
                                    _OSCCON1 0919                     displayL2_PutChar@display 002F  
                                    _OSCCON3 091B                           __size_of_slot_Main 0572  
                         __size_of_slot_Init 0064                                      _NVMADRH 0892  
                                    _NVMADRL 0891                                      _NVMDATH 0894  
                                    _OSCTUNE 091E                                      _NVMDATL 0893  
                                    _NVMCON2 0896                                      _PWM5DCH 0618  
                                    _PWM5DCL 0617                                      _PWM6DCH 061B  
                                    _PWM6DCL 061A                                      _PWM5CON 0619  
                                    _PWM6CON 061C                                      _SSP1ADD 0212  
                       __size_of_secret_Main 01BD                                      _PPSLOCK 0E0F  
                                    _SSP1BUF 0211                                   _led_circle 2E2E  
                       __size_of_secret_Init 005B                             ?_TMR2_StartTimer 0070  
                                  ?_led_rand 0070                          ?_PWM5_LoadDutyValue 0071  
                    _FLASHY_TEXT_SECRET_TEST 00E1                     flashy_Main@buttonPressed 005C  
                 __size_of_scheduler_TaskAdd 007A            __size_of_nullifyBadge_userLedsClr 0006  
                 __size_of_scheduler_TaskRun 0021            __size_of_nullifyBadge_userLedsSet 0011  
                         _scheduler_TaskInit 2389                    ?_nullifyBadge_userLedsClr 0070  
                  ?_nullifyBadge_userLedsSet 002D                               ??_secret_check 0020  
                             ??_secret_clear 0073                      ??_displayL2_ClrUserLeds 007B  
               displayL2_SetUserLeds@display 007B                             ??_scheduler_Init 0071  
                        ?_scheduler_TaskInit 0070                              __size_of___bmul 0011  
                                    ___almod 1A57                              __size_of___lmul 0032  
                            __size_of___wmul 001B              ??_nullifyBadge_userLedsRegister 0071  
                                    ___lwdiv 22E5                           scheduler_TaskAdd@k 0045  
                                    ___lwmod 21F4                         ??_PWM5_LoadDutyValue 0073  
                __size_of_locked_unlock_leds 0013                    ??_nullifyBadge_buttonsGet 0071  
                            _roundabout_leds 033C                      scheduler_Init@scheduler 0072  
                            __size_of_memset 0018                        displayL1_SetSegChar@c 0020  
                            _locked_TaskData 022E                                   _menu_clear 258A  
                                    __ptext1 2389                                      __ptext2 1BAF  
                                    __ptext3 180C                                      __ptext4 192B  
                                    __ptext5 18C9                                      __ptext6 0749  
                                    __ptext7 198E                                      __ptext8 2000  
                                    __ptext9 2E1D                              __size_of_strlen 001E  
            __end_of_slot_Finished_Animation 21A2                                      _dpowers 2800  
                             slot_Setup@data 0034                        _OSCILLATOR_Initialize 2E37  
                                    _oddeven 00B6                                    _T2CONbits 001F  
                          __end_of_menu_Main 1800                            __end_of_menu_Init 192B  
                                    _isdigit 2EBD                              ??_let_alternate 007C  
                                    _marquee 1B38                                    _T4CONbits 0417  
                   ??_PIN_MANAGER_Initialize 0071      nullifyBadge_segDisplayForceUpdate@badge 002B  
                  __size_of_displayL1_Update 0011                                 marquee@F8648 01BE  
                       ??_scheduler_TaskInit 0071                    __size_of_displayL2_PutStr 002A  
                 __size_of_SYSTEM_Initialize 0021                                      _sprintf 125F  
                                    clrloop0 2EA5                             ?_TMR4_StartTimer 0070  
              __size_of_locked_get_lock_leds 0025                          displayL2_PutStr@str 0030  
                                 ??_led_rand 0033                         end_of_initialization 00D3  
                       __end_of_locked_clear 2501                                      init_ram 1800  
                                    memset@c 0073                                      memset@n 0075  
                                    memset@p 0077                                secret_check@i 0028  
                                    initloop 1801                                 marquee@count 003C  
                 __size_of_displayL2_PutChar 0052                            ?_locked_lock_leds 0070  
                          __end_of_slot_Main 0649                            __end_of_slot_Init 19F2  
                           ??_led_roundabout 0032                           ??_locked_lock_leds 0071  
             TMR0_Read16bitTimer@readValHigh 007B                  __end_of_menu_display_option 18C9  
                     slot_Main@buttonPressed 0064                                      strlen@s 0071  
                    ??_displayL2_ForceUpdate 007B                      __size_of_marquee_speedy 0073  
                         secret_check@inputs 0027                             ??_WDT_Initialize 0071  
                   _TMR0_SetInterruptHandler 2DF7                                    _PORTAbits 000C  
                                  _PORTBbits 000D                                    _PORTCbits 000E  
              nullifyBadge_userLedsClr@badge 002B                                  ?_led_Parody 0030  
                                 _slot_Setup 2702                      displayL1_Update@display 002A  
                                ?_led_circle 0030                      menu_display_option@data 004C  
             ??_nullifyBadge_segDisplayErase 007C                      menu_display_option@size 004E  
                           __CFG_FEXTOSC$OFF 0000                  ??_displayL2_EraseSegDisplay 007C  
            __end_of_nullifyBadge_buttonsGet 2281                                _schedulerInst 01C8  
                   _nullifyBadge_irTxRelease 2E81                      ?_slot_Running_Animation 0032  
                ??_nullifyBadge_irTxRegister 0071                                  _CCP1CONbits 0293  
                            _SPI1_Initialize 2E15                                  _CCP2CONbits 0297  
                          slot_Main@taskData 0052                                ??_flashy_Main 0054  
                              ??_flashy_Init 007C                   ?_nullifyBadge_platformInit 0070  
               __size_of_TMR0_Read16bitTimer 001D                     __size_of_PWM1_Initialize 000B  
                        secret_Init@taskData 0039                         _timer0ReloadVal16bit 00BE  
                         _nullifyBadge_irGet 2DF2                              flashy_Main@data 005E  
                             __end_of___bmul 2F2B                nullifyBadge_userLedsSet@badge 002F  
                             __end_of___lmul 22B3                                __pidataBIGRAM 0649  
                              ??_led_curtain 0032                               __end_of___wmul 202A  
            slot_Finished_Animation@taskData 003D                       flashy_Main@hit_counter 0056  
                          __size_of_TMR0_ISR 000D                           _PWM2_LoadDutyValue 2F8D  
                                ?_menu_clear 0039                       ?_OSCILLATOR_Initialize 0070  
                             __end_of_memset 2FE7                          ?_nullifyBadge_irGet 0070  
                            flashy_Init@data 003B        __end_of_nullifyBadge_userLedsRegister 200F  
     __size_of_nullifyBadge_userLedsRegister 000F                _nullifyBadge_userLedsRegister 2000  
                       __end_of_secret_check 1D68                              _menu_option_idx 00B4  
                       __end_of_secret_clear 22E5                               __end_of_strlen 20F1  
                        start_initialization 0018                     __size_of_PWM2_Initialize 000B  
                   __size_of_TMR0_Initialize 001E                          ?_PWM2_LoadDutyValue 0071  
            __size_of_PIN_MANAGER_Initialize 0055                __size_of_displayL1_Initialize 0013  
             __end_of_slot_Running_Animation 258A                         ??_nullifyBadge_irGet 0071  
                            _menu_run_option 23C2                            ?_schedulerExecute 0070  
                    ??_flashy_display_option 007C                   __end_of_displayCharReverse 2250  
                   ??_locked_get_unlock_leds 0073                          __size_of_led_Parody 0065  
                         led_roundabout@leds 0034                             __CFG_LPBOREN$OFF 0000  
                         led_roundabout@size 0036                           _flashy_scroll_rate 00AA  
                       ??_PWM2_LoadDutyValue 0073                                _secret_inputs 024A  
                         ??_schedulerExecute 0068                    flashy_display_option@data 004C  
              __size_of_displayL1_SetSegChar 0041                                     ??___bmul 0072  
                PWM2_LoadDutyValue@dutyValue 0071                                     ??___lmul 0079  
                 slot_Running_Animation@data 0036                                     ??___wmul 0075  
                  _displayL2_EraseSegDisplay 2EE8                                  _CCPTMRSbits 029F  
                        __size_of_led_circle 0009                __size_of_displayL2_Initialize 0026  
                     __size_of_TMR0_CallBack 000B                                  __pdataBANK1 00C7  
                                __pdataBANK2 0161                                  __pdataBANK3 01A0  
                                __pdataBANK4 024A                                  __pdataBANK5 02A0  
                                __pdataBANK6 0320                                  __pdataBANK7 03A0  
                                __pdataBANK8 043E                                     ??_memset 0077  
                  _nullifyBadge_irTxRegister 2ED9                __size_of_displayL1_SetUserLed 0012  
                        __end_of_flashy_Main 1000                          __end_of_flashy_Init 07DF  
                   ?_SPI1_Exchange8bitBuffer 0072                      ??_displayL2_SetUserLeds 007B  
                           secret_check@data 0077                                     ??_strlen 0073  
                           secret_check@size 0023                    schedulerExecute@scheduler 00E9  
         nullifyBadge_segDisplayPutStr@badge 0039                  PWM5_LoadDutyValue@dutyValue 0071  
                       marquee_speedy@string 003A                                  __pbssCOMMON 007C  
                                ?_slot_Setup 002F                    schedulerExecute@tickDelta 00E7  
                                  ___latbits 0003                          __end_of_led_curtain 247E  
                              __pcstackBANK0 0020                                __pcstackBANK1 00E3  
                      __size_of_locked_clear 0042                             _displayL1_Update 2EF8  
                         _PWM6_LoadDutyValue 2FB9                     __size_of_TMR2_Initialize 000A  
                              ??_locked_Main 0054                             _displayL2_PutStr 21CA  
                              ??_locked_Init 007C                       scheduler_TaskInit@task 0071  
                           secret_clear@data 0071                      __end_of_SPI1_Initialize 2E1D  
                               _isdigit$3264 0071                         _asciiCharTableLookup 26F0  
                      _locked_lock_base_leds 00DF                           _flashy_option_size 00A4  
                               _curtain_leds 03A0                          ?_PWM6_LoadDutyValue 0071  
           displayL2_SetUserLeds@userLedData 002B                                  sprintf@flag 0040  
                          __size_of_led_rand 0048                                  sprintf@prec 003F  
                        __size_of_menu_clear 0047                        _TMR0_InterruptHandler 00BC  
                   __size_of_TMR0_StartTimer 0003                  __size_of_PWM1_LoadDutyValue 0016  
                           ___lwdiv@dividend 0073                       _PIN_MANAGER_Initialize 2756  
                                _FLASHY_TEXT 0161                     __size_of_PWM5_Initialize 000C  
                          menu_Main@taskData 0052               __size_of_displayL2_ClrUserLeds 000E  
              __end_of_displayL2_ClrUserLeds 2ED9                  displayL1_SetUserLed@display 0074  
                                   ?___almod 002B                                    __ptext100 2E55  
                                  __ptext101 2DDE                            schedulerExecute@k 00EA  
                                   ?___lwdiv 0071                                     ?___lwmod 002B  
                             _marquee_speedy 1AC5                         ??_PWM6_LoadDutyValue 0073  
                               _locked_clear 24BF                            ??_PWM1_Initialize 0071  
               ??_INTERRUPT_InterruptManager 0070                             ___almod@dividend 002F  
                          marquee@multiplier 0044                                    __pswtext1 28EC  
                     displayCharReverse@cVal 0071                __size_of_nullifyBadge_irTxClr 0003  
              __size_of_nullifyBadge_irTxSet 0003                                ??_secret_Main 0054  
                              ??_secret_Init 007C                          _locked_locking_leds 01A0  
                                   ?_isdigit 0070                                     ?_marquee 003A  
                   __size_of_PWM6_Initialize 000C                     __size_of_TMR4_Initialize 000B  
             ?_nullifyBadge_userLedsRegister 0070                  displayL2_Initialize@display 002B  
                    __end_of_menu_run_option 23FC                             ___lwdiv@quotient 0077  
                            secret_Main@data 0058                                    _menu_Main 1609  
                                  _menu_Init 18C9                nullifyBadge_irTxRelease@badge 0072  
                                  _menu_Exit 0000                                     ?_sprintf 002F  
                        flashy_Main@taskData 0052                                _TMR0_CallBack 2E55  
                         displayL2_PutChar@c 002A                           displayL2_PutChar@k 002E  
                                  _menu_task 0147      displayL1_SetSegChar@dispDataVectBaseIdx 0026  
                   ?_slot_Finished_Animation 003D                            ??_TMR0_Initialize 0073  
                          ??_PWM2_Initialize 0071                              secret_Init@data 003B  
              SPI1_Exchange8bitBuffer@dataIn 0077                               ___wmul@product 0075  
                        __end_of_locked_Main 1609                          __end_of_locked_Init 198E  
                                   _LATBbits 010D                                     _LATCbits 010E  
              SPI1_Exchange8bitBuffer@bufLen 0072                                    clear_ram0 2EA4  
                                   _PIE0bits 0090                     __size_of_TMR2_StartTimer 0003  
        __size_of_INTERRUPT_InterruptManager 0012                   ??_TMR0_SetInterruptHandler 0073  
            __size_of_locked_get_unlock_leds 0019                                     _PIR0bits 0010  
                                   _PIR1bits 0011                                     _PIR2bits 0012  
                                _flashy_Main 0819                                  _flashy_Init 0749  
                                _flashy_Exit 0000                          __size_of_slot_Setup 0054  
                 TMR0_Read16bitTimer@readVal 0078                   __end_of_locked_unlock_leds 2F63  
                 scheduler_TaskAdd@scheduler 0044              __end_of_SPI1_Exchange8bitBuffer 26B0  
               __end_of_locked_get_lock_leds 2155                       __end_of_marquee_speedy 1B38  
                                _flashy_task 0154                                     _SSP1CON1 0215  
                                   _TMR0_ISR 2EB0                                     _SSP1STAT 0214  
                          slot_Init@taskData 0039                  __size_of_PWM5_LoadDutyValue 0016  
                      __size_of_secret_check 00BB                                    _slot_Main 00D7  
                      __size_of_secret_clear 0032                                    _slot_Init 198E  
                                  _slot_Exit 0000                                  _led_curtain 243D  
            displayL1_SetUserLed@userLedVect 0071                              _flashy_TaskData 0420  
                                  _slot_task 013A            schedulerExecute@currentSystemTick 00E3  
                          ___wmul@multiplier 0071               __size_of_displayL2_ForceUpdate 0006  
              __end_of_displayL2_ForceUpdate 2E03                            _Shot_Options_Long 02A0  
                               ??_led_Parody 0032                   ??_nullifyBadge_irTxRelease 0071  
                  __size_of_locked_lock_leds 001B            nullifyBadge_segDisplayErase@badge 0038  
                   locked_Main@buttonPressed 0056                          _TMR0_Read16bitTimer 2098  
                      __end_of_let_alternate 2F77                                 ??_led_circle 007C  
                            led_circle@count 0030                  __size_of_scheduler_TaskInit 0039  
                             ?_TMR0_CallBack 0070                                   ?_menu_Main 0052  
                                 ?_menu_Init 0039                             ?_SPI1_Initialize 0070  
                   _nullifyBadge_userLedsClr 2E0F                            ___lmul@multiplier 0071  
                      led_roundabout@counter 0030                     _nullifyBadge_userLedsSet 2F09  
                        __end_of_secret_Main 2000                          __end_of_secret_Init 1867  
                                   _Leds_idx 00DD                            ??_TMR2_Initialize 0071  
                        marquee_speedy@F8639 01C3                     secret_Main@buttonPressed 0057  
                 locked_get_unlock_leds@leds 0073                     __size_of_TMR4_StartTimer 0003  
                               _secret_check 1CAD                                 _secret_clear 22B3  
                       ?_TMR0_Read16bitTimer 0071                           __end_of_led_Parody 1A57  
                            marquee_speedy@i 0046                              marquee_speedy@j 004A  
                ??_nullifyBadge_platformInit 007C                     ?_nullifyBadge_buttonsGet 0070  
                               _secret_value 00C5                              _flashy_leds_idx 00B0  
 __end_of_nullifyBadge_segDisplayForceUpdate 2E09  __size_of_nullifyBadge_segDisplayForceUpdate 0006  
       ??_nullifyBadge_segDisplayForceUpdate 007C          ?_nullifyBadge_segDisplayForceUpdate 0070  
         _nullifyBadge_segDisplayForceUpdate 2E03                              ?_marquee_speedy 003A  
                    ??_OSCILLATOR_Initialize 0071                          marquee_speedy@count 003C  
                          ??_TMR0_StartTimer 0071                             __size_of___almod 006E  
                         __end_of_led_circle 2E37                                   ?_slot_Main 0052  
                                 ?_slot_Init 0039                             __size_of___lwdiv 0034  
                           __size_of___lwmod 002D                                 ??_menu_clear 007C  
                          ??_PWM5_Initialize 0071                      __size_of_scheduler_Init 001B  
                                 sprintf@len 0046                                  _currentTask 00B8  
                                 sprintf@val 0044                 __size_of_menu_display_option 0062  
         __size_of_displayL2_EraseSegDisplay 0010                                   _T0CON0bits 0017  
                     _locked_get_unlock_leds 2FE7                             __size_of_isdigit 000E  
                           __size_of_marquee 0077                              ___lwdiv@divisor 0071  
                            ___lwdiv@counter 0076                                 _Shot_Options 00C7  
                        displayCharReverse@k 007B           __size_of_nullifyBadge_irTxRegister 000F  
                                   __ptext10 2045                                     __ptext11 1C29  
                                   __ptext20 22B3                                     __ptext12 07DF  
                                   __ptext21 1CAD                                     __ptext13 1E43  
                                   __ptext30 2130                                     __ptext22 2F1A  
                                   __ptext14 142C                                     __ptext31 24BF  
                                   __ptext23 23C2                                     __ptext15 1609  
                                   __ptext40 2E81                                     __ptext32 2E0F  
                                   __ptext24 258A                                     __ptext16 0819  
                                   __ptext41 2ED9                                     __ptext33 2ECB  
                                   __ptext25 1867                                     __ptext17 00D7  
                                   __ptext50 1A57                                     __ptext42 2DE8  
                                   __ptext34 2E09                                     __ptext26 2702  
                                   __ptext18 2544                                     __ptext51 243D  
                                   __ptext43 2DF2                                     __ptext35 2EE8  
                                   __ptext27 2F50                                     __ptext19 217B  
                                   __ptext60 20D3                                     __ptext52 2E2E  
                                   __ptext44 2250                                     __ptext36 125F  
                                   __ptext28 202A                                     __ptext61 2E4B  
                                   __ptext53 19F2                                     __ptext45 2F63  
                                   __ptext37 2EBD                                     __ptext29 2FE7  
                                   __ptext70 2098                                     __ptext62 21CA  
                                   __ptext54 2F09                                     __ptext46 247E  
                                   __ptext38 200F                                     __ptext71 27AB  
                                   __ptext63 26B0                                     __ptext55 20F1  
                                   __ptext47 25D1                                     __ptext39 2DEB  
                                   __ptext80 2E76                                     __ptext72 2155  
                                   __ptext64 23FC                                     __ptext56 2F2B  
                                   __ptext48 2501                                     __ptext81 2DE5  
                                   __ptext73 2F3D                                     __ptext65 2221  
                                   __ptext57 1200                                     __ptext49 2281  
                                   __ptext90 2E6B                                     __ptext82 2E41  
                                   __ptext74 2FCF                                     __ptext66 2E03  
                                   __ptext58 1AC5                                     __ptext91 2E60  
                                   __ptext83 2DE2                                     __ptext75 2EF8  
                                   __ptext67 2DFD                                     __ptext59 1B38  
                                   __ptext92 2756                                     __ptext84 20B5  
                                   __ptext76 2662                                     __ptext68 21F4  
                                   __ptext93 2E37                                     __ptext85 2DDF  
                                   __ptext77 2E25                                     __ptext69 22E5  
                                   __ptext94 2FB9                                     __ptext86 2DF7  
                                   __ptext78 210F                                     __ptext95 2FA3  
                                   __ptext87 2E15                                     __ptext79 2DEE  
                                   __ptext96 2F8D                                     __ptext88 2E98  
                                   __ptext97 2F77                                     __ptext89 2E8C  
                                   __ptext99 2EB0                                  _locked_Main 142C  
                                _locked_Init 192B                           slot_Setup@taskData 002F  
                                _locked_Exit 0000                                 _SSP1CON1bits 0215  
                           ?_menu_run_option 003B                                  _locked_leds 00A0  
                                _locked_task 012D                              ___almod@divisor 002B  
                                   _led_rand 25D1                             __size_of_sprintf 01CD  
                            ___almod@counter 007A               slot_Running_Animation@taskData 0032  
                                _menu_option 01B6      __end_of_nullifyBadge_segDisplayRegister 2E25  
   __size_of_nullifyBadge_segDisplayRegister 0008            ??_nullifyBadge_segDisplayRegister 0071  
           ?_nullifyBadge_segDisplayRegister 0070              _nullifyBadge_segDisplayRegister 2E1D  
                       marquee@string_length 0048                                menu_Main@data 0057  
                          ??_TMR4_Initialize 0071                            ??_PWM6_Initialize 0071  
                              __size_of_main 00DB                                __size_of_rand 0043  
       __end_of_TMR0_DefaultInterruptHandler 2DDF        __size_of_TMR0_DefaultInterruptHandler 0001  
               _TMR0_DefaultInterruptHandler 2DDE                           __end_of_menu_clear 25D1  
                          displayL2_PutStr@k 0036                        ??_TMR0_Read16bitTimer 0073  
                                 _RC0PPSbits 0EA0                                   _RC1PPSbits 0EA1  
                              menu_Init@data 003B                     __end_of_displayL1_Update 2F09  
                         let_alternate@count 0030                                   _RC2PPSbits 0EA2  
             __size_of_flashy_display_option 005F                     __end_of_displayL2_PutStr 21F4  
              __end_of_flashy_display_option 125F                                   _RC3PPSbits 0EA3  
               __end_of_displayL1_Initialize 2F50                         _curtain_leds_inverse 043E  
                                 _RC4PPSbits 0EA4                                   _RB6PPSbits 0E9E  
                                   int$flags 007E                 displayL2_ForceUpdate@display 007B  
                            locked_Main@data 0057                            ??_TMR2_StartTimer 0071  
         __end_of_INTERRUPT_InterruptManager 0016                   _INTERRUPT_InterruptManager 0004  
                               _SSP1STATbits 0214         nullifyBadge_segDisplayRegister@badge 0071  
                PIN_MANAGER_Initialize@state 0071           schedulerExecute@taskLastSystemTick 00E5  
                         _displayCharReverse 2221                            menu_Init@taskData 0039  
                  __size_of_schedulerExecute 0084               __size_of_displayL2_SetUserLeds 001E  
                            locked_Init@data 003B                __end_of_displayL2_SetUserLeds 210F  
              displayCharReverse@retValLower 0078                displayCharReverse@retValUpper 0079  
                                 _INTCONbits 000B                                  _secret_Main 1E43  
                    __size_of_led_roundabout 0041                                  _secret_Init 180C  
                               ??_slot_Setup 0031                                  _secret_Exit 0000  
                            ??_TMR0_CallBack 0070                                  _NVMCON1bits 0895  
                  _nullifyBadge_platformInit 27AB                 __end_of_displayL1_SetSegChar 243D  
                                _secret_task 0120                               __pstringtext10 3016  
                             __pstringtext11 302B                               __pstringtext20 309F  
                             __pstringtext12 303E                               __pstringtext21 30A8  
                             __pstringtext13 3050                               __pstringtext30 30ED  
                             __pstringtext22 30B1                               __pstringtext14 305D  
                             __pstringtext31 30F3                               __pstringtext23 30BA  
                             __pstringtext15 306A                               __pstringtext40 3120  
                             __pstringtext32 30F8                               __pstringtext24 30C2  
                             __pstringtext16 3076                               __pstringtext41 3125  
                             __pstringtext33 30FD                               __pstringtext25 30CA  
                             __pstringtext17 3081                               __pstringtext42 312A  
                             __pstringtext34 3102                               __pstringtext26 30D2  
                             __pstringtext18 308C                               __pstringtext43 312F  
                             __pstringtext35 3107                               __pstringtext27 30DA  
                             __pstringtext19 3096                               __pstringtext44 3134  
                             __pstringtext36 310C                               __pstringtext28 30E1  
                             __pstringtext45 3139                               __pstringtext37 3111  
                             __pstringtext29 30E7                               __pstringtext46 313E  
                             __pstringtext38 3116                               __pstringtext47 3143  
                             __pstringtext39 311B                               __pstringtext48 3147  
                             __pstringtext49 0000            __end_of_displayL2_EraseSegDisplay 2EF8  
                                   isdigit@c 0072                                     marquee@i 0046  
                                   marquee@j 004A                                     memset@p1 0071  
               __end_of_displayL2_Initialize 217B                          ?_displayCharReverse 0071  
                                ??_menu_Main 0054                                  ??_menu_Init 007C  
                    __size_of_WDT_Initialize 0004                         _locked_get_lock_leds 2130  
          __end_of_nullifyBadge_irTxRegister 2EE8             __size_of_SPI1_Exchange8bitBuffer 004E  
               __end_of_displayL1_SetUserLed 2F3D                                     intlevel1 0000  
                                  sprintf@ap 0043                                    sprintf@cp 0041  
                                  sprintf@sp 002F                             ___lwmod@dividend 002D  
                    ?_PIN_MANAGER_Initialize 0070                                marquee@string 003A  
                __size_of_nullifyBadge_irGet 0005                            __CFG_CLKOUTEN$OFF 0000  
        SPI1_Exchange8bitBuffer@bytesWritten 0078                                  _PPSLOCKbits 0E0F  
                            _PWM1_Initialize 2E60                          flashy_Init@taskData 0039  
                             menu_clear@data 0039                ?_TMR0_DefaultInterruptHandler 0070  
                __size_of_PWM2_LoadDutyValue 0016                         ??_displayCharReverse 0073  
                         __end_of_slot_Setup 2756                            ??_TMR4_StartTimer 0071  
                                ??_slot_Main 0054                                  ??_slot_Init 007C  
                              __pstringtext1 1000                                __pstringtext2 2800  
                              __pstringtext3 2835                                __pstringtext4 285D  
                              __pstringtext5 2880                                __pstringtext6 289E  
                              __pstringtext7 28B9                                __pstringtext8 28D3  
                              __pstringtext9 3000             __end_of_nullifyBadge_irTxRelease 2E8C  
                                   sprintf@c 004A                                     sprintf@f 0031  
                              _flashy_option 0320                             _locked_lock_leds 202A  
                            ___lwmod@divisor 002B                              _TMR0_Initialize 20B5  
                            _PWM2_Initialize 2E6B                                     strlen@cp 0075  
                              _slot_TaskData 04A0                              ___lwmod@counter 007A  
                PWM6_LoadDutyValue@dutyValue 0071                        ?_locked_get_lock_leds 0071  
             __end_of_PIN_MANAGER_Initialize 27AB                             locked_clear@data 0039  
                               ___almod@sign 007B                                  _PWMTMRSbits 061F  
               __end_of_nullifyBadge_irTxClr 2DEB                 __end_of_nullifyBadge_irTxSet 2DEE  
                 __end_of_PWM1_LoadDutyValue 2F8D                        _TMR2_InterruptHandler 00C2  
                               ?_flashy_Main 0052                                 ?_flashy_Init 0039  
